<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2parallel_2list__partition_8h_source" xml:lang="en-US">
<title>list_partition.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/parallel/list_partition.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;__it&#32;and/or&#32;modify&#32;__it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;__it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="comment">//&#32;Written&#32;by&#32;Leonor&#32;Frias&#32;Moya&#32;and&#32;Johannes&#32;Singler.</emphasis>
32 
33 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_LIST_PARTITION_H</emphasis>
34 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_LIST_PARTITION_H&#32;1</emphasis>
35 
36 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
40 {
48 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter&gt;
49 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
50 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ade684b015a28793b63a9e8f14c096066">__shrink_and_double</link>(std::vector&lt;_IIter&gt;&amp;&#32;__os_starts,
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;__count_to_two,&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;__range_length,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__make_twice)
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;++__count_to_two;
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__make_twice&#32;||&#32;__count_to_two&#32;&lt;&#32;2)
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1adf42868b36ffd42054d85449f63b12aa">__shrink</link>(__os_starts,&#32;__count_to_two,&#32;__range_length);
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__os_starts.resize((__os_starts.size()&#32;-&#32;1)&#32;*&#32;2&#32;+&#32;1);
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__count_to_two&#32;=&#32;0;
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;}
63 
68 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter&gt;
69 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
70 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1adf42868b36ffd42054d85449f63b12aa">__shrink</link>(std::vector&lt;_IIter&gt;&amp;&#32;__os_starts,&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;__count_to_two,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;__range_length)
72 &#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;std::vector&lt;_IIter&gt;::size_type&#32;__i&#32;=&#32;0;
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;&lt;=&#32;(__os_starts.size()&#32;/&#32;2);&#32;++__i)
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__os_starts[__i]&#32;=&#32;__os_starts[__i&#32;*&#32;2];
76 &#32;&#32;&#32;&#32;&#32;&#32;__range_length&#32;*=&#32;2;
77 &#32;&#32;&#32;&#32;}
78 
99 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FunctorType&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
101 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad3be0fcbf87a1f43b3ecd406841e7b0d">list_partition</link>(<emphasis role="keyword">const</emphasis>&#32;_IIter&#32;__begin,&#32;<emphasis role="keyword">const</emphasis>&#32;_IIter&#32;__end,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter*&#32;__starts,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__lengths,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__num_parts,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FunctorType&amp;&#32;__f,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__oversampling&#32;=&#32;0)
104 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__make_twice&#32;=&#32;<emphasis role="keyword">false</emphasis>;
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;resizing&#32;algorithm&#32;is&#32;chosen&#32;according&#32;to&#32;the&#32;oversampling&#32;factor.</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__oversampling&#32;==&#32;0)
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_twice&#32;=&#32;<emphasis role="keyword">true</emphasis>;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__oversampling&#32;=&#32;1;
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;_IIter&gt;&#32;__os_starts(2&#32;*&#32;__oversampling&#32;*&#32;__num_parts&#32;+&#32;1);
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;__os_starts[0]&#32;=&#32;__begin;
117 &#32;&#32;&#32;&#32;&#32;&#32;_IIter&#32;__prev&#32;&#32;=&#32;__begin,&#32;__it&#32;=&#32;__begin;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__dist_limit&#32;=&#32;0,&#32;__dist&#32;=&#32;0;
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__cur&#32;=&#32;1,&#32;__next&#32;=&#32;1;
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__range_length&#32;=&#32;1;
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__count_to_two&#32;=&#32;0;
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__it&#32;!=&#32;__end)
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next;
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__cur&#32;&lt;&#32;__os_starts.size()&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link>&#32;__it&#32;!=&#32;__end;&#32;++__cur)
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__dist_limit&#32;+=&#32;__range_length;
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dist&#32;&lt;&#32;__dist_limit&#32;<link linkend="__classes_2lib_2include_2iso646_8h_1aa3d7d535cf450b91b9cb6d9cee2edbb9">and</link>&#32;__it&#32;!=&#32;__end;&#32;++__dist)
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__f(__it);
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__it;
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__os_starts[__cur]&#32;=&#32;__it;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;compare&#32;for&#32;end&#32;and&#32;not&#32;__cur&#32;&lt;&#32;__os_starts.size()&#32;,&#32;because</emphasis>
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__cur&#32;could&#32;be&#32;==&#32;__os_starts.size()&#32;as&#32;well</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__it&#32;==&#32;__end)
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
140 
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ade684b015a28793b63a9e8f14c096066">__shrink_and_double</link>(__os_starts,&#32;__count_to_two,&#32;__range_length,
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_twice);
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__os_starts.size()&#32;/&#32;2&#32;+&#32;1;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculation&#32;of&#32;the&#32;parts&#32;(one&#32;must&#32;be&#32;extracted&#32;from&#32;__current</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;because&#32;the&#32;partition&#32;beginning&#32;at&#32;end,&#32;consists&#32;only&#32;of</emphasis>
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;itself).</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__size_part&#32;=&#32;(__cur&#32;-&#32;1)&#32;/&#32;__num_parts;
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__size_greater&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((__cur&#32;-&#32;1)&#32;%&#32;__num_parts);
151 &#32;&#32;&#32;&#32;&#32;&#32;__starts[0]&#32;=&#32;__os_starts[0];
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__index&#32;=&#32;0;
154 
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Smallest&#32;partitions.</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;1;&#32;__i&#32;&lt;&#32;(__num_parts&#32;+&#32;1&#32;-&#32;__size_greater);&#32;++__i)
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lengths[__i&#32;-&#32;1]&#32;=&#32;&#32;__size_part&#32;*&#32;__range_length;
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__index&#32;+=&#32;__size_part;
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__starts[__i]&#32;=&#32;__os_starts[__index];
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
162 
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Biggest&#32;partitions.</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;__num_parts&#32;+&#32;1&#32;-&#32;__size_greater;&#32;__i&#32;&lt;=&#32;__num_parts;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i)
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lengths[__i&#32;-&#32;1]&#32;=&#32;&#32;(__size_part+1)&#32;*&#32;__range_length;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__index&#32;+=&#32;(__size_part+1);
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__starts[__i]&#32;=&#32;__os_starts[__index];
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Correction&#32;of&#32;the&#32;end&#32;size&#32;(the&#32;end&#32;iteration&#32;has&#32;not&#32;finished).</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;__lengths[__num_parts&#32;-&#32;1]&#32;-=&#32;(__dist_limit&#32;-&#32;__dist);
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__dist;
176 &#32;&#32;&#32;&#32;}
177 }
178 
179 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_LIST_PARTITION_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
