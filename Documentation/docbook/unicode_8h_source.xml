<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_unicode_8h_source" xml:lang="en-US">
<title>unicode.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/unicode.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_unicode__autogenerated_8h">unicode_autogenerated.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
10 
11 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
12 {
13 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
14 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_string_delimiter(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
15 &#32;&#32;&#32;&#32;{
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>;
17 &#32;&#32;&#32;&#32;}
18 
19 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
20 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_ascii_letter(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
21 &#32;&#32;&#32;&#32;{
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>)&#32;||&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;Z&apos;</emphasis>);
23 &#32;&#32;&#32;&#32;}
24 
25 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
26 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_binary_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
27 &#32;&#32;&#32;&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;1&apos;</emphasis>;
29 &#32;&#32;&#32;&#32;}
30 
31 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
32 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_octal_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
33 &#32;&#32;&#32;&#32;{
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;7&apos;</emphasis>);
35 &#32;&#32;&#32;&#32;}
36 
37 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
38 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_decimal_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
39 &#32;&#32;&#32;&#32;{
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;9&apos;</emphasis>);
41 &#32;&#32;&#32;&#32;}
42 
43 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_hexadecimal_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
45 &#32;&#32;&#32;&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U&apos;f&apos;&#32;&amp;&amp;&#32;(1ull&#32;&lt;&lt;&#32;(static_cast&lt;uint_least64_t&gt;(c)&#32;-&#32;0x30u))&#32;&amp;&#32;0x7E0000007E03FFull;
47 &#32;&#32;&#32;&#32;}
48 
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
50 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&#32;hex_to_dec(<emphasis role="keyword">const</emphasis>&#32;T&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
52 &#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&gt;)
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&gt;=&#32;0x41u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&gt;=&#32;&apos;A&apos;</emphasis>
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;10u&#32;+&#32;(c&#32;|&#32;0x20u)&#32;-&#32;0x61u&#32;<emphasis role="comment">//&#32;-&#32;&apos;a&apos;</emphasis>
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;c&#32;-&#32;0x30u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;&apos;0&apos;</emphasis>
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hex_to_dec(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(c));
60 &#32;&#32;&#32;&#32;}
61 
62 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_horizontal_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
64 &#32;&#32;&#32;&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_ascii_horizontal_whitespace(c)&#32;||&#32;is_non_ascii_horizontal_whitespace(c);
66 &#32;&#32;&#32;&#32;}
67 
68 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_vertical_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
70 &#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_ascii_vertical_whitespace(c)&#32;||&#32;is_non_ascii_vertical_whitespace(c);
72 &#32;&#32;&#32;&#32;}
73 
74 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
76 &#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_horizontal_whitespace(c)&#32;||&#32;is_vertical_whitespace(c);
78 &#32;&#32;&#32;&#32;}
79 
80 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_bare_key_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
82 &#32;&#32;&#32;&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_ascii_bare_key_character(c)
84 <emphasis role="preprocessor">#if&#32;TOML_LANG_UNRELEASED&#32;</emphasis><emphasis role="comment">//&#32;toml/pull/891&#32;(unicode&#32;bare&#32;keys)</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_non_ascii_bare_key_character(c)
86 <emphasis role="preprocessor">#endif</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
88 &#32;&#32;&#32;&#32;}
89 
90 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_value_terminator(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
92 &#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_whitespace(c)&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;]&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;}&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;,&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;#&apos;</emphasis>;
94 &#32;&#32;&#32;&#32;}
95 
96 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_control_character(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&lt;=&#32;<emphasis role="stringliteral">&apos;\u001F&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="stringliteral">&apos;\u007F&apos;</emphasis>;
100 &#32;&#32;&#32;&#32;}
101 
102 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_control_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
104 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u001F&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u007F&apos;</emphasis>;
106 &#32;&#32;&#32;&#32;}
107 
108 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_nontab_control_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
110 &#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u0008&apos;</emphasis>&#32;||&#32;(c&#32;&gt;=&#32;U<emphasis role="stringliteral">&apos;\u000A&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u001F&apos;</emphasis>)&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u007F&apos;</emphasis>;
112 &#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_unicode_surrogate(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&gt;=&#32;0xD800u&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;0xDFFF;
118 &#32;&#32;&#32;&#32;}
119 
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>utf8_decoder
121 &#32;&#32;&#32;&#32;{
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;utf8_decoder&#32;based&#32;on&#32;this:&#32;https://bjoern.hoehrmann.de/utf-8/decoder/dfa/</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copyright&#32;(c)&#32;2008-2009&#32;Bjoern&#32;Hoehrmann&#32;&lt;bjoern@hoehrmann.de&gt;</emphasis>
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&#32;state{};
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char32_t</emphasis>&#32;codepoint{};
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;state_table[]{
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;7,&#32;&#32;7,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;8,&#32;&#32;8,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;10,&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;4,&#32;&#32;3,&#32;&#32;3,&#32;&#32;11,&#32;6,&#32;&#32;6,
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6,&#32;&#32;5,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;12,&#32;24,&#32;36,&#32;60,&#32;96,&#32;84,&#32;12,&#32;12,&#32;12,&#32;48,&#32;72,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;0,&#32;&#32;12,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;12,&#32;12,&#32;12,&#32;12,&#32;0,&#32;&#32;12,&#32;0,&#32;&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;36,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,&#32;36,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>()&#32;const&#32;noexcept
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;state&#32;==&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;12u&#32;};
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_code_point()&#32;const&#32;noexcept
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;state&#32;==&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{};
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;needs_more_input()&#32;const&#32;noexcept
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!has_code_point()&#32;&amp;&amp;&#32;!<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>();
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;<emphasis role="keywordtype">byte</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>());
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;state_table[<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>];
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char32_t</emphasis><emphasis role="keyword">&gt;</emphasis>(has_code_point()&#32;?&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;255u&#32;}&#32;&gt;&gt;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)&#32;&amp;&#32;<emphasis role="keywordtype">byte</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>&#32;&amp;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;63u&#32;})
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&gt;(codepoint)&#32;&lt;&lt;&#32;6));
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;state_table[state&#32;+&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;256u&#32;}&#32;+&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>];
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(c));
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
182 
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset()&#32;noexcept
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;{};
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
188 &#32;&#32;&#32;&#32;};
189 
190 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
191 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a59540c22f4b7e10864095f21c67e0c69">is_ascii</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
193 }
194 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
195 
197 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
