<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_parser_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/parser.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/parser.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;preprocessor.h&quot;<?linebreak?>#include &quot;table.h&quot;<?linebreak?>#include &quot;parse_result.h&quot;<?linebreak?>#include &quot;header_start.h&quot;<?linebreak?>#include &quot;header_end.h&quot;<?linebreak?></programlisting>Include dependency graph for parser.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespaceliterals">literals</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1a6b22a2b999bcc2d61e471470a4ef8e96">parse</link> (std::string_view doc, std::string_view source_path={})</para>

<para>Parses a TOML document from a string view. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1a7a51328708d4b49b888c396e6cca1b3b">parse</link> (std::string_view doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp;source_path)</para>

<para>Parses a TOML document from a string view. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1a46871a821db14b2bcd5b5b9cc4571317">parse_file</link> (std::string_view file_path)</para>

<para>Parses a TOML document from a file. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1a58525a51104cd5748783c3760f696239">parse</link> (std::string_view doc, std::wstring_view source_path)</para>

<para>Parses a TOML document from a string view. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1ab8b05800fe5d10466ca28923ad2a19da">parse</link> (std::istream &amp;doc, std::wstring_view source_path)</para>

<para>Parses a TOML document from a stream. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1ac97dbe87fec6005fded88d67b6aa920e">parse_file</link> (std::wstring_view file_path)</para>

<para>Parses a TOML document from a file. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1aa540b87956f70abc88b2071b257ddba4">parse</link> (std::istream &amp;doc, std::string_view source_path={})</para>

<para>Parses a TOML document from a stream. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_parser_8h_1a7daecd4e375556f01d626c178620a9b2">parse</link> (std::istream &amp;doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp;source_path)</para>

<para>Parses a TOML document from a stream. </para>
</listitem>
            <listitem><para><link linkend="_namespaceliterals_1a3e5a9bce6e1a524c7f725af657fc2f3e">literals::TOML_ABI_NAMESPACE_BOOL</link> (<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>, lit_ex, lit_noex)</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_namespaceliterals_1a55a8a52105ffff2aa5c6d174087e7d0a">literals::operator&quot;&quot;_toml</link> (const char *str, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)</para>

<para>Parses TOML data from a string literal. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_parser_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8h_1aa188664cce4904ae8832f7fa59f10211">TOML_ABI_NAMESPACE_END</link></para>
</listitem>
            <listitem><para><link linkend="_namespaceliterals_1a179ab2ccfe25b96becb1decf42648ca9">literals::TOML_ABI_NAMESPACE_END</link></para>
</listitem>
            <listitem><para><link linkend="_parser_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_parser_8h_1a7daecd4e375556f01d626c178620a9b2"/><section>
    <title>parse()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::istream &amp; doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp; source_path)</computeroutput></para><para>

<para>Parses a TOML document from a stream. </para>
</para>

<para>\detail \cpp std::stringstream ss; ss &lt;&lt; &quot;a = 3&quot;sv;</para>

<para>auto tbl = toml::parse(ss, &quot;foo.toml&quot;); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8h_a7daecd4e375556f01d626c178620a9b2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_parser_8h_1aa540b87956f70abc88b2071b257ddba4"/><section>
    <title>parse()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::istream &amp; doc, std::string_view source_path = <computeroutput>{}</computeroutput>
)</computeroutput></para><para>

<para>Parses a TOML document from a stream. </para>
</para>

<para>\detail \cpp std::stringstream ss; ss &lt;&lt; &quot;a = 3&quot;sv;</para>

<para>auto tbl = toml::parse(ss); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8h_1ab8b05800fe5d10466ca28923ad2a19da"/><section>
    <title>parse()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::istream &amp; doc, std::wstring_view source_path)</computeroutput></para><para>

<para>Parses a TOML document from a stream. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>\detail \cpp std::stringstream ss; ss &lt;&lt; &quot;a = 3&quot;sv;</para>

<para>auto tbl = toml::parse(ss); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8h_1a7a51328708d4b49b888c396e6cca1b3b"/><section>
    <title>parse()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::string_view doc, <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">std::string</link> &amp;&amp; source_path)</computeroutput></para><para>

<para>Parses a TOML document from a string view. </para>
</para>

<para>\detail \cpp auto tbl = toml::parse(&quot;a = 3&quot;sv, &quot;foo.toml&quot;); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="parser_8h_a7a51328708d4b49b888c396e6cca1b3b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_parser_8h_1a6b22a2b999bcc2d61e471470a4ef8e96"/><section>
    <title>parse()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::string_view doc, std::string_view source_path = <computeroutput>{}</computeroutput>
)</computeroutput></para><para>

<para>Parses a TOML document from a string view. </para>
</para>

<para>\detail \cpp auto tbl = toml::parse(&quot;a = 3&quot;sv); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8h_1a58525a51104cd5748783c3760f696239"/><section>
    <title>parse()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse (std::string_view doc, std::wstring_view source_path)</computeroutput></para><para>

<para>Parses a TOML document from a string view. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>\detail \cpp auto tbl = toml::parse(&quot;a = 3&quot;sv, L&quot;foo.toml&quot;); std::cout &lt;&lt; tbl[&quot;a&quot;] &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out 3 \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>doc</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8. </para>
</entry>
                            </row>
                            <row>
<entry>source_path</entry><entry>
<para>The path used to initialize each node&apos;s <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source()</link>.path</computeroutput>. If you don&apos;t have a path (or you have no intention of using paths in diagnostics) then this parameter can safely be left blank.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8h_1a46871a821db14b2bcd5b5b9cc4571317"/><section>
    <title>parse_file()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>parse_file</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse_file</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse_file (std::string_view file_path)</computeroutput></para><para>

<para>Parses a TOML document from a file. </para>
</para>

<para>\detail \cpp toml::parse_result get_foo_toml() { return toml::parse_file(&quot;foo.toml&quot;); } \ecpp</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>file_path</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_parser_8h_1ac97dbe87fec6005fded88d67b6aa920e"/><section>
    <title>parse_file()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>parse_file</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>parse_file</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classparse__result">parse_result</link> <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> parse_file (std::wstring_view file_path)</computeroutput></para><para>

<para>Parses a TOML document from a file. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>\detail \cpp toml::parse_result get_foo_toml() { return toml::parse_file(L&quot;foo.toml&quot;); } \ecpp</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>file_path</entry><entry>
<para>The TOML document to parse. Must be valid UTF-8.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{With exceptions} A toml::table. \conditional_return{Without exceptions} A toml::parse_result. </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_parser_8h_1aa188664cce4904ae8832f7fa59f10211"/><section>
    <title>TOML_ABI_NAMESPACE_END</title>
<indexterm><primary>TOML_ABI_NAMESPACE_END</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>TOML_ABI_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_ABI_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_parser_8h_1afa65688cac47ce86021fef8d739f9fd8"/><section>
    <title>TOML_NAMESPACE_END</title>
<indexterm><primary>TOML_NAMESPACE_END</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>TOML_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_parser_8h_1a24e5c42f7e94b0b0f3212744874731e6"/><section>
    <title>TOML_NAMESPACE_START</title>
<indexterm><primary>TOML_NAMESPACE_START</primary><secondary>parser.h</secondary></indexterm>
<indexterm><primary>parser.h</primary><secondary>TOML_NAMESPACE_START</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_START</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex)
</programlisting></section>
</section>
</section>
