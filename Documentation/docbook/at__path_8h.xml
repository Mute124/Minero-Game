<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_at__path_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/at_path.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/at_path.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;forward_declarations.h&quot;<?linebreak?></programlisting>Include dependency graph for at_path.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="at__path_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="at__path_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link> (const node &amp;root, std::string_view <link linkend="_classpath">path</link>) noexcept</para>

<para>Returns a const view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_at__path_8h_1a9a285539f5cc9414d5b4a473579c3538">at_path</link> (node &amp;root, std::wstring_view <link linkend="_classpath">path</link>)</para>

<para>Returns a view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> <link linkend="_at__path_8h_1afae87eb7369ecf9cc76512781a1d9a89">at_path</link> (const node &amp;root, std::wstring_view <link linkend="_classpath">path</link>)</para>

<para>Returns a const view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_at__path_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link></para>
</listitem>
            <listitem><para><link linkend="_at__path_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0"/><section>
    <title>at_path()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>at_path.h</secondary></indexterm>
<indexterm><primary>at_path.h</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> at_path (const node &amp; root, std::string_view path)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::at_path(node&amp;, std::string_view) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="at__path_8h_a8fd45f603d445b914dc921213e6f2dc0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_at__path_8h_1afae87eb7369ecf9cc76512781a1d9a89"/><section>
    <title>at_path()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>at_path.h</secondary></indexterm>
<indexterm><primary>at_path.h</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> at_path (const node &amp; root, std::wstring_view path)</computeroutput></para><para>

<para>Returns a const view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para><formalpara><title>See also</title>

<para>#toml::at_path(node&amp;, std::string_view) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_at__path_8h_1a9a285539f5cc9414d5b4a473579c3538"/><section>
    <title>at_path()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>at_path</primary><secondary>at_path.h</secondary></indexterm>
<indexterm><primary>at_path.h</primary><secondary>at_path</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link> at_path (node &amp; root, std::wstring_view path)</computeroutput></para><para>

<para>Returns a view of the node matching a fully-qualified &quot;TOML path&quot;. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para><formalpara><title>See also</title>

<para>#toml::at_path(node&amp;, std::string_view) </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_at__path_8h_1afa65688cac47ce86021fef8d739f9fd8"/><section>
    <title>TOML_NAMESPACE_END</title>
<indexterm><primary>TOML_NAMESPACE_END</primary><secondary>at_path.h</secondary></indexterm>
<indexterm><primary>at_path.h</primary><secondary>TOML_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_at__path_8h_1a24e5c42f7e94b0b0f3212744874731e6"/><section>
    <title>TOML_NAMESPACE_START</title>
<indexterm><primary>TOML_NAMESPACE_START</primary><secondary>at_path.h</secondary></indexterm>
<indexterm><primary>at_path.h</primary><secondary>TOML_NAMESPACE_START</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_START</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
</programlisting></section>
</section>
</section>
