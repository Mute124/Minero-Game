<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual" xml:lang="en-US">
<title>manual</title>
<indexterm><primary>manual</primary></indexterm>

<para></para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md167">
<title>GLM 0.9.9 Manual</title>

<para></para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md169">
<title>Table of Contents</title>

<para><itemizedlist>
<listitem>
<para>0. Licenses</para>
</listitem><listitem>
<para>1. Getting started</para>
</listitem><listitem>
<para>1.1. Using global headers</para>
</listitem><listitem>
<para>1.2. Using separated headers</para>
</listitem><listitem>
<para>1.3. Using extension headers</para>
</listitem><listitem>
<para>1.4. Dependencies</para>
</listitem><listitem>
<para>1.5. Finding GLM with CMake</para>
</listitem><listitem>
<para>2. Preprocessor configurations</para>
</listitem><listitem>
<para>2.1. GLM\_FORCE\_MESSAGES: Platform auto detection and default configuration</para>
</listitem><listitem>
<para>2.2. GLM\_FORCE\_PLATFORM\_UNKNOWN: Force GLM to no detect the build platform</para>
</listitem><listitem>
<para>2.3. GLM\_FORCE\_COMPILER\_UNKNOWN: Force GLM to no detect the C++ compiler</para>
</listitem><listitem>
<para>2.4. GLM\_FORCE\_ARCH\_UNKNOWN: Force GLM to no detect the build architecture</para>
</listitem><listitem>
<para>2.5. GLM\_FORCE\_CXX\_UNKNOWN: Force GLM to no detect the C++ standard</para>
</listitem><listitem>
<para>2.6. GLM\_FORCE\_CXX**: C++ language detection</para>
</listitem><listitem>
<para>2.7. GLM\_FORCE\_EXPLICIT\_CTOR: Requiring explicit conversions</para>
</listitem><listitem>
<para>2.8. GLM\_FORCE\_INLINE: Force inline</para>
</listitem><listitem>
<para>2.9. GLM\_FORCE\_ALIGNED\_GENTYPES: Force GLM to enable aligned types</para>
</listitem><listitem>
<para>2.10. GLM\_FORCE\_DEFAULT\_ALIGNED\_GENTYPES: Force GLM to use aligned types by default</para>
</listitem><listitem>
<para>2.11. GLM\_FORCE\_INTRINSICS: Using SIMD optimizations</para>
</listitem><listitem>
<para>2.12. GLM\_FORCE\_PRECISION\_**: Default precision</para>
</listitem><listitem>
<para>2.13. GLM\_FORCE\_SINGLE\_ONLY: Removed explicit 64-bits floating point types</para>
</listitem><listitem>
<para>2.14. GLM\_FORCE\_SWIZZLE: Enable swizzle operators</para>
</listitem><listitem>
<para>2.15. GLM\_FORCE\_XYZW\_ONLY: Only exposes x, y, z and w components</para>
</listitem><listitem>
<para>2.16. GLM\_FORCE\_LEFT\_HANDED: Force left handed coordinate system</para>
</listitem><listitem>
<para>2.17. GLM\_FORCE\_DEPTH\_ZERO\_TO\_ONE: Force the use of a clip space between 0 to 1</para>
</listitem><listitem>
<para>2.18. GLM\_FORCE\_SIZE\_T\_LENGTH: Vector and matrix static size type</para>
</listitem><listitem>
<para>2.19. GLM\_FORCE\_UNRESTRICTED\_GENTYPE: Removing genType restriction</para>
</listitem><listitem>
<para>2.20. GLM\_FORCE\_SILENT\_WARNINGS: Silent C++ warnings from language extensions</para>
</listitem><listitem>
<para>2.21. GLM\_FORCE\_QUAT\_DATA\_WXYZ: Force GLM to store quat data as w,x,y,z instead of x,y,z,w</para>
</listitem><listitem>
<para>3. Stable extensions</para>
</listitem><listitem>
<para>3.1. Scalar types</para>
</listitem><listitem>
<para>3.2. Scalar functions</para>
</listitem><listitem>
<para>3.3. Vector types</para>
</listitem><listitem>
<para>3.4. Vector types with precision qualifiers</para>
</listitem><listitem>
<para>3.5. Vector functions</para>
</listitem><listitem>
<para>3.6. Matrix types</para>
</listitem><listitem>
<para>3.7. Matrix types with precision qualifiers</para>
</listitem><listitem>
<para>3.8. Matrix functions</para>
</listitem><listitem>
<para>3.9. Quaternion types</para>
</listitem><listitem>
<para>3.10. Quaternion types with precision qualifiers</para>
</listitem><listitem>
<para>3.11. Quaternion functions</para>
</listitem><listitem>
<para>4. Recommended extensions</para>
</listitem><listitem>
<para>4.1. GLM_GTC_bitfield</para>
</listitem><listitem>
<para>4.2. GLM_GTC_color_space</para>
</listitem><listitem>
<para>4.3. GLM_GTC_constants</para>
</listitem><listitem>
<para>4.4. GLM_GTC_epsilon</para>
</listitem><listitem>
<para>4.5. GLM_GTC_integer</para>
</listitem><listitem>
<para>4.6. GLM_GTC_matrix_access</para>
</listitem><listitem>
<para>4.7. GLM_GTC_matrix_integer</para>
</listitem><listitem>
<para>4.8. GLM_GTC_matrix_inverse</para>
</listitem><listitem>
<para>4.9. GLM_GTC_matrix_transform</para>
</listitem><listitem>
<para>4.10. GLM_GTC_noise</para>
</listitem><listitem>
<para>4.11. GLM_GTC_packing</para>
</listitem><listitem>
<para>4.12. GLM_GTC_quaternion</para>
</listitem><listitem>
<para>4.13. GLM_GTC_random</para>
</listitem><listitem>
<para>4.14. GLM_GTC_reciprocal</para>
</listitem><listitem>
<para>4.15. GLM_GTC_round</para>
</listitem><listitem>
<para>4.16. GLM_GTC_type_alignment</para>
</listitem><listitem>
<para>4.17. GLM_GTC_type_precision</para>
</listitem><listitem>
<para>4.18. GLM_GTC_type_ptr</para>
</listitem><listitem>
<para>4.19. GLM_GTC_ulp</para>
</listitem><listitem>
<para>4.20. GLM_GTC_vec1</para>
</listitem><listitem>
<para>5. OpenGL interoperability</para>
</listitem><listitem>
<para>5.1. GLM Replacements for deprecated OpenGL functions</para>
</listitem><listitem>
<para>5.2. GLM Replacements for GLU functions</para>
</listitem><listitem>
<para>6. Known issues</para>
</listitem><listitem>
<para>6.1. Not function</para>
</listitem><listitem>
<para>6.2. Precision qualifiers support</para>
</listitem><listitem>
<para>7. FAQ</para>
</listitem><listitem>
<para>7.1 Why GLM follows GLSL specification and conventions?</para>
</listitem><listitem>
<para>7.2. Does GLM run GLSL programs?</para>
</listitem><listitem>
<para>7.3. Does a GLSL compiler build GLM codes?</para>
</listitem><listitem>
<para>7.4. Should I use ‘GTX’ extensions?</para>
</listitem><listitem>
<para>7.5. Where can I ask my questions?</para>
</listitem><listitem>
<para>7.6. Where can I find the documentation of extensions?</para>
</listitem><listitem>
<para>7.7. Should I use &apos;using namespace glm;&apos;?</para>
</listitem><listitem>
<para>7.8. Is GLM fast?</para>
</listitem><listitem>
<para>7.9. When I build with Visual C++ with /w4 warning level, I have warnings...</para>
</listitem><listitem>
<para>7.10. Why some GLM functions can crash because of division by zero?</para>
</listitem><listitem>
<para>7.11. What unit for angles us used in GLM?</para>
</listitem><listitem>
<para>7.12. Windows headers cause build errors...</para>
</listitem><listitem>
<para>7.13. Constant expressions support</para>
</listitem><listitem>
<para>8. Code samples</para>
</listitem><listitem>
<para>8.1. Compute a triangle normal</para>
</listitem><listitem>
<para>8.2. Matrix transform</para>
</listitem><listitem>
<para>8.3. Vector types</para>
</listitem><listitem>
<para>8.4. Lighting</para>
</listitem><listitem>
<para>9. Contributing to GLM</para>
</listitem><listitem>
<para>9.1. Submitting bug reports</para>
</listitem><listitem>
<para>9.2. Contributing to GLM with pull request</para>
</listitem><listitem>
<para>9.3. Coding style</para>
</listitem><listitem>
<para>10. References</para>
</listitem><listitem>
<para>10.1. OpenGL specifications</para>
</listitem><listitem>
<para>10.2. External links</para>
</listitem><listitem>
<para>10.3. Projects using GLM</para>
</listitem><listitem>
<para>10.4. Tutorials using GLM</para>
</listitem><listitem>
<para>10.5. Equivalent for other languages</para>
</listitem><listitem>
<para>10.6. Alternatives to GLM</para>
</listitem><listitem>
<para>10.7. Acknowledgements</para>
</listitem></itemizedlist>
</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md171">
<title>&lt;a name=&quot;section0&quot;&gt;&lt;/a&gt; Licenses</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md172">
<title>The Happy Bunny License (Modified MIT License)</title>

<para>Copyright (c) 2005 - G-Truc Creation</para>

<para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para>

<para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>

<para>Restrictions: By making use of the Software for military purposes, you choose to make a Bunny unhappy.</para>

<para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</para>

<para></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md173">
<title>The MIT License</title>

<para>Copyright (c) 2005 - G-Truc Creation</para>

<para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para>

<para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para>

<para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</para>

<para></para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md175">
<title>&lt;a name=&quot;section1&quot;&gt;&lt;/a&gt; 1. Getting started</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md176">
<title>&lt;a name=&quot;section1_1&quot;&gt;&lt;/a&gt; 1.1. Using global headers</title>

<para>GLM is a header-only library, and thus does not need to be compiled. We can use GLM&apos;s implementation of GLSL&apos;s mathematics functionality by including the <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput> header:</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;
</computeroutput></literallayout></para>

<para>To extend the feature set supported by GLM and keeping the library as close to GLSL as possible, new features are implemented as extensions that can be included thought a separated header: <literallayout><computeroutput>//&#32;Include&#32;all&#32;GLM&#32;core&#32;/&#32;GLSL&#32;features
#include&#32;&lt;glm/glm.hpp&gt;&#32;//&#32;vec2,&#32;vec3,&#32;mat4,&#32;radians

//&#32;Include&#32;all&#32;GLM&#32;extensions
#include&#32;&lt;glm/ext.hpp&gt;&#32;//&#32;perspective,&#32;translate,&#32;rotate

glm::mat4&#32;transform(glm::vec2&#32;const&amp;&#32;Orientation,&#32;glm::vec3&#32;const&amp;&#32;Translate,&#32;glm::vec3&#32;const&amp;&#32;Up)
{
&#32;&#32;&#32;&#32;glm::mat4&#32;Proj&#32;=&#32;glm::perspective(glm::radians(45.f),&#32;1.33f,&#32;0.1f,&#32;10.f);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewTranslate&#32;=&#32;glm::translate(glm::mat4(1.f),&#32;Translate);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewRotateX&#32;=&#32;glm::rotate(ViewTranslate,&#32;Orientation.y,&#32;Up);
&#32;&#32;&#32;&#32;glm::mat4&#32;View&#32;=&#32;glm::rotate(ViewRotateX,&#32;Orientation.x,&#32;Up);
&#32;&#32;&#32;&#32;glm::mat4&#32;Model&#32;=&#32;glm::mat4(1.0f);
&#32;&#32;&#32;&#32;return&#32;Proj&#32;*&#32;View&#32;*&#32;Model;
}
</computeroutput></literallayout></para>

<para><emphasis>Note: Including <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput> and <computeroutput>&lt;glm/ext.hpp&gt;</computeroutput> is convenient but pull a lot of code which will significantly increase build time, particularly if these files are included in all source files. We may prefer to use the approaches describe in the two following sections to keep the project build fast.</emphasis></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md177">
<title>&lt;a name=&quot;section1_2&quot;&gt;&lt;/a&gt; 1.2. Using separated headers</title>

<para>GLM relies on C++ templates heavily, and may significantly increase compilation times for projects that use it. Hence, user projects could only include the features they actually use. Following is the list of all the core features, based on GLSL specification, headers: <literallayout><computeroutput>#include&#32;&lt;glm/vec2.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;vec2,&#32;bvec2,&#32;dvec2,&#32;ivec2&#32;and&#32;uvec2
#include&#32;&lt;glm/vec3.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;vec3,&#32;bvec3,&#32;dvec3,&#32;ivec3&#32;and&#32;uvec3
#include&#32;&lt;glm/vec4.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;vec4,&#32;bvec4,&#32;dvec4,&#32;ivec4&#32;and&#32;uvec4
#include&#32;&lt;glm/mat2x2.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat2,&#32;dmat2
#include&#32;&lt;glm/mat2x3.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat2x3,&#32;dmat2x3
#include&#32;&lt;glm/mat2x4.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat2x4,&#32;dmat2x4
#include&#32;&lt;glm/mat3x2.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat3x2,&#32;dmat3x2
#include&#32;&lt;glm/mat3x3.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat3,&#32;dmat3
#include&#32;&lt;glm/mat3x4.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat3x4,&#32;dmat2
#include&#32;&lt;glm/mat4x2.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat4x2,&#32;dmat4x2
#include&#32;&lt;glm/mat4x3.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat4x3,&#32;dmat4x3
#include&#32;&lt;glm/mat4x4.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat4,&#32;dmat4
#include&#32;&lt;glm/common.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;common&#32;functions:&#32;abs,&#32;min,&#32;mix,&#32;isnan,&#32;fma,&#32;etc.
#include&#32;&lt;glm/exponential.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;exponential&#32;functions:&#32;pow,&#32;log,&#32;exp2,&#32;sqrt,&#32;etc.
#include&#32;&lt;glm/geometry.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;geometry&#32;functions:&#32;dot,&#32;cross,&#32;reflect,&#32;etc.
#include&#32;&lt;glm/integer.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;integer&#32;functions:&#32;findMSB,&#32;bitfieldExtract,&#32;etc.
#include&#32;&lt;glm/matrix.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;matrix&#32;functions:&#32;transpose,&#32;inverse,&#32;etc.
#include&#32;&lt;glm/packing.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;packing&#32;functions:&#32;packUnorm4x8,&#32;unpackHalf2x16,&#32;etc.
#include&#32;&lt;glm/trigonometric.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;trigonometric&#32;functions:&#32;radians,&#32;cos,&#32;asin,&#32;etc.
#include&#32;&lt;glm/vector_relational.hpp&gt;&#32;&#32;//&#32;all&#32;the&#32;GLSL&#32;vector&#32;relational&#32;functions:&#32;equal,&#32;less,&#32;etc.
</computeroutput></literallayout></para>

<para>The following is a code sample using separated core headers and an extension: <literallayout><computeroutput>//&#32;Include&#32;GLM&#32;core&#32;features
#include&#32;&lt;glm/vec2.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;vec2
#include&#32;&lt;glm/vec3.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;vec3
#include&#32;&lt;glm/mat4x4.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat4
#include&#32;&lt;glm/trigonometric.hpp&gt;&#32;&#32;//radians

//&#32;Include&#32;GLM&#32;extension
#include&#32;&lt;glm/ext/matrix_transform.hpp&gt;&#32;//&#32;perspective,&#32;translate,&#32;rotate

glm::mat4&#32;transform(glm::vec2&#32;const&amp;&#32;Orientation,&#32;glm::vec3&#32;const&amp;&#32;Translate,&#32;glm::vec3&#32;const&amp;&#32;Up)
{
&#32;&#32;&#32;&#32;glm::mat4&#32;Proj&#32;=&#32;glm::perspective(glm::radians(45.f),&#32;1.33f,&#32;0.1f,&#32;10.f);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewTranslate&#32;=&#32;glm::translate(glm::mat4(1.f),&#32;Translate);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewRotateX&#32;=&#32;glm::rotate(ViewTranslate,&#32;Orientation.y,&#32;Up);
&#32;&#32;&#32;&#32;glm::mat4&#32;View&#32;=&#32;glm::rotate(ViewRotateX,&#32;Orientation.x,&#32;Up);
&#32;&#32;&#32;&#32;glm::mat4&#32;Model&#32;=&#32;glm::mat4(1.0f);
&#32;&#32;&#32;&#32;return&#32;Proj&#32;*&#32;View&#32;*&#32;Model;
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md178">
<title>&lt;a name=&quot;section1_3&quot;&gt;&lt;/a&gt; 1.3. Using extension headers</title>

<para>Using GLM through split headers to minimize the project build time: <literallayout><computeroutput>//&#32;Include&#32;GLM&#32;vector&#32;extensions:
#include&#32;&lt;glm/ext/vector_float2.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;vec2
#include&#32;&lt;glm/ext/vector_float3.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;vec3
#include&#32;&lt;glm/ext/vector_trigonometric.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;radians

//&#32;Include&#32;GLM&#32;matrix&#32;extensions:
#include&#32;&lt;glm/ext/matrix_float4x4.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;mat4
#include&#32;&lt;glm/ext/matrix_transform.hpp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;perspective,&#32;translate,&#32;rotate

glm::mat4&#32;transform(glm::vec2&#32;const&amp;&#32;Orientation,&#32;glm::vec3&#32;const&amp;&#32;Translate,&#32;glm::vec3&#32;const&amp;&#32;Up)
{
&#32;&#32;&#32;&#32;glm::mat4&#32;Proj&#32;=&#32;glm::perspective(glm::radians(45.f),&#32;1.33f,&#32;0.1f,&#32;10.f);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewTranslate&#32;=&#32;glm::translate(glm::mat4(1.f),&#32;Translate);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewRotateX&#32;=&#32;glm::rotate(ViewTranslate,&#32;Orientation.y,&#32;Up);
&#32;&#32;&#32;&#32;glm::mat4&#32;View&#32;=&#32;glm::rotate(ViewRotateX,&#32;Orientation.x,&#32;Up);
&#32;&#32;&#32;&#32;glm::mat4&#32;Model&#32;=&#32;glm::mat4(1.0f);
&#32;&#32;&#32;&#32;return&#32;Proj&#32;*&#32;View&#32;*&#32;Model;
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md179">
<title>&lt;a name=&quot;section1_4&quot;&gt;&lt;/a&gt; 1.4. Dependencies</title>

<para>GLM does not depend on external libraries or headers such as <computeroutput>&lt;GL/gl.h&gt;</computeroutput>, <link xlink:href="http://www.opengl.org/registry/api/GL/glcorearb.h"><computeroutput>&lt;GL/glcorearb.h&gt;</computeroutput></link>, <computeroutput>&lt;GLES3/gl3.h&gt;</computeroutput>, <computeroutput>&lt;GL/glu.h&gt;</computeroutput>, or <computeroutput>&lt;windows.h&gt;</computeroutput>.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md180">
<title>&lt;a name=&quot;section1_5&quot;&gt;&lt;/a&gt; 1.5. Finding GLM with CMake</title>

<para>GLM packages a <computeroutput>glmConfig.cmake</computeroutput> and <computeroutput>glmConfig-version.cmake</computeroutput> in the root of the repository and the release archives. To find GLM with CMake you can pass <computeroutput>-Dglm_DIR=&lt;path to glm root&gt;/cmake/glm/</computeroutput> when running CMake. You can then either add <computeroutput>${GLM_INCLUDE_DIRS}</computeroutput> to your target&apos;s include directories, or link against the imported <computeroutput>glm::glm</computeroutput> target.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md182">
<title>&lt;a name=&quot;section2&quot;&gt;&lt;/a&gt; 2. Preprocessor configurations</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md183">
<title>&lt;a name=&quot;section2_1&quot;&gt;&lt;/a&gt; 2.1. GLM_FORCE_MESSAGES: Platform auto detection and default configuration</title>

<para>When included, GLM will first automatically detect the compiler used, the C++ standard supported, the compiler arguments used to configure itself matching the build environment.</para>

<para>For example, if the compiler arguments request AVX code generation, GLM will rely on its code path providing AVX optimizations when available.</para>

<para>We can change GLM configuration using specific C++ preprocessor defines that must be declared before including any GLM headers.</para>

<para>Using <computeroutput>GLM_FORCE_MESSAGES</computeroutput>, GLM will report the configuration as part of the build log.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_MESSAGES&#32;//&#32;Or&#32;defined&#32;when&#32;building&#32;(e.g.&#32;-DGLM_FORCE_SWIZZLE)
#include&#32;&lt;glm/glm.hpp&gt;
</computeroutput></literallayout></para>

<para>Example of configuration log generated by <computeroutput>GLM_FORCE_MESSAGES</computeroutput>: <literallayout><computeroutput>GLM:&#32;version&#32;0.9.9.1
GLM:&#32;C++&#32;17&#32;with&#32;extensions
GLM:&#32;Clang&#32;compiler&#32;detected
GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;AVX&#32;instruction&#32;set&#32;build&#32;target
GLM:&#32;Linux&#32;platform&#32;detected
GLM:&#32;GLM_FORCE_SWIZZLE&#32;is&#32;undefined.&#32;swizzling&#32;functions&#32;or&#32;operators&#32;are&#32;disabled.
GLM:&#32;GLM_FORCE_SIZE_T_LENGTH&#32;is&#32;undefined.&#32;.length()&#32;returns&#32;a&#32;glm::length_t,&#32;a&#32;typedef&#32;of&#32;int&#32;following&#32;GLSL.
GLM:&#32;GLM_FORCE_UNRESTRICTED_GENTYPE&#32;is&#32;undefined.&#32;Follows&#32;strictly&#32;GLSL&#32;on&#32;valid&#32;function&#32;genTypes.
GLM:&#32;GLM_FORCE_DEPTH_ZERO_TO_ONE&#32;is&#32;undefined.&#32;Using&#32;negative&#32;one&#32;to&#32;one&#32;depth&#32;clip&#32;space.
GLM:&#32;GLM_FORCE_LEFT_HANDED&#32;is&#32;undefined.&#32;Using&#32;right&#32;handed&#32;coordinate&#32;system.
</computeroutput></literallayout></para>

<para>The following subsections describe each configurations and defines.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md184">
<title>&lt;a name=&quot;section2_2&quot;&gt;&lt;/a&gt; 2.2. GLM_FORCE_PLATFORM_UNKNOWN: Force GLM to no detect the build platform</title>

<para><computeroutput>GLM_FORCE_PLATFORM_UNKNOWN</computeroutput> prevents GLM from detecting the build platform.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md185">
<title>&lt;a name=&quot;section2_3&quot;&gt;&lt;/a&gt; 2.3. GLM_FORCE_COMPILER_UNKNOWN: Force GLM to no detect the C++ compiler</title>

<para><computeroutput>GLM_FORCE_COMPILER_UNKNOWN</computeroutput> prevents GLM from detecting the C++ compiler.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md186">
<title>&lt;a name=&quot;section2_4&quot;&gt;&lt;/a&gt; 2.4. GLM_FORCE_ARCH_UNKNOWN: Force GLM to no detect the build architecture</title>

<para><computeroutput>GLM_FORCE_ARCH_UNKNOWN</computeroutput> prevents GLM from detecting the build target architecture.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md187">
<title>&lt;a name=&quot;section2_5&quot;&gt;&lt;/a&gt; 2.5. GLM_FORCE_CXX_UNKNOWN: Force GLM to no detect the C++ standard</title>

<para><computeroutput>GLM_FORCE_CSS_UNKNOWN</computeroutput> prevents GLM from detecting the C++ compiler standard support.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md188">
<title>&lt;a name=&quot;section2_6&quot;&gt;&lt;/a&gt; 2.6. GLM_FORCE_CXX**: C++ language detection</title>

<para>GLM will automatically take advantage of compilers’ language extensions when enabled. To increase cross platform compatibility and to avoid compiler extensions, a programmer can define <computeroutput>GLM_FORCE_CXX98</computeroutput> before any inclusion of <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput> to restrict the language feature set C++98:</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_CXX98
#include&#32;&lt;glm/glm.hpp&gt;
</computeroutput></literallayout></para>

<para>For C++11, C++14, and C++17 equivalent defines are available:<itemizedlist>
<listitem>
<para><computeroutput>GLM_FORCE_CXX11</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_CXX14</computeroutput></para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_CXX17</computeroutput></para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_CXX11
#include&#32;&lt;glm/glm.hpp&gt;

//&#32;If&#32;the&#32;compiler&#32;doesn’t&#32;support&#32;C++11,&#32;compiler&#32;errors&#32;will&#32;happen.
</computeroutput></literallayout></para>

<para><computeroutput>GLM_FORCE_CXX17</computeroutput> overrides <computeroutput>GLM_FORCE_CXX14</computeroutput>; <computeroutput>GLM_FORCE_CXX14</computeroutput> overrides <computeroutput>GLM_FORCE_CXX11</computeroutput>; and <computeroutput>GLM_FORCE_CXX11</computeroutput> overrides <computeroutput>GLM_FORCE_CXX98</computeroutput> defines.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md189">
<title>&lt;a name=&quot;section2_7&quot;&gt;&lt;/a&gt; 2.7. GLM_FORCE_EXPLICIT_CTOR: Requiring explicit conversions</title>

<para>GLSL supports implicit conversions of vector and matrix types. For example, an ivec4 can be implicitly converted into <computeroutput>vec4</computeroutput>.</para>

<para>Often, this behaviour is not desirable but following the spirit of the library, this is the default behavior in GLM. However, GLM 0.9.6 introduced the define <computeroutput>GLM_FORCE_EXPLICIT_CTOR</computeroutput> to require explicit conversion for GLM types.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;

void&#32;foo()
{
&#32;&#32;&#32;&#32;glm::ivec4&#32;a;
&#32;&#32;&#32;&#32;...

&#32;&#32;&#32;&#32;glm::vec4&#32;b(a);&#32;//&#32;Explicit&#32;conversion,&#32;OK
&#32;&#32;&#32;&#32;glm::vec4&#32;c&#32;=&#32;a;&#32;//&#32;Implicit&#32;conversion,&#32;OK
&#32;&#32;&#32;&#32;...
}
</computeroutput></literallayout></para>

<para>With <computeroutput>GLM_FORCE_EXPLICIT_CTOR</computeroutput> define, implicit conversions are not allowed:</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_EXPLICIT_CTOR
#include&#32;&lt;glm/glm.hpp&gt;

void&#32;foo()
{
&#32;&#32;&#32;&#32;glm::ivec4&#32;a;
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec4&#32;b(a);&#32;//&#32;Explicit&#32;conversion,&#32;OK
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec4&#32;c&#32;=&#32;a;&#32;//&#32;Implicit&#32;conversion,&#32;ERROR
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md190">
<title>&lt;a name=&quot;section2_8&quot;&gt;&lt;/a&gt; 2.8. GLM_FORCE_INLINE: Force inline</title>

<para>To push further the software performance, a programmer can define <computeroutput>GLM_FORCE_INLINE</computeroutput> before any inclusion of <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput> to force the compiler to inline GLM code.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_INLINE
#include&#32;&lt;glm/glm.hpp&gt;
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md191">
<title>&lt;a name=&quot;section2_9&quot;&gt;&lt;/a&gt; 2.9. GLM_FORCE_ALIGNED_GENTYPES: Force GLM to enable aligned types</title>

<para>Every object type has the property called alignment requirement, which is an integer value (of type <computeroutput>std::size_t</computeroutput>, always a power of 2) representing the number of bytes between successive addresses at which objects of this type can be allocated. The alignment requirement of a type can be queried with alignof or <computeroutput>std::alignment_of</computeroutput>. The pointer alignment function <computeroutput>std::align</computeroutput> can be used to obtain a suitably-aligned pointer within some buffer, and <computeroutput>std::aligned_storage</computeroutput> can be used to obtain suitably-aligned storage.</para>

<para>Each object type imposes its alignment requirement on every object of that type; stricter alignment (with larger alignment requirement) can be requested using C++11 <computeroutput>alignas</computeroutput>.</para>

<para>In order to satisfy alignment requirements of all non-static members of a class, padding may be inserted after some of its members.</para>

<para>GLM supports both packed and aligned types. Packed types allow filling data structure without inserting extra padding. Aligned GLM types align addresses based on the size of the value type of a GLM type.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_ALIGNED_GENTYPES
#include&#32;&lt;glm/glm.hpp&gt;
#include&#32;&lt;glm/gtc/type_aligned.hpp&gt;

typedef&#32;glm::aligned_vec4&#32;vec4a;
typedef&#32;glm::packed_vec4&#32;vec4p;
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md192">
<title>&lt;a name=&quot;section2_10&quot;&gt;&lt;/a&gt; 2.10. GLM_FORCE_DEFAULT_ALIGNED_GENTYPES: Force GLM to use aligned types by default</title>

<para>GLM allows using aligned types by default for vector types using <computeroutput>GLM_FORCE_DEFAULT_ALIGNED_GENTYPES</computeroutput>:</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_DEFAULT_ALIGNED_GENTYPES
#include&#32;&lt;glm/glm.hpp&gt;

struct&#32;MyStruct
{
&#32;&#32;&#32;&#32;glm::vec4&#32;a;
&#32;&#32;&#32;&#32;float&#32;b;
&#32;&#32;&#32;&#32;glm::vec3&#32;c;
};

void&#32;foo()
{
&#32;&#32;&#32;&#32;printf(&quot;MyStruct&#32;requires&#32;memory&#32;padding:&#32;%d&#32;bytes\n&quot;,&#32;sizeof(MyStruct));
}

&gt;&gt;&gt;&#32;MyStruct&#32;requires&#32;memory&#32;padding:&#32;48&#32;bytes
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;

struct&#32;MyStruct
{
&#32;&#32;&#32;&#32;glm::vec4&#32;a;
&#32;&#32;&#32;&#32;float&#32;b;
&#32;&#32;&#32;&#32;glm::vec3&#32;c;
};

void&#32;foo()
{
&#32;&#32;&#32;&#32;printf(&quot;MyStruct&#32;is&#32;tightly&#32;packed:&#32;%d&#32;bytes\n&quot;,&#32;sizeof(MyStruct));
}

&gt;&gt;&gt;&#32;MyStruct&#32;is&#32;tightly&#32;packed:&#32;32&#32;bytes
</computeroutput></literallayout></para>

<para><emphasis>Note: GLM SIMD optimizations require the use of aligned types</emphasis></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md193">
<title>&lt;a name=&quot;section2_11&quot;&gt;&lt;/a&gt; 2.11. GLM_FORCE_INTRINSICS: Using SIMD optimizations</title>

<para>GLM provides some SIMD optimizations based on <link xlink:href="https://msdn.microsoft.com/en-us/library/26td21ds.aspx">compiler intrinsics</link>. These optimizations will be automatically thanks to compiler arguments when <computeroutput>GLM_FORCE_INTRINSICS</computeroutput> is defined before including GLM files. For example, if a program is compiled with Visual Studio using <computeroutput>/arch:AVX</computeroutput>, GLM will detect this argument and generate code using AVX instructions automatically when available.</para>

<para>It’s possible to avoid the instruction set detection by forcing the use of a specific instruction set with one of the fallowing define: <computeroutput>GLM_FORCE_SSE2</computeroutput>, <computeroutput>GLM_FORCE_SSE3</computeroutput>, <computeroutput>GLM_FORCE_SSSE3</computeroutput>, <computeroutput>GLM_FORCE_SSE41</computeroutput>, <computeroutput>GLM_FORCE_SSE42</computeroutput>, <computeroutput>GLM_FORCE_AVX</computeroutput>, <computeroutput>GLM_FORCE_AVX2</computeroutput> or <computeroutput>GLM_FORCE_AVX512</computeroutput>.</para>

<para>The use of intrinsic functions by GLM implementation can be avoided using the define <computeroutput>GLM_FORCE_PURE</computeroutput> before any inclusion of GLM headers. This can be particularly useful if we want to rely on C++14 <computeroutput>constexpr</computeroutput>.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_PURE
#include&#32;&lt;glm/glm.hpp&gt;

static_assert(glm::vec4::length()&#32;==&#32;4,&#32;&quot;Using&#32;GLM&#32;C++&#32;14&#32;constexpr&#32;support&#32;for&#32;compile&#32;time&#32;tests&quot;);

//&#32;GLM&#32;code&#32;will&#32;be&#32;compiled&#32;using&#32;pure&#32;C++&#32;code&#32;without&#32;any&#32;intrinsics
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_SIMD_AVX2
#include&#32;&lt;glm/glm.hpp&gt;

//&#32;If&#32;the&#32;compiler&#32;doesn’t&#32;support&#32;AVX2&#32;instrinsics,&#32;compiler&#32;errors&#32;will&#32;happen.
</computeroutput></literallayout></para>

<para>Additionally, GLM provides a low level SIMD API in glm/simd directory for users who are really interested in writing fast algorithms.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md194">
<title>&lt;a name=&quot;section2_12&quot;&gt;&lt;/a&gt; 2.12. GLM_FORCE_PRECISION_**: Default precision</title>

<para>C++ does not provide a way to implement GLSL default precision selection (as defined in GLSL 4.10 specification section 4.5.3) with GLSL-like syntax.</para>

<para><literallayout><computeroutput>precision&#32;mediump&#32;int;
precision&#32;highp&#32;float;
</computeroutput></literallayout></para>

<para>To use the default precision functionality, GLM provides some defines that need to added before any include of <computeroutput>glm.hpp</computeroutput>:</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_PRECISION_MEDIUMP_INT
#define&#32;GLM_FORCE_PRECISION_HIGHP_FLOAT
#include&#32;&lt;glm/glm.hpp&gt;
</computeroutput></literallayout></para>

<para>Available defines for floating point types (<computeroutput><link linkend="_structglm_1_1vec">glm::vec</link>\*</computeroutput>, <computeroutput><link linkend="_structglm_1_1mat">glm::mat</link>\*</computeroutput>):</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>GLM_FORCE_PRECISION_LOWP_FLOAT</computeroutput>: Low precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_MEDIUMP_FLOAT</computeroutput>: Medium precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_HIGHP_FLOAT</computeroutput>: High precision (default)</para>
</listitem></itemizedlist>
</para>

<para>Available defines for floating point types (<computeroutput>glm::dvec\*</computeroutput>, <computeroutput>glm::dmat\*</computeroutput>):</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>GLM_FORCE_PRECISION_LOWP_DOUBLE</computeroutput>: Low precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_MEDIUMP_DOUBLE</computeroutput>: Medium precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_HIGHP_DOUBLE</computeroutput>: High precision (default)</para>
</listitem></itemizedlist>
</para>

<para>Available defines for signed integer types (<computeroutput>glm::ivec\*</computeroutput>):</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>GLM_FORCE_PRECISION_LOWP_INT</computeroutput>: Low precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_MEDIUMP_INT</computeroutput>: Medium precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_HIGHP_INT</computeroutput>: High precision (default)</para>
</listitem></itemizedlist>
</para>

<para>Available defines for unsigned integer types (<computeroutput>glm::uvec\*</computeroutput>):</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>GLM_FORCE_PRECISION_LOWP_UINT</computeroutput>: Low precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_MEDIUMP_UINT</computeroutput>: Medium precision</para>
</listitem><listitem>
<para><computeroutput>GLM_FORCE_PRECISION_HIGHP_UINT</computeroutput>: High precision (default)</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md195">
<title>&lt;a name=&quot;section2_13&quot;&gt;&lt;/a&gt; 2.13. GLM_FORCE_SINGLE_ONLY: Removed explicit 64-bits floating point types</title>

<para>Some platforms (Dreamcast) doesn&apos;t support double precision floating point values. To compile on such platforms, GCC has the <computeroutput>--m4-single-only</computeroutput> build argument. When defining <computeroutput>GLM_FORCE_SINGLE_ONLY</computeroutput> before including GLM headers, GLM releases the requirement of double precision floating point values support. Effectivement, all the float64 types are no longer defined and double behaves like float.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md196">
<title>&lt;a name=&quot;section2_14&quot;&gt;&lt;/a&gt; 2.14. GLM_FORCE_SWIZZLE: Enable swizzle operators</title>

<para><link linkend="_struct_shader">Shader</link> languages like GLSL often feature so-called swizzle expressions, which may be used to freely select and arrange a vector&apos;s components. For example, <computeroutput>variable.x</computeroutput>, <computeroutput>variable.xzy</computeroutput> and <computeroutput>variable.zxyy</computeroutput> respectively form a scalar, a 3D vector and a 4D vector. The result of a swizzle expression in GLSL can be either an R-value or an L-value. Swizzle expressions can be written with characters from exactly one of <computeroutput>xyzw</computeroutput> (usually for positions), <computeroutput>rgba</computeroutput> (usually for colors), and <computeroutput>stpq</computeroutput> (usually for texture coordinates).</para>

<para><literallayout><computeroutput>vec4&#32;A;
vec2&#32;B;

B.yx&#32;=&#32;A.wy;
B&#32;=&#32;A.xx;
vec3&#32;C&#32;=&#32;A.bgr;
vec3&#32;D&#32;=&#32;B.rsz;&#32;//&#32;Invalid,&#32;won&apos;t&#32;compile
</computeroutput></literallayout></para>

<para>GLM supports some of this functionality. Swizzling can be enabled by defining <computeroutput>GLM_FORCE_SWIZZLE</computeroutput>.</para>

<para><emphasis>Note: Enabling swizzle expressions will massively increase the size of your binaries and the time it takes to compile them!</emphasis></para>

<para>GLM has two levels of swizzling support described in the following subsections.</para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md197">
<title>2.14.1. Swizzle functions for standard C++ 98</title>

<para>When compiling GLM as C++98, R-value swizzle expressions are simulated through member functions of each vector type.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_SWIZZLE&#32;//&#32;Or&#32;defined&#32;when&#32;building&#32;(e.g.&#32;-DGLM_FORCE_SWIZZLE)
#include&#32;&lt;glm/glm.hpp&gt;

void&#32;foo()
{
&#32;&#32;&#32;&#32;glm::vec4&#32;const&#32;ColorRGBA&#32;=&#32;glm::vec4(1.0f,&#32;0.5f,&#32;0.0f,&#32;1.0f);
&#32;&#32;&#32;&#32;glm::vec3&#32;const&#32;ColorBGR&#32;=&#32;ColorRGBA.bgr();

&#32;&#32;&#32;&#32;glm::vec3&#32;const&#32;PositionA&#32;=&#32;glm::vec3(1.0f,&#32;0.5f,&#32;0.0f);
&#32;&#32;&#32;&#32;glm::vec3&#32;const&#32;PositionB&#32;=&#32;PositionXYZ.xyz()&#32;*&#32;2.0f;

&#32;&#32;&#32;&#32;glm::vec2&#32;const&#32;TexcoordST&#32;=&#32;glm::vec2(1.0f,&#32;0.5f);
&#32;&#32;&#32;&#32;glm::vec4&#32;const&#32;TexcoordSTPQ&#32;=&#32;TexcoordST.stst();
}
</computeroutput></literallayout></para>

<para>Swizzle operators return a <emphasis role="bold">copy</emphasis> of the component values, and thus <emphasis>can&apos;t</emphasis> be used as L-values to change a vector&apos;s values.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_SWIZZLE
#include&#32;&lt;glm/glm.hpp&gt;

void&#32;foo()
{
&#32;&#32;glm::vec3&#32;const&#32;A&#32;=&#32;glm::vec3(1.0f,&#32;0.5f,&#32;0.0f);

&#32;&#32;//&#32;No&#32;compiler&#32;error,&#32;but&#32;A&#32;is&#32;not&#32;modified.
&#32;&#32;//&#32;An&#32;anonymous&#32;copy&#32;is&#32;being&#32;modified&#32;(and&#32;then&#32;discarded).
&#32;&#32;A.bgr()&#32;=&#32;glm::vec3(2.0f,&#32;1.5f,&#32;1.0f);&#32;//&#32;A&#32;is&#32;not&#32;modified!
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md198">
<title>2.14.2. Swizzle operations for C++ 98 with language extensions</title>

<para>Visual C++, GCC and Clang support, as a <emphasis>non-standard language extension</emphasis>, anonymous <computeroutput>struct</computeroutput>s as <computeroutput>union</computeroutput> members. This permits a powerful swizzling implementation that both allows L-value swizzle expressions and GLSL-like syntax. To use this feature, the language extension must be enabled by a supporting compiler and <computeroutput>GLM_FORCE_SWIZZLE</computeroutput> must be <computeroutput>#define</computeroutput>d.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_SWIZZLE
#include&#32;&lt;glm/glm.hpp&gt;

//&#32;Only&#32;guaranteed&#32;to&#32;work&#32;with&#32;Visual&#32;C++!
//&#32;Some&#32;compilers&#32;that&#32;support&#32;Microsoft&#32;extensions&#32;may&#32;compile&#32;this.
void&#32;foo()
{
&#32;&#32;glm::vec4&#32;ColorRGBA&#32;=&#32;glm::vec4(1.0f,&#32;0.5f,&#32;0.0f,&#32;1.0f);

&#32;&#32;//&#32;l-value:
&#32;&#32;glm::vec4&#32;ColorBGRA&#32;=&#32;ColorRGBA.bgra;

&#32;&#32;//&#32;r-value:
&#32;&#32;ColorRGBA.bgra&#32;=&#32;ColorRGBA;

&#32;&#32;//&#32;Both&#32;l-value&#32;and&#32;r-value
&#32;&#32;ColorRGBA.bgra&#32;=&#32;ColorRGBA.rgba;
}
</computeroutput></literallayout></para>

<para>This version returns implementation-specific objects that <emphasis>implicitly convert</emphasis> to their respective vector types. As a consequence of this design, these extra types <emphasis role="bold">can&apos;t be directly used</emphasis> as C++ function arguments; they must be converted through constructors or <computeroutput>operator()</computeroutput>.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_SWIZZLE
#include&#32;&lt;glm/glm.hpp&gt;

using&#32;namespace&#32;glm;

void&#32;foo()
{
&#32;&#32;vec4&#32;Color&#32;=&#32;vec4(1.0f,&#32;0.5f,&#32;0.0f,&#32;1.0f);

&#32;&#32;//&#32;Generates&#32;compiler&#32;errors.&#32;Color.rgba&#32;is&#32;not&#32;a&#32;vector&#32;type.
&#32;&#32;vec4&#32;ClampedA&#32;=&#32;clamp(Color.rgba,&#32;0.f,&#32;1.f);&#32;//&#32;ERROR

&#32;&#32;//&#32;Explicit&#32;conversion&#32;through&#32;a&#32;constructor
&#32;&#32;vec4&#32;ClampedB&#32;=&#32;clamp(vec4(Color.rgba),&#32;0.f,&#32;1.f);&#32;//&#32;OK

&#32;&#32;//&#32;Explicit&#32;conversion&#32;through&#32;operator()
&#32;&#32;vec4&#32;ClampedC&#32;=&#32;clamp(Color.rgba(),&#32;0.f,&#32;1.f);&#32;//&#32;OK
}
</computeroutput></literallayout></para>

<para><emphasis>Note: The implementation has a caveat: Swizzle operator types must be different on both size of the equal operator or the operation will fail. There is no known fix for this issue to date</emphasis></para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md199">
<title>&lt;a name=&quot;section2_15&quot;&gt;&lt;/a&gt; 2.15. GLM_FORCE_XYZW_ONLY: Only exposes x, y, z and w components</title>

<para>Following GLSL specifications, GLM supports three sets of components to access vector types member: x, y, z, w; r, g, b, a; and s, t, p, q. Also, this is making vector component very expressive in the code, it may make debugging vector types a little cubersom as the debuggers will typically display three time the values for each compoenents due to the existence of the three sets.</para>

<para>To simplify vector types, GLM allows exposing only x, y, z and w components thanks to <computeroutput>GLM_FORCE_XYZW_ONLY</computeroutput> define.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md200">
<title>&lt;a name=&quot;section2_16&quot;&gt;&lt;/a&gt; 2.16. GLM_FORCE_LEFT_HANDED: Force left handed coordinate system</title>

<para>By default, OpenGL is using a right handed coordinate system. However, others APIs such as Direct3D have done different choice and relies on the left handed coordinate system.</para>

<para>GLM allows switching the coordinate system to left handed by defining <computeroutput>GLM_FORCE_LEFT_HANDED</computeroutput>.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md201">
<title>&lt;a name=&quot;section2_17&quot;&gt;&lt;/a&gt; 2.17. GLM_FORCE_DEPTH_ZERO_TO_ONE: Force the use of a clip space between 0 to 1</title>

<para>By default, OpenGL is using a -1 to 1 clip space in Z-axis. However, others APIs such as Direct3D relies on a clip space between 0 to 1 in Z-axis.</para>

<para>GLM allows switching the clip space in Z-axis to 0 to 1 by defining <computeroutput>GLM_FORCE_DEPTH_ZERO_TO_ONE</computeroutput>.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md202">
<title>&lt;a name=&quot;section2_18&quot;&gt;&lt;/a&gt; 2.18. GLM_FORCE_SIZE_T_LENGTH: Vector and matrix static size</title>

<para>GLSL supports the member function .length() for all vector and matrix types.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;

void&#32;foo(vec4&#32;const&amp;&#32;v)
{
&#32;&#32;&#32;&#32;int&#32;Length&#32;=&#32;v.length();
&#32;&#32;&#32;&#32;...
}
</computeroutput></literallayout></para>

<para>This function returns an <computeroutput>int</computeroutput> however this function typically interacts with STL <computeroutput>size_t</computeroutput> based code. GLM provides <computeroutput>GLM_FORCE_SIZE_T_LENGTH</computeroutput> pre-processor configuration so that member functions <computeroutput>length()</computeroutput> return a <computeroutput>size_t</computeroutput>.</para>

<para>Additionally, GLM defines the type <computeroutput><link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">glm::length_t</link></computeroutput> to identify <computeroutput>length()</computeroutput> returned type, independently from <computeroutput>GLM_FORCE_SIZE_T_LENGTH</computeroutput>.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_SIZE_T_LENGTH
#include&#32;&lt;glm/glm.hpp&gt;

void&#32;foo(vec4&#32;const&amp;&#32;v)
{
&#32;&#32;&#32;&#32;glm::length_t&#32;Length&#32;=&#32;v.length();
&#32;&#32;&#32;&#32;...
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md203">
<title>&lt;a name=&quot;section2_19&quot;&gt;&lt;/a&gt; 2.19. GLM_FORCE_UNRESTRICTED_GENTYPE: Removing genType restriction</title>

<para>GLSL has restrictions on types supported by certain functions that may appear excessive. By default, GLM follows the GLSL specification as accurately as possible however it&apos;s possible to relax these rules using <computeroutput>GLM_FORCE_UNRESTRICTED_GENTYPE</computeroutput> define.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;

float&#32;average(float&#32;const&#32;A,&#32;float&#32;const&#32;B)
{
&#32;&#32;&#32;&#32;return&#32;glm::mix(A,&#32;B,&#32;0.5f);&#32;//&#32;By&#32;default&#32;glm::mix&#32;only&#32;supports&#32;floating-point&#32;types
}
</computeroutput></literallayout></para>

<para>By defining GLM_FORCE_UNRESTRICTED_GENTYPE, we allow using integer types:</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_UNRESTRICTED_GENTYPE
#include&#32;&lt;glm/glm.hpp&gt;

int&#32;average(int&#32;const&#32;A,&#32;int&#32;const&#32;B)
{
&#32;&#32;&#32;&#32;return&#32;glm::mix(A,&#32;B,&#32;0.5f);&#32;//&#32;integers&#32;are&#32;ok&#32;thanks&#32;to&#32;GLM_FORCE_UNRESTRICTED_GENTYPE
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md204">
<title>&lt;a name=&quot;section2_20&quot;&gt;&lt;/a&gt; 2.20. GLM_FORCE_SILENT_WARNINGS: Silent C++ warnings from language extensions</title>

<para>When using /W4 on Visual C++ or -Wpedantic on GCC, for example, the compilers will generate warnings for using C++ language extensions (/Za with Visual C++) such as anonymous struct. GLM relies on anonymous structs for swizzle operators and aligned vector types. To silent those warnings define <computeroutput>GLM_FORCE_SILENT_WARNINGS</computeroutput> before including GLM headers.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md205">
<title>&lt;a name=&quot;section2_21&quot;&gt;&lt;/a&gt; 2.21. GLM_FORCE_QUAT_DATA_WXYZ: Force GLM to store quat data as w,x,y,z instead of x,y,z,w</title>

<para>By default GLM store quaternion components with the x, y, z, w order. <computeroutput>GLM_FORCE_QUAT_DATA_WXYZ</computeroutput> allows switching the quaternion data storage to the w, x, y, z order.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md207">
<title>&lt;a name=&quot;section3&quot;&gt;&lt;/a&gt; 3. Stable extensions</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md208">
<title>&lt;a name=&quot;section3_1&quot;&gt;&lt;/a&gt; 3.1. Scalar types</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md209">
<title>3.1.1. GLM_EXT_scalar_int_sized</title>

<para>This extension exposes sized and signed integer types.</para>

<para>Include <computeroutput>&lt;glm/ext/scalar_int_sized.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md210">
<title>3.1.2. GLM_EXT_scalar_uint_sized</title>

<para>This extension exposes sized and unsigned integer types.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/scalar_common.hpp&gt;

glm::uint64&#32;pack(glm::uint32&#32;A,&#32;glm::uint16&#32;B,&#32;glm::uint8&#32;C,&#32;glm::uint8&#32;D)
{
&#32;&#32;&#32;&#32;glm::uint64&#32;ShiftA&#32;=&#32;0;
&#32;&#32;&#32;&#32;glm::uint64&#32;ShiftB&#32;=&#32;sizeof(glm::uint32)&#32;*&#32;8;
&#32;&#32;&#32;&#32;glm::uint64&#32;ShiftC&#32;=&#32;(sizeof(glm::uint32)&#32;+&#32;sizeof(glm::uint16))&#32;*&#32;8;
&#32;&#32;&#32;&#32;glm::uint64&#32;ShiftD&#32;=&#32;(sizeof(glm::uint32)&#32;+&#32;sizeof(glm::uint16)&#32;+&#32;sizeof(glm::uint8))&#32;*&#32;8;
&#32;&#32;&#32;&#32;return&#32;(glm::uint64(A)&#32;&lt;&lt;&#32;ShiftA)&#32;|&#32;(glm::uint64(B)&#32;&lt;&lt;&#32;ShiftB)&#32;|&#32;(glm::uint64(C)&#32;&lt;&lt;&#32;ShiftC)&#32;|&#32;(glm::uint64(D)&#32;&lt;&lt;&#32;ShiftD);
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/scalar_uint_sized.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md211">
<title>&lt;a name=&quot;section3_2&quot;&gt;&lt;/a&gt; 3.2. Scalar functions</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md212">
<title>3.2.1. GLM_EXT_scalar_common</title>

<para>This extension exposes support for <computeroutput>min</computeroutput> and <computeroutput>max</computeroutput> functions taking more than two scalar arguments. Also, it adds <computeroutput>fmin</computeroutput> and <computeroutput>fmax</computeroutput> variants which prevents <computeroutput>NaN</computeroutput> propagation.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/scalar_common.hpp&gt;

float&#32;positiveMax(float&#32;const&#32;a,&#32;float&#32;const&#32;b)
{
&#32;&#32;&#32;&#32;return&#32;glm::fmax(a,&#32;b,&#32;0.0f);
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/scalar_common.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md213">
<title>3.2.2. GLM_EXT_scalar_relational</title>

<para>This extension exposes <computeroutput>equal</computeroutput> and <computeroutput>notEqual</computeroutput> scalar variants which takes an epsilon argument.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/scalar_relational.hpp&gt;

bool&#32;epsilonEqual(float&#32;const&#32;a,&#32;float&#32;const&#32;b)
{
&#32;&#32;&#32;&#32;float&#32;const&#32;CustomEpsilon&#32;=&#32;0.0001f;
&#32;&#32;&#32;&#32;return&#32;glm::equal(a,&#32;b,&#32;CustomEpsilon);
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/scalar_relational.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md214">
<title>3.2.3. GLM_EXT_scalar_constants</title>

<para>This extension exposes useful constants such as <computeroutput>epsilon</computeroutput> and <computeroutput>pi</computeroutput>.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/scalar_constants.hpp&gt;

float&#32;circumference(float&#32;const&#32;Diameter)
{
&#32;&#32;&#32;&#32;return&#32;glm::pi&lt;float&gt;()&#32;*&#32;Diameter;
}
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/common.hpp&gt;&#32;//&#32;abs
#include&#32;&lt;glm/ext/scalar_constants.hpp&gt;&#32;//&#32;epsilon

bool&#32;equalULP1(float&#32;const&#32;a,&#32;float&#32;const&#32;b)
{
&#32;&#32;&#32;&#32;return&#32;glm::abs(a&#32;-&#32;b)&#32;&lt;=&#32;glm::epsilon&lt;float&gt;();
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/scalar_constants.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md215">
<title>3.2.4. GLM_EXT_scalar_ulp</title>

<para>This extension exposes function that measure of accuracy in numeric calculations.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/scalar_ulp.hpp&gt;

bool&#32;test_ulp(float&#32;x)
{
&#32;&#32;&#32;&#32;float&#32;const&#32;a&#32;=&#32;glm::next_float(x);&#32;//&#32;return&#32;a&#32;float&#32;a&#32;ULP&#32;away&#32;from&#32;the&#32;float&#32;argument.
&#32;&#32;&#32;&#32;return&#32;float_distance(a,&#32;x)&#32;==&#32;1;&#32;//&#32;check&#32;both&#32;float&#32;are&#32;a&#32;single&#32;ULP&#32;away.
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/scalar_ulp.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md216">
<title>&lt;a name=&quot;section3_3&quot;&gt;&lt;/a&gt; 3.3. Vector types</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md217">
<title>3.3.1. GLM_EXT_vector_float1</title>

<para>This extension exposes single-precision floating point vector with 1 component: <computeroutput>vec1</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float1.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md218">
<title>3.3.2. GLM_EXT_vector_float2</title>

<para>This extension exposes single-precision floating point vector with 2 components: <computeroutput><link linkend="_structvec2">vec2</link></computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md219">
<title>3.3.3. GLM_EXT_vector_float3</title>

<para>This extension exposes single-precision floating point vector with 3 components: <computeroutput>vec3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md220">
<title>3.3.4. GLM_EXT_vector_float4</title>

<para>This extension exposes single-precision floating point vector with 4 components: <computeroutput>vec4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md221">
<title>3.3.5. GLM_EXT_vector_double1</title>

<para>This extension exposes double-precision floating point vector with 1 component: <computeroutput>dvec1</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double1.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md222">
<title>3.3.6. GLM_EXT_vector_double2</title>

<para>This extension exposes double-precision floating point vector with 2 components: <computeroutput>dvec2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md223">
<title>3.3.7. GLM_EXT_vector_double3</title>

<para>This extension exposes double-precision floating point vector with 3 components: <computeroutput>dvec3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md224">
<title>3.3.8. GLM_EXT_vector_double4</title>

<para>This extension exposes double-precision floating point vector with 4 components: <computeroutput>dvec4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md225">
<title>3.3.9. GLM_EXT_vector_int1</title>

<para>This extension exposes signed integer vector with 1 component: <computeroutput>ivec1</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_int1.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md226">
<title>3.3.10. GLM_EXT_vector_int2</title>

<para>This extension exposes signed integer vector with 2 components: <computeroutput>ivec2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_int2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md227">
<title>3.3.11. GLM_EXT_vector_int3</title>

<para>This extension exposes signed integer vector with 3 components: <computeroutput>ivec3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_int3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md228">
<title>3.3.12. GLM_EXT_vector_int4</title>

<para>This extension exposes signed integer vector with 4 components: <computeroutput>ivec4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_int4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md229">
<title>3.3.13. GLM_EXT_vector_int1</title>

<para>This extension exposes unsigned integer vector with 1 component: <computeroutput>uvec1</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_uint1.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md230">
<title>3.3.14. GLM_EXT_vector_uint2</title>

<para>This extension exposes unsigned integer vector with 2 components: <computeroutput>uvec2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_uint2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md231">
<title>3.3.15. GLM_EXT_vector_uint3</title>

<para>This extension exposes unsigned integer vector with 3 components: <computeroutput>uvec3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_uint3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md232">
<title>3.3.16. GLM_EXT_vector_uint4</title>

<para>This extension exposes unsigned integer vector with 4 components: <computeroutput>uvec4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_uint4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md233">
<title>3.3.17. GLM_EXT_vector_bool1</title>

<para>This extension exposes boolean vector with 1 component: <computeroutput>bvec1</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_bool1.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md234">
<title>3.3.18. GLM_EXT_vector_bool2</title>

<para>This extension exposes boolean vector with 2 components: <computeroutput>bvec2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_bool2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md235">
<title>3.3.19. GLM_EXT_vector_bool3</title>

<para>This extension exposes boolean vector with 3 components: <computeroutput>bvec3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_bool3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md236">
<title>3.3.20. GLM_EXT_vector_bool4</title>

<para>This extension exposes boolean vector with 4 components: <computeroutput>bvec4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_bool4.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md237">
<title>&lt;a name=&quot;section3_4&quot;&gt;&lt;/a&gt; 3.4. Vector types with precision qualifiers</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md238">
<title>3.4.1. GLM_EXT_vector_float1_precision</title>

<para>This extension exposes single-precision floating point vector with 1 component using various precision in term of ULPs: <computeroutput>lowp_vec1</computeroutput>, <computeroutput>mediump_vec1</computeroutput> and <computeroutput>highp_vec1</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float1_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md239">
<title>3.4.2. GLM_EXT_vector_float2_precision</title>

<para>This extension exposes single-precision floating point vector with 2 components using various precision in term of ULPs: <computeroutput>lowp_vec2</computeroutput>, <computeroutput>mediump_vec2</computeroutput> and <computeroutput>highp_vec2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md240">
<title>3.4.3. GLM_EXT_vector_float3_precision</title>

<para>This extension exposes single-precision floating point vector with 3 components using various precision in term of ULPs: <computeroutput>lowp_vec3</computeroutput>, <computeroutput>mediump_vec3</computeroutput> and <computeroutput>highp_vec3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md241">
<title>3.4.4. GLM_EXT_vector_float4_precision</title>

<para>This extension exposes single-precision floating point vector with 4 components using various precision in term of ULPs: <computeroutput>lowp_vec4</computeroutput>, <computeroutput>mediump_vec4</computeroutput> and <computeroutput>highp_vec4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_float4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md242">
<title>3.4.5. GLM_EXT_vector_double1_precision</title>

<para>This extension exposes double-precision floating point vector with 1 component using various precision in term of ULPs: <computeroutput>lowp_dvec1</computeroutput>, <computeroutput>mediump_dvec1</computeroutput> and <computeroutput>highp_dvec1</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double1_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md243">
<title>3.4.6. GLM_EXT_vector_double2_precision</title>

<para>This extension exposes double-precision floating point vector with 2 components using various precision in term of ULPs: <computeroutput>lowp_dvec2</computeroutput>, <computeroutput>mediump_dvec2</computeroutput> and <computeroutput>highp_dvec2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md244">
<title>3.4.7. GLM_EXT_vector_double3_precision</title>

<para>This extension exposes double-precision floating point vector with 3 components using various precision in term of ULPs: <computeroutput>lowp_dvec3</computeroutput>, <computeroutput>mediump_dvec3</computeroutput> and <computeroutput>highp_dvec3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md245">
<title>3.4.8. GLM_EXT_vector_double4_precision</title>

<para>This extension exposes double-precision floating point vector with 4 components using various precision in term of ULPs: <computeroutput>lowp_dvec4</computeroutput>, <computeroutput>mediump_dvec4</computeroutput> and <computeroutput>highp_dvec4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/vector_double4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md246">
<title>&lt;a name=&quot;section3_4&quot;&gt;&lt;/a&gt; 3.5. Vector functions</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md247">
<title>3.5.1. GLM_EXT_vector_common</title>

<para>This extension exposes support for <computeroutput>min</computeroutput> and <computeroutput>max</computeroutput> functions taking more than two vector arguments. Also, it adds <computeroutput>fmin</computeroutput> and <computeroutput>fmax</computeroutput> variants which prevents <computeroutput>NaN</computeroutput> propagation.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/vector_float2.hpp&gt;&#32;//&#32;vec2
#include&#32;&lt;glm/ext/vector_common.hpp&gt;&#32;//&#32;fmax

float&#32;positiveMax(float&#32;const&#32;a,&#32;float&#32;const&#32;b)
{
&#32;&#32;&#32;&#32;return&#32;glm::fmax(a,&#32;b,&#32;0.0f);
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/vector_common.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md248">
<title>3.5.2. GLM_EXT_vector_relational</title>

<para>This extension exposes <computeroutput>equal</computeroutput> and <computeroutput>notEqual</computeroutput> vector variants which takes an epsilon argument.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/vector_float2.hpp&gt;&#32;//&#32;vec2
#include&#32;&lt;glm/ext/vector_relational.hpp&gt;&#32;//&#32;equal,&#32;all

bool&#32;epsilonEqual(glm::vec2&#32;const&amp;&#32;A,&#32;glm::vec2&#32;const&amp;&#32;B)
{
&#32;&#32;&#32;&#32;float&#32;const&#32;CustomEpsilon&#32;=&#32;0.0001f;
&#32;&#32;&#32;&#32;return&#32;glm::all(glm::equal(A,&#32;B,&#32;CustomEpsilon));
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/vector_relational.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md249">
<title>3.5.3. GLM_EXT_vector_ulp</title>

<para>This extension exposes function that measure of accuracy in numeric calculations.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/vector_ulp.hpp&gt;
#include&#32;&lt;glm/ext/vector_float4.hpp&gt;
#include&#32;&lt;glm/ext/vector_int4.hpp&gt;

bool&#32;test_ulp(glm::vec4&#32;const&amp;&#32;x)
{
&#32;&#32;&#32;&#32;glm::vec4&#32;const&#32;a&#32;=&#32;glm::next_float(x);&#32;//&#32;return&#32;a&#32;float&#32;a&#32;ULP&#32;away&#32;from&#32;the&#32;float&#32;argument.
&#32;&#32;&#32;&#32;return&#32;glm::all(float_distance(a,&#32;x)&#32;==&#32;glm::ivec4(1));&#32;//&#32;check&#32;both&#32;float&#32;are&#32;a&#32;single&#32;ULP&#32;away.
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/vector_ulp.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md250">
<title>&lt;a name=&quot;section3_6&quot;&gt;&lt;/a&gt; 3.6. Matrix types</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md251">
<title>3.6.1. GLM_EXT_matrix_float2x2</title>

<para>This extension exposes single-precision floating point vector with 2 columns by 2 rows: <computeroutput>mat2x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float2x2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md252">
<title>3.6.2. GLM_EXT_matrix_float2x3</title>

<para>This extension exposes single-precision floating point vector with 2 columns by 3 rows: <computeroutput>mat2x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float2x3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md253">
<title>3.6.3. GLM_EXT_matrix_float2x4</title>

<para>This extension exposes single-precision floating point vector with 2 columns by 4 rows: <computeroutput>mat2x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float2x4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md254">
<title>3.6.4. GLM_EXT_matrix_float3x2</title>

<para>This extension exposes single-precision floating point vector with 3 columns by 2 rows: <computeroutput>mat3x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float3x2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md255">
<title>3.6.5. GLM_EXT_matrix_float3x3</title>

<para>This extension exposes single-precision floating point vector with 3 columns by 3 rows: <computeroutput>mat3x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float3x3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md256">
<title>3.6.6. GLM_EXT_matrix_float3x4</title>

<para>This extension exposes single-precision floating point vector with 3 columns by 4 rows: <computeroutput>mat3x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float3x4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md257">
<title>3.6.7. GLM_EXT_matrix_float4x2</title>

<para>This extension exposes single-precision floating point vector with 4 columns by 2 rows: <computeroutput>mat4x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float4x2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md258">
<title>3.6.8. GLM_EXT_matrix_float4x3</title>

<para>This extension exposes single-precision floating point vector with 4 columns by 3 rows: <computeroutput>mat4x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float4x3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md259">
<title>3.6.9. GLM_EXT_matrix_float4x4</title>

<para>This extension exposes single-precision floating point vector with 4 columns by 4 rows: <computeroutput>mat4x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float4x4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md260">
<title>3.6.10. GLM_EXT_matrix_double2x2</title>

<para>This extension exposes double-precision floating point vector with 2 columns by 2 rows: <computeroutput>dmat2x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double2x2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md261">
<title>3.6.11. GLM_EXT_matrix_double2x3</title>

<para>This extension exposes double-precision floating point vector with 2 columns by 3 rows: <computeroutput>dmat2x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double2x3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md262">
<title>3.6.12. GLM_EXT_matrix_double2x4</title>

<para>This extension exposes double-precision floating point vector with 2 columns by 4 rows: <computeroutput>dmat2x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double2x4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md263">
<title>3.6.13. GLM_EXT_matrix_double3x2</title>

<para>This extension exposes double-precision floating point vector with 3 columns by 2 rows: <computeroutput>dmat3x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double3x2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md264">
<title>3.6.14. GLM_EXT_matrix_double3x3</title>

<para>This extension exposes double-precision floating point vector with 3 columns by 3 rows: <computeroutput>dmat3x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double3x3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md265">
<title>3.6.15. GLM_EXT_matrix_double3x4</title>

<para>This extension exposes double-precision floating point vector with 3 columns by 4 rows: <computeroutput>dmat3x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double3x4.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md266">
<title>3.6.16. GLM_EXT_matrix_double4x2</title>

<para>This extension exposes double-precision floating point vector with 4 columns by 2 rows: <computeroutput>dmat4x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double4x2.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md267">
<title>3.6.17. GLM_EXT_matrix_double4x3</title>

<para>This extension exposes double-precision floating point vector with 4 columns by 3 rows: <computeroutput>dmat4x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double4x3.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md268">
<title>3.6.18. GLM_EXT_matrix_double4x4</title>

<para>This extension exposes double-precision floating point vector with 4 columns by 4 rows: <computeroutput>dmat4x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double4x4.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md269">
<title>&lt;a name=&quot;section3_7&quot;&gt;&lt;/a&gt; 3.7. Matrix types with precision qualifiers</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md270">
<title>3.7.1. GLM_EXT_matrix_float2x2_precision</title>

<para>This extension exposes single-precision floating point vector with 2 columns by 2 rows using various precision in term of ULPs: <computeroutput>lowp_mat2x2</computeroutput>, <computeroutput>mediump_mat2x2</computeroutput> and <computeroutput>highp_mat2x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float2x2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md271">
<title>3.7.2. GLM_EXT_matrix_float2x3_precision</title>

<para>This extension exposes single-precision floating point vector with 2 columns by 3 rows using various precision in term of ULPs: <computeroutput>lowp_mat2x3</computeroutput>, <computeroutput>mediump_mat2x3</computeroutput> and <computeroutput>highp_mat2x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float2x3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md272">
<title>3.7.3. GLM_EXT_matrix_float2x4_precision</title>

<para>This extension exposes single-precision floating point vector with 2 columns by 4 rows using various precision in term of ULPs: <computeroutput>lowp_mat2x4</computeroutput>, <computeroutput>mediump_mat2x4</computeroutput> and <computeroutput>highp_mat2x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float2x4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md273">
<title>3.7.4. GLM_EXT_matrix_float3x2_precision</title>

<para>This extension exposes single-precision floating point vector with 3 columns by 2 rows using various precision in term of ULPs: <computeroutput>lowp_mat3x2</computeroutput>, <computeroutput>mediump_mat3x2</computeroutput> and <computeroutput>highp_mat3x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float3x2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md274">
<title>3.7.5. GLM_EXT_matrix_float3x3_precision</title>

<para>This extension exposes single-precision floating point vector with 3 columns by 3 rows using various precision in term of ULPs: <computeroutput>lowp_mat3x3</computeroutput>, <computeroutput>mediump_mat3x3</computeroutput> and <computeroutput>highp_mat3x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float3x3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md275">
<title>3.7.6. GLM_EXT_matrix_float3x4_precision</title>

<para>This extension exposes single-precision floating point vector with 3 columns by 4 rows using various precision in term of ULPs: <computeroutput>lowp_mat3x4</computeroutput>, <computeroutput>mediump_mat3x4</computeroutput> and <computeroutput>highp_mat3x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float3x4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md276">
<title>3.7.7. GLM_EXT_matrix_float4x2_precision</title>

<para>This extension exposes single-precision floating point vector with 4 columns by 2 rows using various precision in term of ULPs: <computeroutput>lowp_mat4x2</computeroutput>, <computeroutput>mediump_mat4x2</computeroutput> and <computeroutput>highp_mat4x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float4x2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md277">
<title>3.7.8. GLM_EXT_matrix_float4x3_precision</title>

<para>This extension exposes single-precision floating point vector with 4 columns by 3 rows using various precision in term of ULPs: <computeroutput>lowp_mat4x3</computeroutput>, <computeroutput>mediump_mat4x3</computeroutput> and <computeroutput>highp_mat4x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float4x3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md278">
<title>3.7.9. GLM_EXT_matrix_float4x4_precision</title>

<para>This extension exposes single-precision floating point vector with 4 columns by 4 rows using various precision in term of ULPs: <computeroutput>lowp_mat4x4</computeroutput>, <computeroutput>mediump_mat4x4</computeroutput> and <computeroutput>highp_mat4x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_float4x4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md279">
<title>3.7.10. GLM_EXT_matrix_double2x2_precision</title>

<para>This extension exposes double-precision floating point vector with 2 columns by 2 rows using various precision in term of ULPs: <computeroutput>lowp_dmat2x2</computeroutput>, <computeroutput>mediump_dmat2x2</computeroutput> and <computeroutput>highp_dmat2x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double2x2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md280">
<title>3.7.11. GLM_EXT_matrix_double2x3_precision</title>

<para>This extension exposes double-precision floating point vector with 2 columns by 3 rows using various precision in term of ULPs: <computeroutput>lowp_dmat2x3</computeroutput>, <computeroutput>mediump_dmat2x3</computeroutput> and <computeroutput>highp_dmat2x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double2x3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md281">
<title>3.7.12. GLM_EXT_matrix_double2x4_precision</title>

<para>This extension exposes double-precision floating point vector with 2 columns by 4 rows using various precision in term of ULPs: <computeroutput>lowp_dmat2x4</computeroutput>, <computeroutput>mediump_dmat2x4</computeroutput> and <computeroutput>highp_dmat2x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double2x4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md282">
<title>3.7.13. GLM_EXT_matrix_double3x2_precision</title>

<para>This extension exposes double-precision floating point vector with 3 columns by 2 rows using various precision in term of ULPs: <computeroutput>lowp_dmat3x2</computeroutput>, <computeroutput>mediump_dmat3x2</computeroutput> and <computeroutput>highp_dmat3x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double3x2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md283">
<title>3.7.14. GLM_EXT_matrix_double3x3_precision</title>

<para>This extension exposes double-precision floating point vector with 3 columns by 3 rows using various precision in term of ULPs: <computeroutput>lowp_dmat3x3</computeroutput>, <computeroutput>mediump_dmat3x3</computeroutput> and <computeroutput>highp_dmat3x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double3x3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md284">
<title>3.7.15. GLM_EXT_matrix_double3x4_precision</title>

<para>This extension exposes double-precision floating point vector with 3 columns by 4 rows using various precision in term of ULPs: <computeroutput>lowp_dmat3x4</computeroutput>, <computeroutput>mediump_dmat3x4</computeroutput> and <computeroutput>highp_dmat3x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double3x4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md285">
<title>3.7.16. GLM_EXT_matrix_double4x2_precision</title>

<para>This extension exposes double-precision floating point vector with 4 columns by 2 rows using various precision in term of ULPs: <computeroutput>lowp_dmat4x2</computeroutput>, <computeroutput>mediump_dmat4x2</computeroutput> and <computeroutput>highp_dmat4x2</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double4x2_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md286">
<title>3.7.17. GLM_EXT_matrix_double4x3_precision</title>

<para>This extension exposes double-precision floating point vector with 4 columns by 3 rows using various precision in term of ULPs: <computeroutput>lowp_dmat4x3</computeroutput>, <computeroutput>mediump_dmat4x3</computeroutput> and <computeroutput>highp_dmat4x3</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double4x3_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md287">
<title>3.7.18. GLM_EXT_matrix_double4x4_precision</title>

<para>This extension exposes double-precision floating point vector with 4 columns by 4 rows using various precision in term of ULPs: <computeroutput>lowp_dmat4x4</computeroutput>, <computeroutput>mediump_dmat4x4</computeroutput> and <computeroutput>highp_dmat4x4</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_double4x4_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md288">
<title>&lt;a name=&quot;section3_8&quot;&gt;&lt;/a&gt; 3.8. Matrix functions</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md289">
<title>3.8.1. GLM_EXT_matrix_relational</title>

<para>This extension exposes <computeroutput>equal</computeroutput> and <computeroutput>notEqual</computeroutput> matrix variants which takes an optional epsilon argument.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/vector_bool4.hpp&gt;&#32;//&#32;bvec4
#include&#32;&lt;glm/ext/matrix_float4x4.hpp&gt;&#32;//&#32;mat4
#include&#32;&lt;glm/ext/matrix_relational.hpp&gt;&#32;//&#32;equal,&#32;all

bool&#32;epsilonEqual(glm::mat4&#32;const&amp;&#32;A,&#32;glm::mat4&#32;const&amp;&#32;B)
{
&#32;&#32;&#32;&#32;float&#32;const&#32;CustomEpsilon&#32;=&#32;0.0001f;
&#32;&#32;&#32;&#32;glm::bvec4&#32;const&#32;ColumnEqual&#32;=&#32;glm::equal(A,&#32;B,&#32;CustomEpsilon);&#32;//&#32;Evaluation&#32;per&#32;column
&#32;&#32;&#32;&#32;return&#32;glm::all(ColumnEqual);
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/matrix_relational.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md290">
<title>3.8.2. GLM_EXT_matrix_transform</title>

<para>This extension exposes matrix transformation functions: <computeroutput>translate</computeroutput>, <computeroutput>rotate</computeroutput> and <computeroutput>scale</computeroutput>.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/vector_float2.hpp&gt;&#32;//&#32;vec2
#include&#32;&lt;glm/ext/vector_float3.hpp&gt;&#32;//&#32;vec3
#include&#32;&lt;glm/ext/matrix_float4x4.hpp&gt;&#32;//&#32;mat4x4
#include&#32;&lt;glm/ext/matrix_transform.hpp&gt;&#32;//&#32;translate,&#32;rotate,&#32;scale,&#32;identity

glm::mat4&#32;computeModelViewMatrix(float&#32;Translate,&#32;glm::vec2&#32;const&#32;&amp;&#32;Rotate)
{
&#32;&#32;&#32;&#32;glm::mat4&#32;View&#32;=&#32;glm::translate(glm::identity(),&#32;glm::vec3(0.0f,&#32;0.0f,&#32;-Translate));
&#32;&#32;&#32;&#32;View&#32;=&#32;glm::rotate(View,&#32;Rotate.y,&#32;glm::vec3(-1.0f,&#32;0.0f,&#32;0.0f));
&#32;&#32;&#32;&#32;View&#32;=&#32;glm::rotate(View,&#32;Rotate.x,&#32;glm::vec3(0.0f,&#32;1.0f,&#32;0.0f));
&#32;&#32;&#32;&#32;glm::mat4&#32;Model&#32;=&#32;glm::scale(glm::identity(),&#32;glm::vec3(0.5f));
&#32;&#32;&#32;&#32;return&#32;View&#32;*&#32;Model;
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/matrix_transform.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md291">
<title>3.8.3. GLM_EXT_matrix_clip_space</title>

<para>This extension exposes functions to transform scenes into the clip space.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/ext/matrix_float4x4.hpp&gt;&#32;//&#32;mat4x4
#include&#32;&lt;glm/ext/matrix_clip_space.hpp&gt;&#32;//&#32;perspective
#include&#32;&lt;glm/trigonometric.hpp&gt;&#32;//&#32;radians

glm::mat4&#32;computeProjection(float&#32;Width,&#32;float&#32;Height)
{
&#32;&#32;&#32;&#32;return&#32;glm::perspective(glm::radians(45.0f),&#32;Width&#32;/&#32;Height,&#32;0.1f,&#32;100.f);
}
</computeroutput></literallayout></para>

<para>Include <computeroutput>&lt;glm/ext/matrix_clip_space.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md292">
<title>3.8.4. GLM_EXT_matrix_projection</title>

<para>This extension exposes functions to map object coordinates into window coordinates and reverse</para>

<para>Include <computeroutput>&lt;glm/ext/matrix_projection.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md293">
<title>&lt;a name=&quot;section3_9&quot;&gt;&lt;/a&gt; 3.9. Quaternion types</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md294">
<title>3.9.1. GLM_EXT_quaternion_float</title>

<para>This extension exposes single-precision floating point quaternion: <computeroutput>quat</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_float.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md295">
<title>3.9.2. GLM_EXT_quaternion_double</title>

<para>This extension exposes double-precision floating point quaternion: <computeroutput>dquat</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_double.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md296">
<title>&lt;a name=&quot;section3_10&quot;&gt;&lt;/a&gt; 3.10. Quaternion types with precision qualifiers</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md297">
<title>3.10.1. GLM_EXT_quaternion_float_precision</title>

<para>This extension exposes single-precision floating point quaternion using various precision in term of ULPs: <computeroutput>lowp_quat</computeroutput>, <computeroutput>mediump_quat</computeroutput> and <computeroutput>highp_quat</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_float_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md298">
<title>3.10.2. GLM_EXT_quaternion_double_precision</title>

<para>This extension exposes double-precision floating point quaternion using various precision in term of ULPs: <computeroutput>lowp_dquat</computeroutput>, <computeroutput>mediump_dquat</computeroutput> and <computeroutput>highp_dquat</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_double_precision.hpp&gt;</computeroutput> to use these features.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md299">
<title>&lt;a name=&quot;section3_11&quot;&gt;&lt;/a&gt; 3.11. Quaternion functions</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md300">
<title>3.11.1. GLM_EXT_quaternion_common</title>

<para>This extension exposes common quaternion functions such as <computeroutput>slerp</computeroutput>, <computeroutput>conjugate</computeroutput> and <computeroutput>inverse</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_common.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md301">
<title>3.11.2. GLM_EXT_quaternion_geometric</title>

<para>This extension exposes geometric quaternion functions such as <computeroutput>length</computeroutput>, <computeroutput>normalize</computeroutput>, <computeroutput>dot</computeroutput> and <computeroutput>cross</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_geometric.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md302">
<title>3.11.3. GLM_EXT_quaternion_trigonometric</title>

<para>This extension exposes trigonometric quaternion functions such as <computeroutput>angle</computeroutput> and <computeroutput>axis</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_trigonometric.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md303">
<title>3.11.4. GLM_EXT_quaternion_exponential</title>

<para>This extensions expose exponential functions for quaternions such as <computeroutput>exp</computeroutput>, <computeroutput>log</computeroutput>, <computeroutput>pow</computeroutput> and <computeroutput>sqrt</computeroutput>.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_exponential.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md304">
<title>3.11.5. GLM_EXT_quaternion_relational</title>

<para>This extension exposes relational functions to compare quaternions.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_relational.hpp&gt;</computeroutput> to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md305">
<title>3.11.6. GLM_EXT_quaternion_transform</title>

<para>This extension exposes functions to transform objects.</para>

<para>Include <computeroutput>&lt;glm/ext/quaternion_transform.hpp&gt;</computeroutput> to use these features.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md307">
<title>&lt;a name=&quot;section4&quot;&gt;&lt;/a&gt; 4. Recommended extensions</title>

<para>GLM extends the core GLSL feature set with extensions. These extensions include: quaternion, transformation, spline, matrix inverse, color spaces, etc.</para>

<para>To include an extension, we only need to include the dedicated header file. Once included, the features are added to the GLM namespace.</para>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;
#include&#32;&lt;glm/gtc/matrix_transform.hpp&gt;

int&#32;foo()
{
&#32;&#32;&#32;&#32;glm::vec4&#32;Position&#32;=&#32;glm::vec4(glm::&#32;vec3(0.0f),&#32;1.0f);
&#32;&#32;&#32;&#32;glm::mat4&#32;Model&#32;=&#32;glm::translate(glm::mat4(1.0f),&#32;glm::vec3(1.0f));

&#32;&#32;&#32;&#32;glm::vec4&#32;Transformed&#32;=&#32;Model&#32;*&#32;Position;
&#32;&#32;&#32;&#32;...

&#32;&#32;&#32;&#32;return&#32;0;
}
</computeroutput></literallayout></para>

<para>When an extension is included, all the dependent core functionalities and extensions will be included as well.</para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md308">
<title>&lt;a name=&quot;section4_1&quot;&gt;&lt;/a&gt; 4.1. GLM_GTC_bitfield</title>

<para>Fast bitfield operations on scalar and vector variables.</para>

<para><computeroutput>&lt;glm/gtc/bitfield.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md309">
<title>&lt;a name=&quot;section4_2&quot;&gt;&lt;/a&gt; 4.2. GLM_GTC_color_space</title>

<para>Conversion between linear RGB and sRGB color spaces.</para>

<para><computeroutput>&lt;glm/gtc/color_space.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md310">
<title>&lt;a name=&quot;section4_3&quot;&gt;&lt;/a&gt; 4.3. GLM_GTC_constants</title>

<para>Provide a list of built-in constants.</para>

<para><computeroutput>&lt;glm/gtc/constants.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md311">
<title>&lt;a name=&quot;section4_4&quot;&gt;&lt;/a&gt; 4.4. GLM_GTC_epsilon</title>

<para>Approximate equality comparisons for floating-point numbers, possibly with a user-defined epsilon.</para>

<para><computeroutput>&lt;glm/gtc/epsilon.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md312">
<title>&lt;a name=&quot;section4_5&quot;&gt;&lt;/a&gt; 4.5. GLM_GTC_integer</title>

<para>Integer variants of core GLM functions.</para>

<para><computeroutput>&lt;glm/gtc/integer.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md313">
<title>&lt;a name=&quot;section4_6&quot;&gt;&lt;/a&gt; 4.6. GLM_GTC_matrix_access</title>

<para>Functions to conveniently access the individual rows or columns of a matrix.</para>

<para><computeroutput>&lt;glm/gtc/matrix_access.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md314">
<title>&lt;a name=&quot;section4_7&quot;&gt;&lt;/a&gt; 4.7. GLM_GTC_matrix_integer</title>

<para>Integer matrix types similar to the core floating-point matrices. Some operations (such as inverse and determinant) are not supported.</para>

<para><computeroutput>&lt;glm/gtc/matrix_integer.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md315">
<title>&lt;a name=&quot;section4_8&quot;&gt;&lt;/a&gt; 4.8. GLM_GTC_matrix_inverse</title>

<para>Additional matrix inverse functions.</para>

<para><computeroutput>&lt;glm/gtc/matrix_inverse.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md316">
<title>&lt;a name=&quot;section4_9&quot;&gt;&lt;/a&gt; 4.9. GLM_GTC_matrix_transform</title>

<para><link linkend="_struct_matrix">Matrix</link> transformation functions that follow the OpenGL fixed-function conventions.</para>

<para>For example, the <computeroutput>lookAt</computeroutput> function generates a transformation matrix that projects world coordinates into eye coordinates suitable for projection matrices (e.g. <computeroutput>perspective</computeroutput>, <computeroutput>ortho</computeroutput>). See the OpenGL compatibility specifications for more information about the layout of these generated matrices.</para>

<para>The matrices generated by this extension use standard OpenGL fixed-function conventions. For example, the <computeroutput>lookAt</computeroutput> function generates a transform from world space into the specific eye space that the projective matrix functions (<computeroutput>perspective</computeroutput>, <computeroutput>ortho</computeroutput>, etc) are designed to expect. The OpenGL compatibility specifications define the particular layout of this eye space.</para>

<para><computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md317">
<title>&lt;a name=&quot;section4_10&quot;&gt;&lt;/a&gt; 4.10. GLM_GTC_noise</title>

<para>Define 2D, 3D and 4D procedural noise functions.</para>

<para>&lt;<computeroutput>glm/gtc/noise.hpp&gt;</computeroutput> need to be included to use these features.</para>

<para></para>

<para>Figure 4.10.1: <link linkend="_group__gtc__noise_1ga8122468c69015ff397349a7dcc638b27">glm::simplex</link>(<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">glm::vec2</link>(x / 16.f, y / 16.f));</para>

<para></para>

<para>Figure 4.10.2: <link linkend="_group__gtc__noise_1ga8122468c69015ff397349a7dcc638b27">glm::simplex</link>(<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">glm::vec3</link>(x / 16.f, y / 16.f, 0.5f));</para>

<para></para>

<para>Figure 4.10.3: <link linkend="_group__gtc__noise_1ga8122468c69015ff397349a7dcc638b27">glm::simplex</link>(<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(x / 16.f, y / 16.f, 0.5f, 0.5f));</para>

<para></para>

<para>Figure 4.10.4: <link linkend="_group__gtc__noise_1ga1e043ce3b51510e9bc4469227cefc38a">glm::perlin</link>(<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">glm::vec2</link>(x / 16.f, y / 16.f));</para>

<para></para>

<para>Figure 4.10.5: <link linkend="_group__gtc__noise_1ga1e043ce3b51510e9bc4469227cefc38a">glm::perlin</link>(<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">glm::vec3</link>(x / 16.f, y / 16.f, 0.5f));</para>

<para></para>

<para>Figure 4.10.6: <link linkend="_group__gtc__noise_1ga1e043ce3b51510e9bc4469227cefc38a">glm::perlin</link>(<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(x / 16.f, y / 16.f, 0.5f, 0.5f)));</para>

<para></para>

<para>Figure 4.10.7: <link linkend="_group__gtc__noise_1ga1e043ce3b51510e9bc4469227cefc38a">glm::perlin</link>(<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">glm::vec2</link>(x / 16.f, y / 16.f), <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">glm::vec2</link>(2.0f));</para>

<para></para>

<para>Figure 4.10.8: <link linkend="_group__gtc__noise_1ga1e043ce3b51510e9bc4469227cefc38a">glm::perlin</link>(<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">glm::vec3</link>(x / 16.f, y / 16.f, 0.5f), <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">glm::vec3</link>(2.0f));</para>

<para></para>

<para>Figure 4.10.9: <link linkend="_group__gtc__noise_1ga1e043ce3b51510e9bc4469227cefc38a">glm::perlin</link>(<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(x / 16.f, y / 16.f, <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">glm::vec2</link>(0.5f)), <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(2.0f));</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md318">
<title>&lt;a name=&quot;section4_11&quot;&gt;&lt;/a&gt; 4.11. GLM_GTC_packing</title>

<para>Convert scalar and vector types to and from packed formats, saving space at the cost of precision. However, packing a value into a format that it was previously unpacked from is guaranteed to be lossless.</para>

<para><computeroutput>&lt;glm/gtc/packing.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md319">
<title>&lt;a name=&quot;section4_12&quot;&gt;&lt;/a&gt; 4.12. GLM_GTC_quaternion</title>

<para>Quaternions and operations upon thereof.</para>

<para><computeroutput>&lt;glm/gtc/quaternion.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md320">
<title>&lt;a name=&quot;section4_13&quot;&gt;&lt;/a&gt; 4.13. GLM_GTC_random</title>

<para>Probability distributions in up to four dimensions.</para>

<para><computeroutput>&lt;glm/gtc/random.hpp&gt;</computeroutput> need to be included to use these features.</para>

<para></para>

<para>Figure 4.13.1: <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(<link linkend="_group__gtc__random_1ga04e241ab88374a477a2c2ceadd2fa03d">glm::linearRand</link>(<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">glm::vec2</link>(-1), <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">glm::vec2(1)</link>), 0, 1);</para>

<para></para>

<para>Figure 4.13.2: <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(<link linkend="_group__gtc__random_1gaed9dfacc8a20e691e22aafa944b1d3bf">glm::circularRand</link>(1.0f), 0, 1);</para>

<para></para>

<para>Figure 4.13.3: <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(<link linkend="_group__gtc__random_1ga33e342051ba8122d91ec76b8a240d6e4">glm::sphericalRand</link>(1.0f), 1);</para>

<para></para>

<para>Figure 4.13.4: <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(<link linkend="_group__gtc__random_1ga5d06c2fa63362899b6b3b92fd7574b84">glm::diskRand</link>(1.0f), 0, 1);</para>

<para></para>

<para>Figure 4.13.5: <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(<link linkend="_group__gtc__random_1gaee9e73396e6d094699de6684ea17ce3c">glm::ballRand</link>(1.0f), 1);</para>

<para></para>

<para>Figure 4.13.6: <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link>(<link linkend="_group__gtc__random_1ga5193a83e49e4fdc5652c084711083574">glm::gaussRand</link>(<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">glm::vec3(0)</link>, <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">glm::vec3(1)</link>), 1);</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md321">
<title>&lt;a name=&quot;section4_14&quot;&gt;&lt;/a&gt; 4.14. GLM_GTC_reciprocal</title>

<para>Reciprocal trigonometric functions (e.g. secant, cosecant, tangent).</para>

<para><computeroutput>&lt;glm/gtc/reciprocal.hpp&gt;</computeroutput> need to be included to use the features of this extension.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md322">
<title>&lt;a name=&quot;section4_15&quot;&gt;&lt;/a&gt; 4.15. GLM_GTC_round</title>

<para>Various rounding operations and common special cases thereof.</para>

<para><computeroutput>&lt;glm/gtc/round.hpp&gt;</computeroutput> need to be included to use the features of this extension.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md323">
<title>&lt;a name=&quot;section4_16&quot;&gt;&lt;/a&gt; 4.16. GLM_GTC_type_aligned</title>

<para>Aligned vector types.</para>

<para><computeroutput>&lt;glm/gtc/type_aligned.hpp&gt;</computeroutput> need to be included to use the features of this extension.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md324">
<title>&lt;a name=&quot;section4_17&quot;&gt;&lt;/a&gt; 4.17. GLM_GTC_type_precision</title>

<para>Vector and matrix types with defined precisions, e.g. <computeroutput>i8vec4</computeroutput>, which is a 4D vector of signed 8-bit integers.</para>

<para><computeroutput>&lt;glm/gtc/type\_precision.hpp&gt;</computeroutput> need to be included to use the features of this extension.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md325">
<title>&lt;a name=&quot;section4_18&quot;&gt;&lt;/a&gt; 4.18. GLM_GTC_type_ptr</title>

<para>Facilitate interactions between pointers to basic types (e.g. <computeroutput>float*</computeroutput>) and GLM types (e.g. <computeroutput>mat4</computeroutput>).</para>

<para>This extension defines an overloaded function, <computeroutput><link linkend="_group__gtc__type__ptr_1gaada83809aefafd7c3264772e6b24b685">glm::value_ptr</link></computeroutput>, which returns a pointer to the memory layout of any GLM vector or matrix (<computeroutput>vec3</computeroutput>, <computeroutput>mat4</computeroutput>, etc.). <link linkend="_struct_matrix">Matrix</link> types store their values in column-major order. This is useful for uploading data to matrices or for copying data to buffer objects.</para>

<para><literallayout><computeroutput>//&#32;GLM_GTC_type_ptr&#32;provides&#32;a&#32;safe&#32;solution:
#include&#32;&lt;glm/glm.hpp&gt;
#include&#32;&lt;glm/gtc/type_ptr.hpp&gt;

void&#32;foo()
{
&#32;&#32;&#32;&#32;glm::vec4&#32;v(0.0f);
&#32;&#32;&#32;&#32;glm::mat4&#32;m(1.0f);
&#32;&#32;&#32;&#32;...
&#32;&#32;&#32;&#32;glVertex3fv(glm::value_ptr(v))
&#32;&#32;&#32;&#32;glLoadMatrixfv(glm::value_ptr(m));
}

//&#32;Another&#32;solution,&#32;this&#32;one&#32;inspired&#32;by&#32;the&#32;STL:
#include&#32;&lt;glm/glm.hpp&gt;

void&#32;foo()
{
&#32;&#32;&#32;&#32;glm::vec4&#32;v(0.0f);
&#32;&#32;&#32;&#32;glm::mat4&#32;m(1.0f);
&#32;&#32;&#32;&#32;...
&#32;&#32;&#32;&#32;glVertex3fv(&amp;v[0]);
&#32;&#32;&#32;&#32;glLoadMatrixfv(&amp;m[0][0]);
}
</computeroutput></literallayout></para>

<para>*Note: It would be possible to implement <link xlink:href="http://www.opengl.org/sdk/docs/man2/xhtml/glVertex.xml"><computeroutput>glVertex3fv</computeroutput></link>(<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">glm::vec3(0)</link>) in C++ with the appropriate cast operator that would result as an implicit cast in this example. However cast operators may produce programs running with unexpected behaviours without build error or any form of notification. *</para>

<para><computeroutput>&lt;glm/gtc/type_ptr.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md326">
<title>&lt;a name=&quot;section4_19&quot;&gt;&lt;/a&gt; 4.19. GLM_GTC_ulp</title>

<para>Measure a function&apos;s accuracy given a reference implementation of it. This extension works on floating-point data and provides results in <link xlink:href="http://ljk.imag.fr/membres/Carine.Lucas/TPScilab/JMMuller/ulp-toms.pdf">ULP</link>.</para>

<para><computeroutput>&lt;glm/gtc/ulp.hpp&gt;</computeroutput> need to be included to use these features.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md327">
<title>&lt;a name=&quot;section4_20&quot;&gt;&lt;/a&gt; 4.20. GLM_GTC_vec1</title>

<para>Add *vec1 types.</para>

<para><computeroutput>&lt;glm/gtc/vec1.hpp&gt;</computeroutput> need to be included to use these features.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md329">
<title>&lt;a name=&quot;section5&quot;&gt;&lt;/a&gt; 5. OpenGL interoperability</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md330">
<title>&lt;a name=&quot;section5_1&quot;&gt;&lt;/a&gt; 5.1. GLM replacements for deprecated OpenGL functions</title>

<para>OpenGL 3.1 specification has deprecated some features that have been removed from OpenGL 3.2 core profile specification. GLM provides some replacement functions.</para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/glRotate.xml"><emphasis><emphasis role="bold">glRotate{f, d}:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;glm::rotate(glm::mat4&#32;const&amp;&#32;m,&#32;float&#32;angle,&#32;glm::vec3&#32;const&amp;&#32;axis);
glm::dmat4&#32;glm::rotate(glm::dmat4&#32;const&amp;&#32;m,&#32;double&#32;angle,&#32;glm::dvec3&#32;const&amp;&#32;axis);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: &lt;glm/gtc/matrix_transform.hpp&gt;</para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/man2/xhtml/glScale.xml"><emphasis><emphasis role="bold">glScale{f, d}:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;glm::scale(glm::mat4&#32;const&amp;&#32;m,&#32;glm::vec3&#32;const&amp;&#32;factors);
glm::dmat4&#32;glm::scale(glm::dmat4&#32;const&amp;&#32;m,&#32;glm::dvec3&#32;const&amp;&#32;factors);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: &lt;glm/gtc/matrix_transform.hpp&gt;</para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/glTranslate.xml"><emphasis><emphasis role="bold">glTranslate{f, d}:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;glm::translate(glm::mat4&#32;const&amp;&#32;m,&#32;glm::vec3&#32;const&amp;&#32;translation);
glm::dmat4&#32;glm::translate(glm::dmat4&#32;const&amp;&#32;m,&#32;glm::dvec3&#32;const&amp;&#32;translation);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: &lt;glm/gtc/matrix_transform.hpp&gt;</para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/glLoadIdentity.xml"><emphasis><emphasis role="bold">glLoadIdentity:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4(1.0)&#32;or&#32;glm::mat4();
glm::dmat4(1.0)&#32;or&#32;glm::dmat4();
</computeroutput></literallayout></para>

<para>From GLM core library: <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/glMultMatrix.xml"><emphasis><emphasis role="bold">glMultMatrix{f, d}:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4()&#32;*&#32;glm::mat4();
glm::dmat4()&#32;*&#32;glm::dmat4();
</computeroutput></literallayout></para>

<para>From GLM core library: <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/glLoadTransposeMatrix.xml"><emphasis><emphasis role="bold">glLoadTransposeMatrix{f, d}:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::transpose(glm::mat4());
glm::transpose(glm::dmat4());
</computeroutput></literallayout></para>

<para>From GLM core library: <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/glMultTransposeMatrix.xml"><emphasis><emphasis role="bold">glMultTransposeMatrix{f, d}:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4()&#32;*&#32;glm::transpose(glm::mat4());
glm::dmat4()&#32;*&#32;glm::transpose(glm::dmat4());
</computeroutput></literallayout></para>

<para>From GLM core library: <computeroutput>&lt;glm/glm.hpp&gt;</computeroutput></para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/man2/xhtml/glFrustum.xml"><emphasis><emphasis role="bold">glFrustum:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;glm::frustum(float&#32;left,&#32;float&#32;right,&#32;float&#32;bottom,&#32;float&#32;top,&#32;float&#32;zNear,&#32;float&#32;zFar);
glm::dmat4&#32;glm::frustum(double&#32;left,&#32;double&#32;right,&#32;double&#32;bottom,&#32;double&#32;top,&#32;double&#32;zNear,&#32;double&#32;zFar);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/glOrtho.xml"><emphasis><emphasis role="bold">glOrtho:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;glm::ortho(float&#32;left,&#32;float&#32;right,&#32;float&#32;bottom,&#32;float&#32;top,&#32;float&#32;zNear,&#32;float&#32;zFar);
glm::dmat4&#32;glm::ortho(double&#32;left,&#32;double&#32;right,&#32;double&#32;bottom,&#32;double&#32;top,&#32;double&#32;zNear,&#32;double&#32;zFar);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md331">
<title>&lt;a name=&quot;section5_2&quot;&gt;&lt;/a&gt; 5.2. GLM replacements for GLU functions</title>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/gluLookAt.xml"><emphasis><emphasis role="bold">gluLookAt:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;glm::lookAt(glm::vec3&#32;const&amp;&#32;eye,&#32;glm::vec3&#32;const&amp;&#32;center,&#32;glm::vec3&#32;const&amp;&#32;up);
glm::dmat4&#32;glm::lookAt(glm::dvec3&#32;const&amp;&#32;eye,&#32;glm::dvec3&#32;const&amp;&#32;center,&#32;glm::dvec3&#32;const&amp;&#32;up);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/gluOrtho2D.xml"><emphasis><emphasis role="bold">gluOrtho2D:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;glm::ortho(float&#32;left,&#32;float&#32;right,&#32;float&#32;bottom,&#32;float&#32;top);
glm::dmat4&#32;glm::ortho(double&#32;left,&#32;double&#32;right,&#32;double&#32;bottom,&#32;double&#32;top);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/gluPerspective.xml"><emphasis><emphasis role="bold">gluPerspective:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;perspective(float&#32;fovy,&#32;float&#32;aspect,&#32;float&#32;zNear,&#32;float&#32;zFar);
glm::dmat4&#32;perspective(double&#32;fovy,&#32;double&#32;aspect,&#32;double&#32;zNear,&#32;double&#32;zFar);
</computeroutput></literallayout></para>

<para>Note that in GLM, fovy is expressed in radians, not degrees.</para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/gluPickMatrix.xml"><emphasis><emphasis role="bold">gluPickMatrix:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::mat4&#32;pickMatrix(glm::vec2&#32;const&amp;&#32;center,&#32;glm::vec2&#32;const&amp;&#32;delta,&#32;glm::ivec4&#32;const&amp;&#32;viewport);
glm::dmat4&#32;pickMatrix(glm::dvec2&#32;const&amp;&#32;center,&#32;glm::dvec2&#32;const&amp;&#32;delta,&#32;glm::ivec4&#32;const&amp;&#32;viewport);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/man2/xhtml/gluProject.xml"><emphasis><emphasis role="bold">gluProject:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::vec3&#32;project(glm::vec3&#32;const&amp;&#32;obj,&#32;glm::mat4&#32;const&amp;&#32;model,&#32;glm::mat4&#32;const&amp;&#32;proj,&#32;glm::ivec4&#32;const&amp;&#32;viewport);
glm::dvec3&#32;project(glm::dvec3&#32;const&amp;&#32;obj,&#32;glm::dmat4&#32;const&amp;&#32;model,&#32;glm::dmat4&#32;const&amp;&#32;proj,&#32;glm::ivec4&#32;const&amp;&#32;viewport);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>

<para><link xlink:href="https://www.opengl.org/sdk/docs/man2/xhtml/gluUnProject.xml"><emphasis><emphasis role="bold">gluUnProject:</emphasis></emphasis></link></para>

<para><literallayout><computeroutput>glm::vec3&#32;unProject(glm::vec3&#32;const&amp;&#32;win,&#32;glm::mat4&#32;const&amp;&#32;model,&#32;glm::mat4&#32;const&amp;&#32;proj,&#32;glm::ivec4&#32;const&amp;&#32;viewport);
glm::dvec3&#32;unProject(glm::dvec3&#32;const&amp;&#32;win,&#32;glm::dmat4&#32;const&amp;&#32;model,&#32;glm::dmat4&#32;const&amp;&#32;proj,&#32;glm::ivec4&#32;const&amp;&#32;viewport);
</computeroutput></literallayout></para>

<para>From <computeroutput>GLM_GTC_matrix_transform</computeroutput> extension: <computeroutput>&lt;glm/gtc/matrix_transform.hpp&gt;</computeroutput></para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md333">
<title>&lt;a name=&quot;section6&quot;&gt;&lt;/a&gt; 6. Known issues</title>

<para>This section reports GLSL features that GLM can&apos;t accurately emulate due to language restrictions.</para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md334">
<title>&lt;a name=&quot;section6_1&quot;&gt;&lt;/a&gt; 6.1. not function</title>

<para>The GLSL function &apos;not&apos; is a keyword in C++. To prevent name collisions and ensure a consistent API, the name <computeroutput>not\_</computeroutput> (note the underscore) is used instead.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md335">
<title>&lt;a name=&quot;section6_2&quot;&gt;&lt;/a&gt; 6.2. Precision qualifiers support</title>

<para>GLM supports GLSL precision qualifiers through prefixes instead of qualifiers. For example, GLM exposes \verb|lowp_vec4|, \verb|mediump_vec4| and \verb|highp_vec4| as variations of \verb|vec4|.</para>

<para>Similarly to GLSL, GLM precision qualifiers are used to trade precision of operations in term of <link xlink:href="http://en.wikipedia.org/wiki/Unit_in_the_last_place">ULPs</link> for better performance. By default, all the types use high precision.</para>

<para><literallayout><computeroutput>//&#32;Using&#32;precision&#32;qualifier&#32;in&#32;GLSL:

ivec3&#32;foo(in&#32;vec4&#32;v)
{
&#32;&#32;&#32;&#32;highp&#32;vec4&#32;a&#32;=&#32;v;
&#32;&#32;&#32;&#32;mediump&#32;vec4&#32;b&#32;=&#32;a;
&#32;&#32;&#32;&#32;lowp&#32;ivec3&#32;c&#32;=&#32;ivec3(b);
&#32;&#32;&#32;&#32;return c;
}

//&#32;Using&#32;precision&#32;qualifier&#32;in&#32;GLM:

#include&#32;&lt;glm/glm.hpp&gt;

ivec3&#32;foo(const&#32;vec4&#32;&amp;&#32;v)
{
&#32;&#32;&#32;&#32;highp_vec4&#32;a&#32;=&#32;v;
&#32;&#32;&#32;&#32;medium_vec4&#32;b&#32;=&#32;a;
&#32;&#32;&#32;&#32;lowp_ivec3&#32;c&#32;=&#32;glm::ivec3(b);
&#32;&#32;&#32;&#32;return c;
}
</computeroutput></literallayout></para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md337">
<title>&lt;a name=&quot;section7&quot;&gt;&lt;/a&gt; 7. FAQ</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md338">
<title>&lt;a name=&quot;section7_1&quot;&gt;&lt;/a&gt; 7.1 Why GLM follows GLSL specification and conventions?</title>

<para>Following GLSL conventions is a really strict policy of GLM. It has been designed following the idea that everyone does its own math library with his own conventions. The idea is that brilliant developers (the OpenGL ARB) worked together and agreed to make GLSL. Following GLSL conventions is a way to find consensus. Moreover, basically when a developer knows GLSL, he knows GLM.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md339">
<title>&lt;a name=&quot;section7_2&quot;&gt;&lt;/a&gt; 7.2. Does GLM run GLSL program?</title>

<para>No, GLM is a C++ implementation of a subset of GLSL.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md340">
<title>&lt;a name=&quot;section7_3&quot;&gt;&lt;/a&gt; 7.3. Does a GLSL compiler build GLM codes?</title>

<para>No, this is not what GLM attends to do.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md341">
<title>&lt;a name=&quot;section7_4&quot;&gt;&lt;/a&gt; 7.4. Should I use ‘GTX’ extensions?</title>

<para>GTX extensions are qualified to be experimental extensions. In GLM this means that these extensions might change from version to version without any restriction. In practice, it doesn’t really change except time to time. GTC extensions are stabled, tested and perfectly reliable in time. Many GTX extensions extend GTC extensions and provide a way to explore features and implementations and APIs and then are promoted to GTC extensions. This is fairly the way OpenGL features are developed; through extensions.</para>

<para>Stating with GLM 0.9.9, to use experimental extensions, an application must define GLM_ENABLE_EXPERIMENTAL.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md342">
<title>&lt;a name=&quot;section7_5&quot;&gt;&lt;/a&gt; 7.5. Where can I ask my questions?</title>

<para>A good place is <link xlink:href="http://stackoverflow.com/search?q=GLM">stackoverflow</link> using the GLM tag.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md343">
<title>&lt;a name=&quot;section7_6&quot;&gt;&lt;/a&gt; 7.6. Where can I find the documentation of extensions?</title>

<para>The Doxygen generated documentation includes a complete list of all extensions available. Explore this <link xlink:href="http://glm.g-truc.net/html/index.html"><emphasis>API documentation</emphasis></link> to get a complete view of all GLM capabilities!</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md344">
<title>&lt;a name=&quot;section7_7&quot;&gt;&lt;/a&gt; 7.7. Should I use ‘using namespace glm;’?</title>

<para>NO! Chances are that if using namespace glm; is called, especially in a header file, name collisions will happen as GLM is based on GLSL which uses common tokens for types and functions. Avoiding using namespace glm; will a higher compatibility with third party library and SDKs.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md345">
<title>&lt;a name=&quot;section7_8&quot;&gt;&lt;/a&gt; 7.8. Is GLM fast?</title>

<para>GLM is mainly designed to be convenient and that&apos;s why it is written against the GLSL specification.</para>

<para>Following the Pareto principle where 20% of the code consumes 80% of the execution time, GLM operates perfectly on the 80% of the code that consumes 20% of the performances. Furthermore, thanks to the lowp, mediump and highp qualifiers, GLM provides approximations which trade precision for performance. Finally, GLM can automatically produce SIMD optimized code for functions of its implementation.</para>

<para>However, on performance critical code paths, we should expect that dedicated algorithms should be written to reach peak performance.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md346">
<title>&lt;a name=&quot;section7_9&quot;&gt;&lt;/a&gt; 7.9. When I build with Visual C++ with /W4 warning level, I have warnings...</title>

<para>You should not have any warnings even in <computeroutput>/W4</computeroutput> mode. However, if you expect such level for your code, then you should ask for the same level to the compiler by at least disabling the Visual C++ language extensions (<computeroutput>/Za</computeroutput>) which generates warnings when used. If these extensions are enabled, then GLM will take advantage of them and the compiler will generate warnings.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md347">
<title>&lt;a name=&quot;section7_10&quot;&gt;&lt;/a&gt; 7.10. Why some GLM functions can crash because of division by zero?</title>

<para>GLM functions crashing is the result of a domain error. Such behavior follows the precedent set by C and C++&apos;s standard library. For example, it’s a domain error to pass a null vector (all zeroes) to <link linkend="_group__core__func__geometric_1ga5c6c1379961d4589035a390856f2d66c">glm::normalize</link> function, or to pass a negative number into std::sqrt.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md348">
<title>&lt;a name=&quot;section7_11&quot;&gt;&lt;/a&gt; 7.11. What unit for angles is used in GLM?</title>

<para>GLSL is using radians but GLU is using degrees to express angles. This has caused GLM to use inconsistent units for angles. Starting with GLM 0.9.6, all GLM functions are using radians. For more information, follow the <link xlink:href="http://www.g-truc.net/post-0693.html#menu">link</link>.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md349">
<title>&lt;a name=&quot;section7_12&quot;&gt;&lt;/a&gt; 7.12. Windows headers cause build errors...</title>

<para>Some Windows headers define min and max as macros which may cause compatibility with third party libraries such as GLM. It is highly recommended to <link xlink:href="http://stackoverflow.com/questions/4913922/possible-problems-with-nominmax-on-visual-c"><computeroutput>define NOMINMAX</computeroutput></link> before including Windows headers to workaround this issue. To workaround the incompatibility with these macros, GLM will systematically undef these macros if they are defined.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md350">
<title>&lt;a name=&quot;section7_13&quot;&gt;&lt;/a&gt; 7.13. Constant expressions support</title>

<para>GLM has some C++ <link xlink:href="http://en.cppreference.com/w/cpp/language/constexpr">constant expressions</link> support. However, GLM automatically detects the use of SIMD instruction sets through compiler arguments to populate its implementation with SIMD intrinsics. Unfortunately, GCC and Clang doesn&apos;t support SIMD instrinsics as constant expressions. To allow constant expressions on all vectors and matrices types, define <computeroutput>GLM_FORCE_PURE</computeroutput> before including GLM headers.</para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md352">
<title>&lt;a name=&quot;section8&quot;&gt;&lt;/a&gt; 8. Code samples</title>

<para>This series of samples only shows various GLM features without consideration of any sort.</para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md353">
<title>&lt;a name=&quot;section8_1&quot;&gt;&lt;/a&gt; 8.1. Compute a triangle normal</title>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;&#32;//&#32;vec3&#32;normalize&#32;cross

glm::vec3&#32;computeNormal(glm::vec3&#32;const&amp;&#32;a,&#32;glm::vec3&#32;const&amp;&#32;b,&#32;glm::vec3&#32;const&amp;&#32;c)
{
&#32;&#32;&#32;&#32;return&#32;glm::normalize(glm::cross(c&#32;-&#32;a,&#32;b&#32;-&#32;a));
}

//&#32;A&#32;much&#32;faster&#32;but&#32;less&#32;accurate&#32;alternative:
#include&#32;&lt;glm/glm.hpp&gt;&#32;//&#32;vec3&#32;cross
#include&#32;&lt;glm/gtx/fast_square_root.hpp&gt;&#32;//&#32;fastNormalize

glm::vec3&#32;computeNormal(glm::vec3&#32;const&amp;&#32;a,&#32;glm::vec3&#32;const&amp;&#32;b,&#32;glm::vec3&#32;const&amp;&#32;c)
{
&#32;&#32;&#32;&#32;return&#32;glm::fastNormalize(glm::cross(c&#32;-&#32;a,&#32;b&#32;-&#32;a));
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md354">
<title>&lt;a name=&quot;section8_2&quot;&gt;&lt;/a&gt; 8.2. Matrix transform</title>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;&#32;//&#32;vec3,&#32;vec4,&#32;ivec4,&#32;mat4
#include&#32;&lt;glm/gtc/matrix_transform.hpp&gt;&#32;//&#32;translate,&#32;rotate,&#32;scale,&#32;perspective
#include&#32;&lt;glm/gtc/type_ptr.hpp&gt;&#32;//&#32;value_ptr

void&#32;setUniformMVP(GLuint&#32;Location,&#32;glm::vec3&#32;const&amp;&#32;Translate,&#32;glm::vec3&#32;const&amp;&#32;Rotate)
{
&#32;&#32;&#32;&#32;glm::mat4&#32;Projection&#32;=&#32;glm::perspective(45.0f,&#32;4.0f&#32;/&#32;3.0f,&#32;0.1f,&#32;100.f);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewTranslate&#32;=&#32;glm::translate(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::mat4(1.0f),&#32;Translate);
&#32;&#32;&#32;&#32;glm::mat4&#32;ViewRotateX&#32;=&#32;glm::rotate(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ViewTranslate,&#32;Rotate.y,&#32;glm::vec3(-1.0f,&#32;0.0f,&#32;0.0f));
&#32;&#32;&#32;&#32;glm::mat4&#32;View&#32;=&#32;glm::rotate(ViewRotateX,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Rotate.x,&#32;glm::vec3(0.0f,&#32;1.0f,&#32;0.0f));
&#32;&#32;&#32;&#32;glm::mat4&#32;Model&#32;=&#32;glm::scale(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::mat4(1.0f),&#32;glm::vec3(0.5f));
&#32;&#32;&#32;&#32;glm::mat4&#32;MVP&#32;=&#32;Projection&#32;*&#32;View&#32;*&#32;Model;
&#32;&#32;&#32;&#32;glUniformMatrix4fv(Location,&#32;1,&#32;GL_FALSE,&#32;glm::value_ptr(MVP));
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md355">
<title>&lt;a name=&quot;section8_3&quot;&gt;&lt;/a&gt; 8.3. Vector types</title>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;&#32;//&#32;vec2
#include&#32;&lt;glm/gtc/type_precision.hpp&gt;&#32;//&#32;hvec2,&#32;i8vec2,&#32;i32vec2

std::size_t&#32;const&#32;VertexCount&#32;=&#32;4;

//&#32;Float&#32;quad&#32;geometry
std::size_t&#32;const&#32;PositionSizeF32&#32;=&#32;VertexCount&#32;*&#32;sizeof(glm::vec2);
glm::vec2&#32;const&#32;PositionDataF32[VertexCount]&#32;=
{
&#32;&#32;&#32;&#32;glm::vec2(-1.0f,-1.0f),
&#32;&#32;&#32;&#32;glm::vec2(&#32;1.0f,-1.0f),
&#32;&#32;&#32;&#32;glm::vec2(&#32;1.0f,&#32;1.0f),
&#32;&#32;&#32;&#32;glm::vec2(-1.0f,&#32;1.0f)
};

//&#32;Half-float&#32;quad&#32;geometry
std::size_t&#32;const&#32;PositionSizeF16&#32;=&#32;VertexCount&#32;*&#32;sizeof(glm::hvec2);
glm::hvec2&#32;const&#32;PositionDataF16[VertexCount]&#32;=
{
&#32;&#32;&#32;&#32;glm::hvec2(-1.0f,&#32;-1.0f),
&#32;&#32;&#32;&#32;glm::hvec2(&#32;1.0f,&#32;-1.0f),
&#32;&#32;&#32;&#32;glm::hvec2(&#32;1.0f,&#32;1.0f),
&#32;&#32;&#32;&#32;glm::hvec2(-1.0f,&#32;1.0f)
};

//&#32;8&#32;bits&#32;signed&#32;integer&#32;quad&#32;geometry
std::size_t&#32;const&#32;PositionSizeI8&#32;=&#32;VertexCount&#32;*&#32;sizeof(glm::i8vec2);
glm::i8vec2&#32;const&#32;PositionDataI8[VertexCount]&#32;=
{
&#32;&#32;&#32;&#32;glm::i8vec2(-1,-1),
&#32;&#32;&#32;&#32;glm::i8vec2(&#32;1,-1),
&#32;&#32;&#32;&#32;glm::i8vec2(&#32;1,&#32;1),
&#32;&#32;&#32;&#32;glm::i8vec2(-1,&#32;1)
};

//&#32;32&#32;bits&#32;signed&#32;integer&#32;quad&#32;geometry
std::size_t&#32;const&#32;PositionSizeI32&#32;=&#32;VertexCount&#32;*&#32;sizeof(glm::i32vec2);
glm::i32vec2&#32;const&#32;PositionDataI32[VertexCount]&#32;=
{
&#32;&#32;&#32;&#32;glm::i32vec2(-1,-1),
&#32;&#32;&#32;&#32;glm::i32vec2(&#32;1,-1),
&#32;&#32;&#32;&#32;glm::i32vec2(&#32;1,&#32;1),
&#32;&#32;&#32;&#32;glm::i32vec2(-1,&#32;1)
};
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md356">
<title>&lt;a name=&quot;section8_4&quot;&gt;&lt;/a&gt; 8.4. Lighting</title>

<para><literallayout><computeroutput>#include&#32;&lt;glm/glm.hpp&gt;&#32;//&#32;vec3&#32;normalize&#32;reflect&#32;dot&#32;pow
#include&#32;&lt;glm/gtc/random.hpp&gt;&#32;//&#32;ballRand

//&#32;vecRand3,&#32;generate&#32;a&#32;random&#32;and&#32;equiprobable&#32;normalized&#32;vec3
glm::vec3&#32;lighting(intersection&#32;const&amp;&#32;Intersection,&#32;material&#32;const&amp;&#32;Material,&#32;light&#32;const&amp;&#32;Light,&#32;glm::vec3&#32;const&amp;&#32;View)
{
&#32;&#32;&#32;&#32;glm::vec3&#32;Color&#32;=&#32;glm::vec3(0.0f);
&#32;&#32;&#32;&#32;glm::vec3&#32;LightVertor&#32;=&#32;glm::normalize(
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Light.position()&#32;-&#32;Intersection.globalPosition()&#32;+
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::ballRand(0.0f,&#32;Light.inaccuracy());

&#32;&#32;&#32;&#32;if(!shadow(Intersection.globalPosition(),&#32;Light.position(),&#32;LightVertor))
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;Diffuse&#32;=&#32;glm::dot(Intersection.normal(),&#32;LightVector);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(Diffuse&#32;&amp;lt;=&#32;0.0f)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Color;

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(Material.isDiffuse())
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color&#32;+=&#32;Light.color()&#32;*&#32;Material.diffuse()&#32;*&#32;Diffuse;

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(Material.isSpecular())
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glm::vec3&#32;Reflect&#32;=&#32;glm::reflect(-LightVector,&#32;Intersection.normal());
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;Dot&#32;=&#32;glm::dot(Reflect,&#32;View);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;Base&#32;=&#32;Dot&#32;&amp;gt;&#32;0.0f&#32;?&#32;Dot&#32;:&#32;0.0f;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;float&#32;Specular&#32;=&#32;glm::pow(Base,&#32;Material.exponent());
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Color&#32;+=&#32;Material.specular()&#32;\*&#32;Specular;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;return&#32;Color;
}
</computeroutput></literallayout></para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md358">
<title>&lt;a name=&quot;section9&quot;&gt;&lt;/a&gt; 9. Contributing to GLM</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md359">
<title>&lt;a name=&quot;section9_1&quot;&gt;&lt;/a&gt; 9.1. Submitting bug reports</title>

<para>Bug should be reported on Github using the <link xlink:href="https://github.com/g-truc/glm/issues">issue page</link>.</para>

<para>A minimal code to reproduce the issue will help.</para>

<para>Additional, bugs can be configuration specific. We can report the configuration by defining <computeroutput>GLM_FORCE_MESSAGES</computeroutput> before including GLM headers then build and copy paste the build messages GLM will output.</para>

<para><literallayout><computeroutput>#define&#32;GLM_FORCE_MESSAGES
#include&#32;&lt;glm/glm.hpp&gt;
</computeroutput></literallayout></para>

<para>An example of build messages generated by GLM: <literallayout><computeroutput>GLM:&#32;0.9.9.1
GLM:&#32;C++&#32;17&#32;with&#32;extensions
GLM:&#32;GCC&#32;compiler&#32;detected&quot;
GLM:&#32;x86&#32;64&#32;bits&#32;with&#32;AVX&#32;instruction&#32;set&#32;build&#32;target
GLM:&#32;Linux&#32;platform&#32;detected
GLM:&#32;GLM_FORCE_SWIZZLE&#32;is&#32;undefined.&#32;swizzling&#32;functions&#32;or&#32;operators&#32;are&#32;disabled.
GLM:&#32;GLM_FORCE_SIZE_T_LENGTH&#32;is&#32;undefined.&#32;.length()&#32;returns&#32;a&#32;glm::length_t,&#32;a&#32;typedef&#32;of&#32;int&#32;following&#32;GLSL.
GLM:&#32;GLM_FORCE_UNRESTRICTED_GENTYPE&#32;is&#32;undefined.&#32;Follows&#32;strictly&#32;GLSL&#32;on&#32;valid&#32;function&#32;genTypes.
GLM:&#32;GLM_FORCE_DEPTH_ZERO_TO_ONE&#32;is&#32;undefined.&#32;Using&#32;negative&#32;one&#32;to&#32;one&#32;depth&#32;clip&#32;space.
GLM:&#32;GLM_FORCE_LEFT_HANDED&#32;is&#32;undefined.&#32;Using&#32;right&#32;handed&#32;coordinate&#32;system.
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md360">
<title>&lt;a name=&quot;section9_2&quot;&gt;&lt;/a&gt; 9.2. Contributing to GLM with pull request</title>

<para>This tutorial will show us how to successfully contribute a bug-fix to GLM using GitHub&apos;s Pull Request workflow.</para>

<para>We will be typing git commands in the Terminal. Mac and Linux users may have git pre-installed. You can download git from <link xlink:href="http://git-scm.com/downloads">here</link>.</para>

<para>The tutorial assumes you have some basic understanding of git concepts - repositories, branches, commits, etc. Explaining it all from scratch is beyond the scope of this tutorial. Some good links to learn git basics are: <link xlink:href="http://git-scm.com/book/en/Getting-Started-Git-Basics">Link 1</link>, <link xlink:href="https://www.atlassian.com/git/tutorial/git-basics">Link 2</link></para>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md361">
<title>Step 1: Setup our GLM Fork</title>

<para>We will make our changes in our own copy of the GLM sitory. On the GLM GitHub repo and we press the Fork button. We need to download a copy of our fork to our local machine. In the terminal, type:</para>

<para><literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;clone&#32;&lt;our-repository-fork-git-url&gt;
</computeroutput></literallayout></para>

<para>This will clone our fork repository into the current folder.</para>

<para>We can find our repository git url on the Github reposotory page. The url looks like this: <computeroutput><link xlink:href="https://github.com/">https://github.com/</link>&lt;our-username&gt;/&lt;repository-name&gt;.git</computeroutput></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md362">
<title>Step 2: Synchronizing our fork</title>

<para>We can use the following command to add <computeroutput>upstream</computeroutput> (original project repository) as a remote repository so that we can fetch the latest GLM commits into our branch and keep our forked copy is synchronized.</para>

<para><literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;remote&#32;add&#32;upstream&#32;https://github.com/processing/processing.git
</computeroutput></literallayout></para>

<para>To synchronize our fork to the latest commit in the GLM repository, we can use the following command:</para>

<para><literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;fetch&#32;upstream
</computeroutput></literallayout></para>

<para>Then, we can merge the remote master branch to our current branch:</para>

<para><literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;merge&#32;upstream/master
</computeroutput></literallayout></para>

<para>Now our local copy of our fork has been synchronized. However, the fork&apos;s copy is not updated on GitHub&apos;s servers yet. To do that, use:</para>

<para><literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;push&#32;origin&#32;master
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md363">
<title>Step 3: Modifying our GLM Fork</title>

<para>Our fork is now setup and we are ready to modify GLM to fix a bug.</para>

<para>It&apos;s a good practice to make changes in our fork in a separate branch than the master branch because we can submit only one pull request per branch.</para>

<para>Before creating a new branch, it&apos;s best to synchronize our fork and then create a new branch from the latest master branch.</para>

<para>If we are not on the master branch, we should switch to it using: <literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;checkout&#32;master
</computeroutput></literallayout></para>

<para>To create a new branch called <computeroutput>bugifx</computeroutput>, we use: <literallayout><computeroutput>git&#32;branch&#32;bugfix
</computeroutput></literallayout></para>

<para>Once the code changes for the fix is done, we need to commit the changes: <literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;commit&#32;-m&#32;&quot;Resolve&#32;the&#32;issue&#32;that&#32;caused&#32;problem&#32;with&#32;a&#32;specific&#32;fix&#32;#432&quot;
</computeroutput></literallayout></para>

<para>The commit message should be as specific as possible and finished by the bug number in the <link xlink:href="https://github.com/g-truc/glm/issues">GLM GitHub issue page</link></para>

<para>Finally, we need to push our changes in our branch to our GitHub fork using: <literallayout><computeroutput>&gt;&gt;&gt;&#32;git&#32;push&#32;origin&#32;bugfix
</computeroutput></literallayout></para>

<para>Some things to keep in mind for a pull request:<itemizedlist>
<listitem>
<para>Keep it minimal: Try to make the minimum required changes to fix the issue. If we have added any debugging code, we should remove it.</para>
</listitem><listitem>
<para>A fix at a time: The pull request should deal with one issue at a time only, unless two issue are so interlinked they must be fixed together.</para>
</listitem><listitem>
<para>Write a test: GLM is largely unit tests. Unit tests are in <computeroutput>glm/test</computeroutput> directory. We should also add tests for the fixes we provide to ensure future regression doesn&apos;t happen.</para>
</listitem><listitem>
<para>No whitespace changes: Avoid unnecessary formatting or whitespace changes in other parts of the code. Be careful with auto-format options in the code editor which can cause wide scale formatting changes.</para>
</listitem><listitem>
<para>Follow GLM Code Style for consistency.</para>
</listitem><listitem>
<para>Tests passes: Make sure GLM build and tests don&apos;t fail because of the changes.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md364">
<title>Step 4: Submitting a Pull Request</title>

<para>We need to submit a pull request from the <computeroutput>bugfix</computeroutput> branch to GLM&apos;s master branch.</para>

<para>On the fork github page, we can click on the <emphasis>Pull Request</emphasis> button. Then we can describe our pull request. Finally we press <emphasis>Send Pull Request</emphasis>.</para>

<para>Please be patient and give them some time to go through it.</para>

<para>The pull request review may suggest additional changes. So we can make those changes in our branch, and push those changes to our fork repository. Our pull request will always include the latest changes in our branch on GitHub, so we don&apos;t need to resubmit the pull request.</para>

<para>Once your changes have been accepted, a project maintainer will merge our pull request.</para>

<para>We are grateful to the users for their time and effort in contributing fixes.</para>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md365">
<title>&lt;a name=&quot;section9_3&quot;&gt;&lt;/a&gt; 9.3. Coding style</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md366">
<title>Indentation</title>

<para>Always tabs. Never spaces.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md367">
<title>Spacing</title>

<para>No space after if. Use if(blah) not if (blah). Example if/else block:</para>

<para><literallayout><computeroutput>if(blah)
{
&#32;&#32;&#32;&#32;//&#32;yes&#32;like&#32;this
}
else
{
&#32;&#32;&#32;&#32;//&#32;something&#32;besides
}
</computeroutput></literallayout></para>

<para>Single line if blocks: <literallayout><computeroutput>if(blah)
&#32;&#32;&#32;&#32;//&#32;yes&#32;like&#32;this
else
&#32;&#32;&#32;&#32;//&#32;something&#32;besides
</computeroutput></literallayout></para>

<para>No spaces inside parens: <literallayout><computeroutput>if&#32;(blah)&#32;&#32;&#32;&#32;//&#32;No
if(&#32;blah&#32;)&#32;&#32;&#32;//&#32;No
if&#32;(&#32;blah&#32;)&#32;&#32;//&#32;No
if(blah)&#32;&#32;&#32;&#32;&#32;//&#32;Yes
</computeroutput></literallayout></para>

<para>Use spaces before/after commas: <literallayout><computeroutput>someFunction(apple,bear,cat);&#32;&#32;&#32;&#32;&#32;//&#32;No
someFunction(apple,&#32;bear,&#32;cat);&#32;&#32;&#32;//&#32;Yes
</computeroutput></literallayout></para>

<para>Use spaces before/after use of <computeroutput>+, -, *, /, %, &gt;&gt;, &lt;&lt;, |, &amp;, ^, ||, &amp;&amp;</computeroutput> operators: <literallayout><computeroutput>vec4&#32;v&#32;=&#32;a&#32;+&#32;b;
</computeroutput></literallayout></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md368">
<title>Blank lines</title>

<para>One blank line after the function blocks.</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md369">
<title>Comments</title>

<para>Always one space after the // in single line comments</para>

<para>One space before // at the end of a line (that has code as well)</para>

<para>Try to use // comments inside functions, to make it easier to remove a whole block via /* */</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md370">
<title>Cases</title>

<para><literallayout><computeroutput>#define&#32;GLM_MY_DEFINE&#32;76

class&#32;myClass
{};

myClass&#32;const&#32;MyClass;

namespace&#32;glm{&#32;//&#32;glm&#32;namespace&#32;is&#32;for&#32;public&#32;code
namespace&#32;detail&#32;//&#32;glm::detail&#32;namespace&#32;is&#32;for&#32;implementation&#32;detail
{
&#32;&#32;&#32;&#32;float&#32;myFunction(vec2&#32;const&amp;&#32;V)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;V.x&#32;+&#32;V.y;
&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;float&#32;myFunction(vec2&#32;const*&#32;const&#32;V)
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;V-&gt;x&#32;+&#32;V-&gt;y;
&#32;&#32;&#32;&#32;}
}//namespace&#32;detail
}//namespace&#32;glm
</computeroutput></literallayout></para>

<para><informaltable frame='bottom'><tgroup cols='1'><colspec align='center'/><tbody><row><entry align='center'>
</entry></row></tbody></tgroup></informaltable>
  </para>
</section>
</section>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md372">
<title>&lt;a name=&quot;section10&quot;&gt;&lt;/a&gt; 10. References</title>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md373">
<title>&lt;a name=&quot;section10_1&quot;&gt;&lt;/a&gt; 10.1. OpenGL specifications</title>

<para><itemizedlist>
<listitem>
<para>OpenGL 4.3 core specification</para>
</listitem><listitem>
<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.30.7.diff.pdf">GLSL 4.30 specification</link> - <link xlink:href="http://www.opengl.org/documentation/specs/glu/glu1_3.pdf"><emphasis>GLU 1.3 specification</emphasis></link></para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md374">
<title>&lt;a name=&quot;section10_2&quot;&gt;&lt;/a&gt; 10.2. External links</title>

<para><itemizedlist>
<listitem>
<para><link xlink:href="http://stackoverflow.com/search?q=GLM">GLM on stackoverflow</link></para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md375">
<title>&lt;a name=&quot;section10_3&quot;&gt;&lt;/a&gt; 10.3. Projects using GLM</title>

<para><emphasis><emphasis role="bold"><link xlink:href="http://www.leosfortune.com/">Leo’s Fortune</link></emphasis></emphasis></para>

<para>Leo’s Fortune is a platform adventure game where you hunt down the cunning and mysterious thief that stole your gold. Available on PS4, Xbox One, PC, Mac, iOS and Android.</para>

<para>Beautifully hand-crafted levels bring the story of Leo to life in this epic adventure.</para>

<para>“I just returned home to find all my gold has been stolen! For some devious purpose, the thief has dropped pieces of my gold like breadcrumbs through the woods.”</para>

<para>“Despite this pickle of a trap, I am left with no choice but to follow the trail.”</para>

<para>“Whatever lies ahead, I must recover my fortune.” -Leopold</para>

<para></para>

<para></para>

<para><link xlink:href="http://www.packtpub.com/opengl-4-0-shading-language-cookbook/book?tag=rk/opengl4-abr1/0811"><emphasis><emphasis role="bold">OpenGL 4.0 Shading Language Cookbook</emphasis></emphasis></link></para>

<para>A set of recipes that demonstrates a wide of techniques for producing high-quality, real-time 3D graphics with GLSL 4.0, such as:</para>

<para><itemizedlist>
<listitem>
<para>Using GLSL 4.0 to implement lighting and shading techniques.</para>
</listitem><listitem>
<para>Using the new features of GLSL 4.0 including tessellation and geometry shaders.</para>
</listitem><listitem>
<para>Using textures in GLSL as part of a wide variety of techniques from basic texture mapping to deferred shading.</para>
</listitem></itemizedlist>
</para>

<para>Simple, easy-to-follow examples with GLSL source code are provided, as well as a basic description of the theory behind each technique.</para>

<para></para>

<para><link xlink:href="http://outerra.com/"><emphasis><emphasis role="bold">Outerra</emphasis></emphasis></link></para>

<para>A 3D planetary engine for seamless planet rendering from space down to the surface. Can use arbitrary resolution of elevation data, refining it to centimetre resolution using fractal algorithms.</para>

<para></para>

<para></para>

<para></para>

<para></para>

<para><link xlink:href="https://github.com/NVIDIA/Falcor"><emphasis><emphasis role="bold">Falcor</emphasis></emphasis></link></para>

<para>Real-time rendering research framework by NVIDIA.</para>

<para><link xlink:href="https://libcinder.org/"><emphasis><emphasis role="bold">Cinder</emphasis></emphasis></link></para>

<para>Cinder is a free and open source library for professional-quality creative coding in C++.</para>

<para>Cinder is a C++ library for programming with aesthetic intent - the sort of development often called creative coding. This includes domains like graphics, audio, video, and computational geometry. Cinder is cross-platform, with official support for OS X, Windows, iOS, and WinRT.</para>

<para>Cinder is production-proven, powerful enough to be the primary tool for professionals, but still suitable for learning and experimentation. Cinder is released under the <link xlink:href="http://opensource.org/licenses/BSD-2-Clause">2-Clause BSD License</link>.</para>

<para></para>

<para><link xlink:href="http://code.google.com/p/opencloth/"><emphasis><emphasis role="bold">opencloth</emphasis></emphasis></link></para>

<para>A collection of source codes implementing cloth simulation algorithms in OpenGL.</para>

<para>Simple, easy-to-follow examples with GLSL source code, as well as a basic description of the theory behind each technique.</para>

<para></para>

<para></para>

<para><link xlink:href="https://www.libreoffice.org/"><emphasis><emphasis role="bold">LibreOffice</emphasis></emphasis></link></para>

<para>LibreOffice includes several applications that make it the most powerful Free and Open Source office suite on the market.</para>

<para><link xlink:href="mailto:glm@g-truc.net"><emphasis><emphasis role="bold">Are you using GLM in a project?</emphasis></emphasis></link></para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md376">
<title>&lt;a name=&quot;section10_4&quot;&gt;&lt;/a&gt; 10.4. Tutorials using GLM</title>

<para><itemizedlist>
<listitem>
<para><link xlink:href="https://github.com/SaschaWillems/Vulkan">Sascha Willems&apos; Vulkan examples</link>, Examples and demos for the new Vulkan API</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/McNopper/Vulkan">VKTS</link> Vulkan examples using VulKan ToolS (VKTS)</para>
</listitem><listitem>
<para><link xlink:href="http://www.g-truc.net/project-0026.html#menu"><emphasis>The OpenGL Samples Pack</emphasis></link>, samples that show how to set up all the different new features</para>
</listitem><listitem>
<para><link xlink:href="http://www.arcsynthesis.org/gltut/"><emphasis>Learning Modern 3D Graphics programming</emphasis></link>, a great OpenGL tutorial using GLM by Jason L. McKesson</para>
</listitem><listitem>
<para><link xlink:href="http://blog.nobel-joergensen.com/2011/04/02/glm-brilliant-math-library-for-opengl/"><emphasis>Morten Nobel-Jørgensen’s</emphasis></link> review and use an <link xlink:href="https://github.com/mortennobel/RenderE"><emphasis>OpenGL renderer</emphasis></link></para>
</listitem><listitem>
<para><link xlink:href="http://www.swiftless.com/opengltuts.html"><emphasis>Swiftless’ OpenGL tutorial</emphasis></link> using GLM by Donald Urquhart</para>
</listitem><listitem>
<para><link xlink:href="http://rastergrid.com/blog/"><emphasis>Rastergrid</emphasis></link>, many technical articles with companion programs using GLM by Daniel Rákos\</para>
</listitem><listitem>
<para><link xlink:href="http://www.opengl-tutorial.org"><emphasis>OpenGL Tutorial</emphasis></link>, tutorials for OpenGL 3.1 and later</para>
</listitem><listitem>
<para><link xlink:href="http://en.wikibooks.org/wiki/OpenGL_Programming"><emphasis>OpenGL Programming on Wikibooks</emphasis></link>: For beginners who are discovering OpenGL.</para>
</listitem><listitem>
<para><link xlink:href="http://3dgep.com/"><emphasis>3D Game Engine Programming</emphasis></link>: Learning the latest 3D <link linkend="_class_game">Game</link> Engine Programming techniques.</para>
</listitem><listitem>
<para><link xlink:href="http://www.gametutorials.com/opengl-4-matrices-and-glm/">Game Tutorials</link>, graphics and game programming.</para>
</listitem><listitem>
<para><link xlink:href="https://open.gl/">open.gl</link>, OpenGL tutorial</para>
</listitem><listitem>
<para><link xlink:href="http://www.c-jump.com/bcc/common/Talk3/Math/GLM/GLM.html">c-jump</link>, GLM tutorial</para>
</listitem><listitem>
<para><link xlink:href="http://learnopengl.com/">Learn OpenGL</link>, OpenGL tutorial</para>
</listitem><listitem>
<para><link xlink:href="mailto:glm@g-truc.net"><emphasis><emphasis role="bold">Are you using GLM in a tutorial?</emphasis></emphasis></link></para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md377">
<title>&lt;a name=&quot;section10_5&quot;&gt;&lt;/a&gt; 10.5. Equivalent for other languages</title>

<para><itemizedlist>
<listitem>
<para><link xlink:href="https://github.com/recp/cglm"><emphasis>cglm</emphasis></link>: OpenGL Mathematics (glm) for C.</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/Philip-Trettner/GlmSharp"><emphasis>GlmSharp</emphasis></link>: Open-source semi-generated GLM-flavored math library for .NET/C#.</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/humbletim/glm-js">glm-js</link>: JavaScript adaptation of the OpenGL Mathematics (GLM) C++ library interfaces</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/kotlin-graphics/glm">JVM OpenGL Mathematics (GLM)</link>: written in Kotlin, Java compatible</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/jroyalty/jglm">JGLM</link> - Java OpenGL Mathematics Library</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/SwiftGL/Math/blob/master/Sources/glm.swift">SwiftGL Math Library</link> GLM for Swift</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/jbowtie/glm-go">glm-go</link>: Simple linear algebra library similar in spirit to GLM</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/Polkm/openll">openll</link>: Lua bindings for OpenGL, GLM, GLFW, OpenAL, SOIL and PhysicsFS</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/dche/glm-rs">glm-rs</link>: GLSL mathematics for Rust programming language</para>
</listitem><listitem>
<para><link xlink:href="https://github.com/Queatz/glmpython">glmpython</link>: GLM math library for Python</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md378">
<title>&lt;a name=&quot;section10_6&quot;&gt;&lt;/a&gt; 10.6. Alternatives to GLM</title>

<para><itemizedlist>
<listitem>
<para><link xlink:href="http://cmldev.net/"><emphasis>CML</emphasis></link>: The CML (Configurable Math Library) is a free C++ math library for games and graphics.</para>
</listitem><listitem>
<para><link xlink:href="http://eigen.tuxfamily.org/"><emphasis>Eigen</emphasis></link>: A more heavy weight math library for general linear algebra in C++.</para>
</listitem><listitem>
<para><link xlink:href="http://glhlib.sourceforge.net/"><emphasis>glhlib</emphasis></link>: A much more than glu C library.</para>
</listitem><listitem>
<para>Are you using or developing an alternative library to GLM?</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md__c_1_2_users_2_h_p_2_documents_2_git_hub_2_minero-_game_2_classes_2lib_2glm_2manual_1autotoc_md379">
<title>&lt;a name=&quot;section10_7&quot;&gt;&lt;/a&gt; 10.7. Acknowledgements</title>

<para>GLM is developed and maintained by <link xlink:href="http://www.g-truc.net"><emphasis>Christophe Riccio</emphasis></link> but many contributors have made this project what it is.</para>

<para>Special thanks to:<itemizedlist>
<listitem>
<para>Ashima Arts and Stefan Gustavson for their work on <link xlink:href="https://github.com/ashima/webgl-noise"><emphasis>webgl-noise</emphasis></link> which has been used for GLM noises implementation.</para>
</listitem><listitem>
<para><link xlink:href="http://athile.net/library/wiki/index.php?title=Athile_Technologies"><emphasis>Arthur Winters</emphasis></link> for the C++11 and Visual C++ swizzle operators implementation and tests.</para>
</listitem><listitem>
<para>Joshua Smith and Christoph Schied for the discussions and the experiments around the swizzle operators implementation issues.</para>
</listitem><listitem>
<para>Guillaume Chevallereau for providing and maintaining the <link xlink:href="http://my.cdash.org/index.php?project=GLM"><emphasis>nightlight build system</emphasis></link>.</para>
</listitem><listitem>
<para>Ghenadii Ursachi for GLM_GTX_matrix_interpolation implementation.</para>
</listitem><listitem>
<para>Mathieu Roumillac for providing some implementation ideas.</para>
</listitem><listitem>
<para><link xlink:href="http://www.zeuscmd.com/"><emphasis>Grant James</emphasis></link> for the implementation of all combination of none-squared matrix products.</para>
</listitem><listitem>
<para>Jesse Talavera-Greenberg for his work on the manual amount other things.</para>
</listitem><listitem>
<para>All the GLM users that have report bugs and hence help GLM to become a great library! </para>
</listitem></itemizedlist>
</para>
</section>
</section>
</section>
</section>
