<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classtable" xml:lang="en-US">
<title>table Class Reference</title>
<indexterm><primary>table</primary></indexterm>
<para>

<para>A TOML table. </para>
 
</para>
<para>
<computeroutput>#include &lt;table.h&gt;</computeroutput>
</para>
Inheritance diagram for table:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for table:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classtable_1a663a0e427e98198575b7a91b7c919c30">iterator</link> = toml::table_iterator</para>
</listitem>
            <listitem><para>using <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> = toml::const_table_iterator</para>
</listitem>
            <listitem><para>using <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link> = impl::remove_cvref&lt; ValueType &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link> = std::conditional_t&lt; std::is_void_v&lt; <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link> &gt;, impl::emplaced_type_of&lt; ValueArgs &amp;&amp;... &gt;, <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link> &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">unwrapped_type</link> = impl::remove_cvref&lt; impl::unwrap_node&lt; <link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link> &gt; &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link> () noexcept</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a7af51d696f375eae4ca68ede19225796">~table</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a58f20c5689b9a6cf610052438c75503d">table</link> (const <link linkend="_classtable">table</link> &amp;)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a5a75009c02a67ef8ed1d6488b4efb1c2">table</link> (<link linkend="_classtable">table</link> &amp;&amp;other) noexcept</para>

<para>Move constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1adaa45da686fdf6db229f43bbf9a3d9d0">table</link> (std::initializer_list&lt; impl::table_init_pair &gt; kvps)</para>

<para>Constructs a table with one or more initial key-value pairs. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a6f963a302ec0f592701775c95c1df1e3">operator=</link> (const <link linkend="_classtable">table</link> &amp;)</para>

<para>Copy-assignment operator. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a5e61dff4b1846fcddcba33e07b795a71">operator=</link> (<link linkend="_classtable">table</link> &amp;&amp;rhs) noexcept</para>

<para>Move-assignment operator. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a7af51d696f375eae4ca68ede19225796">~table</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a58f20c5689b9a6cf610052438c75503d">table</link> (const <link linkend="_classtable">table</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a5a75009c02a67ef8ed1d6488b4efb1c2">table</link> (<link linkend="_classtable">table</link> &amp;&amp;other) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1adaa45da686fdf6db229f43bbf9a3d9d0">table</link> (std::initializer_list&lt; impl::table_init_pair &gt; kvps)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a6f963a302ec0f592701775c95c1df1e3">operator=</link> (const <link linkend="_classtable">table</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a5e61dff4b1846fcddcba33e07b795a71">operator=</link> (<link linkend="_classtable">table</link> &amp;&amp;rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type <link linkend="_classtable_1a54c936c3aac096be1dcad45036ee6a9f">type</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a6cbade52106ece3ab27feda3f4d58110">is_homogeneous</link> (node_type ntype) const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a03a22b6b4ecd0043d8a684844741b5a6">is_homogeneous</link> (node_type ntype, node *&amp;first_nonmatch) noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ad24e8cb001d0c6d429caa048314fb213">is_homogeneous</link> (node_type ntype, const node *&amp;first_nonmatch) const noexcept final</para>
</listitem>
            <listitem><para>template&lt;typename ElemType  = void&gt; </para><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a57a2f14d20387ea2d9abed242cd3043d">is_homogeneous</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a7a29b434ebc03ec99db52ae98668d5db">is_table</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a546d35293ab8c3e3850e3a712862480f">is_array</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ad492ac1e45805952a3c8924583cc296e">is_array_of_tables</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a7dd10d152666712ede4001059b5a6ed2">is_value</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a16e1591a845aa7db95df37f8c35cb23c">is_string</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ad6e253695f391c0e6edf928d77fa766d">is_integer</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a951c432ffd2b0cbc06518e7897089c57">is_floating_point</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a1dc76e80008b5ed5aa70a66fa3626882">is_number</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a838d74631b4bfe28746757d3fb239d50">is_boolean</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a9d29b05c9c0625574d78581376fc361f">is_date</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ae7b07d54ee3ad3f4a245c26898700272">is_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a07b42c6116440db38c8b518a6c685802">is_date_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * <link linkend="_classtable_1a6e49884f9b927770890cb9fe6df61a42">as_table</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * <link linkend="_classtable_1a55c771fd945281328d96f978c0255059">as_array</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * <link linkend="_classtable_1ae90f248325e54bd99bb3a392b2751cb3">as_string</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classtable_1a8e4f6aed5156d9d6734f42c4bcb7b97f">as_integer</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * <link linkend="_classtable_1ac549da31899da9d559671d50d1f3f662">as_floating_point</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classtable_1a37afbd90ebbad8a41342167399be6a2d">as_boolean</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * <link linkend="_classtable_1aa5996cf56e0d9a88ab21d804a41f4c54">as_date</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classtable_1a70eeba3cc6b24d1d6f73c9448ce396dc">as_time</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classtable_1acb002459139377f756dd6ffb0652196d">as_date_time</link> () noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * <link linkend="_classtable_1a7f9da7358d04e7e6957ac5ee52529490">as_table</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * <link linkend="_classtable_1aacd0141b8604d4b03f05c36d2be2f7b3">as_array</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * <link linkend="_classtable_1a1aa73148a1da6849216129531b6c9a80">as_string</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classtable_1a3afb4e824a39626582bf2b32775e112a">as_integer</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * <link linkend="_classtable_1a32760109122058741e1136a660e57d94">as_floating_point</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classtable_1ad7bf9703dc4a476bc944e6e0b15a0f8d">as_boolean</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * <link linkend="_classtable_1abebee4e6091e103e08421d6e500f88d8">as_date</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classtable_1a40de88e69cd2f6001f66c2afb96b3390">as_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classtable_1a785a4773f198d352e60ae4c0706abd7d">as_date_time</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classtable_1adb65ea92406d15cf1da9ca32d28aaf21">is_inline</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node * <link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * <link linkend="_classtable_1a1913a2d35dd5d582d729a1aa86154a4c">get</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> impl::wrap_node&lt; T &gt; * <link linkend="_classtable_1a606d8e1e91ed8cfa1225bd607cf31918">get_as</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> const impl::wrap_node&lt; T &gt; * <link linkend="_classtable_1aad66df14406c1ae0df702317375aeb84">get_as</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; <link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classtable_1a09b1e615db5197302db7fdf356e1886f">at</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a0035089c5cba9e55533f8d071cc92aa8">begin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a99538d11dcdbaa6693aa17002aa40967">cbegin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a76522d05d61fe5a153513aea06720743">end</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend</link> () const noexcept</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a694a4f3fd69ba434774c9dde8ffee961">for_each</link> (Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classtable">table</link> &amp; &gt;)</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classtable">table</link> &amp;&amp; <link linkend="_classtable_1a0b976de00e50fa9b297e08fca9951eec">for_each</link> (Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classtable">table</link> &amp;&amp; &gt;)</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a3741d808d6f5cb0a221a31caeaa24d9c">for_each</link> (Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classtable">table</link> &amp; &gt;)</para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classtable">table</link> &amp;&amp; <link linkend="_classtable_1ad390a6f105a2d472951f8ec0097b69a1">for_each</link> (Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classtable">table</link> &amp;&amp; &gt;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a406c059cce67faebb6aa0815624b6231">empty</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classtable_1affa7520e779cbbfc21bbdc31c4f8f7ce">size</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a6bb5569bc3e0624ad8995de1aae9eb0b">lower_bound</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8">find</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a8607e0b0c1ba7d8e0e8cb3b3b537feae">find</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a466a42305799b16b19f3cfcf9f8dd8ac">contains</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">erase</link> (<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> pos) noexcept</para>
</listitem>
            <listitem><para><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a24fd0bfb38c97989cddf90ab2e79a4dd">erase</link> (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> pos) noexcept</para>
</listitem>
            <listitem><para><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a564d7164aac6483181560ff43333d016">erase</link> (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>, <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classtable_1a602f8e3a30eacd78ad413c2a3cefa952">erase</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a03364a6c3763fac7c731183ae810a319">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_classtable">table</link> &amp;&amp; <link linkend="_classtable_1a9471ac8762fdfeb8a9bbac48cb0dcc37">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;&amp;noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classtable_1a6248c10022c6cd670f045cda74cb1cbe">clear</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_classtable_1aa682d9675e4c168e5b04f302d060cb4b">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename ValueType=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, typename KeyType, typename... ValueArgs) <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> emplace_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> hint</para>
</listitem>
            <listitem><para><link linkend="_classtable_1a0557838c501f4e7a768ebbfe84353a0d">if</link> <link linkend="_classtable_1acbac0e9e4db9b71eeca407bc2026b21a">constexpr</link> (impl::is_wide_string&lt; KeyType &gt;)</para>
</listitem>
            <listitem><para><link linkend="_classtable_1a0557838c501f4e7a768ebbfe84353a0d">if</link> (!<link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link>-&gt;second)</para>
</listitem>
            <listitem><para><link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename KeyType, typename ValueType) std</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classtable_1a02a0fa6624ce6b72b3dcfc2a24a60068">insert</link> (Iter <link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>, Iter <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>
</listitem>
            <listitem><para><link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename KeyType, typename ValueType) std</para>
</listitem>
            <listitem><para><link linkend="_classtable_1a6aa09205053fcd522ab78e862d21a0f0">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename ValueType=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, typename KeyType, typename... ValueArgs) std</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classtable_1a68177c7a82d76e4ef27ba9c8618272f4">operator[]</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classtable_1a7a1c9cb424ad342897ac73aeddb88a27">operator[]</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Type checks</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type <link linkend="_classtable_1a54c936c3aac096be1dcad45036ee6a9f">type</link> () const noexcept final</para>

<para>Returns #toml::node_type::table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a6cbade52106ece3ab27feda3f4d58110">is_homogeneous</link> (node_type ntype) const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a03a22b6b4ecd0043d8a684844741b5a6">is_homogeneous</link> (node_type ntype, node *&amp;first_nonmatch) noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ad24e8cb001d0c6d429caa048314fb213">is_homogeneous</link> (node_type ntype, const node *&amp;first_nonmatch) const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a7a29b434ebc03ec99db52ae98668d5db">is_table</link> () const noexcept final</para>

<para>Returns <computeroutput>true</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a546d35293ab8c3e3850e3a712862480f">is_array</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ad492ac1e45805952a3c8924583cc296e">is_array_of_tables</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a7dd10d152666712ede4001059b5a6ed2">is_value</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a16e1591a845aa7db95df37f8c35cb23c">is_string</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ad6e253695f391c0e6edf928d77fa766d">is_integer</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a951c432ffd2b0cbc06518e7897089c57">is_floating_point</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a1dc76e80008b5ed5aa70a66fa3626882">is_number</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a838d74631b4bfe28746757d3fb239d50">is_boolean</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a9d29b05c9c0625574d78581376fc361f">is_date</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ae7b07d54ee3ad3f4a245c26898700272">is_time</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a07b42c6116440db38c8b518a6c685802">is_date_time</link> () const noexcept final</para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Type casts</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * <link linkend="_classtable_1a6e49884f9b927770890cb9fe6df61a42">as_table</link> () noexcept final</para>

<para>Returns a pointer to the table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * <link linkend="_classtable_1a55c771fd945281328d96f978c0255059">as_array</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * <link linkend="_classtable_1ae90f248325e54bd99bb3a392b2751cb3">as_string</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classtable_1a8e4f6aed5156d9d6734f42c4bcb7b97f">as_integer</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * <link linkend="_classtable_1ac549da31899da9d559671d50d1f3f662">as_floating_point</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classtable_1a37afbd90ebbad8a41342167399be6a2d">as_boolean</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * <link linkend="_classtable_1aa5996cf56e0d9a88ab21d804a41f4c54">as_date</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classtable_1a70eeba3cc6b24d1d6f73c9448ce396dc">as_time</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classtable_1acb002459139377f756dd6ffb0652196d">as_date_time</link> () noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * <link linkend="_classtable_1a7f9da7358d04e7e6957ac5ee52529490">as_table</link> () const noexcept final</para>

<para>Returns a const-qualified pointer to the table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * <link linkend="_classtable_1aacd0141b8604d4b03f05c36d2be2f7b3">as_array</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * <link linkend="_classtable_1a1aa73148a1da6849216129531b6c9a80">as_string</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * <link linkend="_classtable_1a3afb4e824a39626582bf2b32775e112a">as_integer</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * <link linkend="_classtable_1a32760109122058741e1136a660e57d94">as_floating_point</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * <link linkend="_classtable_1ad7bf9703dc4a476bc944e6e0b15a0f8d">as_boolean</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * <link linkend="_classtable_1abebee4e6091e103e08421d6e500f88d8">as_date</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * <link linkend="_classtable_1a40de88e69cd2f6001f66c2afb96b3390">as_time</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * <link linkend="_classtable_1a785a4773f198d352e60ae4c0706abd7d">as_date_time</link> () const noexcept final</para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Metadata</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline</link> () const noexcept</para>

<para>Returns true if this table is an inline table. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classtable_1adb65ea92406d15cf1da9ca32d28aaf21">is_inline</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept</para>

<para>Sets whether this table is a TOML inline table. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Value retrieval</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node * <link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>

<para>Gets the node at a specific key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * <link linkend="_classtable_1a1913a2d35dd5d582d729a1aa86154a4c">get</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>

<para>Gets the node at a specific key (const overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node * <link linkend="_classtable_1a07ba99c53892d8ff5c8f40f5f610007c">get</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Gets the node at a specific key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node * <link linkend="_classtable_1ae6f170554dad25ab10746ed9f8ff1da2">get</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Gets the node at a specific key (const overload). </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> impl::wrap_node&lt; T &gt; * <link linkend="_classtable_1a606d8e1e91ed8cfa1225bd607cf31918">get_as</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>

<para>Gets the node at a specific key if it is a particular type. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> const impl::wrap_node&lt; T &gt; * <link linkend="_classtable_1aad66df14406c1ae0df702317375aeb84">get_as</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>

<para>Gets the node at a specific key if it is a particular type (const overload). </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> impl::wrap_node&lt; T &gt; * <link linkend="_classtable_1a24969f8c97df9c7f51b8ce717a6e845e">get_as</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Gets the node at a specific key if it is a particular type. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const impl::wrap_node&lt; T &gt; * <link linkend="_classtable_1a0628ea2d76b5ef4cc9183d8f7da2b24c">get_as</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Gets the node at a specific key if it is a particular type (const overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; <link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classtable_1a09b1e615db5197302db7fdf356e1886f">at</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; <link linkend="_classtable_1af7865f3207b8161131870c4d87de2356">at</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; <link linkend="_classtable_1a5aacf43d27317360b9ac8fb920adf2d5">at</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Size and Capacity</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a406c059cce67faebb6aa0815624b6231">empty</link> () const noexcept</para>

<para>Returns true if the table is empty. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classtable_1affa7520e779cbbfc21bbdc31c4f8f7ce">size</link> () const noexcept</para>

<para>Returns the number of key-value pairs in the table. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Searching</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>

<para>Returns an iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a6bb5569bc3e0624ad8995de1aae9eb0b">lower_bound</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>

<para>Returns a const iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1acd612d7c5033990aa615969a74653564">lower_bound</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Returns an iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a9031bb5020d778f0ef0172c81013fccd">lower_bound</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Returns a const iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8">find</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>

<para>Gets an iterator to the node at a specific key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a8607e0b0c1ba7d8e0e8cb3b3b537feae">find</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>

<para>Gets an iterator to the node at a specific key (const overload) </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a466a42305799b16b19f3cfcf9f8dd8ac">contains</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>

<para>Returns true if the table contains a node at the given key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a8d9909692b29d2cefa14678963863a6c">find</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Gets an iterator to the node at a specific key. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1abf937747a21ac02a5807101d958765f1">find</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Gets an iterator to the node at a specific key (const overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a1cb95913bdd13b5c63c1dd2637d75873">contains</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Returns true if the table contains a node at the given key. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Erasure</title>
        <itemizedlist>
            <listitem><para><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">erase</link> (<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> pos) noexcept</para>

<para>Removes the specified key-value pair from the table. </para>
</listitem>
            <listitem><para><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a24fd0bfb38c97989cddf90ab2e79a4dd">erase</link> (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> pos) noexcept</para>

<para>Removes the specified key-value pair from the table (const iterator overload). </para>
</listitem>
            <listitem><para><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a564d7164aac6483181560ff43333d016">erase</link> (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>, <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>) noexcept</para>

<para>Removes the key-value pairs in the range [first, last) from the table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classtable_1a602f8e3a30eacd78ad413c2a3cefa952">erase</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>

<para>Removes the value with the given key from the table. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classtable_1a38590f5596b90b5858ba95abdc9068ce">erase</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Removes the value with the given key from the table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a03364a6c3763fac7c731183ae810a319">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;noexcept</para>

<para>Removes empty child arrays and tables. </para>
</listitem>
            <listitem><para><link linkend="_classtable">table</link> &amp;&amp; <link linkend="_classtable_1a9471ac8762fdfeb8a9bbac48cb0dcc37">prune</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) &amp;&amp;noexcept</para>

<para>Removes empty child arrays and tables (rvalue overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classtable_1a6248c10022c6cd670f045cda74cb1cbe">clear</link> () noexcept</para>

<para>Removes all key-value pairs from the table. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Node views</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classtable_1a68177c7a82d76e4ef27ba9c8618272f4">operator[]</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) noexcept</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classtable_1a7a1c9cb424ad342897ac73aeddb88a27">operator[]</link> (std::string_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const noexcept</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value (const overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; <link linkend="_classtable_1a4444bac8778900c8a75a866da3c571b0">operator[]</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>)</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; <link linkend="_classtable_1a5cb524cd9990fe1e90f1f57009cfdead">operator[]</link> (std::wstring_view <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) const</para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value (const overload). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classtable_1a82b6ece5db050fa6c468b08fa514a7dc">operator&lt;&lt;</link> (std::ostream &amp;lhs, const <link linkend="_classtable">table</link> &amp;rhs)</para>

<para>Prints the table out to a stream as formatted TOML. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a7dec1fafb7abc1389b18d2de80c39392">operator==</link> (const <link linkend="_classtable">table</link> &amp;lhs, const <link linkend="_classtable">table</link> &amp;rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ab456df97bd98e13632b756411088bfbd">operator!=</link> (const <link linkend="_classtable">table</link> &amp;lhs, const <link linkend="_classtable">table</link> &amp;rhs) noexcept</para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_classtable_1a82b6ece5db050fa6c468b08fa514a7dc">operator&lt;&lt;</link> (std::ostream &amp;lhs, const <link linkend="_classtable">table</link> &amp;rhs)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Equality</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1a7dec1fafb7abc1389b18d2de80c39392">operator==</link> (const <link linkend="_classtable">table</link> &amp;lhs, const <link linkend="_classtable">table</link> &amp;rhs) noexcept</para>

<para>Equality operator. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classtable_1ab456df97bd98e13632b756411088bfbd">operator!=</link> (const <link linkend="_classtable">table</link> &amp;lhs, const <link linkend="_classtable">table</link> &amp;rhs) noexcept</para>

<para>Inequality operator. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Iteration    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> { <link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link> }</para>

<para>A BidirectionalIterator for iterating over key-value pairs in a toml::table. </para>
</listitem>
            <listitem><para>using <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> = toml::const_table_iterator</para>

<para>A BidirectionalIterator for iterating over const key-value pairs in a toml::table. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link> () noexcept</para>

<para>Returns an iterator to the first key-value pair. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a0035089c5cba9e55533f8d071cc92aa8">begin</link> () const noexcept</para>

<para>Returns an iterator to the first key-value pair. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a99538d11dcdbaa6693aa17002aa40967">cbegin</link> () const noexcept</para>

<para>Returns an iterator to the first key-value pair. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link> () noexcept</para>

<para>Returns an iterator to one-past-the-last key-value pair. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1a76522d05d61fe5a153513aea06720743">end</link> () const noexcept</para>

<para>Returns an iterator to one-past-the-last key-value pair. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> <link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend</link> () const noexcept</para>

<para>Returns an iterator to one-past-the-last key-value pair. </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a694a4f3fd69ba434774c9dde8ffee961">for_each</link> (Func &amp;&amp;visitor) &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classtable">table</link> &amp; &gt;)</para>

<para>Invokes a visitor on each key-value pair in the table. </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para><link linkend="_classtable">table</link> &amp;&amp; <link linkend="_classtable_1a0b976de00e50fa9b297e08fca9951eec">for_each</link> (Func &amp;&amp;visitor) &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, <link linkend="_classtable">table</link> &amp;&amp; &gt;)</para>

<para>Invokes a visitor on each key-value pair in the table (rvalue overload). </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classtable">table</link> &amp; <link linkend="_classtable_1a3741d808d6f5cb0a221a31caeaa24d9c">for_each</link> (Func &amp;&amp;visitor) const &amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classtable">table</link> &amp; &gt;)</para>

<para>Invokes a visitor on each key-value pair in the table (const lvalue overload). </para>
</listitem>
            <listitem><para>template&lt;typename Func &gt; </para><para>const <link linkend="_classtable">table</link> &amp;&amp; <link linkend="_classtable_1ad390a6f105a2d472951f8ec0097b69a1">for_each</link> (Func &amp;&amp;visitor) const &amp;&amp;noexcept(for_each_is_nothrow&lt; Func &amp;&amp;, const <link linkend="_classtable">table</link> &amp;&amp; &gt;)</para>

<para>Invokes a visitor on each key-value pair in the table (const rvalue overload). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Insertion and Emplacement    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link> = impl::remove_cvref&lt; ValueType &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link> = std::conditional_t&lt; std::is_void_v&lt; <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link> &gt;, impl::emplaced_type_of&lt; ValueArgs &amp;&amp;... &gt;, <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link> &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">unwrapped_type</link> = impl::remove_cvref&lt; impl::unwrap_node&lt; <link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link> &gt; &gt;</para>
</listitem>
            <listitem><para>KeyType &amp;&amp; <link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link></para>
</listitem>
            <listitem><para>KeyType ValueArgs &amp;&amp; <link linkend="_classtable_1af78df36be5bdd9f3828cf520634ec31e">args</link></para>
</listitem>
            <listitem><para><link linkend="_classtable_1add46e947bee6a323e22efdc9f5356699">else</link></para>
</listitem>
            <listitem><para>map_iterator <link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link> = insert_with_hint(hint, toml::key{ static_cast&lt;KeyType&amp;&amp;&gt;(<link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) }, nullptr)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> { <link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link> }</para>
</listitem>
            <listitem><para><link linkend="_classtable_1aa682d9675e4c168e5b04f302d060cb4b">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename ValueType=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, typename KeyType, typename... ValueArgs) <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> emplace_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> hint</para>

<para>Emplaces a new value at a specific key if one did not already exist. </para>
</listitem>
            <listitem><para><link linkend="_classtable_1a0557838c501f4e7a768ebbfe84353a0d">if</link> <link linkend="_classtable_1acbac0e9e4db9b71eeca407bc2026b21a">constexpr</link> (impl::is_wide_string&lt; KeyType &gt;)</para>
</listitem>
            <listitem><para><link linkend="_classtable_1a0557838c501f4e7a768ebbfe84353a0d">if</link> (!<link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link>-&gt;second)</para>
</listitem>
            <listitem><para><link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename KeyType, typename ValueType) std</para>

<para>Inserts a new value at a specific key if one did not already exist. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classtable_1a02a0fa6624ce6b72b3dcfc2a24a60068">insert</link> (Iter <link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>, Iter <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>=<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)</para>

<para>Inserts a series of key-value pairs into the table. </para>
</listitem>
            <listitem><para><link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename KeyType, typename ValueType) std</para>

<para>Inserts or assigns a value at a specific key. </para>
</listitem>
            <listitem><para><link linkend="_classtable_1a6aa09205053fcd522ab78e862d21a0f0">TOML_CONSTRAINED_TEMPLATE</link> ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;), typename ValueType=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, typename KeyType, typename... ValueArgs) std</para>

<para>Emplaces a new value at a specific key if one did not already exist. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A TOML table. </para>



<para>\detail The interface of this type is modeled after std::map, with some additional considerations made for the heterogeneous nature of a TOML table.</para>

<para>\cpp toml::table tbl = toml::parse(R&quot;(
@iverbatim 
[animals]
cats = [ &quot;tiger&quot;, &quot;lion&quot;, &quot;puma&quot; ]
birds = [ &quot;macaw&quot;, &quot;pigeon&quot;, &quot;canary&quot; ]
fish = [ &quot;salmon&quot;, &quot;trout&quot;, &quot;carp&quot; ]
@endiverbatim
)&quot;sv);</para>

<para>// operator[] retrieves node-views std::cout &lt;&lt; &quot;cats: &quot; &lt;&lt; tbl[&quot;animals&quot;][&quot;cats&quot;] &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; &quot;fish[1]: &quot; &lt;&lt; tbl[&quot;animals&quot;][&quot;fish&quot;][1] &lt;&lt; &quot;\n&quot;;</para>

<para>// <link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path()</link> does fully-qualified &quot;toml path&quot; lookups std::cout &lt;&lt; &quot;cats: &quot; &lt;&lt; tbl.at_path(&quot;animals.cats&quot;) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; &quot;fish[1]: &quot; &lt;&lt; tbl.at_path(&quot;animals.fish[1]&quot;) &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out cats: [&apos;tiger&apos;, &apos;lion&apos;, &apos;puma&apos;] fish[1] : &apos;trout&apos; cats : [&apos;tiger&apos;, &apos;lion&apos;, &apos;puma&apos;] fish[1] : &apos;trout&apos; \eout </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754"/><section>
    <title>const_iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">table::const_iterator</link> =  toml::const_table_iterator</computeroutput></para><para>

<para>A BidirectionalIterator for iterating over const key-value pairs in a toml::table. </para>
</para>
</section>
<anchor xml:id="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754"/><section>
    <title>const_iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">table::const_iterator</link> =  toml::const_table_iterator</computeroutput></para></section>
<anchor xml:id="_classtable_1afea247dbb72228a422b110d4bd5805a4"/><section>
    <title>iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">table::iterator</link> { <link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link> }</computeroutput></para><para>

<para>A BidirectionalIterator for iterating over key-value pairs in a toml::table. </para>
</para>
</section>
<anchor xml:id="_classtable_1a663a0e427e98198575b7a91b7c919c30"/><section>
    <title>iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">table::iterator</link> =  toml::table_iterator</computeroutput></para></section>
<anchor xml:id="_classtable_1a6837fcea2eb10704f988624b7a73f3ee"/><section>
    <title>raw_value_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>raw_value_type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>raw_value_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">table::raw_value_type</link> =  impl::remove_cvref&lt;ValueType&gt;</computeroutput></para></section>
<anchor xml:id="_classtable_1a6837fcea2eb10704f988624b7a73f3ee"/><section>
    <title>raw_value_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>raw_value_type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>raw_value_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">table::raw_value_type</link> =  impl::remove_cvref&lt;ValueType&gt;</computeroutput></para></section>
<anchor xml:id="_classtable_1aa4e13665570823f0343c59dc161baa95"/><section>
    <title>unwrapped_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>unwrapped_type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>unwrapped_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">table::unwrapped_type</link> =  impl::remove_cvref&lt;impl::unwrap_node&lt;<link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link>&gt; &gt;</computeroutput></para></section>
<anchor xml:id="_classtable_1aa4e13665570823f0343c59dc161baa95"/><section>
    <title>unwrapped_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>unwrapped_type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>unwrapped_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">table::unwrapped_type</link> =  impl::remove_cvref&lt;impl::unwrap_node&lt;<link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link>&gt; &gt;</computeroutput></para></section>
<anchor xml:id="_classtable_1af8f0e6773b97cc2093d44fc0be051995"/><section>
    <title>value_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>value_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">table::value_type</link> =  std:: conditional_t&lt;std::is_void_v&lt;<link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;, impl::emplaced_type_of&lt;ValueArgs&amp;&amp;...&gt;, <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;</computeroutput></para></section>
<anchor xml:id="_classtable_1af8f0e6773b97cc2093d44fc0be051995"/><section>
    <title>value_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>value_type</secondary></indexterm>
<para><computeroutput>using <link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">table::value_type</link> =  std:: conditional_t&lt;std::is_void_v&lt;<link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;, impl::emplaced_type_of&lt;ValueArgs&amp;&amp;...&gt;, <link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d"/><section>
    <title>table()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a1de2fb31555f46715dcf27ddcf6da44d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a7af51d696f375eae4ca68ede19225796"/><section>
    <title>~table()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>~table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>~table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::~table ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a58f20c5689b9a6cf610052438c75503d"/><section>
    <title>table()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table (const <link linkend="_classtable">table</link> &amp; )</computeroutput></para><para>

<para>Copy constructor. </para>
</para>
</section>
<anchor xml:id="_classtable_1a5a75009c02a67ef8ed1d6488b4efb1c2"/><section>
    <title>table()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table (<link linkend="_classtable">table</link> &amp;&amp; other)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move constructor. </para>
</para>
</section>
<anchor xml:id="_classtable_1adaa45da686fdf6db229f43bbf9a3d9d0"/><section>
    <title>table()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table (std::initializer_list&lt; impl::table_init_pair &gt; kvps)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructs a table with one or more initial key-value pairs. </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;foo&quot;, 1 }, { &quot;bar&quot;, 2.0 }, { &quot;kek&quot;, &quot;three&quot; } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out { foo = 1, bar = 2.0, kek = &quot;three&quot; } \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>kvps</entry><entry>
<para>A list of key-value pairs used to initialize the table. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d"/><section>
    <title>table()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a7af51d696f375eae4ca68ede19225796"/><section>
    <title>~table()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>~table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>~table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::~table ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a58f20c5689b9a6cf610052438c75503d"/><section>
    <title>table()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table (const <link linkend="_classtable">table</link> &amp; )</computeroutput></para></section>
<anchor xml:id="_classtable_1a5a75009c02a67ef8ed1d6488b4efb1c2"/><section>
    <title>table()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table (<link linkend="_classtable">table</link> &amp;&amp; other)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1adaa45da686fdf6db229f43bbf9a3d9d0"/><section>
    <title>table()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> table::table (std::initializer_list&lt; impl::table_init_pair &gt; kvps)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classtable_1aacd0141b8604d4b03f05c36d2be2f7b3"/><section>
    <title>as_array()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * table::as_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1aacd0141b8604d4b03f05c36d2be2f7b3"/><section>
    <title>as_array()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classarray">array</link> * table::as_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a55c771fd945281328d96f978c0255059"/><section>
    <title>as_array()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * table::as_array ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a55c771fd945281328d96f978c0255059_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a55c771fd945281328d96f978c0255059"/><section>
    <title>as_array()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_array</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classarray">array</link> * table::as_array ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ad7bf9703dc4a476bc944e6e0b15a0f8d"/><section>
    <title>as_boolean()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * table::as_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1ad7bf9703dc4a476bc944e6e0b15a0f8d"/><section>
    <title>as_boolean()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * table::as_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a37afbd90ebbad8a41342167399be6a2d"/><section>
    <title>as_boolean()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * table::as_boolean ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a37afbd90ebbad8a41342167399be6a2d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a37afbd90ebbad8a41342167399be6a2d"/><section>
    <title>as_boolean()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_boolean</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; * table::as_boolean ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1abebee4e6091e103e08421d6e500f88d8"/><section>
    <title>as_date()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * table::as_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1abebee4e6091e103e08421d6e500f88d8"/><section>
    <title>as_date()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; date &gt; * table::as_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1aa5996cf56e0d9a88ab21d804a41f4c54"/><section>
    <title>as_date()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * table::as_date ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_aa5996cf56e0d9a88ab21d804a41f4c54_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1aa5996cf56e0d9a88ab21d804a41f4c54"/><section>
    <title>as_date()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_date</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; date &gt; * table::as_date ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a785a4773f198d352e60ae4c0706abd7d"/><section>
    <title>as_date_time()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * table::as_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a785a4773f198d352e60ae4c0706abd7d"/><section>
    <title>as_date_time()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * table::as_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1acb002459139377f756dd6ffb0652196d"/><section>
    <title>as_date_time()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * table::as_date_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_acb002459139377f756dd6ffb0652196d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1acb002459139377f756dd6ffb0652196d"/><section>
    <title>as_date_time()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_date_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structdate__time">date_time</link> &gt; * table::as_date_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a32760109122058741e1136a660e57d94"/><section>
    <title>as_floating_point()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * table::as_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a32760109122058741e1136a660e57d94"/><section>
    <title>as_floating_point()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; double &gt; * table::as_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ac549da31899da9d559671d50d1f3f662"/><section>
    <title>as_floating_point()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * table::as_floating_point ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_ac549da31899da9d559671d50d1f3f662_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1ac549da31899da9d559671d50d1f3f662"/><section>
    <title>as_floating_point()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_floating_point</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; double &gt; * table::as_floating_point ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a3afb4e824a39626582bf2b32775e112a"/><section>
    <title>as_integer()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * table::as_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a3afb4e824a39626582bf2b32775e112a"/><section>
    <title>as_integer()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * table::as_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a8e4f6aed5156d9d6734f42c4bcb7b97f"/><section>
    <title>as_integer()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * table::as_integer ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a8e4f6aed5156d9d6734f42c4bcb7b97f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a8e4f6aed5156d9d6734f42c4bcb7b97f"/><section>
    <title>as_integer()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_integer</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt; * table::as_integer ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a1aa73148a1da6849216129531b6c9a80"/><section>
    <title>as_string()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * table::as_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a1aa73148a1da6849216129531b6c9a80"/><section>
    <title>as_string()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; std::string &gt; * table::as_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ae90f248325e54bd99bb3a392b2751cb3"/><section>
    <title>as_string()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * table::as_string ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_ae90f248325e54bd99bb3a392b2751cb3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1ae90f248325e54bd99bb3a392b2751cb3"/><section>
    <title>as_string()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_string</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; std::string &gt; * table::as_string ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a7f9da7358d04e7e6957ac5ee52529490"/><section>
    <title>as_table()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * table::as_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const-qualified pointer to the table. </para>
</para>
</section>
<anchor xml:id="_classtable_1a7f9da7358d04e7e6957ac5ee52529490"/><section>
    <title>as_table()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const <link linkend="_classtable">table</link> * table::as_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a6e49884f9b927770890cb9fe6df61a42"/><section>
    <title>as_table()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * table::as_table ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a pointer to the table. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a6e49884f9b927770890cb9fe6df61a42_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a6e49884f9b927770890cb9fe6df61a42"/><section>
    <title>as_table()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="_classtable">table</link> * table::as_table ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a40de88e69cd2f6001f66c2afb96b3390"/><section>
    <title>as_time()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * table::as_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a40de88e69cd2f6001f66c2afb96b3390"/><section>
    <title>as_time()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> const toml::value&lt; <link linkend="_structtime">time</link> &gt; * table::as_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a70eeba3cc6b24d1d6f73c9448ce396dc"/><section>
    <title>as_time()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * table::as_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>nullptr</computeroutput>. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a70eeba3cc6b24d1d6f73c9448ce396dc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a70eeba3cc6b24d1d6f73c9448ce396dc"/><section>
    <title>as_time()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>as_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>as_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> toml::value&lt; <link linkend="_structtime">time</link> &gt; * table::as_time ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a0a56f283072073b872d15bb91889ede5"/><section>
    <title>at()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; table::at (std::string_view key)</computeroutput></para><para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a0a56f283072073b872d15bb91889ede5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a0a56f283072073b872d15bb91889ede5"/><section>
    <title>at()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node &amp; table::at (std::string_view key)</computeroutput></para></section>
<anchor xml:id="_classtable_1a09b1e615db5197302db7fdf356e1886f"/><section>
    <title>at()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; table::at (std::string_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a09b1e615db5197302db7fdf356e1886f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a09b1e615db5197302db7fdf356e1886f"/><section>
    <title>at()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; table::at (std::string_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a09b1e615db5197302db7fdf356e1886f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1af7865f3207b8161131870c4d87de2356"/><section>
    <title>at()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node &amp; table::at (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classtable_1a5aacf43d27317360b9ac8fb920adf2d5"/><section>
    <title>at()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>at</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>at</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node &amp; table::at (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a reference to the element at a specific key, throwing <computeroutput>std::out_of_range</computeroutput> if none existed. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a5aacf43d27317360b9ac8fb920adf2d5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a0035089c5cba9e55533f8d071cc92aa8"/><section>
    <title>begin()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair. </para>
</para>
</section>
<anchor xml:id="_classtable_1a0035089c5cba9e55533f8d071cc92aa8"/><section>
    <title>begin()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b"/><section>
    <title>begin()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a798d2a3a47e33f5c7ea6e4a9557b3e7b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b"/><section>
    <title>begin()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a99538d11dcdbaa6693aa17002aa40967"/><section>
    <title>cbegin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a99538d11dcdbaa6693aa17002aa40967_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a99538d11dcdbaa6693aa17002aa40967"/><section>
    <title>cbegin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519"/><section>
    <title>cend()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last key-value pair. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_ae222f3b89576ab6cfb0204fc99ff1519_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519"/><section>
    <title>cend()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a6248c10022c6cd670f045cda74cb1cbe"/><section>
    <title>clear()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>clear</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>clear</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> table::clear ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes all key-value pairs from the table. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a6248c10022c6cd670f045cda74cb1cbe_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a6248c10022c6cd670f045cda74cb1cbe"/><section>
    <title>clear()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>clear</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>clear</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> table::clear ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1acbac0e9e4db9b71eeca407bc2026b21a"/><section>
    <title>constexpr()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>constexpr</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>constexpr</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1a0557838c501f4e7a768ebbfe84353a0d">if</link> table::constexpr (impl::is_wide_string&lt; KeyType &gt; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1acbac0e9e4db9b71eeca407bc2026b21a"/><section>
    <title>constexpr()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>constexpr</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>constexpr</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1a0557838c501f4e7a768ebbfe84353a0d">if</link> table::constexpr (impl::is_wide_string&lt; KeyType &gt; )<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a466a42305799b16b19f3cfcf9f8dd8ac"/><section>
    <title>contains()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>contains</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::contains (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if the table contains a node at the given key. </para>
</para>
</section>
<anchor xml:id="_classtable_1a466a42305799b16b19f3cfcf9f8dd8ac"/><section>
    <title>contains()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>contains</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::contains (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a1cb95913bdd13b5c63c1dd2637d75873"/><section>
    <title>contains()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>contains</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::contains (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns true if the table contains a node at the given key. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classtable_1a406c059cce67faebb6aa0815624b6231"/><section>
    <title>empty()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>empty</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>empty</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if the table is empty. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a406c059cce67faebb6aa0815624b6231_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a406c059cce67faebb6aa0815624b6231"/><section>
    <title>empty()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>empty</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>empty</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a76522d05d61fe5a153513aea06720743"/><section>
    <title>end()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last key-value pair. </para>
</para>
</section>
<anchor xml:id="_classtable_1a76522d05d61fe5a153513aea06720743"/><section>
    <title>end()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1aa3e78417a257af444322025c99059e2f"/><section>
    <title>end()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last key-value pair. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_aa3e78417a257af444322025c99059e2f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1aa3e78417a257af444322025c99059e2f"/><section>
    <title>end()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a564d7164aac6483181560ff43333d016"/><section>
    <title>erase()<computeroutput>[1/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::erase (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> begin, <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> end)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes the key-value pairs in the range [first, last) from the table. </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, &quot;bad&quot; }, { &quot;c&quot;, &quot;karma&quot; }, { &quot;d&quot;, 2 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>tbl.erase(tbl.cbegin() + 1, tbl.cbegin() + 3); std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out { a = 1, b = &quot;bad&quot;, c = &quot;karma&quot;, d = 2 } { a = 1, d = 2 } \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>begin</entry><entry>
<para>Iterator to the first key-value pair being erased. </para>
</entry>
                            </row>
                            <row>
<entry>end</entry><entry>
<para>Iterator to the one-past-the-last key-value pair being erased.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator to the first key-value pair immediately following the last removed key-value pair. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a564d7164aac6483181560ff43333d016"/><section>
    <title>erase()<computeroutput>[2/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::erase (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> begin, <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> end)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a24fd0bfb38c97989cddf90ab2e79a4dd"/><section>
    <title>erase()<computeroutput>[3/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::erase (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> pos)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes the specified key-value pair from the table (const iterator overload). </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>tbl.erase(tbl.cbegin() + 1); std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out { a = 1, b = 2, c = 3 } { a = 1, c = 3 } \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>Iterator to the key-value pair being erased.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator to the first key-value pair immediately following the removed key-value pair. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a24fd0bfb38c97989cddf90ab2e79a4dd"/><section>
    <title>erase()<computeroutput>[4/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::erase (<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> pos)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1afc8a374f825376cd8dd55b843f0db2de"/><section>
    <title>erase()<computeroutput>[5/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::erase (<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> pos)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes the specified key-value pair from the table. </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>tbl.erase(tbl.begin() + 1); std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out { a = 1, b = 2, c = 3 } { a = 1, c = 3 } \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pos</entry><entry>
<para>Iterator to the key-value pair being erased.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Iterator to the first key-value pair immediately following the removed key-value pair. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_afc8a374f825376cd8dd55b843f0db2de_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1afc8a374f825376cd8dd55b843f0db2de"/><section>
    <title>erase()<computeroutput>[6/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::erase (<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> pos)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a602f8e3a30eacd78ad413c2a3cefa952"/><section>
    <title>erase()<computeroutput>[7/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> table::erase (std::string_view key)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes the value with the given key from the table. </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>std::cout &lt;&lt; tbl.erase(&quot;b&quot;) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; tbl.erase(&quot;not an existing key&quot;) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out { a = 1, b = 2, c = 3 } true false { a = 1, c = 3 } \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>Key to erase.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of elements removed (0 or 1). </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a602f8e3a30eacd78ad413c2a3cefa952"/><section>
    <title>erase()<computeroutput>[8/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> table::erase (std::string_view key)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a38590f5596b90b5858ba95abdc9068ce"/><section>
    <title>erase()<computeroutput>[9/9]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>erase</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> table::erase (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Removes the value with the given key from the table. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>Key to erase.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of elements removed (0 or 1). </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a8607e0b0c1ba7d8e0e8cb3b3b537feae"/><section>
    <title>find()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>find</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>find</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::find (std::string_view key) const<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets an iterator to the node at a specific key (const overload) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A const iterator to the node at the specified key, or <link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend()</link>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a8607e0b0c1ba7d8e0e8cb3b3b537feae"/><section>
    <title>find()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>find</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>find</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::find (std::string_view key) const<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8"/><section>
    <title>find()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>find</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>find</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::find (std::string_view key)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets an iterator to the node at a specific key. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator to the node at the specified key, or <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8"/><section>
    <title>find()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>find</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>find</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::find (std::string_view key)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a8d9909692b29d2cefa14678963863a6c"/><section>
    <title>find()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>find</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>find</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::find (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets an iterator to the node at a specific key. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator to the node at the specified key, or <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a8d9909692b29d2cefa14678963863a6c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1abf937747a21ac02a5807101d958765f1"/><section>
    <title>find()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>find</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>find</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::find (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets an iterator to the node at a specific key (const overload). </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A const iterator to the node at the specified key, or <link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend()</link>. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_abf937747a21ac02a5807101d958765f1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a0b976de00e50fa9b297e08fca9951eec"/><section>
    <title>for_each()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classtable">table</link> &amp;&amp; table::for_each (Func &amp;&amp; visitor) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each key-value pair in the table (rvalue overload). </para>
</para>
</section>
<anchor xml:id="_classtable_1a0b976de00e50fa9b297e08fca9951eec"/><section>
    <title>for_each()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classtable">table</link> &amp;&amp; table::for_each (Func &amp;&amp; visitor) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a694a4f3fd69ba434774c9dde8ffee961"/><section>
    <title>for_each()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classtable">table</link> &amp; table::for_each (Func &amp;&amp; visitor) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each key-value pair in the table. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Func</entry><entry>
<para>A callable type invocable with one of the following signatures: <itemizedlist>
<listitem>

<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func(key, val)</link></computeroutput> </para>
</listitem>
<listitem>

<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func(val)</link></computeroutput> </para>
</listitem>
</itemizedlist>
Where: <itemizedlist>
<listitem>

<para><computeroutput>key</computeroutput> will recieve a const reference to a toml::key </para>
</listitem>
<listitem>

<para><computeroutput>val</computeroutput> will recieve the value as it&apos;s concrete type with cvref-qualifications matching the table </para>
</listitem>
</itemizedlist>
Visitors returning <computeroutput>bool</computeroutput> (or something convertible to <computeroutput>bool</computeroutput>) will cause iteration to stop if they return <computeroutput>false</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>visitor</entry><entry>
<para>The visitor object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the table.</para>
</formalpara>
\cpp toml::table tbl{ { &quot;0&quot;, 0 }, { &quot;1&quot;, 1 }, { &quot;2&quot;, 2 }, { &quot;3&quot;, 3.0 }, { &quot;4&quot;, &quot;four&quot; }, { &quot;5&quot;, &quot;five&quot; }, { &quot;6&quot;, 6 } };</para>

<para>// select only the integers using a strongly-typed visitor tbl.for_each([](toml::value&lt;int64_t&gt;&amp; val) { std::cout &lt;&lt; val &lt;&lt; &quot;, &quot;; }); std::cout &lt;&lt; &quot;\n&quot;;</para>

<para>// select all the numeric values using a generic visitor + is_number&lt;&gt; metafunction tbl.for_each([](auto&amp;&amp; val) { if constexpr (toml::is_number&lt;decltype(val)&gt;) std::cout &lt;&lt; val &lt;&lt; &quot;, &quot;; }); std::cout &lt;&lt; &quot;\n&quot;;</para>

<para>// select all the numeric values until we encounter something non-numeric tbl.for_each([](auto&amp;&amp; val) { if constexpr (toml::is_number&lt;decltype(val)&gt;) { std::cout &lt;&lt; val &lt;&lt; &quot;, &quot;; return true; // &quot;keep going&quot; } else return false; // &quot;stop!&quot;</para>

<para>}); std::cout &lt;&lt; &quot;\n\n&quot;;</para>

<para>// visitors may also recieve the key tbl.for_each([](const toml::key&amp; key, auto&amp;&amp; val) { std::cout &lt;&lt; key &lt;&lt; &quot;: &quot; &lt;&lt; val &lt;&lt; &quot;\n&quot;; });</para>

<para>\ecpp \out 0, 1, 2, 6, 0, 1, 2, 3.0, 6, 0, 1, 2, 3.0,</para>

<para>0: 0 1: 1 2: 2 3: 3.0 4: &apos;four&apos; 5: &apos;five&apos; 6: 6 \eout</para>

<para><formalpara><title>See also</title>

<para>node::visit() </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a694a4f3fd69ba434774c9dde8ffee961"/><section>
    <title>for_each()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput><link linkend="_classtable">table</link> &amp; table::for_each (Func &amp;&amp; visitor) &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ad390a6f105a2d472951f8ec0097b69a1"/><section>
    <title>for_each()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classtable">table</link> &amp;&amp; table::for_each (Func &amp;&amp; visitor) const &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each key-value pair in the table (const rvalue overload). </para>
</para>
</section>
<anchor xml:id="_classtable_1ad390a6f105a2d472951f8ec0097b69a1"/><section>
    <title>for_each()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classtable">table</link> &amp;&amp; table::for_each (Func &amp;&amp; visitor) const &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a3741d808d6f5cb0a221a31caeaa24d9c"/><section>
    <title>for_each()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classtable">table</link> &amp; table::for_each (Func &amp;&amp; visitor) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Invokes a visitor on each key-value pair in the table (const lvalue overload). </para>
</para>
</section>
<anchor xml:id="_classtable_1a3741d808d6f5cb0a221a31caeaa24d9c"/><section>
    <title>for_each()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>for_each</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;typename Func &gt; </computeroutput><para><computeroutput>const <link linkend="_classtable">table</link> &amp; table::for_each (Func &amp;&amp; visitor) const &amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a1913a2d35dd5d582d729a1aa86154a4c"/><section>
    <title>get()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * table::get (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key (const overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key, or nullptr. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a1913a2d35dd5d582d729a1aa86154a4c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a1913a2d35dd5d582d729a1aa86154a4c"/><section>
    <title>get()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const node * table::get (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a1913a2d35dd5d582d729a1aa86154a4c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a3a338dc69074b9f155ca52f044ef0b07"/><section>
    <title>get()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node * table::get (std::string_view key)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key. </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;a&quot;, 42, }, { &quot;b&quot;, &quot;is the meaning of life, apparently.&quot; } }; std::cout &lt;&lt; R&quot;(node [&quot;a&quot;] exists: )&quot;sv &lt;&lt; !!arr.get(&quot;a&quot;) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; R&quot;(node [&quot;b&quot;] exists: )&quot;sv &lt;&lt; !!arr.get(&quot;b&quot;) &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; R&quot;(node [&quot;c&quot;] exists: )&quot;sv &lt;&lt; !!arr.get(&quot;c&quot;) &lt;&lt; &quot;\n&quot;; if (auto val = arr.get(&quot;a&quot;)) std::cout &lt;&lt; R&quot;(node [&quot;a&quot;] was an )&quot;sv &lt;&lt; val-&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type()</link> &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out node [&quot;a&quot;] exists: true node [&quot;b&quot;] exists: true node [&quot;c&quot;] exists: false node [&quot;a&quot;] was an integer \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key, or nullptr. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a3a338dc69074b9f155ca52f044ef0b07_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a3a338dc69074b9f155ca52f044ef0b07"/><section>
    <title>get()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> node * table::get (std::string_view key)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a07ba99c53892d8ff5c8f40f5f610007c"/><section>
    <title>get()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> node * table::get (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key, or nullptr. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1ae6f170554dad25ab10746ed9f8ff1da2"/><section>
    <title>get()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>get</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const node * table::get (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key (const overload). </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key, or nullptr. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_ae6f170554dad25ab10746ed9f8ff1da2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1aad66df14406c1ae0df702317375aeb84"/><section>
    <title>get_as()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> const impl::wrap_node&lt; T &gt; * table::get_as (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key if it is a particular type (const overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>One of the TOML node or value types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key if it was of the given type, or nullptr. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1aad66df14406c1ae0df702317375aeb84"/><section>
    <title>get_as()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> const impl::wrap_node&lt; T &gt; * table::get_as (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a606d8e1e91ed8cfa1225bd607cf31918"/><section>
    <title>get_as()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> impl::wrap_node&lt; T &gt; * table::get_as (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key if it is a particular type. </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;a&quot;, 42, }, { &quot;b&quot;, &quot;is the meaning of life, apparently.&quot; } }; if (auto val = arr.get_as&lt;int64_t&gt;(&quot;a&quot;)) std::cout &lt;&lt; R&quot;(node [&quot;a&quot;] was an integer with value )&quot;sv &lt;&lt; **val &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out node [&quot;a&quot;] was an integer with value 42 \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>One of the TOML node or value types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key if it was of the given type, or nullptr. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a606d8e1e91ed8cfa1225bd607cf31918_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a606d8e1e91ed8cfa1225bd607cf31918"/><section>
    <title>get_as()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> impl::wrap_node&lt; T &gt; * table::get_as (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a24969f8c97df9c7f51b8ce717a6e845e"/><section>
    <title>get_as()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> impl::wrap_node&lt; T &gt; * table::get_as (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key if it is a particular type. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>One of the TOML node or value types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key if it was of the given type, or nullptr. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a0628ea2d76b5ef4cc9183d8f7da2b24c"/><section>
    <title>get_as()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>get_as</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>get_as</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const impl::wrap_node&lt; T &gt; * table::get_as (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets the node at a specific key if it is a particular type (const overload). </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>One of the TOML node or value types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The node&apos;s key.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pointer to the node at the specified key if it was of the given type, or nullptr. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a0557838c501f4e7a768ebbfe84353a0d"/><section>
    <title>if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>if</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>if</secondary></indexterm>
<para><computeroutput>table::if (!<link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link>-&gt; second)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a0557838c501f4e7a768ebbfe84353a0d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a0557838c501f4e7a768ebbfe84353a0d"/><section>
    <title>if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>if</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>if</secondary></indexterm>
<para><computeroutput>table::if (!<link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link>-&gt; second)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a0557838c501f4e7a768ebbfe84353a0d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a02a0fa6624ce6b72b3dcfc2a24a60068"/><section>
    <title>insert()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>insert</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> table::insert (Iter begin, Iter end, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inserts a series of key-value pairs into the table. </para>
</para>

<para>\detail \godbolt{bzYcce}</para>

<para>\cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>auto kvps = std::array&lt;std::pair&lt;std::string, int&gt;, 2&gt;{{ { &quot;d&quot;, 42 }, { &quot;a&quot;, 43 } // won&apos;t be inserted, &apos;a&apos; already exists }}; tbl.insert(kvps.begin(), kvps.end()); std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out a = 1 b = 2 c = 3</para>

<para>a = 1 b = 2 c = 3 d = 42 \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Iter</entry><entry>
<para>An InputIterator to a collection of key-value pairs. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>begin</entry><entry>
<para>An iterator to the first value in the input collection. </para>
</entry>
                            </row>
                            <row>
<entry>end</entry><entry>
<para>An iterator to one-past-the-last value in the input collection. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Remarks</title>

<para>This function is morally equivalent to calling <computeroutput>insert(key, value)</computeroutput> for each key-value pair covered by the iterator range, so any values with keys already found in the table will not be replaced. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a02a0fa6624ce6b72b3dcfc2a24a60068_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a02a0fa6624ce6b72b3dcfc2a24a60068_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a02a0fa6624ce6b72b3dcfc2a24a60068"/><section>
    <title>insert()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>insert</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> table::insert (Iter begin, Iter end, <link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> flags = <computeroutput><link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_a02a0fa6624ce6b72b3dcfc2a24a60068_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1a546d35293ab8c3e3850e3a712862480f"/><section>
    <title>is_array()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_array</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a546d35293ab8c3e3850e3a712862480f"/><section>
    <title>is_array()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_array</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_array</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ad492ac1e45805952a3c8924583cc296e"/><section>
    <title>is_array_of_tables()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_array_of_tables</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_array_of_tables</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_array_of_tables ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1ad492ac1e45805952a3c8924583cc296e"/><section>
    <title>is_array_of_tables()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_array_of_tables</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_array_of_tables</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_array_of_tables ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a838d74631b4bfe28746757d3fb239d50"/><section>
    <title>is_boolean()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_boolean</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a838d74631b4bfe28746757d3fb239d50"/><section>
    <title>is_boolean()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_boolean</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_boolean</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a9d29b05c9c0625574d78581376fc361f"/><section>
    <title>is_date()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_date</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a9d29b05c9c0625574d78581376fc361f"/><section>
    <title>is_date()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_date</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_date</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_date ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a07b42c6116440db38c8b518a6c685802"/><section>
    <title>is_date_time()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_date_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a07b42c6116440db38c8b518a6c685802"/><section>
    <title>is_date_time()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_date_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_date_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_date_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a951c432ffd2b0cbc06518e7897089c57"/><section>
    <title>is_floating_point()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_floating_point</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a951c432ffd2b0cbc06518e7897089c57"/><section>
    <title>is_floating_point()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_floating_point</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_floating_point</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_floating_point ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a57a2f14d20387ea2d9abed242cd3043d"/><section>
    <title>is_homogeneous()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_homogeneous</secondary></indexterm>
<computeroutput>template&lt;typename ElemType  = void&gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_homogeneous ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a6cbade52106ece3ab27feda3f4d58110"/><section>
    <title>is_homogeneous()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_homogeneous (node_type ntype) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a6cbade52106ece3ab27feda3f4d58110"/><section>
    <title>is_homogeneous()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_homogeneous (node_type ntype) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ad24e8cb001d0c6d429caa048314fb213"/><section>
    <title>is_homogeneous()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_homogeneous (node_type ntype, const node *&amp; first_nonmatch) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ad24e8cb001d0c6d429caa048314fb213"/><section>
    <title>is_homogeneous()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_homogeneous (node_type ntype, const node *&amp; first_nonmatch) const<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a03a22b6b4ecd0043d8a684844741b5a6"/><section>
    <title>is_homogeneous()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_homogeneous (node_type ntype, node *&amp; first_nonmatch)<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a03a22b6b4ecd0043d8a684844741b5a6"/><section>
    <title>is_homogeneous()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>is_homogeneous</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_homogeneous</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_homogeneous (node_type ntype, node *&amp; first_nonmatch)<computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8"/><section>
    <title>is_inline()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>is_inline</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_inline</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_inline ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if this table is an inline table. </para>
</para>

<para><formalpara><title>Remarks</title>

<para>Runtime-constructed tables (i.e. those not created during parsing) are not inline by default. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8"/><section>
    <title>is_inline()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>is_inline</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_inline</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_inline ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1adb65ea92406d15cf1da9ca32d28aaf21"/><section>
    <title>is_inline()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>is_inline</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_inline</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> table::is_inline (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> val)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Sets whether this table is a TOML inline table. </para>
</para>

<para>\detail \godbolt{an9xdj}</para>

<para>\cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 }, { &quot;d&quot;, toml::table{ { &quot;e&quot;, 4 } } } }; std::cout &lt;&lt; &quot;is inline? &quot;sv &lt;&lt; tbl.is_inline() &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n\n&quot;;</para>

<para>tbl.is_inline(!tbl.<link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline()</link>); std::cout &lt;&lt; &quot;is inline? &quot;sv &lt;&lt; tbl.is_inline() &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out is inline? false a = 1 b = 2 c = 3</para>

<para>[d] e = 4</para>

<para>is inline? true { a = 1, b = 2, c = 3, d = { e = 4 } } \eout</para>

<para><formalpara><title>Remarks</title>

<para>A table being &apos;inline&apos; is only relevent during printing; it has no effect on the general functionality of the table object.</para>
</formalpara>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>val</entry><entry>
<para>The new value for &apos;inline&apos;. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classtable_1adb65ea92406d15cf1da9ca32d28aaf21"/><section>
    <title>is_inline()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>is_inline</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_inline</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> table::is_inline (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> val)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ad6e253695f391c0e6edf928d77fa766d"/><section>
    <title>is_integer()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_integer</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1ad6e253695f391c0e6edf928d77fa766d"/><section>
    <title>is_integer()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_integer</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_integer</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a1dc76e80008b5ed5aa70a66fa3626882"/><section>
    <title>is_number()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_number</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_number</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_number ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a1dc76e80008b5ed5aa70a66fa3626882"/><section>
    <title>is_number()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_number</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_number</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_number ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a16e1591a845aa7db95df37f8c35cb23c"/><section>
    <title>is_string()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_string</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a16e1591a845aa7db95df37f8c35cb23c"/><section>
    <title>is_string()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_string</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a7a29b434ebc03ec99db52ae98668d5db"/><section>
    <title>is_table()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>true</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a7a29b434ebc03ec99db52ae98668d5db"/><section>
    <title>is_table()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_table</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_table</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_table ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ae7b07d54ee3ad3f4a245c26898700272"/><section>
    <title>is_time()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1ae7b07d54ee3ad3f4a245c26898700272"/><section>
    <title>is_time()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_time</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_time</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_time ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a7dd10d152666712ede4001059b5a6ed2"/><section>
    <title>is_value()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_value</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_value</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_value ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns <computeroutput>false</computeroutput>. </para>
</para>
</section>
<anchor xml:id="_classtable_1a7dd10d152666712ede4001059b5a6ed2"/><section>
    <title>is_value()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_value</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>is_value</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> table::is_value ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a6bb5569bc3e0624ad8995de1aae9eb0b"/><section>
    <title>lower_bound()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>lower_bound</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>lower_bound</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::lower_bound (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</para>

<para><formalpara><title>Returns</title>

<para>An iterator to the first matching key-value pair, or <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a6bb5569bc3e0624ad8995de1aae9eb0b"/><section>
    <title>lower_bound()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>lower_bound</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>lower_bound</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::lower_bound (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1ac88a3ddbef7f2522fc3626a03077b238"/><section>
    <title>lower_bound()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>lower_bound</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>lower_bound</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::lower_bound (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</para>

<para><formalpara><title>Returns</title>

<para>An iterator to the first matching key-value pair, or <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1ac88a3ddbef7f2522fc3626a03077b238"/><section>
    <title>lower_bound()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>lower_bound</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>lower_bound</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::lower_bound (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1acd612d7c5033990aa615969a74653564"/><section>
    <title>lower_bound()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>lower_bound</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>lower_bound</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link> table::lower_bound (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para><formalpara><title>Returns</title>

<para>An iterator to the first matching key-value pair, or <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a9031bb5020d778f0ef0172c81013fccd"/><section>
    <title>lower_bound()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>lower_bound</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>lower_bound</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link> table::lower_bound (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns a const iterator to the first key-value pair with key that is <emphasis>not less</emphasis> than the given key. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para><formalpara><title>Returns</title>

<para>An iterator to the first matching key-value pair, or <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a6f963a302ec0f592701775c95c1df1e3"/><section>
    <title>operator=()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; table::operator= (const <link linkend="_classtable">table</link> &amp; )</computeroutput></para><para>

<para>Copy-assignment operator. </para>
</para>
</section>
<anchor xml:id="_classtable_1a6f963a302ec0f592701775c95c1df1e3"/><section>
    <title>operator=()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; table::operator= (const <link linkend="_classtable">table</link> &amp; )</computeroutput></para></section>
<anchor xml:id="_classtable_1a5e61dff4b1846fcddcba33e07b795a71"/><section>
    <title>operator=()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; table::operator= (<link linkend="_classtable">table</link> &amp;&amp; rhs)<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move-assignment operator. </para>
</para>
</section>
<anchor xml:id="_classtable_1a5e61dff4b1846fcddcba33e07b795a71"/><section>
    <title>operator=()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; table::operator= (<link linkend="_classtable">table</link> &amp;&amp; rhs)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a7a1c9cb424ad342897ac73aeddb88a27"/><section>
    <title>operator[]()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; table::operator[] (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value (const overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if one existed, or an empty node view.</para>
</formalpara>
<formalpara><title>Remarks</title>

<para>std::map::operator[]&apos;s behaviour of default-constructing a value at a key if it didn&apos;t exist is a crazy bug factory so I&apos;ve deliberately chosen not to emulate it. <emphasis role="bold">This is not an error.</emphasis></para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a7a1c9cb424ad342897ac73aeddb88a27"/><section>
    <title>operator[]()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; table::operator[] (std::string_view key) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a68177c7a82d76e4ef27ba9c8618272f4"/><section>
    <title>operator[]()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; table::operator[] (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if one existed, or an empty node view.</para>
</formalpara>
<formalpara><title>Remarks</title>

<para>std::map::operator[]&apos;s behaviour of default-constructing a value at a key if it didn&apos;t exist is a crazy bug factory so I&apos;ve deliberately chosen not to emulate it. <emphasis role="bold">This is not an error.</emphasis></para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a68177c7a82d76e4ef27ba9c8618272f4"/><section>
    <title>operator[]()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; table::operator[] (std::string_view key)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a4444bac8778900c8a75a866da3c571b0"/><section>
    <title>operator[]()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; node &gt; table::operator[] (std::wstring_view key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if one existed, or an empty node view.</para>
</formalpara>
<formalpara><title>Remarks</title>

<para>std::map::operator[]&apos;s behaviour of default-constructing a value at a key if it didn&apos;t exist is a crazy bug factory so I&apos;ve deliberately chosen not to emulate it. <emphasis role="bold">This is not an error.</emphasis></para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a5cb524cd9990fe1e90f1f57009cfdead"/><section>
    <title>operator[]()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_classnode__view">node_view</link>&lt; const node &gt; table::operator[] (std::wstring_view key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Gets a <link linkend="_classnode__view">node_view</link> for the selected value (const overload). </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key used for the lookup.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A view of the value at the given key if one existed, or an empty node view.</para>
</formalpara>
<formalpara><title>Remarks</title>

<para>std::map::operator[]&apos;s behaviour of default-constructing a value at a key if it didn&apos;t exist is a crazy bug factory so I&apos;ve deliberately chosen not to emulate it. <emphasis role="bold">This is not an error.</emphasis></para>
</formalpara>
<formalpara><title>See also</title>

<para>toml::node_view </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a9471ac8762fdfeb8a9bbac48cb0dcc37"/><section>
    <title>prune()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_classtable">table</link> &amp;&amp; table::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes empty child arrays and tables (rvalue overload). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>recursive</entry><entry>
<para>Should child arrays and tables themselves be pruned?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An rvalue reference to the table. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a9471ac8762fdfeb8a9bbac48cb0dcc37"/><section>
    <title>prune()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_classtable">table</link> &amp;&amp; table::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;&amp;<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a03364a6c3763fac7c731183ae810a319"/><section>
    <title>prune()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; table::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Removes empty child arrays and tables. </para>
</para>

<para>\detail \cpp</para>

<para>auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, toml::array{ } }, { &quot;c&quot;, toml::array{ toml::table{}, toml::array{} } } }; std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;;</para>

<para>arr.prune(); std::cout &lt;&lt; arr &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out { a = 1, b = [], c = [ {}, [] ] } { a = 1 } \eout</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>recursive</entry><entry>
<para>Should child arrays and tables themselves be pruned?</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the table. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a03364a6c3763fac7c731183ae810a319"/><section>
    <title>prune()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>prune</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>prune</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classtable">table</link> &amp; table::prune (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> recursive = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
) &amp;<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1affa7520e779cbbfc21bbdc31c4f8f7ce"/><section>
    <title>size()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> table::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the number of key-value pairs in the table. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classtable_affa7520e779cbbfc21bbdc31c4f8f7ce_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classtable_1affa7520e779cbbfc21bbdc31c4f8f7ce"/><section>
    <title>size()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> table::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename KeyType , typename ValueType )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inserts a new value at a specific key if one did not already exist. </para>
</para>

<para>\detail \godbolt{bMnW5r}</para>

<para>\cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>for (auto k : { &quot;a&quot;, &quot;d&quot; }) { auto result = tbl.insert(k, 42); std::cout &lt;&lt; &quot;inserted with key &apos;&quot;sv &lt;&lt; k &lt;&lt; &quot;&apos;: &quot;sv &lt;&lt; result.second &lt;&lt; &quot;\n&quot;; } std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out a = 1 b = 2 c = 3</para>

<para>inserted with key &apos;a&apos;: false inserted with key &apos;d&apos;: true a = 1 b = 2 c = 3 d = 42 \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>KeyType</entry><entry>
<para>A toml::key or any compatible string type. </para>
</entry>
                            </row>
                            <row>
<entry>ValueType</entry><entry>
<para>toml::node, toml::node_view, toml::table, toml::array, or a native TOML value type (or a type promotable to one). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key at which to insert the new value. </para>
</entry>
                            </row>
                            <row>
<entry>val</entry><entry>
<para>The new value to insert. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{Valid input} <itemizedlist>
<listitem>

<para>An iterator to the insertion position (or the position of the value that prevented insertion) </para>
</listitem>
<listitem>

<para>A boolean indicating if the insertion was successful. </para>
</listitem>
</itemizedlist>
\conditional_return{Input is a null toml::node_view} <computeroutput>{ <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>, false }</computeroutput></para>
</formalpara>
<caution><title>Attention</title>

<para>The return value will always be <computeroutput>{ <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>, false }</computeroutput> if the input value was an null toml::node_view, because no insertion can take place. This is the only circumstance in which this can occur. </para>
</caution>
</para>
</section>
<anchor xml:id="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename KeyType , typename ValueType )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inserts or assigns a value at a specific key. </para>
</para>

<para>\detail \godbolt{ddK563}</para>

<para>\cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>for (auto k : { &quot;a&quot;, &quot;d&quot; }) { auto result = tbl.insert_or_assign(k, 42); std::cout &lt;&lt; &quot;value at key &apos;&quot;sv &lt;&lt; k &lt;&lt; &quot;&apos; was &quot;sv &lt;&lt; (result.second ? &quot;inserted&quot;sv : &quot;assigned&quot;sv) &lt;&lt; &quot;\n&quot;; } std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out a = 1 b = 2 c = 3</para>

<para>value at key &apos;a&apos; was assigned value at key &apos;d&apos; was inserted a = 42 b = 2 c = 3 d = 42 \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>KeyType</entry><entry>
<para>A toml::key or any compatible string type. </para>
</entry>
                            </row>
                            <row>
<entry>ValueType</entry><entry>
<para>toml::node, toml::node_view, toml::table, toml::array, or a native TOML value type (or a type promotable to one). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key at which to insert or assign the value. </para>
</entry>
                            </row>
                            <row>
<entry>val</entry><entry>
<para>The value to insert/assign. </para>
</entry>
                            </row>
                            <row>
<entry>flags</entry><entry>
<para>Value flags to apply to new values.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>\conditional_return{Valid input} <itemizedlist>
<listitem>

<para>An iterator to the value&apos;s position </para>
</listitem>
<listitem>

<para><computeroutput>true</computeroutput> if the value was inserted, <computeroutput>false</computeroutput> if it was assigned. </para>
</listitem>
</itemizedlist>
\conditional_return{Input is a null toml::node_view} <computeroutput>{ <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>, false }</computeroutput></para>
</formalpara>
<caution><title>Attention</title>

<para>The return value will always be <computeroutput>{ <link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end()</link>, false }</computeroutput> if the input value was a null toml::node_view, because no insertion or assignment can take place. This is the only circumstance in which this can occur. </para>
</caution>
</para>
</section>
<anchor xml:id="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename KeyType , typename ValueType )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename KeyType , typename ValueType )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1aa682d9675e4c168e5b04f302d060cb4b"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename ValueType  = <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link></computeroutput>
, typename KeyType , typename... ValueArgs)</computeroutput></para><para>

<para>Emplaces a new value at a specific key if one did not already exist. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ValueType</entry><entry>
<para>toml::table, toml::array, or any native TOML value type. </para>
</entry>
                            </row>
                            <row>
<entry>KeyType</entry><entry>
<para>A toml::key or any compatible string type. </para>
</entry>
                            </row>
                            <row>
<entry>ValueArgs</entry><entry>
<para>Value constructor argument types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>hint</entry><entry>
<para>Iterator to the position before which the new element will be emplaced. </para>
</entry>
                            </row>
                            <row>
<entry>key</entry><entry>
<para>The key at which to emplace the new value. </para>
</entry>
                            </row>
                            <row>
<entry>args</entry><entry>
<para>Arguments to forward to the value&apos;s constructor.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator to the emplacement position (or the position of the value that prevented emplacement)</para>
</formalpara>
<note><title>Note</title>

<para>This function has exactly the same semantics as <link xlink:href="https://en.cppreference.com/w/cpp/container/map/emplace_hint">std::map::emplace_hint()</link>. </para>
</note>
</para>
</section>
<anchor xml:id="_classtable_1aa682d9675e4c168e5b04f302d060cb4b"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename ValueType  = <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link></computeroutput>
, typename KeyType , typename... ValueArgs)</computeroutput></para></section>
<anchor xml:id="_classtable_1a6aa09205053fcd522ab78e862d21a0f0"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename ValueType  = <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link></computeroutput>
, typename KeyType , typename... ValueArgs)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Emplaces a new value at a specific key if one did not already exist. </para>
</para>

<para>\detail \cpp auto tbl = toml::table{ { &quot;a&quot;, 1 }, { &quot;b&quot;, 2 }, { &quot;c&quot;, 3 } }; std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;;</para>

<para>for (auto k : { &quot;a&quot;, &quot;d&quot; }) { // add a string using std::string&apos;s substring constructor auto result = tbl.emplace&lt;std::string&gt;(k, &quot;this is not a drill&quot;sv, 14, 5); std::cout &lt;&lt; &quot;emplaced with key &apos;&quot;sv &lt;&lt; k &lt;&lt; &quot;&apos;: &quot;sv &lt;&lt; result.second &lt;&lt; &quot;\n&quot;; } std::cout &lt;&lt; tbl &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out { a = 1, b = 2, c = 3 } emplaced with key &apos;a&apos;: false emplaced with key &apos;d&apos;: true { a = 1, b = 2, c = 3, d = &quot;drill&quot; } \eout</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ValueType</entry><entry>
<para>toml::table, toml::array, or any native TOML value type. </para>
</entry>
                            </row>
                            <row>
<entry>KeyType</entry><entry>
<para>A toml::key or any compatible string type. </para>
</entry>
                            </row>
                            <row>
<entry>ValueArgs</entry><entry>
<para>Value constructor argument types. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>The key at which to emplace the new value. </para>
</entry>
                            </row>
                            <row>
<entry>args</entry><entry>
<para>Arguments to forward to the value&apos;s constructor.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A std::pair containing: <?linebreak?><itemizedlist>
<listitem>
<para>An iterator to the emplacement position (or the position of the value that prevented emplacement)</para>
</listitem><listitem>
<para>A boolean indicating if the emplacement was successful.</para>
</listitem></itemizedlist>
</para>
</formalpara>
<formalpara><title>Remarks</title>

<para>There is no difference between <link linkend="_classtable_1a02a0fa6624ce6b72b3dcfc2a24a60068">insert()</link> and emplace() for trivial value types (floats, ints, bools). </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a6aa09205053fcd522ab78e862d21a0f0"/><section>
    <title>TOML_CONSTRAINED_TEMPLATE()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>TOML_CONSTRAINED_TEMPLATE</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>TOML_CONSTRAINED_TEMPLATE</secondary></indexterm>
<para><computeroutput>table::TOML_CONSTRAINED_TEMPLATE ((<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt; KeyType &amp;&amp; &gt;||impl::is_wide_string&lt; KeyType &gt;) , typename ValueType  = <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link></computeroutput>
, typename KeyType , typename... ValueArgs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a54c936c3aac096be1dcad45036ee6a9f"/><section>
    <title>type()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>type</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type table::type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns #toml::node_type::table. </para>
</para>
</section>
<anchor xml:id="_classtable_1a54c936c3aac096be1dcad45036ee6a9f"/><section>
    <title>type()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>type</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>type</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link> node_type table::type ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_classtable_1ab456df97bd98e13632b756411088bfbd"/><section>
    <title>operator!=<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classtable">table</link> &amp; lhs, const <link linkend="_classtable">table</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Inequality operator. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>lhs</entry><entry>
<para>The LHS table. </para>
</entry>
                            </row>
                            <row>
<entry>rhs</entry><entry>
<para>The RHS table.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the tables did not contain the same keys and map. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1ab456df97bd98e13632b756411088bfbd"/><section>
    <title>operator!=<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classtable">table</link> &amp; lhs, const <link linkend="_classtable">table</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a82b6ece5db050fa6c468b08fa514a7dc"/><section>
    <title>operator&lt;&lt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; lhs, const <link linkend="_classtable">table</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Prints the table out to a stream as formatted TOML. </para>
</para>

<para>\availability This operator is only available when <link linkend="_group__configuration_1ga9fc77582d9de77f59d2ddc9ae1f748ca">TOML_ENABLE_FORMATTERS</link> is enabled. </para>
</section>
<anchor xml:id="_classtable_1a82b6ece5db050fa6c468b08fa514a7dc"/><section>
    <title>operator&lt;&lt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; lhs, const <link linkend="_classtable">table</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classtable_1a7dec1fafb7abc1389b18d2de80c39392"/><section>
    <title>operator==<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classtable">table</link> &amp; lhs, const <link linkend="_classtable">table</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Equality operator. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>lhs</entry><entry>
<para>The LHS table. </para>
</entry>
                            </row>
                            <row>
<entry>rhs</entry><entry>
<para>The RHS table.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the tables contained the same keys and map. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classtable_1a7dec1fafb7abc1389b18d2de80c39392"/><section>
    <title>operator==<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classtable">table</link> &amp; lhs, const <link linkend="_classtable">table</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classtable_1af78df36be5bdd9f3828cf520634ec31e"/><section>
    <title>args</title>
<indexterm><primary>args</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>args</secondary></indexterm>
<para><computeroutput>KeyType ValueArgs &amp;&amp; table::args</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_toml_8hpp_1a94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Emplacement&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>)
</programlisting></section>
<anchor xml:id="_classtable_1add46e947bee6a323e22efdc9f5356699"/><section>
    <title>else</title>
<indexterm><primary>else</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>else</secondary></indexterm>
<para><computeroutput>table::else</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;moving_node_ptr&#32;=&#32;std::is_same_v&lt;value_type,&#32;impl::node_ptr&gt;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>...(ValueArgs)&#32;==&#32;1u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;impl::first_is_same&lt;impl::node_ptr&amp;&amp;,&#32;ValueArgs&amp;&amp;...&gt;
</programlisting></section>
<anchor xml:id="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9"/><section>
    <title>ipos</title>
<indexterm><primary>ipos</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>ipos</secondary></indexterm>
<para><computeroutput>map_iterator table::ipos = insert_with_hint(hint, toml::key{ static_cast&lt;KeyType&amp;&amp;&gt;(<link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>) }, nullptr)</computeroutput></para></section>
<anchor xml:id="_classtable_1afea247dbb72228a422b110d4bd5805a4"/><section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link> <link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">table::iterator</link> { <link linkend="_classtable_1a5f565488cb975e14c0d50676b2ee0ff9">ipos</link> }</computeroutput></para></section>
<anchor xml:id="_classtable_1a93f2c5bdc6079be238e168fc144ec13a"/><section>
    <title>key</title>
<indexterm><primary>key</primary><secondary>table</secondary></indexterm>
<indexterm><primary>table</primary><secondary>key</secondary></indexterm>
<para><computeroutput>KeyType &amp;&amp; table::key</computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/<link linkend="_table_8h">table.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
