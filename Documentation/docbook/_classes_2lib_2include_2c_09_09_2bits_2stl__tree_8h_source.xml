<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__tree_8h_source" xml:lang="en-US">
<title>stl_tree.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_tree.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;RB&#32;tree&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
28 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
40 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*</emphasis>
50 <emphasis role="comment">&#32;*</emphasis>
51 <emphasis role="comment">&#32;*/</emphasis>
52 
58 <emphasis role="preprocessor">#ifndef&#32;_STL_TREE_H</emphasis>
59 <emphasis role="preprocessor">#define&#32;_STL_TREE_H&#32;1</emphasis>
60 
61 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
62 
63 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;bits/allocator.h&gt;</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>
66 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>
67 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
68 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
69 <emphasis role="preprocessor">#&#32;include&#32;&lt;ext/aligned_buffer.h&gt;</emphasis>
70 <emphasis role="preprocessor">#endif</emphasis>
71 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
72 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/node_handle.h&gt;</emphasis>
73 <emphasis role="preprocessor">#endif</emphasis>
74 
75 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
76 {
77 _GLIBCXX_BEGIN_NAMESPACE_VERSION
78 
79 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
80 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_generic_associative_lookup&#32;201304L</emphasis>
81 <emphasis role="preprocessor">#endif</emphasis>
82 
83 &#32;&#32;<emphasis role="comment">//&#32;Red-black&#32;tree&#32;class,&#32;designed&#32;for&#32;use&#32;in&#32;implementing&#32;STL</emphasis>
84 &#32;&#32;<emphasis role="comment">//&#32;associative&#32;containers&#32;(set,&#32;multiset,&#32;map,&#32;and&#32;multimap).&#32;The</emphasis>
85 &#32;&#32;<emphasis role="comment">//&#32;insertion&#32;and&#32;deletion&#32;algorithms&#32;are&#32;based&#32;on&#32;those&#32;in&#32;Cormen,</emphasis>
86 &#32;&#32;<emphasis role="comment">//&#32;Leiserson,&#32;and&#32;Rivest,&#32;Introduction&#32;to&#32;Algorithms&#32;(MIT&#32;Press,</emphasis>
87 &#32;&#32;<emphasis role="comment">//&#32;1990),&#32;except&#32;that</emphasis>
88 &#32;&#32;<emphasis role="comment">//</emphasis>
89 &#32;&#32;<emphasis role="comment">//&#32;(1)&#32;the&#32;header&#32;cell&#32;is&#32;maintained&#32;with&#32;links&#32;not&#32;only&#32;to&#32;the&#32;root</emphasis>
90 &#32;&#32;<emphasis role="comment">//&#32;but&#32;also&#32;to&#32;the&#32;leftmost&#32;node&#32;of&#32;the&#32;tree,&#32;to&#32;enable&#32;constant</emphasis>
91 &#32;&#32;<emphasis role="comment">//&#32;time&#32;begin(),&#32;and&#32;to&#32;the&#32;rightmost&#32;node&#32;of&#32;the&#32;tree,&#32;to&#32;enable</emphasis>
92 &#32;&#32;<emphasis role="comment">//&#32;linear&#32;time&#32;performance&#32;when&#32;used&#32;with&#32;the&#32;generic&#32;set&#32;algorithms</emphasis>
93 &#32;&#32;<emphasis role="comment">//&#32;(set_union,&#32;etc.)</emphasis>
94 &#32;&#32;<emphasis role="comment">//</emphasis>
95 &#32;&#32;<emphasis role="comment">//&#32;(2)&#32;when&#32;a&#32;node&#32;being&#32;deleted&#32;has&#32;two&#32;children&#32;its&#32;successor&#32;node</emphasis>
96 &#32;&#32;<emphasis role="comment">//&#32;is&#32;relinked&#32;into&#32;its&#32;place,&#32;rather&#32;than&#32;copied,&#32;so&#32;that&#32;the&#32;only</emphasis>
97 &#32;&#32;<emphasis role="comment">//&#32;iterators&#32;invalidated&#32;are&#32;those&#32;referring&#32;to&#32;the&#32;deleted&#32;node.</emphasis>
98 
99 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_Rb_tree_color&#32;{&#32;_S_red&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;_S_black&#32;=&#32;<emphasis role="keyword">true</emphasis>&#32;};
100 
101 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_node_base
102 &#32;&#32;{
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_node_base*&#32;_Base_ptr;
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*&#32;_Const_Base_ptr;
105 
106 &#32;&#32;&#32;&#32;_Rb_tree_color&#32;&#32;_M_color;
107 &#32;&#32;&#32;&#32;_Base_ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_parent;
108 &#32;&#32;&#32;&#32;_Base_ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_left;
109 &#32;&#32;&#32;&#32;_Base_ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_right;
110 
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Base_ptr
112 &#32;&#32;&#32;&#32;_S_minimum(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
113 &#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x-&gt;_M_left&#32;!=&#32;0)&#32;__x&#32;=&#32;__x-&gt;_M_left;
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
116 &#32;&#32;&#32;&#32;}
117 
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Const_Base_ptr
119 &#32;&#32;&#32;&#32;_S_minimum(_Const_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
120 &#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x-&gt;_M_left&#32;!=&#32;0)&#32;__x&#32;=&#32;__x-&gt;_M_left;
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
123 &#32;&#32;&#32;&#32;}
124 
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Base_ptr
126 &#32;&#32;&#32;&#32;_S_maximum(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
127 &#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x-&gt;_M_right&#32;!=&#32;0)&#32;__x&#32;=&#32;__x-&gt;_M_right;
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
130 &#32;&#32;&#32;&#32;}
131 
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Const_Base_ptr
133 &#32;&#32;&#32;&#32;_S_maximum(_Const_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
134 &#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x-&gt;_M_right&#32;!=&#32;0)&#32;__x&#32;=&#32;__x-&gt;_M_right;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
137 &#32;&#32;&#32;&#32;}
138 &#32;&#32;};
139 
140 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;type&#32;offering&#32;value&#32;initialization&#32;guarantee&#32;on&#32;the&#32;compare&#32;functor.</emphasis>
141 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key_compare&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_key_compare
143 &#32;&#32;&#32;&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;_Key_compare&#32;&#32;&#32;&#32;&#32;&#32;_M_key_compare;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_key_compare()
147 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(
148 &#32;&#32;&#32;&#32;is_nothrow_default_constructible&lt;_Key_compare&gt;::value)
149 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_key_compare()
150 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
151 
152 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_key_compare(<emphasis role="keyword">const</emphasis>&#32;_Key_compare&amp;&#32;__comp)
153 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_key_compare(__comp)
154 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
155 
156 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;constructor&#32;added&#32;for&#32;consistency&#32;with&#32;C++98&#32;mode.</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_key_compare(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_key_compare&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_key_compare(_Rb_tree_key_compare&amp;&amp;&#32;__x)
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_constructible&lt;_Key_compare&gt;::value)
162 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_key_compare(__x._M_key_compare)
163 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
164 <emphasis role="preprocessor">#endif</emphasis>
165 &#32;&#32;&#32;&#32;};
166 
167 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;type&#32;to&#32;manage&#32;default&#32;initialization&#32;of&#32;node&#32;count&#32;and&#32;header.</emphasis>
168 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_header
169 &#32;&#32;{
170 &#32;&#32;&#32;&#32;_Rb_tree_node_base&#32;&#32;_M_header;
171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_node_count;&#32;<emphasis role="comment">//&#32;Keeps&#32;track&#32;of&#32;size&#32;of&#32;tree.</emphasis>
172 
173 &#32;&#32;&#32;&#32;_Rb_tree_header()&#32;_GLIBCXX_NOEXCEPT
174 &#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_color&#32;=&#32;_S_red;
176 &#32;&#32;&#32;&#32;&#32;&#32;_M_reset();
177 &#32;&#32;&#32;&#32;}
178 
179 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
180 &#32;&#32;&#32;&#32;_Rb_tree_header(_Rb_tree_header&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
181 &#32;&#32;&#32;&#32;{
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_header._M_parent&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
183 &#32;&#32;&#32;&#32;_M_move_data(__x);
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
185 &#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_color&#32;=&#32;_S_red;
187 &#32;&#32;&#32;&#32;&#32;&#32;_M_reset();
188 &#32;&#32;&#32;&#32;}
189 &#32;&#32;&#32;&#32;}
190 <emphasis role="preprocessor">#endif</emphasis>
191 
192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
193 &#32;&#32;&#32;&#32;_M_move_data(_Rb_tree_header&amp;&#32;__from)
194 &#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_color&#32;=&#32;__from._M_header._M_color;
196 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_parent&#32;=&#32;__from._M_header._M_parent;
197 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_left&#32;=&#32;__from._M_header._M_left;
198 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_right&#32;=&#32;__from._M_header._M_right;
199 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_parent-&gt;_M_parent&#32;=&#32;&amp;_M_header;
200 &#32;&#32;&#32;&#32;&#32;&#32;_M_node_count&#32;=&#32;__from._M_node_count;
201 
202 &#32;&#32;&#32;&#32;&#32;&#32;__from._M_reset();
203 &#32;&#32;&#32;&#32;}
204 
205 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
206 &#32;&#32;&#32;&#32;_M_reset()
207 &#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_parent&#32;=&#32;0;
209 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_left&#32;=&#32;&amp;_M_header;
210 &#32;&#32;&#32;&#32;&#32;&#32;_M_header._M_right&#32;=&#32;&amp;_M_header;
211 &#32;&#32;&#32;&#32;&#32;&#32;_M_node_count&#32;=&#32;0;
212 &#32;&#32;&#32;&#32;}
213 &#32;&#32;};
214 
215 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Val&gt;
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_node&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Rb_tree_node_base
217 &#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_node&lt;_Val&gt;*&#32;_Link_type;
219 
220 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
221 &#32;&#32;&#32;&#32;&#32;&#32;_Val&#32;_M_value_field;
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;_Val*
224 &#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()
225 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(_M_value_field);&#32;}
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Val*
228 &#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()<emphasis role="keyword">&#32;const</emphasis>
229 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(_M_value_field);&#32;}
230 <emphasis role="preprocessor">#else</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____aligned__membuf">__gnu_cxx::__aligned_membuf&lt;_Val&gt;</link>&#32;_M_storage;
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;_Val*
234 &#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()
235 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_storage.<link linkend="_struct____gnu__cxx_1_1____aligned__membuf_1a3434c6ec6478f76db116927a26c4fec9">_M_ptr</link>();&#32;}
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Val*
238 &#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()<emphasis role="keyword">&#32;const</emphasis>
239 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_storage.<link linkend="_struct____gnu__cxx_1_1____aligned__membuf_1a3434c6ec6478f76db116927a26c4fec9">_M_ptr</link>();&#32;}
240 <emphasis role="preprocessor">#endif</emphasis>
241 &#32;&#32;&#32;&#32;};
242 
243 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;_Rb_tree_node_base*
244 &#32;&#32;_Rb_tree_increment(_Rb_tree_node_base*&#32;__x)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
245 
246 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*
247 &#32;&#32;_Rb_tree_increment(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*&#32;__x)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
248 
249 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;_Rb_tree_node_base*
250 &#32;&#32;_Rb_tree_decrement(_Rb_tree_node_base*&#32;__x)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
251 
252 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*
253 &#32;&#32;_Rb_tree_decrement(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*&#32;__x)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
254 
255 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
256 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_iterator
257 &#32;&#32;&#32;&#32;{
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;value_type;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;reference;
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
261 
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;bidirectional_iterator_tag&#32;iterator_category;
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Self;
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_node_base::_Base_ptr&#32;_Base_ptr;
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_node&lt;_Tp&gt;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Link_type;
268 
269 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_iterator()&#32;_GLIBCXX_NOEXCEPT
270 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node()&#32;{&#32;}
271 
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
273 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_iterator(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
274 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__x)&#32;{&#32;}
275 
276 &#32;&#32;&#32;&#32;&#32;&#32;reference
277 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
278 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(_M_node)-&gt;_M_valptr();&#32;}
279 
280 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
281 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
282 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>&#32;(_M_node)-&gt;_M_valptr();&#32;}
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
285 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;_GLIBCXX_NOEXCEPT
286 &#32;&#32;&#32;&#32;&#32;&#32;{
287 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_increment(_M_node);
288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
289 &#32;&#32;&#32;&#32;&#32;&#32;}
290 
291 &#32;&#32;&#32;&#32;&#32;&#32;_Self
292 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
293 &#32;&#32;&#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
295 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_increment(_M_node);
296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
297 &#32;&#32;&#32;&#32;&#32;&#32;}
298 
299 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
300 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;_GLIBCXX_NOEXCEPT
301 &#32;&#32;&#32;&#32;&#32;&#32;{
302 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_decrement(_M_node);
303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
304 &#32;&#32;&#32;&#32;&#32;&#32;}
305 
306 &#32;&#32;&#32;&#32;&#32;&#32;_Self
307 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
308 &#32;&#32;&#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
310 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_decrement(_M_node);
311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
312 &#32;&#32;&#32;&#32;&#32;&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
316 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;==&#32;__y._M_node;&#32;}
317 
318 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_lib_three_way_comparison</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
320 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
321 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;!=&#32;__y._M_node;&#32;}
322 <emphasis role="preprocessor">#endif</emphasis>
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;_M_node;
325 &#32;&#32;&#32;&#32;};
326 
327 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
328 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_const_iterator
329 &#32;&#32;&#32;&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;value_type;
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;reference;
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
333 
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_iterator&lt;_Tp&gt;&#32;iterator;
335 
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;bidirectional_iterator_tag&#32;iterator_category;
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_const_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;_Self;
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_node_base::_Const_Base_ptr&#32;&#32;&#32;_Base_ptr;
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node&lt;_Tp&gt;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Link_type;
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_const_iterator()&#32;_GLIBCXX_NOEXCEPT
344 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node()&#32;{&#32;}
345 
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_const_iterator(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
348 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__x)&#32;{&#32;}
349 
350 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_const_iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__it)&#32;_GLIBCXX_NOEXCEPT
351 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__it._M_node)&#32;{&#32;}
352 
353 &#32;&#32;&#32;&#32;&#32;&#32;iterator
354 &#32;&#32;&#32;&#32;&#32;&#32;_M_const_cast()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
355 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<emphasis role="keyword">const_cast&lt;</emphasis>typename&#32;iterator::_Base_ptr<emphasis role="keyword">&gt;</emphasis>(_M_node));&#32;}
356 
357 &#32;&#32;&#32;&#32;&#32;&#32;reference
358 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
359 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(_M_node)-&gt;_M_valptr();&#32;}
360 
361 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
362 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
363 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(_M_node)-&gt;_M_valptr();&#32;}
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
366 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;_GLIBCXX_NOEXCEPT
367 &#32;&#32;&#32;&#32;&#32;&#32;{
368 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_increment(_M_node);
369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
370 &#32;&#32;&#32;&#32;&#32;&#32;}
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;_Self
373 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
374 &#32;&#32;&#32;&#32;&#32;&#32;{
375 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
376 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_increment(_M_node);
377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
378 &#32;&#32;&#32;&#32;&#32;&#32;}
379 
380 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
381 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;_GLIBCXX_NOEXCEPT
382 &#32;&#32;&#32;&#32;&#32;&#32;{
383 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_decrement(_M_node);
384 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
385 &#32;&#32;&#32;&#32;&#32;&#32;}
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;_Self
388 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
389 &#32;&#32;&#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
391 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_Rb_tree_decrement(_M_node);
392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
393 &#32;&#32;&#32;&#32;&#32;&#32;}
394 
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
396 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
397 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;==&#32;__y._M_node;&#32;}
398 
399 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_lib_three_way_comparison</emphasis>
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
401 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
402 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;!=&#32;__y._M_node;&#32;}
403 <emphasis role="preprocessor">#endif</emphasis>
404 
405 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;_M_node;
406 &#32;&#32;&#32;&#32;};
407 
408 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
409 &#32;&#32;_Rb_tree_insert_and_rebalance(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__insert_left,
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_node_base*&#32;__x,
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_node_base*&#32;__p,
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_node_base&amp;&#32;__header)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
413 
414 &#32;&#32;_Rb_tree_node_base*
415 &#32;&#32;_Rb_tree_rebalance_for_erase(_Rb_tree_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__z,
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_node_base&amp;&#32;__header)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
417 
418 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
419 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tree1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
420 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_merge_helper&#32;{&#32;};
421 <emphasis role="preprocessor">#endif</emphasis>
422 
423 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;allocator&lt;_Val&gt;&#32;&gt;
425 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Rb_tree
426 &#32;&#32;&#32;&#32;{
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
428 &#32;&#32;&#32;&#32;rebind&lt;_Rb_tree_node&lt;_Val&gt;&#32;&gt;::other&#32;_Node_allocator;
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Node_allocator&gt;&#32;_Alloc_traits;
431 
432 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_node_base*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr;
434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*&#32;&#32;&#32;&#32;&#32;_Const_Base_ptr;
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_node&lt;_Val&gt;*&#32;&#32;&#32;&#32;&#32;&#32;_Link_type;
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node&lt;_Val&gt;*&#32;&#32;&#32;&#32;_Const_Link_type;
437 
438 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Functor&#32;recycling&#32;a&#32;pool&#32;of&#32;nodes&#32;and&#32;using&#32;allocation&#32;once&#32;the&#32;pool</emphasis>
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;empty.</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reuse_or_alloc_node
442 &#32;&#32;&#32;&#32;&#32;&#32;{
443 &#32;&#32;&#32;&#32;_Reuse_or_alloc_node(_Rb_tree&amp;&#32;__t)
444 &#32;&#32;&#32;&#32;:&#32;_M_root(__t._M_root()),&#32;_M_nodes(__t._M_rightmost()),&#32;_M_t(__t)
445 &#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_root)
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_root-&gt;_M_parent&#32;=&#32;0;
449 
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_nodes-&gt;_M_left)
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_nodes&#32;=&#32;_M_nodes-&gt;_M_left;
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_nodes&#32;=&#32;0;
455 &#32;&#32;&#32;&#32;}
456 
457 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
458 &#32;&#32;&#32;&#32;_Reuse_or_alloc_node(<emphasis role="keyword">const</emphasis>&#32;_Reuse_or_alloc_node&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
459 <emphasis role="preprocessor">#endif</emphasis>
460 
461 &#32;&#32;&#32;&#32;~_Reuse_or_alloc_node()
462 &#32;&#32;&#32;&#32;{&#32;_M_t._M_erase(<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(_M_root));&#32;}
463 
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
465 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type
466 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a43f3ecc99dfd5c75082c20b2f611067d">_GLIBCXX_FWDREF</link>(_Arg)&#32;__arg)
467 &#32;&#32;&#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__node&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(_M_extract());
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__node)
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_destroy_node(__node);
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_construct_node(__node,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__arg));
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__node;
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
475 
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_create_node(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__arg));
477 &#32;&#32;&#32;&#32;&#32;&#32;}
478 
479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
480 &#32;&#32;&#32;&#32;_Base_ptr
481 &#32;&#32;&#32;&#32;_M_extract()
482 &#32;&#32;&#32;&#32;{
483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_nodes)
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_nodes;
485 
486 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;__node&#32;=&#32;_M_nodes;
487 &#32;&#32;&#32;&#32;&#32;&#32;_M_nodes&#32;=&#32;_M_nodes-&gt;_M_parent;
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_nodes)
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_nodes-&gt;_M_right&#32;==&#32;__node)
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_nodes-&gt;_M_right&#32;=&#32;0;
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_nodes-&gt;_M_left)
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_nodes&#32;=&#32;_M_nodes-&gt;_M_left;
497 
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(_M_nodes-&gt;_M_right)
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_nodes&#32;=&#32;_M_nodes-&gt;_M_right;
500 
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_nodes-&gt;_M_left)
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_nodes&#32;=&#32;_M_nodes-&gt;_M_left;
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;__node&#32;is&#32;on&#32;the&#32;left.</emphasis>
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_nodes-&gt;_M_left&#32;=&#32;0;
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_root&#32;=&#32;0;
510 
511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__node;
512 &#32;&#32;&#32;&#32;}
513 
514 &#32;&#32;&#32;&#32;_Base_ptr&#32;_M_root;
515 &#32;&#32;&#32;&#32;_Base_ptr&#32;_M_nodes;
516 &#32;&#32;&#32;&#32;_Rb_tree&amp;&#32;_M_t;
517 &#32;&#32;&#32;&#32;&#32;&#32;};
518 
519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Functor&#32;similar&#32;to&#32;the&#32;previous&#32;one&#32;but&#32;without&#32;any&#32;pool&#32;of&#32;nodes&#32;to</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recycle.</emphasis>
521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Alloc_node
522 &#32;&#32;&#32;&#32;&#32;&#32;{
523 &#32;&#32;&#32;&#32;_Alloc_node(_Rb_tree&amp;&#32;__t)
524 &#32;&#32;&#32;&#32;:&#32;_M_t(__t)&#32;{&#32;}
525 
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
527 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type
528 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a43f3ecc99dfd5c75082c20b2f611067d">_GLIBCXX_FWDREF</link>(_Arg)&#32;__arg)<emphasis role="keyword">&#32;const</emphasis>
529 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_create_node(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__arg));&#32;}
530 
531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
532 &#32;&#32;&#32;&#32;_Rb_tree&amp;&#32;_M_t;
533 &#32;&#32;&#32;&#32;&#32;&#32;};
534 
535 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_type;
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Val&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
545 
546 &#32;&#32;&#32;&#32;&#32;&#32;_Node_allocator&amp;
547 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Node_allocator()&#32;_GLIBCXX_NOEXCEPT
548 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
549 
550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node_allocator&amp;
551 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Node_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
552 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
553 
554 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
555 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
556 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_get_Node_allocator());&#32;}
557 
558 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
559 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type
560 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_node()
561 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Alloc_traits::allocate(_M_get_Node_allocator(),&#32;1);&#32;}
562 
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
564 &#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(_Link_type&#32;__p)&#32;_GLIBCXX_NOEXCEPT
565 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Alloc_traits::deallocate(_M_get_Node_allocator(),&#32;__p,&#32;1);&#32;}
566 
567 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct_node(_Link_type&#32;__node,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
570 &#32;&#32;&#32;&#32;&#32;&#32;{
571 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
572 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;get_allocator().construct(__node-&gt;_M_valptr(),&#32;__x);&#32;}
573 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
574 &#32;&#32;&#32;&#32;&#32;&#32;{
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(__node);
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
577 &#32;&#32;&#32;&#32;&#32;&#32;}
578 &#32;&#32;&#32;&#32;&#32;&#32;}
579 
580 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type
581 &#32;&#32;&#32;&#32;&#32;&#32;_M_create_node(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
582 &#32;&#32;&#32;&#32;&#32;&#32;{
583 &#32;&#32;&#32;&#32;_Link_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_get_node();
584 &#32;&#32;&#32;&#32;_M_construct_node(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__x);
585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
586 &#32;&#32;&#32;&#32;&#32;&#32;}
587 <emphasis role="preprocessor">#else</emphasis>
588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
589 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
590 &#32;&#32;&#32;&#32;_M_construct_node(_Link_type&#32;__node,&#32;_Args&amp;&amp;...&#32;__args)
591 &#32;&#32;&#32;&#32;{
592 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new(__node)&#32;_Rb_tree_node&lt;_Val&gt;;
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::construct(_M_get_Node_allocator(),
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node-&gt;_M_valptr(),
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
599 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node-&gt;~_Rb_tree_node&lt;_Val&gt;();
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(__node);
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
605 &#32;&#32;&#32;&#32;}
606 
607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
608 &#32;&#32;&#32;&#32;_Link_type
609 &#32;&#32;&#32;&#32;_M_create_node(_Args&amp;&amp;...&#32;__args)
610 &#32;&#32;&#32;&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_get_node();
612 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct_node(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;std::forward&lt;_Args&gt;(__args)...);
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
614 &#32;&#32;&#32;&#32;}
615 <emphasis role="preprocessor">#endif</emphasis>
616 
617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy_node(_Link_type&#32;__p)&#32;_GLIBCXX_NOEXCEPT
619 &#32;&#32;&#32;&#32;&#32;&#32;{
620 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
621 &#32;&#32;&#32;&#32;get_allocator().destroy(__p-&gt;_M_valptr());
622 <emphasis role="preprocessor">#else</emphasis>
623 &#32;&#32;&#32;&#32;_Alloc_traits::destroy(_M_get_Node_allocator(),&#32;__p-&gt;_M_valptr());
624 &#32;&#32;&#32;&#32;__p-&gt;~_Rb_tree_node&lt;_Val&gt;();
625 <emphasis role="preprocessor">#endif</emphasis>
626 &#32;&#32;&#32;&#32;&#32;&#32;}
627 
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;_M_drop_node(_Link_type&#32;__p)&#32;_GLIBCXX_NOEXCEPT
630 &#32;&#32;&#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;_M_destroy_node(__p);
632 &#32;&#32;&#32;&#32;_M_put_node(__p);
633 &#32;&#32;&#32;&#32;&#32;&#32;}
634 
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_MoveValue,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
636 &#32;&#32;&#32;&#32;_Link_type
637 &#32;&#32;&#32;&#32;_M_clone_node(_Link_type&#32;__x,&#32;_NodeGen&amp;&#32;__node_gen)
638 &#32;&#32;&#32;&#32;{
639 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vp&#32;=&#32;__conditional_t&lt;_MoveValue,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&amp;,
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&gt;;
643 <emphasis role="preprocessor">#endif</emphasis>
644 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__node_gen(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Vp,&#32;*__x-&gt;_M_valptr()));
646 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_color&#32;=&#32;__x-&gt;_M_color;
647 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_left&#32;=&#32;0;
648 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_right&#32;=&#32;0;
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
650 &#32;&#32;&#32;&#32;}
651 
652 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
653 <emphasis role="preprocessor">#if&#32;_GLIBCXX_INLINE_VERSION</emphasis>
654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key_compare&gt;
655 <emphasis role="preprocessor">#else</emphasis>
656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unused&#32;_Is_pod_comparator&#32;is&#32;kept&#32;as&#32;it&#32;is&#32;part&#32;of&#32;mangled&#32;name.</emphasis>
657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key_compare,
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<emphasis role="comment">/*&#32;_Is_pod_comparator&#32;*/</emphasis>&#32;=&#32;__is_pod(_Key_compare)&gt;
659 <emphasis role="preprocessor">#endif</emphasis>
660 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_impl
661 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Node_allocator
662 &#32;&#32;&#32;&#32;,&#32;<emphasis role="keyword">public</emphasis>&#32;_Rb_tree_key_compare&lt;_Key_compare&gt;
663 &#32;&#32;&#32;&#32;,&#32;<emphasis role="keyword">public</emphasis>&#32;_Rb_tree_header
664 &#32;&#32;&#32;&#32;{
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_key_compare&lt;_Key_compare&gt;&#32;_Base_key_compare;
666 
667 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl()
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_default_constructible&lt;_Node_allocator&gt;::value
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_default_constructible&lt;_Base_key_compare&gt;::value&#32;)
671 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_allocator()
672 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
673 
674 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_impl&amp;&#32;__x)
675 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
676 &#32;&#32;&#32;&#32;&#32;&#32;,&#32;_Base_key_compare(__x._M_key_compare)
677 &#32;&#32;&#32;&#32;&#32;&#32;,&#32;_Rb_tree_header()
678 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
679 
680 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
681 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl(<emphasis role="keyword">const</emphasis>&#32;_Key_compare&amp;&#32;__comp,&#32;<emphasis role="keyword">const</emphasis>&#32;_Node_allocator&amp;&#32;__a)
682 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_allocator(__a),&#32;_Base_key_compare(__comp)
683 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
684 <emphasis role="preprocessor">#else</emphasis>
685 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl(_Rb_tree_impl&amp;&amp;)
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;is_nothrow_move_constructible&lt;_Base_key_compare&gt;::value&#32;)
687 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
688 
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
690 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl(_Node_allocator&amp;&amp;&#32;__a)
691 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_allocator(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
692 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
693 
694 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl(_Rb_tree_impl&amp;&amp;&#32;__x,&#32;_Node_allocator&amp;&amp;&#32;__a)
695 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_allocator(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base_key_compare(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x)),
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_header(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x))
698 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
699 
700 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl(<emphasis role="keyword">const</emphasis>&#32;_Key_compare&amp;&#32;__comp,&#32;_Node_allocator&amp;&amp;&#32;__a)
701 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_allocator(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),&#32;_Base_key_compare(__comp)
702 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
703 <emphasis role="preprocessor">#endif</emphasis>
704 &#32;&#32;&#32;&#32;};
705 
706 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_impl&lt;_Compare&gt;&#32;_M_impl;
707 
708 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
709 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&amp;
710 &#32;&#32;&#32;&#32;&#32;&#32;_M_root()&#32;_GLIBCXX_NOEXCEPT
711 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_header._M_parent;&#32;}
712 
713 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Base_ptr
714 &#32;&#32;&#32;&#32;&#32;&#32;_M_root()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
715 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_header._M_parent;&#32;}
716 
717 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&amp;
718 &#32;&#32;&#32;&#32;&#32;&#32;_M_leftmost()&#32;_GLIBCXX_NOEXCEPT
719 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_header._M_left;&#32;}
720 
721 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Base_ptr
722 &#32;&#32;&#32;&#32;&#32;&#32;_M_leftmost()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
723 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_header._M_left;&#32;}
724 
725 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&amp;
726 &#32;&#32;&#32;&#32;&#32;&#32;_M_rightmost()&#32;_GLIBCXX_NOEXCEPT
727 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_header._M_right;&#32;}
728 
729 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Base_ptr
730 &#32;&#32;&#32;&#32;&#32;&#32;_M_rightmost()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
731 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_header._M_right;&#32;}
732 
733 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type
734 &#32;&#32;&#32;&#32;&#32;&#32;_M_mbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
735 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_impl._M_header._M_parent);&#32;}
736 
737 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type
738 &#32;&#32;&#32;&#32;&#32;&#32;_M_begin()&#32;_GLIBCXX_NOEXCEPT
739 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_mbegin();&#32;}
740 
741 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Link_type
742 &#32;&#32;&#32;&#32;&#32;&#32;_M_begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
743 &#32;&#32;&#32;&#32;&#32;&#32;{
744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Const_Link_type<emphasis role="keyword">&gt;</emphasis>
745 &#32;&#32;&#32;&#32;&#32;&#32;(this-&gt;_M_impl._M_header._M_parent);
746 &#32;&#32;&#32;&#32;&#32;&#32;}
747 
748 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr
749 &#32;&#32;&#32;&#32;&#32;&#32;_M_end()&#32;_GLIBCXX_NOEXCEPT
750 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;this-&gt;_M_impl._M_header;&#32;}
751 
752 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Base_ptr
753 &#32;&#32;&#32;&#32;&#32;&#32;_M_end()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
754 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;this-&gt;_M_impl._M_header;&#32;}
755 
756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;
757 &#32;&#32;&#32;&#32;&#32;&#32;_S_key(_Const_Link_type&#32;__x)
758 &#32;&#32;&#32;&#32;&#32;&#32;{
759 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
760 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&apos;re&#32;asking&#32;for&#32;the&#32;key&#32;we&apos;re&#32;presumably&#32;using&#32;the&#32;comparison</emphasis>
761 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object,&#32;and&#32;so&#32;this&#32;is&#32;a&#32;good&#32;place&#32;to&#32;sanity&#32;check&#32;it.</emphasis>
762 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_invocable&lt;_Compare&amp;,&#32;const&#32;_Key&amp;,&#32;const&#32;_Key&amp;&gt;{},
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;comparison&#32;object&#32;must&#32;be&#32;invocable&#32;&quot;</emphasis>
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;with&#32;two&#32;arguments&#32;of&#32;key&#32;type&quot;</emphasis>);
765 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
766 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
767 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2542.&#32;Missing&#32;const&#32;requirements&#32;for&#32;associative&#32;containers</emphasis>
768 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_invocable&lt;_Compare&amp;,&#32;const&#32;_Key&amp;,&#32;const&#32;_Key&amp;&gt;{})
769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_invocable_v&lt;const&#32;_Compare&amp;,&#32;const&#32;_Key&amp;,&#32;const&#32;_Key&amp;&gt;,
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;comparison&#32;object&#32;must&#32;be&#32;invocable&#32;as&#32;const&quot;</emphasis>);
772 <emphasis role="preprocessor">#&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
773 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
774 
775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_KeyOfValue()(*__x-&gt;_M_valptr());
776 &#32;&#32;&#32;&#32;&#32;&#32;}
777 
778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Link_type
779 &#32;&#32;&#32;&#32;&#32;&#32;_S_left(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
780 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(__x-&gt;_M_left);&#32;}
781 
782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Const_Link_type
783 &#32;&#32;&#32;&#32;&#32;&#32;_S_left(_Const_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
784 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Const_Link_type<emphasis role="keyword">&gt;</emphasis>(__x-&gt;_M_left);&#32;}
785 
786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Link_type
787 &#32;&#32;&#32;&#32;&#32;&#32;_S_right(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
788 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(__x-&gt;_M_right);&#32;}
789 
790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Const_Link_type
791 &#32;&#32;&#32;&#32;&#32;&#32;_S_right(_Const_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
792 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Const_Link_type<emphasis role="keyword">&gt;</emphasis>(__x-&gt;_M_right);&#32;}
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;
795 &#32;&#32;&#32;&#32;&#32;&#32;_S_key(_Const_Base_ptr&#32;__x)
796 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_key(<emphasis role="keyword">static_cast&lt;</emphasis>_Const_Link_type<emphasis role="keyword">&gt;</emphasis>(__x));&#32;}
797 
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Base_ptr
799 &#32;&#32;&#32;&#32;&#32;&#32;_S_minimum(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
800 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Rb_tree_node_base::_S_minimum(__x);&#32;}
801 
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Const_Base_ptr
803 &#32;&#32;&#32;&#32;&#32;&#32;_S_minimum(_Const_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
804 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Rb_tree_node_base::_S_minimum(__x);&#32;}
805 
806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Base_ptr
807 &#32;&#32;&#32;&#32;&#32;&#32;_S_maximum(_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
808 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Rb_tree_node_base::_S_maximum(__x);&#32;}
809 
810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Const_Base_ptr
811 &#32;&#32;&#32;&#32;&#32;&#32;_S_maximum(_Const_Base_ptr&#32;__x)&#32;_GLIBCXX_NOEXCEPT
812 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Rb_tree_node_base::_S_maximum(__x);&#32;}
813 
814 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_iterator&lt;value_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree_const_iterator&lt;value_type&gt;&#32;const_iterator;
817 
818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
820 
821 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;_Node_handle&lt;_Key,&#32;_Val,&#32;_Node_allocator&gt;;
823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>insert_return_type&#32;=&#32;_Node_insert_return&lt;
824 &#32;&#32;&#32;&#32;__conditional_t&lt;is_same_v&lt;_Key,&#32;_Val&gt;,&#32;const_iterator,&#32;iterator&gt;,
825 &#32;&#32;&#32;&#32;node_type&gt;;
826 <emphasis role="preprocessor">#endif</emphasis>
827 
828 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;
829 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_insert_unique_pos(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k);
830 
831 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;
832 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_insert_equal_pos(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k);
833 
834 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;
835 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_insert_hint_unique_pos(const_iterator&#32;__pos,
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k);
837 
838 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;
839 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_insert_hint_equal_pos(const_iterator&#32;__pos,
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k);
841 
842 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
843 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
845 &#32;&#32;&#32;&#32;iterator
846 &#32;&#32;&#32;&#32;_M_insert_(_Base_ptr&#32;__x,&#32;_Base_ptr&#32;__y,&#32;_Arg&amp;&amp;&#32;__v,&#32;_NodeGen&amp;);
847 
848 &#32;&#32;&#32;&#32;&#32;&#32;iterator
849 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_node(_Base_ptr&#32;__x,&#32;_Base_ptr&#32;__y,&#32;_Link_type&#32;__z);
850 
851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
852 &#32;&#32;&#32;&#32;iterator
853 &#32;&#32;&#32;&#32;_M_insert_lower(_Base_ptr&#32;__y,&#32;_Arg&amp;&amp;&#32;__v);
854 
855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
856 &#32;&#32;&#32;&#32;iterator
857 &#32;&#32;&#32;&#32;_M_insert_equal_lower(_Arg&amp;&amp;&#32;__x);
858 
859 &#32;&#32;&#32;&#32;&#32;&#32;iterator
860 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_lower_node(_Base_ptr&#32;__p,&#32;_Link_type&#32;__z);
861 
862 &#32;&#32;&#32;&#32;&#32;&#32;iterator
863 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal_lower_node(_Link_type&#32;__z);
864 <emphasis role="preprocessor">#else</emphasis>
865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
866 &#32;&#32;&#32;&#32;iterator
867 &#32;&#32;&#32;&#32;_M_insert_(_Base_ptr&#32;__x,&#32;_Base_ptr&#32;__y,
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__v,&#32;_NodeGen&amp;);
869 
870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;233.&#32;Insertion&#32;hints&#32;in&#32;associative&#32;containers.</emphasis>
872 &#32;&#32;&#32;&#32;&#32;&#32;iterator
873 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_lower(_Base_ptr&#32;__y,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__v);
874 
875 &#32;&#32;&#32;&#32;&#32;&#32;iterator
876 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal_lower(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
877 <emphasis role="preprocessor">#endif</emphasis>
878 
879 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__as_lvalue,&#32;__as_rvalue&#32;};
880 
881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_MoveValues,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
882 &#32;&#32;&#32;&#32;_Link_type
883 &#32;&#32;&#32;&#32;_M_copy(_Link_type,&#32;_Base_ptr,&#32;_NodeGen&amp;);
884 
885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_MoveValues,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
886 &#32;&#32;&#32;&#32;_Link_type
887 &#32;&#32;&#32;&#32;_M_copy(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x,&#32;_NodeGen&amp;&#32;__gen)
888 &#32;&#32;&#32;&#32;{
889 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__root&#32;=
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy&lt;_MoveValues&gt;(__x._M_mbegin(),&#32;_M_end(),&#32;__gen);
891 &#32;&#32;&#32;&#32;&#32;&#32;_M_leftmost()&#32;=&#32;_S_minimum(__root);
892 &#32;&#32;&#32;&#32;&#32;&#32;_M_rightmost()&#32;=&#32;_S_maximum(__root);
893 &#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_node_count&#32;=&#32;__x._M_impl._M_node_count;
894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__root;
895 &#32;&#32;&#32;&#32;}
896 
897 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type
898 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x)
899 &#32;&#32;&#32;&#32;&#32;&#32;{
900 &#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_copy&lt;__as_lvalue&gt;(__x,&#32;__an);
902 &#32;&#32;&#32;&#32;&#32;&#32;}
903 
904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
905 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(_Link_type&#32;__x);
906 
907 &#32;&#32;&#32;&#32;&#32;&#32;iterator
908 &#32;&#32;&#32;&#32;&#32;&#32;_M_lower_bound(_Link_type&#32;__x,&#32;_Base_ptr&#32;__y,
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k);
910 
911 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
912 &#32;&#32;&#32;&#32;&#32;&#32;_M_lower_bound(_Const_Link_type&#32;__x,&#32;_Const_Base_ptr&#32;__y,
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>;
914 
915 &#32;&#32;&#32;&#32;&#32;&#32;iterator
916 &#32;&#32;&#32;&#32;&#32;&#32;_M_upper_bound(_Link_type&#32;__x,&#32;_Base_ptr&#32;__y,
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k);
918 
919 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
920 &#32;&#32;&#32;&#32;&#32;&#32;_M_upper_bound(_Const_Link_type&#32;__x,&#32;_Const_Base_ptr&#32;__y,
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>;
922 
923 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allocation/deallocation</emphasis>
925 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
926 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree()&#32;{&#32;}
927 <emphasis role="preprocessor">#else</emphasis>
928 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
929 <emphasis role="preprocessor">#endif</emphasis>
930 
931 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
933 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__comp,&#32;_Node_allocator(__a))&#32;{&#32;}
934 
935 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x)
936 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__x._M_impl)
937 &#32;&#32;&#32;&#32;&#32;&#32;{
938 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_root()&#32;!=&#32;0)
939 &#32;&#32;&#32;&#32;&#32;&#32;_M_root()&#32;=&#32;_M_copy(__x);
940 &#32;&#32;&#32;&#32;&#32;&#32;}
941 
942 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
943 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
944 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(_Node_allocator(__a))
945 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
946 
947 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
948 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__x._M_impl._M_key_compare,&#32;_Node_allocator(__a))
949 &#32;&#32;&#32;&#32;&#32;&#32;{
950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_root()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
951 &#32;&#32;&#32;&#32;&#32;&#32;_M_root()&#32;=&#32;_M_copy(__x);
952 &#32;&#32;&#32;&#32;&#32;&#32;}
953 
954 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(_Rb_tree&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
955 
956 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(_Rb_tree&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
957 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Rb_tree(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;_Node_allocator(__a))
958 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
959 
960 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
961 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(_Rb_tree&amp;&amp;&#32;__x,&#32;_Node_allocator&amp;&amp;&#32;__a,&#32;true_type)
962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_default_constructible&lt;_Compare&gt;::value)
963 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
964 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
965 
966 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(_Rb_tree&amp;&amp;&#32;__x,&#32;_Node_allocator&amp;&amp;&#32;__a,&#32;false_type)
967 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__x._M_impl._M_key_compare,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
968 &#32;&#32;&#32;&#32;&#32;&#32;{
969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_root()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
970 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_data(__x,&#32;false_type{});
971 &#32;&#32;&#32;&#32;&#32;&#32;}
972 
973 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
974 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree(_Rb_tree&amp;&amp;&#32;__x,&#32;_Node_allocator&amp;&amp;&#32;__a)
975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(
976 &#32;&#32;&#32;&#32;_Rb_tree(std::declval&lt;_Rb_tree&amp;&amp;&gt;(),&#32;std::declval&lt;_Node_allocator&amp;&amp;&gt;(),
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;typename&#32;_Alloc_traits::is_always_equal&gt;()))&#32;)
978 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Rb_tree(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a),
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::is_always_equal{})
980 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
981 <emphasis role="preprocessor">#endif</emphasis>
982 
983 &#32;&#32;&#32;&#32;&#32;&#32;~_Rb_tree()&#32;_GLIBCXX_NOEXCEPT
984 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_erase(_M_begin());&#32;}
985 
986 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&amp;
987 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x);
988 
989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Accessors.</emphasis>
990 &#32;&#32;&#32;&#32;&#32;&#32;_Compare
991 &#32;&#32;&#32;&#32;&#32;&#32;key_comp()<emphasis role="keyword">&#32;const</emphasis>
992 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl._M_key_compare;&#32;}
993 
994 &#32;&#32;&#32;&#32;&#32;&#32;iterator
995 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
996 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_impl._M_header._M_left);&#32;}
997 
998 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
999 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1000 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_header._M_left);&#32;}
1001 
1002 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1003 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
1004 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(&amp;this-&gt;_M_impl._M_header);&#32;}
1005 
1006 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1007 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1008 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(&amp;this-&gt;_M_impl._M_header);&#32;}
1009 
1010 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
1011 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
1012 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
1013 
1014 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1015 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1016 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
1017 
1018 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
1019 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
1020 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(begin());&#32;}
1021 
1022 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1023 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1024 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
1025 
1026 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
1027 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1028 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl._M_node_count&#32;==&#32;0;&#32;}
1029 
1030 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1031 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1032 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl._M_node_count;&#32;}
1033 
1034 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1035 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1036 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Alloc_traits::max_size(_M_get_Node_allocator());&#32;}
1037 
1038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1039 &#32;&#32;&#32;&#32;&#32;&#32;swap(_Rb_tree&amp;&#32;__t)
1040 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable&lt;_Compare&gt;::value);
1041 
1042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Insert/erase.</emphasis>
1043 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1045 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
1046 &#32;&#32;&#32;&#32;_M_insert_unique(_Arg&amp;&amp;&#32;__x);
1047 
1048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1049 &#32;&#32;&#32;&#32;iterator
1050 &#32;&#32;&#32;&#32;_M_insert_equal(_Arg&amp;&amp;&#32;__x);
1051 
1052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
1053 &#32;&#32;&#32;&#32;iterator
1054 &#32;&#32;&#32;&#32;_M_insert_unique_(const_iterator&#32;__pos,&#32;_Arg&amp;&amp;&#32;__x,&#32;_NodeGen&amp;);
1055 
1056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1057 &#32;&#32;&#32;&#32;iterator
1058 &#32;&#32;&#32;&#32;_M_insert_unique_(const_iterator&#32;__pos,&#32;_Arg&amp;&amp;&#32;__x)
1059 &#32;&#32;&#32;&#32;{
1060 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_unique_(__pos,&#32;std::forward&lt;_Arg&gt;(__x),&#32;__an);
1062 &#32;&#32;&#32;&#32;}
1063 
1064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
1065 &#32;&#32;&#32;&#32;iterator
1066 &#32;&#32;&#32;&#32;_M_insert_equal_(const_iterator&#32;__pos,&#32;_Arg&amp;&amp;&#32;__x,&#32;_NodeGen&amp;);
1067 
1068 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1069 &#32;&#32;&#32;&#32;iterator
1070 &#32;&#32;&#32;&#32;_M_insert_equal_(const_iterator&#32;__pos,&#32;_Arg&amp;&amp;&#32;__x)
1071 &#32;&#32;&#32;&#32;{
1072 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_equal_(__pos,&#32;std::forward&lt;_Arg&gt;(__x),&#32;__an);
1074 &#32;&#32;&#32;&#32;}
1075 
1076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1077 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
1078 &#32;&#32;&#32;&#32;_M_emplace_unique(_Args&amp;&amp;...&#32;__args);
1079 
1080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1081 &#32;&#32;&#32;&#32;iterator
1082 &#32;&#32;&#32;&#32;_M_emplace_equal(_Args&amp;&amp;...&#32;__args);
1083 
1084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1085 &#32;&#32;&#32;&#32;iterator
1086 &#32;&#32;&#32;&#32;_M_emplace_hint_unique(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args);
1087 
1088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1089 &#32;&#32;&#32;&#32;iterator
1090 &#32;&#32;&#32;&#32;_M_emplace_hint_equal(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args);
1091 
1092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
1093 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__same_value_type
1094 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_same&lt;value_type,&#32;typename&#32;iterator_traits&lt;_Iter&gt;::value_type&gt;;
1095 
1096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1097 &#32;&#32;&#32;&#32;__enable_if_t&lt;__same_value_type&lt;_InputIterator&gt;::value&gt;
1098 &#32;&#32;&#32;&#32;_M_insert_range_unique(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1099 &#32;&#32;&#32;&#32;{
1100 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert_unique_(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;*__first,&#32;__an);
1103 &#32;&#32;&#32;&#32;}
1104 
1105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1106 &#32;&#32;&#32;&#32;__enable_if_t&lt;!__same_value_type&lt;_InputIterator&gt;::value&gt;
1107 &#32;&#32;&#32;&#32;_M_insert_range_unique(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1108 &#32;&#32;&#32;&#32;{
1109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_emplace_unique(*__first);
1111 &#32;&#32;&#32;&#32;}
1112 
1113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1114 &#32;&#32;&#32;&#32;__enable_if_t&lt;__same_value_type&lt;_InputIterator&gt;::value&gt;
1115 &#32;&#32;&#32;&#32;_M_insert_range_equal(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1116 &#32;&#32;&#32;&#32;{
1117 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal_(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;*__first,&#32;__an);
1120 &#32;&#32;&#32;&#32;}
1121 
1122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1123 &#32;&#32;&#32;&#32;__enable_if_t&lt;!__same_value_type&lt;_InputIterator&gt;::value&gt;
1124 &#32;&#32;&#32;&#32;_M_insert_range_equal(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1125 &#32;&#32;&#32;&#32;{
1126 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_emplace_equal(*__first);
1129 &#32;&#32;&#32;&#32;}
1130 <emphasis role="preprocessor">#else</emphasis>
1131 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
1132 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_unique(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1133 
1134 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1135 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1136 
1137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
1138 &#32;&#32;&#32;&#32;iterator
1139 &#32;&#32;&#32;&#32;_M_insert_unique_(const_iterator&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x,
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_NodeGen&amp;);
1141 
1142 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1143 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_unique_(const_iterator&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1144 &#32;&#32;&#32;&#32;&#32;&#32;{
1145 &#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_unique_(__pos,&#32;__x,&#32;__an);
1147 &#32;&#32;&#32;&#32;&#32;&#32;}
1148 
1149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
1150 &#32;&#32;&#32;&#32;iterator
1151 &#32;&#32;&#32;&#32;_M_insert_equal_(const_iterator&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x,
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_NodeGen&amp;);
1153 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1154 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal_(const_iterator&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1155 &#32;&#32;&#32;&#32;&#32;&#32;{
1156 &#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_equal_(__pos,&#32;__x,&#32;__an);
1158 &#32;&#32;&#32;&#32;&#32;&#32;}
1159 
1160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1162 &#32;&#32;&#32;&#32;_M_insert_range_unique(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1163 &#32;&#32;&#32;&#32;{
1164 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert_unique_(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;*__first,&#32;__an);
1167 &#32;&#32;&#32;&#32;}
1168 
1169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1171 &#32;&#32;&#32;&#32;_M_insert_range_equal(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1172 &#32;&#32;&#32;&#32;{
1173 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal_(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;*__first,&#32;__an);
1176 &#32;&#32;&#32;&#32;}
1177 <emphasis role="preprocessor">#endif</emphasis>
1178 
1179 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1181 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_aux(const_iterator&#32;__position);
1182 
1183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1184 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_aux(const_iterator&#32;__first,&#32;const_iterator&#32;__last);
1185 
1186 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1187 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
1190 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
1191 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1192 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1193 &#32;&#32;&#32;&#32;&#32;&#32;{
1194 &#32;&#32;&#32;&#32;__glibcxx_assert(__position&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1195 &#32;&#32;&#32;&#32;const_iterator&#32;__result&#32;=&#32;__position;
1196 &#32;&#32;&#32;&#32;++__result;
1197 &#32;&#32;&#32;&#32;_M_erase_aux(__position);
1198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result._M_const_cast();
1199 &#32;&#32;&#32;&#32;&#32;&#32;}
1200 
1201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;2059.</emphasis>
1202 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
1203 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1204 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1205 &#32;&#32;&#32;&#32;&#32;&#32;{
1206 &#32;&#32;&#32;&#32;__glibcxx_assert(__position&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1207 &#32;&#32;&#32;&#32;iterator&#32;__result&#32;=&#32;__position;
1208 &#32;&#32;&#32;&#32;++__result;
1209 &#32;&#32;&#32;&#32;_M_erase_aux(__position);
1210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1211 &#32;&#32;&#32;&#32;&#32;&#32;}
1212 <emphasis role="preprocessor">#else</emphasis>
1213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1214 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1215 &#32;&#32;&#32;&#32;&#32;&#32;{
1216 &#32;&#32;&#32;&#32;__glibcxx_assert(__position&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1217 &#32;&#32;&#32;&#32;_M_erase_aux(__position);
1218 &#32;&#32;&#32;&#32;&#32;&#32;}
1219 
1220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1221 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1222 &#32;&#32;&#32;&#32;&#32;&#32;{
1223 &#32;&#32;&#32;&#32;__glibcxx_assert(__position&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1224 &#32;&#32;&#32;&#32;_M_erase_aux(__position);
1225 &#32;&#32;&#32;&#32;&#32;&#32;}
1226 <emphasis role="preprocessor">#endif</emphasis>
1227 
1228 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1229 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x);
1230 
1231 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
1234 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
1235 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1236 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1237 &#32;&#32;&#32;&#32;&#32;&#32;{
1238 &#32;&#32;&#32;&#32;_M_erase_aux(__first,&#32;__last);
1239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last._M_const_cast();
1240 &#32;&#32;&#32;&#32;&#32;&#32;}
1241 <emphasis role="preprocessor">#else</emphasis>
1242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1243 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
1244 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_erase_aux(__first,&#32;__last);&#32;}
1245 
1246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1247 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1248 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_erase_aux(__first,&#32;__last);&#32;}
1249 <emphasis role="preprocessor">#endif</emphasis>
1250 
1251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1252 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1253 &#32;&#32;&#32;&#32;&#32;&#32;{
1254 &#32;&#32;&#32;&#32;_M_erase(_M_begin());
1255 &#32;&#32;&#32;&#32;_M_impl._M_reset();
1256 &#32;&#32;&#32;&#32;&#32;&#32;}
1257 
1258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;operations.</emphasis>
1259 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1260 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k);
1261 
1262 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>;
1264 
1265 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1266 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>;
1267 
1268 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1269 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
1270 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_lower_bound(_M_begin(),&#32;_M_end(),&#32;__k);&#32;}
1271 
1272 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1273 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1274 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_lower_bound(_M_begin(),&#32;_M_end(),&#32;__k);&#32;}
1275 
1276 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1277 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
1278 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_upper_bound(_M_begin(),&#32;_M_end(),&#32;__k);&#32;}
1279 
1280 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1281 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1282 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_upper_bound(_M_begin(),&#32;_M_end(),&#32;__k);&#32;}
1283 
1284 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;iterator,&#32;iterator&gt;
1285 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k);
1286 
1287 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;const_iterator,&#32;const_iterator&gt;
1288 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>;
1289 
1290 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
1291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1293 &#32;&#32;&#32;&#32;iterator
1294 &#32;&#32;&#32;&#32;_M_find_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)
1295 &#32;&#32;&#32;&#32;{
1296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree*&#32;__const_this&#32;=&#32;<emphasis role="keyword">this</emphasis>;
1297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__const_this-&gt;_M_find_tr(__k)._M_const_cast();
1298 &#32;&#32;&#32;&#32;}
1299 
1300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1302 &#32;&#32;&#32;&#32;const_iterator
1303 &#32;&#32;&#32;&#32;_M_find_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1304 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__j&#32;=&#32;_M_lower_bound_tr(__k);
1306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__j&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;&amp;&amp;&#32;_M_impl._M_key_compare(__k,&#32;_S_key(__j._M_node)))
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__j&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__j;
1309 &#32;&#32;&#32;&#32;}
1310 
1311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1313 &#32;&#32;&#32;&#32;size_type
1314 &#32;&#32;&#32;&#32;_M_count_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1315 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__p&#32;=&#32;_M_equal_range_tr(__k);
1317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::distance(__p.first,&#32;__p.second);
1318 &#32;&#32;&#32;&#32;}
1319 
1320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1322 &#32;&#32;&#32;&#32;iterator
1323 &#32;&#32;&#32;&#32;_M_lower_bound_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)
1324 &#32;&#32;&#32;&#32;{
1325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree*&#32;__const_this&#32;=&#32;<emphasis role="keyword">this</emphasis>;
1326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__const_this-&gt;_M_lower_bound_tr(__k)._M_const_cast();
1327 &#32;&#32;&#32;&#32;}
1328 
1329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1331 &#32;&#32;&#32;&#32;const_iterator
1332 &#32;&#32;&#32;&#32;_M_lower_bound_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1333 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;_M_begin();
1335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;_M_end();
1336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_impl._M_key_compare(_S_key(__x),&#32;__k))
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x;
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_left(__x);
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
1344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(__y);
1345 &#32;&#32;&#32;&#32;}
1346 
1347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1349 &#32;&#32;&#32;&#32;iterator
1350 &#32;&#32;&#32;&#32;_M_upper_bound_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)
1351 &#32;&#32;&#32;&#32;{
1352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree*&#32;__const_this&#32;=&#32;<emphasis role="keyword">this</emphasis>;
1353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__const_this-&gt;_M_upper_bound_tr(__k)._M_const_cast();
1354 &#32;&#32;&#32;&#32;}
1355 
1356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1358 &#32;&#32;&#32;&#32;const_iterator
1359 &#32;&#32;&#32;&#32;_M_upper_bound_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1360 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;_M_begin();
1362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;_M_end();
1363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(__k,&#32;_S_key(__x)))
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x;
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_left(__x);
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
1371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(__y);
1372 &#32;&#32;&#32;&#32;}
1373 
1374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1376 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;iterator&gt;
1377 &#32;&#32;&#32;&#32;_M_equal_range_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)
1378 &#32;&#32;&#32;&#32;{
1379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree*&#32;__const_this&#32;=&#32;<emphasis role="keyword">this</emphasis>;
1380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;__const_this-&gt;_M_equal_range_tr(__k);
1381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;__ret.first._M_const_cast(),&#32;__ret.second._M_const_cast()&#32;};
1382 &#32;&#32;&#32;&#32;}
1383 
1384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;__has_is_transparent_t&lt;_Compare,&#32;_Kt&gt;&gt;
1386 &#32;&#32;&#32;&#32;pair&lt;const_iterator,&#32;const_iterator&gt;
1387 &#32;&#32;&#32;&#32;_M_equal_range_tr(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1388 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__low&#32;=&#32;_M_lower_bound_tr(__k);
1390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__high&#32;=&#32;__low;
1391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__cmp&#32;=&#32;_M_impl._M_key_compare;
1392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__high&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;&amp;&amp;&#32;!__cmp(__k,&#32;_S_key(__high._M_node)))
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__high;
1394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;__low,&#32;__high&#32;};
1395 &#32;&#32;&#32;&#32;}
1396 <emphasis role="preprocessor">#endif</emphasis>
1397 
1398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Debugging.</emphasis>
1399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1400 &#32;&#32;&#32;&#32;&#32;&#32;__rb_verify()&#32;<emphasis role="keyword">const</emphasis>;
1401 
1402 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1403 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&amp;
1404 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Rb_tree&amp;&amp;)
1405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Alloc_traits::_S_nothrow_move()
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_move_assignable&lt;_Compare&gt;::value);
1407 
1408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1409 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1410 &#32;&#32;&#32;&#32;_M_assign_unique(_Iterator,&#32;_Iterator);
1411 
1412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1413 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1414 &#32;&#32;&#32;&#32;_M_assign_equal(_Iterator,&#32;_Iterator);
1415 
1416 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;elements&#32;from&#32;container&#32;with&#32;equal&#32;allocator.</emphasis>
1418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1419 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_data(_Rb_tree&amp;&#32;__x,&#32;true_type)
1420 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl._M_move_data(__x._M_impl);&#32;}
1421 
1422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;elements&#32;from&#32;container&#32;with&#32;possibly&#32;non-equal&#32;allocator,</emphasis>
1423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;might&#32;result&#32;in&#32;a&#32;copy&#32;not&#32;a&#32;move.</emphasis>
1424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1425 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_data(_Rb_tree&amp;,&#32;false_type);
1426 
1427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;assignment&#32;from&#32;container&#32;with&#32;equal&#32;allocator.</emphasis>
1428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1429 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(_Rb_tree&amp;,&#32;true_type);
1430 
1431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;assignment&#32;from&#32;container&#32;with&#32;possibly&#32;non-equal&#32;allocator,</emphasis>
1432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;might&#32;result&#32;in&#32;a&#32;copy&#32;not&#32;a&#32;move.</emphasis>
1433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1434 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(_Rb_tree&amp;,&#32;false_type);
1435 <emphasis role="preprocessor">#endif</emphasis>
1436 
1437 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1438 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1440 &#32;&#32;&#32;&#32;&#32;&#32;insert_return_type
1441 &#32;&#32;&#32;&#32;&#32;&#32;_M_reinsert_node_unique(node_type&amp;&amp;&#32;__nh)
1442 &#32;&#32;&#32;&#32;&#32;&#32;{
1443 &#32;&#32;&#32;&#32;insert_return_type&#32;__ret;
1444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nh.empty())
1445 &#32;&#32;&#32;&#32;&#32;&#32;__ret.position&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1447 &#32;&#32;&#32;&#32;&#32;&#32;{
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_get_Node_allocator()&#32;==&#32;*__nh._M_alloc);
1449 
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_unique_pos(__nh._M_key());
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.position
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_M_insert_node(__res.first,&#32;__res.second,&#32;__nh._M_ptr);
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nh._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.inserted&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.node&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh);
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.position&#32;=&#32;iterator(__res.first);
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.inserted&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1464 &#32;&#32;&#32;&#32;&#32;&#32;}
1465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1466 &#32;&#32;&#32;&#32;&#32;&#32;}
1467 
1469 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1470 &#32;&#32;&#32;&#32;&#32;&#32;_M_reinsert_node_equal(node_type&amp;&amp;&#32;__nh)
1471 &#32;&#32;&#32;&#32;&#32;&#32;{
1472 &#32;&#32;&#32;&#32;iterator&#32;__ret;
1473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nh.empty())
1474 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1476 &#32;&#32;&#32;&#32;&#32;&#32;{
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_get_Node_allocator()&#32;==&#32;*__nh._M_alloc);
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_equal_pos(__nh._M_key());
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;_M_insert_node(__res.first,&#32;__res.second,&#32;__nh._M_ptr);
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;_M_insert_equal_lower_node(__nh._M_ptr);
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nh._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1484 &#32;&#32;&#32;&#32;&#32;&#32;}
1485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1486 &#32;&#32;&#32;&#32;&#32;&#32;}
1487 
1489 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1490 &#32;&#32;&#32;&#32;&#32;&#32;_M_reinsert_node_hint_unique(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
1491 &#32;&#32;&#32;&#32;&#32;&#32;{
1492 &#32;&#32;&#32;&#32;iterator&#32;__ret;
1493 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nh.empty())
1494 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1496 &#32;&#32;&#32;&#32;&#32;&#32;{
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_get_Node_allocator()&#32;==&#32;*__nh._M_alloc);
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_hint_unique_pos(__hint,&#32;__nh._M_key());
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;_M_insert_node(__res.first,&#32;__res.second,&#32;__nh._M_ptr);
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nh._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;iterator(__res.first);
1506 &#32;&#32;&#32;&#32;&#32;&#32;}
1507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1508 &#32;&#32;&#32;&#32;&#32;&#32;}
1509 
1511 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1512 &#32;&#32;&#32;&#32;&#32;&#32;_M_reinsert_node_hint_equal(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
1513 &#32;&#32;&#32;&#32;&#32;&#32;{
1514 &#32;&#32;&#32;&#32;iterator&#32;__ret;
1515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nh.empty())
1516 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1517 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1518 &#32;&#32;&#32;&#32;&#32;&#32;{
1519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_get_Node_allocator()&#32;==&#32;*__nh._M_alloc);
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_hint_equal_pos(__hint,&#32;__nh._M_key());
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
1522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;_M_insert_node(__res.first,&#32;__res.second,&#32;__nh._M_ptr);
1523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;_M_insert_equal_lower_node(__nh._M_ptr);
1525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nh._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1526 &#32;&#32;&#32;&#32;&#32;&#32;}
1527 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1528 &#32;&#32;&#32;&#32;&#32;&#32;}
1529 
1531 &#32;&#32;&#32;&#32;&#32;&#32;node_type
1532 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
1533 &#32;&#32;&#32;&#32;&#32;&#32;{
1534 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;_Rb_tree_rebalance_for_erase(
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pos._M_const_cast()._M_node,&#32;_M_impl._M_header);
1536 &#32;&#32;&#32;&#32;--_M_impl._M_node_count;
1537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(__ptr),&#32;_M_get_Node_allocator()&#32;};
1538 &#32;&#32;&#32;&#32;&#32;&#32;}
1539 
1541 &#32;&#32;&#32;&#32;&#32;&#32;node_type
1542 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
1543 &#32;&#32;&#32;&#32;&#32;&#32;{
1544 &#32;&#32;&#32;&#32;node_type&#32;__nh;
1545 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pos&#32;=&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__k);
1546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
1547 &#32;&#32;&#32;&#32;&#32;&#32;__nh&#32;=&#32;extract(const_iterator(__pos));
1548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__nh;
1549 &#32;&#32;&#32;&#32;&#32;&#32;}
1550 
1551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare2&gt;
1552 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Compatible_tree
1553 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare2,&#32;_Alloc&gt;;
1554 
1555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1556 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Rb_tree_merge_helper;
1557 
1559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare2&gt;
1560 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1561 &#32;&#32;&#32;&#32;_M_merge_unique(_Compatible_tree&lt;_Compare2&gt;&amp;&#32;__src)&#32;<emphasis role="keyword">noexcept</emphasis>
1562 &#32;&#32;&#32;&#32;{
1563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;_Rb_tree,&#32;_Compare2&gt;;
1564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__src.begin(),&#32;__end&#32;=&#32;__src.end();&#32;__i&#32;!=&#32;__end;)
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pos&#32;=&#32;__i++;
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_unique_pos(_KeyOfValue()(*__pos));
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__src_impl&#32;=&#32;_Merge_helper::_S_get_impl(__src);
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;_Rb_tree_rebalance_for_erase(
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pos._M_node,&#32;__src_impl._M_header);
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__src_impl._M_node_count;
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert_node(__res.first,&#32;__res.second,
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(__ptr));
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1578 &#32;&#32;&#32;&#32;}
1579 
1581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare2&gt;
1582 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1583 &#32;&#32;&#32;&#32;_M_merge_equal(_Compatible_tree&lt;_Compare2&gt;&amp;&#32;__src)&#32;<emphasis role="keyword">noexcept</emphasis>
1584 &#32;&#32;&#32;&#32;{
1585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;_Rb_tree,&#32;_Compare2&gt;;
1586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__src.begin(),&#32;__end&#32;=&#32;__src.end();&#32;__i&#32;!=&#32;__end;)
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pos&#32;=&#32;__i++;
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_equal_pos(_KeyOfValue()(*__pos));
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
1591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__src_impl&#32;=&#32;_Merge_helper::_S_get_impl(__src);
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;_Rb_tree_rebalance_for_erase(
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pos._M_node,&#32;__src_impl._M_header);
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__src_impl._M_node_count;
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert_node(__res.first,&#32;__res.second,
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(__ptr));
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1600 &#32;&#32;&#32;&#32;}
1601 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1602 
1603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1604 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__y)
1605 &#32;&#32;&#32;&#32;&#32;&#32;{
1606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.size()&#32;==&#32;__y.size()
1607 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__x.begin(),&#32;__x.end(),&#32;__y.begin());
1608 &#32;&#32;&#32;&#32;&#32;&#32;}
1609 
1610 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1612 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__y)
1613 &#32;&#32;&#32;&#32;&#32;&#32;{
1614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__detail::__synth3way_t&lt;_Val&gt;;&#32;})
1615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::lexicographical_compare_three_way(__x.begin(),&#32;__x.end(),
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end(),
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__synth3way);
1618 &#32;&#32;&#32;&#32;&#32;&#32;}
1619 <emphasis role="preprocessor">#else</emphasis>
1620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1621 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__y)
1622 &#32;&#32;&#32;&#32;&#32;&#32;{
1623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare</link>(__x.begin(),&#32;__x.end(),
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end());
1625 &#32;&#32;&#32;&#32;&#32;&#32;}
1626 <emphasis role="preprocessor">#endif</emphasis>
1627 
1628 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1629 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;An&#32;RAII&#32;_Node&#32;handle</emphasis>
1631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Auto_node
1632 &#32;&#32;&#32;&#32;&#32;&#32;{
1633 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1634 &#32;&#32;&#32;&#32;&#32;&#32;_Auto_node(_Rb_tree&amp;&#32;__t,&#32;_Args&amp;&amp;...&#32;__args)
1635 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__t),
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_node(__t._M_create_node(std::forward&lt;_Args&gt;(__args)...))
1637 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1638 
1639 &#32;&#32;&#32;&#32;~_Auto_node()
1640 &#32;&#32;&#32;&#32;{
1641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_node)
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_drop_node(_M_node);
1643 &#32;&#32;&#32;&#32;}
1644 
1645 &#32;&#32;&#32;&#32;_Auto_node(_Auto_node&amp;&amp;&#32;__n)
1646 &#32;&#32;&#32;&#32;:&#32;_M_t(__n._M_t),&#32;_M_node(__n._M_node)
1647 &#32;&#32;&#32;&#32;{&#32;__n._M_node&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
1648 
1649 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;
1650 &#32;&#32;&#32;&#32;_M_key()<emphasis role="keyword">&#32;const</emphasis>
1651 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_key(_M_node);&#32;}
1652 
1653 &#32;&#32;&#32;&#32;iterator
1654 &#32;&#32;&#32;&#32;_M_insert(pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;__p)
1655 &#32;&#32;&#32;&#32;{
1656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__it&#32;=&#32;_M_t._M_insert_node(__p.first,&#32;__p.second,&#32;_M_node);
1657 &#32;&#32;&#32;&#32;&#32;&#32;_M_node&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it;
1659 &#32;&#32;&#32;&#32;}
1660 
1661 &#32;&#32;&#32;&#32;iterator
1662 &#32;&#32;&#32;&#32;_M_insert_equal_lower()
1663 &#32;&#32;&#32;&#32;{
1664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__it&#32;=&#32;_M_t._M_insert_equal_lower_node(_M_node);
1665 &#32;&#32;&#32;&#32;&#32;&#32;_M_node&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it;
1667 &#32;&#32;&#32;&#32;}
1668 
1669 &#32;&#32;&#32;&#32;_Rb_tree&amp;&#32;_M_t;
1670 &#32;&#32;&#32;&#32;_Link_type&#32;_M_node;
1671 &#32;&#32;&#32;&#32;&#32;&#32;};
1672 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1673 &#32;&#32;&#32;&#32;};
1674 
1675 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1677 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1678 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1679 &#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1680 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
1681 
1682 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1683 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1685 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1686 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1687 &#32;&#32;&#32;&#32;_M_move_data(_Rb_tree&amp;&#32;__x,&#32;false_type)
1688 &#32;&#32;&#32;&#32;{
1689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_get_Node_allocator()&#32;==&#32;__x._M_get_Node_allocator())
1690 &#32;&#32;&#32;&#32;_M_move_data(__x,&#32;true_type());
1691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1692 &#32;&#32;&#32;&#32;{
1693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__move&#32;=&#32;!__move_if_noexcept_cond&lt;value_type&gt;::value;
1694 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
1695 &#32;&#32;&#32;&#32;&#32;&#32;_M_root()&#32;=&#32;_M_copy&lt;__move&gt;(__x,&#32;__an);
1696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(__move)
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.clear();
1698 &#32;&#32;&#32;&#32;}
1699 &#32;&#32;&#32;&#32;}
1700 
1701 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1703 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1704 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1705 &#32;&#32;&#32;&#32;_M_move_assign(_Rb_tree&amp;&#32;__x,&#32;true_type)
1706 &#32;&#32;&#32;&#32;{
1707 &#32;&#32;&#32;&#32;&#32;&#32;clear();
1708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_root()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1709 &#32;&#32;&#32;&#32;_M_move_data(__x,&#32;true_type());
1710 &#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_on_move(_M_get_Node_allocator(),
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Node_allocator());
1712 &#32;&#32;&#32;&#32;}
1713 
1714 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1716 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1717 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1718 &#32;&#32;&#32;&#32;_M_move_assign(_Rb_tree&amp;&#32;__x,&#32;false_type)
1719 &#32;&#32;&#32;&#32;{
1720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_get_Node_allocator()&#32;==&#32;__x._M_get_Node_allocator())
1721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_move_assign(__x,&#32;true_type{});
1722 
1723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;move&#32;each&#32;node&#32;reusing&#32;existing&#32;nodes&#32;and&#32;copying&#32;__x&#32;nodes</emphasis>
1724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;structure.</emphasis>
1725 &#32;&#32;&#32;&#32;&#32;&#32;_Reuse_or_alloc_node&#32;__roan(*<emphasis role="keyword">this</emphasis>);
1726 &#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_reset();
1727 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_root()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1728 &#32;&#32;&#32;&#32;{
1729 &#32;&#32;&#32;&#32;&#32;&#32;_M_root()&#32;=&#32;_M_copy&lt;__as_rvalue&gt;(__x,&#32;__roan);
1730 &#32;&#32;&#32;&#32;&#32;&#32;__x.clear();
1731 &#32;&#32;&#32;&#32;}
1732 &#32;&#32;&#32;&#32;}
1733 
1734 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1736 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;&amp;
1737 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1738 &#32;&#32;&#32;&#32;operator=(_Rb_tree&amp;&amp;&#32;__x)
1739 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Alloc_traits::_S_nothrow_move()
1740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_move_assignable&lt;_Compare&gt;::value)
1741 &#32;&#32;&#32;&#32;{
1742 &#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_key_compare&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl._M_key_compare);
1743 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(__x,&#32;__bool_constant&lt;_Alloc_traits::_S_nothrow_move()&gt;());
1744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1745 &#32;&#32;&#32;&#32;}
1746 
1747 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1749 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1751 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1752 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_unique(_Iterator&#32;__first,&#32;_Iterator&#32;__last)
1753 &#32;&#32;&#32;&#32;&#32;&#32;{
1754 &#32;&#32;&#32;&#32;_Reuse_or_alloc_node&#32;__roan(*<emphasis role="keyword">this</emphasis>);
1755 &#32;&#32;&#32;&#32;_M_impl._M_reset();
1756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1757 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_unique_(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;*__first,&#32;__roan);
1758 &#32;&#32;&#32;&#32;&#32;&#32;}
1759 
1760 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1762 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1764 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1765 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_equal(_Iterator&#32;__first,&#32;_Iterator&#32;__last)
1766 &#32;&#32;&#32;&#32;&#32;&#32;{
1767 &#32;&#32;&#32;&#32;_Reuse_or_alloc_node&#32;__roan(*<emphasis role="keyword">this</emphasis>);
1768 &#32;&#32;&#32;&#32;_M_impl._M_reset();
1769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1770 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal_(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;*__first,&#32;__roan);
1771 &#32;&#32;&#32;&#32;&#32;&#32;}
1772 <emphasis role="preprocessor">#endif</emphasis>
1773 
1774 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1776 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;&amp;
1777 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1778 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree&amp;&#32;__x)
1779 &#32;&#32;&#32;&#32;{
1780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;std::__addressof(__x))
1781 &#32;&#32;&#32;&#32;{
1782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;_Key&#32;may&#32;be&#32;a&#32;constant&#32;type.</emphasis>
1783 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Alloc_traits::_S_propagate_on_copy_assign())
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__this_alloc&#32;=&#32;this-&gt;_M_get_Node_allocator();
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__that_alloc&#32;=&#32;__x._M_get_Node_allocator();
1788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_Alloc_traits::_S_always_equal()
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__this_alloc&#32;!=&#32;__that_alloc)
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Replacement&#32;allocator&#32;cannot&#32;free&#32;existing&#32;storage,&#32;we&#32;need</emphasis>
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;erase&#32;nodes&#32;first.</emphasis>
1793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clear();
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_on_copy(__this_alloc,&#32;__that_alloc);
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1797 <emphasis role="preprocessor">#endif</emphasis>
1798 
1799 &#32;&#32;&#32;&#32;&#32;&#32;_Reuse_or_alloc_node&#32;__roan(*<emphasis role="keyword">this</emphasis>);
1800 &#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_reset();
1801 &#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_key_compare&#32;=&#32;__x._M_impl._M_key_compare;
1802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_root()&#32;!=&#32;0)
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_root()&#32;=&#32;_M_copy&lt;__as_lvalue&gt;(__x,&#32;__roan);
1804 &#32;&#32;&#32;&#32;}
1805 
1806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1807 &#32;&#32;&#32;&#32;}
1808 
1809 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1811 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1812 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
1813 <emphasis role="preprocessor">#else</emphasis>
1814 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
1815 <emphasis role="preprocessor">#endif</emphasis>
1816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::iterator
1817 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1818 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_(_Base_ptr&#32;__x,&#32;_Base_ptr&#32;__p,
1819 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&gt;=&#32;201103L
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Arg&amp;&amp;&#32;__v,
1821 #<emphasis role="keywordflow">else</emphasis>
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;__v,
1823 #endif
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_NodeGen&amp;&#32;__node_gen)
1825 &#32;&#32;&#32;&#32;&#32;&#32;{
1826 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__insert_left&#32;=&#32;(__x&#32;!=&#32;0&#32;||&#32;__p&#32;==&#32;_M_end()
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_impl._M_key_compare(_KeyOfValue()(__v),
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_key(__p)));
1829 
1830 &#32;&#32;&#32;&#32;_Link_type&#32;__z&#32;=&#32;__node_gen(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v));
1831 
1832 &#32;&#32;&#32;&#32;_Rb_tree_insert_and_rebalance(__insert_left,&#32;__z,&#32;__p,
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_header);
1834 &#32;&#32;&#32;&#32;++_M_impl._M_node_count;
1835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__z);
1836 &#32;&#32;&#32;&#32;&#32;&#32;}
1837 
1838 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1840 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1841 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1842 <emphasis role="preprocessor">#endif</emphasis>
1843 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::iterator
1844 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1845 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1846 &#32;&#32;&#32;&#32;_M_insert_lower(_Base_ptr&#32;__p,&#32;_Arg&amp;&amp;&#32;__v)
1847 <emphasis role="preprocessor">#else</emphasis>
1848 &#32;&#32;&#32;&#32;_M_insert_lower(_Base_ptr&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;__v)
1849 <emphasis role="preprocessor">#endif</emphasis>
1850 &#32;&#32;&#32;&#32;{
1851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__insert_left&#32;=&#32;(__p&#32;==&#32;_M_end()
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!_M_impl._M_key_compare(_S_key(__p),
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_KeyOfValue()(__v)));
1854 
1855 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__z&#32;=&#32;_M_create_node(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v));
1856 
1857 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_insert_and_rebalance(__insert_left,&#32;__z,&#32;__p,
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_header);
1859 &#32;&#32;&#32;&#32;&#32;&#32;++_M_impl._M_node_count;
1860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__z);
1861 &#32;&#32;&#32;&#32;}
1862 
1863 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1865 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1866 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1867 <emphasis role="preprocessor">#endif</emphasis>
1868 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::iterator
1869 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1870 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1871 &#32;&#32;&#32;&#32;_M_insert_equal_lower(_Arg&amp;&amp;&#32;__v)
1872 <emphasis role="preprocessor">#else</emphasis>
1873 &#32;&#32;&#32;&#32;_M_insert_equal_lower(<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;__v)
1874 <emphasis role="preprocessor">#endif</emphasis>
1875 &#32;&#32;&#32;&#32;{
1876 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__x&#32;=&#32;_M_begin();
1877 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;__y&#32;=&#32;_M_end();
1878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1879 &#32;&#32;&#32;&#32;{
1880 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x;
1881 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;!_M_impl._M_key_compare(_S_key(__x),&#32;_KeyOfValue()(__v))&#32;?
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_left(__x)&#32;:&#32;_S_right(__x);
1883 &#32;&#32;&#32;&#32;}
1884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_lower(__y,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v));
1885 &#32;&#32;&#32;&#32;}
1886 
1887 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KoV,
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1889 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_MoveValues,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
1890 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KoV,&#32;_Compare,&#32;_Alloc&gt;::_Link_type
1891 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KoV,&#32;_Compare,&#32;_Alloc&gt;::
1892 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy(_Link_type&#32;__x,&#32;_Base_ptr&#32;__p,&#32;_NodeGen&amp;&#32;__node_gen)
1893 &#32;&#32;&#32;&#32;&#32;&#32;{
1894 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Structural&#32;copy.&#32;__x&#32;and&#32;__p&#32;must&#32;be&#32;non-null.</emphasis>
1895 &#32;&#32;&#32;&#32;_Link_type&#32;__top&#32;=&#32;_M_clone_node&lt;_MoveValues&gt;(__x,&#32;__node_gen);
1896 &#32;&#32;&#32;&#32;__top-&gt;_M_parent&#32;=&#32;__p;
1897 
1898 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
1899 &#32;&#32;&#32;&#32;&#32;&#32;{
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x-&gt;_M_right)
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__top-&gt;_M_right&#32;=
1902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy&lt;_MoveValues&gt;(_S_right(__x),&#32;__top,&#32;__node_gen);
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p&#32;=&#32;__top;
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_left(__x);
1905 
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__y&#32;=&#32;_M_clone_node&lt;_MoveValues&gt;(__x,&#32;__node_gen);
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;_M_left&#32;=&#32;__y;
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y-&gt;_M_parent&#32;=&#32;__p;
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x-&gt;_M_right)
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y-&gt;_M_right&#32;=&#32;_M_copy&lt;_MoveValues&gt;(_S_right(__x),
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y,&#32;__node_gen);
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p&#32;=&#32;__y;
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_left(__x);
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1917 &#32;&#32;&#32;&#32;&#32;&#32;}
1918 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
1919 &#32;&#32;&#32;&#32;&#32;&#32;{
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase(__top);
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
1922 &#32;&#32;&#32;&#32;&#32;&#32;}
1923 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__top;
1924 &#32;&#32;&#32;&#32;&#32;&#32;}
1925 
1926 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1928 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1929 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1930 &#32;&#32;&#32;&#32;_M_erase(_Link_type&#32;__x)
1931 &#32;&#32;&#32;&#32;{
1932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Erase&#32;without&#32;rebalancing.</emphasis>
1933 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1934 &#32;&#32;&#32;&#32;{
1935 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(_S_right(__x));
1936 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__y&#32;=&#32;_S_left(__x);
1937 &#32;&#32;&#32;&#32;&#32;&#32;_M_drop_node(__x);
1938 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__y;
1939 &#32;&#32;&#32;&#32;}
1940 &#32;&#32;&#32;&#32;}
1941 
1942 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1944 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
1945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::iterator
1946 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1947 &#32;&#32;&#32;&#32;_M_lower_bound(_Link_type&#32;__x,&#32;_Base_ptr&#32;__y,
1948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)
1949 &#32;&#32;&#32;&#32;{
1950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_impl._M_key_compare(_S_key(__x),&#32;__k))
1952 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
1953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1954 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
1955 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__y);
1956 &#32;&#32;&#32;&#32;}
1957 
1958 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1960 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::const_iterator
1962 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1963 &#32;&#32;&#32;&#32;_M_lower_bound(_Const_Link_type&#32;__x,&#32;_Const_Base_ptr&#32;__y,
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1965 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_impl._M_key_compare(_S_key(__x),&#32;__k))
1968 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
1969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1970 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
1971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(__y);
1972 &#32;&#32;&#32;&#32;}
1973 
1974 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1976 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::iterator
1978 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1979 &#32;&#32;&#32;&#32;_M_upper_bound(_Link_type&#32;__x,&#32;_Base_ptr&#32;__y,
1980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)
1981 &#32;&#32;&#32;&#32;{
1982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1983 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(__k,&#32;_S_key(__x)))
1984 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
1985 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1986 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
1987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__y);
1988 &#32;&#32;&#32;&#32;}
1989 
1990 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
1991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1992 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::const_iterator
1994 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
1995 &#32;&#32;&#32;&#32;_M_upper_bound(_Const_Link_type&#32;__x,&#32;_Const_Base_ptr&#32;__y,
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1997 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
1999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(__k,&#32;_S_key(__x)))
2000 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
2001 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2002 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
2003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(__y);
2004 &#32;&#32;&#32;&#32;}
2005 
2006 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2008 &#32;&#32;&#32;&#32;pair&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::iterator,
2010 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::iterator&gt;
2012 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2013 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)
2014 &#32;&#32;&#32;&#32;{
2015 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__x&#32;=&#32;_M_begin();
2016 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;__y&#32;=&#32;_M_end();
2017 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
2018 &#32;&#32;&#32;&#32;{
2019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(_S_key(__x),&#32;__k))
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
2021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(__k,&#32;_S_key(__x)))
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
2023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__xu(__x);
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;__yu(__y);
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xu&#32;=&#32;_S_right(__xu);
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&gt;(_M_lower_bound(__x,&#32;__y,&#32;__k),
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_upper_bound(__xu,&#32;__yu,&#32;__k));
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2033 &#32;&#32;&#32;&#32;}
2034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,&#32;iterator&gt;(iterator(__y),
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(__y));
2036 &#32;&#32;&#32;&#32;}
2037 
2038 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2040 &#32;&#32;&#32;&#32;pair&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::const_iterator,
2042 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::const_iterator&gt;
2044 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2045 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
2046 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2047 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Link_type&#32;__x&#32;=&#32;_M_begin();
2048 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Base_ptr&#32;__y&#32;=&#32;_M_end();
2049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
2050 &#32;&#32;&#32;&#32;{
2051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(_S_key(__x),&#32;__k))
2052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_S_right(__x);
2053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(__k,&#32;_S_key(__x)))
2054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
2055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Const_Link_type&#32;__xu(__x);
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Const_Base_ptr&#32;__yu(__y);
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x,&#32;__x&#32;=&#32;_S_left(__x);
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xu&#32;=&#32;_S_right(__xu);
2061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;const_iterator,
2062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&gt;(_M_lower_bound(__x,&#32;__y,&#32;__k),
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_upper_bound(__xu,&#32;__yu,&#32;__k));
2064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2065 &#32;&#32;&#32;&#32;}
2066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;const_iterator,&#32;const_iterator&gt;(const_iterator(__y),
2067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator(__y));
2068 &#32;&#32;&#32;&#32;}
2069 
2070 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2073 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2074 &#32;&#32;&#32;&#32;swap(_Rb_tree&amp;&#32;__t)
2075 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable&lt;_Compare&gt;::value)
2076 &#32;&#32;&#32;&#32;{
2077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_root()&#32;==&#32;0)
2078 &#32;&#32;&#32;&#32;{
2079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__t._M_root()&#32;!=&#32;0)
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_move_data(__t._M_impl);
2081 &#32;&#32;&#32;&#32;}
2082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__t._M_root()&#32;==&#32;0)
2083 &#32;&#32;&#32;&#32;__t._M_impl._M_move_data(_M_impl);
2084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2085 &#32;&#32;&#32;&#32;{
2086 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_root(),__t._M_root());
2087 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_leftmost(),__t._M_leftmost());
2088 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_rightmost(),__t._M_rightmost());
2089 
2090 &#32;&#32;&#32;&#32;&#32;&#32;_M_root()-&gt;_M_parent&#32;=&#32;_M_end();
2091 &#32;&#32;&#32;&#32;&#32;&#32;__t._M_root()-&gt;_M_parent&#32;=&#32;__t._M_end();
2092 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(this-&gt;_M_impl._M_node_count,&#32;__t._M_impl._M_node_count);
2093 &#32;&#32;&#32;&#32;}
2094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;need&#32;to&#32;swap&#32;header&apos;s&#32;color&#32;as&#32;it&#32;does&#32;not&#32;change.</emphasis>
2095 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(this-&gt;_M_impl._M_key_compare,&#32;__t._M_impl._M_key_compare);
2096 
2097 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__t._M_get_Node_allocator());
2099 &#32;&#32;&#32;&#32;}
2100 
2101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2103 &#32;&#32;&#32;&#32;pair&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr,
2105 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr&gt;
2107 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2108 &#32;&#32;&#32;&#32;_M_get_insert_unique_pos(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
2109 &#32;&#32;&#32;&#32;{
2110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;_Res;
2111 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__x&#32;=&#32;_M_begin();
2112 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;__y&#32;=&#32;_M_end();
2113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__comp&#32;=&#32;<emphasis role="keyword">true</emphasis>;
2114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
2115 &#32;&#32;&#32;&#32;{
2116 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x;
2117 &#32;&#32;&#32;&#32;&#32;&#32;__comp&#32;=&#32;_M_impl._M_key_compare(__k,&#32;_S_key(__x));
2118 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__comp&#32;?&#32;_S_left(__x)&#32;:&#32;_S_right(__x);
2119 &#32;&#32;&#32;&#32;}
2120 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__j&#32;=&#32;iterator(__y);
2121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp)
2122 &#32;&#32;&#32;&#32;{
2123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__j&#32;==&#32;begin())
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__x,&#32;__y);
2125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__j;
2127 &#32;&#32;&#32;&#32;}
2128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(_S_key(__j._M_node),&#32;__k))
2129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__x,&#32;__y);
2130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__j._M_node,&#32;0);
2131 &#32;&#32;&#32;&#32;}
2132 
2133 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2135 &#32;&#32;&#32;&#32;pair&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr,
2137 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr&gt;
2139 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2140 &#32;&#32;&#32;&#32;_M_get_insert_equal_pos(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
2141 &#32;&#32;&#32;&#32;{
2142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;_Res;
2143 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__x&#32;=&#32;_M_begin();
2144 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;__y&#32;=&#32;_M_end();
2145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
2146 &#32;&#32;&#32;&#32;{
2147 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x;
2148 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_M_impl._M_key_compare(__k,&#32;_S_key(__x))&#32;?
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_left(__x)&#32;:&#32;_S_right(__x);
2150 &#32;&#32;&#32;&#32;}
2151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__x,&#32;__y);
2152 &#32;&#32;&#32;&#32;}
2153 
2154 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2156 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2157 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
2158 <emphasis role="preprocessor">#endif</emphasis>
2159 &#32;&#32;&#32;&#32;pair&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::iterator,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
2161 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2162 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2163 &#32;&#32;&#32;&#32;_M_insert_unique(_Arg&amp;&amp;&#32;__v)
2164 <emphasis role="preprocessor">#else</emphasis>
2165 &#32;&#32;&#32;&#32;_M_insert_unique(<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;__v)
2166 <emphasis role="preprocessor">#endif</emphasis>
2167 &#32;&#32;&#32;&#32;{
2168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;iterator,&#32;bool&gt;&#32;_Res;
2169 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;__res
2170 &#32;&#32;&#32;&#32;=&#32;_M_get_insert_unique_pos(_KeyOfValue()(__v));
2171 
2172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
2173 &#32;&#32;&#32;&#32;{
2174 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
2175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(_M_insert_(__res.first,&#32;__res.second,
2176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v),&#32;__an),
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>);
2178 &#32;&#32;&#32;&#32;}
2179 
2180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(iterator(__res.first),&#32;<emphasis role="keyword">false</emphasis>);
2181 &#32;&#32;&#32;&#32;}
2182 
2183 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2185 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2186 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
2187 <emphasis role="preprocessor">#endif</emphasis>
2188 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::iterator
2189 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2190 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2191 &#32;&#32;&#32;&#32;_M_insert_equal(_Arg&amp;&amp;&#32;__v)
2192 <emphasis role="preprocessor">#else</emphasis>
2193 &#32;&#32;&#32;&#32;_M_insert_equal(<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;__v)
2194 <emphasis role="preprocessor">#endif</emphasis>
2195 &#32;&#32;&#32;&#32;{
2196 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;__res
2197 &#32;&#32;&#32;&#32;=&#32;_M_get_insert_equal_pos(_KeyOfValue()(__v));
2198 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_node&#32;__an(*<emphasis role="keyword">this</emphasis>);
2199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_(__res.first,&#32;__res.second,
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v),&#32;__an);
2201 &#32;&#32;&#32;&#32;}
2202 
2203 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2205 &#32;&#32;&#32;&#32;pair&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr,
2207 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr&gt;
2209 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2210 &#32;&#32;&#32;&#32;_M_get_insert_hint_unique_pos(const_iterator&#32;__position,
2211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
2212 &#32;&#32;&#32;&#32;{
2213 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__pos&#32;=&#32;__position._M_const_cast();
2214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;_Res;
2215 
2216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;end()</emphasis>
2217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos._M_node&#32;==&#32;_M_end())
2218 &#32;&#32;&#32;&#32;{
2219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;&gt;&#32;0
2220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_M_impl._M_key_compare(_S_key(_M_rightmost()),&#32;__k))
2221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;_M_rightmost());
2222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_insert_unique_pos(__k);
2224 &#32;&#32;&#32;&#32;}
2225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(__k,&#32;_S_key(__pos._M_node)))
2226 &#32;&#32;&#32;&#32;{
2227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First,&#32;try&#32;before...</emphasis>
2228 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__before&#32;=&#32;__pos;
2229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos._M_node&#32;==&#32;_M_leftmost())&#32;<emphasis role="comment">//&#32;begin()</emphasis>
2230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(_M_leftmost(),&#32;_M_leftmost());
2231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(_S_key((--__before)._M_node),&#32;__k))
2232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_S_right(__before._M_node)&#32;==&#32;0)
2234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;__before._M_node);
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__pos._M_node,&#32;__pos._M_node);
2237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_insert_unique_pos(__k);
2240 &#32;&#32;&#32;&#32;}
2241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(_S_key(__pos._M_node),&#32;__k))
2242 &#32;&#32;&#32;&#32;{
2243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...&#32;then&#32;try&#32;after.</emphasis>
2244 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__after&#32;=&#32;__pos;
2245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos._M_node&#32;==&#32;_M_rightmost())
2246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;_M_rightmost());
2247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_key_compare(__k,&#32;_S_key((++__after)._M_node)))
2248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_S_right(__pos._M_node)&#32;==&#32;0)
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;__pos._M_node);
2251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__after._M_node,&#32;__after._M_node);
2253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_insert_unique_pos(__k);
2256 &#32;&#32;&#32;&#32;}
2257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2258 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Equivalent&#32;keys.</emphasis>
2259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__pos._M_node,&#32;0);
2260 &#32;&#32;&#32;&#32;}
2261 
2262 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2264 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2265 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
2266 <emphasis role="preprocessor">#else</emphasis>
2267 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
2268 <emphasis role="preprocessor">#endif</emphasis>
2269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::iterator
2270 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2271 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_unique_(const_iterator&#32;__position,
2272 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&gt;=&#32;201103L
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Arg&amp;&amp;&#32;__v,
2274 #<emphasis role="keywordflow">else</emphasis>
2275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;__v,
2276 #endif
2277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_NodeGen&amp;&#32;__node_gen)
2278 &#32;&#32;&#32;&#32;{
2279 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;__res
2280 &#32;&#32;&#32;&#32;=&#32;_M_get_insert_hint_unique_pos(__position,&#32;_KeyOfValue()(__v));
2281 
2282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
2283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_(__res.first,&#32;__res.second,
2284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v),
2285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node_gen);
2286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__res.first);
2287 &#32;&#32;&#32;&#32;}
2288 
2289 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2291 &#32;&#32;&#32;&#32;pair&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr,
2293 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::_Base_ptr&gt;
2295 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2296 &#32;&#32;&#32;&#32;_M_get_insert_hint_equal_pos(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
2297 &#32;&#32;&#32;&#32;{
2298 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__pos&#32;=&#32;__position._M_const_cast();
2299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;_Res;
2300 
2301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;end()</emphasis>
2302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos._M_node&#32;==&#32;_M_end())
2303 &#32;&#32;&#32;&#32;{
2304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;&gt;&#32;0
2305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_M_impl._M_key_compare(__k,&#32;_S_key(_M_rightmost())))
2306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;_M_rightmost());
2307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_insert_equal_pos(__k);
2309 &#32;&#32;&#32;&#32;}
2310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_impl._M_key_compare(_S_key(__pos._M_node),&#32;__k))
2311 &#32;&#32;&#32;&#32;{
2312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First,&#32;try&#32;before...</emphasis>
2313 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__before&#32;=&#32;__pos;
2314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos._M_node&#32;==&#32;_M_leftmost())&#32;<emphasis role="comment">//&#32;begin()</emphasis>
2315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(_M_leftmost(),&#32;_M_leftmost());
2316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_impl._M_key_compare(__k,&#32;_S_key((--__before)._M_node)))
2317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_S_right(__before._M_node)&#32;==&#32;0)
2319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;__before._M_node);
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__pos._M_node,&#32;__pos._M_node);
2322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_insert_equal_pos(__k);
2325 &#32;&#32;&#32;&#32;}
2326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2327 &#32;&#32;&#32;&#32;{
2328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...&#32;then&#32;try&#32;after.</emphasis>
2329 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__after&#32;=&#32;__pos;
2330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos._M_node&#32;==&#32;_M_rightmost())
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;_M_rightmost());
2332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_impl._M_key_compare(_S_key((++__after)._M_node),&#32;__k))
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_S_right(__pos._M_node)&#32;==&#32;0)
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;__pos._M_node);
2336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(__after._M_node,&#32;__after._M_node);
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res(0,&#32;0);
2341 &#32;&#32;&#32;&#32;}
2342 &#32;&#32;&#32;&#32;}
2343 
2344 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2346 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2347 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
2348 <emphasis role="preprocessor">#else</emphasis>
2349 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_NodeGen&gt;
2350 <emphasis role="preprocessor">#endif</emphasis>
2351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::iterator
2352 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2353 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_equal_(const_iterator&#32;__position,
2354 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&gt;=&#32;201103L
2355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Arg&amp;&amp;&#32;__v,
2356 #<emphasis role="keywordflow">else</emphasis>
2357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;__v,
2358 #endif
2359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_NodeGen&amp;&#32;__node_gen)
2360 &#32;&#32;&#32;&#32;&#32;&#32;{
2361 &#32;&#32;&#32;&#32;pair&lt;_Base_ptr,&#32;_Base_ptr&gt;&#32;__res
2362 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_M_get_insert_hint_equal_pos(__position,&#32;_KeyOfValue()(__v));
2363 
2364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
2365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_(__res.first,&#32;__res.second,
2366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v),
2367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node_gen);
2368 
2369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_equal_lower(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1acd2221d446b8321312e9532ff47ca419">_GLIBCXX_FORWARD</link>(_Arg,&#32;__v));
2370 &#32;&#32;&#32;&#32;&#32;&#32;}
2371 
2372 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2373 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2375 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2376 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2377 &#32;&#32;&#32;&#32;_M_insert_node(_Base_ptr&#32;__x,&#32;_Base_ptr&#32;__p,&#32;_Link_type&#32;__z)
2378 &#32;&#32;&#32;&#32;-&gt;&#32;iterator
2379 &#32;&#32;&#32;&#32;{
2380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__insert_left&#32;=&#32;(__x&#32;!=&#32;0&#32;||&#32;__p&#32;==&#32;_M_end()
2381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_impl._M_key_compare(_S_key(__z),
2382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_key(__p)));
2383 
2384 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_insert_and_rebalance(__insert_left,&#32;__z,&#32;__p,
2385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_header);
2386 &#32;&#32;&#32;&#32;&#32;&#32;++_M_impl._M_node_count;
2387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__z);
2388 &#32;&#32;&#32;&#32;}
2389 
2390 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2392 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2393 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2394 &#32;&#32;&#32;&#32;_M_insert_lower_node(_Base_ptr&#32;__p,&#32;_Link_type&#32;__z)
2395 &#32;&#32;&#32;&#32;-&gt;&#32;iterator
2396 &#32;&#32;&#32;&#32;{
2397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__insert_left&#32;=&#32;(__p&#32;==&#32;_M_end()
2398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!_M_impl._M_key_compare(_S_key(__p),
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_key(__z)));
2400 
2401 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree_insert_and_rebalance(__insert_left,&#32;__z,&#32;__p,
2402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_header);
2403 &#32;&#32;&#32;&#32;&#32;&#32;++_M_impl._M_node_count;
2404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__z);
2405 &#32;&#32;&#32;&#32;}
2406 
2407 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2409 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2410 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2411 &#32;&#32;&#32;&#32;_M_insert_equal_lower_node(_Link_type&#32;__z)
2412 &#32;&#32;&#32;&#32;-&gt;&#32;iterator
2413 &#32;&#32;&#32;&#32;{
2414 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__x&#32;=&#32;_M_begin();
2415 &#32;&#32;&#32;&#32;&#32;&#32;_Base_ptr&#32;__y&#32;=&#32;_M_end();
2416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;0)
2417 &#32;&#32;&#32;&#32;{
2418 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;__x;
2419 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;!_M_impl._M_key_compare(_S_key(__x),&#32;_S_key(__z))&#32;?
2420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_left(__x)&#32;:&#32;_S_right(__x);
2421 &#32;&#32;&#32;&#32;}
2422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_lower_node(__y,&#32;__z);
2423 &#32;&#32;&#32;&#32;}
2424 
2425 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2427 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2429 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2430 &#32;&#32;&#32;&#32;&#32;&#32;_M_emplace_unique(_Args&amp;&amp;...&#32;__args)
2431 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;pair&lt;iterator,&#32;bool&gt;
2432 &#32;&#32;&#32;&#32;&#32;&#32;{
2433 &#32;&#32;&#32;&#32;_Auto_node&#32;__z(*<emphasis role="keyword">this</emphasis>,&#32;std::forward&lt;_Args&gt;(__args)...);
2434 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_unique_pos(__z._M_key());
2435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
2436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__z._M_insert(__res),&#32;<emphasis role="keyword">true</emphasis>};
2437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{iterator(__res.first),&#32;<emphasis role="keyword">false</emphasis>};
2438 &#32;&#32;&#32;&#32;&#32;&#32;}
2439 
2440 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2442 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2444 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2445 &#32;&#32;&#32;&#32;&#32;&#32;_M_emplace_equal(_Args&amp;&amp;...&#32;__args)
2446 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;iterator
2447 &#32;&#32;&#32;&#32;&#32;&#32;{
2448 &#32;&#32;&#32;&#32;_Auto_node&#32;__z(*<emphasis role="keyword">this</emphasis>,&#32;std::forward&lt;_Args&gt;(__args)...);
2449 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_equal_pos(__z._M_key());
2450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__z._M_insert(__res);
2451 &#32;&#32;&#32;&#32;&#32;&#32;}
2452 
2453 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2455 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2457 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2458 &#32;&#32;&#32;&#32;&#32;&#32;_M_emplace_hint_unique(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
2459 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;iterator
2460 &#32;&#32;&#32;&#32;&#32;&#32;{
2461 &#32;&#32;&#32;&#32;_Auto_node&#32;__z(*<emphasis role="keyword">this</emphasis>,&#32;std::forward&lt;_Args&gt;(__args)...);
2462 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_hint_unique_pos(__pos,&#32;__z._M_key());
2463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
2464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__z._M_insert(__res);
2465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__res.first);
2466 &#32;&#32;&#32;&#32;&#32;&#32;}
2467 
2468 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2470 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2472 &#32;&#32;&#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2473 &#32;&#32;&#32;&#32;&#32;&#32;_M_emplace_hint_equal(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
2474 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;iterator
2475 &#32;&#32;&#32;&#32;&#32;&#32;{
2476 &#32;&#32;&#32;&#32;_Auto_node&#32;__z(*<emphasis role="keyword">this</emphasis>,&#32;std::forward&lt;_Args&gt;(__args)...);
2477 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_M_get_insert_hint_equal_pos(__pos,&#32;__z._M_key());
2478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res.second)
2479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__z._M_insert(__res);
2480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__z._M_insert_equal_lower();
2481 &#32;&#32;&#32;&#32;&#32;&#32;}
2482 <emphasis role="preprocessor">#endif</emphasis>
2483 
2484 
2485 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2487 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2488 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2489 &#32;&#32;&#32;&#32;_M_erase_aux(const_iterator&#32;__position)
2490 &#32;&#32;&#32;&#32;{
2491 &#32;&#32;&#32;&#32;&#32;&#32;_Link_type&#32;__y&#32;=
2492 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Link_type<emphasis role="keyword">&gt;</emphasis>(_Rb_tree_rebalance_for_erase
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">const_cast&lt;</emphasis>_Base_ptr<emphasis role="keyword">&gt;</emphasis>(__position._M_node),
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_header));
2495 &#32;&#32;&#32;&#32;&#32;&#32;_M_drop_node(__y);
2496 &#32;&#32;&#32;&#32;&#32;&#32;--_M_impl._M_node_count;
2497 &#32;&#32;&#32;&#32;}
2498 
2499 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2501 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2502 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2503 &#32;&#32;&#32;&#32;_M_erase_aux(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
2504 &#32;&#32;&#32;&#32;{
2505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;begin()&#32;&amp;&amp;&#32;__last&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
2506 &#32;&#32;&#32;&#32;clear();
2507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
2509 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_aux(__first++);
2510 &#32;&#32;&#32;&#32;}
2511 
2512 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2514 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::size_type
2515 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2516 &#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__x)
2517 &#32;&#32;&#32;&#32;{
2518 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;iterator,&#32;iterator&gt;&#32;__p&#32;=&#32;equal_range(__x);
2519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__old_size&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
2520 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_aux(__p.first,&#32;__p.second);
2521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old_size&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
2522 &#32;&#32;&#32;&#32;}
2523 
2524 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2526 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::iterator
2528 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2529 &#32;&#32;&#32;&#32;find(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)
2530 &#32;&#32;&#32;&#32;{
2531 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__j&#32;=&#32;_M_lower_bound(_M_begin(),&#32;_M_end(),&#32;__k);
2532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__j&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()
2533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_impl._M_key_compare(__k,
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_key(__j._M_node)))&#32;?&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;:&#32;__j;
2535 &#32;&#32;&#32;&#32;}
2536 
2537 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2539 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,
2540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Alloc&gt;::const_iterator
2541 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2542 &#32;&#32;&#32;&#32;find(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
2543 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2544 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__j&#32;=&#32;_M_lower_bound(_M_begin(),&#32;_M_end(),&#32;__k);
2545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__j&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()
2546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_impl._M_key_compare(__k,
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_key(__j._M_node)))&#32;?&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;:&#32;__j;
2548 &#32;&#32;&#32;&#32;}
2549 
2550 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2552 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::size_type
2553 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,&#32;_Val,&#32;_KeyOfValue,&#32;_Compare,&#32;_Alloc&gt;::
2554 &#32;&#32;&#32;&#32;count(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
2555 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2556 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;const_iterator,&#32;const_iterator&gt;&#32;__p&#32;=&#32;equal_range(__k);
2557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;std::distance(__p.first,&#32;__p.second);
2558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
2559 &#32;&#32;&#32;&#32;}
2560 
2561 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
2562 &#32;&#32;_Rb_tree_black_count(<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*&#32;__node,
2563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Rb_tree_node_base*&#32;__root)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
2564 
2565 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
2566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2567 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2568 &#32;&#32;&#32;&#32;_Rb_tree&lt;_Key,_Val,_KeyOfValue,_Compare,_Alloc&gt;::__rb_verify()<emphasis role="keyword">&#32;const</emphasis>
2569 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2570 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_node_count&#32;==&#32;0&#32;||&#32;begin()&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
2571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl._M_node_count&#32;==&#32;0&#32;&amp;&amp;&#32;begin()&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()
2572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;this-&gt;_M_impl._M_header._M_left&#32;==&#32;_M_end()
2573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;this-&gt;_M_impl._M_header._M_right&#32;==&#32;_M_end();
2574 
2575 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__len&#32;=&#32;_Rb_tree_black_count(_M_leftmost(),&#32;_M_root());
2576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(const_iterator&#32;__it&#32;=&#32;begin();&#32;__it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++__it)
2577 &#32;&#32;&#32;&#32;{
2578 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Link_type&#32;__x&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Const_Link_type<emphasis role="keyword">&gt;</emphasis>(__it._M_node);
2579 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Link_type&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a82e72570b37c650f0631edab9546dd1f">__L</link>&#32;=&#32;_S_left(__x);
2580 &#32;&#32;&#32;&#32;&#32;&#32;_Const_Link_type&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1af7acbe374c60447552b0ef97491545e0">__R</link>&#32;=&#32;_S_right(__x);
2581 
2582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x-&gt;_M_color&#32;==&#32;_S_red)
2583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a82e72570b37c650f0631edab9546dd1f">__L</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a82e72570b37c650f0631edab9546dd1f">__L</link>-&gt;_M_color&#32;==&#32;_S_red)
2584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1af7acbe374c60447552b0ef97491545e0">__R</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1af7acbe374c60447552b0ef97491545e0">__R</link>-&gt;_M_color&#32;==&#32;_S_red))
2585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2586 
2587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a82e72570b37c650f0631edab9546dd1f">__L</link>&#32;&amp;&amp;&#32;_M_impl._M_key_compare(_S_key(__x),&#32;_S_key(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a82e72570b37c650f0631edab9546dd1f">__L</link>)))
2588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1af7acbe374c60447552b0ef97491545e0">__R</link>&#32;&amp;&amp;&#32;_M_impl._M_key_compare(_S_key(<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1af7acbe374c60447552b0ef97491545e0">__R</link>),&#32;_S_key(__x)))
2590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2591 
2592 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a82e72570b37c650f0631edab9546dd1f">__L</link>&#32;&amp;&amp;&#32;!<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1af7acbe374c60447552b0ef97491545e0">__R</link>&#32;&amp;&amp;&#32;_Rb_tree_black_count(__x,&#32;_M_root())&#32;!=&#32;__len)
2593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2594 &#32;&#32;&#32;&#32;}
2595 
2596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_leftmost()&#32;!=&#32;_Rb_tree_node_base::_S_minimum(_M_root()))
2597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rightmost()&#32;!=&#32;_Rb_tree_node_base::_S_maximum(_M_root()))
2599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2601 &#32;&#32;&#32;&#32;}
2602 
2603 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
2604 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;_Rb_tree&#32;specializations.</emphasis>
2605 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sel,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp1,
2606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
2607 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rb_tree_merge_helper&lt;_Rb_tree&lt;_Key,&#32;_Val,&#32;_Sel,&#32;_Cmp1,&#32;_Alloc&gt;,
2608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Cmp2&gt;
2609 &#32;&#32;&#32;&#32;{
2610 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Rb_tree&lt;_Key,&#32;_Val,&#32;_Sel,&#32;_Cmp1,&#32;_Alloc&gt;;
2612 
2613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
2614 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_impl(_Rb_tree&lt;_Key,&#32;_Val,&#32;_Sel,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__tree)
2615 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__tree._M_impl;&#32;}
2616 &#32;&#32;&#32;&#32;};
2617 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2618 
2619 _GLIBCXX_END_NAMESPACE_VERSION
2620 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
2621 
2622 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
