<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2uses__allocator__args_8h_source" xml:lang="en-US">
<title>uses_allocator_args.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/uses_allocator_args.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Utility&#32;functions&#32;for&#32;uses-allocator&#32;construction&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2019-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_USES_ALLOCATOR_ARGS</emphasis>
31 <emphasis role="preprocessor">#define&#32;_USES_ALLOCATOR_ARGS&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_concepts</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;placement&#32;operator&#32;new</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;tuple,&#32;make_tuple,&#32;make_from_tuple</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_construct.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;construct_at</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pair</emphasis>
41 
42 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
43 {
44 _GLIBCXX_BEGIN_NAMESPACE_VERSION
45 
46 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>_Std_pair&#32;=&#32;__is_pair&lt;_Tp&gt;;
48 
53 <emphasis role="comment">//&#32;Not&#32;specified&#32;by&#32;C++20,&#32;used&#32;internally</emphasis>
54 <emphasis role="preprocessor">#define&#32;__cpp_lib_make_obj_using_allocator&#32;201811L</emphasis>
55 
56 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
58 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)&#32;<emphasis role="keyword">noexcept</emphasis>
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!&#32;_Std_pair&lt;_Tp&gt;)
61 &#32;&#32;&#32;&#32;{
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(uses_allocator_v&lt;remove_cv_t&lt;_Tp&gt;,&#32;_Alloc&gt;)
63 &#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_constructible_v&lt;_Tp,&#32;allocator_arg_t,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;_Args...&gt;)
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tuple&lt;allocator_arg_t,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;_Args&amp;&amp;...&gt;(
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_arg,&#32;__a,&#32;std::forward&lt;_Args&gt;(__args)...);
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_constructible_v&lt;_Tp,&#32;_Args...,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&gt;,
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;construction&#32;with&#32;an&#32;allocator&#32;must&#32;be&#32;possible&quot;</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;if&#32;uses_allocator&#32;is&#32;true&quot;</emphasis>);
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tuple&lt;_Args&amp;&amp;...,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&gt;(
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...,&#32;__a);
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
79 &#32;&#32;&#32;&#32;}
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_constructible_v&lt;_Tp,&#32;_Args...&gt;);
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tuple&lt;_Args&amp;&amp;...&gt;(std::forward&lt;_Args&gt;(__args)...);
85 &#32;&#32;&#32;&#32;}
86 &#32;&#32;&#32;&#32;}
87 
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Std_pair&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tuple1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tuple2&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
90 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;piecewise_construct_t,
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tuple1&amp;&amp;&#32;__x,&#32;_Tuple2&amp;&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>;
92 
93 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Std_pair&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
95 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
96 
97 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Std_pair&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp&gt;
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
99 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;_Up&amp;&amp;,&#32;_Vp&amp;&amp;)&#32;noexcept;
100 
101 &#32;&#32;template&lt;_Std_pair&#32;_Tp,&#32;typename&#32;_Alloc,&#32;typename&#32;_Up,&#32;typename&#32;_Vp&gt;
102 &#32;&#32;&#32;&#32;constexpr&#32;auto
103 &#32;&#32;&#32;&#32;uses_allocator_construction_args(const&#32;_Alloc&amp;,
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;pair&lt;_Up,&#32;_Vp&gt;&amp;)&#32;noexcept;
105 
106 &#32;&#32;template&lt;_Std_pair&#32;_Tp,&#32;typename&#32;_Alloc,&#32;typename&#32;_Up,&#32;typename&#32;_Vp&gt;
107 &#32;&#32;&#32;&#32;constexpr&#32;auto
108 &#32;&#32;&#32;&#32;uses_allocator_construction_args(const&#32;_Alloc&amp;,&#32;pair&lt;_Up,&#32;_Vp&gt;&amp;&amp;)&#32;noexcept;
109 
110 &#32;&#32;template&lt;_Std_pair&#32;_Tp,&#32;typename&#32;_Alloc,&#32;typename&#32;_Tuple1,&#32;typename&#32;_Tuple2&gt;
111 &#32;&#32;&#32;&#32;constexpr&#32;auto
112 &#32;&#32;&#32;&#32;uses_allocator_construction_args(const&#32;_Alloc&amp;&#32;__a,&#32;piecewise_construct_t,
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tuple1&amp;&amp;&#32;__x,&#32;_Tuple2&amp;&amp;&#32;__y)&#32;noexcept
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp1&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::first_type;
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::second_type;
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(piecewise_construct,
119 &#32;&#32;&#32;&#32;&#32;&#32;std::apply([&amp;__a](<emphasis role="keyword">auto</emphasis>&amp;&amp;...&#32;__args1)&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::uses_allocator_construction_args&lt;_Tp1&gt;(
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a,&#32;std::forward&lt;<emphasis role="keyword">decltype</emphasis>(__args1)&gt;(__args1)...);
122 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;std::forward&lt;_Tuple1&gt;(__x)),
123 &#32;&#32;&#32;&#32;&#32;&#32;std::apply([&amp;__a](<emphasis role="keyword">auto</emphasis>&amp;&amp;...&#32;__args2)&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::uses_allocator_construction_args&lt;_Tp2&gt;(
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a,&#32;std::forward&lt;<emphasis role="keyword">decltype</emphasis>(__args2)&gt;(__args2)...);
126 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;std::forward&lt;_Tuple2&gt;(__y)));
127 &#32;&#32;&#32;&#32;}
128 
129 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Std_pair&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
131 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
132 &#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp1&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::first_type;
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::second_type;
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(piecewise_construct,
137 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp1&gt;(__a),
138 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp2&gt;(__a));
139 &#32;&#32;&#32;&#32;}
140 
141 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Std_pair&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
143 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;_Up&amp;&amp;&#32;__u,&#32;_Vp&amp;&amp;&#32;__v)
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
145 &#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp1&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::first_type;
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::second_type;
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(piecewise_construct,
150 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp1&gt;(__a,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Up&gt;(__u)),
152 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp2&gt;(__a,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Vp&gt;(__v)));
154 &#32;&#32;&#32;&#32;}
155 
156 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Std_pair&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp&gt;
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
158 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Up,&#32;_Vp&gt;&amp;&#32;__pr)&#32;<emphasis role="keyword">noexcept</emphasis>
160 &#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp1&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::first_type;
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::second_type;
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(piecewise_construct,
165 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp1&gt;(__a,&#32;__pr.first),
166 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp2&gt;(__a,&#32;__pr.second));
167 &#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Std_pair&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp&gt;
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
171 &#32;&#32;&#32;&#32;uses_allocator_construction_args(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_Up,&#32;_Vp&gt;&amp;&amp;&#32;__pr)&#32;<emphasis role="keyword">noexcept</emphasis>
173 &#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp1&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::first_type;
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::second_type;
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_tuple(piecewise_construct,
178 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp1&gt;(__a,
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pr).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),
180 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp2&gt;(__a,
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pr).second));
182 &#32;&#32;&#32;&#32;}
183 
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
186 &#32;&#32;&#32;&#32;make_obj_using_allocator(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;_Args&amp;&amp;...&#32;__args)
187 &#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_from_tuple&lt;_Tp&gt;(
189 &#32;&#32;&#32;&#32;&#32;&#32;std::uses_allocator_construction_args&lt;_Tp&gt;(__a,
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...));
191 &#32;&#32;&#32;&#32;}
192 
193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp*
195 &#32;&#32;&#32;&#32;uninitialized_construct_using_allocator(_Tp*&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
197 &#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::apply([&amp;](<emphasis role="keyword">auto</emphasis>&amp;&amp;...&#32;__xs)&#32;{
199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::construct_at(__p,&#32;std::forward&lt;<emphasis role="keyword">decltype</emphasis>(__xs)&gt;(__xs)...);
200 &#32;&#32;&#32;&#32;&#32;&#32;},&#32;std::uses_allocator_construction_args&lt;_Tp&gt;(__a,
201 &#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...));
202 &#32;&#32;&#32;&#32;}
204 _GLIBCXX_END_NAMESPACE_VERSION
205 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
206 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
207 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_USES_ALLOCATOR_ARGS</emphasis>
</programlisting></section>
