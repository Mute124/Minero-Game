<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func" xml:lang="en-US">
<title>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt; Class Template Reference</title>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;parallel_backend_tbb.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef std::iterator_traits&lt; _RandomAccessIterator1 &gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link></para>
</listitem>
            <listitem><para>typedef std::iterator_traits&lt; _RandomAccessIterator2 &gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link></para>
</listitem>
            <listitem><para>typedef std::common_type&lt; <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link>, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link></para>
</listitem>
            <listitem><para>typedef std::iterator_traits&lt; _RandomAccessIterator1 &gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link></para>
</listitem>
            <listitem><para>typedef std::iterator_traits&lt; _RandomAccessIterator2 &gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link></para>
</listitem>
            <listitem><para>typedef std::common_type&lt; <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link>, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link></para>
</listitem>
            <listitem><para>typedef std::iterator_traits&lt; _RandomAccessIterator1 &gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link></para>
</listitem>
            <listitem><para>typedef std::iterator_traits&lt; _RandomAccessIterator2 &gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link></para>
</listitem>
            <listitem><para>typedef std::common_type&lt; <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link>, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a737763e97eb7c7427eee18e160f9ec11">__stable_sort_func</link> (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __zs, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root, _Compare __comp, _LeafSort __leaf_sort, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link> __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1acdd1b875eb63fba87562564d602b264c">operator()</link> (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> *__self)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a737763e97eb7c7427eee18e160f9ec11">__stable_sort_func</link> (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __zs, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root, _Compare __comp, _LeafSort __leaf_sort, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link> __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1acdd1b875eb63fba87562564d602b264c">operator()</link> (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> *__self)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a737763e97eb7c7427eee18e160f9ec11">__stable_sort_func</link> (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __zs, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root, _Compare __comp, _LeafSort __leaf_sort, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link> __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1acdd1b875eb63fba87562564d602b264c">operator()</link> (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> *__self)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf"/><section>
    <title>_DifferenceType1<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_DifferenceType1</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_DifferenceType1</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_DifferenceType1</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf"/><section>
    <title>_DifferenceType1<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_DifferenceType1</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_DifferenceType1</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_DifferenceType1</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf"/><section>
    <title>_DifferenceType1<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_DifferenceType1</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_DifferenceType1</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_DifferenceType1</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc"/><section>
    <title>_DifferenceType2<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_DifferenceType2</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_DifferenceType2</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::iterator_traits&lt;_RandomAccessIterator2&gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_DifferenceType2</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc"/><section>
    <title>_DifferenceType2<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_DifferenceType2</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_DifferenceType2</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::iterator_traits&lt;_RandomAccessIterator2&gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_DifferenceType2</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc"/><section>
    <title>_DifferenceType2<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_DifferenceType2</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_DifferenceType2</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::iterator_traits&lt;_RandomAccessIterator2&gt;::difference_type <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_DifferenceType2</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638"/><section>
    <title>_SizeType<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_SizeType</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_SizeType</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::common_type&lt;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link>,<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_SizeType</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638"/><section>
    <title>_SizeType<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_SizeType</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_SizeType</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::common_type&lt;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link>,<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_SizeType</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638"/><section>
    <title>_SizeType<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_SizeType</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>_SizeType</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput>typedef std::common_type&lt;<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a0fc1c11e46113897145b6ba058dccbcf">_DifferenceType1</link>,<link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a9841e6928238c30d8a991d3e5fdc94fc">_DifferenceType2</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::_SizeType</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a737763e97eb7c7427eee18e160f9ec11"/><section>
    <title>__stable_sort_func()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__stable_sort_func</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>__stable_sort_func</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::__stable_sort_func (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __zs, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root, _Compare __comp, _LeafSort __leaf_sort, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link> __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a737763e97eb7c7427eee18e160f9ec11"/><section>
    <title>__stable_sort_func()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__stable_sort_func</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>__stable_sort_func</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::__stable_sort_func (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __zs, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root, _Compare __comp, _LeafSort __leaf_sort, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link> __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1a737763e97eb7c7427eee18e160f9ec11"/><section>
    <title>__stable_sort_func()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__stable_sort_func</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>__stable_sort_func</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::__stable_sort_func (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __zs, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root, _Compare __comp, _LeafSort __leaf_sort, <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1adace226b3de93e2a6d7abd1c3aa19638">_SizeType</link> __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1acdd1b875eb63fba87562564d602b264c"/><section>
    <title>operator()()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::operator() (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * __self)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____pstl_1_1____tbb__backend_1_1____stable__sort__func_acdd1b875eb63fba87562564d602b264c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1acdd1b875eb63fba87562564d602b264c"/><section>
    <title>operator()()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::operator() (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * __self)</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func_1acdd1b875eb63fba87562564d602b264c"/><section>
    <title>operator()()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__stable_sort_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _LeafSort &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____stable__sort__func">__pstl::__tbb_backend::__stable_sort_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _LeafSort &gt;::operator() (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * __self)</computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/pstl/<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/<link linkend="_lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link></section>
</section>
