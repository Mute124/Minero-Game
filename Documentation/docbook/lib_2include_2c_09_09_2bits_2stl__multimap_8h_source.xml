<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__multimap_8h_source" xml:lang="en-US">
<title>stl_multimap.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_multimap.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Multimap&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_MULTIMAP_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_MULTIMAP_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
60 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
62 <emphasis role="preprocessor">#endif</emphasis>
63 
64 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
65 {
66 _GLIBCXX_BEGIN_NAMESPACE_VERSION
67 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
68 
69 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>map;
71 
96 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;std::less&lt;_Key&gt;,
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&gt;&#32;&gt;
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>multimap
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_type;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapped_type;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare;
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
107 
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
109 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_value_type;
112 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
113 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
114 <emphasis role="preprocessor">#&#32;endif</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1a0efeda71d183434752b2df77dde3e72c">__glibcxx_class_requires4</link>(_Compare,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;_Key,&#32;_Key,
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryFunctionConcept)
117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(value_type,&#32;_Alloc_value_type,&#32;_SameTypeConcept)
118 <emphasis role="preprocessor">#endif</emphasis>
119 
120 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
121 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;value_type&gt;::value,
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::multimap&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
124 <emphasis role="preprocessor">#endif</emphasis>
125 <emphasis role="preprocessor">#endif</emphasis>
126 
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
128 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
129 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>value_compare
131 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::binary_function&lt;value_type,&#32;value_type,&#32;bool&gt;
132 &#32;&#32;&#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;;
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
135 &#32;&#32;&#32;&#32;_Compare&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>;
136 
137 &#32;&#32;&#32;&#32;value_compare(_Compare&#32;__c)
138 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__c)&#32;{&#32;}
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
142 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x.first,&#32;__y.first);&#32;}
143 &#32;&#32;&#32;&#32;&#32;&#32;};
144 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
145 
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
149 &#32;&#32;&#32;&#32;rebind&lt;value_type&gt;::other&#32;_Pair_alloc_type;
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree&lt;key_type,&#32;value_type,&#32;_Select1st&lt;value_type&gt;,
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare,&#32;_Pair_alloc_type&gt;&#32;_Rep_type;
154 &#32;&#32;&#32;&#32;&#32;&#32;_Rep_type&#32;_M_t;
155 
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Pair_alloc_type&gt;&#32;_Alloc_traits;
157 
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;many&#32;of&#32;these&#32;are&#32;specified&#32;differently&#32;in&#32;ISO,&#32;but&#32;the&#32;following&#32;are</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;functionally&#32;equivalent&quot;</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;&#32;const_pointer;
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::reference&#32;&#32;&#32;&#32;&#32;&#32;reference;
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_reference&#32;&#32;&#32;&#32;const_reference;
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_iterator&#32;&#32;&#32;&#32;&#32;const_iterator;
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::size_type&#32;&#32;&#32;&#32;&#32;&#32;size_type;
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::difference_type&#32;&#32;&#32;&#32;difference_type;
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::reverse_iterator&#32;&#32;&#32;reverse_iterator;
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_reverse_iterator&#32;const_reverse_iterator;
171 
172 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::node_type;
174 <emphasis role="preprocessor">#endif</emphasis>
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.3.2]&#32;construct/copy/destroy</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(get_allocator()&#32;is&#32;also&#32;listed&#32;in&#32;this&#32;section)</emphasis>
178 
182 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;multimap()&#32;:&#32;_M_t()&#32;{&#32;}
184 <emphasis role="preprocessor">#else</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;multimap()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
186 <emphasis role="preprocessor">#endif</emphasis>
187 
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;multimap(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
196 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Pair_alloc_type(__a))&#32;{&#32;}
197 
203 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;multimap(<emphasis role="keyword">const</emphasis>&#32;multimap&amp;&#32;__x)
205 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__x._M_t)&#32;{&#32;}
206 <emphasis role="preprocessor">#else</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;multimap(<emphasis role="keyword">const</emphasis>&#32;multimap&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
208 
216 &#32;&#32;&#32;&#32;&#32;&#32;multimap(multimap&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
217 
228 &#32;&#32;&#32;&#32;&#32;&#32;multimap(initializer_list&lt;value_type&gt;&#32;__l,
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp&#32;=&#32;_Compare(),
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
231 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Pair_alloc_type(__a))
232 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__l.begin(),&#32;__l.end());&#32;}
233 
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;multimap(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
237 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Pair_alloc_type(__a))&#32;{&#32;}
238 
240 &#32;&#32;&#32;&#32;&#32;&#32;multimap(<emphasis role="keyword">const</emphasis>&#32;multimap&amp;&#32;__m,
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
242 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__m._M_t,&#32;_Pair_alloc_type(__a))&#32;{&#32;}
243 
245 &#32;&#32;&#32;&#32;&#32;&#32;multimap(multimap&amp;&amp;&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_constructible&lt;_Compare&gt;::value
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Alloc_traits::_S_always_equal())
248 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m._M_t),&#32;_Pair_alloc_type(__a))&#32;{&#32;}
249 
251 &#32;&#32;&#32;&#32;&#32;&#32;multimap(initializer_list&lt;value_type&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
252 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Pair_alloc_type(__a))
253 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__l.begin(),&#32;__l.end());&#32;}
254 
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
257 &#32;&#32;&#32;&#32;multimap(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
259 &#32;&#32;&#32;&#32;:&#32;_M_t(_Pair_alloc_type(__a))
260 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
261 <emphasis role="preprocessor">#endif</emphasis>
262 
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
273 &#32;&#32;&#32;&#32;multimap(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
274 &#32;&#32;&#32;&#32;:&#32;_M_t()
275 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
276 
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
289 &#32;&#32;&#32;&#32;multimap(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
292 &#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Pair_alloc_type(__a))
293 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
294 
295 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
301 &#32;&#32;&#32;&#32;&#32;&#32;~multimap()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
302 <emphasis role="preprocessor">#endif</emphasis>
303 
309 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
310 &#32;&#32;&#32;&#32;&#32;&#32;multimap&amp;
311 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;multimap&amp;&#32;__x)
312 &#32;&#32;&#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;_M_t&#32;=&#32;__x._M_t;
314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
315 &#32;&#32;&#32;&#32;&#32;&#32;}
316 <emphasis role="preprocessor">#else</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;multimap&amp;
318 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;multimap&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
319 
321 &#32;&#32;&#32;&#32;&#32;&#32;multimap&amp;
322 &#32;&#32;&#32;&#32;&#32;&#32;operator=(multimap&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
323 
335 &#32;&#32;&#32;&#32;&#32;&#32;multimap&amp;
336 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
337 &#32;&#32;&#32;&#32;&#32;&#32;{
338 &#32;&#32;&#32;&#32;_M_t._M_assign_equal(__l.begin(),&#32;__l.end());
339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
340 &#32;&#32;&#32;&#32;&#32;&#32;}
341 <emphasis role="preprocessor">#endif</emphasis>
342 
344 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
345 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
346 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_t.get_allocator());&#32;}
347 
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators</emphasis>
354 &#32;&#32;&#32;&#32;&#32;&#32;iterator
355 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
356 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
357 
363 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
364 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
365 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
366 
372 &#32;&#32;&#32;&#32;&#32;&#32;iterator
373 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
374 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
375 
381 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
382 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
383 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
384 
390 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
391 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
392 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
393 
399 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
400 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
401 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
402 
408 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
409 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
410 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
411 
417 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
418 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
419 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
420 
421 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
428 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
429 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
430 
436 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
437 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
439 
445 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
446 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
448 
454 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
455 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
456 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
457 <emphasis role="preprocessor">#endif</emphasis>
458 
459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;capacity</emphasis>
461 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
462 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
463 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.empty();&#32;}
464 
466 &#32;&#32;&#32;&#32;&#32;&#32;size_type
467 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
468 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.size();&#32;}
469 
471 &#32;&#32;&#32;&#32;&#32;&#32;size_type
472 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
473 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.max_size();&#32;}
474 
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
476 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
494 &#32;&#32;&#32;&#32;iterator
495 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
496 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_equal(std::forward&lt;_Args&gt;(__args)...);&#32;}
497 
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
521 &#32;&#32;&#32;&#32;iterator
522 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
523 &#32;&#32;&#32;&#32;{
524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_hint_equal(__pos,
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
526 &#32;&#32;&#32;&#32;}
527 <emphasis role="preprocessor">#endif</emphasis>
528 
542 &#32;&#32;&#32;&#32;&#32;&#32;iterator
543 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
544 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal(__x);&#32;}
545 
546 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;iterator
550 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
551 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
552 
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
554 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&gt;::value,&#32;iterator&gt;
555 &#32;&#32;&#32;&#32;insert(_Pair&amp;&amp;&#32;__x)
556 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_equal(std::forward&lt;_Pair&gt;(__x));&#32;}
557 <emphasis role="preprocessor">#endif</emphasis>
559 
581 &#32;&#32;&#32;&#32;&#32;&#32;iterator
582 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
583 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
584 <emphasis role="preprocessor">#else</emphasis>
585 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
586 <emphasis role="preprocessor">#endif</emphasis>
587 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal_(__position,&#32;__x);&#32;}
588 
589 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
592 &#32;&#32;&#32;&#32;&#32;&#32;iterator
593 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
594 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_equal_(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
595 
596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
597 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&amp;&amp;&gt;::value,&#32;iterator&gt;
598 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;_Pair&amp;&amp;&#32;__x)
599 &#32;&#32;&#32;&#32;{
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_hint_equal(__position,
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Pair&gt;(__x));
602 &#32;&#32;&#32;&#32;}
603 <emphasis role="preprocessor">#endif</emphasis>
605 
615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
616 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
617 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
618 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_equal(__first,&#32;__last);&#32;}
619 
620 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
630 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;insert(__l.begin(),&#32;__l.end());&#32;}
631 <emphasis role="preprocessor">#endif</emphasis>
632 
633 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
635 &#32;&#32;&#32;&#32;&#32;&#32;node_type
636 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
637 &#32;&#32;&#32;&#32;&#32;&#32;{
638 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__pos);
640 &#32;&#32;&#32;&#32;&#32;&#32;}
641 
643 &#32;&#32;&#32;&#32;&#32;&#32;node_type
644 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
645 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__x);&#32;}
646 
648 &#32;&#32;&#32;&#32;&#32;&#32;iterator
649 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
650 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_equal(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
651 
653 &#32;&#32;&#32;&#32;&#32;&#32;iterator
654 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
655 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_hint_equal(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
656 
657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
658 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>std::_Rb_tree_merge_helper;
659 
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
662 &#32;&#32;&#32;&#32;merge(multimap&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__source)
663 &#32;&#32;&#32;&#32;{
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;multimap,&#32;_Cmp2&gt;;
665 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
666 &#32;&#32;&#32;&#32;}
667 
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
669 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
670 &#32;&#32;&#32;&#32;merge(multimap&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
671 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
672 
673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
674 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
675 &#32;&#32;&#32;&#32;merge(map&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__source)
676 &#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;multimap,&#32;_Cmp2&gt;;
678 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
679 &#32;&#32;&#32;&#32;}
680 
681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
682 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
683 &#32;&#32;&#32;&#32;merge(map&lt;_Key,&#32;_Tp,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
684 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
685 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
686 
687 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
705 &#32;&#32;&#32;&#32;&#32;&#32;iterator
706 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
707 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__position);&#32;}
708 
709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;2059.</emphasis>
710 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
711 &#32;&#32;&#32;&#32;&#32;&#32;iterator
712 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
713 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__position);&#32;}
715 <emphasis role="preprocessor">#else</emphasis>
726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
727 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
728 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__position);&#32;}
729 <emphasis role="preprocessor">#endif</emphasis>
730 
742 &#32;&#32;&#32;&#32;&#32;&#32;size_type
743 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
744 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__x);&#32;}
745 
746 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
763 &#32;&#32;&#32;&#32;&#32;&#32;iterator
764 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
765 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__first,&#32;__last);&#32;}
766 <emphasis role="preprocessor">#else</emphasis>
767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
783 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
784 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__first,&#32;__last);&#32;}
785 <emphasis role="preprocessor">#endif</emphasis>
786 
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
801 &#32;&#32;&#32;&#32;&#32;&#32;swap(multimap&amp;&#32;__x)
802 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable&lt;_Compare&gt;::value)
803 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.swap(__x._M_t);&#32;}
804 
811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
812 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
813 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.clear();&#32;}
814 
815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
820 &#32;&#32;&#32;&#32;&#32;&#32;key_compare
821 &#32;&#32;&#32;&#32;&#32;&#32;key_comp()<emphasis role="keyword">&#32;const</emphasis>
822 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.key_comp();&#32;}
823 
828 &#32;&#32;&#32;&#32;&#32;&#32;value_compare
829 &#32;&#32;&#32;&#32;&#32;&#32;value_comp()<emphasis role="keyword">&#32;const</emphasis>
830 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_compare(_M_t.key_comp());&#32;}
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multimap&#32;operations</emphasis>
833 
835 
846 &#32;&#32;&#32;&#32;&#32;&#32;iterator
847 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
848 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
849 
850 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
852 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
853 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x))
854 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x);&#32;}
855 <emphasis role="preprocessor">#endif</emphasis>
857 
859 
870 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
871 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
872 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
873 
874 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
876 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
877 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x))
878 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x);&#32;}
879 <emphasis role="preprocessor">#endif</emphasis>
881 
883 
888 &#32;&#32;&#32;&#32;&#32;&#32;size_type
889 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
890 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.count(__x);&#32;}
891 
892 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
893 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
894 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
895 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_count_tr(__x))
896 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_count_tr(__x);&#32;}
897 <emphasis role="preprocessor">#endif</emphasis>
899 
900 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
902 
907 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
908 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
909 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x)&#32;!=&#32;_M_t.end();&#32;}
910 
911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
912 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
913 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
914 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
915 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x)&#32;!=&#32;_M_t.end();&#32;}
917 <emphasis role="preprocessor">#endif</emphasis>
918 
920 
931 &#32;&#32;&#32;&#32;&#32;&#32;iterator
932 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
933 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
934 
935 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
937 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
938 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
939 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_lower_bound_tr(__x)))
940 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_lower_bound_tr(__x));&#32;}
941 <emphasis role="preprocessor">#endif</emphasis>
943 
945 
956 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
957 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
958 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
959 
960 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
961 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
962 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
963 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
964 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(const_iterator(_M_t._M_lower_bound_tr(__x)))
965 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_t._M_lower_bound_tr(__x));&#32;}
966 <emphasis role="preprocessor">#endif</emphasis>
968 
970 
976 &#32;&#32;&#32;&#32;&#32;&#32;iterator
977 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
978 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
979 
980 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
982 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
983 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
984 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_upper_bound_tr(__x)))
985 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_upper_bound_tr(__x));&#32;}
986 <emphasis role="preprocessor">#endif</emphasis>
988 
990 
996 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
997 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
998 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
999 
1000 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1002 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1003 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1004 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(const_iterator(_M_t._M_upper_bound_tr(__x)))
1005 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_t._M_upper_bound_tr(__x));&#32;}
1006 <emphasis role="preprocessor">#endif</emphasis>
1008 
1010 
1023 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
1024 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1025 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
1026 
1027 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1029 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1030 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
1031 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x)))
1032 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x));&#32;}
1033 <emphasis role="preprocessor">#endif</emphasis>
1035 
1037 
1050 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
1051 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1052 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
1053 
1054 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1056 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1057 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1058 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;const_iterator,&#32;const_iterator&gt;(
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_equal_range_tr(__x)))
1060 &#32;&#32;&#32;&#32;{
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;const_iterator,&#32;const_iterator&gt;(
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_equal_range_tr(__x));
1063 &#32;&#32;&#32;&#32;}
1064 <emphasis role="preprocessor">#endif</emphasis>
1066 
1067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
1068 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1069 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;,
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;);
1071 
1072 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
1074 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;__detail::__synth3way_t&lt;pair&lt;const&#32;_K1,&#32;_T1&gt;&gt;
1075 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;,
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;);
1077 <emphasis role="preprocessor">#else</emphasis>
1078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
1079 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1080 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;,
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_K1,&#32;_T1,&#32;_C1,&#32;_A1&gt;&amp;);
1082 <emphasis role="preprocessor">#endif</emphasis>
1083 &#32;&#32;};
1084 
1085 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
1086 
1087 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;__iter_to_alloc_t&lt;_InputIterator&gt;&gt;,
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1093 &#32;&#32;&#32;&#32;multimap(_InputIterator,&#32;_InputIterator,
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
1095 &#32;&#32;&#32;&#32;-&gt;&#32;multimap&lt;__iter_key_t&lt;_InputIterator&gt;,&#32;__iter_val_t&lt;_InputIterator&gt;,
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Allocator&gt;;
1097 
1098 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;_Key&gt;,
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;,
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1102 &#32;&#32;&#32;&#32;multimap(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
1104 &#32;&#32;&#32;&#32;-&gt;&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;;
1105 
1106 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1109 &#32;&#32;&#32;&#32;multimap(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
1110 &#32;&#32;&#32;&#32;-&gt;&#32;multimap&lt;__iter_key_t&lt;_InputIterator&gt;,&#32;__iter_val_t&lt;_InputIterator&gt;,
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,&#32;_Allocator&gt;;
1112 
1113 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1115 &#32;&#32;&#32;&#32;multimap(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,&#32;_Allocator)
1116 &#32;&#32;&#32;&#32;-&gt;&#32;multimap&lt;_Key,&#32;_Tp,&#32;less&lt;_Key&gt;,&#32;_Allocator&gt;;
1117 
1118 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;deduction&#32;guides</emphasis>
1119 
1130 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1131 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1132 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1134 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;==&#32;__y._M_t;&#32;}
1135 
1136 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1151 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1152 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;
1153 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1155 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;=&gt;&#32;__y._M_t;&#32;}
1156 <emphasis role="preprocessor">#else</emphasis>
1168 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1169 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1170 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1172 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;&#32;__y._M_t;&#32;}
1173 
1175 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1176 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1177 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1179 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1180 
1182 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1183 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1184 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1186 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
1187 
1189 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1190 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1191 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1193 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
1194 
1196 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1197 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1198 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1200 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
1201 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1202 
1204 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1205 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1206 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__x,
1207 &#32;&#32;&#32;&#32;&#32;multimap&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__y)
1208 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
1209 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
1210 
1211 _GLIBCXX_END_NAMESPACE_CONTAINER
1212 
1213 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1214 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::multimap&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;maps.</emphasis>
1215 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
1217 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
1218 &#32;&#32;&#32;&#32;_Rb_tree_merge_helper&lt;_GLIBCXX_STD_C::multimap&lt;_Key,&#32;_Val,&#32;_Cmp1,&#32;_Alloc&gt;,
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Cmp2&gt;
1220 &#32;&#32;&#32;&#32;{
1221 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_GLIBCXX_STD_C::multimap&lt;_Key,&#32;_Val,&#32;_Cmp1,&#32;_Alloc&gt;;
1223 
1224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1225 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::map&lt;_Key,&#32;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__map)
1226 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_t;&#32;}
1227 
1228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1229 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::multimap&lt;_Key,&#32;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__map)
1230 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_t;&#32;}
1231 &#32;&#32;&#32;&#32;};
1232 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1233 
1234 _GLIBCXX_END_NAMESPACE_VERSION
1235 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1236 
1237 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_MULTIMAP_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
