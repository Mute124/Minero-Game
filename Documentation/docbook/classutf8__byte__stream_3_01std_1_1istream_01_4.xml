<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4" xml:lang="en-US">
<title>utf8_byte_stream&lt; std::istream &gt; Class Reference</title>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;toml.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link> (std::istream &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>) noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1aec883df2c800b0fb4f1cb9d4a05e872a">error</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a13dcf56d903304f2f04ee00e57019e77">eof</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4bef3ee5f3cda20c3f34400b385fdbc3">operator bool</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a7fcc47ac4e0d4e66156967bb41160235">peek_eof</link> () const noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4a646024d55f8ae14a9c38330549e95f">operator()</link> (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> *dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>) noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link> (std::istream &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>) noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1aec883df2c800b0fb4f1cb9d4a05e872a">error</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a13dcf56d903304f2f04ee00e57019e77">eof</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4bef3ee5f3cda20c3f34400b385fdbc3">operator bool</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a7fcc47ac4e0d4e66156967bb41160235">peek_eof</link> () const noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4a646024d55f8ae14a9c38330549e95f">operator()</link> (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> *dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>) noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731"/><section>
    <title>utf8_byte_stream()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>utf8_byte_stream</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>utf8_byte_stream</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> utf8_byte_stream&lt; std::istream &gt;::utf8_byte_stream (std::istream &amp; stream)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731"/><section>
    <title>utf8_byte_stream()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>utf8_byte_stream</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>utf8_byte_stream</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> utf8_byte_stream&lt; std::istream &gt;::utf8_byte_stream (std::istream &amp; stream)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a13dcf56d903304f2f04ee00e57019e77"/><section>
    <title>eof()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>eof</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>eof</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a13dcf56d903304f2f04ee00e57019e77"/><section>
    <title>eof()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>eof</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>eof</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1aec883df2c800b0fb4f1cb9d4a05e872a"/><section>
    <title>error()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>error</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::error ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1aec883df2c800b0fb4f1cb9d4a05e872a"/><section>
    <title>error()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>error</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>error</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::error ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4bef3ee5f3cda20c3f34400b385fdbc3"/><section>
    <title>operator bool()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4bef3ee5f3cda20c3f34400b385fdbc3"/><section>
    <title>operator bool()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4a646024d55f8ae14a9c38330549e95f"/><section>
    <title>operator()()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>operator()</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::operator() (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> * dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> num)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a4a646024d55f8ae14a9c38330549e95f"/><section>
    <title>operator()()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>operator()</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::operator() (<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> * dest, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> num)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a7fcc47ac4e0d4e66156967bb41160235"/><section>
    <title>peek_eof()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>peek_eof</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>peek_eof</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::peek_eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a7fcc47ac4e0d4e66156967bb41160235"/><section>
    <title>peek_eof()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>peek_eof</primary><secondary>utf8_byte_stream&lt; std::istream &gt;</secondary></indexterm>
<indexterm><primary>utf8_byte_stream&lt; std::istream &gt;</primary><secondary>peek_eof</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>&lt; std::istream &gt;::peek_eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/<link linkend="_parser_8inl">parser.inl</link>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
