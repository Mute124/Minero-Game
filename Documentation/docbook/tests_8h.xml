<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tests_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/tests/tests.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/tests/tests.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;settings.h&quot;<?linebreak?>#include &lt;toml++/toml.h&gt;<?linebreak?>#include &quot;lib_catch2.h&quot;<?linebreak?>#include &lt;sstream&gt;<?linebreak?></programlisting>Include dependency graph for tests.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tests_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tests_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structtype__tag">type_tag&lt; T &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classfunction__view_3_01_r_07_p_8_8_8_08_4">function_view&lt; R(P...)&gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacetoml">toml</link></para>

<para>The root namespace for all toml++ functions and types. </para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacestd">std</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch">Catch</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace_catch_1_1_detail">Catch::Detail</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_tests_8h_1a98820dac90323a121a7b6d6b3baaa194">UNICODE_LITERALS_OK</link>&#160;&#160;&#160;1</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_tests_8h_1a97e206c91453a91ae75fd45949d27a8f">FILE_LINE_ARGS</link>&#160;&#160;&#160;<link linkend="_tests_8h_1a583b12b24a91361c07fe5e1149c468a9">trim_file_path</link>(std::string_view{ __FILE__ }), __LINE__</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_tests_8h_1ac0b58aec362851fcee763553104f100e">BOM_PREFIX</link>&#160;&#160;&#160;&quot;\xEF\xBB\xBF&quot;</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_tests_8h_1aaa328e3be7660426b38cd1bb4953db8e">FORCE_FAIL</link>(...)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_tests_8h_1a0be0ace43556c064b9b8fbee5fa6aea8">CHECK_SYMMETRIC_RELOP</link>(lhs,  op,  rhs,  <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(lhs,  rhs)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(lhs,  rhs)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_tests_8h_1aa342e85e111fca130150cbebddfcb855">pss_func</link> = <link linkend="_classfunction__view">function_view</link>&lt; <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(<link linkend="_classtable">table</link> &amp;&amp;)&gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> constexpr <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_tests_8h_1af55dfa49a0a49ab99ccfa9664f6b5eb1">operator&quot;&quot;_sz</link> (unsigned long long n) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1affe07f4d089ea923a2aecfff4fe14029">parsing_should_succeed</link> (std::string_view test_file, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> test_line, std::string_view toml_str, <link linkend="_tests_8h_1aa342e85e111fca130150cbebddfcb855">pss_func</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func</link>={}, std::string_view source_path={})</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1a0c5d9cf96489a99ae8ab7b72ef06f04b">parsing_should_fail</link> (std::string_view test_file, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> test_line, std::string_view toml_str, source_index expected_failure_line=static_cast&lt; source_index &gt;(-1), source_index expected_failure_column=static_cast&lt; source_index &gt;(-1))</para>
</listitem>
            <listitem><para><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> constexpr std::string_view <link linkend="_tests_8h_1a583b12b24a91361c07fe5e1149c468a9">trim_file_path</link> (std::string_view <link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link> (std::string_view test_file, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> test_line, std::string_view value_str, const T &amp;expected)</para>
</listitem>
            <listitem><para>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1a0b79a871e023fedd20fe4d0294ec4d4f">parse_expected_value</link> (std::string_view, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, std::string_view, const int &amp;)</para>
</listitem>
            <listitem><para>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1a5b5e13b730c2e6b873cd95fb01c0cd3e">parse_expected_value</link> (std::string_view, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, std::string_view, const unsigned int &amp;)</para>
</listitem>
            <listitem><para>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1a5ebae8cfd7fbed4200e65ae407010436">parse_expected_value</link> (std::string_view, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, std::string_view, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &amp;)</para>
</listitem>
            <listitem><para>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1a1470f345e790256bce3a8bb34ca9034f">parse_expected_value</link> (std::string_view, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, std::string_view, const float &amp;)</para>
</listitem>
            <listitem><para>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1aefc0d3bdf670ac9d44342d46954f6f9c">parse_expected_value</link> (std::string_view, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, std::string_view, const double &amp;)</para>
</listitem>
            <listitem><para>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_tests_8h_1af49f1822ba586e46bab133be450f0022">parse_expected_value</link> (std::string_view, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, std::string_view, const std::string_view &amp;)</para>
</listitem>
            <listitem><para>template std::string <link linkend="_namespace_catch_1_1_detail_1a84aa484e594118061dd09de134a49cf7">Catch::Detail::stringify</link> (const <link linkend="_classnode__view">node_view</link>&lt; node &gt; &amp;)</para>
</listitem>
            <listitem><para>template std::string <link linkend="_namespace_catch_1_1_detail_1a6a0b1a147b0268f4e758e54a97e743c8">Catch::Detail::stringify</link> (const <link linkend="_classnode__view">node_view</link>&lt; const node &gt; &amp;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_tests_8h_1a742c76bbbcc2c09ffc9988274cdd9e27">TOML_DISABLE_SPAM_WARNINGS</link></para>
</listitem>
            <listitem><para><link linkend="_tests_8h_1a56df52d1a29373a87698fdc09a1c1c7a">TOML_DISABLE_ARITHMETIC_WARNINGS</link></para>
</listitem>
            <listitem><para><link linkend="_tests_8h_1a6c2a5b158c0a6d208edd992229d91d78">TOML_DISABLE_WARNINGS</link></para>
</listitem>
            <listitem><para><link linkend="_tests_8h_1a4e1f9eaceb60becba33cd64d3a85e3ed">TOML_ENABLE_WARNINGS</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_tests_8h_1ac0b58aec362851fcee763553104f100e"/><section>
    <title>BOM_PREFIX</title>
<indexterm><primary>BOM_PREFIX</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>BOM_PREFIX</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> BOM_PREFIX&#160;&#160;&#160;&quot;\xEF\xBB\xBF&quot;</computeroutput></para></section>
<anchor xml:id="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532"/><section>
    <title>CHECK_SYMMETRIC_EQUAL</title>
<indexterm><primary>CHECK_SYMMETRIC_EQUAL</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>CHECK_SYMMETRIC_EQUAL</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_SYMMETRIC_EQUAL( lhs,  rhs)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a0be0ace43556c064b9b8fbee5fa6aea8">CHECK_SYMMETRIC_RELOP</link>(lhs,&#32;==,&#32;rhs,&#32;<emphasis role="keyword">true</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;CHECK_SYMMETRIC_RELOP(lhs,&#32;!=,&#32;rhs,&#32;<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_tests_8h_1a842ec731389161b68a2be6828b13d651"/><section>
    <title>CHECK_SYMMETRIC_INEQUAL</title>
<indexterm><primary>CHECK_SYMMETRIC_INEQUAL</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>CHECK_SYMMETRIC_INEQUAL</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_SYMMETRIC_INEQUAL( lhs,  rhs)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a0be0ace43556c064b9b8fbee5fa6aea8">CHECK_SYMMETRIC_RELOP</link>(lhs,&#32;==,&#32;rhs,&#32;<emphasis role="keyword">false</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;CHECK_SYMMETRIC_RELOP(lhs,&#32;!=,&#32;rhs,&#32;<emphasis role="keyword">true</emphasis>)
</programlisting></section>
<anchor xml:id="_tests_8h_1a0be0ace43556c064b9b8fbee5fa6aea8"/><section>
    <title>CHECK_SYMMETRIC_RELOP</title>
<indexterm><primary>CHECK_SYMMETRIC_RELOP</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>CHECK_SYMMETRIC_RELOP</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_SYMMETRIC_RELOP( lhs,  op,  rhs,  <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1a836cca6b6ed3a1706353f6d1bca0935f">CHECK</link>(((lhs)op(rhs))&#32;==&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;CHECK(((rhs)op(lhs))&#32;==&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>))
</programlisting></section>
<anchor xml:id="_tests_8h_1a97e206c91453a91ae75fd45949d27a8f"/><section>
    <title>FILE_LINE_ARGS</title>
<indexterm><primary>FILE_LINE_ARGS</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>FILE_LINE_ARGS</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> FILE_LINE_ARGS&#160;&#160;&#160;<link linkend="_tests_8h_1a583b12b24a91361c07fe5e1149c468a9">trim_file_path</link>(std::string_view{ __FILE__ }), __LINE__</computeroutput></para></section>
<anchor xml:id="_tests_8h_1aaa328e3be7660426b38cd1bb4953db8e"/><section>
    <title>FORCE_FAIL</title>
<indexterm><primary>FORCE_FAIL</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>FORCE_FAIL</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> FORCE_FAIL( ...)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis
&#32;&#32;&#32;&#32;{

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::exit(-1);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;while&#32;(<emphasis role="keyword">false</emphasis>)
</programlisting></section>
<anchor xml:id="_tests_8h_1a98820dac90323a121a7b6d6b3baaa194"/><section>
    <title>UNICODE_LITERALS_OK</title>
<indexterm><primary>UNICODE_LITERALS_OK</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>UNICODE_LITERALS_OK</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> UNICODE_LITERALS_OK&#160;&#160;&#160;1</computeroutput></para></section>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_tests_8h_1aa342e85e111fca130150cbebddfcb855"/><section>
    <title>pss_func</title>
<indexterm><primary>pss_func</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>pss_func</secondary></indexterm>
<para><computeroutput>using <link linkend="_tests_8h_1aa342e85e111fca130150cbebddfcb855">pss_func</link> =  <link linkend="_classfunction__view">function_view</link>&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(<link linkend="_classtable">table</link>&amp;&amp;)&gt;</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_tests_8h_1af55dfa49a0a49ab99ccfa9664f6b5eb1"/><section>
    <title>operator&quot;&quot;_sz()</title>
<indexterm><primary>operator&quot;&quot;_sz</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>operator&quot;&quot;_sz</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> constexpr <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> operator&quot;&quot;_sz (unsigned long long n)<computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5"/><section>
    <title>parse_expected_value()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>parse_expected_value</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parse_expected_value</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_expected_value (std::string_view test_file, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> test_line, std::string_view value_str, const T &amp; expected)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tests_8h_aa009252a95ef7a00b3c5e8db48f5a3c5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_tests_8h_1a5ebae8cfd7fbed4200e65ae407010436"/><section>
    <title>parse_expected_value()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>parse_expected_value</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parse_expected_value</secondary></indexterm>
<para><computeroutput>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_expected_value (std::string_view , <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> , std::string_view , const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &amp; )<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="_tests_8h_1aefc0d3bdf670ac9d44342d46954f6f9c"/><section>
    <title>parse_expected_value()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>parse_expected_value</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parse_expected_value</secondary></indexterm>
<para><computeroutput>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_expected_value (std::string_view , <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> , std::string_view , const double &amp; )<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="_tests_8h_1a1470f345e790256bce3a8bb34ca9034f"/><section>
    <title>parse_expected_value()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>parse_expected_value</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parse_expected_value</secondary></indexterm>
<para><computeroutput>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_expected_value (std::string_view , <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> , std::string_view , const float &amp; )<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="_tests_8h_1a0b79a871e023fedd20fe4d0294ec4d4f"/><section>
    <title>parse_expected_value()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>parse_expected_value</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parse_expected_value</secondary></indexterm>
<para><computeroutput>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_expected_value (std::string_view , <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> , std::string_view , const int &amp; )<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="_tests_8h_1af49f1822ba586e46bab133be450f0022"/><section>
    <title>parse_expected_value()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>parse_expected_value</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parse_expected_value</secondary></indexterm>
<para><computeroutput>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_expected_value (std::string_view , <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> , std::string_view , const std::string_view &amp; )<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="_tests_8h_1a5b5e13b730c2e6b873cd95fb01c0cd3e"/><section>
    <title>parse_expected_value()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>parse_expected_value</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parse_expected_value</secondary></indexterm>
<para><computeroutput>template <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parse_expected_value (std::string_view , <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> , std::string_view , const unsigned int &amp; )<computeroutput>[extern]</computeroutput></computeroutput></para></section>
<anchor xml:id="_tests_8h_1a0c5d9cf96489a99ae8ab7b72ef06f04b"/><section>
    <title>parsing_should_fail()</title>
<indexterm><primary>parsing_should_fail</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parsing_should_fail</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parsing_should_fail (std::string_view test_file, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> test_line, std::string_view toml_str, source_index expected_failure_line = <computeroutput>static_cast&lt;&#160;source_index&#160;&gt;(-1)</computeroutput>
, source_index expected_failure_column = <computeroutput>static_cast&lt;&#160;source_index&#160;&gt;(-1)</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tests_8h_a0c5d9cf96489a99ae8ab7b72ef06f04b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_tests_8h_1affe07f4d089ea923a2aecfff4fe14029"/><section>
    <title>parsing_should_succeed()</title>
<indexterm><primary>parsing_should_succeed</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>parsing_should_succeed</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> parsing_should_succeed (std::string_view test_file, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> test_line, std::string_view toml_str, <link linkend="_tests_8h_1aa342e85e111fca130150cbebddfcb855">pss_func</link> &amp;&amp; func = <computeroutput>{}</computeroutput>
, std::string_view source_path = <computeroutput>{}</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tests_8h_affe07f4d089ea923a2aecfff4fe14029_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="tests_8h_affe07f4d089ea923a2aecfff4fe14029_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_tests_8h_1a583b12b24a91361c07fe5e1149c468a9"/><section>
    <title>trim_file_path()</title>
<indexterm><primary>trim_file_path</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>trim_file_path</secondary></indexterm>
<para><computeroutput><link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link> constexpr std::string_view trim_file_path (std::string_view sv)<computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_tests_8h_1a56df52d1a29373a87698fdc09a1c1c7a"/><section>
    <title>TOML_DISABLE_ARITHMETIC_WARNINGS</title>
<indexterm><primary>TOML_DISABLE_ARITHMETIC_WARNINGS</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>TOML_DISABLE_ARITHMETIC_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_DISABLE_ARITHMETIC_WARNINGS</computeroutput></para></section>
<anchor xml:id="_tests_8h_1a742c76bbbcc2c09ffc9988274cdd9e27"/><section>
    <title>TOML_DISABLE_SPAM_WARNINGS</title>
<indexterm><primary>TOML_DISABLE_SPAM_WARNINGS</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>TOML_DISABLE_SPAM_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_DISABLE_SPAM_WARNINGS</computeroutput></para></section>
<anchor xml:id="_tests_8h_1a6c2a5b158c0a6d208edd992229d91d78"/><section>
    <title>TOML_DISABLE_WARNINGS</title>
<indexterm><primary>TOML_DISABLE_WARNINGS</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>TOML_DISABLE_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_DISABLE_WARNINGS</computeroutput></para></section>
<anchor xml:id="_tests_8h_1a4e1f9eaceb60becba33cd64d3a85e3ed"/><section>
    <title>TOML_ENABLE_WARNINGS</title>
<indexterm><primary>TOML_ENABLE_WARNINGS</primary><secondary>tests.h</secondary></indexterm>
<indexterm><primary>tests.h</primary><secondary>TOML_ENABLE_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_ENABLE_WARNINGS</computeroutput></para></section>
</section>
</section>
