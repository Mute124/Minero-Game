<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2max__size__type_8h_source" xml:lang="en-US">
<title>max_size_type.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/max_size_type.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;&lt;max_size_type.h&gt;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2019-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_MAX_SIZE_TYPE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MAX_SIZE_TYPE_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;ext/numeric_traits.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;numbers&gt;</emphasis>
38 
39 <emphasis role="comment">//&#32;This&#32;header&#32;implements&#32;unsigned&#32;and&#32;signed&#32;integer-class&#32;types&#32;(as&#32;per</emphasis>
40 <emphasis role="comment">//&#32;[iterator.concept.winc])&#32;that&#32;are&#32;one&#32;bit&#32;wider&#32;than&#32;the&#32;widest&#32;supported</emphasis>
41 <emphasis role="comment">//&#32;integer&#32;type.</emphasis>
42 <emphasis role="comment">//</emphasis>
43 <emphasis role="comment">//&#32;The&#32;set&#32;of&#32;integer&#32;types&#32;we&#32;consider&#32;includes&#32;__int128&#32;and&#32;unsigned&#32;__int128</emphasis>
44 <emphasis role="comment">//&#32;(when&#32;they&#32;exist),&#32;even&#32;though&#32;they&#32;are&#32;really&#32;integer&#32;types&#32;only&#32;in&#32;GNU</emphasis>
45 <emphasis role="comment">//&#32;mode.&#32;&#32;This&#32;is&#32;to&#32;obtain&#32;a&#32;consistent&#32;ABI&#32;for&#32;these&#32;integer-class&#32;types</emphasis>
46 <emphasis role="comment">//&#32;across&#32;strict&#32;mode&#32;and&#32;GNU&#32;mode.</emphasis>
47 
48 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
49 {
50 _GLIBCXX_BEGIN_NAMESPACE_VERSION
51 
52 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
53 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>numeric_limits;
54 
55 <emphasis role="keyword">namespace&#32;</emphasis>ranges
56 {
57 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
58 &#32;&#32;{
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__max_size_type
60 &#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
62 &#32;&#32;&#32;&#32;&#32;&#32;__max_size_type()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
66 &#32;&#32;&#32;&#32;__max_size_type(_Tp&#32;__i)&#32;noexcept
67 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_val(__i),&#32;_M_msb(__i&#32;&lt;&#32;0)
68 &#32;&#32;&#32;&#32;{&#32;}
69 
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
71 &#32;&#32;&#32;&#32;&#32;&#32;__max_size_type(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__d)&#32;<emphasis role="keyword">noexcept</emphasis>;
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Tp()&#32;const&#32;noexcept
76 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_val;&#32;}
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
80 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_val&#32;!=&#32;0&#32;||&#32;_M_msb&#32;!=&#32;0;&#32;}
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
83 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>()&#32;const&#32;noexcept
84 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
87 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>()&#32;const&#32;noexcept
88 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__max_size_type{~_M_val,&#32;!_M_msb};&#32;}
89 
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
91 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>()&#32;const&#32;noexcept
92 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>()&#32;+&#32;1;&#32;}
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
95 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;noexcept
96 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;1;&#32;}
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
99 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
102 &#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
104 &#32;&#32;&#32;&#32;&#32;&#32;}
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
107 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;noexcept
108 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;-=&#32;1;&#32;}
109 
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
111 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;{
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
114 &#32;&#32;&#32;&#32;--*<emphasis role="keyword">this</emphasis>;
115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
116 &#32;&#32;&#32;&#32;&#32;&#32;}
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
119 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__sum&#32;=&#32;_M_val&#32;+&#32;__r._M_val;
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__overflow&#32;=&#32;(__sum&#32;&lt;&#32;_M_val);
123 &#32;&#32;&#32;&#32;_M_msb&#32;=&#32;_M_msb&#32;^&#32;__r._M_msb&#32;^&#32;__overflow;
124 &#32;&#32;&#32;&#32;_M_val&#32;=&#32;__sum;
125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
126 &#32;&#32;&#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
129 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
130 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;-__r;&#32;}
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
133 &#32;&#32;&#32;&#32;&#32;&#32;operator*=(__max_size_type&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&#32;__threshold
136 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__rep(1)&#32;&lt;&lt;&#32;(_S_rep_bits&#32;/&#32;2&#32;-&#32;1);
137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_val&#32;&lt;&#32;__threshold&#32;&amp;&amp;&#32;__r&#32;&lt;&#32;__threshold)
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;both&#32;operands&#32;are&#32;below&#32;this&#32;threshold&#32;then&#32;the</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multiplication&#32;can&#32;be&#32;safely&#32;computed&#32;in&#32;the&#32;base&#32;precision.</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;=&#32;_M_val&#32;*&#32;__r._M_val;
141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
142 &#32;&#32;&#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;perform&#32;the&#32;multiplication&#32;in&#32;four&#32;steps,&#32;by</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decomposing&#32;the&#32;LHS&#32;and&#32;the&#32;RHS&#32;into&#32;2*x+a&#32;and&#32;2*y+b,</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;respectively,&#32;and&#32;computing&#32;4*x*y&#32;+&#32;2*x*b&#32;+&#32;2*y*a&#32;+&#32;a*b.</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__lsb&#32;=&#32;_M_val&#32;&amp;&#32;1;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__rlsb&#32;=&#32;__r._M_val&#32;&amp;&#32;1;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&gt;&gt;=&#32;1;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;&gt;&gt;=&#32;1;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;=&#32;(2&#32;*&#32;_M_val&#32;*&#32;__r._M_val
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_M_val&#32;*&#32;__rlsb&#32;+&#32;__r._M_val&#32;*&#32;__lsb);
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;=&#32;1;
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;__rlsb&#32;*&#32;__lsb;
154 &#32;&#32;&#32;&#32;&#32;&#32;}
155 
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
157 &#32;&#32;&#32;&#32;&#32;&#32;}
158 
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
160 &#32;&#32;&#32;&#32;&#32;&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;__glibcxx_assert(__r&#32;!=&#32;0);
163 
164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_msb&#32;&amp;&amp;&#32;!__r._M_msb)&#32;[[likely]]
165 &#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;/=&#32;__r._M_val;
166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_msb&#32;&amp;&amp;&#32;__r._M_msb)
167 &#32;&#32;&#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;=&#32;(_M_val&#32;&gt;=&#32;__r._M_val);
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_msb&#32;=&#32;0;
170 &#32;&#32;&#32;&#32;&#32;&#32;}
171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_msb&#32;&amp;&amp;&#32;__r._M_msb)
172 &#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;=&#32;0;
173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_msb&#32;&amp;&amp;&#32;!__r._M_msb)
174 &#32;&#32;&#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;non-trivial&#32;case:&#32;the&#32;dividend&#32;has&#32;its&#32;MSB&#32;set&#32;and&#32;the</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;divisor&#32;doesn&apos;t.&#32;&#32;In&#32;this&#32;case&#32;we&#32;compute&#32;((LHS/2)/RHS)*2</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;the&#32;base&#32;precision.&#32;&#32;This&#32;quantity&#32;is&#32;either&#32;the&#32;true</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;quotient&#32;or&#32;one&#32;less&#32;than&#32;the&#32;true&#32;quotient.</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__orig&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&gt;&gt;=&#32;1;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;/=&#32;__r._M_val;
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&lt;=&#32;1;
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__orig&#32;-&#32;*<emphasis role="keyword">this</emphasis>&#32;*&#32;__r&#32;&gt;=&#32;__r)
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++_M_val;
185 &#32;&#32;&#32;&#32;&#32;&#32;}
186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
187 &#32;&#32;&#32;&#32;&#32;&#32;}
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
190 &#32;&#32;&#32;&#32;&#32;&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
191 &#32;&#32;&#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_msb&#32;&amp;&amp;&#32;!__r._M_msb)&#32;[[likely]]
193 &#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;%=&#32;__r._M_val;
194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;-=&#32;(*<emphasis role="keyword">this</emphasis>&#32;/&#32;__r)&#32;*&#32;__r;
196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
197 &#32;&#32;&#32;&#32;&#32;&#32;}
198 
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
200 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;__glibcxx_assert(__r&#32;&lt;=&#32;_S_rep_bits);
203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__r&#32;!=&#32;0)
204 &#32;&#32;&#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_msb&#32;=&#32;(_M_val&#32;&gt;&gt;&#32;(_S_rep_bits&#32;-&#32;__r._M_val))&#32;&amp;&#32;1;
206 
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__r._M_val&#32;==&#32;_S_rep_bits)&#32;[[unlikely]]
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;=&#32;0;
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;&lt;&lt;=&#32;__r._M_val;
211 &#32;&#32;&#32;&#32;&#32;&#32;}
212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
213 &#32;&#32;&#32;&#32;&#32;&#32;}
214 
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
216 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;__glibcxx_assert(__r&#32;&lt;=&#32;_S_rep_bits);
219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__r&#32;!=&#32;0)
220 &#32;&#32;&#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__r._M_val&#32;==&#32;_S_rep_bits)&#32;[[unlikely]]
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;=&#32;0;
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;&gt;&gt;=&#32;__r._M_val;
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_msb)&#32;[[unlikely]]
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_val&#32;|=&#32;__rep(1)&#32;&lt;&lt;&#32;(_S_rep_bits&#32;-&#32;__r._M_val);
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_msb&#32;=&#32;0;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
231 &#32;&#32;&#32;&#32;&#32;&#32;}
232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
233 &#32;&#32;&#32;&#32;&#32;&#32;}
234 
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
236 &#32;&#32;&#32;&#32;&#32;&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;{
238 &#32;&#32;&#32;&#32;_M_val&#32;&amp;=&#32;__r._M_val;
239 &#32;&#32;&#32;&#32;_M_msb&#32;&amp;=&#32;__r._M_msb;
240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
241 &#32;&#32;&#32;&#32;&#32;&#32;}
242 
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
244 &#32;&#32;&#32;&#32;&#32;&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;_M_val&#32;|=&#32;__r._M_val;
247 &#32;&#32;&#32;&#32;_M_msb&#32;|=&#32;__r._M_msb;
248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
249 &#32;&#32;&#32;&#32;&#32;&#32;}
250 
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type&amp;
252 &#32;&#32;&#32;&#32;&#32;&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
253 &#32;&#32;&#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;_M_val&#32;^=&#32;__r._M_val;
255 &#32;&#32;&#32;&#32;_M_msb&#32;^=&#32;__r._M_msb;
256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
257 &#32;&#32;&#32;&#32;&#32;&#32;}
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
261 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
262 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;+&#32;__b));&#32;}
263 
264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
266 &#32;&#32;&#32;&#32;operator-=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
267 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;-&#32;__b));&#32;}
268 
269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
271 &#32;&#32;&#32;&#32;operator*=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
272 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;*&#32;__b));&#32;}
273 
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
275 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
276 &#32;&#32;&#32;&#32;operator/=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
277 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;/&#32;__b));&#32;}
278 
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
281 &#32;&#32;&#32;&#32;operator%=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
282 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;%&#32;__b));&#32;}
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
285 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
286 &#32;&#32;&#32;&#32;operator&amp;=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
287 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;&amp;&#32;__b));&#32;}
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
291 &#32;&#32;&#32;&#32;operator|=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
292 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;|&#32;__b));&#32;}
293 
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
296 &#32;&#32;&#32;&#32;operator^=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
297 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;^&#32;__b));&#32;}
298 
299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
301 &#32;&#32;&#32;&#32;operator&lt;&lt;=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
302 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;&lt;&lt;&#32;__b));&#32;}
303 
304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
306 &#32;&#32;&#32;&#32;operator&gt;&gt;=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
307 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;&gt;&gt;&#32;__b));&#32;}
308 
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
310 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;{
312 &#32;&#32;&#32;&#32;__l&#32;+=&#32;__r;
313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
314 &#32;&#32;&#32;&#32;&#32;&#32;}
315 
316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
317 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;__l&#32;-=&#32;__r;
320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
321 &#32;&#32;&#32;&#32;&#32;&#32;}
322 
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
324 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;{
326 &#32;&#32;&#32;&#32;__l&#32;*=&#32;__r;
327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
328 &#32;&#32;&#32;&#32;&#32;&#32;}
329 
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
331 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a3d4e77a9763e858fed5eed89a6f2637f">operator/</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;{
333 &#32;&#32;&#32;&#32;__l&#32;/=&#32;__r;
334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
335 &#32;&#32;&#32;&#32;&#32;&#32;}
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
338 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1ad13992bdf0dd6f817de965e28f4ae2bf">operator%</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;{
340 &#32;&#32;&#32;&#32;__l&#32;%=&#32;__r;
341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
342 &#32;&#32;&#32;&#32;&#32;&#32;}
343 
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
345 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
346 &#32;&#32;&#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;__l&#32;&lt;&lt;=&#32;__r;
348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
349 &#32;&#32;&#32;&#32;&#32;&#32;}
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
352 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
353 &#32;&#32;&#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;__l&#32;&gt;&gt;=&#32;__r;
355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
356 &#32;&#32;&#32;&#32;&#32;&#32;}
357 
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
359 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
360 &#32;&#32;&#32;&#32;&#32;&#32;{
361 &#32;&#32;&#32;&#32;__l&#32;&amp;=&#32;__r;
362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
363 &#32;&#32;&#32;&#32;&#32;&#32;}
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
366 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
367 &#32;&#32;&#32;&#32;&#32;&#32;{
368 &#32;&#32;&#32;&#32;__l&#32;|=&#32;__r;
369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
370 &#32;&#32;&#32;&#32;&#32;&#32;}
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_size_type
373 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(__max_size_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
374 &#32;&#32;&#32;&#32;&#32;&#32;{
375 &#32;&#32;&#32;&#32;__l&#32;^=&#32;__r;
376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
377 &#32;&#32;&#32;&#32;&#32;&#32;}
378 
379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
380 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l._M_val&#32;==&#32;__r._M_val&#32;&amp;&amp;&#32;__l._M_msb&#32;==&#32;__r._M_msb;&#32;}
382 
383 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;strong_ordering
385 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
386 &#32;&#32;&#32;&#32;&#32;&#32;{
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__l._M_msb&#32;^&#32;__r._M_msb)
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l._M_msb&#32;?&#32;strong_ordering::greater&#32;:&#32;strong_ordering::less;
389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l._M_val&#32;&lt;=&gt;&#32;__r._M_val;
391 &#32;&#32;&#32;&#32;&#32;&#32;}
392 <emphasis role="preprocessor">#else</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
394 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
395 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__l&#32;==&#32;__r);&#32;}
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
399 &#32;&#32;&#32;&#32;&#32;&#32;{
400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__l._M_msb&#32;==&#32;__r._M_msb)
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l._M_val&#32;&lt;&#32;__r._M_val;
402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r._M_msb;
404 &#32;&#32;&#32;&#32;&#32;&#32;}
405 
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
407 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r&#32;&lt;&#32;__l;&#32;}
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
411 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
412 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__l&#32;&gt;&#32;__r);&#32;}
413 
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
416 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r&#32;&lt;=&#32;__l;&#32;}
417 <emphasis role="preprocessor">#endif</emphasis>
418 
419 <emphasis role="preprocessor">#if&#32;__SIZEOF_INT128__</emphasis>
420 &#32;&#32;&#32;&#32;&#32;&#32;__extension__
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__rep&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int128;
422 <emphasis role="preprocessor">#else</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__rep&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;long;
424 <emphasis role="preprocessor">#endif</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_rep_bits&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__rep)&#32;*&#32;__CHAR_BIT__;
426 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
427 &#32;&#32;&#32;&#32;&#32;&#32;__rep&#32;_M_val&#32;=&#32;0;
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;_M_msb:1&#32;=&#32;0;
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;__max_size_type(__rep&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__msb)&#32;noexcept
432 &#32;&#32;&#32;&#32;:&#32;_M_val(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;_M_msb(__msb)
433 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
434 
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;__max_diff_type;
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::numeric_limits&lt;__max_size_type&gt;;
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::numeric_limits&lt;__max_diff_type&gt;;
438 &#32;&#32;&#32;&#32;};
439 
440 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__max_diff_type
441 &#32;&#32;&#32;&#32;{
442 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
443 &#32;&#32;&#32;&#32;&#32;&#32;__max_diff_type()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
444 
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
446 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
447 &#32;&#32;&#32;&#32;__max_diff_type(_Tp&#32;__i)&#32;noexcept
448 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_rep(__i)
449 &#32;&#32;&#32;&#32;{&#32;}
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
452 &#32;&#32;&#32;&#32;&#32;&#32;__max_diff_type(<emphasis role="keyword">const</emphasis>&#32;__max_size_type&amp;&#32;__d)&#32;noexcept
453 &#32;&#32;&#32;&#32;:&#32;_M_rep(__d)
454 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
455 
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
458 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Tp()&#32;const&#32;noexcept
459 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(_M_rep);&#32;}
460 
461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
463 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep&#32;!=&#32;0;&#32;}
464 
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
466 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>()&#32;const&#32;noexcept
467 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
468 
469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
470 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>()&#32;const&#32;noexcept
471 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__max_diff_type(-_M_rep);&#32;}
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
474 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>()&#32;const&#32;noexcept
475 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__max_diff_type(~_M_rep);&#32;}
476 
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
478 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;noexcept
479 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;1;&#32;}
480 
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
482 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;{
484 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
485 &#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
486 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
487 &#32;&#32;&#32;&#32;&#32;&#32;}
488 
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
490 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;noexcept
491 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;-=&#32;1;&#32;}
492 
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
494 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
495 &#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
497 &#32;&#32;&#32;&#32;--*<emphasis role="keyword">this</emphasis>;
498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
499 &#32;&#32;&#32;&#32;&#32;&#32;}
500 
501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
502 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
503 &#32;&#32;&#32;&#32;&#32;&#32;{
504 &#32;&#32;&#32;&#32;_M_rep&#32;+=&#32;__r._M_rep;
505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
506 &#32;&#32;&#32;&#32;&#32;&#32;}
507 
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
509 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
510 &#32;&#32;&#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;_M_rep&#32;-=&#32;__r._M_rep;
512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
513 &#32;&#32;&#32;&#32;&#32;&#32;}
514 
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
516 &#32;&#32;&#32;&#32;&#32;&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
517 &#32;&#32;&#32;&#32;&#32;&#32;{
518 &#32;&#32;&#32;&#32;_M_rep&#32;*=&#32;__r._M_rep;
519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
520 &#32;&#32;&#32;&#32;&#32;&#32;}
521 
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
523 &#32;&#32;&#32;&#32;&#32;&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
524 &#32;&#32;&#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;__glibcxx_assert&#32;(__r&#32;!=&#32;0);
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg&#32;=&#32;*<emphasis role="keyword">this</emphasis>&#32;&lt;&#32;0;
527 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__rneg&#32;=&#32;__r&#32;&lt;&#32;0;
528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__neg&#32;&amp;&amp;&#32;!__rneg)
529 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep&#32;=&#32;_M_rep&#32;/&#32;__r._M_rep;
530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__neg&#32;&amp;&amp;&#32;__rneg)
531 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep&#32;=&#32;-_M_rep&#32;/&#32;-__r._M_rep;
532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__neg&#32;&amp;&amp;&#32;!__rneg)
533 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep&#32;=&#32;-(-_M_rep&#32;/&#32;__r._M_rep);
534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
535 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep&#32;=&#32;-(_M_rep&#32;/&#32;-__r._M_rep);
536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*this&#32;;
537 &#32;&#32;&#32;&#32;&#32;&#32;}
538 
539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
540 &#32;&#32;&#32;&#32;&#32;&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
541 &#32;&#32;&#32;&#32;&#32;&#32;{
542 &#32;&#32;&#32;&#32;__glibcxx_assert&#32;(__r&#32;!=&#32;0);
543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;__r&#32;&gt;&#32;0)
544 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep&#32;%=&#32;__r._M_rep;
545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
546 &#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;-=&#32;(*<emphasis role="keyword">this</emphasis>&#32;/&#32;__r)&#32;*&#32;__r;
547 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
548 &#32;&#32;&#32;&#32;&#32;&#32;}
549 
550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
551 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
552 &#32;&#32;&#32;&#32;&#32;&#32;{
553 &#32;&#32;&#32;&#32;_M_rep.operator&lt;&lt;=(__r._M_rep);
554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
555 &#32;&#32;&#32;&#32;&#32;&#32;}
556 
557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
558 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
559 &#32;&#32;&#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Arithmetic&#32;right&#32;shift.</emphasis>
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__msb&#32;=&#32;_M_rep._M_msb;
562 &#32;&#32;&#32;&#32;_M_rep&#32;&gt;&gt;=&#32;__r._M_rep;
563 &#32;&#32;&#32;&#32;_M_rep._M_msb&#32;|=&#32;__msb;
564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
565 &#32;&#32;&#32;&#32;&#32;&#32;}
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
568 &#32;&#32;&#32;&#32;&#32;&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;{
570 &#32;&#32;&#32;&#32;_M_rep&#32;&amp;=&#32;__r._M_rep;
571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
572 &#32;&#32;&#32;&#32;&#32;&#32;}
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
575 &#32;&#32;&#32;&#32;&#32;&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;{
577 &#32;&#32;&#32;&#32;_M_rep&#32;|=&#32;__r._M_rep;
578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
579 &#32;&#32;&#32;&#32;&#32;&#32;}
580 
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type&amp;
582 &#32;&#32;&#32;&#32;&#32;&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
583 &#32;&#32;&#32;&#32;&#32;&#32;{
584 &#32;&#32;&#32;&#32;_M_rep&#32;^=&#32;__r._M_rep;
585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
586 &#32;&#32;&#32;&#32;&#32;&#32;}
587 
588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
589 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
590 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
591 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;+&#32;__b));&#32;}
592 
593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
594 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
595 &#32;&#32;&#32;&#32;operator-=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
596 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;-&#32;__b));&#32;}
597 
598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
599 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
600 &#32;&#32;&#32;&#32;operator*=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
601 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;*&#32;__b));&#32;}
602 
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
604 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
605 &#32;&#32;&#32;&#32;operator/=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
606 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;/&#32;__b));&#32;}
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
609 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
610 &#32;&#32;&#32;&#32;operator%=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
611 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;%&#32;__b));&#32;}
612 
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
614 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
615 &#32;&#32;&#32;&#32;operator&amp;=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
616 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;&amp;&#32;__b));&#32;}
617 
618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
619 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
620 &#32;&#32;&#32;&#32;operator|=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
621 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;|&#32;__b));&#32;}
622 
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
624 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
625 &#32;&#32;&#32;&#32;operator^=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
626 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;^&#32;__b));&#32;}
627 
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
629 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
630 &#32;&#32;&#32;&#32;operator&lt;&lt;=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
631 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;&lt;&lt;&#32;__b));&#32;}
632 
633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;integral&lt;_Tp&gt;&#32;||&#32;__is_int128&lt;_Tp&gt;
634 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
635 &#32;&#32;&#32;&#32;operator&gt;&gt;=(_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
636 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a&#32;&gt;&gt;&#32;__b));&#32;}
637 
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
639 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;{
641 &#32;&#32;&#32;&#32;__l&#32;+=&#32;__r;
642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
643 &#32;&#32;&#32;&#32;&#32;&#32;}
644 
645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
646 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
647 &#32;&#32;&#32;&#32;&#32;&#32;{
648 &#32;&#32;&#32;&#32;__l&#32;-=&#32;__r;
649 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
650 &#32;&#32;&#32;&#32;&#32;&#32;}
651 
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
653 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
654 &#32;&#32;&#32;&#32;&#32;&#32;{
655 &#32;&#32;&#32;&#32;__l&#32;*=&#32;__r;
656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
657 &#32;&#32;&#32;&#32;&#32;&#32;}
658 
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
660 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a3d4e77a9763e858fed5eed89a6f2637f">operator/</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
661 &#32;&#32;&#32;&#32;&#32;&#32;{
662 &#32;&#32;&#32;&#32;__l&#32;/=&#32;__r;
663 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
664 &#32;&#32;&#32;&#32;&#32;&#32;}
665 
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
667 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1ad13992bdf0dd6f817de965e28f4ae2bf">operator%</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
668 &#32;&#32;&#32;&#32;&#32;&#32;{
669 &#32;&#32;&#32;&#32;__l&#32;%=&#32;__r;
670 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
671 &#32;&#32;&#32;&#32;&#32;&#32;}
672 
673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
674 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
675 &#32;&#32;&#32;&#32;&#32;&#32;{
676 &#32;&#32;&#32;&#32;__l&#32;&lt;&lt;=&#32;__r;
677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
678 &#32;&#32;&#32;&#32;&#32;&#32;}
679 
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
681 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
682 &#32;&#32;&#32;&#32;&#32;&#32;{
683 &#32;&#32;&#32;&#32;__l&#32;&gt;&gt;=&#32;__r;
684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
685 &#32;&#32;&#32;&#32;&#32;&#32;}
686 
687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
688 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;{
690 &#32;&#32;&#32;&#32;__l&#32;&amp;=&#32;__r;
691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
692 &#32;&#32;&#32;&#32;&#32;&#32;}
693 
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
695 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
696 &#32;&#32;&#32;&#32;&#32;&#32;{
697 &#32;&#32;&#32;&#32;__l&#32;|=&#32;__r;
698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
699 &#32;&#32;&#32;&#32;&#32;&#32;}
700 
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_diff_type
702 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(__max_diff_type&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
703 &#32;&#32;&#32;&#32;&#32;&#32;{
704 &#32;&#32;&#32;&#32;__l&#32;^=&#32;__r;
705 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l;
706 &#32;&#32;&#32;&#32;&#32;&#32;}
707 
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
709 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
710 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__l._M_rep&#32;==&#32;__r._M_rep;&#32;}
711 
712 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;strong_ordering
714 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
715 &#32;&#32;&#32;&#32;&#32;&#32;{
716 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lsign&#32;=&#32;_M_rep._M_msb;
717 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__rsign&#32;=&#32;__r._M_rep._M_msb;
718 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__lsign&#32;^&#32;__rsign)
719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lsign&#32;?&#32;strong_ordering::less&#32;:&#32;strong_ordering::greater;
720 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep&#32;&lt;=&gt;&#32;__r._M_rep;
722 &#32;&#32;&#32;&#32;&#32;&#32;}
723 <emphasis role="preprocessor">#else</emphasis>
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
725 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
726 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__l&#32;==&#32;__r);&#32;}
727 
728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
729 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
730 &#32;&#32;&#32;&#32;&#32;&#32;{
731 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__lsign&#32;=&#32;_M_rep._M_msb;
732 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__rsign&#32;=&#32;__r._M_rep._M_msb;
733 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__lsign&#32;^&#32;__rsign)
734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lsign;
735 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep&#32;&lt;&#32;__r._M_rep;
737 &#32;&#32;&#32;&#32;&#32;&#32;}
738 
739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
740 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
741 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r&#32;&lt;&#32;__l;&#32;}
742 
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
745 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__r&#32;&lt;&#32;__l);&#32;}
746 
747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
749 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__l&#32;&lt;&#32;__r);&#32;}
750 <emphasis role="preprocessor">#endif</emphasis>
751 
752 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
753 &#32;&#32;&#32;&#32;&#32;&#32;__max_size_type&#32;_M_rep&#32;=&#32;0;
754 
755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__max_size_type;
756 &#32;&#32;&#32;&#32;};
757 
758 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
759 &#32;&#32;&#32;&#32;__max_size_type::__max_size_type(<emphasis role="keyword">const</emphasis>&#32;__max_diff_type&amp;&#32;__d)&#32;noexcept
760 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__max_size_type(__d._M_rep)
761 &#32;&#32;&#32;&#32;{&#32;}
762 
763 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
764 }&#32;<emphasis role="comment">//&#32;namespace&#32;ranges</emphasis>
765 
766 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
767 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>numeric_limits&lt;ranges::__detail::__max_size_type&gt;
768 &#32;&#32;&#32;&#32;{
769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp&#32;=&#32;ranges::__detail::__max_size_type;
770 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_specialized&#32;=&#32;<emphasis role="keyword">true</emphasis>;
771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_signed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_exact&#32;=&#32;<emphasis role="keyword">true</emphasis>;
774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;digits
775 &#32;&#32;&#32;&#32;=&#32;__gnu_cxx::__int_traits&lt;_Sp::__rep&gt;::__digits&#32;+&#32;1;
776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;digits10
777 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(digits&#32;*&#32;numbers::ln2&#32;/&#32;numbers::ln10);
778 
779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Sp
780 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()&#32;noexcept
781 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
782 
783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Sp
784 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()&#32;noexcept
785 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Sp(<emphasis role="keyword">static_cast&lt;</emphasis>_Sp::__rep<emphasis role="keyword">&gt;</emphasis>(-1),&#32;1);&#32;}
786 
787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Sp
788 &#32;&#32;&#32;&#32;&#32;&#32;lowest()&#32;noexcept
789 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>();&#32;}
790 &#32;&#32;&#32;&#32;};
791 
792 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
793 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>numeric_limits&lt;ranges::__detail::__max_diff_type&gt;
794 &#32;&#32;&#32;&#32;{
795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Dp&#32;=&#32;ranges::__detail::__max_diff_type;
796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp&#32;=&#32;ranges::__detail::__max_size_type;
797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_specialized&#32;=&#32;<emphasis role="keyword">true</emphasis>;
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_signed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_exact&#32;=&#32;<emphasis role="keyword">true</emphasis>;
801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;digits&#32;=&#32;numeric_limits&lt;_Sp&gt;::digits&#32;-&#32;1;
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;digits10
803 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(digits&#32;*&#32;numbers::ln2&#32;/&#32;numbers::ln10);
804 
805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Dp
806 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()&#32;noexcept
807 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Dp(_Sp(0,&#32;1));&#32;}
808 
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Dp
810 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()&#32;noexcept
811 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Dp(_Sp(<emphasis role="keyword">static_cast&lt;</emphasis>_Sp::__rep<emphasis role="keyword">&gt;</emphasis>(-1),&#32;0));&#32;}
812 
813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Dp
814 &#32;&#32;&#32;&#32;&#32;&#32;lowest()&#32;noexcept
815 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>();&#32;}
816 &#32;&#32;&#32;&#32;};
817 
818 _GLIBCXX_END_NAMESPACE_VERSION
819 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
820 
821 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20&#32;&amp;&amp;&#32;library&#32;concepts</emphasis>
822 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_MAX_SIZE_TYPE_H</emphasis>
</programlisting></section>
