<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner" xml:lang="en-US">
<title>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt; Struct Template Reference</title>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;unseq_backend_simd.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a7e8bcc3679f3b7d77efdb871fa8ad0eb">_Combiner</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1af531fb64193b931a4fba10d45293115e">_Combiner</link> (const _Tp &amp;<link linkend="_classvalue">value</link>, const _BinaryOp *bin_op)</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a02bd96ecf308ee199321c8c1d1cf8be3">_Combiner</link> (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link> &amp;__obj)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a14e3f7a2c7c1cf6c59776f60642482b4">operator()</link> (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link> &amp;__obj)</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a7e8bcc3679f3b7d77efdb871fa8ad0eb">_Combiner</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1af531fb64193b931a4fba10d45293115e">_Combiner</link> (const _Tp &amp;<link linkend="_classvalue">value</link>, const _BinaryOp *bin_op)</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a02bd96ecf308ee199321c8c1d1cf8be3">_Combiner</link> (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link> &amp;__obj)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a14e3f7a2c7c1cf6c59776f60642482b4">operator()</link> (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link> &amp;__obj)</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a7e8bcc3679f3b7d77efdb871fa8ad0eb">_Combiner</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1af531fb64193b931a4fba10d45293115e">_Combiner</link> (const _Tp &amp;<link linkend="_classvalue">value</link>, const _BinaryOp *bin_op)</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a02bd96ecf308ee199321c8c1d1cf8be3">_Combiner</link> (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link> &amp;__obj)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a14e3f7a2c7c1cf6c59776f60642482b4">operator()</link> (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link> &amp;__obj)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>_Tp <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1ae3f12809088966acebee2627d5df0542">__value</link></para>
</listitem>
            <listitem><para>_BinaryOp * <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a8049f95d9f64f9662699f902e8c6384f">__bin_op</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a7e8bcc3679f3b7d77efdb871fa8ad0eb"/><section>
    <title>_Combiner()<computeroutput>[1/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1af531fb64193b931a4fba10d45293115e"/><section>
    <title>_Combiner()<computeroutput>[2/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner (const _Tp &amp; value, const _BinaryOp * bin_op)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a02bd96ecf308ee199321c8c1d1cf8be3"/><section>
    <title>_Combiner()<computeroutput>[3/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link>&lt; _Tp, _BinaryOp &gt; &amp; __obj)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a7e8bcc3679f3b7d77efdb871fa8ad0eb"/><section>
    <title>_Combiner()<computeroutput>[4/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1af531fb64193b931a4fba10d45293115e"/><section>
    <title>_Combiner()<computeroutput>[5/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner (const _Tp &amp; value, const _BinaryOp * bin_op)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a02bd96ecf308ee199321c8c1d1cf8be3"/><section>
    <title>_Combiner()<computeroutput>[6/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link>&lt; _Tp, _BinaryOp &gt; &amp; __obj)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a7e8bcc3679f3b7d77efdb871fa8ad0eb"/><section>
    <title>_Combiner()<computeroutput>[7/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1af531fb64193b931a4fba10d45293115e"/><section>
    <title>_Combiner()<computeroutput>[8/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner (const _Tp &amp; value, const _BinaryOp * bin_op)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a02bd96ecf308ee199321c8c1d1cf8be3"/><section>
    <title>_Combiner()<computeroutput>[9/9]</computeroutput></title>
<indexterm><primary>_Combiner</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>_Combiner</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::_Combiner (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link>&lt; _Tp, _BinaryOp &gt; &amp; __obj)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a14e3f7a2c7c1cf6c59776f60642482b4"/><section>
    <title>operator()()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::operator() (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link>&lt; _Tp, _BinaryOp &gt; &amp; __obj)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a14e3f7a2c7c1cf6c59776f60642482b4"/><section>
    <title>operator()()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::operator() (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link>&lt; _Tp, _BinaryOp &gt; &amp; __obj)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a14e3f7a2c7c1cf6c59776f60642482b4"/><section>
    <title>operator()()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::operator() (const <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link>&lt; _Tp, _BinaryOp &gt; &amp; __obj)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1a8049f95d9f64f9662699f902e8c6384f"/><section>
    <title>__bin_op</title>
<indexterm><primary>__bin_op</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>__bin_op</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput>_BinaryOp * <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::__bin_op</computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____unseq__backend_1_1___combiner_1ae3f12809088966acebee2627d5df0542"/><section>
    <title>__value</title>
<indexterm><primary>__value</primary><secondary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</primary><secondary>__value</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOp &gt; </computeroutput><para><computeroutput>_Tp <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner</link>&lt; _Tp, _BinaryOp &gt;::__value</computeroutput></para></section>
<para>
The documentation for this struct was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/pstl/<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h">unseq_backend_simd.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/<link linkend="_lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h">unseq_backend_simd.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h">unseq_backend_simd.h</link></section>
</section>
