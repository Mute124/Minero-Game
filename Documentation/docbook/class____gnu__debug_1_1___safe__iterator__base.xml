<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__iterator__base" xml:lang="en-US">
<title>__gnu_debug::_Safe_iterator_base Class Reference</title>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary></indexterm>
<para>

<para>Basic functionality for a <emphasis>safe</emphasis> iterator. </para>
 
</para>
<para>
<computeroutput>#include &lt;safe_base.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_iterator_base:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_iterator_base:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad07568d7660eb8b85493b548d10c637a">_M_version</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7f653b7476705d7d0445edac938ac78f">_M_prior</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7c9c250dea264463f74591429f8ba123">_M_next</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a2db13ed7fc25f44d26747eae6b00c2fd">_Safe_sequence_base</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Basic functionality for a <emphasis>safe</emphasis> iterator. </para>



<para>The _Safe_iterator_base base class implements the functionality of a safe iterator that is not specific to a particular iterator type. It contains a pointer back to the sequence it references along with iterator version information and pointers to form a doubly-linked list of iterators referenced by the container.</para>

<para>This class must not perform any operations that can throw an exception, or the exception guarantees of derived iterators will be broken. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb"/><section>
    <title>_Safe_iterator_base()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Initializes the iterator and makes it singular. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12"/><section>
    <title>_Safe_iterator_base()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Initialize the iterator to reference the sequence pointed to by <computeroutput>__seq</computeroutput>. <computeroutput>__constant</computeroutput> is true when we are initializing a constant iterator, and false if it is a mutable iterator. Note that <computeroutput>__seq</computeroutput> may be NULL, in which case the iterator will be singular. Otherwise, the iterator will reference <computeroutput>__seq</computeroutput> and be nonsingular. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a74a667bf14e3feb71571c352430fcf12_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191"/><section>
    <title>_Safe_iterator_base()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp; __x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Initializes the iterator to reference the same sequence that <computeroutput>__x</computeroutput> does. <computeroutput>__constant</computeroutput> is true if this is a constant iterator, and false if it is mutable. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a0993fe5b5c385572b6261e2100f01191_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065"/><section>
    <title>~_Safe_iterator_base()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>~_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>~_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_aa04a365fa43696b90e0d490682639065_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb"/><section>
    <title>_Safe_iterator_base()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Initializes the iterator and makes it singular. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12"/><section>
    <title>_Safe_iterator_base()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Initialize the iterator to reference the sequence pointed to by <computeroutput>__seq</computeroutput>. <computeroutput>__constant</computeroutput> is true when we are initializing a constant iterator, and false if it is a mutable iterator. Note that <computeroutput>__seq</computeroutput> may be NULL, in which case the iterator will be singular. Otherwise, the iterator will reference <computeroutput>__seq</computeroutput> and be nonsingular. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a74a667bf14e3feb71571c352430fcf12_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191"/><section>
    <title>_Safe_iterator_base()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::_Safe_iterator_base (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp; __x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Initializes the iterator to reference the same sequence that <computeroutput>__x</computeroutput> does. <computeroutput>__constant</computeroutput> is true if this is a constant iterator, and false if it is mutable. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a0993fe5b5c385572b6261e2100f01191_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065"/><section>
    <title>~_Safe_iterator_base()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>~_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>~_Safe_iterator_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_iterator_base::~_Safe_iterator_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_aa04a365fa43696b90e0d490682639065_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9"/><section>
    <title>_M_attach()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_attach</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_attach</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_attach (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Attaches this iterator to the given sequence, detaching it from whatever sequence it was attached to originally. If the new sequence is the NULL pointer, the iterator is left unattached. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a51809843192abdf6415ec0342fb0fdb9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9"/><section>
    <title>_M_attach()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_attach</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_attach</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_attach (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Attaches this iterator to the given sequence, detaching it from whatever sequence it was attached to originally. If the new sequence is the NULL pointer, the iterator is left unattached. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b"/><section>
    <title>_M_attach_single()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_attach_single</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_attach_single</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_attach_single (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant) throw ( ) <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Likewise, but not thread-safe. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a45148b9f8f44371fedfd62f39827a18b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b"/><section>
    <title>_M_attach_single()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_attach_single</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_attach_single</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_attach_single (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant) throw ( ) <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Likewise, but not thread-safe. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d"/><section>
    <title>_M_attached_to()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_attached_to</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_attached_to</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_debug::_Safe_iterator_base::_M_attached_to (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Determines if we are attached to the given sequence. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d"/><section>
    <title>_M_attached_to()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_attached_to</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_attached_to</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_debug::_Safe_iterator_base::_M_attached_to (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Determines if we are attached to the given sequence. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97"/><section>
    <title>_M_can_compare()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_can_compare</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_can_compare</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_debug::_Safe_iterator_base::_M_can_compare (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp; __x) const throw ( ) </computeroutput></para>
<para>Can we compare this iterator to the given iterator <computeroutput>__x</computeroutput>? Returns true if both iterators are nonsingular and reference the same sequence. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97"/><section>
    <title>_M_can_compare()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_can_compare</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_can_compare</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_debug::_Safe_iterator_base::_M_can_compare (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp; __x) const throw ( ) </computeroutput></para>
<para>Can we compare this iterator to the given iterator <computeroutput>__x</computeroutput>? Returns true if both iterators are nonsingular and reference the same sequence. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54"/><section>
    <title>_M_detach()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_detach</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_detach</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_detach ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach the iterator for whatever sequence it is attached to, if any. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a8deb31273aaf1912a5540ae046581c54_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54"/><section>
    <title>_M_detach()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_detach</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_detach</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_detach ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach the iterator for whatever sequence it is attached to, if any. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4"/><section>
    <title>_M_detach_single()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_detach_single</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_detach_single</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_detach_single ( ) throw ( ) </computeroutput></para>
<para>Likewise, but not thread-safe. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4"/><section>
    <title>_M_detach_single()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_detach_single</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_detach_single</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_detach_single ( ) throw ( ) </computeroutput></para>
<para>Likewise, but not thread-safe. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877"/><section>
    <title>_M_get_mutex()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_get_mutex</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_get_mutex</secondary></indexterm>
<para><computeroutput>__gnu_cxx::__mutex &amp; __gnu_debug::_Safe_iterator_base::_M_get_mutex ( ) throw ( ) <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>For use in <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_a394cc3f97fe4fb1c7d4378faa0b02877_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877"/><section>
    <title>_M_get_mutex()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_get_mutex</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_get_mutex</secondary></indexterm>
<para><computeroutput>__gnu_cxx::__mutex &amp; __gnu_debug::_Safe_iterator_base::_M_get_mutex ( ) throw ( ) <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>For use in <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2"/><section>
    <title>_M_invalidate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_invalidate</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_invalidate</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_invalidate ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Invalidate the iterator, making it singular. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2"/><section>
    <title>_M_invalidate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_invalidate</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_invalidate</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_invalidate ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Invalidate the iterator, making it singular. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd"/><section>
    <title>_M_reset()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_reset</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_reset</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_reset ( ) throw ( ) </computeroutput></para>
<para>Reset all member variables </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd"/><section>
    <title>_M_reset()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_reset</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_reset</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_reset ( ) throw ( ) </computeroutput></para>
<para>Reset all member variables </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858"/><section>
    <title>_M_singular()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_singular</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_singular</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_debug::_Safe_iterator_base::_M_singular ( ) const throw ( ) </computeroutput></para>
<para>Is this iterator singular? </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator__base_aefb17f520b7e88212cf86e552d440858_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858"/><section>
    <title>_M_singular()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_singular</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_singular</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_debug::_Safe_iterator_base::_M_singular ( ) const throw ( ) </computeroutput></para>
<para>Is this iterator singular? </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b"/><section>
    <title>_M_unlink()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_unlink</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_unlink</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_unlink ( ) throw ( ) <computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Unlink itself </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b"/><section>
    <title>_M_unlink()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_unlink</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_unlink</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_iterator_base::_M_unlink ( ) throw ( ) <computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Unlink itself </para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a2db13ed7fc25f44d26747eae6b00c2fd"/><section>
    <title>_Safe_sequence_base</title>
<indexterm><primary>_Safe_sequence_base</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_Safe_sequence_base</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a7c9c250dea264463f74591429f8ba123"/><section>
    <title>_M_next</title>
<indexterm><primary>_M_next</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_next</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * __gnu_debug::_Safe_iterator_base::_M_next</computeroutput></para>
<para>Pointer to the next iterator in the sequence&apos;s list of iterators. Only valid when _M_sequence != NULL. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1a7f653b7476705d7d0445edac938ac78f"/><section>
    <title>_M_prior</title>
<indexterm><primary>_M_prior</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_prior</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * __gnu_debug::_Safe_iterator_base::_M_prior</computeroutput></para>
<para>Pointer to the previous iterator in the sequence&apos;s list of iterators. Only valid when _M_sequence != NULL. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1"/><section>
    <title>_M_sequence</title>
<indexterm><primary>_M_sequence</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_sequence</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __gnu_debug::_Safe_iterator_base::_M_sequence</computeroutput></para>
<para>The sequence this iterator references; may be NULL to indicate a singular iterator. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator__base_1ad07568d7660eb8b85493b548d10c637a"/><section>
    <title>_M_version</title>
<indexterm><primary>_M_version</primary><secondary>__gnu_debug::_Safe_iterator_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator_base</primary><secondary>_M_version</secondary></indexterm>
<para><computeroutput>unsigned int __gnu_debug::_Safe_iterator_base::_M_version</computeroutput></para>
<para>The version number of this iterator. The sentinel value 0 is used to indicate an invalidated iterator (i.e., one that is singular because of an operation on the container). This version number must equal the version number in the sequence referenced by _M_sequence for the iterator to be non-singular. </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__base_8h">safe_base.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__base_8h">safe_base.h</link></section>
</section>
