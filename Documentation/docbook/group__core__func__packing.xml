<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__core__func__packing" xml:lang="en-US">
<title>Floating-Point Pack and Unpack Functions</title>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary></indexterm>
Collaboration diagram for Floating-Point Pack and Unpack Functions:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="_group__core__func__packing_1ga0e2d107039fe608a209497af867b85fb">glm::packUnorm2x16</link> (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="_group__core__func__packing_1ga977ab172da5494e5ac63e952afacfbe2">glm::packSnorm2x16</link> (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="_group__core__func__packing_1gaf7d2f7341a9eeb4a436929d6f9ad08f2">glm::packUnorm4x8</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="_group__core__func__packing_1ga85e8f17627516445026ab7a9c2e3531a">glm::packSnorm4x8</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> <link linkend="_group__core__func__packing_1ga1f66188e5d65afeb9ffba1ad971e4007">glm::unpackUnorm2x16</link> (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> <link linkend="_group__core__func__packing_1gacd8f8971a3fe28418be0d0fa1f786b38">glm::unpackSnorm2x16</link> (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__core__func__packing_1ga7f903259150b67e9466f5f8edffcd197">glm::unpackUnorm4x8</link> (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link> <link linkend="_group__core__func__packing_1ga2db488646d48b7c43d3218954523fe82">glm::unpackSnorm4x8</link> (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> double <link linkend="_group__core__func__packing_1gaa916ca426b2bb0343ba17e3753e245c2">glm::packDouble2x32</link> (<link linkend="_group__core__vector_1ga1a8c36c37516ed6f9c13ee66186112ae">uvec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga1a8c36c37516ed6f9c13ee66186112ae">uvec2</link> <link linkend="_group__core__func__packing_1ga5f4296dc5f12f0aa67ac05b8bb322483">glm::unpackDouble2x32</link> (double <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="_group__core__func__packing_1ga20f134b07db3a3d3a38efb2617388c92">glm::packHalf2x16</link> (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> <link linkend="_group__core__func__packing_1gaf59b52e6b28da9335322c4ae19b5d745">glm::unpackHalf2x16</link> (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Provides GLSL functions to pack and unpack half, single and double-precision floating point values into more compact integer types.</para>

<para>These functions do not operate component-wise, rather as described in each case.</para>

<para>Include &lt;glm/packing.hpp&gt; to use these core features. </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__core__func__packing_1gaa916ca426b2bb0343ba17e3753e245c2"/><section>
    <title>packDouble2x32()</title>
<indexterm><primary>packDouble2x32</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>packDouble2x32</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> double glm::packDouble2x32 (<link linkend="_group__core__vector_1ga1a8c36c37516ed6f9c13ee66186112ae">uvec2</link> const &amp; v)</computeroutput></para>
<para>Returns a double-qualifier value obtained by packing the components of v into a 64-bit value. If an IEEE 754 Inf or NaN is created, it will not signal, and the resulting floating point value is unspecified. Otherwise, the bit- level representation of v is preserved. The first vector component specifies the 32 least significant bits; the second component specifies the 32 most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packDouble2x32.xml">GLSL packDouble2x32 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_gaa916ca426b2bb0343ba17e3753e245c2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga20f134b07db3a3d3a38efb2617388c92"/><section>
    <title>packHalf2x16()</title>
<indexterm><primary>packHalf2x16</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>packHalf2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> glm::packHalf2x16 (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp; v)</computeroutput></para>
<para>Returns an unsigned integer obtained by converting the components of a two-component floating-point vector to the 16-bit floating-point representation found in the OpenGL Specification, and then packing these two 16- bit integers into a 32-bit unsigned integer. The first vector component specifies the 16 least-significant bits of the result; the second component specifies the 16 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml">GLSL packHalf2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga20f134b07db3a3d3a38efb2617388c92_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga20f134b07db3a3d3a38efb2617388c92_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga977ab172da5494e5ac63e952afacfbe2"/><section>
    <title>packSnorm2x16()</title>
<indexterm><primary>packSnorm2x16</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>packSnorm2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> glm::packSnorm2x16 (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packSnorm2x16: round(clamp(v, -1, +1) * 32767.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm2x16.xml">GLSL packSnorm2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga977ab172da5494e5ac63e952afacfbe2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga85e8f17627516445026ab7a9c2e3531a"/><section>
    <title>packSnorm4x8()</title>
<indexterm><primary>packSnorm4x8</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>packSnorm4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> glm::packSnorm4x8 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packSnorm4x8: round(clamp(c, -1, +1) * 127.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga85e8f17627516445026ab7a9c2e3531a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga0e2d107039fe608a209497af867b85fb"/><section>
    <title>packUnorm2x16()</title>
<indexterm><primary>packUnorm2x16</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>packUnorm2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> glm::packUnorm2x16 (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packUnorm2x16: round(clamp(c, 0, +1) * 65535.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm2x16.xml">GLSL packUnorm2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga0e2d107039fe608a209497af867b85fb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1gaf7d2f7341a9eeb4a436929d6f9ad08f2"/><section>
    <title>packUnorm4x8()</title>
<indexterm><primary>packUnorm4x8</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>packUnorm4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> glm::packUnorm4x8 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packUnorm4x8: round(clamp(c, 0, +1) * 255.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_gaf7d2f7341a9eeb4a436929d6f9ad08f2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga5f4296dc5f12f0aa67ac05b8bb322483"/><section>
    <title>unpackDouble2x32()</title>
<indexterm><primary>unpackDouble2x32</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>unpackDouble2x32</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga1a8c36c37516ed6f9c13ee66186112ae">uvec2</link> glm::unpackDouble2x32 (double v)</computeroutput></para>
<para>Returns a two-component unsigned integer vector representation of v. The bit-level representation of v is preserved. The first component of the vector contains the 32 least significant bits of the double; the second component consists the 32 most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackDouble2x32.xml">GLSL unpackDouble2x32 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga5f4296dc5f12f0aa67ac05b8bb322483_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1gaf59b52e6b28da9335322c4ae19b5d745"/><section>
    <title>unpackHalf2x16()</title>
<indexterm><primary>unpackHalf2x16</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>unpackHalf2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> glm::unpackHalf2x16 (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> v)</computeroutput></para>
<para>Returns a two-component floating-point vector with components obtained by unpacking a 32-bit unsigned integer into a pair of 16-bit values, interpreting those values as 16-bit floating-point numbers according to the OpenGL Specification, and converting them to 32-bit floating-point values. The first component of the vector is obtained from the 16 least-significant bits of v; the second component is obtained from the 16 most-significant bits of v.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml">GLSL unpackHalf2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_gaf59b52e6b28da9335322c4ae19b5d745_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_gaf59b52e6b28da9335322c4ae19b5d745_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1gacd8f8971a3fe28418be0d0fa1f786b38"/><section>
    <title>unpackSnorm2x16()</title>
<indexterm><primary>unpackSnorm2x16</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>unpackSnorm2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> glm::unpackSnorm2x16 (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm2x16: clamp(f / 32767.0, -1, +1)</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml">GLSL unpackSnorm2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_gacd8f8971a3fe28418be0d0fa1f786b38_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga2db488646d48b7c43d3218954523fe82"/><section>
    <title>unpackSnorm4x8()</title>
<indexterm><primary>unpackSnorm4x8</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>unpackSnorm4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackSnorm4x8 (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm4x8: clamp(f / 127.0, -1, +1)</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga2db488646d48b7c43d3218954523fe82_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga1f66188e5d65afeb9ffba1ad971e4007"/><section>
    <title>unpackUnorm2x16()</title>
<indexterm><primary>unpackUnorm2x16</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>unpackUnorm2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> glm::unpackUnorm2x16 (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackUnorm2x16: f / 65535.0</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga1f66188e5d65afeb9ffba1ad971e4007_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__core__func__packing_1ga7f903259150b67e9466f5f8edffcd197"/><section>
    <title>unpackUnorm4x8()</title>
<indexterm><primary>unpackUnorm4x8</primary><secondary>Floating-Point Pack and Unpack Functions</secondary></indexterm>
<indexterm><primary>Floating-Point Pack and Unpack Functions</primary><secondary>unpackUnorm4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackUnorm4x8 (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackUnorm4x8: f / 255.0</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__core__func__packing_ga7f903259150b67e9466f5f8edffcd197_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
