<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2shared__ptr__atomic_8h_source" xml:lang="en-US">
<title>shared_ptr_atomic.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/shared_ptr_atomic.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;shared_ptr&#32;atomic&#32;access&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_SHARED_PTR_ATOMIC_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_SHARED_PTR_ATOMIC_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#include&#32;&lt;bits/atomic_base.h&gt;</emphasis>
34 
35 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
36 {
37 _GLIBCXX_BEGIN_NAMESPACE_VERSION
38 
44 
46 
47 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_locker
48 &#32;&#32;{
49 &#32;&#32;&#32;&#32;_Sp_locker(<emphasis role="keyword">const</emphasis>&#32;_Sp_locker&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
50 &#32;&#32;&#32;&#32;_Sp_locker&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Sp_locker&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
51 
52 <emphasis role="preprocessor">#ifdef&#32;__GTHREADS</emphasis>
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
54 &#32;&#32;&#32;&#32;_Sp_locker(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)&#32;<emphasis role="keyword">noexcept</emphasis>;
55 &#32;&#32;&#32;&#32;_Sp_locker(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)&#32;<emphasis role="keyword">noexcept</emphasis>;
56 &#32;&#32;&#32;&#32;~_Sp_locker();
57 
58 &#32;&#32;<emphasis role="keyword">private</emphasis>:
59 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_key1;
60 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_key2;
61 <emphasis role="preprocessor">#else</emphasis>
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Sp_locker(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{&#32;}
63 <emphasis role="preprocessor">#endif</emphasis>
64 &#32;&#32;};
65 
67 
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
76 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ad0881213f2fecf690a0f303cd53162bf">atomic_is_lock_free</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p)
77 &#32;&#32;&#32;&#32;{
78 <emphasis role="preprocessor">#ifdef&#32;__GTHREADS</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gthread_active_p()&#32;==&#32;0;
80 <emphasis role="preprocessor">#else</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
82 <emphasis role="preprocessor">#endif</emphasis>
83 &#32;&#32;&#32;&#32;}
84 
85 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
87 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ad0881213f2fecf690a0f303cd53162bf">atomic_is_lock_free</link>(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp&gt;*&#32;__p)
88 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_is_lock_free&lt;_Tp,&#32;__default_lock_policy&gt;(__p);&#32;}
89 
91 
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;shared_ptr&lt;_Tp&gt;
103 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ace93aa88c5b29f16ad3c75a6631e2b4b">atomic_load_explicit</link>(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp&gt;*&#32;__p,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
104 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p};
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__p;
107 &#32;&#32;&#32;&#32;}
108 
109 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;shared_ptr&lt;_Tp&gt;
111 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a3e0b90558ab49e2abcfd92877a100b0f">atomic_load</link>(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp&gt;*&#32;__p)
112 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_load_explicit(__p,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
113 
114 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
116 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ace93aa88c5b29f16ad3c75a6631e2b4b">atomic_load_explicit</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
117 &#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p};
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__p;
120 &#32;&#32;&#32;&#32;}
121 
122 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
124 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a3e0b90558ab49e2abcfd92877a100b0f">atomic_load</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p)
125 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_load_explicit(__p,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
127 
137 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
139 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ad89ce622cc21185360dff0dabe5c8885">atomic_store_explicit</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,&#32;shared_ptr&lt;_Tp&gt;&#32;__r,
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
141 &#32;&#32;&#32;&#32;{
142 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p};
143 &#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;swap(__r);&#32;<emphasis role="comment">//&#32;use&#32;swap&#32;so&#32;that&#32;**__p&#32;not&#32;destroyed&#32;while&#32;lock&#32;held</emphasis>
144 &#32;&#32;&#32;&#32;}
145 
146 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
148 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a122bc5395b8226750bad3a3510176857">atomic_store</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,&#32;shared_ptr&lt;_Tp&gt;&#32;__r)
149 &#32;&#32;&#32;&#32;{&#32;std::atomic_store_explicit(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
150 
151 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
153 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ad89ce622cc21185360dff0dabe5c8885">atomic_store_explicit</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__r,
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
156 &#32;&#32;&#32;&#32;{
157 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p};
158 &#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;swap(__r);&#32;<emphasis role="comment">//&#32;use&#32;swap&#32;so&#32;that&#32;**__p&#32;not&#32;destroyed&#32;while&#32;lock&#32;held</emphasis>
159 &#32;&#32;&#32;&#32;}
160 
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
163 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a122bc5395b8226750bad3a3510176857">atomic_store</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__r)
164 &#32;&#32;&#32;&#32;{&#32;std::atomic_store_explicit(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
166 
174 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;shared_ptr&lt;_Tp&gt;
176 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ab69b8c32cd7dcea5e5d0e9a7c6588573">atomic_exchange_explicit</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,&#32;shared_ptr&lt;_Tp&gt;&#32;__r,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
178 &#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p};
180 &#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;swap(__r);
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
182 &#32;&#32;&#32;&#32;}
183 
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;shared_ptr&lt;_Tp&gt;
186 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a051fa56e64fd5344d1a9c53ad86c66fa">atomic_exchange</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,&#32;shared_ptr&lt;_Tp&gt;&#32;__r)
187 &#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_exchange_explicit(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r),
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);
190 &#32;&#32;&#32;&#32;}
191 
192 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
193 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
194 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ab69b8c32cd7dcea5e5d0e9a7c6588573">atomic_exchange_explicit</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__r,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
197 &#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p};
199 &#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;swap(__r);
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
201 &#32;&#32;&#32;&#32;}
202 
203 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
204 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
205 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a051fa56e64fd5344d1a9c53ad86c66fa">atomic_exchange</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__r)
206 &#32;&#32;&#32;&#32;{
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_exchange_explicit(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r),
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);
209 &#32;&#32;&#32;&#32;}
211 
223 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
225 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a2992815dffaf66a15b280a7f65a831fe">atomic_compare_exchange_strong_explicit</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;*&#32;__v,
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;&#32;__w,
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>,
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
230 &#32;&#32;&#32;&#32;{
231 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;&#32;__x;&#32;<emphasis role="comment">//&#32;goes&#32;out&#32;of&#32;scope&#32;after&#32;__lock</emphasis>
232 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p,&#32;__v};
233 &#32;&#32;&#32;&#32;&#32;&#32;owner_less&lt;shared_ptr&lt;_Tp&gt;&gt;&#32;__less;
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__p&#32;==&#32;*__v&#32;&amp;&amp;&#32;!__less(*__p,&#32;*__v)&#32;&amp;&amp;&#32;!__less(*__v,&#32;*__p))
235 &#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__p);
237 &#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w);
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
239 &#32;&#32;&#32;&#32;}
240 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__v);
241 &#32;&#32;&#32;&#32;&#32;&#32;*__v&#32;=&#32;*__p;
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
243 &#32;&#32;&#32;&#32;}
244 
245 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
246 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
247 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a10cce36880404a92f28f2007a28145c6">atomic_compare_exchange_strong</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,&#32;shared_ptr&lt;_Tp&gt;*&#32;__v,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;&#32;__w)
249 &#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_compare_exchange_strong_explicit(__p,&#32;__v,
251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);
252 &#32;&#32;&#32;&#32;}
253 
254 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
255 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
256 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a13f6ad9443a69116cfb42cd85cc7d8ac">atomic_compare_exchange_weak_explicit</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;*&#32;__v,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;&#32;__w,
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)
261 &#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_compare_exchange_strong_explicit(__p,&#32;__v,
263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w),&#32;__success,&#32;__failure);
264 &#32;&#32;&#32;&#32;}
265 
266 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
267 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
268 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ac25c80c1d8d2c7196112502b1372f53f">atomic_compare_exchange_weak</link>(shared_ptr&lt;_Tp&gt;*&#32;__p,&#32;shared_ptr&lt;_Tp&gt;*&#32;__v,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;&#32;__w)
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_compare_exchange_weak_explicit(__p,&#32;__v,
272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);
273 &#32;&#32;&#32;&#32;}
274 
275 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
276 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
277 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a2992815dffaf66a15b280a7f65a831fe">atomic_compare_exchange_strong_explicit</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__v,
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__w,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>,
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>)
282 &#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__x;&#32;<emphasis role="comment">//&#32;goes&#32;out&#32;of&#32;scope&#32;after&#32;__lock</emphasis>
284 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_locker&#32;__lock{__p,&#32;__v};
285 &#32;&#32;&#32;&#32;&#32;&#32;owner_less&lt;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&gt;&#32;__less;
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__p&#32;==&#32;*__v&#32;&amp;&amp;&#32;!__less(*__p,&#32;*__v)&#32;&amp;&amp;&#32;!__less(*__v,&#32;*__p))
287 &#32;&#32;&#32;&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__p);
289 &#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w);
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
291 &#32;&#32;&#32;&#32;}
292 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__v);
293 &#32;&#32;&#32;&#32;&#32;&#32;*__v&#32;=&#32;*__p;
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
295 &#32;&#32;&#32;&#32;}
296 
297 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
299 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a10cce36880404a92f28f2007a28145c6">atomic_compare_exchange_strong</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__v,
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__w)
302 &#32;&#32;&#32;&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_compare_exchange_strong_explicit(__p,&#32;__v,
304 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);
305 &#32;&#32;&#32;&#32;}
306 
307 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
309 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a13f6ad9443a69116cfb42cd85cc7d8ac">atomic_compare_exchange_weak_explicit</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__v,
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__w,
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__success,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__failure)
314 &#32;&#32;&#32;&#32;{
315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_compare_exchange_strong_explicit(__p,&#32;__v,
316 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w),&#32;__success,&#32;__failure);
317 &#32;&#32;&#32;&#32;}
318 
319 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
320 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
321 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1ac25c80c1d8d2c7196112502b1372f53f">atomic_compare_exchange_weak</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__p,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;*&#32;__v,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&#32;__w)
324 &#32;&#32;&#32;&#32;{
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::atomic_compare_exchange_weak_explicit(__p,&#32;__v,
326 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__w),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);
327 &#32;&#32;&#32;&#32;}
329 
330 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
331 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_atomic_shared_ptr&#32;201711L</emphasis>
332 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
333 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>atomic;
334 
335 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
336 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_shared_ptr&#32;=&#32;<emphasis role="keyword">false</emphasis>;
337 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
338 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_shared_ptr&lt;shared_ptr&lt;_Up&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
339 
340 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
341 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_atomic
342 &#32;&#32;&#32;&#32;{
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
344 
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>atomic&lt;_Tp&gt;;
346 
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;An&#32;atomic&#32;version&#32;of&#32;__shared_count&lt;&gt;&#32;and&#32;__weak_count&lt;&gt;.</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stores&#32;a&#32;_Sp_counted_base&lt;&gt;*&#32;but&#32;uses&#32;the&#32;LSB&#32;as&#32;a&#32;lock.</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Atomic_count
350 &#32;&#32;&#32;&#32;&#32;&#32;{
351 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Either&#32;__shared_count&lt;&gt;&#32;or&#32;__weak_count&lt;&gt;</emphasis>
352 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__count_type&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(_Tp::_M_refcount);
353 
354 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Sp_counted_base&lt;&gt;*</emphasis>
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__count_type::_M_pi);
356 
357 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;we&#32;can&#32;use&#32;the&#32;LSB&#32;as&#32;the&#32;lock&#32;bit.</emphasis>
358 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">alignof</emphasis>(remove_pointer_t&lt;pointer&gt;)&#32;&gt;&#32;1);
359 
360 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Atomic_count()&#32;noexcept&#32;=&#32;default;
361 
362 &#32;&#32;&#32;&#32;explicit
363 &#32;&#32;&#32;&#32;_Atomic_count(__count_type&amp;&amp;&#32;__c)&#32;noexcept
364 &#32;&#32;&#32;&#32;:&#32;_M_val(reinterpret_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&gt;(__c._M_pi))
365 &#32;&#32;&#32;&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;__c._M_pi&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
367 &#32;&#32;&#32;&#32;}
368 
369 &#32;&#32;&#32;&#32;~_Atomic_count()
370 &#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;=&#32;_M_val.load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
372 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(!(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;&amp;&#32;_S_lock_bit));
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__pi&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_shared_ptr&lt;_Tp&gt;)
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pi-&gt;_M_release();
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pi-&gt;_M_weak_release();
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
380 &#32;&#32;&#32;&#32;}
381 
382 &#32;&#32;&#32;&#32;_Atomic_count(<emphasis role="keyword">const</emphasis>&#32;_Atomic_count&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
383 &#32;&#32;&#32;&#32;_Atomic_count&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Atomic_count&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
384 
385 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;Caller&#32;does&#32;not&#32;hold&#32;lock!</emphasis>
386 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;raw&#32;pointer&#32;value&#32;without&#32;the&#32;lock&#32;bit&#32;set.</emphasis>
387 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
388 &#32;&#32;&#32;&#32;lock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
389 &#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;acquire&#32;the&#32;lock&#32;we&#32;flip&#32;the&#32;LSB&#32;from&#32;0&#32;to&#32;1.</emphasis>
391 
392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__current&#32;=&#32;_M_val.load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__current&#32;&amp;&#32;_S_lock_bit)
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
395 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__thread_relax();
397 <emphasis role="preprocessor">#endif</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__current&#32;=&#32;_M_val.load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!_M_val.compare_exchange_strong(__current,
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__current&#32;|&#32;_S_lock_bit,
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__o,
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>))
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
406 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__thread_relax();
408 <emphasis role="preprocessor">#endif</emphasis>
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__current&#32;=&#32;__current&#32;&amp;&#32;~_S_lock_bit;
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>(__current);
412 &#32;&#32;&#32;&#32;}
413 
414 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;caller&#32;holds&#32;lock!</emphasis>
415 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
416 &#32;&#32;&#32;&#32;unlock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
417 &#32;&#32;&#32;&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;_M_val.fetch_sub(1,&#32;__o);
419 &#32;&#32;&#32;&#32;}
420 
421 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Swaps&#32;the&#32;values&#32;of&#32;*this&#32;and&#32;__c,&#32;and&#32;unlocks&#32;*this.</emphasis>
422 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;caller&#32;holds&#32;lock!</emphasis>
423 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
424 &#32;&#32;&#32;&#32;_M_swap_unlock(__count_type&amp;&#32;__c,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o)&#32;<emphasis role="keyword">noexcept</emphasis>
425 &#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__o&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>;
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(__c._M_pi);
429 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;_M_val.exchange(__x,&#32;__o);
430 &#32;&#32;&#32;&#32;&#32;&#32;__c._M_pi&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>(__x&#32;&amp;&#32;~_S_lock_bit);
431 &#32;&#32;&#32;&#32;}
432 
433 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
434 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;caller&#32;holds&#32;lock!</emphasis>
435 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
436 &#32;&#32;&#32;&#32;_M_wait_unlock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
437 &#32;&#32;&#32;&#32;{
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__v&#32;=&#32;_M_val.fetch_sub(1,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
439 &#32;&#32;&#32;&#32;&#32;&#32;_M_val.wait(__v&#32;&amp;&#32;~_S_lock_bit,&#32;__o);
440 &#32;&#32;&#32;&#32;}
441 
442 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
443 &#32;&#32;&#32;&#32;notify_one()&#32;noexcept
444 &#32;&#32;&#32;&#32;{
445 &#32;&#32;&#32;&#32;&#32;&#32;_M_val.notify_one();
446 &#32;&#32;&#32;&#32;}
447 
448 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
449 &#32;&#32;&#32;&#32;notify_all()&#32;noexcept
450 &#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;_M_val.notify_all();
452 &#32;&#32;&#32;&#32;}
453 <emphasis role="preprocessor">#endif</emphasis>
454 
455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
456 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;__atomic_base&lt;uintptr_t&gt;&#32;_M_val{0};
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&#32;_S_lock_bit{1};
458 &#32;&#32;&#32;&#32;&#32;&#32;};
459 
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::element_type*&#32;_M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
461 &#32;&#32;&#32;&#32;&#32;&#32;_Atomic_count&#32;_M_refcount;
462 
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Atomic_count::pointer
464 &#32;&#32;&#32;&#32;&#32;&#32;_S_add_ref(<emphasis role="keyword">typename</emphasis>&#32;_Atomic_count::pointer&#32;__p)
465 &#32;&#32;&#32;&#32;&#32;&#32;{
466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p)
467 &#32;&#32;&#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_shared_ptr&lt;_Tp&gt;)
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;_M_add_ref_copy();
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;_M_weak_add_ref();
472 &#32;&#32;&#32;&#32;&#32;&#32;}
473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
474 &#32;&#32;&#32;&#32;&#32;&#32;}
475 
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Sp_atomic()&#32;noexcept&#32;=&#32;default;
477 
478 &#32;&#32;&#32;&#32;&#32;&#32;explicit
479 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_atomic(value_type&#32;__r)&#32;noexcept
480 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(<link linkend="_namespacestd">std</link>::move(__r._M_refcount))
481 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
482 
483 &#32;&#32;&#32;&#32;&#32;&#32;~_Sp_atomic()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
484 
485 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_atomic(<emphasis role="keyword">const</emphasis>&#32;_Sp_atomic&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Sp_atomic&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
487 
488 &#32;&#32;&#32;&#32;&#32;&#32;value_type
489 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;{
491 &#32;&#32;&#32;&#32;__glibcxx_assert(__o&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__o&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>);
493 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;that&#32;the&#32;correct&#32;value&#32;of&#32;_M_ptr&#32;is&#32;visible&#32;after&#32;locking.,</emphasis>
494 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;by&#32;upgrading&#32;relaxed&#32;or&#32;consume&#32;to&#32;acquire.</emphasis>
495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__o&#32;!=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)
496 &#32;&#32;&#32;&#32;&#32;&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>;
497 
498 &#32;&#32;&#32;&#32;value_type&#32;__ret;
499 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi&#32;=&#32;_M_refcount.lock(__o);
500 &#32;&#32;&#32;&#32;__ret._M_ptr&#32;=&#32;_M_ptr;
501 &#32;&#32;&#32;&#32;__ret._M_refcount._M_pi&#32;=&#32;_S_add_ref(__pi);
502 &#32;&#32;&#32;&#32;_M_refcount.unlock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
504 &#32;&#32;&#32;&#32;&#32;&#32;}
505 
506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
507 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(value_type&amp;&#32;__r,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o)&#32;<emphasis role="keyword">noexcept</emphasis>
508 &#32;&#32;&#32;&#32;&#32;&#32;{
509 &#32;&#32;&#32;&#32;_M_refcount.lock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
510 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_ptr,&#32;__r._M_ptr);
511 &#32;&#32;&#32;&#32;_M_refcount._M_swap_unlock(__r._M_refcount,&#32;__o);
512 &#32;&#32;&#32;&#32;&#32;&#32;}
513 
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
515 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(value_type&amp;&#32;__expected,&#32;value_type&#32;__desired,
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o2)&#32;<emphasis role="keyword">noexcept</emphasis>
517 &#32;&#32;&#32;&#32;&#32;&#32;{
518 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__result&#32;=&#32;<emphasis role="keyword">true</emphasis>;
519 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi&#32;=&#32;_M_refcount.lock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ptr&#32;==&#32;__expected._M_ptr
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__pi&#32;==&#32;__expected._M_refcount._M_pi)
522 &#32;&#32;&#32;&#32;&#32;&#32;{
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__desired._M_ptr;
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount._M_swap_unlock(__desired._M_refcount,&#32;__o);
525 &#32;&#32;&#32;&#32;&#32;&#32;}
526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
527 &#32;&#32;&#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__sink&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__expected);
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected._M_ptr&#32;=&#32;_M_ptr;
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__expected._M_refcount._M_pi&#32;=&#32;_S_add_ref(__pi);
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount.unlock(__o2);
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;<emphasis role="keyword">false</emphasis>;
533 &#32;&#32;&#32;&#32;&#32;&#32;}
534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
535 &#32;&#32;&#32;&#32;&#32;&#32;}
536 
537 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;wait(value_type&#32;__old,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
540 &#32;&#32;&#32;&#32;&#32;&#32;{
541 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi&#32;=&#32;_M_refcount.lock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>);
542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ptr&#32;==&#32;__old._M_ptr&#32;&amp;&amp;&#32;__pi&#32;==&#32;__old._M_refcount._M_pi)
543 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount._M_wait_unlock(__o);
544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
545 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount.unlock(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>);
546 &#32;&#32;&#32;&#32;&#32;&#32;}
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;noexcept
550 &#32;&#32;&#32;&#32;&#32;&#32;{
551 &#32;&#32;&#32;&#32;_M_refcount.notify_one();
552 &#32;&#32;&#32;&#32;&#32;&#32;}
553 
554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;noexcept
556 &#32;&#32;&#32;&#32;&#32;&#32;{
557 &#32;&#32;&#32;&#32;_M_refcount.notify_all();
558 &#32;&#32;&#32;&#32;&#32;&#32;}
559 <emphasis role="preprocessor">#endif</emphasis>
560 &#32;&#32;&#32;&#32;};
561 
562 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>atomic&lt;shared_ptr&lt;_Tp&gt;&gt;
564 &#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;shared_ptr&lt;_Tp&gt;;
567 
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_always_lock_free&#32;=&#32;<emphasis role="keyword">false</emphasis>;
569 
570 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
571 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;const&#32;noexcept
572 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;atomic()&#32;noexcept&#32;=&#32;default;
575 
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3661.&#32;constinit&#32;atomic&lt;shared_ptr&lt;T&gt;&gt;&#32;a(nullptr);&#32;should&#32;work</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;atomic(nullptr_t)&#32;noexcept&#32;:&#32;atomic()&#32;{&#32;}
579 
580 &#32;&#32;&#32;&#32;&#32;&#32;atomic(shared_ptr&lt;_Tp&gt;&#32;__r)&#32;noexcept
581 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r))
582 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
583 
584 &#32;&#32;&#32;&#32;&#32;&#32;atomic(<emphasis role="keyword">const</emphasis>&#32;atomic&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;atomic&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
586 
587 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;
588 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
589 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl.load(__o);&#32;}
590 
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;shared_ptr&lt;_Tp&gt;()&#32;const&#32;noexcept
592 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl.load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
593 
594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
595 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca8cd892b7b97ef9489ae4479d3f4ef0fc">store</link>(shared_ptr&lt;_Tp&gt;&#32;__desired,
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
597 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl.swap(__desired,&#32;__o);&#32;}
598 
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
600 &#32;&#32;&#32;&#32;&#32;&#32;operator=(shared_ptr&lt;_Tp&gt;&#32;__desired)&#32;<emphasis role="keyword">noexcept</emphasis>
601 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl.swap(__desired,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
602 
603 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;
604 &#32;&#32;&#32;&#32;&#32;&#32;exchange(shared_ptr&lt;_Tp&gt;&#32;__desired,
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;{
607 &#32;&#32;&#32;&#32;_M_impl.swap(__desired,&#32;__o);
608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__desired;
609 &#32;&#32;&#32;&#32;&#32;&#32;}
610 
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
612 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(shared_ptr&lt;_Tp&gt;&amp;&#32;__expected,
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;&#32;__desired,
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o2)&#32;<emphasis role="keyword">noexcept</emphasis>
615 &#32;&#32;&#32;&#32;&#32;&#32;{
616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl.compare_exchange_strong(__expected,&#32;__desired,&#32;__o,&#32;__o2);
617 &#32;&#32;&#32;&#32;&#32;&#32;}
618 
619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
620 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(value_type&amp;&#32;__expected,&#32;value_type&#32;__desired,
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
622 &#32;&#32;&#32;&#32;&#32;&#32;{
623 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o2;
624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(__o)
625 &#32;&#32;&#32;&#32;{
626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>:
627 &#32;&#32;&#32;&#32;&#32;&#32;__o2&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>;
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>:
630 &#32;&#32;&#32;&#32;&#32;&#32;__o2&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>;
631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
633 &#32;&#32;&#32;&#32;&#32;&#32;__o2&#32;=&#32;__o;
634 &#32;&#32;&#32;&#32;}
635 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__desired),
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__o,&#32;__o2);
637 &#32;&#32;&#32;&#32;&#32;&#32;}
638 
639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(value_type&amp;&#32;__expected,&#32;value_type&#32;__desired,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o2)&#32;<emphasis role="keyword">noexcept</emphasis>
642 &#32;&#32;&#32;&#32;&#32;&#32;{
643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__desired),
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__o,&#32;__o2);
645 &#32;&#32;&#32;&#32;&#32;&#32;}
646 
647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
648 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(value_type&amp;&#32;__expected,&#32;value_type&#32;__desired,
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
650 &#32;&#32;&#32;&#32;&#32;&#32;{
651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__desired),&#32;__o);
652 &#32;&#32;&#32;&#32;&#32;&#32;}
653 
654 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
656 &#32;&#32;&#32;&#32;&#32;&#32;wait(value_type&#32;__old,
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
658 &#32;&#32;&#32;&#32;&#32;&#32;{
659 &#32;&#32;&#32;&#32;_M_impl.wait(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__old),&#32;__o);
660 &#32;&#32;&#32;&#32;&#32;&#32;}
661 
662 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
663 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;noexcept
664 &#32;&#32;&#32;&#32;&#32;&#32;{
665 &#32;&#32;&#32;&#32;_M_impl.notify_one();
666 &#32;&#32;&#32;&#32;&#32;&#32;}
667 
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
669 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;noexcept
670 &#32;&#32;&#32;&#32;&#32;&#32;{
671 &#32;&#32;&#32;&#32;_M_impl.notify_all();
672 &#32;&#32;&#32;&#32;&#32;&#32;}
673 <emphasis role="preprocessor">#endif</emphasis>
674 
675 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
676 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_atomic&lt;shared_ptr&lt;_Tp&gt;&gt;&#32;_M_impl;
677 &#32;&#32;&#32;&#32;};
678 
679 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
680 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>atomic&lt;weak_ptr&lt;_Tp&gt;&gt;
681 &#32;&#32;&#32;&#32;{
682 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;weak_ptr&lt;_Tp&gt;;
684 
685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_always_lock_free&#32;=&#32;<emphasis role="keyword">false</emphasis>;
686 
687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
688 &#32;&#32;&#32;&#32;&#32;&#32;is_lock_free()&#32;const&#32;noexcept
689 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
690 
691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;atomic()&#32;noexcept&#32;=&#32;default;
692 
693 &#32;&#32;&#32;&#32;&#32;&#32;atomic(weak_ptr&lt;_Tp&gt;&#32;__r)&#32;noexcept
694 &#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(move(__r))
695 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
696 
697 &#32;&#32;&#32;&#32;&#32;&#32;atomic(<emphasis role="keyword">const</emphasis>&#32;atomic&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;atomic&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
699 
700 &#32;&#32;&#32;&#32;&#32;&#32;weak_ptr&lt;_Tp&gt;
701 &#32;&#32;&#32;&#32;&#32;&#32;load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
702 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl.load(__o);&#32;}
703 
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;weak_ptr&lt;_Tp&gt;()&#32;const&#32;noexcept
705 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl.load(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
706 
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
708 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca8cd892b7b97ef9489ae4479d3f4ef0fc">store</link>(weak_ptr&lt;_Tp&gt;&#32;__desired,
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
710 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl.swap(__desired,&#32;__o);&#32;}
711 
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
713 &#32;&#32;&#32;&#32;&#32;&#32;operator=(weak_ptr&lt;_Tp&gt;&#32;__desired)&#32;<emphasis role="keyword">noexcept</emphasis>
714 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl.swap(__desired,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>);&#32;}
715 
716 &#32;&#32;&#32;&#32;&#32;&#32;weak_ptr&lt;_Tp&gt;
717 &#32;&#32;&#32;&#32;&#32;&#32;exchange(weak_ptr&lt;_Tp&gt;&#32;__desired,
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
719 &#32;&#32;&#32;&#32;&#32;&#32;{
720 &#32;&#32;&#32;&#32;_M_impl.swap(__desired,&#32;__o);
721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__desired;
722 &#32;&#32;&#32;&#32;&#32;&#32;}
723 
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
725 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(weak_ptr&lt;_Tp&gt;&amp;&#32;__expected,
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weak_ptr&lt;_Tp&gt;&#32;__desired,
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o2)&#32;<emphasis role="keyword">noexcept</emphasis>
728 &#32;&#32;&#32;&#32;&#32;&#32;{
729 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl.compare_exchange_strong(__expected,&#32;__desired,&#32;__o,&#32;__o2);
730 &#32;&#32;&#32;&#32;&#32;&#32;}
731 
732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
733 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_strong(value_type&amp;&#32;__expected,&#32;value_type&#32;__desired,
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
735 &#32;&#32;&#32;&#32;&#32;&#32;{
736 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o2;
737 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(__o)
738 &#32;&#32;&#32;&#32;{
739 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bae17e60cbfd766a7f165872c36e2f7bc5">memory_order_acq_rel</link>:
740 &#32;&#32;&#32;&#32;&#32;&#32;__o2&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bafb313754331704b978e9a80a933b3da7">memory_order_acquire</link>;
741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
742 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>:
743 &#32;&#32;&#32;&#32;&#32;&#32;__o2&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1bac6489d0374e297a776f6a3db7ea5654a">memory_order_relaxed</link>;
744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
745 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
746 &#32;&#32;&#32;&#32;&#32;&#32;__o2&#32;=&#32;__o;
747 &#32;&#32;&#32;&#32;}
748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__desired),
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__o,&#32;__o2);
750 &#32;&#32;&#32;&#32;&#32;&#32;}
751 
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
753 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(value_type&amp;&#32;__expected,&#32;value_type&#32;__desired,
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o2)&#32;<emphasis role="keyword">noexcept</emphasis>
755 &#32;&#32;&#32;&#32;&#32;&#32;{
756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__desired),
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__o,&#32;__o2);
758 &#32;&#32;&#32;&#32;&#32;&#32;}
759 
760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
761 &#32;&#32;&#32;&#32;&#32;&#32;compare_exchange_weak(value_type&amp;&#32;__expected,&#32;value_type&#32;__desired,
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
763 &#32;&#32;&#32;&#32;&#32;&#32;{
764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_exchange_strong(__expected,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__desired),&#32;__o);
765 &#32;&#32;&#32;&#32;&#32;&#32;}
766 
767 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
769 &#32;&#32;&#32;&#32;&#32;&#32;wait(value_type&#32;__old,
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1b">memory_order</link>&#32;__o&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba2d21914d1edd227a890107e7878a3752">memory_order_seq_cst</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
771 &#32;&#32;&#32;&#32;&#32;&#32;{
772 &#32;&#32;&#32;&#32;_M_impl.wait(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__old),&#32;__o);
773 &#32;&#32;&#32;&#32;&#32;&#32;}
774 
775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
776 &#32;&#32;&#32;&#32;&#32;&#32;notify_one()&#32;noexcept
777 &#32;&#32;&#32;&#32;&#32;&#32;{
778 &#32;&#32;&#32;&#32;_M_impl.notify_one();
779 &#32;&#32;&#32;&#32;&#32;&#32;}
780 
781 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
782 &#32;&#32;&#32;&#32;&#32;&#32;notify_all()&#32;noexcept
783 &#32;&#32;&#32;&#32;&#32;&#32;{
784 &#32;&#32;&#32;&#32;_M_impl.notify_all();
785 &#32;&#32;&#32;&#32;&#32;&#32;}
786 <emphasis role="preprocessor">#endif</emphasis>
787 
788 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
789 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_atomic&lt;weak_ptr&lt;_Tp&gt;&gt;&#32;_M_impl;
790 &#32;&#32;&#32;&#32;};
791 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
792 
795 
796 _GLIBCXX_END_NAMESPACE_VERSION
797 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
798 
799 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_SHARED_PTR_ATOMIC_H</emphasis>
</programlisting></section>
