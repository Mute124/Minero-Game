<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2fs__fwd_8h_source" xml:lang="en-US">
<title>fs_fwd.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/fs_fwd.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Filesystem&#32;declarations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_FS_FWD_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FS_FWD_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/chrono.h&gt;</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 
44 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
45 {
46 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
48 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cxx11&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__abi_tag__&#32;(<emphasis role="stringliteral">&quot;cxx11&quot;</emphasis>)))&#32;{&#32;}
50 <emphasis role="preprocessor">#endif</emphasis>
51 
56 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>file_status;
57 _GLIBCXX_BEGIN_NAMESPACE_CXX11
58 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>;
59 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>filesystem_error;
60 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_entry;
61 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator;
62 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
63 _GLIBCXX_END_NAMESPACE_CXX11
64 
66 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>space_info
67 &#32;&#32;{
68 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;capacity;
69 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;free;
70 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;available;
71 
72 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&gt;=&#32;201907L</emphasis>
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;space_info&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;space_info&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
74 <emphasis role="preprocessor">#endif</emphasis>
75 &#32;&#32;};
76 
78 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;file_type&#32;:&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;=&#32;0,&#32;not_found&#32;=&#32;-1,&#32;regular&#32;=&#32;1,&#32;directory&#32;=&#32;2,&#32;symlink&#32;=&#32;3,
80 &#32;&#32;&#32;&#32;&#32;&#32;block&#32;=&#32;4,&#32;character&#32;=&#32;5,&#32;fifo&#32;=&#32;6,&#32;socket&#32;=&#32;7,&#32;unknown&#32;=&#32;8
81 &#32;&#32;};
82 
84 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;copy_options&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;=&#32;0,
86 &#32;&#32;&#32;&#32;&#32;&#32;skip_existing&#32;=&#32;1,&#32;overwrite_existing&#32;=&#32;2,&#32;update_existing&#32;=&#32;4,
87 &#32;&#32;&#32;&#32;&#32;&#32;recursive&#32;=&#32;8,
88 &#32;&#32;&#32;&#32;&#32;&#32;copy_symlinks&#32;=&#32;16,&#32;skip_symlinks&#32;=&#32;32,
89 &#32;&#32;&#32;&#32;&#32;&#32;directories_only&#32;=&#32;64,&#32;create_symlinks&#32;=&#32;128,&#32;create_hard_links&#32;=&#32;256
90 &#32;&#32;};
91 
94 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
95 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(copy_options&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
96 &#32;&#32;{
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
98 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
100 &#32;&#32;}
101 
102 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
103 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(copy_options&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
104 &#32;&#32;{
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
108 &#32;&#32;}
109 
110 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
111 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(copy_options&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
112 &#32;&#32;{
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
116 &#32;&#32;}
117 
118 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_options
119 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(copy_options&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
120 &#32;&#32;{
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;copy_options&gt;::type;
122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>copy_options<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;__utype&gt;(__x));
123 &#32;&#32;}
124 
125 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;copy_options&amp;
126 &#32;&#32;operator&amp;=(copy_options&amp;&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
127 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;&amp;&#32;__y;&#32;}
128 
129 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;copy_options&amp;
130 &#32;&#32;operator|=(copy_options&amp;&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
131 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;|&#32;__y;&#32;}
132 
133 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;copy_options&amp;
134 &#32;&#32;operator^=(copy_options&amp;&#32;__x,&#32;copy_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
135 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;^&#32;__y;&#32;}
137 
138 
140 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;perms&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0,
142 &#32;&#32;&#32;&#32;&#32;&#32;owner_read&#32;&#32;&#32;&#32;=&#32;&#32;0400,
143 &#32;&#32;&#32;&#32;&#32;&#32;owner_write&#32;&#32;&#32;=&#32;&#32;0200,
144 &#32;&#32;&#32;&#32;&#32;&#32;owner_exec&#32;&#32;&#32;&#32;=&#32;&#32;0100,
145 &#32;&#32;&#32;&#32;&#32;&#32;owner_all&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0700,
146 &#32;&#32;&#32;&#32;&#32;&#32;group_read&#32;&#32;&#32;&#32;=&#32;&#32;&#32;040,
147 &#32;&#32;&#32;&#32;&#32;&#32;group_write&#32;&#32;&#32;=&#32;&#32;&#32;020,
148 &#32;&#32;&#32;&#32;&#32;&#32;group_exec&#32;&#32;&#32;&#32;=&#32;&#32;&#32;010,
149 &#32;&#32;&#32;&#32;&#32;&#32;group_all&#32;&#32;&#32;&#32;&#32;=&#32;&#32;&#32;070,
150 &#32;&#32;&#32;&#32;&#32;&#32;others_read&#32;&#32;&#32;=&#32;&#32;&#32;&#32;04,
151 &#32;&#32;&#32;&#32;&#32;&#32;others_write&#32;&#32;=&#32;&#32;&#32;&#32;02,
152 &#32;&#32;&#32;&#32;&#32;&#32;others_exec&#32;&#32;&#32;=&#32;&#32;&#32;&#32;01,
153 &#32;&#32;&#32;&#32;&#32;&#32;others_all&#32;&#32;&#32;&#32;=&#32;&#32;&#32;&#32;07,
154 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0777,
155 &#32;&#32;&#32;&#32;&#32;&#32;set_uid&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;04000,
156 &#32;&#32;&#32;&#32;&#32;&#32;set_gid&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;02000,
157 &#32;&#32;&#32;&#32;&#32;&#32;sticky_bit&#32;&#32;&#32;&#32;=&#32;01000,
158 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacemask">mask</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;07777,
159 &#32;&#32;&#32;&#32;&#32;&#32;unknown&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&#32;0xFFFF,
160 &#32;&#32;};
161 
164 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
165 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(perms&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
166 &#32;&#32;{
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
170 &#32;&#32;}
171 
172 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
173 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(perms&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
174 &#32;&#32;{
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
178 &#32;&#32;}
179 
180 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
181 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(perms&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
182 &#32;&#32;{
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
186 &#32;&#32;}
187 
188 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perms
189 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(perms&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
190 &#32;&#32;{
191 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perms&gt;::type;
192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perms<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;__utype&gt;(__x));
193 &#32;&#32;}
194 
195 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perms&amp;
196 &#32;&#32;operator&amp;=(perms&amp;&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
197 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;&amp;&#32;__y;&#32;}
198 
199 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perms&amp;
200 &#32;&#32;operator|=(perms&amp;&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
201 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;|&#32;__y;&#32;}
202 
203 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perms&amp;
204 &#32;&#32;operator^=(perms&amp;&#32;__x,&#32;perms&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
205 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;^&#32;__y;&#32;}
207 
209 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;perm_options&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>&#32;&#32;&#32;=&#32;0x1,
211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__setup__force__size__t__length_8cpp_1a125cf68de8b64e40ee4cede7e2b57ea2">add</link>&#32;&#32;&#32;=&#32;0x2,
212 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>&#32;&#32;&#32;&#32;=&#32;0x4,
213 &#32;&#32;&#32;&#32;&#32;&#32;nofollow&#32;&#32;=&#32;0x8
214 &#32;&#32;};
215 
218 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perm_options
219 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(perm_options&#32;__x,&#32;perm_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
220 &#32;&#32;{
221 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perm_options&gt;::type;
222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perm_options<emphasis role="keyword">&gt;</emphasis>(
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
224 &#32;&#32;}
225 
226 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perm_options
227 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(perm_options&#32;__x,&#32;perm_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
228 &#32;&#32;{
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perm_options&gt;::type;
230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perm_options<emphasis role="keyword">&gt;</emphasis>(
231 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
232 &#32;&#32;}
233 
234 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perm_options
235 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(perm_options&#32;__x,&#32;perm_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
236 &#32;&#32;{
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perm_options&gt;::type;
238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perm_options<emphasis role="keyword">&gt;</emphasis>(
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
240 &#32;&#32;}
241 
242 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;perm_options
243 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(perm_options&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
244 &#32;&#32;{
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;perm_options&gt;::type;
246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>perm_options<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;__utype&gt;(__x));
247 &#32;&#32;}
248 
249 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perm_options&amp;
250 &#32;&#32;operator&amp;=(perm_options&amp;&#32;__x,&#32;perm_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
251 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;&amp;&#32;__y;&#32;}
252 
253 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perm_options&amp;
254 &#32;&#32;operator|=(perm_options&amp;&#32;__x,&#32;perm_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
255 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;|&#32;__y;&#32;}
256 
257 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;perm_options&amp;
258 &#32;&#32;operator^=(perm_options&amp;&#32;__x,&#32;perm_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
259 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;^&#32;__y;&#32;}
261 
263 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;directory_options&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;{
264 &#32;&#32;&#32;&#32;&#32;&#32;none&#32;=&#32;0,&#32;follow_directory_symlink&#32;=&#32;1,&#32;skip_permission_denied&#32;=&#32;2
265 &#32;&#32;};
266 
269 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
270 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(directory_options&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
271 &#32;&#32;{
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
275 &#32;&#32;}
276 
277 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
278 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(directory_options&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
279 &#32;&#32;{
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(
282 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
283 &#32;&#32;}
284 
285 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
286 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(directory_options&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
287 &#32;&#32;{
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__x)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__utype<emphasis role="keyword">&gt;</emphasis>(__y));
291 &#32;&#32;}
292 
293 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;directory_options
294 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(directory_options&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
295 &#32;&#32;{
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__utype&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::underlying_type&lt;directory_options&gt;::type;
297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>directory_options<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;__utype&gt;(__x));
298 &#32;&#32;}
299 
300 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_options&amp;
301 &#32;&#32;operator&amp;=(directory_options&amp;&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
302 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;&amp;&#32;__y;&#32;}
303 
304 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_options&amp;
305 &#32;&#32;operator|=(directory_options&amp;&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
306 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;|&#32;__y;&#32;}
307 
308 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_options&amp;
309 &#32;&#32;operator^=(directory_options&amp;&#32;__x,&#32;directory_options&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
310 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;=&#32;__x&#32;^&#32;__y;&#32;}
312 
314 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>file_time_type&#32;=&#32;__file_clock::time_point;
315 
316 &#32;&#32;<emphasis role="comment">//&#32;operational&#32;functions</emphasis>
317 
318 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options);
319 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options,
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;);
321 
322 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option);
323 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option,
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;);
325 
326 &#32;&#32;<link linkend="_classpath">path</link>&#32;current_path();
327 
328 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exists(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
329 
330 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_other(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
331 
332 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;file_size(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
333 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;file_size(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
334 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;hard_link_count(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
335 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;hard_link_count(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
336 &#32;&#32;file_time_type&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
337 &#32;&#32;file_time_type&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
338 
339 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;permissions(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;perms,&#32;perm_options,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
340 
341 &#32;&#32;<link linkend="_classpath">path</link>&#32;proximate(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base,&#32;error_code&amp;&#32;__ec);
342 &#32;&#32;<link linkend="_classpath">path</link>&#32;proximate(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base,&#32;error_code&amp;&#32;__ec);
343 
344 &#32;&#32;<link linkend="_classpath">path</link>&#32;relative(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base,&#32;error_code&amp;&#32;__ec);
345 
346 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
347 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
348 
349 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status_known(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
350 
351 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
352 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
353 
354 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_regular_file(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
355 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_symlink(file_status)&#32;<emphasis role="keyword">noexcept</emphasis>;
356 
357 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
358 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
359 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;error_code&amp;);
360 
362 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
363 _GLIBCXX_END_NAMESPACE_VERSION
364 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
365 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
366 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_FS_FWD_H</emphasis>
</programlisting></section>
