<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__set_8h_source" xml:lang="en-US">
<title>stl_set.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_set.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Set&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_SET_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_SET_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
60 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
62 <emphasis role="preprocessor">#endif</emphasis>
63 
64 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
65 {
66 _GLIBCXX_BEGIN_NAMESPACE_VERSION
67 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
68 
69 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>multiset;
71 
92 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;std::less&lt;_Key&gt;,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;_Key&gt;&#32;&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>
95 &#32;&#32;&#32;&#32;{
96 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_value_type;
99 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Key,&#32;_SGIAssignableConcept)
101 <emphasis role="preprocessor">#&#32;endif</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1a0efeda71d183434752b2df77dde3e72c">__glibcxx_class_requires4</link>(_Compare,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;_Key,&#32;_Key,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryFunctionConcept)
104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Key,&#32;_Alloc_value_type,&#32;_SameTypeConcept)
105 <emphasis role="preprocessor">#endif</emphasis>
106 
107 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;remove_cv&lt;_Key&gt;::type,&#32;_Key&gt;<link linkend="_classvalue">::value</link>,
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::set&#32;must&#32;have&#32;a&#32;non-const,&#32;non-volatile&#32;value_type&quot;</emphasis>);
110 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;_Key&gt;::value,
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::set&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
113 <emphasis role="preprocessor">#&#32;endif</emphasis>
114 <emphasis role="preprocessor">#endif</emphasis>
115 
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typedefs:</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;key_type;
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;value_type;
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;key_compare;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;value_compare;
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;allocator_type;
126 
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
129 &#32;&#32;&#32;&#32;rebind&lt;_Key&gt;::other&#32;_Key_alloc_type;
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rb_tree&lt;key_type,&#32;value_type,&#32;_Identity&lt;value_type&gt;,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare,&#32;_Key_alloc_type&gt;&#32;_Rep_type;
133 &#32;&#32;&#32;&#32;&#32;&#32;_Rep_type&#32;_M_t;&#32;&#32;<emphasis role="comment">//&#32;Red-black&#32;tree&#32;representing&#32;set.</emphasis>
134 
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Key_alloc_type&gt;&#32;_Alloc_traits;
136 
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;&#32;const_pointer;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::reference&#32;&#32;&#32;&#32;&#32;&#32;reference;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_reference&#32;&#32;&#32;&#32;const_reference;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;103.&#32;set::iterator&#32;is&#32;required&#32;to&#32;be&#32;modifiable,</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;this&#32;allows&#32;modification&#32;of&#32;keys.</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_iterator&#32;&#32;&#32;&#32;&#32;iterator;
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_iterator&#32;&#32;&#32;&#32;&#32;const_iterator;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_reverse_iterator&#32;reverse_iterator;
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::const_reverse_iterator&#32;const_reverse_iterator;
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::size_type&#32;&#32;&#32;&#32;&#32;&#32;size_type;
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::difference_type&#32;&#32;&#32;&#32;difference_type;
154 
155 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::node_type;
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>insert_return_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep_type::insert_return_type;
158 <emphasis role="preprocessor">#endif</emphasis>
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allocation/deallocation</emphasis>
164 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>()&#32;:&#32;_M_t()&#32;{&#32;}
166 <emphasis role="preprocessor">#else</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
168 <emphasis role="preprocessor">#endif</emphasis>
169 
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
178 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Key_alloc_type(__a))&#32;{&#32;}
179 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
191 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
192 &#32;&#32;&#32;&#32;:&#32;_M_t()
193 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
194 
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
208 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
211 &#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Key_alloc_type(__a))
212 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
213 
219 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
220 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&#32;__x)
221 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__x._M_t)&#32;{&#32;}
222 <emphasis role="preprocessor">#else</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
224 
231 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
232 
243 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;value_type&gt;&#32;__l,
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp&#32;=&#32;_Compare(),
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
246 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__comp,&#32;_Key_alloc_type(__a))
247 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__l.begin(),&#32;__l.end());&#32;}
248 
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
252 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Key_alloc_type(__a))&#32;{&#32;}
253 
255 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
256 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(__x._M_t,&#32;_Key_alloc_type(__a))&#32;{&#32;}
257 
259 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_constructible&lt;_Compare&gt;::value
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Alloc_traits::_S_always_equal())
262 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_t),&#32;_Key_alloc_type(__a))&#32;{&#32;}
263 
265 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;value_type&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
266 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_t(_Key_alloc_type(__a))
267 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__l.begin(),&#32;__l.end());&#32;}
268 
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
271 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
273 &#32;&#32;&#32;&#32;:&#32;_M_t(_Key_alloc_type(__a))
274 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
275 
281 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">~set</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
282 <emphasis role="preprocessor">#endif</emphasis>
283 
289 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
290 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;
291 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&#32;__x)
292 &#32;&#32;&#32;&#32;&#32;&#32;{
293 &#32;&#32;&#32;&#32;_M_t&#32;=&#32;__x._M_t;
294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
295 &#32;&#32;&#32;&#32;&#32;&#32;}
296 <emphasis role="preprocessor">#else</emphasis>
297 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;
298 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
299 
301 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;
302 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
303 
315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;
316 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
317 &#32;&#32;&#32;&#32;&#32;&#32;{
318 &#32;&#32;&#32;&#32;_M_t._M_assign_unique(__l.begin(),&#32;__l.end());
319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
320 &#32;&#32;&#32;&#32;&#32;&#32;}
321 <emphasis role="preprocessor">#endif</emphasis>
322 
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;accessors:</emphasis>
324 
326 &#32;&#32;&#32;&#32;&#32;&#32;key_compare
327 &#32;&#32;&#32;&#32;&#32;&#32;key_comp()<emphasis role="keyword">&#32;const</emphasis>
328 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.key_comp();&#32;}
330 &#32;&#32;&#32;&#32;&#32;&#32;value_compare
331 &#32;&#32;&#32;&#32;&#32;&#32;value_comp()<emphasis role="keyword">&#32;const</emphasis>
332 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.key_comp();&#32;}
334 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
335 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
336 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_t.get_allocator());&#32;}
337 
343 &#32;&#32;&#32;&#32;&#32;&#32;iterator
344 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
345 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
346 
352 &#32;&#32;&#32;&#32;&#32;&#32;iterator
353 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
354 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
355 
361 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
362 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
363 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
364 
370 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
371 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
372 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
373 
374 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
380 &#32;&#32;&#32;&#32;&#32;&#32;iterator
381 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
382 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.begin();&#32;}
383 
389 &#32;&#32;&#32;&#32;&#32;&#32;iterator
390 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
391 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.end();&#32;}
392 
398 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
399 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
400 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rbegin();&#32;}
401 
407 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
408 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
409 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.rend();&#32;}
410 <emphasis role="preprocessor">#endif</emphasis>
411 
413 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
415 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.empty();&#32;}
416 
418 &#32;&#32;&#32;&#32;&#32;&#32;size_type
419 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
420 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.size();&#32;}
421 
423 &#32;&#32;&#32;&#32;&#32;&#32;size_type
424 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
425 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.max_size();&#32;}
426 
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;swap(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&amp;&#32;__x)
442 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable&lt;_Compare&gt;::value)
443 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.swap(__x._M_t);&#32;}
444 
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert/erase</emphasis>
446 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
461 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
462 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
463 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_unique(std::forward&lt;_Args&gt;(__args)...);&#32;}
464 
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
487 &#32;&#32;&#32;&#32;iterator
488 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
489 &#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_emplace_hint_unique(__pos,
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
492 &#32;&#32;&#32;&#32;}
493 <emphasis role="preprocessor">#endif</emphasis>
494 
508 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
509 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
510 &#32;&#32;&#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;std::pair&lt;typename&#32;_Rep_type::iterator,&#32;bool&gt;&#32;__p&#32;=
512 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_insert_unique(__x);
513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;iterator,&#32;bool&gt;(__p.first,&#32;__p.second);
514 &#32;&#32;&#32;&#32;&#32;&#32;}
515 
516 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
517 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
518 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
519 &#32;&#32;&#32;&#32;&#32;&#32;{
520 &#32;&#32;&#32;&#32;std::pair&lt;typename&#32;_Rep_type::iterator,&#32;bool&gt;&#32;__p&#32;=
521 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_insert_unique(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;iterator,&#32;bool&gt;(__p.first,&#32;__p.second);
523 &#32;&#32;&#32;&#32;&#32;&#32;}
524 <emphasis role="preprocessor">#endif</emphasis>
525 
545 &#32;&#32;&#32;&#32;&#32;&#32;iterator
546 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
547 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_unique_(__position,&#32;__x);&#32;}
548 
549 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
550 &#32;&#32;&#32;&#32;&#32;&#32;iterator
551 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
552 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_insert_unique_(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
553 <emphasis role="preprocessor">#endif</emphasis>
554 
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
565 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
566 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
567 &#32;&#32;&#32;&#32;{&#32;_M_t._M_insert_range_unique(__first,&#32;__last);&#32;}
568 
569 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
579 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;insert(__l.begin(),&#32;__l.end());&#32;}
580 <emphasis role="preprocessor">#endif</emphasis>
581 
582 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
584 &#32;&#32;&#32;&#32;&#32;&#32;node_type
585 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
586 &#32;&#32;&#32;&#32;&#32;&#32;{
587 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__pos);
589 &#32;&#32;&#32;&#32;&#32;&#32;}
590 
592 &#32;&#32;&#32;&#32;&#32;&#32;node_type
593 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
594 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.extract(__x);&#32;}
595 
597 &#32;&#32;&#32;&#32;&#32;&#32;insert_return_type
598 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
599 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_unique(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
600 
602 &#32;&#32;&#32;&#32;&#32;&#32;iterator
603 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
604 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_reinsert_node_hint_unique(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
605 
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
607 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>std::_Rb_tree_merge_helper;
608 
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
610 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
611 &#32;&#32;&#32;&#32;merge(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare1, _Alloc&gt;</link>&amp;&#32;__source)
612 &#32;&#32;&#32;&#32;{
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;set,&#32;_Compare1&gt;;
614 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
615 &#32;&#32;&#32;&#32;}
616 
617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
618 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
619 &#32;&#32;&#32;&#32;merge(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare1, _Alloc&gt;</link>&amp;&amp;&#32;__source)
620 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
621 
622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
623 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
624 &#32;&#32;&#32;&#32;merge(multiset&lt;_Key,&#32;_Compare1,&#32;_Alloc&gt;&amp;&#32;__source)
625 &#32;&#32;&#32;&#32;{
626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Rb_tree_merge_helper&lt;set,&#32;_Compare1&gt;;
627 &#32;&#32;&#32;&#32;&#32;&#32;_M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
628 &#32;&#32;&#32;&#32;}
629 
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare1&gt;
631 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
632 &#32;&#32;&#32;&#32;merge(multiset&lt;_Key,&#32;_Compare1,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
633 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
634 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
635 
636 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
652 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
653 &#32;&#32;&#32;&#32;&#32;&#32;iterator
654 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
655 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__position);&#32;}
656 <emphasis role="preprocessor">#else</emphasis>
667 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
668 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
669 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__position);&#32;}
670 <emphasis role="preprocessor">#endif</emphasis>
671 
683 &#32;&#32;&#32;&#32;&#32;&#32;size_type
684 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
685 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__x);&#32;}
686 
687 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;130.&#32;Associative&#32;erase&#32;should&#32;return&#32;an&#32;iterator.</emphasis>
704 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
705 &#32;&#32;&#32;&#32;&#32;&#32;iterator
706 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
707 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.erase(__first,&#32;__last);&#32;}
708 <emphasis role="preprocessor">#else</emphasis>
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
722 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
723 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.erase(__first,&#32;__last);&#32;}
724 <emphasis role="preprocessor">#endif</emphasis>
725 
732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
733 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
734 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_t.clear();&#32;}
735 
736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;operations:</emphasis>
737 
739 
747 &#32;&#32;&#32;&#32;&#32;&#32;size_type
748 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
749 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x)&#32;==&#32;_M_t.end()&#32;?&#32;0&#32;:&#32;1;&#32;}
750 
751 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
753 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
754 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
755 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_count_tr(__x))
756 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_count_tr(__x);&#32;}
757 <emphasis role="preprocessor">#endif</emphasis>
759 
760 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
762 
767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
769 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x)&#32;!=&#32;_M_t.end();&#32;}
770 
771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
772 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
773 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
774 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_t._M_find_tr(__x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
775 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t._M_find_tr(__x)&#32;!=&#32;_M_t.end();&#32;}
777 <emphasis role="preprocessor">#endif</emphasis>
778 
779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;214.&#32;&#32;set::find()&#32;missing&#32;const&#32;overload</emphasis>
782 
793 &#32;&#32;&#32;&#32;&#32;&#32;iterator
794 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
795 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
796 
797 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
798 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
799 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.find(__x);&#32;}
800 
801 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
803 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
804 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
805 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator{_M_t._M_find_tr(__x)})
806 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{_M_t._M_find_tr(__x)};&#32;}
807 
808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
809 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
810 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
811 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(const_iterator{_M_t._M_find_tr(__x)})
812 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator{_M_t._M_find_tr(__x)};&#32;}
813 <emphasis role="preprocessor">#endif</emphasis>
815 
817 
828 &#32;&#32;&#32;&#32;&#32;&#32;iterator
829 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
830 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
833 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
834 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.lower_bound(__x);&#32;}
835 
836 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
838 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
839 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
840 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_lower_bound_tr(__x)))
841 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_lower_bound_tr(__x));&#32;}
842 
843 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
844 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
845 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
846 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(const_iterator(_M_t._M_lower_bound_tr(__x)))
847 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_t._M_lower_bound_tr(__x));&#32;}
848 <emphasis role="preprocessor">#endif</emphasis>
850 
852 
858 &#32;&#32;&#32;&#32;&#32;&#32;iterator
859 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
860 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
861 
862 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
863 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
864 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.upper_bound(__x);&#32;}
865 
866 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
868 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
869 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
870 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_upper_bound_tr(__x)))
871 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_t._M_upper_bound_tr(__x));&#32;}
872 
873 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
874 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
875 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
876 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(iterator(_M_t._M_upper_bound_tr(__x)))
877 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_t._M_upper_bound_tr(__x));&#32;}
878 <emphasis role="preprocessor">#endif</emphasis>
880 
882 
897 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
898 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
899 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
900 
901 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
902 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
903 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_t.equal_range(__x);&#32;}
904 
905 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
907 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
908 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
909 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x)))
910 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x));&#32;}
911 
912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
913 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
914 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
915 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x)))
916 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;iterator,&#32;iterator&gt;(_M_t._M_equal_range_tr(__x));&#32;}
917 <emphasis role="preprocessor">#endif</emphasis>
919 
920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
921 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
922 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_K1, _C1, _A1&gt;</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_K1, _C1, _A1&gt;</link>&amp;);
923 
924 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
925 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
926 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;__detail::__synth3way_t&lt;_K1&gt;
927 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_K1, _C1, _A1&gt;</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_K1, _C1, _A1&gt;</link>&amp;);
928 <emphasis role="preprocessor">#else</emphasis>
929 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_K1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_C1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1&gt;
930 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
931 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_K1, _C1, _A1&gt;</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_K1, _C1, _A1&gt;</link>&amp;);
932 <emphasis role="preprocessor">#endif</emphasis>
933 &#32;&#32;&#32;&#32;};
934 
935 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
936 
937 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
945 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator,&#32;_InputIterator,
946 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
947 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;typename iterator_traits&lt;_InputIterator&gt;::value_type</link>,
948 &#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Allocator&gt;;
949 
950 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;_Key&gt;,
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_Key&gt;,
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
954 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;_Key&gt;,
955 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
956 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Allocator&gt;</link>;
957 
958 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
961 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
962 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;typename iterator_traits&lt;_InputIterator&gt;::value_type</link>,
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
965 
966 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
968 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(initializer_list&lt;_Key&gt;,&#32;_Allocator)
969 &#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, less&lt;_Key&gt;</link>,&#32;_Allocator&gt;;
970 
971 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;deduction&#32;guides</emphasis>
972 
983 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
984 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
985 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
987 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;==&#32;__y._M_t;&#32;}
988 
989 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1004 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1005 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;_Key&gt;
1006 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
1008 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;=&gt;&#32;__y._M_t;&#32;}
1009 <emphasis role="preprocessor">#else</emphasis>
1021 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1022 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1023 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
1025 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_t&#32;&lt;&#32;__y._M_t;&#32;}
1026 
1028 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1029 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1030 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
1032 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1033 
1035 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1036 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1037 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
1039 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
1040 
1042 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1043 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1044 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
1046 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
1047 
1049 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1050 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1051 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
1053 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
1054 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1055 
1057 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1058 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1059 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__x,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set&lt;_Key, _Compare, _Alloc&gt;</link>&amp;&#32;__y)
1060 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
1061 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
1062 
1063 _GLIBCXX_END_NAMESPACE_CONTAINER
1064 
1065 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1066 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::set&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;sets.</emphasis>
1067 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp2&gt;
1068 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
1069 &#32;&#32;&#32;&#32;_Rb_tree_merge_helper&lt;_GLIBCXX_STD_C::set&lt;_Val,&#32;_Cmp1,&#32;_Alloc&gt;,&#32;_Cmp2&gt;
1070 &#32;&#32;&#32;&#32;{
1071 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_GLIBCXX_STD_C::set&lt;_Val,&#32;_Cmp1,&#32;_Alloc&gt;;
1073 
1074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1075 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::set&lt;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__set)
1076 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_t;&#32;}
1077 
1078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1079 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_tree(_GLIBCXX_STD_C::multiset&lt;_Val,&#32;_Cmp2,&#32;_Alloc&gt;&amp;&#32;__set)
1080 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_t;&#32;}
1081 &#32;&#32;&#32;&#32;};
1082 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1083 
1084 _GLIBCXX_END_NAMESPACE_VERSION
1085 }&#32;<emphasis role="comment">//namespace&#32;std</emphasis>
1086 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_SET_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
