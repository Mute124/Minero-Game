<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2parallel_2random__shuffle_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/random_shuffle.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/random_shuffle.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;limits&gt;<?linebreak?>#include &lt;bits/stl_numeric.h&gt;<?linebreak?>#include &lt;parallel/parallel.h&gt;<?linebreak?>#include &lt;parallel/random_number.h&gt;<?linebreak?></programlisting>Include dependency graph for random_shuffle.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2parallel_2random__shuffle_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data">__gnu_parallel::_DRandomShufflingGlobalData&lt; _RAIter &gt;</link></para>

<para>Data known to every thread participating in <link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__gnu_parallel::__parallel_random_shuffle()</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u">__gnu_parallel::_DRSSorterPU&lt; _RAIter, _RandomNumberGenerator &gt;</link></para>

<para>Local data for a thread participating in <link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__gnu_parallel::__parallel_random_shuffle()</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace____gnu__parallel">__gnu_parallel</link></para>

<para>GNU parallel code for public use. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename _RandomNumberGenerator &gt; </para><para>int <link linkend="_namespace____gnu__parallel_1a06421834042f49edbb2abb2dd931315d">__gnu_parallel::__random_number_pow2</link> (int __logp, _RandomNumberGenerator &amp;__rng)</para>

<para>Generate a random number in <computeroutput></computeroutput>[0,2^__logp). </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ab52b56076dd965bea099a7187e621d0b">__gnu_parallel::__parallel_random_shuffle_drs_pu</link> (<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u">_DRSSorterPU</link>&lt; _RAIter, _RandomNumberGenerator &gt; *__pus)</para>

<para>Random shuffle code executed by each thread. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>_Tp <link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__gnu_parallel::__round_up_to_pow2</link> (_Tp __x)</para>

<para>Round up to the next greater power of 2. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a9152bade9629217427f065780bc3f4c2">__gnu_parallel::__parallel_random_shuffle_drs</link> (_RAIter __begin, _RAIter __end, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __n, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, _RandomNumberGenerator &amp;__rng)</para>

<para><link linkend="_class_main">Main</link> parallel random shuffle step. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868">__gnu_parallel::__sequential_random_shuffle</link> (_RAIter __begin, _RAIter __end, _RandomNumberGenerator &amp;__rng)</para>

<para>Sequential cache-efficient random shuffle. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__gnu_parallel::__parallel_random_shuffle</link> (_RAIter __begin, _RAIter __end, _RandomNumberGenerator __rng=<link linkend="_class____gnu__parallel_1_1___random_number">_RandomNumber</link>())</para>

<para>Parallel random public call. </para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
