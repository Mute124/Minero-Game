<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_array_8h_source" xml:lang="en-US">
<title>array.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/array.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__utility_8h">std_utility.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__vector_8h">std_vector.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__initializer__list_8h">std_initializer_list.h</link>&quot;</emphasis>
10 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_value_8h">value.h</link>&quot;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_make__node_8h">make_node.h</link>&quot;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
13 
15 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
16 {
17 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;IsConst&gt;
18 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_preprocessor_8h_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;array_iterator
19 &#32;&#32;&#32;&#32;{
20 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>array_iterator;
23 
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>mutable_vector_iterator&#32;=&#32;std::vector&lt;node_ptr&gt;::iterator;
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_vector_iterator&#32;&#32;&#32;=&#32;std::vector&lt;node_ptr&gt;::const_iterator;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>vector_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const_vector_iterator,&#32;mutable_vector_iterator&gt;;
27 
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;vector_iterator&#32;iter_;
29 
30 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const&#32;node,&#32;node&gt;;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;value_type&amp;;
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;value_type*;
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;vector_iterator&gt;::iterator_category;
36 
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator()&#32;noexcept&#32;=&#32;default;
39 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;array_iterator(mutable_vector_iterator&#32;iter)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
44 
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;array_iterator(const_vector_iterator&#32;iter)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator(<emphasis role="keyword">const</emphasis>&#32;array_iterator&lt;false&gt;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;other.iter_&#32;}
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
56 
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
59 
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator++()&#32;noexcept&#32;<emphasis role="comment">//&#32;++pre</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
67 
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post++</emphasis>
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;out{&#32;iter_&#32;};
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator--()&#32;noexcept&#32;<emphasis role="comment">//&#32;--pre</emphasis>
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
80 
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post--</emphasis>
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;out{&#32;iter_&#32;};
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*iter_-&gt;get();
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;operator-&gt;()&#32;const&#32;noexcept
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_-&gt;get();
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;vector_iterator&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(!<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;const_vector_iterator()&#32;const&#32;noexcept
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_&#32;+=&#32;rhs;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator-=(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_&#32;-=&#32;rhs;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;array_iterator&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array_iterator{&#32;lhs.iter_&#32;+&#32;rhs&#32;};
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;array_iterator&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array_iterator{&#32;rhs.iter_&#32;+&#32;lhs&#32;};
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;array_iterator&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array_iterator{&#32;lhs.iter_&#32;-&#32;rhs&#32;};
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
142 
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;-&#32;rhs.iter_;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;==&#32;rhs.iter_;
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
154 
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;!=&#32;rhs.iter_;
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
160 
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&lt;&#32;rhs.iter_;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&lt;=&#32;rhs.iter_;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&gt;&#32;rhs.iter_;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
178 
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&gt;=&#32;rhs.iter_;
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
184 
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;operator[](<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;idx)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(iter_&#32;+&#32;idx)-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
190 &#32;&#32;&#32;&#32;};
191 
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structarray__init__elem">array_init_elem</link>
193 &#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;node_ptr&#32;<link linkend="_structarray__init__elem_1a04752d3afbcb81a792e0bfbd57003f2a">value</link>;
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structarray__init__elem">array_init_elem</link>(T&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)&#32;<emphasis role="comment">//</emphasis>
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classvalue">value</link>{&#32;<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(static_cast&lt;T&amp;&amp;&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;}
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
201 &#32;&#32;&#32;&#32;};
202 }
203 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
205 
206 <link linkend="_array_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
207 {
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>array_iterator&#32;=&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::array_iterator&lt;false&gt;);
210 
212 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_array_8h_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link>&#32;=&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::array_iterator&lt;true&gt;);
213 
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classarray">array</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;node
265 &#32;&#32;&#32;&#32;{
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
268 
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>vector_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::vector&lt;impl::node_ptr&gt;;
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>vector_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;vector_type::iterator;
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_vector_iterator&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;vector_type::const_iterator;
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector_type&#32;elems_;
273 
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*,&#32;<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*);
277 
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(std::false_type,&#32;std::initializer_list&lt;impl::array_init_elem&gt;&#32;elems)&#32;<emphasis role="comment">//</emphasis>
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classarray">array</link>{&#32;elems.<link linkend="_classarray_1a0215ba81d7547fcd4e81fed83140b40a">begin</link>(),&#32;elems.end()&#32;}
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;preinsertion_resize(<emphasis role="keywordtype">size_t</emphasis>&#32;idx,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
285 
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;insert_at_back(impl::node_ptr&amp;&amp;);
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector_iterator&#32;insert_at(const_vector_iterator,&#32;impl::node_ptr&amp;&amp;);
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;emplace_back_if_not_empty_view(T&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;T&gt;)
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_at_back(impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
302 
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;total_leaf_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;flatten_child(<link linkend="_classarray">array</link>&amp;&amp;&#32;child,&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;dest_index)&#32;<emphasis role="keyword">noexcept</emphasis>;
309 
311 
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1af0e812608d7d0f58415f98a112d939cb">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1ab5532fb7056099ba0485affa76694cc7">size_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>;
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139">difference_type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1a55744407041edf5e34d374ed10ca4809">reference</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node&amp;;
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1a0e221fb96f0fbdc07e20b811591fa686">const_reference</link>&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;;
318 
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array</link>()&#32;noexcept;
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~<link linkend="_classarray">array</link>()&#32;noexcept;
326 
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(const&#32;<link linkend="_classarray">array</link>&amp;);
331 
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(<link linkend="_classarray">array</link>&amp;&amp;&#32;other)&#32;noexcept;
336 
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((sizeof...(ElemTypes)&#32;&gt;&#32;0&#32;||&#32;!<link linkend="_namespacestd">std</link>::is_same_v&lt;impl::remove_cvref&lt;ElemType&gt;,&#32;<link linkend="_classarray">array</link>&gt;),
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;ElemType,
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename...&#32;ElemTypes)
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classarray">array</link>(ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;ElemTypes&amp;&amp;...&#32;vals)
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classarray">array</link>{&#32;std::false_type{},
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::initializer_list&lt;impl::array_init_elem&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemTypes&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(vals)...&#32;}&#32;}
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
378 
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;);
382 
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">operator=</link>(<link linkend="_classarray">array</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
386 
389 
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_type&#32;<link linkend="_classarray_1a9ccff2347a4e44e86ec966c0aba8aec3">type</link>()&#32;const&#32;noexcept&#32;final
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_type::array;
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1ac515de2b5c9aeebd65b046191fe53c20">is_homogeneous</link>(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1add3b969719a6b19e177f3e1cb444b29a">is_homogeneous</link>(node_type&#32;ntype,&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
404 
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a34a1b4f03f0deeb196920867060a1ed2">is_homogeneous</link>(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
408 
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous()&#32;const&#32;noexcept
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;ElemType&gt;&gt;;
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_void_v&lt;type&gt;&#32;||&#32;toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;array::is_homogeneous()&#32;must&#32;be&#32;void&#32;or&#32;one&#32;&quot;</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
418 
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_homogeneous(impl::node_type_of&lt;type&gt;);
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
422 
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1af12f1f0b923817f79649514f378345b1">is_table</link>()&#32;const&#32;noexcept&#32;final
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
429 
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a15f11553a26aadc2b6035e5bebc1b82e">is_array</link>()&#32;const&#32;noexcept&#32;final
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
436 
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a6efebd20b162d0297dc45cdcb312f885">is_array_of_tables</link>()&#32;const&#32;noexcept&#32;final
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_homogeneous(node_type::table);
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
443 
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1aa1efcb5bf28b4d1e4f6ccd144fdcf2a1">is_value</link>()&#32;const&#32;noexcept&#32;final
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
450 
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a26e7c61caa26aceb1d680d3a166039c5">is_string</link>()&#32;const&#32;noexcept&#32;final
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
457 
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a6d29b7aa90c36ef1ed49e36f98839528">is_integer</link>()&#32;const&#32;noexcept&#32;final
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
464 
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a4fab255d87c6ae9d36e4a3c246dd5f07">is_floating_point</link>()&#32;const&#32;noexcept&#32;final
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
471 
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1adc342485eeabade65bba8e71174855a4">is_number</link>()&#32;const&#32;noexcept&#32;final
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
478 
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a1372f03a89df119b74840c3827ca9a5f">is_boolean</link>()&#32;const&#32;noexcept&#32;final
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
485 
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1af962a263286ae8226de1e21808ff0dc5">is_date</link>()&#32;const&#32;noexcept&#32;final
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
492 
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a64896e10538bbdf9580b847541ddc24a">is_time</link>()&#32;const&#32;noexcept&#32;final
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
499 
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a17bec6bcc814ae17ec6c677008d331c4">is_date_time</link>()&#32;const&#32;noexcept&#32;final
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
506 
508 
511 
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classarray_1a0392038ae47856939bdb69a45aa02f19">as_table</link>()&#32;noexcept&#32;final
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
518 
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link>()&#32;noexcept&#32;final
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
525 
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classarray_1a2c565b702d0e7f7d0a8b7b560d6942e7">as_string</link>()&#32;noexcept&#32;final
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
532 
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classarray_1a6eac9d65fd5fc42999c7899d1667e2e7">as_integer</link>()&#32;noexcept&#32;final
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
539 
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classarray_1a1e9d91f1eb1bffd5ccb413c5a8629a06">as_floating_point</link>()&#32;noexcept&#32;final
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
546 
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classarray_1a5201cfd7b1e4f781120c57f1bd5bd261">as_boolean</link>()&#32;noexcept&#32;final
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
553 
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classarray_1ada3cb4f3e2e02845457837b34b2f51c5">as_date</link>()&#32;noexcept&#32;final
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
560 
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classarray_1ac6177c03c1242d5e48b8c551350d9bb1">as_time</link>()&#32;noexcept&#32;final
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
567 
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classarray_1a9ca76642edccdd01cc1c03d807364afa">as_date_time</link>()&#32;noexcept&#32;final
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
574 
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classarray_1a9ebc4e46a6a25419f143fbb887ceb4ec">as_table</link>()&#32;const&#32;noexcept&#32;final
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
581 
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classarray_1a786d5d347389737ed95296f430449fe6">as_array</link>()&#32;const&#32;noexcept&#32;final
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
588 
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classarray_1ac584a174d9fe2520d4abde7d70e9a4dd">as_string</link>()&#32;const&#32;noexcept&#32;final
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
595 
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classarray_1abde810ec6aaffdf0da0b7f8392e875df">as_integer</link>()&#32;const&#32;noexcept&#32;final
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
602 
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classarray_1ab720c1761d1c4a4fc3ebba4a8ea5cde6">as_floating_point</link>()&#32;const&#32;noexcept&#32;final
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
609 
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classarray_1a1eabfb6e7690206fc06319c75f9f5ade">as_boolean</link>()&#32;const&#32;noexcept&#32;final
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
616 
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classarray_1ad7bd73a6b8abce589acab23df19d7441">as_date</link>()&#32;const&#32;noexcept&#32;final
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
623 
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classarray_1a63e8132f3b5cad45f09e8afcd4f037d1">as_time</link>()&#32;const&#32;noexcept&#32;final
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
630 
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classarray_1a6ca747ebe568724fa759593cfde35c53">as_date_time</link>()&#32;const&#32;noexcept&#32;final
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
637 
639 
642 
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&lt;&#32;elems_.size()&#32;?&#32;elems_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>].get()&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
669 
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;<link linkend="_classarray_1a5308a8ac094c5dd4d4303f984e3c5755">get</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
680 
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::wrap_node&lt;ElemType&gt;*&#32;<link linkend="_classarray_1ae355770b27d72e41a7dca38378ff0c94">get_as</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>))
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;template&#32;as&lt;ElemType&gt;();
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
705 
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;impl::wrap_node&lt;ElemType&gt;*&#32;<link linkend="_classarray_1af2c374bb1623a733d0e5abd1a541bc16">get_as</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).template&#32;get_as&lt;ElemType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
718 
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node::operator[];&#32;<emphasis role="comment">//&#32;inherit&#32;operator[toml::path]</emphasis>
722 
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1aae0a2380f27a021993e6e17afd8068d9">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
729 
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1a5c3b961db194cf3d6e693c5df831f383">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
736 
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">at</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
741 
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1ac8e8f2da27ed77280b6ee02d65dd2f82">at</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)<emphasis role="keyword">&#32;const</emphasis>
745 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">at</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
748 
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1acdfb2184dd4948a173bbd628f59ec2d4">front</link>()&#32;noexcept
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.front();
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
755 
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1ae5e63a15acd4888e0fa4e1ddb4811c01">front</link>()&#32;const&#32;noexcept
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.front();
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
762 
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1a379242a7c65182981d5ce24535c58296">back</link>()&#32;noexcept
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.back();
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
769 
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1aeb918af97cb9bd5d14b705fcef029064">back</link>()&#32;const&#32;noexcept
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.back();
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
776 
778 
781 
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;=&#32;array_iterator;
784 
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;=&#32;<link linkend="_array_8h_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link>;
787 
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a0215ba81d7547fcd4e81fed83140b40a">begin</link>()&#32;noexcept
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;};
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
794 
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a70e3c270fd06429236eca61c7925a247">begin</link>()&#32;const&#32;noexcept
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cbegin()&#32;};
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
801 
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a2bfcf1d4ba89ba33ced81668ead5d704">cbegin</link>()&#32;const&#32;noexcept
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cbegin()&#32;};
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
808 
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end</link>()&#32;noexcept
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.end()&#32;};
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
815 
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a743a646eff478e5095337b65eea00d16">end</link>()&#32;const&#32;noexcept
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cend()&#32;};
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
822 
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a5d0e8fa3ed1e0d92c7c07dab08109aad">cend</link>()&#32;const&#32;noexcept
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cend()&#32;};
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
829 
830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
832 
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>for_each_elem_ref&#32;=&#32;impl::copy_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;impl::unwrap_node&lt;T&gt;&gt;&gt;,&#32;Array&gt;;
835 
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each&#32;=&#32;std::is_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;,&#32;<emphasis role="keywordtype">size_t</emphasis>&gt;&#32;<emphasis role="comment">//</emphasis>
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_invocable_v&lt;Func,&#32;size_t,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;;
840 
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_nothrow&#32;=
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;,&#32;<emphasis role="keywordtype">size_t</emphasis>&gt;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_nothrow_invocable_v&lt;Func,&#32;size_t,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_nothrow_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;;
846 
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_any&#32;=&#32;can_for_each&lt;Func,&#32;Array,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;date_time&gt;;
857 
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow_one&#32;=&#32;!can_for_each&lt;Func,&#32;Array,&#32;T&gt;&#32;<emphasis role="comment">//</emphasis>
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each_nothrow&lt;Func,&#32;Array,&#32;T&gt;;
861 
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
863 
864 
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow&#32;=&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;date_time&gt;;
875 
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
877 
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;do_for_each(Func&amp;&amp;&#32;visitor,&#32;Array&amp;&amp;&#32;arr)&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;Array&amp;&amp;&gt;)
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(can_for_each_any&lt;Func&amp;&amp;,&#32;Array&amp;&amp;&gt;,
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML&#32;array&#32;for_each&#32;visitors&#32;must&#32;be&#32;invocable&#32;for&#32;at&#32;least&#32;one&#32;of&#32;the&#32;toml::node&#32;&quot;</emphasis>
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;specializations:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a28ad2f9bb777d4b3cb545bdc94b55b63">TOML_SA_NODE_TYPE_LIST</link>);
884 
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.size();&#32;i++)
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_ref&#32;=&#32;impl::copy_cvref&lt;toml::node,&#32;Array&amp;&amp;&gt;;
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;node_ref&gt;);
889 
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;keep_going&#32;=
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>node_ref<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Array&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(arr)[i])
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.visit(
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;elem)
894 <emphasis role="preprocessor">#if&#32;!TOML_MSVC&#32;</emphasis><emphasis role="comment">//&#32;MSVC&#32;thinks&#32;this&#32;is&#32;invalid&#32;syntax&#32;O_o</emphasis>
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow_one&lt;Func&amp;&amp;,&#32;Array&amp;&amp;,&#32;<emphasis role="keyword">decltype</emphasis>(elem)&gt;)
896 <emphasis role="preprocessor">#endif</emphasis>
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>elem_ref&#32;=&#32;for_each_elem_ref&lt;<emphasis role="keyword">decltype</emphasis>(elem),&#32;Array&amp;&amp;&gt;;
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;elem_ref&gt;);
900 
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(elem,&#32;i)</emphasis>
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;elem_ref,&#32;size_t&gt;)
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem),&#32;i));
906 
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem),&#32;i));
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem),&#32;i);
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
918 
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(i,&#32;elem)</emphasis>
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;size_t,&#32;elem_ref&gt;)
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
924 
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem));
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
936 
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(elem)</emphasis>
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;elem_ref&gt;)
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
942 
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem));
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
954 
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;visitor&#32;not&#32;compatible&#32;with&#32;this&#32;particular&#32;type</emphasis>
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
959 
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!keep_going)
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
964 
966 
967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a6dc6f1d0d32faa3cb32e7632de55cc8d">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;array&amp;&gt;)
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1034 
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1a55e1737c21aa6c44b546bce4a02792f0">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;array&amp;&amp;&gt;)
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1042 
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1aab741ce674cbf0b4975bc4fa7f2f7440">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;array&amp;&gt;)
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1050 
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1aeb60ad85d6a1704300e289ebfb6f4a97">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;array&amp;&amp;&gt;)
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1058 
1060 
1063 
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>()&#32;const&#32;noexcept
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.empty();
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1070 
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link>()&#32;const&#32;noexcept
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.size();
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1077 
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classarray_1ab4acea77b99e7840afc6d2547a2b0dc2">max_size</link>()&#32;const&#32;noexcept
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.max_size();
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1084 
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classarray_1a3b63fa3d1dce25204338afaa72bb9ba7">capacity</link>()&#32;const&#32;noexcept
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.capacity();
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1091 
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1">reserve</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_capacity);
1095 
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1ae420782d223545646c2f76a0f557bf1d">shrink_to_fit</link>();
1099 
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22">truncate</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_size);
1124 
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1accdc8c2b96ab9b8dc1355d06be0c268b">resize</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_size,
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ElemType&amp;&amp;&#32;default_init_val,
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;default_init_flags&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_node_view&lt;ElemType&gt;,
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;default&#32;element&#32;type&#32;argument&#32;to&#32;toml::array::resize&#32;may&#32;not&#32;be&#32;toml::node_view.&quot;</emphasis>);
1159 
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!new_size)
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clear();
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(new_size&#32;&gt;&#32;elems_.size())
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(cend(),&#32;new_size&#32;-&#32;elems_.size(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_init_val),&#32;default_init_flags);
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truncate(new_size);
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1167 
1169 
1172 
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">erase</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>;
1193 
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a84e61ee425b558cf7e6e97369afe298d">erase</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;last)&#32;<emphasis role="keyword">noexcept</emphasis>;
1215 
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1ad02eb6d4631b38d436733d693773eed0">flatten</link>()&#32;&amp;;
1237 
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1a6e0f6f40c784f569c2b9943d8764312a">flatten</link>()&#32;&amp;&amp;
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::array&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(this-&gt;flatten());
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1243 
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>;
1265 
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1a3abd5f1417098187f796bb4c6717aa60">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::array&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(this-&gt;prune(recursive));
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1275 
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a6327207c728cef7a8b406684ee85b66d">pop_back</link>()&#32;noexcept;
1279 
1281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
1282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;clear()&#32;noexcept;
1283 
1285 
1288 
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;ElemType&gt;
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;insert(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ElemType&gt;)
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;insert_at(const_vector_iterator{&#32;pos&#32;},
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>))&#32;};
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1326 
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a44fd9887f4b76eacdd07ec1a5a0e57f3">insert</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>,
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ElemType&gt;)
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>)
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin())&#32;};
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert(pos,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;start_idx&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin());
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preinsertion_resize(start_idx,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;start_idx;
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;e&#32;=&#32;start_idx&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;-&#32;1u;&#32;i&#32;&lt;&#32;e;&#32;i++)
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i]&#32;=&#32;impl::make_node(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1386 
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//#&#32;potentially&#32;move&#32;the&#32;initial&#32;value&#32;into&#32;the&#32;last&#32;element</emphasis>
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i]&#32;=&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(start_idx)&#32;};
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1393 
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iter&gt;
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1ae11cb9d4ccde0e89d73b14cd929e8449">insert</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;Iter&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;Iter&#32;last,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacedistance">distance</link>&#32;=&#32;std::distance(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;last);
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacedistance">distance</link>&#32;&lt;=&#32;0)
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin())&#32;};
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedistance">distance</link>;
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>deref_type&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(*first);
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;deref_type&gt;)
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;it&#32;!=&#32;last;&#32;it++)
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(*it))
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>--;
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>)
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin())&#32;};
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;start_idx&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin());
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preinsertion_resize(start_idx,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>));
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;start_idx;
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;it&#32;!=&#32;last;&#32;it++)
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;deref_type&gt;)
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(*it))
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_rvalue_reference_v&lt;deref_type&gt;)
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i++]&#32;=&#32;impl::make_node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*it),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i++]&#32;=&#32;impl::make_node(*it,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(start_idx)&#32;};
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1444 
1459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
1460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a7b9e455ccd8331a7205f9ce66d4593d4">insert</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::initializer_list&lt;ElemType&gt;&#32;ilist,
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert(pos,&#32;ilist.begin(),&#32;ilist.end(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1466 
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1ae05181bf0df8b0c85da9ae13458b0a06">emplace</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;Args&amp;&amp;...&#32;args)
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>raw_elem_type&#32;=&#32;impl::remove_cvref&lt;ElemType&gt;;
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>elem_type&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;std::is_void_v&lt;raw_elem_type&gt;,&#32;<emphasis role="comment">//</emphasis>
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::emplaced_type_of&lt;Args&amp;&amp;...&gt;,
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raw_elem_type&gt;;
1497 
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;elem_type&gt;&gt;;
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::is_native&lt;type&gt;&#32;||&#32;impl::is_one_of&lt;type,&#32;table,&#32;array&gt;,
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Emplacement&#32;type&#32;parameter&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
1501 
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;insert_at(const_vector_iterator{&#32;pos&#32;},
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;}&#32;})&#32;};
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1505 
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
1534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1ad47525682635a4ae40f663ed52bb05e7">replace</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(pos&#32;&gt;=&#32;cbegin()&#32;&amp;&amp;&#32;pos&#32;&lt;&#32;cend());
1537 
1538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ElemType&gt;)
1539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1543 
1544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin());
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*it&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;it&#32;};
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1548 
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c">push_back</link>(ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;emplace_back_if_not_empty_view(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1574 
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back</link>(Args&amp;&amp;...&#32;args)
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>raw_elem_type&#32;=&#32;impl::remove_cvref&lt;ElemType&gt;;
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>elem_type&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;std::is_void_v&lt;raw_elem_type&gt;,&#32;<emphasis role="comment">//</emphasis>
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::emplaced_type_of&lt;Args&amp;&amp;...&gt;,
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raw_elem_type&gt;;
1602 
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;moving_node_ptr&#32;=&#32;std::is_same_v&lt;elem_type,&#32;impl::node_ptr&gt;&#32;<emphasis role="comment">//</emphasis>
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>...(Args)&#32;==&#32;1u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;impl::first_is_same&lt;impl::node_ptr&amp;&amp;,&#32;Args&amp;&amp;...&gt;;
1606 
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;elem_type&gt;&gt;;
1608 
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;moving_node_ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_native&lt;unwrapped_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_one_of&lt;unwrapped_type,&#32;table,&#32;array&gt;,&#32;<emphasis role="comment">//</emphasis>
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ElemType&#32;argument&#32;of&#32;array::emplace_back()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
1614 
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(moving_node_ptr)
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_at_back(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.back();
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ptr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;unwrapped_type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;};
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_at_back(impl::node_ptr{&#32;ptr&#32;});
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ptr;
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1627 
1629 
1630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1632 
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
1636 
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;equal_to_container(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;std::remove_const_t&lt;typename&#32;T::value_type&gt;;
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::is_losslessly_convertible_to_native&lt;element_type&gt;,
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Container&#32;element&#32;type&#32;must&#32;be&#32;losslessly&#32;convertible&#32;one&#32;of&#32;the&#32;native&#32;TOML&#32;value&#32;types&quot;</emphasis>);
1644 
1645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.size()&#32;!=&#32;rhs.size())
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rhs.size()&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1649 
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i{};
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;list_elem&#32;:&#32;rhs)
1652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;lhs.get_as&lt;impl::native_type_of&lt;element_type&gt;&gt;(i++);
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!elem&#32;||&#32;*elem&#32;!=&#32;list_elem)
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1657 
1658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1660 
1662 
1663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1666 
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a9b0bbc5272ae44ea14a06ec70cfa1882">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1678 
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a45e3c17332ca62a1e0bff55d0808116c">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1690 
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a12cf27ed8dbb468cff18164aad02e289">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;std::initializer_list&lt;T&gt;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal_to_container(lhs,&#32;rhs);
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1a5940e61991f3006afb94e17d0b1d93ac">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;std::initializer_list&lt;T&gt;&amp;,&#32;template&#32;&lt;typename&#32;T&gt;);
1699 
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a1afcb945a833cd794f4696d0965bcb15">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal_to_container(lhs,&#32;rhs);
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1a54e1e8b41a7532a12d719b232f22d5f2">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;,&#32;template&#32;&lt;typename&#32;T&gt;);
1708 
1710 
1711 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
1712 
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classarray_1ada82b30641e7546cfe89ece1db7436cc">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1721 
1722 <emphasis role="preprocessor">#endif</emphasis>
1723 &#32;&#32;&#32;&#32;};
1724 }
1725 <link linkend="_array_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
1726 
1727 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
