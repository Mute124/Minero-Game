<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_array_8inl_source" xml:lang="en-US">
<title>array.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/array.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="comment">//#&#32;{{</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#if&#32;!TOML_IMPLEMENTATION</emphasis>
10 <emphasis role="preprocessor">#error&#32;This&#32;is&#32;an&#32;implementation-only&#32;header.</emphasis>
11 <emphasis role="preprocessor">#endif</emphasis>
12 <emphasis role="comment">//#&#32;}}</emphasis>
13 
14 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_array_8h">array.h</link>&quot;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
16 
17 <link linkend="_array_8inl_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
18 {
19 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
20 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
21 &#32;&#32;&#32;&#32;{
22 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
24 <emphasis role="preprocessor">#endif</emphasis>
25 &#32;&#32;&#32;&#32;}
26 
27 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
28 &#32;&#32;&#32;&#32;<link linkend="_classarray_1a1d7469751b7a1f350f5a4e6561f67dd2">array::~array</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
29 &#32;&#32;&#32;&#32;{
30 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1aa202f036c1241739881c3910dcd659d0">TOML_ARRAY_DESTROYED</link>;
32 <emphasis role="preprocessor">#endif</emphasis>
33 &#32;&#32;&#32;&#32;}
34 
35 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
36 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>(<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*&#32;e)
37 &#32;&#32;&#32;&#32;{
38 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
40 <emphasis role="preprocessor">#endif</emphasis>
41 
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(e);
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;&lt;=&#32;e);
45 
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;==&#32;e)
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
48 
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>{};
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;&#32;it&#32;!=&#32;e;&#32;it++)
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it-&gt;value)
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>++;
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>)
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>);
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;!=&#32;e;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>++)
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>-&gt;value)
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>-&gt;value));
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
64 &#32;&#32;&#32;&#32;}
65 
66 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
67 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;other)&#32;<emphasis role="comment">//</emphasis>
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(other)
69 &#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(other.elems_.size());
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;other)
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.emplace_back(impl::make_node(elem));
73 
74 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
76 <emphasis role="preprocessor">#endif</emphasis>
77 &#32;&#32;&#32;&#32;}
78 
79 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
80 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>(<link linkend="_classarray">array</link>&#32;&amp;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other)),
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.elems_))
83 &#32;&#32;&#32;&#32;{
84 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
86 <emphasis role="preprocessor">#endif</emphasis>
87 &#32;&#32;&#32;&#32;}
88 
89 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
90 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">array::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)
91 &#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(rhs);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.clear();
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(rhs.elems_.size());
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;rhs)
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.emplace_back(impl::make_node(elem));
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
101 &#32;&#32;&#32;&#32;}
102 
103 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
104 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">array::operator=</link>(<link linkend="_classarray">array</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs));
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.elems_);
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
112 &#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
115 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;array::preinsertion_resize(<emphasis role="keywordtype">size_t</emphasis>&#32;idx,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>)
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(idx&#32;&lt;=&#32;elems_.size());
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;&gt;=&#32;1u);
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;old_size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;elems_.size();
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;new_size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;old_size&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>;
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;inserting_at_end&#32;=&#32;idx&#32;==&#32;old_size;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.resize(new_size);
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!inserting_at_end)
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;left&#32;=&#32;old_size,&#32;right&#32;=&#32;new_size&#32;-&#32;1u;&#32;left--&#32;&gt;&#32;idx;&#32;right--)
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[right]&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elems_[left]);
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
128 &#32;&#32;&#32;&#32;}
129 
130 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;array::insert_at_back(impl::node_ptr&#32;&amp;&amp;&#32;elem)
132 &#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(elem);
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elem));
135 &#32;&#32;&#32;&#32;}
136 
137 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
138 &#32;&#32;&#32;&#32;array::vector_iterator&#32;array::insert_at(const_vector_iterator&#32;pos,&#32;impl::node_ptr&#32;&amp;&amp;&#32;elem)
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.insert(pos,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elem));
141 &#32;&#32;&#32;&#32;}
142 
143 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
144 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
145 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">array::is_homogeneous</link>(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;==&#32;node_type::none)
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ntype&#32;=&#32;elems_[0]-&gt;type();
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;:&#32;elems_)
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;type()&#32;!=&#32;ntype)
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
158 &#32;&#32;&#32;&#32;}
159 
160 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
161 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
162 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">array::is_homogeneous</link>(node_type&#32;ntype,&#32;node&#32;*&#32;&amp;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;{};
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;==&#32;node_type::none)
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ntype&#32;=&#32;elems_[0]-&gt;type();
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;:&#32;elems_)
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;type()&#32;!=&#32;ntype)
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.get();
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
180 &#32;&#32;&#32;&#32;}
181 
182 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
183 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">array::is_homogeneous</link>(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
185 &#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;fnm&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classarray_1ac515de2b5c9aeebd65b046191fe53c20">is_homogeneous</link>(ntype,&#32;fnm);
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;&#32;&#32;&#32;=&#32;fnm;
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
190 &#32;&#32;&#32;&#32;}
191 
192 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
193 &#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">array::at</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)
194 &#32;&#32;&#32;&#32;{
195 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
196 
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.at(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
198 
199 <emphasis role="preprocessor">#else</emphasis>
200 
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(n&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;element&#32;index&#32;not&#32;found&#32;in&#32;array!&quot;</emphasis>);
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*n;
204 
205 <emphasis role="preprocessor">#endif</emphasis>
206 &#32;&#32;&#32;&#32;}
207 
208 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1">array::reserve</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_capacity)
210 &#32;&#32;&#32;&#32;{
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(new_capacity);
212 &#32;&#32;&#32;&#32;}
213 
214 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
215 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1ae420782d223545646c2f76a0f557bf1d">array::shrink_to_fit</link>()
216 &#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.shrink_to_fit();
218 &#32;&#32;&#32;&#32;}
219 
220 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
221 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22">array::truncate</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_size)
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(new_size&#32;&lt;&#32;elems_.size())
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.resize(new_size);
225 &#32;&#32;&#32;&#32;}
226 
227 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
228 &#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">array::iterator</link>&#32;<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">array::erase</link>(const_iterator&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
229 &#32;&#32;&#32;&#32;{
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{&#32;elems_.erase(const_vector_iterator{&#32;pos&#32;})&#32;};
231 &#32;&#32;&#32;&#32;}
232 
233 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
234 &#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">array::iterator</link>&#32;<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">array::erase</link>(const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;const_iterator&#32;last)&#32;<emphasis role="keyword">noexcept</emphasis>
235 &#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{&#32;elems_.erase(const_vector_iterator{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;},&#32;const_vector_iterator{&#32;last&#32;})&#32;};
237 &#32;&#32;&#32;&#32;}
238 
239 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;array::total_leaf_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
241 &#32;&#32;&#32;&#32;{
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;leaves{};
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;elems_.size();&#32;i&#32;&lt;&#32;e;&#32;i++)
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;as_array();
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;leaves&#32;+=&#32;arr&#32;?&#32;arr-&gt;total_leaf_count()&#32;:&#32;<emphasis role="keywordtype">size_t</emphasis>{&#32;1&#32;};
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;leaves;
249 &#32;&#32;&#32;&#32;}
250 
251 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
252 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;array::flatten_child(<link linkend="_classarray">array</link>&#32;&amp;&amp;&#32;child,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&amp;&#32;dest_index)&#32;<emphasis role="keyword">noexcept</emphasis>
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;child.size();&#32;i&#32;&lt;&#32;e;&#32;i++)
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;child.elems_[i]-&gt;type();
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;node_type::array)
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;arr&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(child.elems_[i].get());
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr.<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>())
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flatten_child(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(arr),&#32;dest_index);
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[dest_index++]&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(child.elems_[i]);
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;}
267 
268 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
269 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1ad02eb6d4631b38d436733d693773eed0">array::flatten</link>()&amp;
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
273 
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;requires_flattening&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size_after_flattening&#32;=&#32;elems_.<link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link>();
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;elems_.size();&#32;i--&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;)
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;as_array();
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr)
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_after_flattening--;&#32;<emphasis role="comment">//&#32;discount&#32;the&#32;array&#32;itself</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;leaf_count&#32;=&#32;arr-&gt;total_leaf_count();
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(leaf_count&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requires_flattening&#32;=&#32;<emphasis role="keyword">true</emphasis>;
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_after_flattening&#32;+=&#32;leaf_count;
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.erase(elems_.cbegin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(i));
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!requires_flattening)
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
294 
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(size_after_flattening);
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;elems_.size())
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;as_array();
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr)
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::node_ptr&#32;arr_storage&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elems_[i]);
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;leaf_count&#32;&#32;&#32;&#32;&#32;&#32;=&#32;arr-&gt;total_leaf_count();
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(leaf_count&#32;&gt;&#32;1u)
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preinsertion_resize(i&#32;+&#32;1u,&#32;leaf_count&#32;-&#32;1u);
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flatten_child(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*arr),&#32;i);&#32;<emphasis role="comment">//&#32;increments&#32;i</emphasis>
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
315 &#32;&#32;&#32;&#32;}
316 
317 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
318 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">array::prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive)&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
319 &#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
322 
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;elems_.size();&#32;i--&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;)
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;as_array())
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recursive)
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr-&gt;<link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">prune</link>(<emphasis role="keyword">true</emphasis>);
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr-&gt;empty())
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">erase</link>(elems_.cbegin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(i));
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;elems_[i]-&gt;as_table())
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recursive)
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl-&gt;prune(<emphasis role="keyword">true</emphasis>);
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl-&gt;empty())
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.erase(elems_.cbegin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(i));
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
340 
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
342 &#32;&#32;&#32;&#32;}
343 
344 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
345 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a6327207c728cef7a8b406684ee85b66d">array::pop_back</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
346 &#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.pop_back();
348 &#32;&#32;&#32;&#32;}
349 
350 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
351 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a6e618e14b5f8c217bc593837bb3dbeb8">array::clear</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
352 &#32;&#32;&#32;&#32;{
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.clear();
354 &#32;&#32;&#32;&#32;}
355 
356 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
357 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;array::equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
358 &#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;lhs&#32;==&#32;&amp;rhs)
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.elems_.size()&#32;!=&#32;rhs.elems_.size())
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;lhs.elems_.size();&#32;i&#32;&lt;&#32;e;&#32;i++)
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_type&#32;=&#32;lhs.elems_[i]-&gt;type();
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;rhs_&#32;&#32;&#32;&#32;=&#32;*rhs.elems_[i];
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_type&#32;=&#32;rhs_.type();
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;!=&#32;rhs_type)
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
370 
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;equal&#32;=&#32;lhs.elems_[i]-&gt;visit(
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;lhs_)&#32;<emphasis role="keyword">noexcept</emphasis>
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs_&#32;==&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::remove_reference_t&lt;decltype(lhs_)<emphasis role="keyword">&gt;</emphasis>*&gt;(&amp;rhs_);&#32;});
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!equal)
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
378 &#32;&#32;&#32;&#32;}
379 }
380 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
381 
382 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
