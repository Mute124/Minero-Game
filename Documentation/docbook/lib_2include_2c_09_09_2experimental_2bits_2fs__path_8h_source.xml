<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2experimental_2bits_2fs__path_8h_source" xml:lang="en-US">
<title>fs_path.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/experimental/bits/fs_path.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Class&#32;filesystem::path&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_FS_PATH_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_FS_PATH_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
35 <emphasis role="preprocessor">#else</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;locale&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;codecvt&gt;</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&lt;bits/quoted_string.h&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;bits/locale_conv.h&gt;</emphasis>
47 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;==&#32;201402L</emphasis>
48 <emphasis role="preprocessor">#&#32;include&#32;&lt;experimental/string_view&gt;</emphasis>
49 <emphasis role="preprocessor">#endif</emphasis>
50 
51 <emphasis role="preprocessor">#if&#32;defined(_WIN32)&#32;&amp;&amp;&#32;!defined(__CYGWIN__)</emphasis>
52 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS&#32;1</emphasis>
53 <emphasis role="preprocessor">#&#32;include&#32;&lt;algorithm&gt;</emphasis>
54 <emphasis role="preprocessor">#endif</emphasis>
55 
56 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
57 {
58 _GLIBCXX_BEGIN_NAMESPACE_VERSION
59 
60 <emphasis role="keyword">namespace&#32;</emphasis>experimental
61 {
62 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
63 {
64 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>
65 {
66 _GLIBCXX_BEGIN_NAMESPACE_CXX11
67 
68 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;==&#32;201402L</emphasis>
69 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::experimental::basic_string_view;
70 <emphasis role="preprocessor">#elif&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
71 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::basic_string_view;
72 <emphasis role="preprocessor">#endif</emphasis>
73 
75 <emphasis role="keyword">namespace&#32;</emphasis>__detail
76 {
81 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_const&lt;_CharT&gt;::type&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_encoded_char
84 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__or_&lt;is_same&lt;_Ch,&#32;char&gt;,
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_Ch,&#32;wchar_t&gt;,
86 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_Ch,&#32;char8_t&gt;,
88 <emphasis role="preprocessor">#endif</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_Ch,&#32;char16_t&gt;,
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_Ch,&#32;char32_t&gt;&gt;;
91 
92 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter_traits&#32;=&#32;std::iterator_traits&lt;_Iter&gt;&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_path_iter_src
95 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__and_&lt;__is_encoded_char&lt;typename&#32;_Iter_traits::value_type&gt;,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_base_of&lt;std::input_iterator_tag,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter_traits::iterator_category&gt;&gt;;
98 
99 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__is_path_iter_src&lt;_Iter&gt;
101 &#32;&#32;&#32;&#32;__is_path_src(_Iter,&#32;<emphasis role="keywordtype">int</emphasis>);
102 
103 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__is_encoded_char&lt;_CharT&gt;
105 &#32;&#32;&#32;&#32;__is_path_src(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;,&#32;<emphasis role="keywordtype">int</emphasis>);
106 
107 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
108 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__is_encoded_char&lt;_CharT&gt;
110 &#32;&#32;&#32;&#32;__is_path_src(<emphasis role="keyword">const</emphasis>&#32;basic_string_view&lt;_CharT,&#32;_Traits&gt;&amp;,&#32;<emphasis role="keywordtype">int</emphasis>);
111 <emphasis role="preprocessor">#endif</emphasis>
112 
113 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Unknown&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::false_type
115 &#32;&#32;&#32;&#32;__is_path_src(<emphasis role="keyword">const</emphasis>&#32;_Unknown&amp;,&#32;...);
116 
117 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__constructible_from;
119 
120 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__constructible_from&lt;_Iter,&#32;_Iter&gt;
122 &#32;&#32;&#32;&#32;:&#32;__is_path_iter_src&lt;_Iter&gt;
123 &#32;&#32;&#32;&#32;{&#32;};
124 
125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__constructible_from&lt;_Source,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
127 &#32;&#32;&#32;&#32;:&#32;decltype(__is_path_src(std::declval&lt;const&#32;_Source&amp;&gt;(),&#32;0))
128 &#32;&#32;&#32;&#32;{&#32;};
129 
130 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1_nocv&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_cv&lt;_Tp1&gt;::type,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1_noptr&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_pointer&lt;_Tp1&gt;::type&gt;
133 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Path&#32;=&#32;<emphasis role="keyword">typename</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;std::enable_if&lt;__and_&lt;__not_&lt;is_same&lt;_Tp1_nocv,&#32;path&gt;&gt;,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_void&lt;_Tp1_noptr&gt;&gt;,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__constructible_from&lt;_Tp1,&#32;_Tp2&gt;&gt;<link linkend="_classvalue">::value</link>,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
138 
139 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Source
141 &#32;&#32;&#32;&#32;_S_range_begin(_Source&#32;__begin)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__begin;&#32;}
142 
143 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__nul_terminated&#32;{&#32;};
144 
145 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__nul_terminated
147 &#32;&#32;&#32;&#32;_S_range_end(_Source)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;}
148 
149 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
151 &#32;&#32;&#32;&#32;_S_range_begin(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str)
152 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str.data();&#32;}
153 
154 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
156 &#32;&#32;&#32;&#32;_S_range_end(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str)
157 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str.data()&#32;+&#32;__str.size();&#32;}
158 
159 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
160 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
162 &#32;&#32;&#32;&#32;_S_range_begin(<emphasis role="keyword">const</emphasis>&#32;basic_string_view&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__str)
163 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str.data();&#32;}
164 
165 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
167 &#32;&#32;&#32;&#32;_S_range_end(<emphasis role="keyword">const</emphasis>&#32;basic_string_view&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__str)
168 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str.data()&#32;+&#32;__str.size();&#32;}
169 <emphasis role="preprocessor">#endif</emphasis>
170 
171 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(_S_range_begin(std::declval&lt;_Tp&gt;())),
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iter&gt;::value_type,
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnqualVal&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_const&lt;_Val&gt;::type&gt;
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;__value_type_is_char&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
176 &#32;&#32;&#32;&#32;&#32;&#32;std::is_same&lt;_UnqualVal,&#32;char&gt;::value,
177 &#32;&#32;&#32;&#32;&#32;&#32;_UnqualVal&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
178 
179 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(_S_range_begin(std::declval&lt;_Tp&gt;())),
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iter&gt;::value_type,
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnqualVal&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_const&lt;_Val&gt;::type&gt;
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;__value_type_is_char_or_char8_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;
184 &#32;&#32;&#32;&#32;&#32;&#32;__or_&lt;
185 &#32;&#32;&#32;&#32;std::is_same&lt;_UnqualVal,&#32;char&gt;
186 #ifdef&#32;_GLIBCXX_USE_CHAR8_T
187 &#32;&#32;&#32;&#32;,std::is_same&lt;_UnqualVal,&#32;char8_t&gt;
188 #endif
189 &#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>,&#32;_UnqualVal&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
190 
192 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
194 
201 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>
202 &#32;&#32;{
203 &#32;&#32;<emphasis role="keyword">public</emphasis>:
204 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preferred_separator&#32;=&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;\\&apos;</emphasis>;
207 <emphasis role="preprocessor">#else</emphasis>
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preferred_separator&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
210 <emphasis role="preprocessor">#endif</emphasis>
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_string&lt;value_type&gt;&#32;&#32;&#32;string_type;
212 
213 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;destructor</emphasis>
214 
215 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>()&#32;noexcept;
216 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(const&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
217 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;__p)&#32;noexcept;
218 
219 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(string_type&amp;&amp;&#32;__source);
220 
221 &#32;&#32;&#32;&#32;template&lt;typename&#32;_Source,
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Require&#32;=&#32;__detail::_Path&lt;_Source&gt;&gt;
223 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_Source&#32;const&amp;&#32;__source)
224 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert(__detail::_S_range_begin(__source),
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_S_range_end(__source)))
226 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
227 
228 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_InputIterator,&#32;_InputIterator&gt;&gt;
230 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
231 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert(__first,&#32;__last))
232 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
233 
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source,
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_Source&gt;,
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require2&#32;=&#32;__detail::__value_type_is_char&lt;_Source&gt;&gt;
237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
238 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert_loc(__detail::_S_range_begin(__source),
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_S_range_end(__source),&#32;__loc))
240 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
241 
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_InputIterator,&#32;_InputIterator&gt;,
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require2&#32;=&#32;__detail::__value_type_is_char&lt;_InputIterator&gt;&gt;
245 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)
246 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pathname(_S_convert_loc(__first,&#32;__last,&#32;__loc))
247 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_split_cmpts();&#32;}
248 
249 &#32;&#32;&#32;&#32;<link linkend="_classpath">~path</link>();
250 
251 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assignments</emphasis>
252 
253 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
254 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(<link linkend="_classpath">path</link>&amp;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>;
255 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(string_type&amp;&amp;&#32;__source);
256 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;assign(string_type&amp;&amp;&#32;__source);
257 
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
259 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
260 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source)
261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(__source);&#32;}
262 
263 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
264 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
265 &#32;&#32;&#32;&#32;&#32;&#32;assign(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source)
266 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(__source);&#32;}
267 
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
269 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_InputIterator,&#32;_InputIterator&gt;&amp;
270 &#32;&#32;&#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
271 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath">path</link>(__first,&#32;__last);&#32;}
272 
273 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;appends</emphasis>
274 
275 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_append(__p._M_pathname);&#32;}
276 
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
278 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
279 &#32;&#32;&#32;&#32;&#32;&#32;operator/=(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source)
280 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;append(__source);&#32;}
281 
282 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
283 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
284 &#32;&#32;&#32;&#32;&#32;&#32;append(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__source)
285 &#32;&#32;&#32;&#32;&#32;&#32;{
286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_append(_S_convert(__detail::_S_range_begin(__source),
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_S_range_end(__source)));
288 &#32;&#32;&#32;&#32;&#32;&#32;}
289 
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
291 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_InputIterator,&#32;_InputIterator&gt;&amp;
292 &#32;&#32;&#32;&#32;&#32;&#32;append(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
293 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_append(_S_convert(__first,&#32;__last));&#32;}
294 
295 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concatenation</emphasis>
296 
297 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__x);
298 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__x);
299 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__x);
300 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(value_type&#32;__x);
301 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
302 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(basic_string_view&lt;value_type&gt;&#32;__x);
303 <emphasis role="preprocessor">#endif</emphasis>
304 
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
306 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
307 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(__x);&#32;}
308 
309 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
310 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_CharT*,&#32;_CharT*&gt;&amp;
311 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_CharT&#32;__x);
312 
313 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
314 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_Source&gt;&amp;
315 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(_Source&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__x)
316 &#32;&#32;&#32;&#32;&#32;&#32;{
317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;_S_convert(__detail::_S_range_begin(__x),
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_S_range_end(__x));
319 &#32;&#32;&#32;&#32;&#32;&#32;}
320 
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
322 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Path&lt;_InputIterator,&#32;_InputIterator&gt;&amp;
323 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
324 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;_S_convert(__first,&#32;__last);&#32;}
325 
326 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
327 
328 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;clear()&#32;noexcept&#32;{&#32;_M_pathname.clear();&#32;_M_split_cmpts();&#32;}
329 
330 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;make_preferred();
331 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;remove_filename();
332 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;replace_filename(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__replacement);
333 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;replace_extension(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__replacement&#32;=&#32;<link linkend="_classpath">path</link>());
334 
335 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
336 
337 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;native&#32;format&#32;observers</emphasis>
338 
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;&#32;native()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname;&#32;}
340 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;&#32;&#32;c_str()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname.c_str();&#32;}
341 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;string_type()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname;&#32;}
342 
343 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;std::<emphasis role="keywordtype">char</emphasis>_traits&lt;_CharT&gt;,
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;std::allocator&lt;_CharT&gt;&gt;
345 &#32;&#32;&#32;&#32;&#32;&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
346 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())&#32;<emphasis role="keyword">const</emphasis>;
347 
348 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>()&#32;<emphasis role="keyword">const</emphasis>;
349 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
350 &#32;&#32;&#32;&#32;std::wstring&#32;&#32;&#32;wstring()&#32;<emphasis role="keyword">const</emphasis>;
351 <emphasis role="preprocessor">#endif</emphasis>
352 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
353 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__abi_tag__(<emphasis role="stringliteral">&quot;__u8&quot;</emphasis>)))
354 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::u8string&#32;&#32;u8string()&#32;const;
355 <emphasis role="preprocessor">#else</emphasis>
356 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;u8string()&#32;<emphasis role="keyword">const</emphasis>;
357 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
358 &#32;&#32;&#32;&#32;std::u16string&#32;u16string()&#32;<emphasis role="keyword">const</emphasis>;
359 &#32;&#32;&#32;&#32;std::u32string&#32;u32string()&#32;<emphasis role="keyword">const</emphasis>;
360 
361 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;generic&#32;format&#32;observers</emphasis>
362 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;std::<emphasis role="keywordtype">char</emphasis>_traits&lt;_CharT&gt;,
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;std::allocator&lt;_CharT&gt;&gt;
364 &#32;&#32;&#32;&#32;&#32;&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
365 &#32;&#32;&#32;&#32;&#32;&#32;generic_string(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())&#32;<emphasis role="keyword">const</emphasis>;
366 
367 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;generic_string()&#32;<emphasis role="keyword">const</emphasis>;
368 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
369 &#32;&#32;&#32;&#32;std::wstring&#32;&#32;&#32;generic_wstring()&#32;<emphasis role="keyword">const</emphasis>;
370 <emphasis role="preprocessor">#endif</emphasis>
371 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
372 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__abi_tag__(<emphasis role="stringliteral">&quot;__u8&quot;</emphasis>)))
373 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::u8string&#32;&#32;generic_u8string()&#32;const;
374 <emphasis role="preprocessor">#else</emphasis>
375 &#32;&#32;&#32;&#32;std::string&#32;&#32;&#32;&#32;generic_u8string()&#32;<emphasis role="keyword">const</emphasis>;
376 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
377 &#32;&#32;&#32;&#32;std::u16string&#32;generic_u16string()&#32;<emphasis role="keyword">const</emphasis>;
378 &#32;&#32;&#32;&#32;std::u32string&#32;generic_u32string()&#32;<emphasis role="keyword">const</emphasis>;
379 
380 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compare</emphasis>
381 
382 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
383 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>;
384 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>;
385 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
386 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;compare(<emphasis role="keyword">const</emphasis>&#32;basic_string_view&lt;value_type&gt;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>;
387 <emphasis role="preprocessor">#endif</emphasis>
388 
389 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decomposition</emphasis>
390 
391 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;root_name()&#32;<emphasis role="keyword">const</emphasis>;
392 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;root_directory()&#32;<emphasis role="keyword">const</emphasis>;
393 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;root_path()&#32;<emphasis role="keyword">const</emphasis>;
394 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;relative_path()&#32;<emphasis role="keyword">const</emphasis>;
395 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;parent_path()&#32;<emphasis role="keyword">const</emphasis>;
396 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2m_i_n_i-master_2tests_2testhuge_8cpp_1a42a21beb8018ac623f4d09db1343b9cf">filename</link>()&#32;<emphasis role="keyword">const</emphasis>;
397 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;stem()&#32;<emphasis role="keyword">const</emphasis>;
398 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;extension()&#32;<emphasis role="keyword">const</emphasis>;
399 
400 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;query</emphasis>
401 
402 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname.empty();&#32;}
403 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_root_name()&#32;<emphasis role="keyword">const</emphasis>;
404 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_root_directory()&#32;<emphasis role="keyword">const</emphasis>;
405 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_root_path()&#32;<emphasis role="keyword">const</emphasis>;
406 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_relative_path()&#32;<emphasis role="keyword">const</emphasis>;
407 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_parent_path()&#32;<emphasis role="keyword">const</emphasis>;
408 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_filename()&#32;<emphasis role="keyword">const</emphasis>;
409 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_stem()&#32;<emphasis role="keyword">const</emphasis>;
410 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_extension()&#32;<emphasis role="keyword">const</emphasis>;
411 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_absolute()&#32;<emphasis role="keyword">const</emphasis>;
412 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_relative()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!is_absolute();&#32;}
413 
414 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators</emphasis>
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>iterator;
416 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator&#32;const_iterator;
417 
418 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;const&#32;noexcept;
419 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;const&#32;noexcept;
420 
422 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;basic_string&#32;by&#32;reading&#32;until&#32;a&#32;null&#32;character.</emphasis>
423 &#32;&#32;&#32;&#32;template&lt;typename&#32;_InputIterator,
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Traits&#32;=&#32;<link linkend="_namespacestd">std</link>::iterator_traits&lt;_InputIterator&gt;,
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_CharT
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;typename&#32;<link linkend="_namespacestd">std</link>::remove_cv&lt;typename&#32;_Traits::value_type&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&gt;
427 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;<link linkend="_namespacestd">std</link>::<link linkend="_classbasic__string">basic_string</link>&lt;_CharT&gt;
428 &#32;&#32;&#32;&#32;&#32;&#32;_S_string_from_iter(_InputIterator&#32;__source)
429 &#32;&#32;&#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;std::basic_string&lt;_CharT&gt;&#32;__str;
431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_CharT&#32;__ch&#32;=&#32;*__source;&#32;__ch&#32;!=&#32;_CharT();&#32;__ch&#32;=&#32;*++__source)
432 &#32;&#32;&#32;&#32;&#32;&#32;__str.push_back(__ch);
433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
434 &#32;&#32;&#32;&#32;&#32;&#32;}
436 
437 &#32;&#32;<emphasis role="keyword">private</emphasis>:
438 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;_Type&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;{
439 &#32;&#32;&#32;&#32;_Multi,&#32;_Root_name,&#32;_Root_dir,&#32;_Filename
440 &#32;&#32;&#32;&#32;};
441 
442 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(string_type&#32;__str,&#32;_Type&#32;__type);
443 
444 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;_Split&#32;{&#32;_Stem,&#32;_Extension&#32;};
445 
446 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;_M_append(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__str)
447 &#32;&#32;&#32;&#32;{
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_pathname.empty()&#32;&amp;&amp;&#32;!_S_is_dir_sep(_M_pathname.back())
449 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__str.empty()&#32;&amp;&amp;&#32;!_S_is_dir_sep(__str.front()))
450 &#32;&#32;&#32;&#32;_M_pathname&#32;+=&#32;preferred_separator;
451 &#32;&#32;&#32;&#32;&#32;&#32;_M_pathname&#32;+=&#32;__str;
452 &#32;&#32;&#32;&#32;&#32;&#32;_M_split_cmpts();
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
454 &#32;&#32;&#32;&#32;}
455 
456 &#32;&#32;&#32;&#32;pair&lt;const&#32;string_type*,&#32;size_t&gt;&#32;_M_find_extension()&#32;<emphasis role="keyword">const</emphasis>;
457 
458 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Cvt;
460 
461 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
462 &#32;&#32;&#32;&#32;_S_convert(value_type*&#32;__src,&#32;__detail::__nul_terminated)
463 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type(__src);&#32;}
464 
465 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
466 &#32;&#32;&#32;&#32;_S_convert(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__src,&#32;__detail::__nul_terminated)
467 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type(__src);&#32;}
468 
469 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
471 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(_Iter&#32;__first,&#32;_Iter&#32;__last)
472 &#32;&#32;&#32;&#32;&#32;&#32;{
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iter&gt;::value_type;
474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Cvt&lt;typename&#32;remove_cv&lt;__value_type&gt;::type&gt;::
475 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(__first,&#32;__last);
476 &#32;&#32;&#32;&#32;&#32;&#32;}
477 
478 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
480 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(_InputIterator&#32;__src,&#32;__detail::__nul_terminated)
481 &#32;&#32;&#32;&#32;&#32;&#32;{
482 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;_S_string_from_iter(__src);
483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert(__s.c_str(),&#32;__s.c_str()&#32;+&#32;__s.size());
484 &#32;&#32;&#32;&#32;&#32;&#32;}
485 
486 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
487 &#32;&#32;&#32;&#32;_S_convert_loc(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::locale&amp;&#32;__loc);
489 
490 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
491 &#32;&#32;&#32;&#32;_S_convert_loc(<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;std::locale&amp;&#32;__loc)
492 &#32;&#32;&#32;&#32;{
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert_loc(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__first),
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__last),&#32;__loc);
495 &#32;&#32;&#32;&#32;}
496 
497 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
499 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert_loc(_Iter&#32;__first,&#32;_Iter&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;std::locale&amp;&#32;__loc)
500 &#32;&#32;&#32;&#32;&#32;&#32;{
501 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;__str(__first,&#32;__last);
502 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert_loc(__str.data(),&#32;__str.data()+__str.size(),&#32;__loc);
503 &#32;&#32;&#32;&#32;&#32;&#32;}
504 
505 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
507 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert_loc(_InputIterator&#32;__src,&#32;__detail::__nul_terminated,
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::locale&amp;&#32;__loc)
509 &#32;&#32;&#32;&#32;&#32;&#32;{
510 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;__s&#32;=&#32;_S_string_from_iter(__src);
511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert_loc(__s.data(),&#32;__s.data()&#32;+&#32;__s.size(),&#32;__loc);
512 &#32;&#32;&#32;&#32;&#32;&#32;}
513 
514 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_dir_sep(value_type&#32;__ch)
515 &#32;&#32;&#32;&#32;{
516 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ch&#32;==&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;/&apos;</emphasis>&#32;||&#32;__ch&#32;==&#32;preferred_separator;
518 <emphasis role="preprocessor">#else</emphasis>
519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ch&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
520 <emphasis role="preprocessor">#endif</emphasis>
521 &#32;&#32;&#32;&#32;}
522 
523 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_split_cmpts();
524 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_trim();
525 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_add_root_name(<emphasis role="keywordtype">size_t</emphasis>&#32;__n);
526 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_add_root_dir(<emphasis role="keywordtype">size_t</emphasis>&#32;__pos);
527 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_add_filename(<emphasis role="keywordtype">size_t</emphasis>&#32;__pos,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n);
528 
529 &#32;&#32;&#32;&#32;string_type&#32;_M_pathname;
530 
531 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Cmpt;
532 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_List&#32;=&#32;_GLIBCXX_STD_C::vector&lt;_Cmpt&gt;;
533 &#32;&#32;&#32;&#32;_List&#32;_M_cmpts;&#32;<emphasis role="comment">//&#32;empty&#32;unless&#32;_M_type&#32;==&#32;_Type::_Multi</emphasis>
534 &#32;&#32;&#32;&#32;_Type&#32;_M_type&#32;=&#32;_Type::_Multi;
535 &#32;&#32;};
536 
538 
540 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;__lhs.swap(__rhs);&#32;}
541 
543 &#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;hash_value(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>;
544 
546 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
547 
549 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
550 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
551 
553 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
554 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
555 
557 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
558 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
559 
561 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
562 
564 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
565 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
566 
568 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_namespaceglm_1a3d4e77a9763e858fed5eed89a6f2637f">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)
569 &#32;&#32;{
570 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;__result(__lhs);
571 &#32;&#32;&#32;&#32;__result&#32;/=&#32;__rhs;
572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
573 &#32;&#32;}
574 
576 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
577 &#32;&#32;&#32;&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
578 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
579 &#32;&#32;&#32;&#32;{
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__p.string&lt;_CharT,&#32;_Traits&gt;();
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__quoted_string
582 &#32;&#32;&#32;&#32;=&#32;std::__detail::_Quoted_string&lt;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)&amp;,&#32;_CharT&gt;;
583 &#32;&#32;&#32;&#32;&#32;&#32;__os&#32;&lt;&lt;&#32;__quoted_string{<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;_CharT(<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>),&#32;_CharT(<emphasis role="charliteral">&apos;\\&apos;</emphasis>)};
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__os;
585 &#32;&#32;&#32;&#32;}
586 
588 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
589 &#32;&#32;&#32;&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
590 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
591 &#32;&#32;&#32;&#32;{
592 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits&gt;</link>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__quoted_string
594 &#32;&#32;&#32;&#32;=&#32;std::__detail::_Quoted_string&lt;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)&amp;,&#32;_CharT&gt;;
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is&#32;&gt;&gt;&#32;__quoted_string{&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;_CharT(<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>),&#32;_CharT(<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;})
596 &#32;&#32;&#32;&#32;__p&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__is;
598 &#32;&#32;&#32;&#32;}
599 
601 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
602 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
603 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
604 &#32;&#32;&#32;&#32;__u8path(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;<emphasis role="keywordtype">char</emphasis>)
605 &#32;&#32;&#32;&#32;{
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;This&#32;assumes&#32;native&#32;wide&#32;encoding&#32;is&#32;UTF-16.</emphasis>
607 &#32;&#32;&#32;&#32;&#32;&#32;std::codecvt_utf8_utf16&lt;path::value_type&gt;&#32;__cvt;
608 &#32;&#32;&#32;&#32;&#32;&#32;path::string_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&#32;__u8str{__first,&#32;__last};
610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;__ptr&#32;=&#32;__u8str.data();
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__ptr,&#32;__ptr&#32;+&#32;__u8str.size(),&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__cvt))
612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;};
613 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(filesystem_error(
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;convert&#32;character&#32;sequence&quot;</emphasis>,
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_error_code(errc::illegal_byte_sequence)));
616 &#32;&#32;&#32;&#32;}
617 
618 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
619 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
620 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
621 &#32;&#32;&#32;&#32;__u8path(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;<emphasis role="keywordtype">char8_t</emphasis>)
622 &#32;&#32;&#32;&#32;{
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__first,&#32;__last&#32;};
624 &#32;&#32;&#32;&#32;}
625 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
626 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
627 
628 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_InputIterator,&#32;_InputIterator&gt;,
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&#32;=
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__value_type_is_char_or_char8_t&lt;_InputIterator&gt;&gt;
632 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
633 &#32;&#32;&#32;&#32;u8path(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
634 &#32;&#32;&#32;&#32;{
635 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__u8path(__first,&#32;__last,&#32;_CharT{});
637 <emphasis role="preprocessor">#else</emphasis>
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__first,&#32;__last&#32;};
639 <emphasis role="preprocessor">#endif</emphasis>
640 &#32;&#32;&#32;&#32;}
641 
643 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
644 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
645 &#32;&#32;__u8path(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">char</emphasis>)
646 &#32;&#32;{
647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::u8path(__s.data(),&#32;__s.data()&#32;+&#32;__s.size());
648 &#32;&#32;}
649 
650 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
651 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__enable_if_t&lt;is_convertible&lt;const&#32;_Source&amp;,&#32;string&gt;::value,&#32;<link linkend="_classpath">path</link>&gt;
652 &#32;&#32;&#32;&#32;__u8path(<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;__source,&#32;<emphasis role="keywordtype">char</emphasis>)
653 &#32;&#32;&#32;&#32;{
654 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;__s&#32;=&#32;__source;
655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::u8path(__s.data(),&#32;__s.data()&#32;+&#32;__s.size());
656 &#32;&#32;&#32;&#32;}
657 
658 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
659 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__enable_if_t&lt;!is_convertible&lt;const&#32;_Source&amp;,&#32;string&gt;::value,&#32;<link linkend="_classpath">path</link>&gt;
660 &#32;&#32;&#32;&#32;__u8path(<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;__source,&#32;<emphasis role="keywordtype">char</emphasis>)
661 &#32;&#32;&#32;&#32;{
662 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;__s&#32;=&#32;path::_S_string_from_iter(__source);
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::u8path(__s.data(),&#32;__s.data()&#32;+&#32;__s.size());
664 &#32;&#32;&#32;&#32;}
665 
666 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
667 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
668 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
669 &#32;&#32;&#32;&#32;__u8path(<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;__source,&#32;<emphasis role="keywordtype">char8_t</emphasis>)
670 &#32;&#32;&#32;&#32;{
671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__source&#32;};
672 &#32;&#32;&#32;&#32;}
673 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
674 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
675 
676 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source,
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Require&#32;=&#32;__detail::_Path&lt;_Source&gt;,
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&#32;=
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__value_type_is_char_or_char8_t&lt;_Source&gt;&gt;
680 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
681 &#32;&#32;&#32;&#32;u8path(<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;__source)
682 &#32;&#32;&#32;&#32;{
683 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__u8path(__source,&#32;_CharT{});
685 <emphasis role="preprocessor">#else</emphasis>
686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{&#32;__source&#32;};
687 <emphasis role="preprocessor">#endif</emphasis>
688 &#32;&#32;&#32;&#32;}
689 
691 
693 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>filesystem_error&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::system_error
694 &#32;&#32;{
695 &#32;&#32;<emphasis role="keyword">public</emphasis>:
696 &#32;&#32;&#32;&#32;filesystem_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__what_arg,&#32;error_code&#32;__ec)
697 &#32;&#32;&#32;&#32;:&#32;system_error(__ec,&#32;__what_arg)&#32;{&#32;}
698 
699 &#32;&#32;&#32;&#32;filesystem_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__what_arg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&#32;__ec)
701 &#32;&#32;&#32;&#32;:&#32;system_error(__ec,&#32;__what_arg),&#32;_M_path1(__p1)&#32;{&#32;}
702 
703 &#32;&#32;&#32;&#32;filesystem_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__what_arg,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p2,&#32;error_code&#32;__ec)
705 &#32;&#32;&#32;&#32;:&#32;system_error(__ec,&#32;__what_arg),&#32;_M_path1(__p1),&#32;_M_path2(__p2)
706 &#32;&#32;&#32;&#32;{&#32;}
707 
708 &#32;&#32;&#32;&#32;~filesystem_error();
709 
710 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;path1()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path1;&#32;}
711 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;path2()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path2;&#32;}
712 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;what()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_what.c_str();&#32;}
713 
714 &#32;&#32;<emphasis role="keyword">private</emphasis>:
715 &#32;&#32;&#32;&#32;std::string&#32;_M_gen_what();
716 
717 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;_M_path1;
718 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;_M_path2;
719 &#32;&#32;&#32;&#32;std::string&#32;_M_what&#32;=&#32;_M_gen_what();
720 &#32;&#32;};
721 
723 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>path::_Cmpt&#32;:&#32;<link linkend="_classpath">path</link>
724 &#32;&#32;{
725 &#32;&#32;&#32;&#32;_Cmpt(string_type&#32;__s,&#32;_Type&#32;__t,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__pos)
726 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classpath">path</link>(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__s),&#32;__t),&#32;_M_pos(__pos)&#32;{&#32;}
727 
728 &#32;&#32;&#32;&#32;_Cmpt()&#32;:&#32;_M_pos(-1)&#32;{&#32;}
729 
730 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_pos;
731 &#32;&#32;};
732 
733 &#32;&#32;<emphasis role="comment">//&#32;specialize&#32;_Cvt&#32;for&#32;degenerate&#32;&apos;noconv&apos;&#32;case</emphasis>
734 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
735 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>path::_Cvt&lt;<link linkend="_classpath">path</link>::value_type&gt;
736 &#32;&#32;&#32;&#32;{
737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
738 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
739 &#32;&#32;&#32;&#32;_S_convert(_Iter&#32;__first,&#32;_Iter&#32;__last)
740 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type{__first,&#32;__last};&#32;}
741 &#32;&#32;&#32;&#32;};
742 
743 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
744 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>path::_Cvt
745 &#32;&#32;&#32;&#32;{
746 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
747 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
749 &#32;&#32;&#32;&#32;&#32;&#32;_S_wconvert(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>*&#32;__f,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>*&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>*)
750 &#32;&#32;&#32;&#32;&#32;&#32;{
751 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__f2&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)__f;
752 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__l2&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)__l;
753 &#32;&#32;&#32;&#32;std::wstring&#32;__wstr;
754 &#32;&#32;&#32;&#32;std::codecvt_utf8_utf16&lt;wchar_t&gt;&#32;__wcvt;
755 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__f2,&#32;__l2,&#32;__wstr,&#32;__wcvt))
756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wstr;
757 &#32;&#32;&#32;&#32;&#32;&#32;}
758 <emphasis role="preprocessor">#endif</emphasis>
759 
760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
761 &#32;&#32;&#32;&#32;&#32;&#32;_S_wconvert(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__f,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)
762 &#32;&#32;&#32;&#32;&#32;&#32;{
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cvt&#32;=&#32;std::codecvt&lt;wchar_t,&#32;char,&#32;mbstate_t&gt;;
764 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__cvt&#32;=&#32;std::use_facet&lt;_Cvt&gt;(std::locale{});
765 &#32;&#32;&#32;&#32;std::wstring&#32;__wstr;
766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__f,&#32;__l,&#32;__wstr,&#32;__cvt))
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wstr;
768 &#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(filesystem_error(
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;convert&#32;character&#32;sequence&quot;</emphasis>,
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_error_code(errc::illegal_byte_sequence)));
771 &#32;&#32;&#32;&#32;&#32;&#32;}
772 
773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
774 &#32;&#32;&#32;&#32;&#32;&#32;_S_wconvert(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__f,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)
775 &#32;&#32;&#32;&#32;&#32;&#32;{
776 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;_CharT,&#32;char,&#32;std::mbstate_t&gt;
777 &#32;&#32;&#32;&#32;{&#32;}&#32;__cvt;
778 &#32;&#32;&#32;&#32;std::string&#32;__str;
779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__f,&#32;__l,&#32;__str,&#32;__cvt))
780 &#32;&#32;&#32;&#32;&#32;&#32;{
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__f2&#32;=&#32;__str.data();
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__l2&#32;=&#32;__f2&#32;+&#32;__str.size();
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::codecvt_utf8_utf16&lt;wchar_t&gt;&#32;__wcvt;
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;__wstr;
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__f2,&#32;__l2,&#32;__wstr,&#32;__wcvt))
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wstr;
787 &#32;&#32;&#32;&#32;&#32;&#32;}
788 &#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(filesystem_error(
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;convert&#32;character&#32;sequence&quot;</emphasis>,
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_error_code(errc::illegal_byte_sequence)));
791 &#32;&#32;&#32;&#32;&#32;&#32;}
792 
793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
794 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__f,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__l)
795 &#32;&#32;&#32;&#32;&#32;&#32;{
796 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_wconvert(__f,&#32;__l,&#32;(<emphasis role="keyword">const</emphasis>&#32;_CharT*)<emphasis role="keyword">nullptr</emphasis>);
797 &#32;&#32;&#32;&#32;&#32;&#32;}
798 <emphasis role="preprocessor">#else</emphasis>
799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
800 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__f,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__l)
801 &#32;&#32;&#32;&#32;&#32;&#32;{
802 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
803 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same&lt;_CharT,&#32;char8_t&gt;::value)
804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type(__f,&#32;__l);
805 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
806 <emphasis role="preprocessor">#endif</emphasis>
807 &#32;&#32;&#32;&#32;&#32;&#32;{
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;_CharT,&#32;char,&#32;std::mbstate_t&gt;
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}&#32;__cvt;
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;__str;
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__f,&#32;__l,&#32;__str,&#32;__cvt))
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(filesystem_error(
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;convert&#32;character&#32;sequence&quot;</emphasis>,
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_error_code(errc::illegal_byte_sequence)));
816 &#32;&#32;&#32;&#32;&#32;&#32;}
817 &#32;&#32;&#32;&#32;&#32;&#32;}
818 <emphasis role="preprocessor">#endif</emphasis>
819 
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
821 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(_CharT*&#32;__f,&#32;_CharT*&#32;__l)
822 &#32;&#32;&#32;&#32;&#32;&#32;{
823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_CharT*<emphasis role="keyword">&gt;</emphasis>(__f),
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_CharT*<emphasis role="keyword">&gt;</emphasis>(__l));
825 &#32;&#32;&#32;&#32;&#32;&#32;}
826 
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
829 &#32;&#32;&#32;&#32;_S_convert(_Iter&#32;__first,&#32;_Iter&#32;__last)
830 &#32;&#32;&#32;&#32;{
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;_CharT&gt;&#32;__str(__first,&#32;__last);
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert(__str.data(),&#32;__str.data()&#32;+&#32;__str.size());
833 &#32;&#32;&#32;&#32;}
834 
835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cont&gt;
836 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;string_type
837 &#32;&#32;&#32;&#32;_S_convert(__gnu_cxx::__normal_iterator&lt;_Iter,&#32;_Cont&gt;&#32;__first,
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__normal_iterator&lt;_Iter,&#32;_Cont&gt;&#32;__last)
839 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_convert(__first.base(),&#32;__last.base());&#32;}
840 &#32;&#32;&#32;&#32;};
842 
844 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>
845 &#32;&#32;{
846 &#32;&#32;<emphasis role="keyword">public</emphasis>:
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;&#32;&#32;=&#32;std::ptrdiff_t;
848 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_classpath">path</link>;
849 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;;
850 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*;
851 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;std::bidirectional_iterator_tag;
852 
853 &#32;&#32;&#32;&#32;iterator()&#32;noexcept&#32;:&#32;_M_path(<emphasis role="keywordtype">nullptr</emphasis>),&#32;_M_cur(),&#32;_M_at_end()&#32;{&#32;}
854 
855 &#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
856 &#32;&#32;&#32;&#32;iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
857 
858 &#32;&#32;&#32;&#32;reference&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept;
859 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(**<emphasis role="keyword">this</emphasis>);&#32;}
860 
861 &#32;&#32;&#32;&#32;iterator&amp;&#32;operator++()&#32;noexcept;
862 
863 &#32;&#32;&#32;&#32;iterator&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;noexcept
864 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;&#32;++*<emphasis role="keyword">this</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;&#32;}
865 
866 &#32;&#32;&#32;&#32;iterator&amp;&#32;operator--()&#32;noexcept;
867 
868 &#32;&#32;&#32;&#32;iterator&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;noexcept
869 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;&#32;--*<emphasis role="keyword">this</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;&#32;}
870 
871 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
872 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
873 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_equals(__rhs);&#32;}
874 
875 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
876 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
877 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__lhs._M_equals(__rhs);&#32;}
878 
879 &#32;&#32;<emphasis role="keyword">private</emphasis>:
880 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>;
881 
882 &#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*&#32;__path,&#32;path::_List::const_iterator&#32;__iter)&#32;noexcept
883 &#32;&#32;&#32;&#32;:&#32;_M_path(__path),&#32;_M_cur(__iter),&#32;_M_at_end()
884 &#32;&#32;&#32;&#32;{&#32;}
885 
886 &#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*&#32;__path,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__at_end)&#32;noexcept
887 &#32;&#32;&#32;&#32;:&#32;_M_path(__path),&#32;_M_cur(),&#32;_M_at_end(__at_end)
888 &#32;&#32;&#32;&#32;{&#32;}
889 
890 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_equals(iterator)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
891 
892 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_path;
893 &#32;&#32;&#32;&#32;path::_List::const_iterator&#32;_M_cur;
894 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_at_end;&#32;&#32;<emphasis role="comment">//&#32;only&#32;used&#32;when&#32;type&#32;!=&#32;_Multi</emphasis>
895 &#32;&#32;};
896 
897 &#32;&#32;<emphasis role="keyword">inline</emphasis>
898 &#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path::path</link>()&#32;noexcept&#32;=&#32;default;
899 
900 &#32;&#32;inline
901 &#32;&#32;<link linkend="_classpath">path</link>::<link linkend="_classpath">path</link>(const&#32;<link linkend="_classpath">path</link>&amp;)&#32;=&#32;default;
902 
903 &#32;&#32;inline
904 &#32;&#32;<link linkend="_classpath">path</link>::<link linkend="_classpath">path</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;__p)&#32;noexcept
905 &#32;&#32;:&#32;_M_pathname(<link linkend="_namespacestd">std</link>::move(__p._M_pathname)),
906 &#32;&#32;&#32;&#32;_M_cmpts(__p._M_cmpts),
907 &#32;&#32;&#32;&#32;_M_type(__p._M_type)
908 &#32;&#32;{&#32;__p.<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link>();&#32;}
909 
910 &#32;&#32;<emphasis role="keyword">inline</emphasis>
911 &#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path::path</link>(string_type&amp;&amp;&#32;__source)
912 &#32;&#32;:&#32;_M_pathname(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__source))
913 &#32;&#32;{&#32;_M_split_cmpts();&#32;}
914 
915 &#32;&#32;<emphasis role="keyword">inline</emphasis>
916 &#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path::path</link>(string_type&#32;__str,&#32;_Type&#32;__type)
917 &#32;&#32;:&#32;_M_pathname(__str),&#32;_M_type(__type)
918 &#32;&#32;{
919 &#32;&#32;&#32;&#32;__glibcxx_assert(!<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>());
920 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_type&#32;!=&#32;_Type::_Multi);
921 &#32;&#32;}
922 
923 &#32;&#32;<emphasis role="keyword">inline</emphasis>
924 &#32;&#32;<link linkend="_classpath_1af8cb55c04bfdcdfb2aa066cdaacc6ea6">path::~path</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
925 
926 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
927 &#32;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
928 
929 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
930 &#32;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
931 &#32;&#32;{
932 &#32;&#32;&#32;&#32;_M_pathname&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p._M_pathname);
933 &#32;&#32;&#32;&#32;_M_cmpts&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p._M_cmpts);
934 &#32;&#32;&#32;&#32;_M_type&#32;=&#32;__p._M_type;
935 &#32;&#32;&#32;&#32;__p.<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link>();
936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
937 &#32;&#32;}
938 
939 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
940 &#32;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(string_type&amp;&amp;&#32;__source)
941 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__source));&#32;}
942 
943 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
944 &#32;&#32;<link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">path::assign</link>(string_type&amp;&amp;&#32;__source)
945 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__source));&#32;}
946 
947 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
948 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
949 &#32;&#32;{
950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">operator+=</link>(__p.native());
951 &#32;&#32;}
952 
953 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
954 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__x)
955 &#32;&#32;{
956 &#32;&#32;&#32;&#32;_M_pathname&#32;+=&#32;__x;
957 &#32;&#32;&#32;&#32;_M_split_cmpts();
958 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
959 &#32;&#32;}
960 
961 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
962 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__x)
963 &#32;&#32;{
964 &#32;&#32;&#32;&#32;_M_pathname&#32;+=&#32;__x;
965 &#32;&#32;&#32;&#32;_M_split_cmpts();
966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
967 &#32;&#32;}
968 
969 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
970 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(value_type&#32;__x)
971 &#32;&#32;{
972 &#32;&#32;&#32;&#32;_M_pathname&#32;+=&#32;__x;
973 &#32;&#32;&#32;&#32;_M_split_cmpts();
974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
975 &#32;&#32;}
976 
977 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
978 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
979 &#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(basic_string_view&lt;value_type&gt;&#32;__x)
980 &#32;&#32;{
981 &#32;&#32;&#32;&#32;_M_pathname.<link linkend="_classpath_1aa1716177c19817218cc4f98768932487">append</link>(__x.data(),&#32;__x.size());
982 &#32;&#32;&#32;&#32;_M_split_cmpts();
983 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
984 &#32;&#32;}
985 <emphasis role="preprocessor">#endif</emphasis>
986 
987 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
988 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::_Path&lt;_CharT*,&#32;_CharT*&gt;&amp;
989 &#32;&#32;&#32;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(_CharT&#32;__x)
990 &#32;&#32;&#32;&#32;{
991 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;__addr&#32;=&#32;std::__addressof(__x);
992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(__addr,&#32;__addr&#32;+&#32;1);
993 &#32;&#32;&#32;&#32;}
994 
995 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&amp;
996 &#32;&#32;path::make_preferred()
997 &#32;&#32;{
998 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
999 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">std::replace</link>(_M_pathname.begin(),&#32;_M_pathname.end(),&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;/&apos;</emphasis>,
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preferred_separator);
1001 <emphasis role="preprocessor">#endif</emphasis>
1002 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1003 &#32;&#32;}
1004 
1005 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;path::swap(<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1006 &#32;&#32;{
1007 &#32;&#32;&#32;&#32;_M_pathname.swap(__rhs._M_pathname);
1008 &#32;&#32;&#32;&#32;_M_cmpts.swap(__rhs._M_cmpts);
1009 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_type,&#32;__rhs._M_type);
1010 &#32;&#32;}
1011 
1012 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1013 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
1014 &#32;&#32;&#32;&#32;<link linkend="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba">path::string</link>(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a)<emphasis role="keyword">&#32;const</emphasis>
1015 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_same&lt;_CharT,&#32;value_type&gt;::value)
1017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_M_pathname.begin(),&#32;_M_pathname.end(),&#32;__a&#32;};
1018 
1019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_WString&#32;=&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;</link>;
1020 
1021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__first&#32;=&#32;_M_pathname.data();
1022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__last&#32;=&#32;__first&#32;+&#32;_M_pathname.size();
1023 
1024 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CharAlloc&#32;=&#32;__alloc_rebind&lt;_Allocator,&#32;char&gt;;
1026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_String&#32;=&#32;<link linkend="_classbasic__string">basic_string&lt;char, char_traits&lt;char&gt;</link>,&#32;_CharAlloc&gt;;
1027 
1028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;convert&#32;native&#32;string&#32;from&#32;UTF-16&#32;to&#32;to&#32;UTF-8.</emphasis>
1029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;This&#32;assumes&#32;that&#32;the&#32;execution&#32;wide-character&#32;set&#32;is&#32;UTF-16.</emphasis>
1030 &#32;&#32;&#32;&#32;&#32;&#32;codecvt_utf8_utf16&lt;value_type&gt;&#32;__cvt;
1031 &#32;&#32;&#32;&#32;&#32;&#32;_String&#32;__u8str{_CharAlloc{__a}};
1032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__first,&#32;__last,&#32;__u8str,&#32;__cvt))
1033 &#32;&#32;&#32;&#32;{
1034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
1035 &#32;&#32;&#32;&#32;&#32;&#32;{
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_String*
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_String&amp;&#32;__from,&#32;_String&amp;,&#32;true_type)
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__from);&#32;}
1039 
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_WString*
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_String&amp;&#32;__from,&#32;_WString&amp;&#32;__to,&#32;false_type)
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1043 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same&lt;_CharT,&#32;char8_t&gt;::value)
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to.assign(__from.begin(),&#32;__from.end());
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__to);
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1050 <emphasis role="preprocessor">#endif</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;UTF-8&#32;to&#32;wide&#32;string.</emphasis>
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;_CharT,&#32;char,&#32;std::mbstate_t&gt;
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}&#32;__cvt;
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__f&#32;=&#32;__from.data();
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__l&#32;=&#32;__f&#32;+&#32;__from.size();
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__f,&#32;__l,&#32;__to,&#32;__cvt))
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__to);
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1062 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;__dispatch;
1063 &#32;&#32;&#32;&#32;&#32;&#32;_WString&#32;__wstr(__a);
1064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>*&#32;__p&#32;=&#32;__dispatch(__u8str,&#32;__wstr,&#32;is_same&lt;_CharT,&#32;char&gt;{}))
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__p;
1066 &#32;&#32;&#32;&#32;}
1067 <emphasis role="preprocessor">#else</emphasis>
1068 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same&lt;_CharT,&#32;char8_t&gt;::value)
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_WString(__first,&#32;__last,&#32;__a);
1071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1072 <emphasis role="preprocessor">#endif</emphasis>
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UCvt&#32;:&#32;std::codecvt&lt;_CharT,&#32;char,&#32;std::mbstate_t&gt;&#32;{&#32;}&#32;__cvt;
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_WString&#32;__wstr(__a);
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in_all(__first,&#32;__last,&#32;__wstr,&#32;__cvt))
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wstr;
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1079 <emphasis role="preprocessor">#endif</emphasis>
1080 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(filesystem_error(
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;convert&#32;character&#32;sequence&quot;</emphasis>,
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_error_code(errc::illegal_byte_sequence)));
1083 &#32;&#32;&#32;&#32;}
1084 
1085 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1086 &#32;&#32;<link linkend="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba">path::string</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char&gt;</link>();&#32;}
1087 
1088 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1089 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::wstring
1090 &#32;&#32;<link linkend="_classpath_1a7d86e6cb5f7e5bbd02c5e402f498120e">path::wstring</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;wchar_t&gt;</link>();&#32;}
1091 <emphasis role="preprocessor">#endif</emphasis>
1092 
1093 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1094 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u8string
1095 &#32;&#32;path::u8string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char8_t&gt;</link>();&#32;}
1096 <emphasis role="preprocessor">#else</emphasis>
1097 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1098 &#32;&#32;path::u8string()<emphasis role="keyword">&#32;const</emphasis>
1099 <emphasis role="keyword">&#32;&#32;</emphasis>{
1100 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1101 &#32;&#32;&#32;&#32;std::string&#32;__str;
1102 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;from&#32;native&#32;wide&#32;encoding&#32;(assumed&#32;to&#32;be&#32;UTF-16)&#32;to&#32;UTF-8</emphasis>
1103 &#32;&#32;&#32;&#32;std::codecvt_utf8_utf16&lt;value_type&gt;&#32;__cvt;
1104 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__first&#32;=&#32;_M_pathname.data();
1105 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__last&#32;=&#32;__first&#32;+&#32;_M_pathname.size();
1106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out_all(__first,&#32;__last,&#32;__str,&#32;__cvt))
1107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
1108 &#32;&#32;&#32;&#32;_GLIBCXX_THROW_OR_ABORT(filesystem_error(
1109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Cannot&#32;convert&#32;character&#32;sequence&quot;</emphasis>,
1110 &#32;&#32;&#32;&#32;&#32;&#32;std::make_error_code(errc::illegal_byte_sequence)));
1111 <emphasis role="preprocessor">#else</emphasis>
1112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pathname;
1113 <emphasis role="preprocessor">#endif</emphasis>
1114 &#32;&#32;}
1115 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1116 
1117 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u16string
1118 &#32;&#32;path::u16string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char16_t&gt;</link>();&#32;}
1119 
1120 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u32string
1121 &#32;&#32;path::u32string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string&lt;char32_t&gt;</link>();&#32;}
1122 
1123 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1124 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;
1125 &#32;&#32;&#32;&#32;path::generic_string(<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a)<emphasis role="keyword">&#32;const</emphasis>
1126 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1127 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT&#32;__slash&#32;=&#32;is_same&lt;_CharT,&#32;wchar_t&gt;::value
1129 &#32;&#32;&#32;&#32;?&#32;_CharT(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="charliteral">&apos;/&apos;</emphasis>)
1130 &#32;&#32;&#32;&#32;:&#32;_CharT(<emphasis role="stringliteral">&apos;/&apos;</emphasis>);&#32;<emphasis role="comment">//&#32;Assume&#32;value&#32;is&#32;correct&#32;for&#32;the&#32;encoding.</emphasis>
1131 <emphasis role="preprocessor">#else</emphasis>
1132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT&#32;__slash&#32;=&#32;_CharT(<emphasis role="charliteral">&apos;/&apos;</emphasis>);
1133 <emphasis role="preprocessor">#endif</emphasis>
1134 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;</link>&#32;__str(__a);
1135 &#32;&#32;&#32;&#32;&#32;&#32;__str.reserve(_M_pathname.size());
1136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__add_slash&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;__elem&#32;:&#32;*this)
1138 &#32;&#32;&#32;&#32;{
1139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__elem._M_type&#32;==&#32;_Type::_Root_dir)
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str&#32;+=&#32;__slash;
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__add_slash)
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str&#32;+=&#32;__slash;
1146 &#32;&#32;&#32;&#32;&#32;&#32;__str&#32;+=&#32;__elem.string&lt;_CharT,&#32;_Traits,&#32;_Allocator&gt;(__a);
1147 &#32;&#32;&#32;&#32;&#32;&#32;__add_slash&#32;=&#32;__elem._M_type&#32;==&#32;_Type::_Filename;
1148 &#32;&#32;&#32;&#32;}
1149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
1150 &#32;&#32;&#32;&#32;}
1151 
1152 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1153 &#32;&#32;path::generic_string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char&gt;();&#32;}
1154 
1155 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1156 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::wstring
1157 &#32;&#32;path::generic_wstring()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;wchar_t&gt;();&#32;}
1158 <emphasis role="preprocessor">#endif</emphasis>
1159 
1160 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
1161 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u8string
1162 &#32;&#32;path::generic_u8string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char8_t&gt;();&#32;}
1163 <emphasis role="preprocessor">#else</emphasis>
1164 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::string
1165 &#32;&#32;path::generic_u8string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char&gt;();&#32;}
1166 <emphasis role="preprocessor">#endif</emphasis>
1167 
1168 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u16string
1169 &#32;&#32;path::generic_u16string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char16_t&gt;();&#32;}
1170 
1171 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::u32string
1172 &#32;&#32;path::generic_u32string()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;generic_string&lt;char32_t&gt;();&#32;}
1173 
1174 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1175 &#32;&#32;path::compare(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__s)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare(<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>(__s));&#32;}
1176 
1177 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1178 &#32;&#32;path::compare(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare(<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>(__s));&#32;}
1179 
1180 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
1181 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1182 &#32;&#32;path::compare(basic_string_view&lt;value_type&gt;&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
1183 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare(<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>(__s));&#32;}
1184 <emphasis role="preprocessor">#endif</emphasis>
1185 
1186 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
1187 &#32;&#32;path::filename()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>()&#32;?&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>()&#32;:&#32;*--<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;}
1188 
1189 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
1190 &#32;&#32;path::stem()<emphasis role="keyword">&#32;const</emphasis>
1191 <emphasis role="keyword">&#32;&#32;</emphasis>{
1192 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;0)
1194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{ext.first-&gt;substr(0,&#32;ext.second)};
1195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1196 &#32;&#32;}
1197 
1198 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>
1199 &#32;&#32;path::extension()<emphasis role="keyword">&#32;const</emphasis>
1200 <emphasis role="keyword">&#32;&#32;</emphasis>{
1201 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;string_type::npos)
1203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>{ext.first-&gt;substr(ext.second)};
1204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1205 &#32;&#32;}
1206 
1207 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1208 &#32;&#32;path::has_stem()<emphasis role="keyword">&#32;const</emphasis>
1209 <emphasis role="keyword">&#32;&#32;</emphasis>{
1210 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;0;
1212 &#32;&#32;}
1213 
1214 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1215 &#32;&#32;path::has_extension()<emphasis role="keyword">&#32;const</emphasis>
1216 <emphasis role="keyword">&#32;&#32;</emphasis>{
1217 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ext&#32;=&#32;_M_find_extension();
1218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ext.first&#32;&amp;&amp;&#32;ext.second&#32;!=&#32;string_type::npos;
1219 &#32;&#32;}
1220 
1221 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1222 &#32;&#32;path::is_absolute()<emphasis role="keyword">&#32;const</emphasis>
1223 <emphasis role="keyword">&#32;&#32;</emphasis>{
1224 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_FILESYSTEM_IS_WINDOWS</emphasis>
1225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;has_root_name()&#32;&amp;&amp;&#32;has_root_directory();
1226 <emphasis role="preprocessor">#else</emphasis>
1227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;has_root_directory();
1228 <emphasis role="preprocessor">#endif</emphasis>
1229 &#32;&#32;}
1230 
1231 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>
1232 &#32;&#32;<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">path::begin</link>()&#32;const&#32;noexcept
1233 &#32;&#32;{
1234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type&#32;==&#32;_Type::_Multi)
1235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>(<emphasis role="keyword">this</emphasis>,&#32;_M_cmpts.begin());
1236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>(<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">false</emphasis>);
1237 &#32;&#32;}
1238 
1239 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>
1240 &#32;&#32;<link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">path::end</link>()&#32;const&#32;noexcept
1241 &#32;&#32;{
1242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_type&#32;==&#32;_Type::_Multi)
1243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>(<emphasis role="keyword">this</emphasis>,&#32;_M_cmpts.end());
1244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>(<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
1245 &#32;&#32;}
1246 
1247 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>&amp;
1248 &#32;&#32;path::iterator::operator++()&#32;noexcept
1249 &#32;&#32;{
1250 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path-&gt;_M_type&#32;==&#32;_Type::_Multi)
1252 &#32;&#32;&#32;&#32;&#32;&#32;{
1253 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_cur&#32;!=&#32;_M_path-&gt;_M_cmpts.end());
1254 &#32;&#32;&#32;&#32;++_M_cur;
1255 &#32;&#32;&#32;&#32;&#32;&#32;}
1256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1257 &#32;&#32;&#32;&#32;&#32;&#32;{
1258 &#32;&#32;&#32;&#32;__glibcxx_assert(!_M_at_end);
1259 &#32;&#32;&#32;&#32;_M_at_end&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1260 &#32;&#32;&#32;&#32;&#32;&#32;}
1261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1262 &#32;&#32;}
1263 
1264 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link>&amp;
1265 &#32;&#32;path::iterator::operator--()&#32;noexcept
1266 &#32;&#32;{
1267 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path-&gt;_M_type&#32;==&#32;_Type::_Multi)
1269 &#32;&#32;&#32;&#32;&#32;&#32;{
1270 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_cur&#32;!=&#32;_M_path-&gt;_M_cmpts.begin());
1271 &#32;&#32;&#32;&#32;--_M_cur;
1272 &#32;&#32;&#32;&#32;&#32;&#32;}
1273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1274 &#32;&#32;&#32;&#32;&#32;&#32;{
1275 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_at_end);
1276 &#32;&#32;&#32;&#32;_M_at_end&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1277 &#32;&#32;&#32;&#32;&#32;&#32;}
1278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1279 &#32;&#32;}
1280 
1281 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;path::iterator::reference
1282 &#32;&#32;path::iterator::operator*()&#32;const&#32;noexcept
1283 &#32;&#32;{
1284 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_path&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path-&gt;_M_type&#32;==&#32;_Type::_Multi)
1286 &#32;&#32;&#32;&#32;&#32;&#32;{
1287 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_cur&#32;!=&#32;_M_path-&gt;_M_cmpts.end());
1288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_cur;
1289 &#32;&#32;&#32;&#32;&#32;&#32;}
1290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_path;
1291 &#32;&#32;}
1292 
1293 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1294 &#32;&#32;path::iterator::_M_equals(iterator&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1295 &#32;&#32;{
1296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path&#32;!=&#32;__rhs._M_path)
1297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
1299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_path-&gt;_M_type&#32;==&#32;path::_Type::_Multi)
1301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur&#32;==&#32;__rhs._M_cur;
1302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_at_end&#32;==&#32;__rhs._M_at_end;
1303 &#32;&#32;}
1304 
1305 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;these&#32;now&#32;that&#32;path&#32;and&#32;path::iterator&#32;are&#32;complete.</emphasis>
1306 &#32;&#32;<emphasis role="comment">//&#32;They&#32;needs&#32;to&#32;consider&#32;the&#32;string_view(Range&amp;&amp;)&#32;constructor&#32;during</emphasis>
1307 &#32;&#32;<emphasis role="comment">//&#32;overload&#32;resolution,&#32;which&#32;depends&#32;on&#32;whether&#32;range&lt;path&gt;&#32;is&#32;satisfied,</emphasis>
1308 &#32;&#32;<emphasis role="comment">//&#32;which&#32;depends&#32;on&#32;whether&#32;path::iterator&#32;is&#32;complete.</emphasis>
1309 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1310 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;&#32;0;&#32;}
1311 
1312 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1313 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;==&#32;0;&#32;}
1314 
1316 _GLIBCXX_END_NAMESPACE_CXX11
1317 }&#32;<emphasis role="comment">//&#32;namespace&#32;v1</emphasis>
1318 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
1319 }&#32;<emphasis role="comment">//&#32;namespace&#32;experimental</emphasis>
1320 
1321 _GLIBCXX_END_NAMESPACE_VERSION
1322 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1323 
1324 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1325 
1326 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_FS_PATH_H</emphasis>
</programlisting></section>
