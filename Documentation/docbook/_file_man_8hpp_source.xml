<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__file_man_8hpp_source" xml:lang="en-US">
<title>FileMan.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/Core/FileMan.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
2 <emphasis role="preprocessor">#include&#32;&quot;../lib/raylib.h&quot;</emphasis>
3 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
5 
6 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&lt;filesystem&gt;</emphasis>
9 
10 <emphasis role="comment">//&#32;TODO&#32;:&#32;Fix&#32;line&#32;43.</emphasis>
11 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_file_manager">FileManager</link>&#32;{
12 <emphasis role="keyword">public</emphasis>:
22 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_manager_1accfa8ae3e24adb4f23f790ee8389408d">createFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filePath)&#32;{
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;file(filePath);
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;{
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;File&#32;created&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;create&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
30 &#32;&#32;&#32;&#32;}
31 
39 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_manager_1acdce4406c10a2190b213fad47e677254">loadFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filePath)&#32;{
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;file(filePath);
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;line;
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::getline(file,&#32;line))&#32;{
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;line&#32;&lt;&lt;&#32;std::endl;
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;load&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
50 &#32;&#32;&#32;&#32;}
51 
60 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_manager_1adb06e64a215dccde1cc70c949a18329c">saveFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;filePath,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;content)&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;file(filePath);
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file)&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file&#32;&lt;&lt;&#32;content;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;File&#32;saved&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file.close();
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;save&#32;file.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
69 &#32;&#32;&#32;&#32;}
70 
80 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_manager_1a621aab6271bbbfcc25b8ef55b7d57d81">createFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folderPath)&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::filesystem::create_directory(folderPath))&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Folder&#32;created&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;create&#32;folder.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
86 &#32;&#32;&#32;&#32;}
87 
95 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_manager_1a897a6b19cadd6884866930957a9a8629">loadFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folderPath)&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::filesystem::exists(folderPath)&#32;&amp;&amp;&#32;std::filesystem::is_directory(folderPath))&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;entry&#32;:&#32;std::filesystem::directory_iterator(folderPath))&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;entry.path()&#32;&lt;&lt;&#32;std::endl;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;load&#32;folder.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;}
104 
112 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_file_manager_1a5034f4b2e3a7544f8cecd996104833a0">saveFolder</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;folderPath)&#32;{
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Folder&#32;saving&#32;logic&#32;goes&#32;here</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Folder&#32;saved&#32;successfully.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
115 &#32;&#32;&#32;&#32;}
116 };
117 
118 <emphasis role="comment">/*</emphasis>
119 <emphasis role="comment">&#32;&#32;&#32;&#32;Example&#32;of&#32;how&#32;to&#32;use</emphasis>
120 <emphasis role="comment"></emphasis>
121 <emphasis role="comment">&#32;&#32;&#32;&#32;int&#32;main()&#32;{</emphasis>
122 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FileManager&#32;fileManager;</emphasis>
123 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileManager.createFile(&quot;example.txt&quot;);</emphasis>
124 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileManager.loadFile(&quot;example.txt&quot;);</emphasis>
125 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileManager.saveFile(&quot;example.txt&quot;,&#32;&quot;Hello,&#32;World!&quot;);</emphasis>
126 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileManager.createFolder(&quot;example_folder&quot;);</emphasis>
127 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileManager.loadFolder(&quot;example_folder&quot;);</emphasis>
128 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileManager.saveFolder(&quot;example_folder&quot;);</emphasis>
129 <emphasis role="comment">&#32;&#32;&#32;&#32;</emphasis>
130 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;0;</emphasis>
131 <emphasis role="comment">&#32;&#32;&#32;&#32;}</emphasis>
132 <emphasis role="comment">*/</emphasis>
133 
</programlisting></section>
