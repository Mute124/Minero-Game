<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer" xml:lang="en-US">
<title>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt; Class Template Reference</title>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary></indexterm>
<para>

<para>Node const iterator. </para>
 
</para>
<para>
<computeroutput>#include &lt;pat_trie_base.hpp&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1trivial__iterator__tag">trivial_iterator_tag</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a95a47eaf0a9290bfcbae20ceee854be6">iterator_category</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_group__tags_1ga3a45dab56a44f762c97eb0eaee17f6f2">trivial_iterator_difference_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ca51cfbd9ab80b548ae2bf8ea8b61b0">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Alloc::size_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link></para>
</listitem>
            <listitem><para>typedef _CIterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1ac0eb4fcafd374ac1f3adb74dfe7cad1e">reference</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link></para>
</listitem>
            <listitem><para>typedef Node::metadata_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link></para>

<para>Metadata type. </para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link> &gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">::const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link></para>

<para>Const metadata reference type. </para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1trivial__iterator__tag">trivial_iterator_tag</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a95a47eaf0a9290bfcbae20ceee854be6">iterator_category</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_group__tags_1ga3a45dab56a44f762c97eb0eaee17f6f2">trivial_iterator_difference_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ca51cfbd9ab80b548ae2bf8ea8b61b0">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Alloc::size_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link></para>
</listitem>
            <listitem><para>typedef _CIterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1ac0eb4fcafd374ac1f3adb74dfe7cad1e">reference</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link></para>
</listitem>
            <listitem><para>typedef Node::metadata_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link></para>

<para>Metadata type. </para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link> &gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">::const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link></para>

<para>Const metadata reference type. </para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1trivial__iterator__tag">trivial_iterator_tag</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a95a47eaf0a9290bfcbae20ceee854be6">iterator_category</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_group__tags_1ga3a45dab56a44f762c97eb0eaee17f6f2">trivial_iterator_difference_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ca51cfbd9ab80b548ae2bf8ea8b61b0">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Alloc::size_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link></para>
</listitem>
            <listitem><para>typedef _CIterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1ac0eb4fcafd374ac1f3adb74dfe7cad1e">reference</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link></para>
</listitem>
            <listitem><para>typedef Node::metadata_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link></para>

<para>Metadata type. </para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link> &gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">::const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link></para>

<para>Const metadata reference type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ae944066f88dc12614dc9f81692ed89">_Node_citer</link> (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> p_nd=0, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> p_traits=0)</para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link> &gt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1c46c259b96d315785777fea38c548f8">valid_prefix</link> () const</para>

<para>Subtree valid prefix. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a951a43bd97e277ad638e8cf8229d0af3">operator*</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa1d2c39c7f6e4ab52440a40836f030b7">get_metadata</link> () const</para>

<para>Metadata access. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147">num_children</link> () const</para>

<para>Returns the number of children in the corresponding node. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a5059988db056938bffdb07f2256e9702">get_child</link> (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> i) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a46409e64d8adbfd9be6a641313d150da">operator==</link> (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> &amp;other) const</para>

<para>Compares content to a different iterator object. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a210f5b96aa65b4a025d3f4998378862f">operator!=</link> (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> &amp;other) const</para>

<para>Compares content (negatively) to a different iterator object. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ae944066f88dc12614dc9f81692ed89">_Node_citer</link> (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> p_nd=0, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> p_traits=0)</para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link> &gt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1c46c259b96d315785777fea38c548f8">valid_prefix</link> () const</para>

<para>Subtree valid prefix. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a951a43bd97e277ad638e8cf8229d0af3">operator*</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa1d2c39c7f6e4ab52440a40836f030b7">get_metadata</link> () const</para>

<para>Metadata access. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147">num_children</link> () const</para>

<para>Returns the number of children in the corresponding node. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a5059988db056938bffdb07f2256e9702">get_child</link> (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> i) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a46409e64d8adbfd9be6a641313d150da">operator==</link> (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> &amp;other) const</para>

<para>Compares content to a different iterator object. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a210f5b96aa65b4a025d3f4998378862f">operator!=</link> (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> &amp;other) const</para>

<para>Compares content (negatively) to a different iterator object. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ae944066f88dc12614dc9f81692ed89">_Node_citer</link> (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> p_nd=0, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> p_traits=0)</para>
</listitem>
            <listitem><para>std::pair&lt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link> &gt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1c46c259b96d315785777fea38c548f8">valid_prefix</link> () const</para>

<para>Subtree valid prefix. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a951a43bd97e277ad638e8cf8229d0af3">operator*</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa1d2c39c7f6e4ab52440a40836f030b7">get_metadata</link> () const</para>

<para>Metadata access. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147">num_children</link> () const</para>

<para>Returns the number of children in the corresponding node. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a5059988db056938bffdb07f2256e9702">get_child</link> (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> i) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a46409e64d8adbfd9be6a641313d150da">operator==</link> (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> &amp;other) const</para>

<para>Compares content to a different iterator object. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a210f5b96aa65b4a025d3f4998378862f">operator!=</link> (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> &amp;other) const</para>

<para>Compares content (negatively) to a different iterator object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a">m_p_nd</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6">m_p_traits</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Node &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Leaf &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a98184f8da6c26c31336562a27c1744f7">leaf_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Leaf &gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Inode &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Inode &gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201">inode_const_pointer</link></para>
</listitem>
            <listitem><para>typedef Node::a_const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link></para>
</listitem>
            <listitem><para>typedef Node::a_const_iterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Node &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Leaf &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a98184f8da6c26c31336562a27c1744f7">leaf_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Leaf &gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Inode &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Inode &gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201">inode_const_pointer</link></para>
</listitem>
            <listitem><para>typedef Node::a_const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link></para>
</listitem>
            <listitem><para>typedef Node::a_const_iterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Node &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Leaf &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a98184f8da6c26c31336562a27c1744f7">leaf_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Leaf &gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c">leaf_const_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Inode &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b">inode_pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt; _Alloc, Inode &gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201">inode_const_pointer</link></para>
</listitem>
            <listitem><para>typedef Node::a_const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link></para>
</listitem>
            <listitem><para>typedef Node::a_const_iterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Node, typename Leaf, typename Head, typename Inode, typename _CIterator, typename Iterator, typename _Alloc&gt;<?linebreak?>class __gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</title></simplesect>

<para>Node const iterator. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a"/><section>
    <title>a_const_iterator<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>a_const_iterator</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>a_const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::a_const_iterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::a_const_iterator<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a"/><section>
    <title>a_const_iterator<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>a_const_iterator</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>a_const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::a_const_iterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::a_const_iterator<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a"/><section>
    <title>a_const_iterator<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>a_const_iterator</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>a_const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::a_const_iterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::a_const_iterator<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570"/><section>
    <title>a_const_pointer<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>a_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>a_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::a_const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::a_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570"/><section>
    <title>a_const_pointer<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>a_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>a_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::a_const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::a_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570"/><section>
    <title>a_const_pointer<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>a_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>a_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::a_const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::a_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1"/><section>
    <title>const_reference<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>const_reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>const_reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::const_reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1"/><section>
    <title>const_reference<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>const_reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>const_reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::const_reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1"/><section>
    <title>const_reference<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>const_reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>const_reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::const_reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ca51cfbd9ab80b548ae2bf8ea8b61b0"/><section>
    <title>difference_type<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_group__tags_1ga3a45dab56a44f762c97eb0eaee17f6f2">trivial_iterator_difference_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ca51cfbd9ab80b548ae2bf8ea8b61b0"/><section>
    <title>difference_type<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_group__tags_1ga3a45dab56a44f762c97eb0eaee17f6f2">trivial_iterator_difference_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ca51cfbd9ab80b548ae2bf8ea8b61b0"/><section>
    <title>difference_type<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_group__tags_1ga3a45dab56a44f762c97eb0eaee17f6f2">trivial_iterator_difference_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201"/><section>
    <title>inode_const_pointer<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>inode_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>inode_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Inode&gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::inode_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201"/><section>
    <title>inode_const_pointer<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>inode_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>inode_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Inode&gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::inode_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a60caf56ad0e0e4ffac3d56533589f201"/><section>
    <title>inode_const_pointer<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>inode_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>inode_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Inode&gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::inode_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b"/><section>
    <title>inode_pointer<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>inode_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>inode_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Inode&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::inode_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b"/><section>
    <title>inode_pointer<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>inode_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>inode_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Inode&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::inode_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a485cd0f42c29dc873e29962bbd86ef9b"/><section>
    <title>inode_pointer<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>inode_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>inode_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Inode&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::inode_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a95a47eaf0a9290bfcbae20ceee854be6"/><section>
    <title>iterator_category<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>iterator_category</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1trivial__iterator__tag">trivial_iterator_tag</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::iterator_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a95a47eaf0a9290bfcbae20ceee854be6"/><section>
    <title>iterator_category<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>iterator_category</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1trivial__iterator__tag">trivial_iterator_tag</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::iterator_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a95a47eaf0a9290bfcbae20ceee854be6"/><section>
    <title>iterator_category<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>iterator_category</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1trivial__iterator__tag">trivial_iterator_tag</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::iterator_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c"/><section>
    <title>leaf_const_pointer<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>leaf_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>leaf_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Leaf&gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::leaf_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c"/><section>
    <title>leaf_const_pointer<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>leaf_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>leaf_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Leaf&gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::leaf_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7be84a9688dec11544b8aece0132980c"/><section>
    <title>leaf_const_pointer<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>leaf_const_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>leaf_const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Leaf&gt;::const_pointer <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::leaf_const_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a98184f8da6c26c31336562a27c1744f7"/><section>
    <title>leaf_pointer<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>leaf_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>leaf_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Leaf&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::leaf_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a98184f8da6c26c31336562a27c1744f7"/><section>
    <title>leaf_pointer<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>leaf_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>leaf_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Leaf&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::leaf_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a98184f8da6c26c31336562a27c1744f7"/><section>
    <title>leaf_pointer<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>leaf_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>leaf_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Leaf&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::leaf_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737"/><section>
    <title>metadata_const_reference<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>metadata_const_reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>metadata_const_reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link>&gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">::const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::metadata_const_reference</computeroutput></para><para>

<para>Const metadata reference type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737"/><section>
    <title>metadata_const_reference<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>metadata_const_reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>metadata_const_reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link>&gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">::const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::metadata_const_reference</computeroutput></para><para>

<para>Const metadata reference type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737"/><section>
    <title>metadata_const_reference<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>metadata_const_reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>metadata_const_reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957">metadata_type</link>&gt;<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">::const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::metadata_const_reference</computeroutput></para><para>

<para>Const metadata reference type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957"/><section>
    <title>metadata_type<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>metadata_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>metadata_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::metadata_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::metadata_type</computeroutput></para><para>

<para>Metadata type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957"/><section>
    <title>metadata_type<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>metadata_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>metadata_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::metadata_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::metadata_type</computeroutput></para><para>

<para>Metadata type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a28fd8a987e41c1d2f3d413b8018f7957"/><section>
    <title>metadata_type<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>metadata_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>metadata_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef Node::metadata_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::metadata_type</computeroutput></para><para>

<para>Metadata type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909"/><section>
    <title>node_pointer<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>node_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>node_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Node&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::node_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909"/><section>
    <title>node_pointer<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>node_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>node_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Node&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::node_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909"/><section>
    <title>node_pointer<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>node_pointer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>node_pointer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1detail_1_1rebind__traits">rebind_traits</link>&lt;_Alloc,Node&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::node_pointer<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1ac0eb4fcafd374ac1f3adb74dfe7cad1e"/><section>
    <title>reference<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1ac0eb4fcafd374ac1f3adb74dfe7cad1e"/><section>
    <title>reference<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1ac0eb4fcafd374ac1f3adb74dfe7cad1e"/><section>
    <title>reference<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248">value_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd"/><section>
    <title>size_type<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>size_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>size_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef _Alloc::size_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::size_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd"/><section>
    <title>size_type<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>size_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>size_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef _Alloc::size_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::size_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd"/><section>
    <title>size_type<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>size_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>size_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef _Alloc::size_type <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::size_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248"/><section>
    <title>value_type<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef _CIterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::value_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248"/><section>
    <title>value_type<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef _CIterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::value_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a155439e0d177e4103f58897774f36248"/><section>
    <title>value_type<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>typedef _CIterator <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::value_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ae944066f88dc12614dc9f81692ed89"/><section>
    <title>_Node_citer()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_Node_citer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>_Node_citer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::_Node_citer (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> p_nd = <computeroutput>0</computeroutput>
, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> p_traits = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ae944066f88dc12614dc9f81692ed89"/><section>
    <title>_Node_citer()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_Node_citer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>_Node_citer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::_Node_citer (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> p_nd = <computeroutput>0</computeroutput>
, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> p_traits = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a2ae944066f88dc12614dc9f81692ed89"/><section>
    <title>_Node_citer()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_Node_citer</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>_Node_citer</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::_Node_citer (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> p_nd = <computeroutput>0</computeroutput>
, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> p_traits = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a5059988db056938bffdb07f2256e9702"/><section>
    <title>get_child()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>get_child</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>get_child</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::get_child (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> i) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Returns a __const node __iterator to the corresponding node&apos;s i-th child. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a5059988db056938bffdb07f2256e9702"/><section>
    <title>get_child()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>get_child</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>get_child</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::get_child (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> i) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Returns a __const node __iterator to the corresponding node&apos;s i-th child. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a5059988db056938bffdb07f2256e9702"/><section>
    <title>get_child()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>get_child</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>get_child</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::get_child (<link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> i) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Returns a __const node __iterator to the corresponding node&apos;s i-th child. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa1d2c39c7f6e4ab52440a40836f030b7"/><section>
    <title>get_metadata()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>get_metadata</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>get_metadata</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::get_metadata ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Metadata access. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa1d2c39c7f6e4ab52440a40836f030b7"/><section>
    <title>get_metadata()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>get_metadata</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>get_metadata</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::get_metadata ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Metadata access. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa1d2c39c7f6e4ab52440a40836f030b7"/><section>
    <title>get_metadata()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>get_metadata</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>get_metadata</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a89aa8504f45cf7aecfcd22549afb6737">metadata_const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::get_metadata ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Metadata access. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147"/><section>
    <title>num_children()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>num_children</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>num_children</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::num_children ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the number of children in the corresponding node. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_a78db74c5de3cfff1de97561e5d530147_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147"/><section>
    <title>num_children()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>num_children</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>num_children</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::num_children ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the number of children in the corresponding node. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a78db74c5de3cfff1de97561e5d530147"/><section>
    <title>num_children()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>num_children</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>num_children</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aa7d481b2bac4b9bebe66eb4c6ce56acd">size_type</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::num_children ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns the number of children in the corresponding node. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a210f5b96aa65b4a025d3f4998378862f"/><section>
    <title>operator!=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator!= (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compares content (negatively) to a different iterator object. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a210f5b96aa65b4a025d3f4998378862f"/><section>
    <title>operator!=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator!= (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compares content (negatively) to a different iterator object. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a210f5b96aa65b4a025d3f4998378862f"/><section>
    <title>operator!=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator!= (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compares content (negatively) to a different iterator object. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a951a43bd97e277ad638e8cf8229d0af3"/><section>
    <title>operator*()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Const access; returns the __const iterator* associated with the current leaf. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_a951a43bd97e277ad638e8cf8229d0af3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a951a43bd97e277ad638e8cf8229d0af3"/><section>
    <title>operator*()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Const access; returns the __const iterator* associated with the current leaf. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_a951a43bd97e277ad638e8cf8229d0af3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a951a43bd97e277ad638e8cf8229d0af3"/><section>
    <title>operator*()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a7aa43bda4e69f401744fc15147291ee1">const_reference</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Const access; returns the __const iterator* associated with the current leaf. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_a951a43bd97e277ad638e8cf8229d0af3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a46409e64d8adbfd9be6a641313d150da"/><section>
    <title>operator==()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator== (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compares content to a different iterator object. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a46409e64d8adbfd9be6a641313d150da"/><section>
    <title>operator==()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator== (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compares content to a different iterator object. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a46409e64d8adbfd9be6a641313d150da"/><section>
    <title>operator==()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::operator== (const <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt; &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compares content to a different iterator object. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1c46c259b96d315785777fea38c548f8"/><section>
    <title>valid_prefix()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>valid_prefix</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>valid_prefix</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>std::pair&lt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link> &gt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::valid_prefix ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Subtree valid prefix. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1c46c259b96d315785777fea38c548f8"/><section>
    <title>valid_prefix()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>valid_prefix</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>valid_prefix</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>std::pair&lt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link> &gt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::valid_prefix ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Subtree valid prefix. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1c46c259b96d315785777fea38c548f8"/><section>
    <title>valid_prefix()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>valid_prefix</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>valid_prefix</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput>std::pair&lt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link>, <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a62391d405ef8e727753a73dba3a9aa9a">a_const_iterator</link> &gt; <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::valid_prefix ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Subtree valid prefix. </para>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a1e2565b7a9141ab9b2d782f343e92b4a"/><section>
    <title>m_p_nd</title>
<indexterm><primary>m_p_nd</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>m_p_nd</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a07fa8c9cfab310b702c5d535bf49c909">node_pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::m_p_nd</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1aed70db3de953a06f7c8fd45bd5610ab6"/><section>
    <title>m_p_traits</title>
<indexterm><primary>m_p_traits</primary><secondary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::detail::pat_trie_base::_Node_citer&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;</primary><secondary>m_p_traits</secondary></indexterm>
<computeroutput>template&lt;typename Node , typename Leaf , typename Head , typename Inode , typename _CIterator , typename Iterator , typename _Alloc &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer_1a4ffd09efd496131956829457cdfda570">a_const_pointer</link> <link linkend="_class____gnu__pbds_1_1detail_1_1pat__trie__base_1_1___node__citer">__gnu_pbds::detail::pat_trie_base::_Node_citer</link>&lt; Node, Leaf, Head, Inode, _CIterator, Iterator, _Alloc &gt;::m_p_traits</computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/pat_trie_/<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp">pat_trie_base.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/pat_trie_/<link linkend="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp">pat_trie_base.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/detail/pat_trie_/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie__base_8hpp">pat_trie_base.hpp</link></section>
</section>
