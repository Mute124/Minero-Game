<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__stack_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_stack.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_stack.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;bits/concept_check.h&gt;<?linebreak?>#include &lt;debug/debug.h&gt;<?linebreak?></programlisting>Include dependency graph for stl_stack.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_classes_2lib_2include_2c_09_09_2bits_2stl__stack_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__stack_8h_1a544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__stack_8h_1a544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>stl_stack.h</secondary></indexterm>
<indexterm><primary>stl_stack.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>A standard container giving FILO behavior.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_Tp</entry><entry>
<para>Type of element. </para>
</entry>
                            </row>
                            <row>
<entry>_Sequence</entry><entry>
<para>Type of underlying sequence, defaults to deque&lt;_Tp&gt;.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Meets many of the requirements of a <link xlink:href="tables.html#65">container</link>, but does not define anything to do with iterators. Very few of the other standard container interfaces are defined.</para>

<para>This is not a true container, but an <emphasis>adaptor</emphasis>. It holds another container, and provides a wrapper interface to that container. The wrapper is what enforces strict first-in-last-out stack behavior.</para>

<para>The second template parameter defines the type of the underlying sequence/container. It defaults to std::deque, but it can be any type that supports <computeroutput>back</computeroutput>, <computeroutput>push_back</computeroutput>, and <computeroutput>pop_back</computeroutput>, such as std::list, std::vector, or an appropriate user-defined type.</para>

<para>Members not found in <emphasis>normal</emphasis> containers are <computeroutput>container_type</computeroutput>, which is a typedef for the second Sequence parameter, and <computeroutput>push</computeroutput>, <computeroutput>pop</computeroutput>, and <computeroutput>top</computeroutput>, which are standard stack/FILO operations.</para>

<para>Default constructor creates no elements.</para>

<para>Returns true if the stack is empty.</para>

<para>Returns the number of elements in the stack. <?linebreak?></para>

<para>Returns a read/write reference to the data at the first element of the stack.</para>

<para>Returns a read-only (constant) reference to the data at the first element of the stack.</para>

<para>Add data to the top of the stack. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>Data to be added.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This is a typical stack operation. The function creates an element at the top of the stack and assigns the given data to it. The time complexity of the operation depends on the underlying sequence.</para>

<para>Removes first element.</para>

<para>This is a typical stack operation. It shrinks the stack by one. The time complexity of the operation depends on the underlying sequence.</para>

<para>Note that no data is returned, and if the first element&apos;s data is needed, it should be retrieved before <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop()</link> is called.</para>

<para><link linkend="_struct_stack">Stack</link> equality comparison. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A stack. </para>
</entry>
                            </row>
                            <row>
<entry>__y</entry><entry>
<para>A stack of the same type as <emphasis>__x</emphasis>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True iff the size and elements of the stacks are equal.</para>
</formalpara>
This is an equivalence relation. Complexity and semantics depend on the underlying sequence type, but the expected rules are: this relation is linear in the size of the sequences, and stacks are considered equivalent if their sequences compare equal.</para>

<para><link linkend="_struct_stack">Stack</link> ordering relation. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A stack. </para>
</entry>
                            </row>
                            <row>
<entry>__y</entry><entry>
<para>A stack of the same type as <emphasis>x</emphasis>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True iff <emphasis>x</emphasis> is lexicographically less than <emphasis>__y</emphasis>.</para>
</formalpara>
This is an total ordering relation. Complexity and semantics depend on the underlying sequence type, but the expected rules are: this relation is linear in the size of the sequences, the elements must be comparable with <computeroutput>&lt;</computeroutput>, and <link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare()</link> is usually used to make the determination.</para>

<para>Based on operator==</para>

<para>Based on operator&lt;</para>

<para>Based on operator&lt;</para>

<para>Based on operator&lt;</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_classes_2lib_2include_2c_09_09_2bits_2stl__stack_8h_a544d74b2d5d0dd2197f5fd6f02691de0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
