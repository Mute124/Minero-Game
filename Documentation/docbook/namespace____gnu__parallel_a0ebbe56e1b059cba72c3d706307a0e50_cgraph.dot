digraph "__gnu_parallel::__for_each_template_random_access"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="__gnu_parallel::__for\l_each_template_random\l_access",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Chose the desired algorithm by evaluating __parallelism_tag."];
  Node1 -> Node2 [id="edge45_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="__gnu_parallel::__for\l_each_template_random\l_access_ed",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a12c48efb47ea3e00a7ef666d595ae185",tooltip="Embarrassingly parallel algorithm for random access iterators, using hand-crafted parallelization by ..."];
  Node2 -> Node3 [id="edge46_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="__gnu_parallel::__equally\l_split_point",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a8e3a77cb920e419144b72d6d20167dfd",tooltip="function to split a sequence into parts of almost equal size."];
  Node2 -> Node4 [id="edge47_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="__gnu_parallel::__get\l_max_threads",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#aa72851b809c2b314bc09580c3512f281",tooltip=" "];
  Node4 -> Node5 [id="edge48_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="omp_get_max_threads",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2omp_8h.html#a54430ed3c727a27db57290ec784b0b09",tooltip=" "];
  Node2 -> Node6 [id="edge49_Node000002_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="omp_get_num_threads",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2omp_8h.html#ac42ead04531fd33507e3d3a6f648b200",tooltip=" "];
  Node2 -> Node7 [id="edge50_Node000002_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="omp_get_thread_num",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2omp_8h.html#aa03cf372d8266eef024262a68d304e1b",tooltip=" "];
  Node1 -> Node8 [id="edge51_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="__gnu_parallel::__for\l_each_template_random\l_access_omp_loop",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a6a5228179a033ede58cd143f66cdf354",tooltip="Embarrassingly parallel algorithm for random access iterators, using an OpenMP for loop."];
  Node8 -> Node4 [id="edge52_Node000008_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node6 [id="edge53_Node000008_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node7 [id="edge54_Node000008_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node9 [id="edge55_Node000001_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="__gnu_parallel::__for\l_each_template_random\l_access_workstealing",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a14bdca2e9c62cde7dd8478d972f60272",tooltip="Work stealing algorithm for random access iterators."];
  Node9 -> Node4 [id="edge56_Node000009_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node10 [id="edge57_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="__gnu_parallel::__yield",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#aaa76236af73146ae89f726921bc3f2cb",tooltip="Yield control to another thread, without waiting for the end of the time slice."];
  Node10 -> Node11 [id="edge58_Node000010_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="sched_yield",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2pthread_8h.html#a6c8d40dba19ab44315a73fa45579e07c",tooltip=" "];
  Node9 -> Node12 [id="edge59_Node000009_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="__gnu_parallel::_Settings::get",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$struct____gnu__parallel_1_1___settings.html#adf11d9453707f1145a9e221ab7630bd3",tooltip="Get the global settings."];
  Node9 -> Node13 [id="edge60_Node000009_Node000013",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="__gnu_parallel::min",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace____gnu__parallel.html#a417ee6b935946ea05ce7c45fd067541a",tooltip="Equivalent to std::min."];
  Node9 -> Node14 [id="edge61_Node000009_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="omp_destroy_lock",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2omp_8h.html#a7f838ad86590395c9aaaf7eabf80665e",tooltip=" "];
  Node9 -> Node6 [id="edge62_Node000009_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node7 [id="edge63_Node000009_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node9 -> Node15 [id="edge64_Node000009_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="omp_init_lock",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2omp_8h.html#ab9c82451011f65593480a3ba21ce46bc",tooltip=" "];
  Node9 -> Node16 [id="edge65_Node000009_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="omp_set_lock",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2omp_8h.html#ab7a6a9f1b9a08b10b4770c3389cb8d3c",tooltip=" "];
  Node9 -> Node17 [id="edge66_Node000009_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="omp_unset_lock",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_classes_2lib_2include_2omp_8h.html#a9671d710d3c51bdc9940b81a3e23dcf6",tooltip=" "];
}
