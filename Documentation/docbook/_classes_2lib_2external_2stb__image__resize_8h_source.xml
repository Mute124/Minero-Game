<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2external_2stb__image__resize_8h_source" xml:lang="en-US">
<title>stb_image_resize.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/external/stb_image_resize.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;stb_image_resize&#32;-&#32;v0.97&#32;-&#32;public&#32;domain&#32;image&#32;resizing</emphasis>
2 <emphasis role="comment">&#32;&#32;&#32;by&#32;Jorge&#32;L&#32;Rodriguez&#32;(@VinoBS)&#32;-&#32;2014</emphasis>
3 <emphasis role="comment">&#32;&#32;&#32;http://github.com/nothings/stb</emphasis>
4 <emphasis role="comment"></emphasis>
5 <emphasis role="comment">&#32;&#32;&#32;Written&#32;with&#32;emphasis&#32;on&#32;usability,&#32;portability,&#32;and&#32;efficiency.&#32;(No</emphasis>
6 <emphasis role="comment">&#32;&#32;&#32;SIMD&#32;or&#32;threads,&#32;so&#32;it&#32;be&#32;easily&#32;outperformed&#32;by&#32;libs&#32;that&#32;use&#32;those.)</emphasis>
7 <emphasis role="comment">&#32;&#32;&#32;Only&#32;scaling&#32;and&#32;translation&#32;is&#32;supported,&#32;no&#32;rotations&#32;or&#32;shears.</emphasis>
8 <emphasis role="comment">&#32;&#32;&#32;Easy&#32;API&#32;downsamples&#32;w/Mitchell&#32;filter,&#32;upsamples&#32;w/cubic&#32;interpolation.</emphasis>
9 <emphasis role="comment"></emphasis>
10 <emphasis role="comment">&#32;&#32;&#32;COMPILING&#32;&amp;&#32;LINKING</emphasis>
11 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;In&#32;one&#32;C/C++&#32;file&#32;that&#32;#includes&#32;this&#32;file,&#32;do&#32;this:</emphasis>
12 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STB_IMAGE_RESIZE_IMPLEMENTATION</emphasis>
13 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;before&#32;the&#32;#include.&#32;That&#32;will&#32;create&#32;the&#32;implementation&#32;in&#32;that&#32;file.</emphasis>
14 <emphasis role="comment"></emphasis>
15 <emphasis role="comment">&#32;&#32;&#32;QUICKSTART</emphasis>
16 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;stbir_resize_uint8(&#32;&#32;&#32;&#32;&#32;&#32;input_pixels&#32;,&#32;in_w&#32;,&#32;in_h&#32;,&#32;0,</emphasis>
17 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;out_w,&#32;out_h,&#32;0,&#32;num_channels)</emphasis>
18 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;stbir_resize_float(...)</emphasis>
19 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;stbir_resize_uint8_srgb(&#32;input_pixels&#32;,&#32;in_w&#32;,&#32;in_h&#32;,&#32;0,</emphasis>
20 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;out_w,&#32;out_h,&#32;0,</emphasis>
21 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_channels&#32;,&#32;alpha_chan&#32;&#32;,&#32;0)</emphasis>
22 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;stbir_resize_uint8_srgb_edgemode(</emphasis>
23 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_pixels&#32;,&#32;in_w&#32;,&#32;in_h&#32;,&#32;0,</emphasis>
24 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;out_w,&#32;out_h,&#32;0,</emphasis>
25 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_channels&#32;,&#32;alpha_chan&#32;&#32;,&#32;0,&#32;STBIR_EDGE_CLAMP)</emphasis>
26 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;WRAP/REFLECT/ZERO</emphasis>
27 <emphasis role="comment"></emphasis>
28 <emphasis role="comment">&#32;&#32;&#32;FULL&#32;API</emphasis>
29 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;See&#32;the&#32;&quot;header&#32;file&quot;&#32;section&#32;of&#32;the&#32;source&#32;for&#32;API&#32;documentation.</emphasis>
30 <emphasis role="comment"></emphasis>
31 <emphasis role="comment">&#32;&#32;&#32;ADDITIONAL&#32;DOCUMENTATION</emphasis>
32 <emphasis role="comment"></emphasis>
33 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;SRGB&#32;&amp;&#32;FLOATING&#32;POINT&#32;REPRESENTATION</emphasis>
34 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;sRGB&#32;functions&#32;presume&#32;IEEE&#32;floating&#32;point.&#32;If&#32;you&#32;do&#32;not&#32;have</emphasis>
35 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IEEE&#32;floating&#32;point,&#32;define&#32;STBIR_NON_IEEE_FLOAT.&#32;This&#32;will&#32;use</emphasis>
36 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;slower&#32;implementation.</emphasis>
37 <emphasis role="comment"></emphasis>
38 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;MEMORY&#32;ALLOCATION</emphasis>
39 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;resize&#32;functions&#32;here&#32;perform&#32;a&#32;single&#32;memory&#32;allocation&#32;using</emphasis>
40 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;malloc.&#32;To&#32;control&#32;the&#32;memory&#32;allocation,&#32;before&#32;the&#32;#include&#32;that</emphasis>
41 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;triggers&#32;the&#32;implementation,&#32;do:</emphasis>
42 <emphasis role="comment"></emphasis>
43 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STBIR_MALLOC(size,context)&#32;...</emphasis>
44 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STBIR_FREE(ptr,context)&#32;&#32;&#32;...</emphasis>
45 <emphasis role="comment"></emphasis>
46 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Each&#32;resize&#32;function&#32;makes&#32;exactly&#32;one&#32;call&#32;to&#32;malloc/free,&#32;so&#32;to&#32;use</emphasis>
47 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;memory,&#32;store&#32;the&#32;temp&#32;memory&#32;in&#32;the&#32;context&#32;and&#32;return&#32;that.</emphasis>
48 <emphasis role="comment"></emphasis>
49 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;ASSERT</emphasis>
50 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Define&#32;STBIR_ASSERT(boolval)&#32;to&#32;override&#32;assert()&#32;and&#32;not&#32;use&#32;assert.h</emphasis>
51 <emphasis role="comment"></emphasis>
52 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;OPTIMIZATION</emphasis>
53 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Define&#32;STBIR_SATURATE_INT&#32;to&#32;compute&#32;clamp&#32;values&#32;in-range&#32;using</emphasis>
54 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;integer&#32;operations&#32;instead&#32;of&#32;float&#32;operations.&#32;This&#32;may&#32;be&#32;faster</emphasis>
55 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;on&#32;some&#32;platforms.</emphasis>
56 <emphasis role="comment"></emphasis>
57 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;DEFAULT&#32;FILTERS</emphasis>
58 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;For&#32;functions&#32;which&#32;don&apos;t&#32;provide&#32;explicit&#32;control&#32;over&#32;what&#32;filters</emphasis>
59 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;use,&#32;you&#32;can&#32;change&#32;the&#32;compile-time&#32;defaults&#32;with</emphasis>
60 <emphasis role="comment"></emphasis>
61 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STBIR_DEFAULT_FILTER_UPSAMPLE&#32;&#32;&#32;&#32;&#32;STBIR_FILTER_something</emphasis>
62 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STBIR_DEFAULT_FILTER_DOWNSAMPLE&#32;&#32;&#32;STBIR_FILTER_something</emphasis>
63 <emphasis role="comment"></emphasis>
64 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;See&#32;stbir_filter&#32;in&#32;the&#32;header-file&#32;section&#32;for&#32;the&#32;list&#32;of&#32;filters.</emphasis>
65 <emphasis role="comment"></emphasis>
66 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;NEW&#32;FILTERS</emphasis>
67 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;A&#32;number&#32;of&#32;1D&#32;filter&#32;kernels&#32;are&#32;used.&#32;For&#32;a&#32;list&#32;of</emphasis>
68 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;supported&#32;filters&#32;see&#32;the&#32;stbir_filter&#32;enum.&#32;To&#32;add&#32;a&#32;new&#32;filter,</emphasis>
69 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write&#32;a&#32;filter&#32;function&#32;and&#32;add&#32;it&#32;to&#32;stbir__filter_info_table.</emphasis>
70 <emphasis role="comment"></emphasis>
71 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;PROGRESS</emphasis>
72 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;For&#32;interactive&#32;use&#32;with&#32;slow&#32;resize&#32;operations,&#32;you&#32;can&#32;install</emphasis>
73 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a&#32;progress-report&#32;callback:</emphasis>
74 <emphasis role="comment"></emphasis>
75 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STBIR_PROGRESS_REPORT(val)&#32;&#32;&#32;some_func(val)</emphasis>
76 <emphasis role="comment"></emphasis>
77 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;parameter&#32;val&#32;is&#32;a&#32;float&#32;which&#32;goes&#32;from&#32;0&#32;to&#32;1&#32;as&#32;progress&#32;is&#32;made.</emphasis>
78 <emphasis role="comment"></emphasis>
79 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;For&#32;example:</emphasis>
80 <emphasis role="comment"></emphasis>
81 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;my_progress_report(float&#32;progress);</emphasis>
82 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STBIR_PROGRESS_REPORT(val)&#32;my_progress_report(val)</emphasis>
83 <emphasis role="comment"></emphasis>
84 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STB_IMAGE_RESIZE_IMPLEMENTATION</emphasis>
85 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#include&#32;&quot;stb_image_resize.h&quot;</emphasis>
86 <emphasis role="comment"></emphasis>
87 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;my_progress_report(float&#32;progress)</emphasis>
88 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
89 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;Progress:&#32;%f%%\n&quot;,&#32;progress*100);</emphasis>
90 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
91 <emphasis role="comment"></emphasis>
92 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;MAX&#32;CHANNELS</emphasis>
93 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;your&#32;image&#32;has&#32;more&#32;than&#32;64&#32;channels,&#32;define&#32;STBIR_MAX_CHANNELS</emphasis>
94 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;the&#32;max&#32;you&apos;ll&#32;have.</emphasis>
95 <emphasis role="comment"></emphasis>
96 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;ALPHA&#32;CHANNEL</emphasis>
97 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Most&#32;of&#32;the&#32;resizing&#32;functions&#32;provide&#32;the&#32;ability&#32;to&#32;control&#32;how</emphasis>
98 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;alpha&#32;channel&#32;of&#32;an&#32;image&#32;is&#32;processed.&#32;The&#32;important&#32;things</emphasis>
99 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;know&#32;about&#32;this:</emphasis>
100 <emphasis role="comment"></emphasis>
101 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1.&#32;The&#32;best&#32;mathematically-behaved&#32;version&#32;of&#32;alpha&#32;to&#32;use&#32;is</emphasis>
102 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;called&#32;&quot;premultiplied&#32;alpha&quot;,&#32;in&#32;which&#32;the&#32;other&#32;color&#32;channels</emphasis>
103 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;have&#32;had&#32;the&#32;alpha&#32;value&#32;multiplied&#32;in.&#32;If&#32;you&#32;use&#32;premultiplied</emphasis>
104 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alpha,&#32;linear&#32;filtering&#32;(such&#32;as&#32;image&#32;resampling&#32;done&#32;by&#32;this</emphasis>
105 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;library,&#32;or&#32;performed&#32;in&#32;texture&#32;units&#32;on&#32;GPUs)&#32;does&#32;the&#32;&quot;right</emphasis>
106 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thing&quot;.&#32;While&#32;premultiplied&#32;alpha&#32;is&#32;standard&#32;in&#32;the&#32;movie&#32;CGI</emphasis>
107 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;industry,&#32;it&#32;is&#32;still&#32;uncommon&#32;in&#32;the&#32;videogame/real-time&#32;world.</emphasis>
108 <emphasis role="comment"></emphasis>
109 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;you&#32;linearly&#32;filter&#32;non-premultiplied&#32;alpha,&#32;strange&#32;effects</emphasis>
110 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;occur.&#32;(For&#32;example,&#32;the&#32;50/50&#32;average&#32;of&#32;99%&#32;transparent&#32;bright&#32;green</emphasis>
111 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;1%&#32;transparent&#32;black&#32;produces&#32;50%&#32;transparent&#32;dark&#32;green&#32;when</emphasis>
112 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;non-premultiplied,&#32;whereas&#32;premultiplied&#32;it&#32;produces&#32;50%</emphasis>
113 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transparent&#32;near-black.&#32;The&#32;former&#32;introduces&#32;green&#32;energy</emphasis>
114 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;that&#32;doesn&apos;t&#32;exist&#32;in&#32;the&#32;source&#32;image.)</emphasis>
115 <emphasis role="comment"></emphasis>
116 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2.&#32;Artists&#32;should&#32;not&#32;edit&#32;premultiplied-alpha&#32;images;&#32;artists</emphasis>
117 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;want&#32;non-premultiplied&#32;alpha&#32;images.&#32;Thus,&#32;art&#32;tools&#32;generally&#32;output</emphasis>
118 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;non-premultiplied&#32;alpha&#32;images.</emphasis>
119 <emphasis role="comment"></emphasis>
120 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3.&#32;You&#32;will&#32;get&#32;best&#32;results&#32;in&#32;most&#32;cases&#32;by&#32;converting&#32;images</emphasis>
121 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;premultiplied&#32;alpha&#32;before&#32;processing&#32;them&#32;mathematically.</emphasis>
122 <emphasis role="comment"></emphasis>
123 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4.&#32;If&#32;you&#32;pass&#32;the&#32;flag&#32;STBIR_FLAG_ALPHA_PREMULTIPLIED,&#32;the</emphasis>
124 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resizer&#32;does&#32;not&#32;do&#32;anything&#32;special&#32;for&#32;the&#32;alpha&#32;channel;</emphasis>
125 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;is&#32;resampled&#32;identically&#32;to&#32;other&#32;channels.&#32;This&#32;produces</emphasis>
126 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;correct&#32;results&#32;for&#32;premultiplied-alpha&#32;images,&#32;but&#32;produces</emphasis>
127 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;less-than-ideal&#32;results&#32;for&#32;non-premultiplied-alpha&#32;images.</emphasis>
128 <emphasis role="comment"></emphasis>
129 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5.&#32;If&#32;you&#32;do&#32;not&#32;pass&#32;the&#32;flag&#32;STBIR_FLAG_ALPHA_PREMULTIPLIED,</emphasis>
130 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;then&#32;the&#32;resizer&#32;weights&#32;the&#32;contribution&#32;of&#32;input&#32;pixels</emphasis>
131 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;based&#32;on&#32;their&#32;alpha&#32;values,&#32;or,&#32;equivalently,&#32;it&#32;multiplies</emphasis>
132 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;alpha&#32;value&#32;into&#32;the&#32;color&#32;channels,&#32;resamples,&#32;then&#32;divides</emphasis>
133 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;by&#32;the&#32;resultant&#32;alpha&#32;value.&#32;Input&#32;pixels&#32;which&#32;have&#32;alpha=0&#32;do</emphasis>
134 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;not&#32;contribute&#32;at&#32;all&#32;to&#32;output&#32;pixels&#32;unless&#32;_all_&#32;of&#32;the&#32;input</emphasis>
135 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pixels&#32;affecting&#32;that&#32;output&#32;pixel&#32;have&#32;alpha=0,&#32;in&#32;which&#32;case</emphasis>
136 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;result&#32;for&#32;that&#32;pixel&#32;is&#32;the&#32;same&#32;as&#32;it&#32;would&#32;be&#32;without</emphasis>
137 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_FLAG_ALPHA_PREMULTIPLIED.&#32;However,&#32;this&#32;is&#32;only&#32;true&#32;for</emphasis>
138 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;images&#32;in&#32;integer&#32;formats.&#32;For&#32;input&#32;images&#32;in&#32;float&#32;format,</emphasis>
139 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;pixels&#32;with&#32;alpha=0&#32;have&#32;no&#32;effect,&#32;and&#32;output&#32;pixels</emphasis>
140 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;which&#32;have&#32;alpha=0&#32;will&#32;be&#32;0&#32;in&#32;all&#32;channels.&#32;(For&#32;float&#32;images,</emphasis>
141 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;you&#32;can&#32;manually&#32;achieve&#32;the&#32;same&#32;result&#32;by&#32;adding&#32;a&#32;tiny&#32;epsilon</emphasis>
142 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;to&#32;the&#32;alpha&#32;channel&#32;of&#32;every&#32;image,&#32;and&#32;then&#32;subtracting</emphasis>
143 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;or&#32;clamping&#32;it&#32;at&#32;the&#32;end.)</emphasis>
144 <emphasis role="comment"></emphasis>
145 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6.&#32;You&#32;can&#32;suppress&#32;the&#32;behavior&#32;described&#32;in&#32;#5&#32;and&#32;make</emphasis>
146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;all-0-alpha&#32;pixels&#32;have&#32;0&#32;in&#32;all&#32;channels&#32;by&#32;#defining</emphasis>
147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_NO_ALPHA_EPSILON.</emphasis>
148 <emphasis role="comment"></emphasis>
149 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7.&#32;You&#32;can&#32;separately&#32;control&#32;whether&#32;the&#32;alpha&#32;channel&#32;is</emphasis>
150 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;interpreted&#32;as&#32;linear&#32;or&#32;affected&#32;by&#32;the&#32;colorspace.&#32;By&#32;default</emphasis>
151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;is&#32;linear;&#32;you&#32;almost&#32;never&#32;want&#32;to&#32;apply&#32;the&#32;colorspace.</emphasis>
152 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(For&#32;example,&#32;graphics&#32;hardware&#32;does&#32;not&#32;apply&#32;sRGB&#32;conversion</emphasis>
153 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to&#32;the&#32;alpha&#32;channel.)</emphasis>
154 <emphasis role="comment"></emphasis>
155 <emphasis role="comment">&#32;&#32;&#32;CONTRIBUTORS</emphasis>
156 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Jorge&#32;L&#32;Rodriguez:&#32;Implementation</emphasis>
157 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Sean&#32;Barrett:&#32;API&#32;design,&#32;optimizations</emphasis>
158 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Aras&#32;Pranckevicius:&#32;bugfix</emphasis>
159 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Nathan&#32;Reed:&#32;warning&#32;fixes</emphasis>
160 <emphasis role="comment"></emphasis>
161 <emphasis role="comment">&#32;&#32;&#32;REVISIONS</emphasis>
162 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.97&#32;(2020-02-02)&#32;fixed&#32;warning</emphasis>
163 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.96&#32;(2019-03-04)&#32;fixed&#32;warnings</emphasis>
164 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.95&#32;(2017-07-23)&#32;fixed&#32;warnings</emphasis>
165 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.94&#32;(2017-03-18)&#32;fixed&#32;warnings</emphasis>
166 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.93&#32;(2017-03-03)&#32;fixed&#32;bug&#32;with&#32;certain&#32;combinations&#32;of&#32;heights</emphasis>
167 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.92&#32;(2017-01-02)&#32;fix&#32;integer&#32;overflow&#32;on&#32;large&#32;(&gt;2GB)&#32;images</emphasis>
168 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.91&#32;(2016-04-02)&#32;fix&#32;warnings;&#32;fix&#32;handling&#32;of&#32;subpixel&#32;regions</emphasis>
169 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;0.90&#32;(2014-09-17)&#32;first&#32;released&#32;version</emphasis>
170 <emphasis role="comment"></emphasis>
171 <emphasis role="comment">&#32;&#32;&#32;LICENSE</emphasis>
172 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;See&#32;end&#32;of&#32;file&#32;for&#32;license&#32;information.</emphasis>
173 <emphasis role="comment"></emphasis>
174 <emphasis role="comment">&#32;&#32;&#32;TODO</emphasis>
175 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Don&apos;t&#32;decode&#32;all&#32;of&#32;the&#32;image&#32;data&#32;when&#32;only&#32;processing&#32;a&#32;partial&#32;tile</emphasis>
176 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Don&apos;t&#32;use&#32;full-width&#32;decode&#32;buffers&#32;when&#32;only&#32;processing&#32;a&#32;partial&#32;tile</emphasis>
177 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;When&#32;processing&#32;wide&#32;images,&#32;break&#32;processing&#32;into&#32;tiles&#32;so&#32;data&#32;fits&#32;in&#32;L1&#32;cache</emphasis>
178 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Installable&#32;filters?</emphasis>
179 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;Resize&#32;that&#32;respects&#32;alpha&#32;test&#32;coverage</emphasis>
180 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(Reference&#32;code:&#32;FloatImage::alphaTestCoverage&#32;and&#32;FloatImage::scaleAlphaToCoverage:</emphasis>
181 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;https://code.google.com/p/nvidia-texture-tools/source/browse/trunk/src/nvimage/FloatImage.cpp&#32;)</emphasis>
182 <emphasis role="comment">*/</emphasis>
183 
184 <emphasis role="preprocessor">#ifndef&#32;STBIR_INCLUDE_STB_IMAGE_RESIZE_H</emphasis>
185 <emphasis role="preprocessor">#define&#32;STBIR_INCLUDE_STB_IMAGE_RESIZE_H</emphasis>
186 
187 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
188 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a5f0301f0ca83988d42c35685bc8594eb">stbir_uint8</link>;
189 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>;
190 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>;
191 <emphasis role="preprocessor">#else</emphasis>
192 <emphasis role="preprocessor">#include&#32;&lt;stdint.h&gt;</emphasis>
193 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a5f0301f0ca83988d42c35685bc8594eb">stbir_uint8</link>;
194 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>;
195 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>;
196 <emphasis role="preprocessor">#endif</emphasis>
197 
198 <emphasis role="preprocessor">#ifndef&#32;STBIRDEF</emphasis>
199 <emphasis role="preprocessor">#ifdef&#32;STB_IMAGE_RESIZE_STATIC</emphasis>
200 <emphasis role="preprocessor">#define&#32;STBIRDEF&#32;static</emphasis>
201 <emphasis role="preprocessor">#else</emphasis>
202 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
203 <emphasis role="preprocessor">#define&#32;STBIRDEF&#32;extern&#32;&quot;C&quot;</emphasis>
204 <emphasis role="preprocessor">#else</emphasis>
205 <emphasis role="preprocessor">#define&#32;STBIRDEF&#32;extern</emphasis>
206 <emphasis role="preprocessor">#endif</emphasis>
207 <emphasis role="preprocessor">#endif</emphasis>
208 <emphasis role="preprocessor">#endif</emphasis>
209 
211 <emphasis role="comment">//</emphasis>
212 <emphasis role="comment">//&#32;Easy-to-use&#32;API:</emphasis>
213 <emphasis role="comment">//</emphasis>
214 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;&quot;input&#32;pixels&quot;&#32;points&#32;to&#32;an&#32;array&#32;of&#32;image&#32;data&#32;with&#32;&apos;num_channels&apos;&#32;channels&#32;(e.g.&#32;RGB=3,&#32;RGBA=4)</emphasis>
215 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;input_w&#32;is&#32;input&#32;image&#32;width&#32;(x-axis),&#32;input_h&#32;is&#32;input&#32;image&#32;height&#32;(y-axis)</emphasis>
216 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;stride&#32;is&#32;the&#32;offset&#32;between&#32;successive&#32;rows&#32;of&#32;image&#32;data&#32;in&#32;memory,&#32;in&#32;bytes.&#32;you&#32;can</emphasis>
217 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;specify&#32;0&#32;to&#32;mean&#32;packed&#32;continuously&#32;in&#32;memory</emphasis>
218 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;alpha&#32;channel&#32;is&#32;treated&#32;identically&#32;to&#32;other&#32;channels.</emphasis>
219 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;colorspace&#32;is&#32;linear&#32;or&#32;sRGB&#32;as&#32;specified&#32;by&#32;function&#32;name</emphasis>
220 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;returned&#32;result&#32;is&#32;1&#32;for&#32;success&#32;or&#32;0&#32;in&#32;case&#32;of&#32;an&#32;error.</emphasis>
221 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;STBIR_ASSERT()&#32;to&#32;trigger&#32;an&#32;assert&#32;on&#32;parameter&#32;validation&#32;errors.</emphasis>
222 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;Memory&#32;required&#32;grows&#32;approximately&#32;linearly&#32;with&#32;input&#32;and&#32;output&#32;size,&#32;but&#32;with</emphasis>
223 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;discontinuities&#32;at&#32;input_w&#32;==&#32;output_w&#32;and&#32;input_h&#32;==&#32;output_h.</emphasis>
224 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;These&#32;functions&#32;use&#32;a&#32;&quot;default&quot;&#32;resampling&#32;filter&#32;defined&#32;at&#32;compile&#32;time.&#32;To&#32;change&#32;the&#32;filter,</emphasis>
225 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;you&#32;can&#32;change&#32;the&#32;compile-time&#32;defaults&#32;by&#32;#defining&#32;STBIR_DEFAULT_FILTER_UPSAMPLE</emphasis>
226 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;STBIR_DEFAULT_FILTER_DOWNSAMPLE,&#32;or&#32;you&#32;can&#32;use&#32;the&#32;medium-complexity&#32;API.</emphasis>
227 
228 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a1e182bf89efd8b1cc116ee371f08f2f2">stbir_resize_uint8</link>(&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels);
231 
232 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1af9ed9349cc0b1477c7c0161bde0bd29c">stbir_resize_float</link>(&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels);
235 
236 
237 <emphasis role="comment">//&#32;The&#32;following&#32;functions&#32;interpret&#32;image&#32;data&#32;as&#32;gamma-corrected&#32;sRGB.</emphasis>
238 <emphasis role="comment">//&#32;Specify&#32;STBIR_ALPHA_CHANNEL_NONE&#32;if&#32;you&#32;have&#32;no&#32;alpha&#32;channel,</emphasis>
239 <emphasis role="comment">//&#32;or&#32;otherwise&#32;provide&#32;the&#32;index&#32;of&#32;the&#32;alpha&#32;channel.&#32;Flags&#32;value</emphasis>
240 <emphasis role="comment">//&#32;of&#32;0&#32;will&#32;probably&#32;do&#32;the&#32;right&#32;thing&#32;if&#32;you&apos;re&#32;not&#32;sure&#32;what</emphasis>
241 <emphasis role="comment">//&#32;the&#32;flags&#32;mean.</emphasis>
242 
243 <emphasis role="preprocessor">#define&#32;STBIR_ALPHA_CHANNEL_NONE&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1</emphasis>
244 
245 <emphasis role="comment">//&#32;Set&#32;this&#32;flag&#32;if&#32;your&#32;texture&#32;has&#32;premultiplied&#32;alpha.&#32;Otherwise,&#32;stbir&#32;will</emphasis>
246 <emphasis role="comment">//&#32;use&#32;alpha-weighted&#32;resampling&#32;(effectively&#32;premultiplying,&#32;resampling,</emphasis>
247 <emphasis role="comment">//&#32;then&#32;unpremultiplying).</emphasis>
248 <emphasis role="preprocessor">#define&#32;STBIR_FLAG_ALPHA_PREMULTIPLIED&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;0)</emphasis>
249 <emphasis role="comment">//&#32;The&#32;specified&#32;alpha&#32;channel&#32;should&#32;be&#32;handled&#32;as&#32;gamma-corrected&#32;value&#32;even</emphasis>
250 <emphasis role="comment">//&#32;when&#32;doing&#32;sRGB&#32;operations.</emphasis>
251 <emphasis role="preprocessor">#define&#32;STBIR_FLAG_ALPHA_USES_COLORSPACE&#32;&#32;(1&#32;&lt;&lt;&#32;1)</emphasis>
252 
253 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ac9858aa19a299dee80ba234cac0cd2e6">stbir_resize_uint8_srgb</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
256 
257 
258 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>
259 {
260 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>&#32;&#32;&#32;=&#32;1,
261 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9eab85276f10d1cafae1c33a76f0fb39d2f">STBIR_EDGE_REFLECT</link>&#32;=&#32;2,
262 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea1d5fe813103be8c12ee3498d15bbe7c3">STBIR_EDGE_WRAP</link>&#32;&#32;&#32;&#32;=&#32;3,
263 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea279078b3b5a12337c8905de9bff55769">STBIR_EDGE_ZERO</link>&#32;&#32;&#32;&#32;=&#32;4,
264 }&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>;
265 
266 <emphasis role="comment">//&#32;This&#32;function&#32;adds&#32;the&#32;ability&#32;to&#32;specify&#32;how&#32;requests&#32;to&#32;sample&#32;off&#32;the&#32;edge&#32;of&#32;the&#32;image&#32;are&#32;handled.</emphasis>
267 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a39da51aef83496614a9e799e86ae1a30">stbir_resize_uint8_srgb_edgemode</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode);
271 
273 <emphasis role="comment">//</emphasis>
274 <emphasis role="comment">//&#32;Medium-complexity&#32;API</emphasis>
275 <emphasis role="comment">//</emphasis>
276 <emphasis role="comment">//&#32;This&#32;extends&#32;the&#32;easy-to-use&#32;API&#32;as&#32;follows:</emphasis>
277 <emphasis role="comment">//</emphasis>
278 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;Alpha-channel&#32;can&#32;be&#32;processed&#32;separately</emphasis>
279 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;If&#32;alpha_channel&#32;is&#32;not&#32;STBIR_ALPHA_CHANNEL_NONE</emphasis>
280 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Alpha&#32;channel&#32;will&#32;not&#32;be&#32;gamma&#32;corrected&#32;(unless&#32;flags&amp;STBIR_FLAG_GAMMA_CORRECT)</emphasis>
281 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Filters&#32;will&#32;be&#32;weighted&#32;by&#32;alpha&#32;channel&#32;(unless&#32;flags&amp;STBIR_FLAG_ALPHA_PREMULTIPLIED)</emphasis>
282 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;Filter&#32;can&#32;be&#32;selected&#32;explicitly</emphasis>
283 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;uint16&#32;image&#32;type</emphasis>
284 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;sRGB&#32;colorspace&#32;available&#32;for&#32;all&#32;types</emphasis>
285 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;context&#32;parameter&#32;for&#32;passing&#32;to&#32;STBIR_MALLOC</emphasis>
286 
287 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>
288 {
289 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0,&#32;&#32;<emphasis role="comment">//&#32;use&#32;same&#32;filter&#32;type&#32;that&#32;easy-to-use&#32;API&#32;chooses</emphasis>
290 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a96aa77466a9dcec62e17bf4050301b05">STBIR_FILTER_BOX</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1,&#32;&#32;<emphasis role="comment">//&#32;A&#32;trapezoid&#32;w/1-pixel&#32;wide&#32;ramps,&#32;same&#32;result&#32;as&#32;box&#32;for&#32;integer&#32;scale&#32;ratios</emphasis>
291 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093ab60125093ca93d771b9c703aa4a22d65">STBIR_FILTER_TRIANGLE</link>&#32;&#32;&#32;&#32;&#32;=&#32;2,&#32;&#32;<emphasis role="comment">//&#32;On&#32;upsampling,&#32;produces&#32;same&#32;results&#32;as&#32;bilinear&#32;texture&#32;filtering</emphasis>
292 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093ae832b16990dc0b85fb3aef215b997700">STBIR_FILTER_CUBICBSPLINE</link>&#32;=&#32;3,&#32;&#32;<emphasis role="comment">//&#32;The&#32;cubic&#32;b-spline&#32;(aka&#32;Mitchell-Netrevalli&#32;with&#32;B=1,C=0),&#32;gaussian-esque</emphasis>
293 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093ad24b388e0a27fa07c3eb76845f1f7959">STBIR_FILTER_CATMULLROM</link>&#32;&#32;&#32;=&#32;4,&#32;&#32;<emphasis role="comment">//&#32;An&#32;interpolating&#32;cubic&#32;spline</emphasis>
294 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a730eb3ee0e0f29f1806ce6b7607094fc">STBIR_FILTER_MITCHELL</link>&#32;&#32;&#32;&#32;&#32;=&#32;5,&#32;&#32;<emphasis role="comment">//&#32;Mitchell-Netrevalli&#32;filter&#32;with&#32;B=1/3,&#32;C=1/3</emphasis>
295 }&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>;
296 
297 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>
298 {
299 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>,
300 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>,
301 
302 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda8899565f02de9bcae20b4e75afd63609">STBIR_MAX_COLORSPACES</link>,
303 }&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>;
304 
305 <emphasis role="comment">//&#32;The&#32;following&#32;functions&#32;are&#32;all&#32;identical&#32;except&#32;for&#32;the&#32;type&#32;of&#32;the&#32;image&#32;data</emphasis>
306 
307 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ab05ffc16e07a8f23070fe0cf70a197e5">stbir_resize_uint8_generic</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context);
312 
313 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a095dd37e33b7159eb4e3a6814f3318bd">stbir_resize_uint16_generic</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>&#32;*input_pixels&#32;&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>&#32;*output_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context);
318 
319 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a1d6a4f8758f5054cb93bbc914d9aa9b9">stbir_resize_float_generic</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*input_pixels&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;*output_pixels&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context);
324 
325 
326 
328 <emphasis role="comment">//</emphasis>
329 <emphasis role="comment">//&#32;Full-complexity&#32;API</emphasis>
330 <emphasis role="comment">//</emphasis>
331 <emphasis role="comment">//&#32;This&#32;extends&#32;the&#32;medium&#32;API&#32;as&#32;follows:</emphasis>
332 <emphasis role="comment">//</emphasis>
333 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;uint32&#32;image&#32;type</emphasis>
334 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;not&#32;typesafe</emphasis>
335 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;separate&#32;filter&#32;types&#32;for&#32;each&#32;axis</emphasis>
336 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;separate&#32;edge&#32;modes&#32;for&#32;each&#32;axis</emphasis>
337 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;can&#32;specify&#32;scale&#32;explicitly&#32;for&#32;subpixel&#32;correctness</emphasis>
338 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;*&#32;can&#32;specify&#32;image&#32;source&#32;tile&#32;using&#32;texture&#32;coordinates</emphasis>
339 
340 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>
341 {
342 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>&#32;,
343 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1f4a3c0f3cb88d33c9d0922767c381b2">STBIR_TYPE_UINT16</link>,
344 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1c8361627ec8ef323de0124334a2717d">STBIR_TYPE_UINT32</link>,
345 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>&#32;,
346 
347 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7ac6713abb1a154ac8cd5abd8e2cfc00a1">STBIR_MAX_TYPES</link>
348 }&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>;
349 
350 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1adaf20693c15168711c7f3d36052d43b6">stbir_resize</link>(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;datatype,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_vertical,
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_horizontal,&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_vertical,
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context);
357 
358 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae7b810beb03449124736d2d1057ddfe0">stbir_resize_subpixel</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;datatype,
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_vertical,
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_horizontal,&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_vertical,
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context,
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;x_scale,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y_scale,
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;x_offset,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y_offset);
367 
368 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a0ff74bf32201a24e43f8138ee735e5f4">stbir_resize_region</link>(&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;datatype,
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_vertical,
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_horizontal,&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_vertical,
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context,
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;s0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t1);
376 <emphasis role="comment">//&#32;(s0,&#32;t0)&#32;&amp;&#32;(s1,&#32;t1)&#32;are&#32;the&#32;top-left&#32;and&#32;bottom&#32;right&#32;corner&#32;(uv&#32;addressing&#32;style:&#32;[0,&#32;1]x[0,&#32;1])&#32;of&#32;a&#32;region&#32;of&#32;the&#32;input&#32;image&#32;to&#32;use.</emphasis>
377 
378 <emphasis role="comment">//</emphasis>
379 <emphasis role="comment">//</emphasis>
381 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;STBIR_INCLUDE_STB_IMAGE_RESIZE_H</emphasis>
382 
383 
384 
385 
386 
387 <emphasis role="preprocessor">#ifdef&#32;STB_IMAGE_RESIZE_IMPLEMENTATION</emphasis>
388 
389 <emphasis role="preprocessor">#ifndef&#32;STBIR_ASSERT</emphasis>
390 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>
391 <emphasis role="preprocessor">#define&#32;STBIR_ASSERT(x)&#32;assert(x)</emphasis>
392 <emphasis role="preprocessor">#endif</emphasis>
393 
394 <emphasis role="comment">//&#32;For&#32;memset</emphasis>
395 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
396 
397 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
398 
399 <emphasis role="preprocessor">#ifndef&#32;STBIR_MALLOC</emphasis>
400 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
401 <emphasis role="comment">//&#32;use&#32;comma&#32;operator&#32;to&#32;evaluate&#32;c,&#32;to&#32;avoid&#32;&quot;unused&#32;parameter&quot;&#32;warnings</emphasis>
402 <emphasis role="preprocessor">#define&#32;STBIR_MALLOC(size,c)&#32;((void)(c),&#32;malloc(size))</emphasis>
403 <emphasis role="preprocessor">#define&#32;STBIR_FREE(ptr,c)&#32;&#32;&#32;&#32;((void)(c),&#32;free(ptr))</emphasis>
404 <emphasis role="preprocessor">#endif</emphasis>
405 
406 <emphasis role="preprocessor">#ifndef&#32;_MSC_VER</emphasis>
407 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
408 <emphasis role="preprocessor">#define&#32;stbir__inline&#32;inline</emphasis>
409 <emphasis role="preprocessor">#else</emphasis>
410 <emphasis role="preprocessor">#define&#32;stbir__inline</emphasis>
411 <emphasis role="preprocessor">#endif</emphasis>
412 <emphasis role="preprocessor">#else</emphasis>
413 <emphasis role="preprocessor">#define&#32;stbir__inline&#32;__forceinline</emphasis>
414 <emphasis role="preprocessor">#endif</emphasis>
415 
416 
417 <emphasis role="comment">//&#32;should&#32;produce&#32;compiler&#32;error&#32;if&#32;size&#32;is&#32;wrong</emphasis>
418 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;stbir__validate_uint32[<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>)&#32;==&#32;4&#32;?&#32;1&#32;:&#32;-1];
419 
420 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
421 <emphasis role="preprocessor">#define&#32;STBIR__NOTUSED(v)&#32;&#32;(void)(v)</emphasis>
422 <emphasis role="preprocessor">#else</emphasis>
423 <emphasis role="preprocessor">#define&#32;STBIR__NOTUSED(v)&#32;&#32;(void)sizeof(v)</emphasis>
424 <emphasis role="preprocessor">#endif</emphasis>
425 
426 <emphasis role="preprocessor">#define&#32;STBIR__ARRAY_SIZE(a)&#32;(sizeof((a))/sizeof((a)[0]))</emphasis>
427 
428 <emphasis role="preprocessor">#ifndef&#32;STBIR_DEFAULT_FILTER_UPSAMPLE</emphasis>
429 <emphasis role="preprocessor">#define&#32;STBIR_DEFAULT_FILTER_UPSAMPLE&#32;&#32;&#32;&#32;STBIR_FILTER_CATMULLROM</emphasis>
430 <emphasis role="preprocessor">#endif</emphasis>
431 
432 <emphasis role="preprocessor">#ifndef&#32;STBIR_DEFAULT_FILTER_DOWNSAMPLE</emphasis>
433 <emphasis role="preprocessor">#define&#32;STBIR_DEFAULT_FILTER_DOWNSAMPLE&#32;&#32;STBIR_FILTER_MITCHELL</emphasis>
434 <emphasis role="preprocessor">#endif</emphasis>
435 
436 <emphasis role="preprocessor">#ifndef&#32;STBIR_PROGRESS_REPORT</emphasis>
437 <emphasis role="preprocessor">#define&#32;STBIR_PROGRESS_REPORT(float_0_to_1)</emphasis>
438 <emphasis role="preprocessor">#endif</emphasis>
439 
440 <emphasis role="preprocessor">#ifndef&#32;STBIR_MAX_CHANNELS</emphasis>
441 <emphasis role="preprocessor">#define&#32;STBIR_MAX_CHANNELS&#32;64</emphasis>
442 <emphasis role="preprocessor">#endif</emphasis>
443 
444 <emphasis role="preprocessor">#if&#32;STBIR_MAX_CHANNELS&#32;&gt;&#32;65536</emphasis>
445 <emphasis role="preprocessor">#error&#32;&quot;Too&#32;many&#32;channels;&#32;STBIR_MAX_CHANNELS&#32;must&#32;be&#32;no&#32;more&#32;than&#32;65536.&quot;</emphasis>
446 <emphasis role="comment">//&#32;because&#32;we&#32;store&#32;the&#32;indices&#32;in&#32;16-bit&#32;variables</emphasis>
447 <emphasis role="preprocessor">#endif</emphasis>
448 
449 <emphasis role="comment">//&#32;This&#32;value&#32;is&#32;added&#32;to&#32;alpha&#32;just&#32;before&#32;premultiplication&#32;to&#32;avoid</emphasis>
450 <emphasis role="comment">//&#32;zeroing&#32;out&#32;color&#32;values.&#32;It&#32;is&#32;equivalent&#32;to&#32;2^-80.&#32;If&#32;you&#32;don&apos;t&#32;want</emphasis>
451 <emphasis role="comment">//&#32;that&#32;behavior&#32;(it&#32;may&#32;interfere&#32;if&#32;you&#32;have&#32;floating&#32;point&#32;images&#32;with</emphasis>
452 <emphasis role="comment">//&#32;very&#32;small&#32;alpha&#32;values)&#32;then&#32;you&#32;can&#32;define&#32;STBIR_NO_ALPHA_EPSILON&#32;to</emphasis>
453 <emphasis role="comment">//&#32;disable&#32;it.</emphasis>
454 <emphasis role="preprocessor">#ifndef&#32;STBIR_ALPHA_EPSILON</emphasis>
455 <emphasis role="preprocessor">#define&#32;STBIR_ALPHA_EPSILON&#32;((float)1&#32;/&#32;(1&#32;&lt;&lt;&#32;20)&#32;/&#32;(1&#32;&lt;&lt;&#32;20)&#32;/&#32;(1&#32;&lt;&lt;&#32;20)&#32;/&#32;(1&#32;&lt;&lt;&#32;20))</emphasis>
456 <emphasis role="preprocessor">#endif</emphasis>
457 
458 
459 
460 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
461 <emphasis role="preprocessor">#define&#32;STBIR__UNUSED_PARAM(v)&#32;&#32;(void)(v)</emphasis>
462 <emphasis role="preprocessor">#else</emphasis>
463 <emphasis role="preprocessor">#define&#32;STBIR__UNUSED_PARAM(v)&#32;&#32;(void)sizeof(v)</emphasis>
464 <emphasis role="preprocessor">#endif</emphasis>
465 
466 <emphasis role="comment">//&#32;must&#32;match&#32;stbir_datatype</emphasis>
467 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;stbir__type_size[]&#32;=&#32;{
468 &#32;&#32;&#32;&#32;1,&#32;<emphasis role="comment">//&#32;STBIR_TYPE_UINT8</emphasis>
469 &#32;&#32;&#32;&#32;2,&#32;<emphasis role="comment">//&#32;STBIR_TYPE_UINT16</emphasis>
470 &#32;&#32;&#32;&#32;4,&#32;<emphasis role="comment">//&#32;STBIR_TYPE_UINT32</emphasis>
471 &#32;&#32;&#32;&#32;4,&#32;<emphasis role="comment">//&#32;STBIR_TYPE_FLOAT</emphasis>
472 };
473 
474 <emphasis role="comment">//&#32;Kernel&#32;function&#32;centered&#32;at&#32;0</emphasis>
475 <emphasis role="keyword">typedef</emphasis>&#32;float&#32;(stbir__kernel_fn)(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>);
476 <emphasis role="keyword">typedef</emphasis>&#32;float&#32;(stbir__support_fn)(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>);
477 
478 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
479 {
480 &#32;&#32;&#32;&#32;stbir__kernel_fn*&#32;kernel;
481 &#32;&#32;&#32;&#32;stbir__support_fn*&#32;support;
482 }&#32;stbir__filter_info;
483 
484 <emphasis role="comment">//&#32;When&#32;upsampling,&#32;the&#32;contributors&#32;are&#32;which&#32;source&#32;pixels&#32;contribute.</emphasis>
485 <emphasis role="comment">//&#32;When&#32;downsampling,&#32;the&#32;contributors&#32;are&#32;which&#32;destination&#32;pixels&#32;are&#32;contributed&#32;to.</emphasis>
486 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
487 {
488 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0;&#32;<emphasis role="comment">//&#32;First&#32;contributing&#32;pixel</emphasis>
489 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n1;&#32;<emphasis role="comment">//&#32;Last&#32;contributing&#32;pixel</emphasis>
490 }&#32;stbir__contributors;
491 
492 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
493 {
494 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;input_data;
495 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w;
496 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h;
497 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_bytes;
498 
499 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;output_data;
500 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w;
501 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h;
502 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_bytes;
503 
504 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;s0,&#32;t0,&#32;s1,&#32;t1;
505 
506 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;horizontal_shift;&#32;<emphasis role="comment">//&#32;Units:&#32;output&#32;pixels</emphasis>
507 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;vertical_shift;&#32;&#32;&#32;<emphasis role="comment">//&#32;Units:&#32;output&#32;pixels</emphasis>
508 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;horizontal_scale;
509 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;vertical_scale;
510 
511 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels;
512 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel;
513 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>;
514 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;
515 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;horizontal_filter;
516 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;vertical_filter;
517 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_horizontal;
518 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_vertical;
519 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;colorspace;
520 
521 &#32;&#32;&#32;&#32;stbir__contributors*&#32;horizontal_contributors;
522 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;horizontal_coefficients;
523 
524 &#32;&#32;&#32;&#32;stbir__contributors*&#32;vertical_contributors;
525 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;vertical_coefficients;
526 
527 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_buffer_pixels;
528 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;decode_buffer;
529 
530 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;horizontal_buffer;
531 
532 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cache&#32;these&#32;because&#32;ceil/floor&#32;are&#32;inexplicably&#32;showing&#32;up&#32;in&#32;profile</emphasis>
533 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;horizontal_coefficient_width;
534 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertical_coefficient_width;
535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;horizontal_filter_pixel_width;
536 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertical_filter_pixel_width;
537 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;horizontal_filter_pixel_margin;
538 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertical_filter_pixel_margin;
539 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;horizontal_num_contributors;
540 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertical_num_contributors;
541 
542 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_length_bytes;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;length&#32;of&#32;an&#32;individual&#32;entry&#32;in&#32;the&#32;ring&#32;buffer.&#32;The&#32;total&#32;number&#32;of&#32;ring&#32;buffers&#32;is&#32;stbir__get_filter_pixel_width(filter)</emphasis>
543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_num_entries;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Total&#32;number&#32;of&#32;entries&#32;in&#32;the&#32;ring&#32;buffer.</emphasis>
544 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_first_scanline;
545 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_last_scanline;
546 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_begin_index;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first_scanline&#32;is&#32;at&#32;this&#32;index&#32;in&#32;the&#32;ring&#32;buffer</emphasis>
547 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer;
548 
549 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;encode_buffer;&#32;<emphasis role="comment">//&#32;A&#32;temporary&#32;buffer&#32;to&#32;store&#32;floats&#32;so&#32;we&#32;don&apos;t&#32;lose&#32;precision&#32;while&#32;we&#32;do&#32;multiply-adds.</emphasis>
550 
551 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;horizontal_contributors_size;
552 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;horizontal_coefficients_size;
553 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertical_contributors_size;
554 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertical_coefficients_size;
555 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_buffer_size;
556 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;horizontal_buffer_size;
557 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_size;
558 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;encode_buffer_size;
559 }&#32;stbir__info;
560 
561 
562 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__max_uint8_as_float&#32;&#32;=&#32;255.0f;
563 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__max_uint16_as_float&#32;=&#32;65535.0f;
564 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;stbir__max_uint32_as_float&#32;=&#32;4294967295.0;
565 
566 
567 <emphasis role="keyword">static</emphasis>&#32;stbir__inline&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__min(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
568 {
569 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;?&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;
570 }
571 
572 <emphasis role="keyword">static</emphasis>&#32;stbir__inline&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__saturate(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
573 {
574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;0)
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
576 
577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;&#32;1)
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
579 
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
581 }
582 
583 <emphasis role="preprocessor">#ifdef&#32;STBIR_SATURATE_INT</emphasis>
584 <emphasis role="keyword">static</emphasis>&#32;stbir__inline&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a5f0301f0ca83988d42c35685bc8594eb">stbir_uint8</link>&#32;stbir__saturate8(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
585 {
586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;=&#32;255)
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
588 
589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;0)
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
591 
592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;255;
593 }
594 
595 <emphasis role="keyword">static</emphasis>&#32;stbir__inline&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>&#32;stbir__saturate16(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
596 {
597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;=&#32;65535)
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
599 
600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;0)
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
602 
603 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;65535;
604 }
605 <emphasis role="preprocessor">#endif</emphasis>
606 
607 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__srgb_uchar_to_linear_float[256]&#32;=&#32;{
608 &#32;&#32;&#32;&#32;0.000000f,&#32;0.000304f,&#32;0.000607f,&#32;0.000911f,&#32;0.001214f,&#32;0.001518f,&#32;0.001821f,&#32;0.002125f,&#32;0.002428f,&#32;0.002732f,&#32;0.003035f,
609 &#32;&#32;&#32;&#32;0.003347f,&#32;0.003677f,&#32;0.004025f,&#32;0.004391f,&#32;0.004777f,&#32;0.005182f,&#32;0.005605f,&#32;0.006049f,&#32;0.006512f,&#32;0.006995f,&#32;0.007499f,
610 &#32;&#32;&#32;&#32;0.008023f,&#32;0.008568f,&#32;0.009134f,&#32;0.009721f,&#32;0.010330f,&#32;0.010960f,&#32;0.011612f,&#32;0.012286f,&#32;0.012983f,&#32;0.013702f,&#32;0.014444f,
611 &#32;&#32;&#32;&#32;0.015209f,&#32;0.015996f,&#32;0.016807f,&#32;0.017642f,&#32;0.018500f,&#32;0.019382f,&#32;0.020289f,&#32;0.021219f,&#32;0.022174f,&#32;0.023153f,&#32;0.024158f,
612 &#32;&#32;&#32;&#32;0.025187f,&#32;0.026241f,&#32;0.027321f,&#32;0.028426f,&#32;0.029557f,&#32;0.030713f,&#32;0.031896f,&#32;0.033105f,&#32;0.034340f,&#32;0.035601f,&#32;0.036889f,
613 &#32;&#32;&#32;&#32;0.038204f,&#32;0.039546f,&#32;0.040915f,&#32;0.042311f,&#32;0.043735f,&#32;0.045186f,&#32;0.046665f,&#32;0.048172f,&#32;0.049707f,&#32;0.051269f,&#32;0.052861f,
614 &#32;&#32;&#32;&#32;0.054480f,&#32;0.056128f,&#32;0.057805f,&#32;0.059511f,&#32;0.061246f,&#32;0.063010f,&#32;0.064803f,&#32;0.066626f,&#32;0.068478f,&#32;0.070360f,&#32;0.072272f,
615 &#32;&#32;&#32;&#32;0.074214f,&#32;0.076185f,&#32;0.078187f,&#32;0.080220f,&#32;0.082283f,&#32;0.084376f,&#32;0.086500f,&#32;0.088656f,&#32;0.090842f,&#32;0.093059f,&#32;0.095307f,
616 &#32;&#32;&#32;&#32;0.097587f,&#32;0.099899f,&#32;0.102242f,&#32;0.104616f,&#32;0.107023f,&#32;0.109462f,&#32;0.111932f,&#32;0.114435f,&#32;0.116971f,&#32;0.119538f,&#32;0.122139f,
617 &#32;&#32;&#32;&#32;0.124772f,&#32;0.127438f,&#32;0.130136f,&#32;0.132868f,&#32;0.135633f,&#32;0.138432f,&#32;0.141263f,&#32;0.144128f,&#32;0.147027f,&#32;0.149960f,&#32;0.152926f,
618 &#32;&#32;&#32;&#32;0.155926f,&#32;0.158961f,&#32;0.162029f,&#32;0.165132f,&#32;0.168269f,&#32;0.171441f,&#32;0.174647f,&#32;0.177888f,&#32;0.181164f,&#32;0.184475f,&#32;0.187821f,
619 &#32;&#32;&#32;&#32;0.191202f,&#32;0.194618f,&#32;0.198069f,&#32;0.201556f,&#32;0.205079f,&#32;0.208637f,&#32;0.212231f,&#32;0.215861f,&#32;0.219526f,&#32;0.223228f,&#32;0.226966f,
620 &#32;&#32;&#32;&#32;0.230740f,&#32;0.234551f,&#32;0.238398f,&#32;0.242281f,&#32;0.246201f,&#32;0.250158f,&#32;0.254152f,&#32;0.258183f,&#32;0.262251f,&#32;0.266356f,&#32;0.270498f,
621 &#32;&#32;&#32;&#32;0.274677f,&#32;0.278894f,&#32;0.283149f,&#32;0.287441f,&#32;0.291771f,&#32;0.296138f,&#32;0.300544f,&#32;0.304987f,&#32;0.309469f,&#32;0.313989f,&#32;0.318547f,
622 &#32;&#32;&#32;&#32;0.323143f,&#32;0.327778f,&#32;0.332452f,&#32;0.337164f,&#32;0.341914f,&#32;0.346704f,&#32;0.351533f,&#32;0.356400f,&#32;0.361307f,&#32;0.366253f,&#32;0.371238f,
623 &#32;&#32;&#32;&#32;0.376262f,&#32;0.381326f,&#32;0.386430f,&#32;0.391573f,&#32;0.396755f,&#32;0.401978f,&#32;0.407240f,&#32;0.412543f,&#32;0.417885f,&#32;0.423268f,&#32;0.428691f,
624 &#32;&#32;&#32;&#32;0.434154f,&#32;0.439657f,&#32;0.445201f,&#32;0.450786f,&#32;0.456411f,&#32;0.462077f,&#32;0.467784f,&#32;0.473532f,&#32;0.479320f,&#32;0.485150f,&#32;0.491021f,
625 &#32;&#32;&#32;&#32;0.496933f,&#32;0.502887f,&#32;0.508881f,&#32;0.514918f,&#32;0.520996f,&#32;0.527115f,&#32;0.533276f,&#32;0.539480f,&#32;0.545725f,&#32;0.552011f,&#32;0.558340f,
626 &#32;&#32;&#32;&#32;0.564712f,&#32;0.571125f,&#32;0.577581f,&#32;0.584078f,&#32;0.590619f,&#32;0.597202f,&#32;0.603827f,&#32;0.610496f,&#32;0.617207f,&#32;0.623960f,&#32;0.630757f,
627 &#32;&#32;&#32;&#32;0.637597f,&#32;0.644480f,&#32;0.651406f,&#32;0.658375f,&#32;0.665387f,&#32;0.672443f,&#32;0.679543f,&#32;0.686685f,&#32;0.693872f,&#32;0.701102f,&#32;0.708376f,
628 &#32;&#32;&#32;&#32;0.715694f,&#32;0.723055f,&#32;0.730461f,&#32;0.737911f,&#32;0.745404f,&#32;0.752942f,&#32;0.760525f,&#32;0.768151f,&#32;0.775822f,&#32;0.783538f,&#32;0.791298f,
629 &#32;&#32;&#32;&#32;0.799103f,&#32;0.806952f,&#32;0.814847f,&#32;0.822786f,&#32;0.830770f,&#32;0.838799f,&#32;0.846873f,&#32;0.854993f,&#32;0.863157f,&#32;0.871367f,&#32;0.879622f,
630 &#32;&#32;&#32;&#32;0.887923f,&#32;0.896269f,&#32;0.904661f,&#32;0.913099f,&#32;0.921582f,&#32;0.930111f,&#32;0.938686f,&#32;0.947307f,&#32;0.955974f,&#32;0.964686f,&#32;0.973445f,
631 &#32;&#32;&#32;&#32;0.982251f,&#32;0.991102f,&#32;1.0f
632 };
633 
634 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__srgb_to_linear(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>)
635 {
636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;&lt;=&#32;0.04045f)
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;/&#32;12.92f;
638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>)<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>((<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;+&#32;0.055f)&#32;/&#32;1.055f,&#32;2.4f);
640 }
641 
642 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__linear_to_srgb(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>)
643 {
644 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;&lt;=&#32;0.0031308f)
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;*&#32;12.92f;
646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1.055f&#32;*&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>,&#32;1&#32;/&#32;2.4f)&#32;-&#32;0.055f;
648 }
649 
650 <emphasis role="preprocessor">#ifndef&#32;STBIR_NON_IEEE_FLOAT</emphasis>
651 <emphasis role="comment">//&#32;From&#32;https://gist.github.com/rygorous/2203834</emphasis>
652 
653 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">union</emphasis>
654 {
655 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;
656 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>;
657 }&#32;stbir__FP32;
658 
659 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>&#32;fp32_to_srgb8_tab4[104]&#32;=&#32;{
660 &#32;&#32;&#32;&#32;0x0073000d,&#32;0x007a000d,&#32;0x0080000d,&#32;0x0087000d,&#32;0x008d000d,&#32;0x0094000d,&#32;0x009a000d,&#32;0x00a1000d,
661 &#32;&#32;&#32;&#32;0x00a7001a,&#32;0x00b4001a,&#32;0x00c1001a,&#32;0x00ce001a,&#32;0x00da001a,&#32;0x00e7001a,&#32;0x00f4001a,&#32;0x0101001a,
662 &#32;&#32;&#32;&#32;0x010e0033,&#32;0x01280033,&#32;0x01410033,&#32;0x015b0033,&#32;0x01750033,&#32;0x018f0033,&#32;0x01a80033,&#32;0x01c20033,
663 &#32;&#32;&#32;&#32;0x01dc0067,&#32;0x020f0067,&#32;0x02430067,&#32;0x02760067,&#32;0x02aa0067,&#32;0x02dd0067,&#32;0x03110067,&#32;0x03440067,
664 &#32;&#32;&#32;&#32;0x037800ce,&#32;0x03df00ce,&#32;0x044600ce,&#32;0x04ad00ce,&#32;0x051400ce,&#32;0x057b00c5,&#32;0x05dd00bc,&#32;0x063b00b5,
665 &#32;&#32;&#32;&#32;0x06970158,&#32;0x07420142,&#32;0x07e30130,&#32;0x087b0120,&#32;0x090b0112,&#32;0x09940106,&#32;0x0a1700fc,&#32;0x0a9500f2,
666 &#32;&#32;&#32;&#32;0x0b0f01cb,&#32;0x0bf401ae,&#32;0x0ccb0195,&#32;0x0d950180,&#32;0x0e56016e,&#32;0x0f0d015e,&#32;0x0fbc0150,&#32;0x10630143,
667 &#32;&#32;&#32;&#32;0x11070264,&#32;0x1238023e,&#32;0x1357021d,&#32;0x14660201,&#32;0x156601e9,&#32;0x165a01d3,&#32;0x174401c0,&#32;0x182401af,
668 &#32;&#32;&#32;&#32;0x18fe0331,&#32;0x1a9602fe,&#32;0x1c1502d2,&#32;0x1d7e02ad,&#32;0x1ed4028d,&#32;0x201a0270,&#32;0x21520256,&#32;0x227d0240,
669 &#32;&#32;&#32;&#32;0x239f0443,&#32;0x25c003fe,&#32;0x27bf03c4,&#32;0x29a10392,&#32;0x2b6a0367,&#32;0x2d1d0341,&#32;0x2ebe031f,&#32;0x304d0300,
670 &#32;&#32;&#32;&#32;0x31d105b0,&#32;0x34a80555,&#32;0x37520507,&#32;0x39d504c5,&#32;0x3c37048b,&#32;0x3e7c0458,&#32;0x40a8042a,&#32;0x42bd0401,
671 &#32;&#32;&#32;&#32;0x44c20798,&#32;0x488e071e,&#32;0x4c1c06b6,&#32;0x4f76065d,&#32;0x52a50610,&#32;0x55ac05cc,&#32;0x5892058f,&#32;0x5b590559,
672 &#32;&#32;&#32;&#32;0x5e0c0a23,&#32;0x631c0980,&#32;0x67db08f6,&#32;0x6c55087f,&#32;0x70940818,&#32;0x74a007bd,&#32;0x787d076c,&#32;0x7c330723,
673 };
674 
675 <emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a5f0301f0ca83988d42c35685bc8594eb">stbir_uint8</link>&#32;stbir__linear_to_srgb_uchar(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>)
676 {
677 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;stbir__FP32&#32;almostone&#32;=&#32;{&#32;0x3f7fffff&#32;};&#32;<emphasis role="comment">//&#32;1-eps</emphasis>
678 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;stbir__FP32&#32;minval&#32;=&#32;{&#32;(127-13)&#32;&lt;&lt;&#32;23&#32;};
679 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>&#32;tab,bias,<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>,t;
680 &#32;&#32;&#32;&#32;stbir__FP32&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>;
681 
682 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clamp&#32;to&#32;[2^(-13),&#32;1-eps];&#32;these&#32;two&#32;values&#32;map&#32;to&#32;0&#32;and&#32;1,&#32;respectively.</emphasis>
683 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;tests&#32;are&#32;carefully&#32;written&#32;so&#32;that&#32;NaNs&#32;map&#32;to&#32;0,&#32;same&#32;as&#32;in&#32;the&#32;reference</emphasis>
684 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementation.</emphasis>
685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;&gt;&#32;minval.f))&#32;<emphasis role="comment">//&#32;written&#32;this&#32;way&#32;to&#32;catch&#32;NaNs</emphasis>
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;=&#32;minval.f;
687 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;&gt;&#32;almostone.f)
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;=&#32;almostone.f;
689 
690 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;the&#32;table&#32;lookup&#32;and&#32;unpack&#32;bias,&#32;scale</emphasis>
691 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.f&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
692 &#32;&#32;&#32;&#32;tab&#32;=&#32;fp32_to_srgb8_tab4[(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.u&#32;-&#32;minval.u)&#32;&gt;&gt;&#32;20];
693 &#32;&#32;&#32;&#32;bias&#32;=&#32;(tab&#32;&gt;&gt;&#32;16)&#32;&lt;&lt;&#32;9;
694 &#32;&#32;&#32;&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>&#32;=&#32;tab&#32;&amp;&#32;0xffff;
695 
696 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Grab&#32;next-highest&#32;mantissa&#32;bits&#32;and&#32;perform&#32;linear&#32;interpolation</emphasis>
697 &#32;&#32;&#32;&#32;t&#32;=&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.u&#32;&gt;&gt;&#32;12)&#32;&amp;&#32;0xff;
698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)&#32;((bias&#32;+&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>*t)&#32;&gt;&gt;&#32;16);
699 }
700 
701 <emphasis role="preprocessor">#else</emphasis>
702 <emphasis role="comment">//&#32;sRGB&#32;transition&#32;values,&#32;scaled&#32;by&#32;1&lt;&lt;28</emphasis>
703 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__srgb_offset_to_linear_scaled[256]&#32;=
704 {
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;&#32;&#32;&#32;40738,&#32;&#32;&#32;&#32;122216,&#32;&#32;&#32;&#32;203693,&#32;&#32;&#32;&#32;285170,&#32;&#32;&#32;&#32;366648,&#32;&#32;&#32;&#32;448125,&#32;&#32;&#32;&#32;529603,
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;611080,&#32;&#32;&#32;&#32;692557,&#32;&#32;&#32;&#32;774035,&#32;&#32;&#32;&#32;855852,&#32;&#32;&#32;&#32;942009,&#32;&#32;&#32;1033024,&#32;&#32;&#32;1128971,&#32;&#32;&#32;1229926,
707 &#32;&#32;&#32;&#32;&#32;&#32;1335959,&#32;&#32;&#32;1447142,&#32;&#32;&#32;1563542,&#32;&#32;&#32;1685229,&#32;&#32;&#32;1812268,&#32;&#32;&#32;1944725,&#32;&#32;&#32;2082664,&#32;&#32;&#32;2226148,
708 &#32;&#32;&#32;&#32;&#32;&#32;2375238,&#32;&#32;&#32;2529996,&#32;&#32;&#32;2690481,&#32;&#32;&#32;2856753,&#32;&#32;&#32;3028870,&#32;&#32;&#32;3206888,&#32;&#32;&#32;3390865,&#32;&#32;&#32;3580856,
709 &#32;&#32;&#32;&#32;&#32;&#32;3776916,&#32;&#32;&#32;3979100,&#32;&#32;&#32;4187460,&#32;&#32;&#32;4402049,&#32;&#32;&#32;4622919,&#32;&#32;&#32;4850123,&#32;&#32;&#32;5083710,&#32;&#32;&#32;5323731,
710 &#32;&#32;&#32;&#32;&#32;&#32;5570236,&#32;&#32;&#32;5823273,&#32;&#32;&#32;6082892,&#32;&#32;&#32;6349140,&#32;&#32;&#32;6622065,&#32;&#32;&#32;6901714,&#32;&#32;&#32;7188133,&#32;&#32;&#32;7481369,
711 &#32;&#32;&#32;&#32;&#32;&#32;7781466,&#32;&#32;&#32;8088471,&#32;&#32;&#32;8402427,&#32;&#32;&#32;8723380,&#32;&#32;&#32;9051372,&#32;&#32;&#32;9386448,&#32;&#32;&#32;9728650,&#32;&#32;10078021,
712 &#32;&#32;&#32;&#32;&#32;10434603,&#32;&#32;10798439,&#32;&#32;11169569,&#32;&#32;11548036,&#32;&#32;11933879,&#32;&#32;12327139,&#32;&#32;12727857,&#32;&#32;13136073,
713 &#32;&#32;&#32;&#32;&#32;13551826,&#32;&#32;13975156,&#32;&#32;14406100,&#32;&#32;14844697,&#32;&#32;15290987,&#32;&#32;15745007,&#32;&#32;16206795,&#32;&#32;16676389,
714 &#32;&#32;&#32;&#32;&#32;17153826,&#32;&#32;17639142,&#32;&#32;18132374,&#32;&#32;18633560,&#32;&#32;19142734,&#32;&#32;19659934,&#32;&#32;20185196,&#32;&#32;20718552,
715 &#32;&#32;&#32;&#32;&#32;21260042,&#32;&#32;21809696,&#32;&#32;22367554,&#32;&#32;22933648,&#32;&#32;23508010,&#32;&#32;24090680,&#32;&#32;24681686,&#32;&#32;25281066,
716 &#32;&#32;&#32;&#32;&#32;25888850,&#32;&#32;26505076,&#32;&#32;27129772,&#32;&#32;27762974,&#32;&#32;28404716,&#32;&#32;29055026,&#32;&#32;29713942,&#32;&#32;30381490,
717 &#32;&#32;&#32;&#32;&#32;31057708,&#32;&#32;31742624,&#32;&#32;32436272,&#32;&#32;33138682,&#32;&#32;33849884,&#32;&#32;34569912,&#32;&#32;35298800,&#32;&#32;36036568,
718 &#32;&#32;&#32;&#32;&#32;36783260,&#32;&#32;37538896,&#32;&#32;38303512,&#32;&#32;39077136,&#32;&#32;39859796,&#32;&#32;40651528,&#32;&#32;41452360,&#32;&#32;42262316,
719 &#32;&#32;&#32;&#32;&#32;43081432,&#32;&#32;43909732,&#32;&#32;44747252,&#32;&#32;45594016,&#32;&#32;46450052,&#32;&#32;47315392,&#32;&#32;48190064,&#32;&#32;49074096,
720 &#32;&#32;&#32;&#32;&#32;49967516,&#32;&#32;50870356,&#32;&#32;51782636,&#32;&#32;52704392,&#32;&#32;53635648,&#32;&#32;54576432,&#32;&#32;55526772,&#32;&#32;56486700,
721 &#32;&#32;&#32;&#32;&#32;57456236,&#32;&#32;58435408,&#32;&#32;59424248,&#32;&#32;60422780,&#32;&#32;61431036,&#32;&#32;62449032,&#32;&#32;63476804,&#32;&#32;64514376,
722 &#32;&#32;&#32;&#32;&#32;65561776,&#32;&#32;66619028,&#32;&#32;67686160,&#32;&#32;68763192,&#32;&#32;69850160,&#32;&#32;70947088,&#32;&#32;72053992,&#32;&#32;73170912,
723 &#32;&#32;&#32;&#32;&#32;74297864,&#32;&#32;75434880,&#32;&#32;76581976,&#32;&#32;77739184,&#32;&#32;78906536,&#32;&#32;80084040,&#32;&#32;81271736,&#32;&#32;82469648,
724 &#32;&#32;&#32;&#32;&#32;83677792,&#32;&#32;84896192,&#32;&#32;86124888,&#32;&#32;87363888,&#32;&#32;88613232,&#32;&#32;89872928,&#32;&#32;91143016,&#32;&#32;92423512,
725 &#32;&#32;&#32;&#32;&#32;93714432,&#32;&#32;95015816,&#32;&#32;96327688,&#32;&#32;97650056,&#32;&#32;98982952,&#32;100326408,&#32;101680440,&#32;103045072,
726 &#32;&#32;&#32;&#32;104420320,&#32;105806224,&#32;107202800,&#32;108610064,&#32;110028048,&#32;111456776,&#32;112896264,&#32;114346544,
727 &#32;&#32;&#32;&#32;115807632,&#32;117279552,&#32;118762328,&#32;120255976,&#32;121760536,&#32;123276016,&#32;124802440,&#32;126339832,
728 &#32;&#32;&#32;&#32;127888216,&#32;129447616,&#32;131018048,&#32;132599544,&#32;134192112,&#32;135795792,&#32;137410592,&#32;139036528,
729 &#32;&#32;&#32;&#32;140673648,&#32;142321952,&#32;143981456,&#32;145652208,&#32;147334208,&#32;149027488,&#32;150732064,&#32;152447968,
730 &#32;&#32;&#32;&#32;154175200,&#32;155913792,&#32;157663776,&#32;159425168,&#32;161197984,&#32;162982240,&#32;164777968,&#32;166585184,
731 &#32;&#32;&#32;&#32;168403904,&#32;170234160,&#32;172075968,&#32;173929344,&#32;175794320,&#32;177670896,&#32;179559120,&#32;181458992,
732 &#32;&#32;&#32;&#32;183370528,&#32;185293776,&#32;187228736,&#32;189175424,&#32;191133888,&#32;193104112,&#32;195086128,&#32;197079968,
733 &#32;&#32;&#32;&#32;199085648,&#32;201103184,&#32;203132592,&#32;205173888,&#32;207227120,&#32;209292272,&#32;211369392,&#32;213458480,
734 &#32;&#32;&#32;&#32;215559568,&#32;217672656,&#32;219797792,&#32;221934976,&#32;224084240,&#32;226245600,&#32;228419056,&#32;230604656,
735 &#32;&#32;&#32;&#32;232802400,&#32;235012320,&#32;237234432,&#32;239468736,&#32;241715280,&#32;243974080,&#32;246245120,&#32;248528464,
736 &#32;&#32;&#32;&#32;250824112,&#32;253132064,&#32;255452368,&#32;257785040,&#32;260130080,&#32;262487520,&#32;264857376,&#32;267239664,
737 };
738 
739 <emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a5f0301f0ca83988d42c35685bc8594eb">stbir_uint8</link>&#32;stbir__linear_to_srgb_uchar(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>)
740 {
741 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;(int)&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;*&#32;(1&#32;&lt;&lt;&#32;28));&#32;<emphasis role="comment">//&#32;has&#32;headroom&#32;so&#32;you&#32;don&apos;t&#32;need&#32;to&#32;clamp</emphasis>
742 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;0;
743 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
744 
745 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Refine&#32;the&#32;guess&#32;with&#32;a&#32;short&#32;binary&#32;search.</emphasis>
746 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;128;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
747 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;&#32;64;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
748 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;&#32;32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
749 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;&#32;16;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
750 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;&#32;&#32;8;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
751 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;&#32;&#32;4;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
752 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;&#32;&#32;2;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
753 &#32;&#32;&#32;&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;+&#32;&#32;&#32;1;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;stbir__srgb_offset_to_linear_scaled[i])&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;i;
754 
755 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a5f0301f0ca83988d42c35685bc8594eb">stbir_uint8</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>;
756 }
757 <emphasis role="preprocessor">#endif</emphasis>
758 
759 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__filter_trapezoid(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale)
760 {
761 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;halfscale&#32;=&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>&#32;/&#32;2;
762 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;0.5f&#32;+&#32;halfscale;
763 &#32;&#32;&#32;&#32;STBIR_ASSERT(scale&#32;&lt;=&#32;1);
764 
765 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
766 
767 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;t)
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
770 &#32;&#32;&#32;&#32;{
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>&#32;=&#32;0.5f&#32;-&#32;halfscale;
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>)
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(t&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;/&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>;
776 &#32;&#32;&#32;&#32;}
777 }
778 
779 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__support_trapezoid(<emphasis role="keywordtype">float</emphasis>&#32;scale)
780 {
781 &#32;&#32;&#32;&#32;STBIR_ASSERT(scale&#32;&lt;=&#32;1);
782 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0.5f&#32;+&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>&#32;/&#32;2;
783 }
784 
785 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__filter_triangle(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s)
786 {
787 &#32;&#32;&#32;&#32;STBIR__UNUSED_PARAM(s);
788 
789 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
790 
791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;=&#32;1.0f)
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
795 }
796 
797 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__filter_cubic(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s)
798 {
799 &#32;&#32;&#32;&#32;STBIR__UNUSED_PARAM(s);
800 
801 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
802 
803 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;1.0f)
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(4&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(3*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;6))/6;
805 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;2.0f)
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(8&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(-12&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(6&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)))/6;
807 
808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.0f);
809 }
810 
811 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__filter_catmullrom(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s)
812 {
813 &#32;&#32;&#32;&#32;STBIR__UNUSED_PARAM(s);
814 
815 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
816 
817 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;1.0f)
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(2.5f&#32;-&#32;1.5f*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;2.0f)
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(4&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(0.5f*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;2.5f));
821 
822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.0f);
823 }
824 
825 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__filter_mitchell(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s)
826 {
827 &#32;&#32;&#32;&#32;STBIR__UNUSED_PARAM(s);
828 
829 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
830 
831 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;1.0f)
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(16&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(21&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;36))/18;
833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;2.0f)
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(32&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(-60&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*(36&#32;-&#32;7*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)))/18;
835 
836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0.0f);
837 }
838 
839 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__support_zero(<emphasis role="keywordtype">float</emphasis>&#32;s)
840 {
841 &#32;&#32;&#32;&#32;STBIR__UNUSED_PARAM(s);
842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
843 }
844 
845 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__support_one(<emphasis role="keywordtype">float</emphasis>&#32;s)
846 {
847 &#32;&#32;&#32;&#32;STBIR__UNUSED_PARAM(s);
848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
849 }
850 
851 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;stbir__support_two(<emphasis role="keywordtype">float</emphasis>&#32;s)
852 {
853 &#32;&#32;&#32;&#32;STBIR__UNUSED_PARAM(s);
854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
855 }
856 
857 <emphasis role="keyword">static</emphasis>&#32;stbir__filter_info&#32;stbir__filter_info_table[]&#32;=&#32;{
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__support_zero&#32;},
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;stbir__filter_trapezoid,&#32;&#32;stbir__support_trapezoid&#32;},
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;stbir__filter_triangle,&#32;&#32;&#32;stbir__support_one&#32;},
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;stbir__filter_cubic,&#32;&#32;&#32;&#32;&#32;&#32;stbir__support_two&#32;},
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;stbir__filter_catmullrom,&#32;stbir__support_two&#32;},
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;stbir__filter_mitchell,&#32;&#32;&#32;stbir__support_two&#32;},
864 };
865 
866 stbir__inline&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__use_upsampling(<emphasis role="keywordtype">float</emphasis>&#32;ratio)
867 {
868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ratio&#32;&gt;&#32;1;
869 }
870 
871 stbir__inline&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__use_width_upsampling(stbir__info*&#32;stbir_info)
872 {
873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__use_upsampling(stbir_info-&gt;horizontal_scale);
874 }
875 
876 stbir__inline&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__use_height_upsampling(stbir__info*&#32;stbir_info)
877 {
878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__use_upsampling(stbir_info-&gt;vertical_scale);
879 }
880 
881 <emphasis role="comment">//&#32;This&#32;is&#32;the&#32;maximum&#32;number&#32;of&#32;input&#32;samples&#32;that&#32;can&#32;affect&#32;an&#32;output&#32;sample</emphasis>
882 <emphasis role="comment">//&#32;with&#32;the&#32;given&#32;filter</emphasis>
883 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__get_filter_pixel_width(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale)
884 {
885 &#32;&#32;&#32;&#32;STBIR_ASSERT(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>&#32;!=&#32;0);
886 &#32;&#32;&#32;&#32;STBIR_ASSERT(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>&#32;&lt;&#32;STBIR__ARRAY_SIZE(stbir__filter_info_table));
887 
888 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_upsampling(scale))
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(1/scale)&#32;*&#32;2);
890 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(scale)&#32;*&#32;2&#32;/&#32;scale);
892 }
893 
894 <emphasis role="comment">//&#32;This&#32;is&#32;how&#32;much&#32;to&#32;expand&#32;buffers&#32;to&#32;account&#32;for&#32;filters&#32;seeking&#32;outside</emphasis>
895 <emphasis role="comment">//&#32;the&#32;image&#32;boundaries.</emphasis>
896 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__get_filter_pixel_margin(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale)
897 {
898 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__get_filter_pixel_width(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale)&#32;/&#32;2;
899 }
900 
901 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__get_coefficient_width(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale)
902 {
903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_upsampling(scale))
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(1&#32;/&#32;scale)&#32;*&#32;2);
905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(scale)&#32;*&#32;2);
907 }
908 
909 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__get_contributors(<emphasis role="keywordtype">float</emphasis>&#32;scale,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_size)
910 {
911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_upsampling(scale))
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;output_size;
913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(input_size&#32;+&#32;stbir__get_filter_pixel_margin(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale)&#32;*&#32;2);
915 }
916 
917 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__get_total_horizontal_coefficients(stbir__info*&#32;info)
918 {
919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;info-&gt;horizontal_num_contributors
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;stbir__get_coefficient_width&#32;&#32;&#32;&#32;&#32;&#32;(info-&gt;horizontal_filter,&#32;info-&gt;horizontal_scale);
921 }
922 
923 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__get_total_vertical_coefficients(stbir__info*&#32;info)
924 {
925 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;info-&gt;vertical_num_contributors
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;stbir__get_coefficient_width&#32;&#32;&#32;&#32;&#32;&#32;(info-&gt;vertical_filter,&#32;info-&gt;vertical_scale);
927 }
928 
929 <emphasis role="keyword">static</emphasis>&#32;stbir__contributors*&#32;stbir__get_contributor(stbir__contributors*&#32;contributors,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)
930 {
931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;contributors[n];
932 }
933 
934 <emphasis role="comment">//&#32;For&#32;perf&#32;reasons&#32;this&#32;code&#32;is&#32;duplicated&#32;in&#32;stbir__resample_horizontal_upsample/downsample,</emphasis>
935 <emphasis role="comment">//&#32;if&#32;you&#32;change&#32;it&#32;here&#32;change&#32;it&#32;there&#32;too.</emphasis>
936 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*&#32;stbir__get_coefficient(<emphasis role="keywordtype">float</emphasis>*&#32;coefficients,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;c)
937 {
938 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width</link>&#32;=&#32;stbir__get_coefficient_width(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale);
939 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;coefficients[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width</link>*n&#32;+&#32;c];
940 }
941 
942 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__edge_wrap_slow(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;max)
943 {
944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(edge)
945 &#32;&#32;&#32;&#32;{
946 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea279078b3b5a12337c8905de9bff55769">STBIR_EDGE_ZERO</link>:
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;<emphasis role="comment">//&#32;we&apos;ll&#32;decode&#32;the&#32;wrong&#32;pixel&#32;here,&#32;and&#32;then&#32;overwrite&#32;with&#32;0s&#32;later</emphasis>
948 
949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>:
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;0)
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
952 
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;max)
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>&#32;-&#32;1;
955 
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;&#32;<emphasis role="comment">//&#32;NOTREACHED</emphasis>
957 
958 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9eab85276f10d1cafae1c33a76f0fb39d2f">STBIR_EDGE_REFLECT</link>:
959 &#32;&#32;&#32;&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;0)
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&lt;&#32;max)
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-n;
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>&#32;-&#32;1;
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
967 
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;max)
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max2&#32;=&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>&#32;*&#32;2;
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;max2)
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;max2&#32;-&#32;n&#32;-&#32;1;
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
976 
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;&#32;<emphasis role="comment">//&#32;NOTREACHED</emphasis>
978 &#32;&#32;&#32;&#32;}
979 
980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea1d5fe813103be8c12ee3498d15bbe7c3">STBIR_EDGE_WRAP</link>:
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;0)
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(n&#32;%&#32;max);
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m&#32;=&#32;(-n)&#32;%&#32;max;
986 
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;!=&#32;0)
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m&#32;=&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>&#32;-&#32;m;
989 
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(m);
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTREACHED</emphasis>
993 
994 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(!<emphasis role="stringliteral">&quot;Unimplemented&#32;edge&#32;type&quot;</emphasis>);
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
997 &#32;&#32;&#32;&#32;}
998 }
999 
1000 stbir__inline&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__edge_wrap(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;max)
1001 {
1002 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;avoid&#32;per-pixel&#32;switch</emphasis>
1003 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;n&#32;&lt;&#32;max)
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
1005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__edge_wrap_slow(edge,&#32;n,&#32;max);
1006 }
1007 
1008 <emphasis role="comment">//&#32;What&#32;input&#32;pixels&#32;contribute&#32;to&#32;this&#32;output&#32;pixel?</emphasis>
1009 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__calculate_sample_range_upsample(<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_filter_radius,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale_ratio,&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_shift,&#32;<emphasis role="keywordtype">int</emphasis>*&#32;in_first_pixel,&#32;<emphasis role="keywordtype">int</emphasis>*&#32;in_last_pixel,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;in_center_of_out)
1010 {
1011 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_pixel_center&#32;=&#32;(float)n&#32;+&#32;0.5f;
1012 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_pixel_influence_lowerbound&#32;=&#32;out_pixel_center&#32;-&#32;out_filter_radius;
1013 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_pixel_influence_upperbound&#32;=&#32;out_pixel_center&#32;+&#32;out_filter_radius;
1014 
1015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixel_influence_lowerbound&#32;=&#32;(out_pixel_influence_lowerbound&#32;+&#32;out_shift)&#32;/&#32;scale_ratio;
1016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixel_influence_upperbound&#32;=&#32;(out_pixel_influence_upperbound&#32;+&#32;out_shift)&#32;/&#32;scale_ratio;
1017 
1018 &#32;&#32;&#32;&#32;*in_center_of_out&#32;=&#32;(out_pixel_center&#32;+&#32;out_shift)&#32;/&#32;scale_ratio;
1019 &#32;&#32;&#32;&#32;*in_first_pixel&#32;=&#32;(int)(<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>(in_pixel_influence_lowerbound&#32;+&#32;0.5));
1020 &#32;&#32;&#32;&#32;*in_last_pixel&#32;=&#32;(int)(<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>(in_pixel_influence_upperbound&#32;-&#32;0.5));
1021 }
1022 
1023 <emphasis role="comment">//&#32;What&#32;output&#32;pixels&#32;does&#32;this&#32;input&#32;pixel&#32;contribute&#32;to?</emphasis>
1024 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__calculate_sample_range_downsample(<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixels_radius,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale_ratio,&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_shift,&#32;<emphasis role="keywordtype">int</emphasis>*&#32;out_first_pixel,&#32;<emphasis role="keywordtype">int</emphasis>*&#32;out_last_pixel,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;out_center_of_in)
1025 {
1026 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixel_center&#32;=&#32;(float)n&#32;+&#32;0.5f;
1027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixel_influence_lowerbound&#32;=&#32;in_pixel_center&#32;-&#32;in_pixels_radius;
1028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixel_influence_upperbound&#32;=&#32;in_pixel_center&#32;+&#32;in_pixels_radius;
1029 
1030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_pixel_influence_lowerbound&#32;=&#32;in_pixel_influence_lowerbound&#32;*&#32;scale_ratio&#32;-&#32;out_shift;
1031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_pixel_influence_upperbound&#32;=&#32;in_pixel_influence_upperbound&#32;*&#32;scale_ratio&#32;-&#32;out_shift;
1032 
1033 &#32;&#32;&#32;&#32;*out_center_of_in&#32;=&#32;in_pixel_center&#32;*&#32;scale_ratio&#32;-&#32;out_shift;
1034 &#32;&#32;&#32;&#32;*out_first_pixel&#32;=&#32;(int)(<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>(out_pixel_influence_lowerbound&#32;+&#32;0.5));
1035 &#32;&#32;&#32;&#32;*out_last_pixel&#32;=&#32;(int)(<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>(out_pixel_influence_upperbound&#32;-&#32;0.5));
1036 }
1037 
1038 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__calculate_coefficients_upsample(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale,&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_first_pixel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_last_pixel,&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_center_of_out,&#32;stbir__contributors*&#32;contributor,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;coefficient_group)
1039 {
1040 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
1041 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;total_filter&#32;=&#32;0;
1042 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;filter_scale;
1043 
1044 &#32;&#32;&#32;&#32;STBIR_ASSERT(in_last_pixel&#32;-&#32;in_first_pixel&#32;&lt;=&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(1/scale)&#32;*&#32;2));&#32;<emphasis role="comment">//&#32;Taken&#32;directly&#32;from&#32;stbir__get_coefficient_width()&#32;which&#32;we&#32;can&apos;t&#32;call&#32;because&#32;we&#32;don&apos;t&#32;know&#32;if&#32;we&apos;re&#32;horizontal&#32;or&#32;vertical.</emphasis>
1045 
1046 &#32;&#32;&#32;&#32;contributor-&gt;n0&#32;=&#32;in_first_pixel;
1047 &#32;&#32;&#32;&#32;contributor-&gt;n1&#32;=&#32;in_last_pixel;
1048 
1049 &#32;&#32;&#32;&#32;STBIR_ASSERT(contributor-&gt;n1&#32;&gt;=&#32;contributor-&gt;n0);
1050 
1051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;=&#32;in_last_pixel&#32;-&#32;in_first_pixel;&#32;i++)
1052 &#32;&#32;&#32;&#32;{
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixel_center&#32;=&#32;(float)(i&#32;+&#32;in_first_pixel)&#32;+&#32;0.5f;
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coefficient_group[i]&#32;=&#32;stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].kernel(in_center_of_out&#32;-&#32;in_pixel_center,&#32;1&#32;/&#32;scale);
1055 
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;coefficient&#32;is&#32;zero,&#32;skip&#32;it.&#32;(Don&apos;t&#32;do&#32;the&#32;&lt;0&#32;check&#32;here,&#32;we&#32;want&#32;the&#32;influence&#32;of&#32;those&#32;outside&#32;pixels.)</emphasis>
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;0&#32;&amp;&amp;&#32;!coefficient_group[i])
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contributor-&gt;n0&#32;=&#32;++in_first_pixel;
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i--;
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1063 
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;total_filter&#32;+=&#32;coefficient_group[i];
1065 &#32;&#32;&#32;&#32;}
1066 
1067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE(fg):&#32;Not&#32;actually&#32;true&#32;in&#32;general,&#32;nor&#32;is&#32;there&#32;any&#32;reason&#32;to&#32;expect&#32;it&#32;should&#32;be.</emphasis>
1068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;would&#32;be&#32;true&#32;in&#32;exact&#32;math&#32;but&#32;is&#32;at&#32;best&#32;approximately&#32;true&#32;in&#32;floating-point&#32;math,</emphasis>
1069 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;it&#32;would&#32;not&#32;make&#32;sense&#32;to&#32;try&#32;and&#32;put&#32;actual&#32;bounds&#32;on&#32;this&#32;here&#32;because&#32;it&#32;depends</emphasis>
1070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;on&#32;the&#32;image&#32;aspect&#32;ratio&#32;which&#32;can&#32;get&#32;pretty&#32;extreme.</emphasis>
1071 &#32;&#32;&#32;&#32;<emphasis role="comment">//STBIR_ASSERT(stbir__filter_info_table[filter].kernel((float)(in_last_pixel&#32;+&#32;1)&#32;+&#32;0.5f&#32;-&#32;in_center_of_out,&#32;1/scale)&#32;==&#32;0);</emphasis>
1072 
1073 &#32;&#32;&#32;&#32;STBIR_ASSERT(total_filter&#32;&gt;&#32;0.9);
1074 &#32;&#32;&#32;&#32;STBIR_ASSERT(total_filter&#32;&lt;&#32;1.1f);&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;it&apos;s&#32;not&#32;way&#32;off.</emphasis>
1075 
1076 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;the&#32;sum&#32;of&#32;all&#32;coefficients&#32;is&#32;1.</emphasis>
1077 &#32;&#32;&#32;&#32;filter_scale&#32;=&#32;1&#32;/&#32;total_filter;
1078 
1079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;=&#32;in_last_pixel&#32;-&#32;in_first_pixel;&#32;i++)
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coefficient_group[i]&#32;*=&#32;filter_scale;
1081 
1082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;in_last_pixel&#32;-&#32;in_first_pixel;&#32;i&#32;&gt;=&#32;0;&#32;i--)
1083 &#32;&#32;&#32;&#32;{
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(coefficient_group[i])
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1086 
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;line&#32;has&#32;no&#32;weight.&#32;We&#32;can&#32;skip&#32;it.</emphasis>
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contributor-&gt;n1&#32;=&#32;contributor-&gt;n0&#32;+&#32;i&#32;-&#32;1;
1089 &#32;&#32;&#32;&#32;}
1090 }
1091 
1092 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__calculate_coefficients_downsample(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale_ratio,&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_first_pixel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_last_pixel,&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_center_of_in,&#32;stbir__contributors*&#32;contributor,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;coefficient_group)
1093 {
1094 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
1095 
1096 &#32;&#32;&#32;&#32;STBIR_ASSERT(out_last_pixel&#32;-&#32;out_first_pixel&#32;&lt;=&#32;(<emphasis role="keywordtype">int</emphasis>)<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(scale_ratio)&#32;*&#32;2));&#32;<emphasis role="comment">//&#32;Taken&#32;directly&#32;from&#32;stbir__get_coefficient_width()&#32;which&#32;we&#32;can&apos;t&#32;call&#32;because&#32;we&#32;don&apos;t&#32;know&#32;if&#32;we&apos;re&#32;horizontal&#32;or&#32;vertical.</emphasis>
1097 
1098 &#32;&#32;&#32;&#32;contributor-&gt;n0&#32;=&#32;out_first_pixel;
1099 &#32;&#32;&#32;&#32;contributor-&gt;n1&#32;=&#32;out_last_pixel;
1100 
1101 &#32;&#32;&#32;&#32;STBIR_ASSERT(contributor-&gt;n1&#32;&gt;=&#32;contributor-&gt;n0);
1102 
1103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;=&#32;out_last_pixel&#32;-&#32;out_first_pixel;&#32;i++)
1104 &#32;&#32;&#32;&#32;{
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_pixel_center&#32;=&#32;(float)(i&#32;+&#32;out_first_pixel)&#32;+&#32;0.5f;
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;out_pixel_center&#32;-&#32;out_center_of_in;
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coefficient_group[i]&#32;=&#32;stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].kernel(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;scale_ratio)&#32;*&#32;scale_ratio;
1108 &#32;&#32;&#32;&#32;}
1109 
1110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE(fg):&#32;Not&#32;actually&#32;true&#32;in&#32;general,&#32;nor&#32;is&#32;there&#32;any&#32;reason&#32;to&#32;expect&#32;it&#32;should&#32;be.</emphasis>
1111 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;would&#32;be&#32;true&#32;in&#32;exact&#32;math&#32;but&#32;is&#32;at&#32;best&#32;approximately&#32;true&#32;in&#32;floating-point&#32;math,</emphasis>
1112 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;it&#32;would&#32;not&#32;make&#32;sense&#32;to&#32;try&#32;and&#32;put&#32;actual&#32;bounds&#32;on&#32;this&#32;here&#32;because&#32;it&#32;depends</emphasis>
1113 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;on&#32;the&#32;image&#32;aspect&#32;ratio&#32;which&#32;can&#32;get&#32;pretty&#32;extreme.</emphasis>
1114 &#32;&#32;&#32;&#32;<emphasis role="comment">//STBIR_ASSERT(stbir__filter_info_table[filter].kernel((float)(out_last_pixel&#32;+&#32;1)&#32;+&#32;0.5f&#32;-&#32;out_center_of_in,&#32;scale_ratio)&#32;==&#32;0);</emphasis>
1115 
1116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;out_last_pixel&#32;-&#32;out_first_pixel;&#32;i&#32;&gt;=&#32;0;&#32;i--)
1117 &#32;&#32;&#32;&#32;{
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(coefficient_group[i])
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1120 
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;line&#32;has&#32;no&#32;weight.&#32;We&#32;can&#32;skip&#32;it.</emphasis>
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contributor-&gt;n1&#32;=&#32;contributor-&gt;n0&#32;+&#32;i&#32;-&#32;1;
1123 &#32;&#32;&#32;&#32;}
1124 }
1125 
1126 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__normalize_downsample_coefficients(stbir__contributors*&#32;contributors,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;coefficients,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale_ratio,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_size)
1127 {
1128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_contributors&#32;=&#32;stbir__get_contributors(scale_ratio,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;input_size,&#32;output_size);
1129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_coefficients&#32;=&#32;stbir__get_coefficient_width(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio);
1130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;j;
1131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;skip;
1132 
1133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;output_size;&#32;i++)
1134 &#32;&#32;&#32;&#32;{
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>;
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;total&#32;=&#32;0;
1137 
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(j&#32;=&#32;0;&#32;j&#32;&lt;&#32;num_contributors;&#32;j++)
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;=&#32;contributors[j].n0&#32;&amp;&amp;&#32;i&#32;&lt;=&#32;contributors[j].n1)
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;*stbir__get_coefficient(coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;j,&#32;i&#32;-&#32;contributors[j].n0);
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;total&#32;+=&#32;coefficient;
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;contributors[j].n0)
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1148 
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(total&#32;&gt;&#32;0.9f);
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(total&#32;&lt;&#32;1.1f);
1151 
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>&#32;=&#32;1&#32;/&#32;total;
1153 
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(j&#32;=&#32;0;&#32;j&#32;&lt;&#32;num_contributors;&#32;j++)
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;=&#32;contributors[j].n0&#32;&amp;&amp;&#32;i&#32;&lt;=&#32;contributors[j].n1)
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stbir__get_coefficient(coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;j,&#32;i&#32;-&#32;contributors[j].n0)&#32;*=&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>;
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;contributors[j].n0)
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1161 &#32;&#32;&#32;&#32;}
1162 
1163 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optimize:&#32;Skip&#32;zero&#32;coefficients&#32;and&#32;contributions&#32;outside&#32;of&#32;image&#32;bounds.</emphasis>
1164 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;this&#32;after&#32;normalizing&#32;because&#32;normalization&#32;depends&#32;on&#32;the&#32;n0/n1&#32;values.</emphasis>
1165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(j&#32;=&#32;0;&#32;j&#32;&lt;&#32;num_contributors;&#32;j++)
1166 &#32;&#32;&#32;&#32;{
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>,&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width</link>;
1168 
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip&#32;=&#32;0;
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(*stbir__get_coefficient(coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;j,&#32;skip)&#32;==&#32;0)
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip++;
1172 
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contributors[j].n0&#32;+=&#32;skip;
1174 
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(contributors[j].n0&#32;&lt;&#32;0)
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contributors[j].n0++;
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip++;
1179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1180 
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>&#32;=&#32;contributors[j].n1&#32;-&#32;contributors[j].n0&#32;+&#32;1;
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>&#32;=&#32;stbir__min(num_coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7b8ad0b27a927682837f95528fa454f5">range</link>);
1183 
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width</link>&#32;=&#32;stbir__get_coefficient_width(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio);
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>;&#32;i++)
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;+&#32;skip&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width</link>)
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1189 
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stbir__get_coefficient(coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;j,&#32;i)&#32;=&#32;*stbir__get_coefficient(coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;j,&#32;i&#32;+&#32;skip);
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1192 
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
1194 &#32;&#32;&#32;&#32;}
1195 
1196 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Using&#32;min&#32;to&#32;avoid&#32;writing&#32;into&#32;invalid&#32;pixels.</emphasis>
1197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_contributors;&#32;i++)
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contributors[i].n1&#32;=&#32;stbir__min(contributors[i].n1,&#32;output_size&#32;-&#32;1);
1199 }
1200 
1201 <emphasis role="comment">//&#32;Each&#32;scan&#32;line&#32;uses&#32;the&#32;same&#32;kernel&#32;values&#32;so&#32;we&#32;should&#32;calculate&#32;the&#32;kernel</emphasis>
1202 <emphasis role="comment">//&#32;values&#32;once&#32;and&#32;then&#32;we&#32;can&#32;use&#32;them&#32;for&#32;every&#32;scan&#32;line.</emphasis>
1203 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__calculate_filters(stbir__contributors*&#32;contributors,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;coefficients,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale_ratio,&#32;<emphasis role="keywordtype">float</emphasis>&#32;shift,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_size,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_size)
1204 {
1205 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;
1206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;total_contributors&#32;=&#32;stbir__get_contributors(scale_ratio,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;input_size,&#32;output_size);
1207 
1208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_upsampling(scale_ratio))
1209 &#32;&#32;&#32;&#32;{
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_pixels_radius&#32;=&#32;stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(1&#32;/&#32;scale_ratio)&#32;*&#32;scale_ratio;
1211 
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Looping&#32;through&#32;out&#32;pixels</emphasis>
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;total_contributors;&#32;n++)
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_center_of_out;&#32;<emphasis role="comment">//&#32;Center&#32;of&#32;the&#32;current&#32;out&#32;pixel&#32;in&#32;the&#32;in&#32;pixel&#32;space</emphasis>
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_first_pixel,&#32;in_last_pixel;
1217 
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__calculate_sample_range_upsample(n,&#32;out_pixels_radius,&#32;scale_ratio,&#32;shift,&#32;&amp;in_first_pixel,&#32;&amp;in_last_pixel,&#32;&amp;in_center_of_out);
1219 
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__calculate_coefficients_upsample(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;in_first_pixel,&#32;in_last_pixel,&#32;in_center_of_out,&#32;stbir__get_contributor(contributors,&#32;n),&#32;stbir__get_coefficient(coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;n,&#32;0));
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1222 &#32;&#32;&#32;&#32;}
1223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1224 &#32;&#32;&#32;&#32;{
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixels_radius&#32;=&#32;stbir__filter_info_table[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>].support(scale_ratio)&#32;/&#32;scale_ratio;
1226 
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Looping&#32;through&#32;in&#32;pixels</emphasis>
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;total_contributors;&#32;n++)
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_center_of_in;&#32;<emphasis role="comment">//&#32;Center&#32;of&#32;the&#32;current&#32;out&#32;pixel&#32;in&#32;the&#32;in&#32;pixel&#32;space</emphasis>
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_first_pixel,&#32;out_last_pixel;
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n_adjusted&#32;=&#32;n&#32;-&#32;stbir__get_filter_pixel_margin(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio);
1233 
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__calculate_sample_range_downsample(n_adjusted,&#32;in_pixels_radius,&#32;scale_ratio,&#32;shift,&#32;&amp;out_first_pixel,&#32;&amp;out_last_pixel,&#32;&amp;out_center_of_in);
1235 
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__calculate_coefficients_downsample(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;out_first_pixel,&#32;out_last_pixel,&#32;out_center_of_in,&#32;stbir__get_contributor(contributors,&#32;n),&#32;stbir__get_coefficient(coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;n,&#32;0));
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1238 
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__normalize_downsample_coefficients(contributors,&#32;coefficients,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;scale_ratio,&#32;input_size,&#32;output_size);
1240 &#32;&#32;&#32;&#32;}
1241 }
1242 
1243 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*&#32;stbir__get_decode_buffer(stbir__info*&#32;stbir_info)
1244 {
1245 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;0&#32;index&#32;of&#32;the&#32;decode&#32;buffer&#32;starts&#32;after&#32;the&#32;margin.&#32;This&#32;makes</emphasis>
1246 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;okay&#32;to&#32;use&#32;negative&#32;indexes&#32;on&#32;the&#32;decode&#32;buffer.</emphasis>
1247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;stbir_info-&gt;decode_buffer[stbir_info-&gt;horizontal_filter_pixel_margin&#32;*&#32;stbir_info-&gt;channels];
1248 }
1249 
1250 <emphasis role="preprocessor">#define&#32;STBIR__DECODE(type,&#32;colorspace)&#32;((int)(type)&#32;*&#32;(STBIR_MAX_COLORSPACES)&#32;+&#32;(int)(colorspace))</emphasis>
1251 
1252 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__decode_scanline(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)
1253 {
1254 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c;
1255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels&#32;=&#32;stbir_info-&gt;channels;
1256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel&#32;=&#32;stbir_info-&gt;alpha_channel;
1257 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;stbir_info-&gt;type;
1258 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;colorspace&#32;=&#32;stbir_info-&gt;colorspace;
1259 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;=&#32;stbir_info-&gt;input_w;
1260 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;input_stride_bytes&#32;=&#32;stbir_info-&gt;input_stride_bytes;
1261 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;decode_buffer&#32;=&#32;stbir__get_decode_buffer(stbir_info);
1262 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_horizontal&#32;=&#32;stbir_info-&gt;edge_horizontal;
1263 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_vertical&#32;=&#32;stbir_info-&gt;edge_vertical;
1264 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;in_buffer_row_offset&#32;=&#32;stbir__edge_wrap(edge_vertical,&#32;n,&#32;stbir_info-&gt;input_h)&#32;*&#32;input_stride_bytes;
1265 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;input_data&#32;=&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;stbir_info-&gt;input_data&#32;+&#32;in_buffer_row_offset;
1266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_x&#32;=&#32;input_w&#32;+&#32;stbir_info-&gt;horizontal_filter_pixel_margin;
1267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode&#32;=&#32;STBIR__DECODE(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;colorspace);
1268 
1269 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;-stbir_info-&gt;horizontal_filter_pixel_margin;
1270 
1271 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;handling&#32;for&#32;STBIR_EDGE_ZERO&#32;because&#32;it&#32;needs&#32;to&#32;return&#32;an&#32;item&#32;that&#32;doesn&apos;t&#32;appear&#32;in&#32;the&#32;input,</emphasis>
1272 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;we&#32;want&#32;to&#32;avoid&#32;paying&#32;overhead&#32;on&#32;every&#32;pixel&#32;if&#32;not&#32;STBIR_EDGE_ZERO</emphasis>
1273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(edge_vertical&#32;==&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea279078b3b5a12337c8905de9bff55769">STBIR_EDGE_ZERO</link>&#32;&amp;&amp;&#32;(n&#32;&lt;&#32;0&#32;||&#32;n&#32;&gt;=&#32;stbir_info-&gt;input_h))
1274 &#32;&#32;&#32;&#32;{
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels&#32;+&#32;c]&#32;=&#32;0;
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1279 &#32;&#32;&#32;&#32;}
1280 
1281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(decode)
1282 &#32;&#32;&#32;&#32;{
1283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;((<emphasis role="keywordtype">float</emphasis>)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c])&#32;/&#32;stbir__max_uint8_as_float;
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1292 
1293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;stbir__srgb_uchar_to_linear_float[((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c]];
1300 
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;((float)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)input_data)[input_pixel_index&#32;+&#32;alpha_channel])&#32;/&#32;stbir__max_uint8_as_float;
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1305 
1306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1f4a3c0f3cb88d33c9d0922767c381b2">STBIR_TYPE_UINT16</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;((<emphasis role="keywordtype">float</emphasis>)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c])&#32;/&#32;stbir__max_uint16_as_float;
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1315 
1316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1f4a3c0f3cb88d33c9d0922767c381b2">STBIR_TYPE_UINT16</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;stbir__srgb_to_linear(((<emphasis role="keywordtype">float</emphasis>)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c])&#32;/&#32;stbir__max_uint16_as_float);
1323 
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;((float)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*)input_data)[input_pixel_index&#32;+&#32;alpha_channel])&#32;/&#32;stbir__max_uint16_as_float;
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1328 
1329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1c8361627ec8ef323de0124334a2717d">STBIR_TYPE_UINT32</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;(<emphasis role="keywordtype">float</emphasis>)(((double)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c])&#32;/&#32;stbir__max_uint32_as_float);
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1338 
1339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1c8361627ec8ef323de0124334a2717d">STBIR_TYPE_UINT32</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;stbir__srgb_to_linear((<emphasis role="keywordtype">float</emphasis>)(((<emphasis role="keywordtype">double</emphasis>)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c])&#32;/&#32;stbir__max_uint32_as_float));
1346 
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;(float)(((<emphasis role="keywordtype">double</emphasis>)((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)input_data)[input_pixel_index&#32;+&#32;alpha_channel])&#32;/&#32;stbir__max_uint32_as_float);
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1351 
1352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c];
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1361 
1362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_pixel_index&#32;=&#32;stbir__edge_wrap(edge_horizontal,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;input_w)&#32;*&#32;channels;
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;=&#32;stbir__srgb_to_linear(((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*)input_data)[input_pixel_index&#32;+&#32;c]);
1369 
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;((<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*)input_data)[input_pixel_index&#32;+&#32;alpha_channel];
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1373 
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1375 
1376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(!<emphasis role="stringliteral">&quot;Unknown&#32;type/colorspace/channels&#32;combination.&quot;</emphasis>);
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1379 &#32;&#32;&#32;&#32;}
1380 
1381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&#32;&amp;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1af1dbff54b404455740b7f9d04b5a0177">STBIR_FLAG_ALPHA_PREMULTIPLIED</link>))
1382 &#32;&#32;&#32;&#32;{
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;-stbir_info-&gt;horizontal_filter_pixel_margin;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1386 
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;alpha&#32;value&#32;is&#32;0&#32;it&#32;will&#32;clobber&#32;the&#32;color&#32;values.&#32;Make&#32;sure&#32;it&apos;s&#32;not.</emphasis>
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>&#32;=&#32;decode_buffer[decode_pixel_index&#32;+&#32;alpha_channel];
1389 <emphasis role="preprocessor">#ifndef&#32;STBIR_NO_ALPHA_EPSILON</emphasis>
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;type&#32;!=&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>)&#32;{
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>&#32;+=&#32;STBIR_ALPHA_EPSILON;
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>;
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1394 <emphasis role="preprocessor">#endif</emphasis>
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;alpha_channel)
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
1399 
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[decode_pixel_index&#32;+&#32;c]&#32;*=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>;
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1403 &#32;&#32;&#32;&#32;}
1404 
1405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(edge_horizontal&#32;==&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea279078b3b5a12337c8905de9bff55769">STBIR_EDGE_ZERO</link>)
1406 &#32;&#32;&#32;&#32;{
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;-stbir_info-&gt;horizontal_filter_pixel_margin;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels&#32;+&#32;c]&#32;=&#32;0;
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;input_w;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels&#32;+&#32;c]&#32;=&#32;0;
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1417 &#32;&#32;&#32;&#32;}
1418 }
1419 
1420 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*&#32;stbir__get_ring_buffer_entry(<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_length)
1421 {
1422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;ring_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;*&#32;ring_buffer_length];
1423 }
1424 
1425 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*&#32;stbir__add_empty_ring_buffer_entry(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)
1426 {
1427 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_index;
1428 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer;
1429 
1430 &#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_last_scanline&#32;=&#32;n;
1431 
1432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;&lt;&#32;0)
1433 &#32;&#32;&#32;&#32;{
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_index&#32;=&#32;stbir_info-&gt;ring_buffer_begin_index&#32;=&#32;0;
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_first_scanline&#32;=&#32;n;
1436 &#32;&#32;&#32;&#32;}
1437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1438 &#32;&#32;&#32;&#32;{
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_index&#32;=&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;+&#32;(stbir_info-&gt;ring_buffer_last_scanline&#32;-&#32;stbir_info-&gt;ring_buffer_first_scanline))&#32;%&#32;stbir_info-&gt;ring_buffer_num_entries;
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(ring_buffer_index&#32;!=&#32;stbir_info-&gt;ring_buffer_begin_index);
1441 &#32;&#32;&#32;&#32;}
1442 
1443 &#32;&#32;&#32;&#32;ring_buffer&#32;=&#32;stbir__get_ring_buffer_entry(stbir_info-&gt;ring_buffer,&#32;ring_buffer_index,&#32;stbir_info-&gt;ring_buffer_length_bytes&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>));
1444 &#32;&#32;&#32;&#32;memset(ring_buffer,&#32;0,&#32;stbir_info-&gt;ring_buffer_length_bytes);
1445 
1446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ring_buffer;
1447 }
1448 
1449 
1450 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__resample_horizontal_upsample(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;output_buffer)
1451 {
1452 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;k;
1453 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w&#32;=&#32;stbir_info-&gt;output_w;
1454 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels&#32;=&#32;stbir_info-&gt;channels;
1455 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;decode_buffer&#32;=&#32;stbir__get_decode_buffer(stbir_info);
1456 &#32;&#32;&#32;&#32;stbir__contributors*&#32;horizontal_contributors&#32;=&#32;stbir_info-&gt;horizontal_contributors;
1457 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;horizontal_coefficients&#32;=&#32;stbir_info-&gt;horizontal_coefficients;
1458 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_width&#32;=&#32;stbir_info-&gt;horizontal_coefficient_width;
1459 
1460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1461 &#32;&#32;&#32;&#32;{
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n0;
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n1&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n1;
1464 
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_counter&#32;=&#32;0;
1468 
1469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(n1&#32;&gt;=&#32;n0);
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(n0&#32;&gt;=&#32;-stbir_info-&gt;horizontal_filter_pixel_margin);
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(n1&#32;&gt;=&#32;-stbir_info-&gt;horizontal_filter_pixel_margin);
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(n0&#32;&lt;&#32;stbir_info-&gt;input_w&#32;+&#32;stbir_info-&gt;horizontal_filter_pixel_margin);
1473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(n1&#32;&lt;&#32;stbir_info-&gt;input_w&#32;+&#32;stbir_info-&gt;horizontal_filter_pixel_margin);
1474 
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(channels)&#32;{
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;k&#32;*&#32;1;
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;coefficient_counter++];
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(coefficient&#32;!=&#32;0);
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;k&#32;*&#32;2;
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;coefficient_counter++];
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(coefficient&#32;!=&#32;0);
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;1]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;k&#32;*&#32;3;
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;coefficient_counter++];
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(coefficient&#32;!=&#32;0);
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;1]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;2]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;k&#32;*&#32;4;
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;coefficient_counter++];
1511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(coefficient&#32;!=&#32;0);
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;1]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;2]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
1515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;3]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;3]&#32;*&#32;coefficient;
1516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;k&#32;*&#32;channels;
1522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;coefficient_counter++];
1523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c;
1524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(coefficient&#32;!=&#32;0);
1525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;c]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;c]&#32;*&#32;coefficient;
1527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1530 &#32;&#32;&#32;&#32;}
1531 }
1532 
1533 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__resample_horizontal_downsample(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;output_buffer)
1534 {
1535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;k;
1536 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;=&#32;stbir_info-&gt;input_w;
1537 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels&#32;=&#32;stbir_info-&gt;channels;
1538 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;decode_buffer&#32;=&#32;stbir__get_decode_buffer(stbir_info);
1539 &#32;&#32;&#32;&#32;stbir__contributors*&#32;horizontal_contributors&#32;=&#32;stbir_info-&gt;horizontal_contributors;
1540 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;horizontal_coefficients&#32;=&#32;stbir_info-&gt;horizontal_coefficients;
1541 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_width&#32;=&#32;stbir_info-&gt;horizontal_coefficient_width;
1542 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;filter_pixel_margin&#32;=&#32;stbir_info-&gt;horizontal_filter_pixel_margin;
1543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_x&#32;=&#32;input_w&#32;+&#32;filter_pixel_margin&#32;*&#32;2;
1544 
1545 &#32;&#32;&#32;&#32;STBIR_ASSERT(!stbir__use_width_upsampling(stbir_info));
1546 
1547 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(channels)&#32;{
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n0;
1552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n1&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n1;
1553 
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_x&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;filter_pixel_margin;
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;in_x&#32;*&#32;1;
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_n&#32;=&#32;n1;
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1558 
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;max_n;&#32;k++)
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_pixel_index&#32;=&#32;k&#32;*&#32;1;
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;k&#32;-&#32;n0];
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1567 
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n0;
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n1&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n1;
1573 
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_x&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;filter_pixel_margin;
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;in_x&#32;*&#32;2;
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_n&#32;=&#32;n1;
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1578 
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;max_n;&#32;k++)
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_pixel_index&#32;=&#32;k&#32;*&#32;2;
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;k&#32;-&#32;n0];
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;1]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1588 
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n0;
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n1&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n1;
1594 
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_x&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;filter_pixel_margin;
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;in_x&#32;*&#32;3;
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_n&#32;=&#32;n1;
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1599 
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;max_n;&#32;k++)
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_pixel_index&#32;=&#32;k&#32;*&#32;3;
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;k&#32;-&#32;n0];
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;1]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;2]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1610 
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n0;
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n1&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n1;
1616 
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_x&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;filter_pixel_margin;
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;in_x&#32;*&#32;4;
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_n&#32;=&#32;n1;
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1621 
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;max_n;&#32;k++)
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_pixel_index&#32;=&#32;k&#32;*&#32;4;
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;k&#32;-&#32;n0];
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;0]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;1]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;2]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;3]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;3]&#32;*&#32;coefficient;
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1633 
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;max_x;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n0;
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n1&#32;=&#32;horizontal_contributors[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>].n1;
1639 
1640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_x&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;filter_pixel_margin;
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;in_x&#32;*&#32;channels;
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_n&#32;=&#32;n1;
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1644 
1645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;max_n;&#32;k++)
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c;
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_pixel_index&#32;=&#32;k&#32;*&#32;channels;
1649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;horizontal_coefficients[coefficient_group&#32;+&#32;k&#32;-&#32;n0];
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer[out_pixel_index&#32;+&#32;c]&#32;+=&#32;decode_buffer[in_pixel_index&#32;+&#32;c]&#32;*&#32;coefficient;
1652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1655 &#32;&#32;&#32;&#32;}
1656 }
1657 
1658 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__decode_and_resample_upsample(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)
1659 {
1660 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decode&#32;the&#32;nth&#32;scanline&#32;from&#32;the&#32;source&#32;image&#32;into&#32;the&#32;decode&#32;buffer.</emphasis>
1661 &#32;&#32;&#32;&#32;stbir__decode_scanline(stbir_info,&#32;n);
1662 
1663 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;resample&#32;it&#32;into&#32;the&#32;ring&#32;buffer.</emphasis>
1664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_width_upsampling(stbir_info))
1665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__resample_horizontal_upsample(stbir_info,&#32;stbir__add_empty_ring_buffer_entry(stbir_info,&#32;n));
1666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__resample_horizontal_downsample(stbir_info,&#32;stbir__add_empty_ring_buffer_entry(stbir_info,&#32;n));
1668 
1669 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;it&apos;s&#32;sitting&#32;in&#32;the&#32;ring&#32;buffer&#32;ready&#32;to&#32;be&#32;used&#32;as&#32;source&#32;for&#32;the&#32;vertical&#32;sampling.</emphasis>
1670 }
1671 
1672 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__decode_and_resample_downsample(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)
1673 {
1674 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decode&#32;the&#32;nth&#32;scanline&#32;from&#32;the&#32;source&#32;image&#32;into&#32;the&#32;decode&#32;buffer.</emphasis>
1675 &#32;&#32;&#32;&#32;stbir__decode_scanline(stbir_info,&#32;n);
1676 
1677 &#32;&#32;&#32;&#32;memset(stbir_info-&gt;horizontal_buffer,&#32;0,&#32;stbir_info-&gt;output_w&#32;*&#32;stbir_info-&gt;channels&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>));
1678 
1679 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;resample&#32;it&#32;into&#32;the&#32;horizontal&#32;buffer.</emphasis>
1680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_width_upsampling(stbir_info))
1681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__resample_horizontal_upsample(stbir_info,&#32;stbir_info-&gt;horizontal_buffer);
1682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__resample_horizontal_downsample(stbir_info,&#32;stbir_info-&gt;horizontal_buffer);
1684 
1685 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;it&apos;s&#32;sitting&#32;in&#32;the&#32;horizontal&#32;buffer&#32;ready&#32;to&#32;be&#32;distributed&#32;into&#32;the&#32;ring&#32;buffers.</emphasis>
1686 }
1687 
1688 <emphasis role="comment">//&#32;Get&#32;the&#32;specified&#32;scan&#32;line&#32;from&#32;the&#32;ring&#32;buffer.</emphasis>
1689 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>*&#32;stbir__get_ring_buffer_scanline(<emphasis role="keywordtype">int</emphasis>&#32;get_scanline,&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;begin_index,&#32;<emphasis role="keywordtype">int</emphasis>&#32;first_scanline,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_num_entries,&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_length)
1690 {
1691 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_index&#32;=&#32;(begin_index&#32;+&#32;(get_scanline&#32;-&#32;first_scanline))&#32;%&#32;ring_buffer_num_entries;
1692 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__get_ring_buffer_entry(ring_buffer,&#32;ring_buffer_index,&#32;ring_buffer_length);
1693 }
1694 
1695 
1696 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__encode_scanline(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_pixels,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output_buffer,&#32;<emphasis role="keywordtype">float</emphasis>&#32;*encode_buffer,&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode)
1697 {
1698 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1699 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;
1700 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_nonalpha;
1701 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>&#32;nonalpha[STBIR_MAX_CHANNELS];
1702 
1703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1af1dbff54b404455740b7f9d04b5a0177">STBIR_FLAG_ALPHA_PREMULTIPLIED</link>))
1704 &#32;&#32;&#32;&#32;{
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1708 
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>&#32;=&#32;encode_buffer[pixel_index&#32;+&#32;alpha_channel];
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;reciprocal_alpha&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>&#32;?&#32;1.0f&#32;/&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a090ebe65994a3ee4bb60ae3472abffc5">alpha</link>&#32;:&#32;0;
1711 
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unrolling&#32;this&#32;produced&#32;a&#32;1%&#32;slowdown&#32;upscaling&#32;a&#32;large&#32;RGBA&#32;linear-space&#32;image&#32;on&#32;my&#32;machine&#32;-&#32;stb</emphasis>
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;channels;&#32;n++)
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;!=&#32;alpha_channel)
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[pixel_index&#32;+&#32;n]&#32;*=&#32;reciprocal_alpha;
1716 
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;added&#32;in&#32;a&#32;small&#32;epsilon&#32;to&#32;prevent&#32;the&#32;color&#32;channel&#32;from&#32;being&#32;deleted&#32;with&#32;zero&#32;alpha.</emphasis>
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Because&#32;we&#32;only&#32;add&#32;it&#32;for&#32;integer&#32;types,&#32;it&#32;will&#32;automatically&#32;be&#32;discarded&#32;on&#32;integer</emphasis>
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conversion,&#32;so&#32;we&#32;don&apos;t&#32;need&#32;to&#32;subtract&#32;it&#32;back&#32;out&#32;(which&#32;would&#32;be&#32;problematic&#32;for</emphasis>
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;numeric&#32;precision&#32;reasons).</emphasis>
1721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1722 &#32;&#32;&#32;&#32;}
1723 
1724 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;build&#32;a&#32;table&#32;of&#32;all&#32;channels&#32;that&#32;need&#32;colorspace&#32;correction,&#32;so</emphasis>
1725 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;don&apos;t&#32;perform&#32;colorspace&#32;correction&#32;on&#32;channels&#32;that&#32;don&apos;t&#32;need&#32;it.</emphasis>
1726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0,&#32;num_nonalpha&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;channels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1727 &#32;&#32;&#32;&#32;{
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;!=&#32;alpha_channel&#32;||&#32;(stbir_info-&gt;flags&#32;&amp;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonalpha[num_nonalpha++]&#32;=&#32;(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>)<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1732 &#32;&#32;&#32;&#32;}
1733 
1734 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;STBIR__ROUND_INT(f)&#32;&#32;&#32;&#32;((int)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((f)+0.5))</emphasis>
1735 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;STBIR__ROUND_UINT(f)&#32;&#32;&#32;((stbir_uint32)&#32;((f)+0.5))</emphasis>
1736 
1737 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;STBIR__SATURATE_INT</emphasis>
1738 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;STBIR__ENCODE_LINEAR8(f)&#32;&#32;&#32;stbir__saturate8&#32;(STBIR__ROUND_INT((f)&#32;*&#32;stbir__max_uint8_as_float&#32;))</emphasis>
1739 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;STBIR__ENCODE_LINEAR16(f)&#32;&#32;stbir__saturate16(STBIR__ROUND_INT((f)&#32;*&#32;stbir__max_uint16_as_float))</emphasis>
1740 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1741 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;STBIR__ENCODE_LINEAR8(f)&#32;&#32;&#32;(unsigned&#32;char&#32;)&#32;STBIR__ROUND_INT(stbir__saturate(f)&#32;*&#32;stbir__max_uint8_as_float&#32;)</emphasis>
1742 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;STBIR__ENCODE_LINEAR16(f)&#32;&#32;(unsigned&#32;short)&#32;STBIR__ROUND_INT(stbir__saturate(f)&#32;*&#32;stbir__max_uint16_as_float)</emphasis>
1743 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1744 
1745 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(decode)
1746 &#32;&#32;&#32;&#32;{
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1751 
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;channels;&#32;n++)
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;n;
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;STBIR__ENCODE_LINEAR8(encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]);
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1759 
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1764 
1765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;num_nonalpha;&#32;n++)
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;nonalpha[n];
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;stbir__linear_to_srgb_uchar(encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]);
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1770 
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&#32;&amp;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)output_buffer)[pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;STBIR__ENCODE_LINEAR8(encode_buffer[pixel_index+alpha_channel]);
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1775 
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1f4a3c0f3cb88d33c9d0922767c381b2">STBIR_TYPE_UINT16</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1780 
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;channels;&#32;n++)
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;n;
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;STBIR__ENCODE_LINEAR16(encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]);
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1788 
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1f4a3c0f3cb88d33c9d0922767c381b2">STBIR_TYPE_UINT16</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1793 
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;num_nonalpha;&#32;n++)
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;nonalpha[n];
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;short)STBIR__ROUND_INT(stbir__linear_to_srgb(stbir__saturate(encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]))&#32;*&#32;stbir__max_uint16_as_float);
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1799 
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*)output_buffer)[pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;STBIR__ENCODE_LINEAR16(encode_buffer[pixel_index&#32;+&#32;alpha_channel]);
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1803 
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1805 
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1c8361627ec8ef323de0124334a2717d">STBIR_TYPE_UINT32</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1810 
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;channels;&#32;n++)
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;n;
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;int)STBIR__ROUND_UINT(((<emphasis role="keywordtype">double</emphasis>)stbir__saturate(encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]))&#32;*&#32;stbir__max_uint32_as_float);
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1818 
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1c8361627ec8ef323de0124334a2717d">STBIR_TYPE_UINT32</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1823 
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;num_nonalpha;&#32;n++)
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;nonalpha[n];
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;int)STBIR__ROUND_UINT(((<emphasis role="keywordtype">double</emphasis>)stbir__linear_to_srgb(stbir__saturate(encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>])))&#32;*&#32;stbir__max_uint32_as_float);
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1829 
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)output_buffer)[pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)STBIR__ROUND_INT(((<emphasis role="keywordtype">double</emphasis>)stbir__saturate(encode_buffer[pixel_index&#32;+&#32;alpha_channel]))&#32;*&#32;stbir__max_uint32_as_float);
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1834 
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>):
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1839 
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;channels;&#32;n++)
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;n;
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">float</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1847 
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;STBIR__DECODE(<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>):
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>=0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;num_pixels;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>*channels;
1852 
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;num_nonalpha;&#32;n++)
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;pixel_index&#32;+&#32;nonalpha[n];
1856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">float</emphasis>*)output_buffer)[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]&#32;=&#32;stbir__linear_to_srgb(encode_buffer[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>]);
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1858 
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(stbir_info-&gt;flags&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>))
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">float</emphasis>*)output_buffer)[pixel_index&#32;+&#32;alpha_channel]&#32;=&#32;encode_buffer[pixel_index&#32;+&#32;alpha_channel];
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1863 
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(!<emphasis role="stringliteral">&quot;Unknown&#32;type/colorspace/channels&#32;combination.&quot;</emphasis>);
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1867 &#32;&#32;&#32;&#32;}
1868 }
1869 
1870 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__resample_vertical_upsample(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)
1871 {
1872 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;k;
1873 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w&#32;=&#32;stbir_info-&gt;output_w;
1874 &#32;&#32;&#32;&#32;stbir__contributors*&#32;vertical_contributors&#32;=&#32;stbir_info-&gt;vertical_contributors;
1875 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;vertical_coefficients&#32;=&#32;stbir_info-&gt;vertical_coefficients;
1876 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels&#32;=&#32;stbir_info-&gt;channels;
1877 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel&#32;=&#32;stbir_info-&gt;alpha_channel;
1878 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;stbir_info-&gt;type;
1879 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;colorspace&#32;=&#32;stbir_info-&gt;colorspace;
1880 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_entries&#32;=&#32;stbir_info-&gt;ring_buffer_num_entries;
1881 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;output_data&#32;=&#32;stbir_info-&gt;output_data;
1882 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;encode_buffer&#32;=&#32;stbir_info-&gt;encode_buffer;
1883 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode&#32;=&#32;STBIR__DECODE(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;colorspace);
1884 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_width&#32;=&#32;stbir_info-&gt;vertical_coefficient_width;
1885 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_counter;
1886 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;contributor&#32;=&#32;n;
1887 
1888 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer&#32;=&#32;stbir_info-&gt;ring_buffer;
1889 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_begin_index&#32;=&#32;stbir_info-&gt;ring_buffer_begin_index;
1890 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_first_scanline&#32;=&#32;stbir_info-&gt;ring_buffer_first_scanline;
1891 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_length&#32;=&#32;stbir_info-&gt;ring_buffer_length_bytes/<emphasis role="keyword">sizeof</emphasis>(float);
1892 
1893 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0,n1,&#32;output_row_start;
1894 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;contributor;
1895 
1896 &#32;&#32;&#32;&#32;n0&#32;=&#32;vertical_contributors[contributor].n0;
1897 &#32;&#32;&#32;&#32;n1&#32;=&#32;vertical_contributors[contributor].n1;
1898 
1899 &#32;&#32;&#32;&#32;output_row_start&#32;=&#32;n&#32;*&#32;stbir_info-&gt;output_stride_bytes;
1900 
1901 &#32;&#32;&#32;&#32;STBIR_ASSERT(stbir__use_height_upsampling(stbir_info));
1902 
1903 &#32;&#32;&#32;&#32;memset(encode_buffer,&#32;0,&#32;output_w&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>)&#32;*&#32;channels);
1904 
1905 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I&#32;tried&#32;reblocking&#32;this&#32;for&#32;better&#32;cache&#32;usage&#32;of&#32;encode_buffer</emphasis>
1906 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(using&#32;x_outer,&#32;k,&#32;x_inner),&#32;but&#32;it&#32;lost&#32;speed.&#32;--&#32;stb</emphasis>
1907 
1908 &#32;&#32;&#32;&#32;coefficient_counter&#32;=&#32;0;
1909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(channels)&#32;{
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_index&#32;=&#32;coefficient_counter++;
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer_entry&#32;=&#32;stbir__get_ring_buffer_scanline(k,&#32;ring_buffer,&#32;ring_buffer_begin_index,&#32;ring_buffer_first_scanline,&#32;ring_buffer_entries,&#32;ring_buffer_length);
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;vertical_coefficients[coefficient_group&#32;+&#32;coefficient_index];
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;1;
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;0]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_index&#32;=&#32;coefficient_counter++;
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer_entry&#32;=&#32;stbir__get_ring_buffer_scanline(k,&#32;ring_buffer,&#32;ring_buffer_begin_index,&#32;ring_buffer_first_scanline,&#32;ring_buffer_entries,&#32;ring_buffer_length);
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;vertical_coefficients[coefficient_group&#32;+&#32;coefficient_index];
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;2;
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;0]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;1]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_index&#32;=&#32;coefficient_counter++;
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer_entry&#32;=&#32;stbir__get_ring_buffer_scanline(k,&#32;ring_buffer,&#32;ring_buffer_begin_index,&#32;ring_buffer_first_scanline,&#32;ring_buffer_entries,&#32;ring_buffer_length);
1942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;vertical_coefficients[coefficient_group&#32;+&#32;coefficient_index];
1943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;3;
1946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;0]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;1]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;2]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
1949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_index&#32;=&#32;coefficient_counter++;
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer_entry&#32;=&#32;stbir__get_ring_buffer_scanline(k,&#32;ring_buffer,&#32;ring_buffer_begin_index,&#32;ring_buffer_first_scanline,&#32;ring_buffer_entries,&#32;ring_buffer_length);
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;vertical_coefficients[coefficient_group&#32;+&#32;coefficient_index];
1958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;4;
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;0]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;1]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;2]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;3]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;3]&#32;*&#32;coefficient;
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_index&#32;=&#32;coefficient_counter++;
1972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer_entry&#32;=&#32;stbir__get_ring_buffer_scanline(k,&#32;ring_buffer,&#32;ring_buffer_begin_index,&#32;ring_buffer_first_scanline,&#32;ring_buffer_entries,&#32;ring_buffer_length);
1973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;vertical_coefficients[coefficient_group&#32;+&#32;coefficient_index];
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c;
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;encode_buffer[in_pixel_index&#32;+&#32;c]&#32;+=&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;c]&#32;*&#32;coefficient;
1980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1983 &#32;&#32;&#32;&#32;}
1984 &#32;&#32;&#32;&#32;stbir__encode_scanline(stbir_info,&#32;output_w,&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;output_data&#32;+&#32;output_row_start,&#32;encode_buffer,&#32;channels,&#32;alpha_channel,&#32;decode);
1985 }
1986 
1987 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__resample_vertical_downsample(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;n)
1988 {
1989 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;k;
1990 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w&#32;=&#32;stbir_info-&gt;output_w;
1991 &#32;&#32;&#32;&#32;stbir__contributors*&#32;vertical_contributors&#32;=&#32;stbir_info-&gt;vertical_contributors;
1992 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;vertical_coefficients&#32;=&#32;stbir_info-&gt;vertical_coefficients;
1993 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels&#32;=&#32;stbir_info-&gt;channels;
1994 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_entries&#32;=&#32;stbir_info-&gt;ring_buffer_num_entries;
1995 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;horizontal_buffer&#32;=&#32;stbir_info-&gt;horizontal_buffer;
1996 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_width&#32;=&#32;stbir_info-&gt;vertical_coefficient_width;
1997 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;contributor&#32;=&#32;n&#32;+&#32;stbir_info-&gt;vertical_filter_pixel_margin;
1998 
1999 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer&#32;=&#32;stbir_info-&gt;ring_buffer;
2000 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_begin_index&#32;=&#32;stbir_info-&gt;ring_buffer_begin_index;
2001 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_first_scanline&#32;=&#32;stbir_info-&gt;ring_buffer_first_scanline;
2002 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_length&#32;=&#32;stbir_info-&gt;ring_buffer_length_bytes/<emphasis role="keyword">sizeof</emphasis>(float);
2003 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n0,n1;
2004 
2005 &#32;&#32;&#32;&#32;n0&#32;=&#32;vertical_contributors[contributor].n0;
2006 &#32;&#32;&#32;&#32;n1&#32;=&#32;vertical_contributors[contributor].n1;
2007 
2008 &#32;&#32;&#32;&#32;STBIR_ASSERT(!stbir__use_height_upsampling(stbir_info));
2009 
2010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(k&#32;=&#32;n0;&#32;k&#32;&lt;=&#32;n1;&#32;k++)
2011 &#32;&#32;&#32;&#32;{
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_index&#32;=&#32;k&#32;-&#32;n0;
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;coefficient_group&#32;=&#32;coefficient_width&#32;*&#32;contributor;
2014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;coefficient&#32;=&#32;vertical_coefficients[coefficient_group&#32;+&#32;coefficient_index];
2015 
2016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer_entry&#32;=&#32;stbir__get_ring_buffer_scanline(k,&#32;ring_buffer,&#32;ring_buffer_begin_index,&#32;ring_buffer_first_scanline,&#32;ring_buffer_entries,&#32;ring_buffer_length);
2017 
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(channels)&#32;{
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;1;
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
2024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;2;
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;1]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
2036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;3;
2038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;1]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;2]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:
2044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
2045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;4;
2047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;0]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;0]&#32;*&#32;coefficient;
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;1]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;1]&#32;*&#32;coefficient;
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;2]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;2]&#32;*&#32;coefficient;
2050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;3]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;3]&#32;*&#32;coefficient;
2051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
2054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;output_w;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_pixel_index&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;*&#32;channels;
2057 
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;c;
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(c&#32;=&#32;0;&#32;c&#32;&lt;&#32;channels;&#32;c++)
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ring_buffer_entry[in_pixel_index&#32;+&#32;c]&#32;+=&#32;horizontal_buffer[in_pixel_index&#32;+&#32;c]&#32;*&#32;coefficient;
2061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2064 &#32;&#32;&#32;&#32;}
2065 }
2066 
2067 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__buffer_loop_upsample(stbir__info*&#32;stbir_info)
2068 {
2069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>;
2070 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale_ratio&#32;=&#32;stbir_info-&gt;vertical_scale;
2071 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_scanlines_radius&#32;=&#32;stbir__filter_info_table[stbir_info-&gt;vertical_filter].support(1/scale_ratio)&#32;*&#32;scale_ratio;
2072 
2073 &#32;&#32;&#32;&#32;STBIR_ASSERT(stbir__use_height_upsampling(stbir_info));
2074 
2075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&lt;&#32;stbir_info-&gt;output_h;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>++)
2076 &#32;&#32;&#32;&#32;{
2077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_center_of_out&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Center&#32;of&#32;the&#32;current&#32;out&#32;scanline&#32;in&#32;the&#32;in&#32;scanline&#32;space</emphasis>
2078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_first_scanline&#32;=&#32;0,&#32;in_last_scanline&#32;=&#32;0;
2079 
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__calculate_sample_range_upsample(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;out_scanlines_radius,&#32;scale_ratio,&#32;stbir_info-&gt;vertical_shift,&#32;&amp;in_first_scanline,&#32;&amp;in_last_scanline,&#32;&amp;in_center_of_out);
2081 
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(in_last_scanline&#32;-&#32;in_first_scanline&#32;+&#32;1&#32;&lt;=&#32;stbir_info-&gt;ring_buffer_num_entries);
2083 
2084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;&gt;=&#32;0)
2085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;rid&#32;of&#32;whatever&#32;we&#32;don&apos;t&#32;need&#32;anymore.</emphasis>
2087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(in_first_scanline&#32;&gt;&#32;stbir_info-&gt;ring_buffer_first_scanline)
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_first_scanline&#32;==&#32;stbir_info-&gt;ring_buffer_last_scanline)
2090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;just&#32;popped&#32;the&#32;last&#32;scanline&#32;off&#32;the&#32;ring&#32;buffer.</emphasis>
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;it&#32;to&#32;the&#32;empty&#32;state.</emphasis>
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_begin_index&#32;=&#32;-1;
2094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_first_scanline&#32;=&#32;0;
2095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_last_scanline&#32;=&#32;0;
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_first_scanline++;
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_begin_index&#32;=&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;+&#32;1)&#32;%&#32;stbir_info-&gt;ring_buffer_num_entries;
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2105 
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Load&#32;in&#32;new&#32;ones.</emphasis>
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;&lt;&#32;0)
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__decode_and_resample_upsample(stbir_info,&#32;in_first_scanline);
2109 
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(in_last_scanline&#32;&gt;&#32;stbir_info-&gt;ring_buffer_last_scanline)
2111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__decode_and_resample_upsample(stbir_info,&#32;stbir_info-&gt;ring_buffer_last_scanline&#32;+&#32;1);
2112 
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;all&#32;buffers&#32;should&#32;be&#32;ready&#32;to&#32;write&#32;a&#32;row&#32;of&#32;vertical&#32;sampling.</emphasis>
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__resample_vertical_upsample(stbir_info,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>);
2115 
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_PROGRESS_REPORT((<emphasis role="keywordtype">float</emphasis>)<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;/&#32;stbir_info-&gt;output_h);
2117 &#32;&#32;&#32;&#32;}
2118 }
2119 
2120 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__empty_ring_buffer(stbir__info*&#32;stbir_info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;first_necessary_scanline)
2121 {
2122 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_bytes&#32;=&#32;stbir_info-&gt;output_stride_bytes;
2123 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels&#32;=&#32;stbir_info-&gt;channels;
2124 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel&#32;=&#32;stbir_info-&gt;alpha_channel;
2125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;stbir_info-&gt;type;
2126 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;colorspace&#32;=&#32;stbir_info-&gt;colorspace;
2127 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w&#32;=&#32;stbir_info-&gt;output_w;
2128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;output_data&#32;=&#32;stbir_info-&gt;output_data;
2129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;decode&#32;=&#32;STBIR__DECODE(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;colorspace);
2130 
2131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer&#32;=&#32;stbir_info-&gt;ring_buffer;
2132 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ring_buffer_length&#32;=&#32;stbir_info-&gt;ring_buffer_length_bytes/<emphasis role="keyword">sizeof</emphasis>(float);
2133 
2134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;&gt;=&#32;0)
2135 &#32;&#32;&#32;&#32;{
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;rid&#32;of&#32;whatever&#32;we&#32;don&apos;t&#32;need&#32;anymore.</emphasis>
2137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(first_necessary_scanline&#32;&gt;&#32;stbir_info-&gt;ring_buffer_first_scanline)
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_first_scanline&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;stbir_info-&gt;ring_buffer_first_scanline&#32;&lt;&#32;stbir_info-&gt;output_h)
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_row_start&#32;=&#32;stbir_info-&gt;ring_buffer_first_scanline&#32;*&#32;output_stride_bytes;
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>*&#32;ring_buffer_entry&#32;=&#32;stbir__get_ring_buffer_entry(ring_buffer,&#32;stbir_info-&gt;ring_buffer_begin_index,&#32;ring_buffer_length);
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__encode_scanline(stbir_info,&#32;output_w,&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;output_data&#32;+&#32;output_row_start,&#32;ring_buffer_entry,&#32;channels,&#32;alpha_channel,&#32;decode);
2144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_PROGRESS_REPORT((<emphasis role="keywordtype">float</emphasis>)stbir_info-&gt;ring_buffer_first_scanline&#32;/&#32;stbir_info-&gt;output_h);
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2146 
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_first_scanline&#32;==&#32;stbir_info-&gt;ring_buffer_last_scanline)
2148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;just&#32;popped&#32;the&#32;last&#32;scanline&#32;off&#32;the&#32;ring&#32;buffer.</emphasis>
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;it&#32;to&#32;the&#32;empty&#32;state.</emphasis>
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_begin_index&#32;=&#32;-1;
2152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_first_scanline&#32;=&#32;0;
2153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_last_scanline&#32;=&#32;0;
2154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_first_scanline++;
2159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir_info-&gt;ring_buffer_begin_index&#32;=&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;+&#32;1)&#32;%&#32;stbir_info-&gt;ring_buffer_num_entries;
2160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2162 &#32;&#32;&#32;&#32;}
2163 }
2164 
2165 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__buffer_loop_downsample(stbir__info*&#32;stbir_info)
2166 {
2167 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>;
2168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;scale_ratio&#32;=&#32;stbir_info-&gt;vertical_scale;
2169 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h&#32;=&#32;stbir_info-&gt;output_h;
2170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;in_pixels_radius&#32;=&#32;stbir__filter_info_table[stbir_info-&gt;vertical_filter].support(scale_ratio)&#32;/&#32;scale_ratio;
2171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_margin&#32;=&#32;stbir_info-&gt;vertical_filter_pixel_margin;
2172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_y&#32;=&#32;stbir_info-&gt;input_h&#32;+&#32;pixel_margin;
2173 
2174 &#32;&#32;&#32;&#32;STBIR_ASSERT(!stbir__use_height_upsampling(stbir_info));
2175 
2176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;=&#32;-pixel_margin;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&lt;&#32;max_y;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>++)
2177 &#32;&#32;&#32;&#32;{
2178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;out_center_of_in;&#32;<emphasis role="comment">//&#32;Center&#32;of&#32;the&#32;current&#32;out&#32;scanline&#32;in&#32;the&#32;in&#32;scanline&#32;space</emphasis>
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;out_first_scanline,&#32;out_last_scanline;
2180 
2181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__calculate_sample_range_downsample(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;in_pixels_radius,&#32;scale_ratio,&#32;stbir_info-&gt;vertical_shift,&#32;&amp;out_first_scanline,&#32;&amp;out_last_scanline,&#32;&amp;out_center_of_in);
2182 
2183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(out_last_scanline&#32;-&#32;out_first_scanline&#32;+&#32;1&#32;&lt;=&#32;stbir_info-&gt;ring_buffer_num_entries);
2184 
2185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(out_last_scanline&#32;&lt;&#32;0&#32;||&#32;out_first_scanline&#32;&gt;=&#32;output_h)
2186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
2187 
2188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__empty_ring_buffer(stbir_info,&#32;out_first_scanline);
2189 
2190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__decode_and_resample_downsample(stbir_info,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>);
2191 
2192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Load&#32;in&#32;new&#32;ones.</emphasis>
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir_info-&gt;ring_buffer_begin_index&#32;&lt;&#32;0)
2194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__add_empty_ring_buffer_entry(stbir_info,&#32;out_first_scanline);
2195 
2196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(out_last_scanline&#32;&gt;&#32;stbir_info-&gt;ring_buffer_last_scanline)
2197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__add_empty_ring_buffer_entry(stbir_info,&#32;stbir_info-&gt;ring_buffer_last_scanline&#32;+&#32;1);
2198 
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;the&#32;horizontal&#32;buffer&#32;is&#32;ready&#32;to&#32;write&#32;to&#32;all&#32;ring&#32;buffer&#32;rows.</emphasis>
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__resample_vertical_downsample(stbir_info,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>);
2201 &#32;&#32;&#32;&#32;}
2202 
2203 &#32;&#32;&#32;&#32;stbir__empty_ring_buffer(stbir_info,&#32;stbir_info-&gt;output_h);
2204 }
2205 
2206 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__setup(stbir__info&#32;*info,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels)
2207 {
2208 &#32;&#32;&#32;&#32;info-&gt;input_w&#32;=&#32;input_w;
2209 &#32;&#32;&#32;&#32;info-&gt;input_h&#32;=&#32;input_h;
2210 &#32;&#32;&#32;&#32;info-&gt;output_w&#32;=&#32;output_w;
2211 &#32;&#32;&#32;&#32;info-&gt;output_h&#32;=&#32;output_h;
2212 &#32;&#32;&#32;&#32;info-&gt;channels&#32;=&#32;channels;
2213 }
2214 
2215 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__calculate_transform(stbir__info&#32;*info,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;*transform)
2216 {
2217 &#32;&#32;&#32;&#32;info-&gt;s0&#32;=&#32;s0;
2218 &#32;&#32;&#32;&#32;info-&gt;t0&#32;=&#32;t0;
2219 &#32;&#32;&#32;&#32;info-&gt;s1&#32;=&#32;s1;
2220 &#32;&#32;&#32;&#32;info-&gt;t1&#32;=&#32;t1;
2221 
2222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(transform)
2223 &#32;&#32;&#32;&#32;{
2224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;horizontal_scale&#32;=&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[0];
2225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;vertical_scale&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[1];
2226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;horizontal_shift&#32;=&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[2];
2227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;vertical_shift&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[3];
2228 &#32;&#32;&#32;&#32;}
2229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2230 &#32;&#32;&#32;&#32;{
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;horizontal_scale&#32;=&#32;((float)info-&gt;output_w&#32;/&#32;info-&gt;input_w)&#32;/&#32;(s1&#32;-&#32;s0);
2232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;vertical_scale&#32;=&#32;((float)info-&gt;output_h&#32;/&#32;info-&gt;input_h)&#32;/&#32;(t1&#32;-&#32;t0);
2233 
2234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;horizontal_shift&#32;=&#32;s0&#32;*&#32;info-&gt;output_w&#32;/&#32;(s1&#32;-&#32;s0);
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;vertical_shift&#32;=&#32;t0&#32;*&#32;info-&gt;output_h&#32;/&#32;(t1&#32;-&#32;t0);
2236 &#32;&#32;&#32;&#32;}
2237 }
2238 
2239 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;stbir__choose_filter(stbir__info&#32;*info,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;h_filter,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;v_filter)
2240 {
2241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h_filter&#32;==&#32;0)
2242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h_filter&#32;=&#32;stbir__use_upsampling(info-&gt;horizontal_scale)&#32;?&#32;STBIR_DEFAULT_FILTER_UPSAMPLE&#32;:&#32;STBIR_DEFAULT_FILTER_DOWNSAMPLE;
2243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v_filter&#32;==&#32;0)
2244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v_filter&#32;=&#32;stbir__use_upsampling(info-&gt;vertical_scale)&#32;&#32;&#32;?&#32;STBIR_DEFAULT_FILTER_UPSAMPLE&#32;:&#32;STBIR_DEFAULT_FILTER_DOWNSAMPLE;
2245 &#32;&#32;&#32;&#32;info-&gt;horizontal_filter&#32;=&#32;h_filter;
2246 &#32;&#32;&#32;&#32;info-&gt;vertical_filter&#32;=&#32;v_filter;
2247 }
2248 
2249 <emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>&#32;stbir__calculate_memory(stbir__info&#32;*info)
2250 {
2251 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pixel_margin&#32;=&#32;stbir__get_filter_pixel_margin(info-&gt;horizontal_filter,&#32;info-&gt;horizontal_scale);
2252 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;filter_height&#32;=&#32;stbir__get_filter_pixel_width(info-&gt;vertical_filter,&#32;info-&gt;vertical_scale);
2253 
2254 &#32;&#32;&#32;&#32;info-&gt;horizontal_num_contributors&#32;=&#32;stbir__get_contributors(info-&gt;horizontal_scale,&#32;info-&gt;horizontal_filter,&#32;info-&gt;input_w,&#32;info-&gt;output_w);
2255 &#32;&#32;&#32;&#32;info-&gt;vertical_num_contributors&#32;&#32;&#32;=&#32;stbir__get_contributors(info-&gt;vertical_scale&#32;&#32;,&#32;info-&gt;vertical_filter&#32;&#32;,&#32;info-&gt;input_h,&#32;info-&gt;output_h);
2256 
2257 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;One&#32;extra&#32;entry&#32;because&#32;floating&#32;point&#32;precision&#32;problems&#32;sometimes&#32;cause&#32;an&#32;extra&#32;to&#32;be&#32;necessary.</emphasis>
2258 &#32;&#32;&#32;&#32;info-&gt;ring_buffer_num_entries&#32;=&#32;filter_height&#32;+&#32;1;
2259 
2260 &#32;&#32;&#32;&#32;info-&gt;horizontal_contributors_size&#32;=&#32;info-&gt;horizontal_num_contributors&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(stbir__contributors);
2261 &#32;&#32;&#32;&#32;info-&gt;horizontal_coefficients_size&#32;=&#32;stbir__get_total_horizontal_coefficients(info)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(float);
2262 &#32;&#32;&#32;&#32;info-&gt;vertical_contributors_size&#32;=&#32;info-&gt;vertical_num_contributors&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(stbir__contributors);
2263 &#32;&#32;&#32;&#32;info-&gt;vertical_coefficients_size&#32;=&#32;stbir__get_total_vertical_coefficients(info)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(float);
2264 &#32;&#32;&#32;&#32;info-&gt;decode_buffer_size&#32;=&#32;(info-&gt;input_w&#32;+&#32;pixel_margin&#32;*&#32;2)&#32;*&#32;info-&gt;channels&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>);
2265 &#32;&#32;&#32;&#32;info-&gt;horizontal_buffer_size&#32;=&#32;info-&gt;output_w&#32;*&#32;info-&gt;channels&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(float);
2266 &#32;&#32;&#32;&#32;info-&gt;ring_buffer_size&#32;=&#32;info-&gt;output_w&#32;*&#32;info-&gt;channels&#32;*&#32;info-&gt;ring_buffer_num_entries&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(float);
2267 &#32;&#32;&#32;&#32;info-&gt;encode_buffer_size&#32;=&#32;info-&gt;output_w&#32;*&#32;info-&gt;channels&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(float);
2268 
2269 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;horizontal_filter&#32;!=&#32;0);
2270 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;horizontal_filter&#32;&lt;&#32;STBIR__ARRAY_SIZE(stbir__filter_info_table));&#32;<emphasis role="comment">//&#32;this&#32;now&#32;happens&#32;too&#32;late</emphasis>
2271 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;vertical_filter&#32;!=&#32;0);
2272 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;vertical_filter&#32;&lt;&#32;STBIR__ARRAY_SIZE(stbir__filter_info_table));&#32;<emphasis role="comment">//&#32;this&#32;now&#32;happens&#32;too&#32;late</emphasis>
2273 
2274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_height_upsampling(info))
2275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;horizontal&#32;buffer&#32;is&#32;for&#32;when&#32;we&apos;re&#32;downsampling&#32;the&#32;height&#32;and&#32;we</emphasis>
2276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&apos;t&#32;output&#32;the&#32;result&#32;of&#32;sampling&#32;the&#32;decode&#32;buffer&#32;directly&#32;into&#32;the</emphasis>
2277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ring&#32;buffers.</emphasis>
2278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;horizontal_buffer_size&#32;=&#32;0;
2279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;encode&#32;buffer&#32;is&#32;to&#32;retain&#32;precision&#32;in&#32;the&#32;height&#32;upsampling&#32;method</emphasis>
2281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;isn&apos;t&#32;used&#32;when&#32;height&#32;downsampling.</emphasis>
2282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;encode_buffer_size&#32;=&#32;0;
2283 
2284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;info-&gt;horizontal_contributors_size&#32;+&#32;info-&gt;horizontal_coefficients_size
2285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;info-&gt;vertical_contributors_size&#32;+&#32;info-&gt;vertical_coefficients_size
2286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;info-&gt;decode_buffer_size&#32;+&#32;info-&gt;horizontal_buffer_size
2287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;info-&gt;ring_buffer_size&#32;+&#32;info-&gt;encode_buffer_size;
2288 }
2289 
2290 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__resize_allocated(stbir__info&#32;*info,
2291 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;input_data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;output_data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2293 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,
2294 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_vertical,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;colorspace,
2295 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;tempmem,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;tempmem_size_in_bytes)
2296 {
2297 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;memory_required&#32;=&#32;stbir__calculate_memory(info);
2298 
2299 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;width_stride_input&#32;=&#32;input_stride_in_bytes&#32;?&#32;input_stride_in_bytes&#32;:&#32;info-&gt;channels&#32;*&#32;info-&gt;input_w&#32;*&#32;stbir__type_size[<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>];
2300 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;width_stride_output&#32;=&#32;output_stride_in_bytes&#32;?&#32;output_stride_in_bytes&#32;:&#32;info-&gt;channels&#32;*&#32;info-&gt;output_w&#32;*&#32;stbir__type_size[<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>];
2301 
2302 <emphasis role="preprocessor">#ifdef&#32;STBIR_DEBUG_OVERWRITE_TEST</emphasis>
2303 <emphasis role="preprocessor">#define&#32;OVERWRITE_ARRAY_SIZE&#32;8</emphasis>
2304 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;overwrite_output_before_pre[OVERWRITE_ARRAY_SIZE];
2305 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;overwrite_tempmem_before_pre[OVERWRITE_ARRAY_SIZE];
2306 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;overwrite_output_after_pre[OVERWRITE_ARRAY_SIZE];
2307 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;overwrite_tempmem_after_pre[OVERWRITE_ARRAY_SIZE];
2308 
2309 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;begin_forbidden&#32;=&#32;width_stride_output&#32;*&#32;(info-&gt;output_h&#32;-&#32;1)&#32;+&#32;info-&gt;output_w&#32;*&#32;info-&gt;channels&#32;*&#32;stbir__type_size[<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>];
2310 &#32;&#32;&#32;&#32;memcpy(overwrite_output_before_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)output_data)[-OVERWRITE_ARRAY_SIZE],&#32;OVERWRITE_ARRAY_SIZE);
2311 &#32;&#32;&#32;&#32;memcpy(overwrite_output_after_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)output_data)[begin_forbidden],&#32;OVERWRITE_ARRAY_SIZE);
2312 &#32;&#32;&#32;&#32;memcpy(overwrite_tempmem_before_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)tempmem)[-OVERWRITE_ARRAY_SIZE],&#32;OVERWRITE_ARRAY_SIZE);
2313 &#32;&#32;&#32;&#32;memcpy(overwrite_tempmem_after_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)tempmem)[tempmem_size_in_bytes],&#32;OVERWRITE_ARRAY_SIZE);
2314 <emphasis role="preprocessor">#endif</emphasis>
2315 
2316 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;channels&#32;&gt;=&#32;0);
2317 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;channels&#32;&lt;=&#32;STBIR_MAX_CHANNELS);
2318 
2319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(info-&gt;channels&#32;&lt;&#32;0&#32;||&#32;info-&gt;channels&#32;&gt;&#32;STBIR_MAX_CHANNELS)
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2321 
2322 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;horizontal_filter&#32;&lt;&#32;STBIR__ARRAY_SIZE(stbir__filter_info_table));
2323 &#32;&#32;&#32;&#32;STBIR_ASSERT(info-&gt;vertical_filter&#32;&lt;&#32;STBIR__ARRAY_SIZE(stbir__filter_info_table));
2324 
2325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(info-&gt;horizontal_filter&#32;&gt;=&#32;STBIR__ARRAY_SIZE(stbir__filter_info_table))
2326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(info-&gt;vertical_filter&#32;&gt;=&#32;STBIR__ARRAY_SIZE(stbir__filter_info_table))
2328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2329 
2330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(alpha_channel&#32;&lt;&#32;0)
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;|=&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>&#32;|&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1af1dbff54b404455740b7f9d04b5a0177">STBIR_FLAG_ALPHA_PREMULTIPLIED</link>;
2332 
2333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a9d16fb3c3edd34d11e8e76b046208296">STBIR_FLAG_ALPHA_USES_COLORSPACE</link>)&#32;||&#32;!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&amp;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1af1dbff54b404455740b7f9d04b5a0177">STBIR_FLAG_ALPHA_PREMULTIPLIED</link>))&#32;{
2334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT(alpha_channel&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;alpha_channel&#32;&lt;&#32;info-&gt;channels);
2335 &#32;&#32;&#32;&#32;}
2336 
2337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(alpha_channel&#32;&gt;=&#32;info-&gt;channels)
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2339 
2340 &#32;&#32;&#32;&#32;STBIR_ASSERT(tempmem);
2341 
2342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tempmem)
2343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2344 
2345 &#32;&#32;&#32;&#32;STBIR_ASSERT(tempmem_size_in_bytes&#32;&gt;=&#32;memory_required);
2346 
2347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tempmem_size_in_bytes&#32;&lt;&#32;memory_required)
2348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2349 
2350 &#32;&#32;&#32;&#32;memset(tempmem,&#32;0,&#32;tempmem_size_in_bytes);
2351 
2352 &#32;&#32;&#32;&#32;info-&gt;input_data&#32;=&#32;input_data;
2353 &#32;&#32;&#32;&#32;info-&gt;input_stride_bytes&#32;=&#32;width_stride_input;
2354 
2355 &#32;&#32;&#32;&#32;info-&gt;output_data&#32;=&#32;output_data;
2356 &#32;&#32;&#32;&#32;info-&gt;output_stride_bytes&#32;=&#32;width_stride_output;
2357 
2358 &#32;&#32;&#32;&#32;info-&gt;alpha_channel&#32;=&#32;alpha_channel;
2359 &#32;&#32;&#32;&#32;info-&gt;flags&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>;
2360 &#32;&#32;&#32;&#32;info-&gt;type&#32;=&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;
2361 &#32;&#32;&#32;&#32;info-&gt;edge_horizontal&#32;=&#32;edge_horizontal;
2362 &#32;&#32;&#32;&#32;info-&gt;edge_vertical&#32;=&#32;edge_vertical;
2363 &#32;&#32;&#32;&#32;info-&gt;colorspace&#32;=&#32;colorspace;
2364 
2365 &#32;&#32;&#32;&#32;info-&gt;horizontal_coefficient_width&#32;&#32;&#32;=&#32;stbir__get_coefficient_width&#32;&#32;(info-&gt;horizontal_filter,&#32;info-&gt;horizontal_scale);
2366 &#32;&#32;&#32;&#32;info-&gt;vertical_coefficient_width&#32;&#32;&#32;&#32;&#32;=&#32;stbir__get_coefficient_width&#32;&#32;(info-&gt;vertical_filter&#32;&#32;,&#32;info-&gt;vertical_scale&#32;&#32;);
2367 &#32;&#32;&#32;&#32;info-&gt;horizontal_filter_pixel_width&#32;&#32;=&#32;stbir__get_filter_pixel_width&#32;(info-&gt;horizontal_filter,&#32;info-&gt;horizontal_scale);
2368 &#32;&#32;&#32;&#32;info-&gt;vertical_filter_pixel_width&#32;&#32;&#32;&#32;=&#32;stbir__get_filter_pixel_width&#32;(info-&gt;vertical_filter&#32;&#32;,&#32;info-&gt;vertical_scale&#32;&#32;);
2369 &#32;&#32;&#32;&#32;info-&gt;horizontal_filter_pixel_margin&#32;=&#32;stbir__get_filter_pixel_margin(info-&gt;horizontal_filter,&#32;info-&gt;horizontal_scale);
2370 &#32;&#32;&#32;&#32;info-&gt;vertical_filter_pixel_margin&#32;&#32;&#32;=&#32;stbir__get_filter_pixel_margin(info-&gt;vertical_filter&#32;&#32;,&#32;info-&gt;vertical_scale&#32;&#32;);
2371 
2372 &#32;&#32;&#32;&#32;info-&gt;ring_buffer_length_bytes&#32;=&#32;info-&gt;output_w&#32;*&#32;info-&gt;channels&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(float);
2373 &#32;&#32;&#32;&#32;info-&gt;decode_buffer_pixels&#32;=&#32;info-&gt;input_w&#32;+&#32;info-&gt;horizontal_filter_pixel_margin&#32;*&#32;2;
2374 
2375 <emphasis role="preprocessor">#define&#32;STBIR__NEXT_MEMPTR(current,&#32;newtype)&#32;(newtype*)(((unsigned&#32;char*)current)&#32;+&#32;current##_size)</emphasis>
2376 
2377 &#32;&#32;&#32;&#32;info-&gt;horizontal_contributors&#32;=&#32;(stbir__contributors&#32;*)&#32;tempmem;
2378 &#32;&#32;&#32;&#32;info-&gt;horizontal_coefficients&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;horizontal_contributors,&#32;<emphasis role="keywordtype">float</emphasis>);
2379 &#32;&#32;&#32;&#32;info-&gt;vertical_contributors&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;horizontal_coefficients,&#32;stbir__contributors);
2380 &#32;&#32;&#32;&#32;info-&gt;vertical_coefficients&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;vertical_contributors,&#32;<emphasis role="keywordtype">float</emphasis>);
2381 &#32;&#32;&#32;&#32;info-&gt;decode_buffer&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;vertical_coefficients,&#32;<emphasis role="keywordtype">float</emphasis>);
2382 
2383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_height_upsampling(info))
2384 &#32;&#32;&#32;&#32;{
2385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;horizontal_buffer&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
2386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;ring_buffer&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;decode_buffer,&#32;<emphasis role="keywordtype">float</emphasis>);
2387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;encode_buffer&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;ring_buffer,&#32;<emphasis role="keywordtype">float</emphasis>);
2388 
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT((<emphasis role="keywordtype">size_t</emphasis>)STBIR__NEXT_MEMPTR(info-&gt;encode_buffer,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)&#32;==&#32;(<emphasis role="keywordtype">size_t</emphasis>)tempmem&#32;+&#32;tempmem_size_in_bytes);
2390 &#32;&#32;&#32;&#32;}
2391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2392 &#32;&#32;&#32;&#32;{
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;horizontal_buffer&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;decode_buffer,&#32;<emphasis role="keywordtype">float</emphasis>);
2394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;ring_buffer&#32;=&#32;STBIR__NEXT_MEMPTR(info-&gt;horizontal_buffer,&#32;<emphasis role="keywordtype">float</emphasis>);
2395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info-&gt;encode_buffer&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
2396 
2397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STBIR_ASSERT((<emphasis role="keywordtype">size_t</emphasis>)STBIR__NEXT_MEMPTR(info-&gt;ring_buffer,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)&#32;==&#32;(<emphasis role="keywordtype">size_t</emphasis>)tempmem&#32;+&#32;tempmem_size_in_bytes);
2398 &#32;&#32;&#32;&#32;}
2399 
2400 <emphasis role="preprocessor">#undef&#32;STBIR__NEXT_MEMPTR</emphasis>
2401 
2402 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;signals&#32;that&#32;the&#32;ring&#32;buffer&#32;is&#32;empty</emphasis>
2403 &#32;&#32;&#32;&#32;info-&gt;ring_buffer_begin_index&#32;=&#32;-1;
2404 
2405 &#32;&#32;&#32;&#32;stbir__calculate_filters(info-&gt;horizontal_contributors,&#32;info-&gt;horizontal_coefficients,&#32;info-&gt;horizontal_filter,&#32;info-&gt;horizontal_scale,&#32;info-&gt;horizontal_shift,&#32;info-&gt;input_w,&#32;info-&gt;output_w);
2406 &#32;&#32;&#32;&#32;stbir__calculate_filters(info-&gt;vertical_contributors,&#32;info-&gt;vertical_coefficients,&#32;info-&gt;vertical_filter,&#32;info-&gt;vertical_scale,&#32;info-&gt;vertical_shift,&#32;info-&gt;input_h,&#32;info-&gt;output_h);
2407 
2408 &#32;&#32;&#32;&#32;STBIR_PROGRESS_REPORT(0);
2409 
2410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stbir__use_height_upsampling(info))
2411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__buffer_loop_upsample(info);
2412 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stbir__buffer_loop_downsample(info);
2414 
2415 &#32;&#32;&#32;&#32;STBIR_PROGRESS_REPORT(1);
2416 
2417 <emphasis role="preprocessor">#ifdef&#32;STBIR_DEBUG_OVERWRITE_TEST</emphasis>
2418 &#32;&#32;&#32;&#32;STBIR_ASSERT(memcmp(overwrite_output_before_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)output_data)[-OVERWRITE_ARRAY_SIZE],&#32;OVERWRITE_ARRAY_SIZE)&#32;==&#32;0);
2419 &#32;&#32;&#32;&#32;STBIR_ASSERT(memcmp(overwrite_output_after_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)output_data)[begin_forbidden],&#32;OVERWRITE_ARRAY_SIZE)&#32;==&#32;0);
2420 &#32;&#32;&#32;&#32;STBIR_ASSERT(memcmp(overwrite_tempmem_before_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)tempmem)[-OVERWRITE_ARRAY_SIZE],&#32;OVERWRITE_ARRAY_SIZE)&#32;==&#32;0);
2421 &#32;&#32;&#32;&#32;STBIR_ASSERT(memcmp(overwrite_tempmem_after_pre,&#32;&amp;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)tempmem)[tempmem_size_in_bytes],&#32;OVERWRITE_ARRAY_SIZE)&#32;==&#32;0);
2422 <emphasis role="preprocessor">#endif</emphasis>
2423 
2424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
2425 }
2426 
2427 
2428 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;stbir__resize_arbitrary(
2429 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context,
2430 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;input_data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2431 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;output_data,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2432 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;s0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;*transform,
2433 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1abfd2d1a0b44b4b7513710cf96f0358d0">stbir_uint32</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,
2434 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;h_filter,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;v_filter,
2435 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_vertical,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;colorspace)
2436 {
2437 &#32;&#32;&#32;&#32;stbir__info&#32;info;
2438 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
2439 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;memory_required;
2440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;extra_memory;
2441 
2442 &#32;&#32;&#32;&#32;stbir__setup(&amp;info,&#32;input_w,&#32;input_h,&#32;output_w,&#32;output_h,&#32;channels);
2443 &#32;&#32;&#32;&#32;stbir__calculate_transform(&amp;info,&#32;s0,t0,s1,t1,transform);
2444 &#32;&#32;&#32;&#32;stbir__choose_filter(&amp;info,&#32;h_filter,&#32;v_filter);
2445 &#32;&#32;&#32;&#32;memory_required&#32;=&#32;stbir__calculate_memory(&amp;info);
2446 &#32;&#32;&#32;&#32;extra_memory&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2textures_8c_1a58f66f9af24c349443498e584d2c558f">STBIR_MALLOC</link>(memory_required,&#32;alloc_context);
2447 
2448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!extra_memory)
2449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2450 
2451 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;stbir__resize_allocated(&amp;info,&#32;input_data,&#32;input_stride_in_bytes,
2452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_data,&#32;output_stride_in_bytes,
2453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;alpha_channel,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_horizontal,&#32;edge_vertical,
2455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;colorspace,&#32;extra_memory,&#32;memory_required);
2456 
2457 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2textures_8c_1a44642af5a533bbd102db5952b451fdca">STBIR_FREE</link>(extra_memory,&#32;alloc_context);
2458 
2459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
2460 }
2461 
2462 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a1e182bf89efd8b1cc116ee371f08f2f2">stbir_resize_uint8</link>(&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels)
2465 {
2466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,-1,0,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,
2469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>);
2470 }
2471 
2472 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1af9ed9349cc0b1477c7c0161bde0bd29c">stbir_resize_float</link>(&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels)
2475 {
2476 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,-1,0,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,
2479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10edac9daf637ea73007832927d3fd707dd37">STBIR_COLORSPACE_LINEAR</link>);
2480 }
2481 
2482 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ac9858aa19a299dee80ba234cac0cd2e6">stbir_resize_uint8_srgb</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)
2485 {
2486 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,
2489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9ea2174173c9b0d0bbbe7eb7eb4c04fc086">STBIR_EDGE_CLAMP</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>);
2490 }
2491 
2492 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a39da51aef83496614a9e799e86ae1a30">stbir_resize_uint8_srgb_edgemode</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode)
2496 {
2497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093a19ab5b25f8780af8ea2cac2a3f3b4c37">STBIR_FILTER_DEFAULT</link>,
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_wrap_mode,&#32;edge_wrap_mode,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10eda3bfa984cc5ebc6eb49f9d82c4a5c34c9">STBIR_COLORSPACE_SRGB</link>);
2501 }
2502 
2503 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ab05ffc16e07a8f23070fe0cf70a197e5">stbir_resize_uint8_generic</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
2506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,
2507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context)
2508 {
2509 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(alloc_context,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a7eca722966f28fcc1f8a2c0ff57a214b">STBIR_TYPE_UINT8</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_wrap_mode,&#32;edge_wrap_mode,&#32;space);
2513 }
2514 
2515 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a095dd37e33b7159eb4e3a6814f3318bd">stbir_resize_uint16_generic</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>&#32;*input_pixels&#32;&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a71121f166a710e8a8da418ae3c86f1b9">stbir_uint16</link>&#32;*output_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
2518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,
2519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context)
2520 {
2521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(alloc_context,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7a1f4a3c0f3cb88d33c9d0922767c381b2">STBIR_TYPE_UINT16</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,
2524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_wrap_mode,&#32;edge_wrap_mode,&#32;space);
2525 }
2526 
2527 
2528 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a1d6a4f8758f5054cb93bbc914d9aa9b9">stbir_resize_float_generic</link>(&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;*input_pixels&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;*output_pixels&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
2531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_wrap_mode,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,
2532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context)
2533 {
2534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(alloc_context,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7af306ec3d4f43129b1c434eeb5a67c9d3">STBIR_TYPE_FLOAT</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a8bed50656d87c3eeed9d8f5e539c6b3e">filter</link>,
2537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_wrap_mode,&#32;edge_wrap_mode,&#32;space);
2538 }
2539 
2540 
2541 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1adaf20693c15168711c7f3d36052d43b6">stbir_resize</link>(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;datatype,
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_vertical,
2546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_horizontal,&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_vertical,
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context)
2548 {
2549 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(alloc_context,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;datatype,&#32;filter_horizontal,&#32;filter_vertical,
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_mode_horizontal,&#32;edge_mode_vertical,&#32;space);
2553 }
2554 
2555 
2556 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae7b810beb03449124736d2d1057ddfe0">stbir_resize_subpixel</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;datatype,
2559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
2560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_vertical,
2561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_horizontal,&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_vertical,
2562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context,
2563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;x_scale,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y_scale,
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;x_offset,&#32;<emphasis role="keywordtype">float</emphasis>&#32;y_offset)
2565 {
2566 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[4];
2567 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[0]&#32;=&#32;x_scale;
2568 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[1]&#32;=&#32;y_scale;
2569 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[2]&#32;=&#32;x_offset;
2570 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>[3]&#32;=&#32;y_offset;
2571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(alloc_context,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,0,1,1,transform,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;datatype,&#32;filter_horizontal,&#32;filter_vertical,
2574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_mode_horizontal,&#32;edge_mode_vertical,&#32;space);
2575 }
2576 
2577 <link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae1a1d3e88cf2d2d25c9e5864bb928050">STBIRDEF</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a0ff74bf32201a24e43f8138ee735e5f4">stbir_resize_region</link>(&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*input_pixels&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_w&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_h&#32;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_stride_in_bytes,
2578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*output_pixels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_h,&#32;<emphasis role="keywordtype">int</emphasis>&#32;output_stride_in_bytes,
2579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1ae66e0b8b43547463a26c4c9856e7feb7">stbir_datatype</link>&#32;datatype,
2580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_channels,&#32;<emphasis role="keywordtype">int</emphasis>&#32;alpha_channel,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,
2581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_horizontal,&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a66999cce1ebadfca11aa694b3d377b9e">stbir_edge</link>&#32;edge_mode_vertical,
2582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_horizontal,&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1a3be65f56c3f2d170554ea103443b4093">stbir_filter</link>&#32;filter_vertical,
2583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__image__resize_8h_1afe1a8f53b27eff69118730bc14fd10ed">stbir_colorspace</link>&#32;space,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*alloc_context,
2584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;s0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t0,&#32;<emphasis role="keywordtype">float</emphasis>&#32;s1,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t1)
2585 {
2586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stbir__resize_arbitrary(alloc_context,&#32;input_pixels,&#32;input_w,&#32;input_h,&#32;input_stride_in_bytes,
2587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_pixels,&#32;output_w,&#32;output_h,&#32;output_stride_in_bytes,
2588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s0,t0,s1,t1,<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,num_channels,alpha_channel,<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;datatype,&#32;filter_horizontal,&#32;filter_vertical,
2589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;edge_mode_horizontal,&#32;edge_mode_vertical,&#32;space);
2590 }
2591 
2592 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;STB_IMAGE_RESIZE_IMPLEMENTATION</emphasis>
2593 
2594 <emphasis role="comment">/*</emphasis>
2595 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
2596 <emphasis role="comment">This&#32;software&#32;is&#32;available&#32;under&#32;2&#32;licenses&#32;--&#32;choose&#32;whichever&#32;you&#32;prefer.</emphasis>
2597 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
2598 <emphasis role="comment">ALTERNATIVE&#32;A&#32;-&#32;MIT&#32;License</emphasis>
2599 <emphasis role="comment">Copyright&#32;(c)&#32;2017&#32;Sean&#32;Barrett</emphasis>
2600 <emphasis role="comment">Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy&#32;of</emphasis>
2601 <emphasis role="comment">this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal&#32;in</emphasis>
2602 <emphasis role="comment">the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the&#32;rights&#32;to</emphasis>
2603 <emphasis role="comment">use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell&#32;copies</emphasis>
2604 <emphasis role="comment">of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is&#32;furnished&#32;to&#32;do</emphasis>
2605 <emphasis role="comment">so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
2606 <emphasis role="comment">The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in&#32;all</emphasis>
2607 <emphasis role="comment">copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
2608 <emphasis role="comment">THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
2609 <emphasis role="comment">IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
2610 <emphasis role="comment">FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
2611 <emphasis role="comment">AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
2612 <emphasis role="comment">LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
2613 <emphasis role="comment">OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN&#32;THE</emphasis>
2614 <emphasis role="comment">SOFTWARE.</emphasis>
2615 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
2616 <emphasis role="comment">ALTERNATIVE&#32;B&#32;-&#32;Public&#32;Domain&#32;(www.unlicense.org)</emphasis>
2617 <emphasis role="comment">This&#32;is&#32;free&#32;and&#32;unencumbered&#32;software&#32;released&#32;into&#32;the&#32;public&#32;domain.</emphasis>
2618 <emphasis role="comment">Anyone&#32;is&#32;free&#32;to&#32;copy,&#32;modify,&#32;publish,&#32;use,&#32;compile,&#32;sell,&#32;or&#32;distribute&#32;this</emphasis>
2619 <emphasis role="comment">software,&#32;either&#32;in&#32;source&#32;code&#32;form&#32;or&#32;as&#32;a&#32;compiled&#32;binary,&#32;for&#32;any&#32;purpose,</emphasis>
2620 <emphasis role="comment">commercial&#32;or&#32;non-commercial,&#32;and&#32;by&#32;any&#32;means.</emphasis>
2621 <emphasis role="comment">In&#32;jurisdictions&#32;that&#32;recognize&#32;copyright&#32;laws,&#32;the&#32;author&#32;or&#32;authors&#32;of&#32;this</emphasis>
2622 <emphasis role="comment">software&#32;dedicate&#32;any&#32;and&#32;all&#32;copyright&#32;interest&#32;in&#32;the&#32;software&#32;to&#32;the&#32;public</emphasis>
2623 <emphasis role="comment">domain.&#32;We&#32;make&#32;this&#32;dedication&#32;for&#32;the&#32;benefit&#32;of&#32;the&#32;public&#32;at&#32;large&#32;and&#32;to</emphasis>
2624 <emphasis role="comment">the&#32;detriment&#32;of&#32;our&#32;heirs&#32;and&#32;successors.&#32;We&#32;intend&#32;this&#32;dedication&#32;to&#32;be&#32;an</emphasis>
2625 <emphasis role="comment">overt&#32;act&#32;of&#32;relinquishment&#32;in&#32;perpetuity&#32;of&#32;all&#32;present&#32;and&#32;future&#32;rights&#32;to</emphasis>
2626 <emphasis role="comment">this&#32;software&#32;under&#32;copyright&#32;law.</emphasis>
2627 <emphasis role="comment">THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
2628 <emphasis role="comment">IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
2629 <emphasis role="comment">FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
2630 <emphasis role="comment">AUTHORS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN</emphasis>
2631 <emphasis role="comment">ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION</emphasis>
2632 <emphasis role="comment">WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN&#32;THE&#32;SOFTWARE.</emphasis>
2633 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
2634 <emphasis role="comment">*/</emphasis>
</programlisting></section>
