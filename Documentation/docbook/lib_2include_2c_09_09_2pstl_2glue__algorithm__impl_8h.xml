<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2pstl_2glue__algorithm__impl_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/glue_algorithm_impl.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/glue_algorithm_impl.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;functional&gt;<?linebreak?>#include &quot;execution_defs.h&quot;<?linebreak?>#include &quot;utils.h&quot;<?linebreak?>#include &quot;algorithm_fwd.h&quot;<?linebreak?>#include &quot;numeric_fwd.h&quot;<?linebreak?></programlisting>Include dependency graph for glue_algorithm_impl.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2pstl_2glue__algorithm__impl_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacestd">std</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">std::any_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a66f6d03062f9318edb49d98126540ff7">std::all_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Pred __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">std::none_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Function __f)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Function &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a5bd8d5cb6d63d354aff5188eb885e8b2">std::for_each_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size __n, _Function __f)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">std::find_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79">std::find_if_not</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">std::find_end</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1ad8f4aed2165ebe2d5240b1fa234776cf">std::find_end</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">std::find_first_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1a71512565e1497b9ce56857765928e8e3">std::find_first_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">std::adjacent_find</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1aa1bf0f14825b217232cc4f177835a3b4">std::adjacent_find</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::difference_type &gt; <link linkend="_namespacestd_1a30e2af881094d0e954ce605fdd3e0993">std::count</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::difference_type &gt; <link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">std::count_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">std::search</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1a85624c38582d6a8f19c5cc603f5e5030">std::search</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">std::search_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ab25c361092dc8a9c370f721518d8df9f">std::search_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1ad65e2656aa6e6ce70150b2dfa9669cde">std::copy_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _Size __n, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1">std::copy_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200">std::swap_ranges</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _UnaryOperation __op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ad85cc45f3c0dc516af5c6f8bcd61d8e4">std::transform</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator __result, _BinaryOperation __op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">std::replace_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">std::replace</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__old_value, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryPredicate , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a2923a872c909e0531e5db0309ad30a95">std::replace_copy_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _UnaryPredicate __pred, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1aa606c48e16f23e6c4f613d187cc3675c">std::replace_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, const _Tp &amp;__old_value, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">std::fill_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">std::generate</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Generator __g)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Generator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">std::generate_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>, _Generator __g)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a11eaff910d723a0ea9707f30aead68c4">std::remove_copy_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a6b787bee96a52b5b62d7fe8aa6f15fd8">std::remove_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908">std::remove_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">std::remove</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">std::unique</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a275f04febe0d9145fede11f1d1627a2d">std::unique</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">std::unique_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1addc3e78fa4058506fec441905945106a">std::unique_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719">std::reverse</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1aa750b5b7ee58a0ba12515997f5066c49">std::reverse_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _ForwardIterator __d_first)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e">std::rotate</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a6a632f2677de3977838e216e3a33338c">std::rotate_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __middle, _ForwardIterator1 __last, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a1437bae2cd332f755a3e88e264a04525">std::is_partitioned</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">std::partition</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _BidirectionalIterator &gt; <link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">std::stable_partition</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b">std::partition_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _ForwardIterator1 __out_true, _ForwardIterator2 __out_false, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a78836d4b04390fe30b1d0cfb42bf1087">std::sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">std::stable_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9841b78691c821d191b9aa5d9d1c53a6">std::stable_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">std::mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a18b2972571349d61b13f4f75cd358f46">std::mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a1dde41f94bd1e5cfdc526470babc1a91">std::mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1aeff88a322fe7ab5920e8b5e2d8acd38c">std::mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __p)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1aba28c0609155ea9f764f40b7c48e6038">std::equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1afe0bae5a5207d612ff014fb2c16de5d4">std::equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __p)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a118dcf28eed2f57fcda6bc9ce104eaeb">std::equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">std::partial_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ab329791debf9c7a8f4a889c1061bdc7e">std::partial_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1aede1625926fee2cb08e34aed9a057213">std::partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1aeb7f6e67afcfda133325f05b62ff07df">std::partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">std::is_sorted_until</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ad84595cc9efa97a3a4dcac71313ac09a">std::is_sorted_until</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">std::is_sorted</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1ac41a95bbe3e1331f92c23363be5bb854">std::is_sorted</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">std::merge</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __d_first, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a15aa5c441c6b2acac483ff75859b033b">std::merge</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __d_first)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">std::inplace_merge</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a7715c3f4724785a62e9031f4a3b1abd7">std::inplace_merge</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">std::includes</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a3f21045ddf76c4d9d6b509f671d8ab40">std::includes</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">std::set_union</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1acbe17c0b9e5d21022cb31bf04c70c3c1">std::set_union</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">std::set_intersection</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af62ea2ea980805f2fd1b3d618f9d2f4f">std::set_intersection</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">std::set_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1afebe1b2ef2d0cc35e7ff53a696137b60">std::set_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">std::set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ac7e3ddca0a97bca42d21aa4716dcd427">std::set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">std::is_heap_until</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1ae230f0e2ee8681939a937fd9eaa7f37f">std::is_heap_until</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d">std::is_heap</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1afed3afc40878f31c5a96c44cd0a1f480">std::is_heap</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">std::min_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af7c25027b854ae83cf508a7299ecab0c">std::min_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">std::max_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a27269a7197d5ade0591a77cc101ed485">std::max_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator, _ForwardIterator &gt; &gt; <link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">std::minmax_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator, _ForwardIterator &gt; &gt; <link linkend="_namespacestd_1afb7b9758cf43dfdffabf6b265dc8edb2">std::minmax_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">std::nth_element</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ab25aacd25552d74a9237a4aff3c5f656">std::nth_element</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a19067eeaeed9ed2ab0c58efdf30a681d">std::lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
