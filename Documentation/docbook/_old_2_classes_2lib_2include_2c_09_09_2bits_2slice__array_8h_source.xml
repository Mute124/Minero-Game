<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_source" xml:lang="en-US">
<title>slice_array.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/slice_array.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;The&#32;template&#32;and&#32;inlines&#32;for&#32;the&#32;-*-&#32;C++&#32;-*-&#32;slice_array&#32;class.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Gabriel&#32;Dos&#32;Reis&#32;&lt;Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr&gt;</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_SLICE_ARRAY_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_SLICE_ARRAY_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
59 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>slice
60 &#32;&#32;{
61 &#32;&#32;<emphasis role="keyword">public</emphasis>:
63 &#32;&#32;&#32;&#32;slice();
64 
72 &#32;&#32;&#32;&#32;slice(<emphasis role="keywordtype">size_t</emphasis>&#32;__o,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__d,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s);
73 
75 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>()&#32;<emphasis role="keyword">const</emphasis>;
77 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>;
79 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af167f0227db62527e3f6b3685385aa8e">stride</link>()&#32;<emphasis role="keyword">const</emphasis>;
80 
81 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&gt;=&#32;201907L</emphasis>
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;slice&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
84 <emphasis role="preprocessor">#endif</emphasis>
85 
86 &#32;&#32;<emphasis role="keyword">private</emphasis>:
87 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_off;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;offset</emphasis>
88 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_sz;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size</emphasis>
89 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_st;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stride&#32;unit</emphasis>
90 &#32;&#32;};
91 
92 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
93 &#32;&#32;<emphasis role="comment">//&#32;543.&#32;valarray&#32;slice&#32;default&#32;constructor</emphasis>
94 &#32;&#32;<emphasis role="keyword">inline</emphasis>
95 &#32;&#32;slice::slice()&#32;
96 &#32;&#32;:&#32;_M_off(0),&#32;_M_sz(0),&#32;_M_st(0)&#32;{}
97 
98 &#32;&#32;<emphasis role="keyword">inline</emphasis>
99 &#32;&#32;slice::slice(<emphasis role="keywordtype">size_t</emphasis>&#32;__o,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__d,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s)
100 &#32;&#32;:&#32;_M_off(__o),&#32;_M_sz(__d),&#32;_M_st(__s)&#32;{}
101 
102 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
103 &#32;&#32;slice::start()<emphasis role="keyword">&#32;const</emphasis>
104 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_off;&#32;}
105 
106 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
107 &#32;&#32;slice::size()<emphasis role="keyword">&#32;const</emphasis>
108 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_sz;&#32;}
109 
110 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
111 &#32;&#32;slice::stride()<emphasis role="keyword">&#32;const</emphasis>
112 <emphasis role="keyword">&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_st;&#32;}
113 
127 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>slice_array
129 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
132 
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;253.&#32;valarray&#32;helper&#32;functions&#32;are&#32;almost&#32;entirely&#32;useless</emphasis>
135 
137 &#32;&#32;&#32;&#32;&#32;&#32;slice_array(<emphasis role="keyword">const</emphasis>&#32;slice_array&amp;);
138 
141 &#32;&#32;&#32;&#32;&#32;&#32;slice_array&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;slice_array&amp;);
142 
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~slice_array&#32;();</emphasis>
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
174 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
176 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
180 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
186 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
188 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
190 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
191 
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>valarray&lt;_Tp&gt;;
194 &#32;&#32;&#32;&#32;&#32;&#32;slice_array(_Array&lt;_Tp&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;);
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_sz;
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_stride;
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Array&lt;_Tp&gt;&#32;_M_array;
199 
200 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not&#32;implemented</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;slice_array();
203 <emphasis role="preprocessor">#else</emphasis>
204 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
205 &#32;&#32;&#32;&#32;&#32;&#32;slice_array()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
206 <emphasis role="preprocessor">#endif</emphasis>
207 &#32;&#32;&#32;&#32;};
208 
209 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
211 &#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::slice_array(_Array&lt;_Tp&gt;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;slice&amp;&#32;__s)
212 &#32;&#32;&#32;&#32;:&#32;_M_sz(__s.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()),&#32;_M_stride(__s.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af167f0227db62527e3f6b3685385aa8e">stride</link>()),
213 &#32;&#32;&#32;&#32;&#32;&#32;_M_array(__a.<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;+&#32;__s.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>())&#32;{}
214 
215 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
217 &#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::slice_array(<emphasis role="keyword">const</emphasis>&#32;slice_array&lt;_Tp&gt;&amp;&#32;__a)
218 &#32;&#32;&#32;&#32;:&#32;_M_sz(__a._M_sz),&#32;_M_stride(__a._M_stride),&#32;_M_array(__a._M_array)&#32;{}
219 
220 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;template&lt;typename&#32;_Tp&gt;</emphasis>
221 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;inline&#32;slice_array&lt;_Tp&gt;::~slice_array&#32;()&#32;{}</emphasis>
222 
223 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
224 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;slice_array&lt;_Tp&gt;&amp;
225 &#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;slice_array&lt;_Tp&gt;&amp;&#32;__a)
226 &#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;std::__valarray_copy(__a._M_array,&#32;__a._M_sz,&#32;__a._M_stride,
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_array,&#32;_M_stride);
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
230 &#32;&#32;&#32;&#32;}
231 
232 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
234 &#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
235 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;std::__valarray_fill(_M_array,&#32;_M_sz,&#32;_M_stride,&#32;__t);&#32;}
236 
237 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
238 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
239 &#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
240 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;std::__valarray_copy(_Array&lt;_Tp&gt;(__v),&#32;_M_array,&#32;_M_sz,&#32;_M_stride);&#32;}
241 
242 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
243 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
245 &#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,_Tp&gt;&amp;&#32;__e)<emphasis role="keyword">&#32;const</emphasis>
246 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;std::__valarray_copy(__e,&#32;_M_sz,&#32;_M_array,&#32;_M_stride);&#32;}
247 
248 <emphasis role="preprocessor">#undef&#32;_DEFINE_VALARRAY_OPERATOR</emphasis>
249 <emphasis role="preprocessor">#define&#32;_DEFINE_VALARRAY_OPERATOR(_Op,_Name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
250 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
251 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
252 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::operator&#32;_Op##=(const&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)&#32;const&#32;&#32;&#32;\</emphasis>
253 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
254 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_M_array,&#32;_M_sz,&#32;_M_stride,&#32;_Array&lt;_Tp&gt;(__v));\</emphasis>
255 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
256 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
257 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;class&#32;_Dom&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
259 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
260 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;slice_array&lt;_Tp&gt;::operator&#32;_Op##=(const&#32;_Expr&lt;_Dom,_Tp&gt;&amp;&#32;__e)&#32;const\</emphasis>
261 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
262 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_M_array,&#32;_M_stride,&#32;__e,&#32;_M_sz);&#32;&#32;&#32;&#32;\</emphasis>
263 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
264 
265 
266 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(*,&#32;__multiplies)
267 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(/,&#32;__divides)
268 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(%,&#32;__modulus)
269 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(+,&#32;__plus)
270 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(-,&#32;__minus)
271 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(^,&#32;__bitwise_xor)
272 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&amp;,&#32;__bitwise_and)
273 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(|,&#32;__bitwise_or)
274 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&lt;&lt;,&#32;__shift_left)
275 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2slice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&gt;&gt;,&#32;__shift_right)
276 
277 <emphasis role="preprocessor">#undef&#32;_DEFINE_VALARRAY_OPERATOR</emphasis>
278 
280 
281 _GLIBCXX_END_NAMESPACE_VERSION
282 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
283 
284 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SLICE_ARRAY_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
