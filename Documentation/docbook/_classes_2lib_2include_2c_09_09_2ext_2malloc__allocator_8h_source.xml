<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2malloc__allocator_8h_source" xml:lang="en-US">
<title>malloc_allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/malloc_allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Allocator&#32;that&#32;wraps&#32;&quot;C&quot;&#32;malloc&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_MALLOC_ALLOCATOR_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_MALLOC_ALLOCATOR_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
37 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
39 <emphasis role="preprocessor">#endif</emphasis>
40 
41 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
42 {
43 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
53 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>malloc_allocator
55 &#32;&#32;&#32;&#32;{
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;size_type;
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;difference_type;
60 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;const_pointer;
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;const_reference;
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;malloc_allocator&lt;_Tp1&gt;&#32;other;&#32;};
69 <emphasis role="preprocessor">#endif</emphasis>
70 
71 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2103.&#32;propagate_on_container_move_assignment</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;propagate_on_container_move_assignment;
75 <emphasis role="preprocessor">#endif</emphasis>
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
78 &#32;&#32;&#32;&#32;&#32;&#32;malloc_allocator()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
81 &#32;&#32;&#32;&#32;&#32;&#32;malloc_allocator(<emphasis role="keyword">const</emphasis>&#32;malloc_allocator&amp;)&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
84 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;malloc_allocator(<emphasis role="keyword">const</emphasis>&#32;malloc_allocator&lt;_Tp1&gt;&amp;)
86 &#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
87 
88 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;~malloc_allocator()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
90 
91 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
92 &#32;&#32;&#32;&#32;&#32;&#32;address(reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
93 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;const_pointer
96 &#32;&#32;&#32;&#32;&#32;&#32;address(const_reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
97 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
98 <emphasis role="preprocessor">#endif</emphasis>
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;__n&#32;is&#32;permitted&#32;to&#32;be&#32;0.&#32;&#32;The&#32;C++&#32;standard&#32;says&#32;nothing</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;about&#32;what&#32;the&#32;return&#32;value&#32;is&#32;when&#32;__n&#32;==&#32;0.</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_Tp*
103 &#32;&#32;&#32;&#32;&#32;&#32;allocate(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;=&#32;0)
104 &#32;&#32;&#32;&#32;&#32;&#32;{
105 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
106 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3308.&#32;std::allocator&lt;void&gt;().allocate(n)</emphasis>
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;!=&#32;0,&#32;<emphasis role="stringliteral">&quot;cannot&#32;allocate&#32;incomplete&#32;types&quot;</emphasis>);
109 <emphasis role="preprocessor">#endif</emphasis>
110 
111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__n&#32;&gt;&#32;this-&gt;_M_max_size(),&#32;<emphasis role="keyword">false</emphasis>))
112 &#32;&#32;&#32;&#32;&#32;&#32;{
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3190.&#32;allocator::allocate&#32;sometimes&#32;returns&#32;too&#32;little&#32;storage</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;(std::size_t(-1)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)))
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_array_new_length();
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_alloc();
118 &#32;&#32;&#32;&#32;&#32;&#32;}
119 
120 &#32;&#32;&#32;&#32;_Tp*&#32;__ret&#32;=&#32;0;
121 <emphasis role="preprocessor">#if&#32;__cpp_aligned_new</emphasis>
122 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;&amp;&amp;&#32;_GLIBCXX_HAVE_ALIGNED_ALLOC</emphasis>
123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">alignof</emphasis>(_Tp)&#32;&gt;&#32;<emphasis role="keyword">alignof</emphasis>(std::max_align_t))
124 &#32;&#32;&#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(::aligned_alloc(<emphasis role="keyword">alignof</emphasis>(_Tp),
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)));
127 &#32;&#32;&#32;&#32;&#32;&#32;}
128 <emphasis role="preprocessor">#else</emphasis>
129 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_CHECK_MALLOC_RESULT</emphasis>
130 <emphasis role="preprocessor">#endif</emphasis>
131 <emphasis role="preprocessor">#endif</emphasis>
132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ret)
133 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(std::malloc(__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)));
134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ret)
135 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_alloc();
136 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CHECK_MALLOC_RESULT</emphasis>
137 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_CHECK_MALLOC_RESULT</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(__ret)&#32;%&#32;<emphasis role="keyword">alignof</emphasis>(_Tp))
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Memory&#32;returned&#32;by&#32;malloc&#32;is&#32;not&#32;suitably&#32;aligned&#32;for&#32;_Tp.</emphasis>
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallocate(__ret,&#32;__n);
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_alloc();
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
144 <emphasis role="preprocessor">#endif</emphasis>
145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
146 &#32;&#32;&#32;&#32;&#32;&#32;}
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__p&#32;is&#32;not&#32;permitted&#32;to&#32;be&#32;a&#32;null&#32;pointer.</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(_Tp*&#32;__p,&#32;size_type)
151 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::free(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__p));&#32;}
152 
153 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;size_type
155 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT&#32;
156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_max_size();&#32;}
157 
158 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;construct(_Up*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_constructible&lt;_Up,&#32;_Args...&gt;<link linkend="_classvalue">::value</link>)
163 &#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>&#32;*)__p)&#32;_Up(std::forward&lt;_Args&gt;(__args)...);&#32;}
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_Up*&#32;__p)
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_destructible&lt;_Up&gt;::value)
169 &#32;&#32;&#32;&#32;{&#32;__p-&gt;~_Up();&#32;}
170 <emphasis role="preprocessor">#else</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;402.&#32;wrong&#32;new&#32;expression&#32;in&#32;[some_]&#32;allocator::construct</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;construct(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
175 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>&#32;*)__p)&#32;value_type(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)&#32;{&#32;__p-&gt;~_Tp();&#32;}
179 <emphasis role="preprocessor">#endif</emphasis>
180 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;C++20</emphasis>
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
184 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;malloc_allocator&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;malloc_allocator&lt;_Up&gt;&amp;)
185 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
186 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
187 
188 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
190 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
191 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;malloc_allocator&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;malloc_allocator&lt;_Up&gt;&amp;)
192 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
193 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
194 <emphasis role="preprocessor">#endif</emphasis>
195 
196 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
197 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR&#32;size_type
198 &#32;&#32;&#32;&#32;&#32;&#32;_M_max_size()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT
199 &#32;&#32;&#32;&#32;&#32;&#32;{
200 <emphasis role="preprocessor">#if&#32;__PTRDIFF_MAX__&#32;&lt;&#32;__SIZE_MAX__</emphasis>
201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::size_t(__PTRDIFF_MAX__)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
202 <emphasis role="preprocessor">#else</emphasis>
203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::size_t(-1)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
204 <emphasis role="preprocessor">#endif</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;}
206 &#32;&#32;&#32;&#32;};
207 
208 _GLIBCXX_END_NAMESPACE_VERSION
209 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
210 
211 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
