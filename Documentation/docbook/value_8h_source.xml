<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_value_8h_source" xml:lang="en-US">
<title>value.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/value.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_date__time_8h">date_time.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_node_8h">node.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_print__to__stream_8h">print_to_stream.h</link>&quot;</emphasis>
10 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
11 <link linkend="_value_8h_1a56df52d1a29373a87698fdc09a1c1c7a">TOML_DISABLE_ARITHMETIC_WARNINGS</link>;
12 
14 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
15 
16 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
17 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_WSTRING&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;std::wstring&quot;</emphasis>
18 <emphasis role="preprocessor">#else</emphasis>
19 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_WSTRING</emphasis>
20 <emphasis role="preprocessor">#endif</emphasis>
21 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
22 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;std::u8string_view&quot;</emphasis>
23 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;const&#32;char8_t*&quot;</emphasis>
24 <emphasis role="preprocessor">#else</emphasis>
25 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW</emphasis>
26 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8</emphasis>
27 <emphasis role="preprocessor">#endif</emphasis>
28 
29 <emphasis role="preprocessor">#define&#32;TOML_SA_VALUE_EXACT_FUNC_MESSAGE(type_arg)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
30 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;The&#32;&quot;&#32;type_arg&#32;&quot;&#32;must&#32;be&#32;one&#32;of:&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
31 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW&#32;&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
32 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
33 <emphasis role="preprocessoremphasis>
34 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;losslessly&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
35 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
36 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_WSTRING&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
37 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;signed&#32;integer&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
38 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;floating-point&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
39 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
40 <emphasis role="preprocessoremphasis>
41 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;An&#32;immutable&#32;view&#32;type&#32;not&#32;requiring&#32;additional&#32;temporary&#32;storage&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
42 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string_view&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
43 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
44 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;const&#32;char*&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
45 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
46 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
47 
48 <emphasis role="preprocessor">#define&#32;TOML_SA_VALUE_FUNC_MESSAGE(type_arg)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
49 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;The&#32;&quot;&#32;type_arg&#32;&quot;&#32;must&#32;be&#32;one&#32;of:&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
50 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW&#32;&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
51 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
52 <emphasis role="preprocessoremphasis>
53 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;losslessly&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
54 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
55 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_WSTRING&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
56 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;signed&#32;integer&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
57 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;floating-point&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
58 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
59 <emphasis role="preprocessoremphasis>
60 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;(reasonably)&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;any&#32;other&#32;integer&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
62 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;floating-point&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
63 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
64 <emphasis role="preprocessoremphasis>
65 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;An&#32;immutable&#32;view&#32;type&#32;not&#32;requiring&#32;additional&#32;temporary&#32;storage&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
66 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string_view&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
67 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
68 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;const&#32;char*&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
69 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
70 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
71 
72 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
74 
76 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
77 {
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&gt;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;make(Args&amp;&amp;...&#32;args)&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_constructible_v&lt;T,&#32;Args&amp;&amp;...&gt;)
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_aggregate_v&lt;T&gt;)
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;};
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
90 &#32;&#32;&#32;&#32;};
91 
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;T,&#32;T&gt;
94 &#32;&#32;&#32;&#32;{
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;U&amp;&amp;&#32;make(U&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>U&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
102 &#32;&#32;&#32;&#32;};
103 
104 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8&#32;||&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
105 
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>string_maker
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;make(T&amp;&amp;&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>arg_type&#32;=&#32;std::decay_t&lt;T&gt;;
113 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;arg_type,&#32;char8_t*,&#32;const&#32;char8_t*&gt;)
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(arg)));
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;arg_type,&#32;std::u8string,&#32;std::u8string_view&gt;)
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(arg.data())),
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.length());
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
123 <emphasis role="preprocessor">#endif</emphasis>
124 
125 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_wide_string&lt;arg_type&gt;)
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;narrow(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(arg));
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
130 <emphasis role="preprocessor">#endif</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
132 &#32;&#32;&#32;&#32;};
133 
134 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
136 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;char8_t*&gt;&#32;:&#32;string_maker
137 &#32;&#32;&#32;&#32;{};
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;const&#32;char8_t*&gt;&#32;:&#32;string_maker
140 &#32;&#32;&#32;&#32;{};
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::u8string&gt;&#32;:&#32;string_maker
143 &#32;&#32;&#32;&#32;{};
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::u8string_view&gt;&#32;:&#32;string_maker
146 &#32;&#32;&#32;&#32;{};
147 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8</emphasis>
148 
149 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
151 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;string_maker
152 &#32;&#32;&#32;&#32;{};
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
154 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;const&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;string_maker
155 &#32;&#32;&#32;&#32;{};
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::wstring&gt;&#32;:&#32;string_maker
158 &#32;&#32;&#32;&#32;{};
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::wstring_view&gt;&#32;:&#32;string_maker
161 &#32;&#32;&#32;&#32;{};
162 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
163 
164 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8&#32;||&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
165 
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
167 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;optional&lt;T&gt;&#32;<link linkend="_toml_8hpp_1a8d0bda020a3bbeeb0ea155928f94b8da">node_integer_cast</link>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
169 &#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;==&#32;node_type::integer);
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_cvref&lt;T&gt;);
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>traits&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;</link>;
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!traits::is_signed)
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;CHAR_BIT)&#32;&lt;&#32;63)&#32;<emphasis role="comment">//&#32;63&#32;bits&#32;==&#32;int64_max</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>common_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{}&#32;+&#32;T{});
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{}&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis>common_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>common_t<emphasis role="keyword">&gt;</emphasis>(traits::max))
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{})
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;traits::min&#32;||&#32;val&#32;&gt;&#32;traits::max)
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
194 &#32;&#32;&#32;&#32;}
195 }
196 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
198 
199 <link linkend="_value_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
200 {
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType&gt;
212 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classvalue">value</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;node
213 &#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::is_native&lt;ValueType&gt;&#32;&amp;&amp;&#32;!impl::is_cvref&lt;ValueType&gt;,
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;A&#32;toml::value&lt;&gt;&#32;must&#32;model&#32;one&#32;of&#32;the&#32;native&#32;TOML&#32;value&#32;types:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1ae6ef2cd7e6c604e456b4b1bdf6bee613">TOML_SA_NATIVE_VALUE_TYPE_LIST</link>);
216 
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a05278d773b91496857f3113bdfc748d8">TOML_PARSER_TYPENAME</link>;
221 
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;as_value([[maybe_unused]]&#32;U*&#32;ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr;
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
231 
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ValueType&#32;val_;
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;flags_&#32;=&#32;value_flags::none;
234 
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;ValueType;
240 
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_arg&#32;=&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::conditional_t&lt;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same_v&lt;value_type,&#32;std::string&gt;,
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view,
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::conditional_t&lt;impl::is_one_of&lt;value_type,&#32;double,&#32;int64_t,&#32;bool&gt;,&#32;value_type,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&gt;&gt;);
251 
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classvalue">value</link>(Args&amp;&amp;...&#32;args)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(value_type(
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::native_value_maker&lt;value_type,&#32;std::decay_t&lt;Args&gt;...&gt;::make(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...))))
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;val_(impl::native_value_maker&lt;value_type,&#32;std::decay_t&lt;Args&gt;...&gt;::make(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...))
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
262 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
264 <emphasis role="preprocessor">#endif</emphasis>
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
266 
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(other),
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;other.val_&#32;},
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;other.flags_&#32;}
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
274 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
276 <emphasis role="preprocessor">#endif</emphasis>
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
278 
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;other,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(other),
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;other.val_&#32;},
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;==&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>&#32;?&#32;other.flags_&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;}
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
286 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
288 <emphasis role="preprocessor">#endif</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
290 
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<link linkend="_classvalue">value</link>&amp;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other)),
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.val_)&#32;},
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;other.flags_&#32;}
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
298 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
300 <emphasis role="preprocessor">#endif</emphasis>
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
302 
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<link linkend="_classvalue">value</link>&amp;&amp;&#32;other,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other)),
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.val_)&#32;},
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;==&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>&#32;?&#32;other.flags_&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;}
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
310 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
312 <emphasis role="preprocessor">#endif</emphasis>
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
314 
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(rhs);
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;&#32;&#32;=&#32;rhs.val_;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_&#32;=&#32;rhs.flags_;
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
323 
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(<link linkend="_classvalue">value</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs));
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.val_);
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_&#32;=&#32;rhs.flags_;
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
335 
336 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">~value</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a10f10fe8cf37059ff8a39528c39f9063">TOML_VALUE_DESTROYED</link>;
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
341 <emphasis role="preprocessor">#endif</emphasis>
342 
345 
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_type&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
361 
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ntype&#32;==&#32;node_type::none&#32;||&#32;ntype&#32;==&#32;impl::node_type_of&lt;value_type&gt;;
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
367 
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype,&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;!=&#32;node_type::none&#32;&amp;&amp;&#32;ntype&#32;!=&#32;impl::node_type_of&lt;value_type&gt;)
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;<emphasis role="keyword">this</emphasis>;
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
378 
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;!=&#32;node_type::none&#32;&amp;&amp;&#32;ntype&#32;!=&#32;impl::node_type_of&lt;value_type&gt;)
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;<emphasis role="keyword">this</emphasis>;
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
389 
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;ElemType&gt;&gt;;
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_void_v&lt;type&gt;&#32;||&#32;toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;value::is_homogeneous()&#32;must&#32;be&#32;void&#32;or&#32;one&#32;&quot;</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
399 
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_void_v&lt;type&gt;)
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;type&gt;&#32;==&#32;impl::node_type_of&lt;value_type&gt;;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
406 
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_table()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
413 
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
420 
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_array_of_tables()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
427 
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1afced5bc5ef559606e3d75268ca601709">is_value</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
434 
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;std::string&gt;;
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
441 
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;int64_t&gt;;
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
448 
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;double&gt;;
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
455 
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::is_one_of&lt;value_type,&#32;int64_t,&#32;double&gt;;
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
462 
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;bool&gt;;
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
469 
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;date&gt;;
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
476 
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;time&gt;;
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
483 
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;date_time&gt;;
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 
492 
495 
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;as_table()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
502 
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>*&#32;as_array()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
509 
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>*&#32;as_string()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;std::string&gt;(<emphasis role="keyword">this</emphasis>);
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
516 
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>*&#32;as_integer()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;int64_t&gt;(<emphasis role="keyword">this</emphasis>);
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
523 
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;double&gt;</link>*&#32;as_floating_point()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;double&gt;(<emphasis role="keyword">this</emphasis>);
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
530 
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>*&#32;as_boolean()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;bool&gt;(<emphasis role="keyword">this</emphasis>);
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
537 
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date&gt;</link>*&#32;as_date()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date&gt;(<emphasis role="keyword">this</emphasis>);
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
544 
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;time&gt;</link>*&#32;as_time()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;time&gt;(<emphasis role="keyword">this</emphasis>);
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
551 
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>*&#32;as_date_time()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date_time&gt;(<emphasis role="keyword">this</emphasis>);
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
558 
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;as_table()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
565 
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;as_array()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
572 
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>*&#32;as_string()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;std::string&gt;(<emphasis role="keyword">this</emphasis>);
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
579 
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>*&#32;as_integer()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;int64_t&gt;(<emphasis role="keyword">this</emphasis>);
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
586 
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;double&gt;</link>*&#32;as_floating_point()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;double&gt;(<emphasis role="keyword">this</emphasis>);
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
593 
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>*&#32;as_boolean()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;bool&gt;(<emphasis role="keyword">this</emphasis>);
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
600 
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date&gt;</link>*&#32;as_date()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date&gt;(<emphasis role="keyword">this</emphasis>);
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
607 
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;time&gt;</link>*&#32;as_time()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;time&gt;(<emphasis role="keyword">this</emphasis>);
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
614 
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>*&#32;as_date_time()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date_time&gt;(<emphasis role="keyword">this</emphasis>);
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
621 
623 
626 
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
633 
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
640 
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
647 
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
654 
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;operator*()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
661 
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&amp;&#32;operator*()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
668 
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
675 
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&amp;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
682 
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;value_type&amp;()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
689 
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;value_type&amp;&amp;()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
696 
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;()&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
703 
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&amp;()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
710 
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab3272d559df83418b043791473ef1016">TOML_HIDDEN_CONSTRAINT</link>(std::is_class_v&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;value_type)
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type*&#32;operator-&gt;()&#32;<emphasis role="keyword">noexcept</emphasis>
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;val_;
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
720 
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab3272d559df83418b043791473ef1016">TOML_HIDDEN_CONSTRAINT</link>(std::is_class_v&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;value_type)
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;val_;
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
730 
732 
735 
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags_;
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
742 
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>(<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;new_flags)&#32;<emphasis role="keyword">noexcept</emphasis>
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_&#32;=&#32;new_flags;
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
750 
752 
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;std::string&gt;)
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_.assign(rhs);
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;=&#32;rhs;
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
762 
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((std::is_same_v&lt;T,&#32;std::string&gt;),&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;value_type)
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(std::string&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs);
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
769 
772 
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;double&gt;)
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_nan&#32;=&#32;impl::fpclassify(lhs.val_)&#32;==&#32;impl::fp_class::nan;
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_nan&#32;=&#32;impl::fpclassify(rhs)&#32;==&#32;impl::fp_class::nan;
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_nan&#32;!=&#32;rhs_nan)
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_nan)
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;==&#32;rhs;
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;,&#32;value_arg,&#32;);
789 
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;&#32;rhs;
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
796 
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&#32;rhs.val_;
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
803 
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;=&#32;rhs;
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
810 
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;=&#32;rhs.val_;
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
817 
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;&#32;rhs;
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
824 
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;&#32;rhs.val_;
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
831 
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;=&#32;rhs;
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
838 
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;=&#32;rhs.val_;
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
845 
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;rhs.val_;&#32;<emphasis role="comment">//&#32;calls&#32;asymmetrical&#32;value-equality&#32;operator&#32;defined&#32;above</emphasis>
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
861 
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
874 
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;&#32;rhs.val_;
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&lt;&#32;impl::node_type_of&lt;T&gt;;
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
893 
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;=&#32;rhs.val_;
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&lt;=&#32;impl::node_type_of&lt;T&gt;;
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
912 
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;&#32;rhs.val_;
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&gt;&#32;impl::node_type_of&lt;T&gt;;
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
931 
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;=&#32;rhs.val_;
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&gt;=&#32;impl::node_type_of&lt;T&gt;;
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
950 
952 
953 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
954 
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
963 
964 <emphasis role="preprocessor">#endif</emphasis>
965 &#32;&#32;&#32;&#32;};
966 
968 
969 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
970 &#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(T)&#32;-&gt;&#32;<link linkend="_classvalue">value&lt;impl::native_type_of&lt;impl::remove_cvref&lt;T&gt;</link>&gt;&gt;;
971 
972 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
973 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
974 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;node::get_value_exact()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
975 &#32;&#32;&#32;&#32;{
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
977 
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;!=&#32;node_type::none);
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;!=&#32;node_type::table);
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;!=&#32;node_type::array);
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;);
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_cvref&lt;T&gt;);
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(this-&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;T&gt;);
984 
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(node_type_of&lt;T&gt;&#32;==&#32;node_type::string)
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;str&#32;=&#32;*ref_cast&lt;std::string&gt;();
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;std::string&gt;)
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;std::string_view&gt;)
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T{&#32;str&#32;};
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;const&#32;char*&gt;)
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.c_str();
994 
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;std::wstring&gt;)
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
997 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;widen(str);
999 <emphasis role="preprocessor">#else</emphasis>
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
1001 <emphasis role="preprocessor">#endif</emphasis>
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1003 
1004 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
1005 
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;char&#32;-&gt;&#32;char8_t&#32;(potentially&#32;unsafe&#32;-&#32;the&#32;feature&#32;is&#32;&apos;experimental&apos;!)</emphasis>
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;T,&#32;std::u8string,&#32;std::u8string_view&gt;)
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str.c_str()),&#32;str.length());
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;const&#32;char8_t*&gt;)
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str.c_str());
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
1013 
1014 <emphasis role="preprocessor">#endif</emphasis>
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;native_type_of&lt;T&gt;&gt;());
1018 &#32;&#32;&#32;&#32;}
1019 
1020 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1021 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1022 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;optional&lt;T&gt;&#32;node::value_exact()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
1023 &#32;&#32;&#32;&#32;{
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
1025 
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Retrieving&#32;values&#32;as&#32;wide-character&#32;strings&#32;with&#32;node::value_exact()&#32;is&#32;only&#32;&quot;</emphasis>
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
1029 
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)&amp;&amp;!is_cvref&lt;T&gt;,
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af388261a024b7ff38a50bb329d7df32c">TOML_SA_VALUE_EXACT_FUNC_MESSAGE</link>(<emphasis role="stringliteral">&quot;return&#32;type&#32;of&#32;node::value_exact()&quot;</emphasis>));
1032 
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prevent&#32;additional&#32;compiler&#32;error&#32;spam&#32;when&#32;the&#32;static_assert&#32;fails&#32;by&#32;gating&#32;behind&#32;if&#32;constexpr</emphasis>
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)&amp;&amp;!is_cvref&lt;T&gt;)
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;T&gt;)
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;this-&gt;get_value_exact&lt;T&gt;()&#32;};
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1041 &#32;&#32;&#32;&#32;}
1042 
1043 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1044 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1045 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;optional&lt;T&gt;&#32;node::value()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
1046 &#32;&#32;&#32;&#32;{
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
1048 
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Retrieving&#32;values&#32;as&#32;wide-character&#32;strings&#32;with&#32;node::value()&#32;is&#32;only&#32;&quot;</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;&#32;||&#32;can_partially_represent_native&lt;T&gt;)&amp;&amp;!is_cvref&lt;T&gt;,
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1acf0e577c1a22db8f0fb3f8120fa3babf">TOML_SA_VALUE_FUNC_MESSAGE</link>(<emphasis role="stringliteral">&quot;return&#32;type&#32;of&#32;node::value()&quot;</emphasis>));
1054 
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;asking&#32;for&#32;strings,&#32;dates,&#32;times&#32;and&#32;date_times&#32;there&apos;s&#32;no&#32;&apos;fuzzy&apos;&#32;conversion</emphasis>
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;semantics&#32;to&#32;be&#32;mindful&#32;of&#32;so&#32;the&#32;exact&#32;retrieval&#32;is&#32;enough.</emphasis>
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;std::string,&#32;time,&#32;date,&#32;date_time&gt;)
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;T&gt;)
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;this-&gt;get_value_exact&lt;T&gt;()&#32;};
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1064 
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;everything&#32;else&#32;requires&#32;a&#32;bit&#32;of&#32;logicking.</emphasis>
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>())
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;*</emphasis>
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::integer:
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;int</emphasis>
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;int64_t&gt;)
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;int64_t&gt;());
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_integer_cast&lt;T&gt;(*ref_cast&lt;int64_t&gt;());
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1081 
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;float</emphasis>
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;double&gt;)
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;*ref_cast&lt;int64_t&gt;();
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::numeric_limits&lt;T&gt;::digits&#32;&lt;&#32;64)
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;largest_whole_float&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{&#32;1&#32;}&#32;&lt;&lt;&#32;std::numeric_limits&lt;T&gt;::digits);
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;-largest_whole_float&#32;||&#32;val&#32;&gt;&#32;largest_whole_float)
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1094 
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;bool</emphasis>
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;bool&gt;)
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;int64_t&gt;());
1098 
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;anything&#32;else</emphasis>
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1103 
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;*</emphasis>
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::floating_point:
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;float</emphasis>
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;double&gt;)
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;double&gt;())&#32;};
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;*ref_cast&lt;double&gt;();
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(impl::fpclassify(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;==&#32;fp_class::ok
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;(std::numeric_limits&lt;T&gt;::lowest)()&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&gt;&#32;(std::numeric_limits&lt;T&gt;::max)()))
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1121 
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;int</emphasis>
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;int64_t&gt;)
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;*ref_cast&lt;double&gt;();
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(impl::fpclassify(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;==&#32;fp_class::ok
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_integer_cast&lt;T&gt;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1132 
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;anything&#32;else</emphasis>
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1137 
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;*</emphasis>
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::boolean:
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;bool</emphasis>
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;bool&gt;)
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;*ref_cast&lt;bool&gt;()&#32;};
1144 
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;int</emphasis>
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;int64_t&gt;)
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;bool&gt;())&#32;};
1148 
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;anything&#32;else</emphasis>
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1154 
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;non-values,&#32;or&#32;&apos;exact&apos;&#32;types&#32;covered&#32;above</emphasis>
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1158 &#32;&#32;&#32;&#32;}
1159 
1160 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1161 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1162 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;node::value_or(T&#32;&amp;&amp;&#32;default_value)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
1163 &#32;&#32;&#32;&#32;{
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
1165 
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Retrieving&#32;values&#32;as&#32;wide-character&#32;strings&#32;with&#32;node::value_or()&#32;is&#32;only&#32;&quot;</emphasis>
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
1169 
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_wide_string&lt;T&gt;)
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1172 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1173 
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type::string)
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;widen(*ref_cast&lt;std::string&gt;());
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::wstring{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value)&#32;};
1177 
1178 <emphasis role="preprocessor">#else</emphasis>
1179 
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
1181 
1182 <emphasis role="preprocessor">#endif</emphasis>
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::conditional_t&lt;std::is_pointer_v&lt;std::decay_t&lt;T&gt;&gt;,
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::add_pointer_t&lt;std::add_const_t&lt;std::remove_pointer_t&lt;std::decay_t&lt;T&gt;&gt;&gt;&gt;,
1189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::decay_t&lt;T&gt;&gt;;
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>traits&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;value_type&gt;</link>;
1191 
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1193 
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits::is_native&#32;||&#32;traits::can_represent_native&#32;||&#32;traits::can_partially_represent_native,
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;default&#32;value&#32;type&#32;of&#32;node::value_or()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab05d15b88d3ba47185125777d141c8ec">TOML_SA_LIST_NEW</link>&#32;<emphasis role="stringliteral">&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;</emphasis>
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ae6ef2cd7e6c604e456b4b1bdf6bee613">TOML_SA_NATIVE_VALUE_TYPE_LIST</link>
1199 
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab07dc1dbfccd0160587c260d261092b4">TOML_SA_LIST_NXT</link>&#32;<emphasis role="stringliteral">&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;losslessly&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;</emphasis>
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e4bd27dcda3c068fc0426c754f0b3">TOML_SA_LIST_BEG</link>&#32;<emphasis role="stringliteral">&quot;std::string&quot;</emphasis>
1202 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;std::wstring&quot;</emphasis>
1204 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;any&#32;signed&#32;integer&#32;type&#32;&gt;=&#32;64&#32;bits&quot;</emphasis>
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;any&#32;floating-point&#32;type&#32;&gt;=&#32;64&#32;bits&quot;</emphasis>
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a64f020cb6143b9513bb7aecabcd43b39">TOML_SA_LIST_END</link>
1208 
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab07dc1dbfccd0160587c260d261092b4">TOML_SA_LIST_NXT</link>&#32;<emphasis role="stringliteral">&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;(reasonably)&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;</emphasis>
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e4bd27dcda3c068fc0426c754f0b3">TOML_SA_LIST_BEG</link>&#32;<emphasis role="stringliteral">&quot;any&#32;other&#32;integer&#32;type&quot;</emphasis>
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;any&#32;floating-point&#32;type&quot;</emphasis>
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a64f020cb6143b9513bb7aecabcd43b39">TOML_SA_LIST_END</link>
1213 
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab07dc1dbfccd0160587c260d261092b4">TOML_SA_LIST_NXT</link>&#32;<emphasis role="stringliteral">&quot;A&#32;compatible&#32;view&#32;type&quot;</emphasis>
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e4bd27dcda3c068fc0426c754f0b3">TOML_SA_LIST_BEG</link>&#32;<emphasis role="stringliteral">&quot;std::string_view&quot;</emphasis>
1216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_HAS_CHAR8</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;std::u8string_view&quot;</emphasis>
1218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
1219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;std::wstring_view&quot;</emphasis>
1221 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;const&#32;char*&quot;</emphasis>
1223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_HAS_CHAR8</emphasis>
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;const&#32;char8_t*&quot;</emphasis>
1225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
1226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;const&#32;wchar_t*&quot;</emphasis>
1228 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a64f020cb6143b9513bb7aecabcd43b39">TOML_SA_LIST_END</link>
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
1231 
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1233 
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prevent&#32;additional&#32;compiler&#32;error&#32;spam&#32;when&#32;the&#32;static_assert&#32;fails&#32;by&#32;gating&#32;behind&#32;if&#32;constexpr</emphasis>
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(traits::is_native&#32;||&#32;traits::can_represent_native&#32;||&#32;traits::can_partially_represent_native)
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(traits::is_native)
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;value_type&gt;)
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ref_cast&lt;typename&#32;traits::native_type&gt;();
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;this-&gt;<link linkend="_classvalue">value&lt;value_type&gt;</link>())
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_pointer_v&lt;value_type&gt;)
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_type{&#32;default_value&#32;};
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value);
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1250 &#32;&#32;&#32;&#32;}
1251 
1253 }
1254 <link linkend="_value_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
1255 
1256 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
