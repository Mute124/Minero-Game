<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2ios__base_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ios_base.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ios_base.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;ext/atomicity.h&gt;<?linebreak?>#include &lt;bits/localefwd.h&gt;<?linebreak?>#include &lt;bits/locale_classes.h&gt;<?linebreak?>#include &lt;stdexcept&gt;<?linebreak?></programlisting>Include dependency graph for ios_base.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2bits_2ios__base_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="_lib_2include_2c_09_09_2bits_2ios__base_8h_1ga544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_lib_2include_2c_09_09_2bits_2ios__base_8h_1ga544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>ios_base.h</secondary></indexterm>
<indexterm><primary>ios_base.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>The base of the I/O class hierarchy.</para>

<para>This class defines everything that can be defined about I/O that does not depend on the type of characters being input or output. Most people will only see <computeroutput>ios_base</computeroutput> when they need to specify the full name of the various I/O flags (e.g., the openmodes).</para>

<para>These are thrown to indicate problems with io.</para>

<para>27.4.2.1.1 Class ios_base::failure</para>

<para>This is a bitmask type.</para>

<para><computeroutput><emphasis>_Ios_Fmtflags</emphasis> is</computeroutput> implementation-defined, but it is valid to perform bitwise operations on these values and expect the Right Thing to happen. Defined objects of type fmtflags are:<itemizedlist>
<listitem>
<para>boolalpha</para>
</listitem><listitem>
<para>dec</para>
</listitem><listitem>
<para>fixed</para>
</listitem><listitem>
<para>hex</para>
</listitem><listitem>
<para>internal</para>
</listitem><listitem>
<para>left</para>
</listitem><listitem>
<para>oct</para>
</listitem><listitem>
<para>right</para>
</listitem><listitem>
<para>scientific</para>
</listitem><listitem>
<para>showbase</para>
</listitem><listitem>
<para>showpoint</para>
</listitem><listitem>
<para>showpos</para>
</listitem><listitem>
<para>skipws</para>
</listitem><listitem>
<para>unitbuf</para>
</listitem><listitem>
<para>uppercase</para>
</listitem><listitem>
<para>adjustfield</para>
</listitem><listitem>
<para>basefield</para>
</listitem><listitem>
<para>floatfield</para>
</listitem></itemizedlist>
</para>

<para>Insert/extract <computeroutput>bool</computeroutput> in alphabetic rather than numeric format.</para>

<para>Converts integer input or generates integer output in decimal base.</para>

<para>Generate floating-point output in fixed-point notation.</para>

<para>Converts integer input or generates integer output in hexadecimal base.</para>

<para>Adds fill characters at a designated internal point in certain generated output, or identical to <computeroutput>right</computeroutput> if no such point is designated.</para>

<para>Adds fill characters on the right (final positions) of certain generated output. (I.e., the thing you print is flush left.)</para>

<para>Converts integer input or generates integer output in octal base.</para>

<para>Adds fill characters on the left (initial positions) of certain generated output. (I.e., the thing you print is flush right.)</para>

<para>Generates floating-point output in scientific notation.</para>

<para>Generates a prefix indicating the numeric base of generated integer output.</para>

<para>Generates a decimal-point character unconditionally in generated floating-point output.</para>

<para>Generates a + sign in non-negative generated numeric output.</para>

<para>Skips leading white space before certain input operations.</para>

<para>Flushes output after each output operation.</para>

<para>Replaces certain lowercase letters with their uppercase equivalents in generated output.</para>

<para>A mask of left|right|internal. Useful for the 2-arg form of <computeroutput>setf</computeroutput>.</para>

<para>A mask of dec|oct|hex. Useful for the 2-arg form of <computeroutput>setf</computeroutput>.</para>

<para>A mask of scientific|fixed. Useful for the 2-arg form of <computeroutput>setf</computeroutput>.</para>

<para>This is a bitmask type.</para>

<para><computeroutput><emphasis>_Ios_Iostate</emphasis> is</computeroutput> implementation-defined, but it is valid to perform bitwise operations on these values and expect the Right Thing to happen. Defined objects of type iostate are:<itemizedlist>
<listitem>
<para>badbit</para>
</listitem><listitem>
<para>eofbit</para>
</listitem><listitem>
<para>failbit</para>
</listitem><listitem>
<para>goodbit</para>
</listitem></itemizedlist>
</para>

<para>Indicates a loss of integrity in an input or output sequence (such as an irrecoverable read error from a file).</para>

<para>Indicates that an input operation reached the end of an input sequence.</para>

<para>Indicates that an input operation failed to read the expected characters, or that an output operation failed to generate the desired characters.</para>

<para>Indicates all is well.</para>

<para>This is a bitmask type.</para>

<para><computeroutput><emphasis>_Ios_Openmode</emphasis> is</computeroutput> implementation-defined, but it is valid to perform bitwise operations on these values and expect the Right Thing to happen. Defined objects of type openmode are:<itemizedlist>
<listitem>
<para>app</para>
</listitem><listitem>
<para>ate</para>
</listitem><listitem>
<para>binary</para>
</listitem><listitem>
<para>in</para>
</listitem><listitem>
<para>out</para>
</listitem><listitem>
<para>trunc</para>
</listitem></itemizedlist>
</para>

<para>Seek to end before each write.</para>

<para>Open and seek to end immediately after opening.</para>

<para>Perform input and output in binary mode (as opposed to text mode). This is probably not what you think it is; see <link xlink:href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary">https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary</link></para>

<para>Open for input. Default for <computeroutput>ifstream</computeroutput> and fstream.</para>

<para>Open for output. Default for <computeroutput>ofstream</computeroutput> and fstream.</para>

<para>Truncate an existing stream when opening. Default for <computeroutput>ofstream</computeroutput>.</para>

<para>This is an enumerated type.</para>

<para><computeroutput><emphasis>_Ios_Seekdir</emphasis> is</computeroutput> implementation-defined. Defined values of type seekdir are:<itemizedlist>
<listitem>
<para>beg</para>
</listitem><listitem>
<para>cur, equivalent to <computeroutput>SEEK_CUR</computeroutput> in the C standard library.</para>
</listitem><listitem>
<para>end, equivalent to <computeroutput>SEEK_END</computeroutput> in the C standard library.</para>
</listitem></itemizedlist>
</para>

<para>Request a seek relative to the beginning of the stream.</para>

<para>Request a seek relative to the current position within the sequence.</para>

<para>Request a seek relative to the current end of the sequence.</para>

<para>The set of events that may be passed to an event callback.</para>

<para>erase_event is used during ~ios() and copyfmt(). imbue_event is used during imbue(). copyfmt_event is used during copyfmt().</para>

<para>The type of an event callback function. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__e</entry><entry>
<para>One of the members of the event enum. </para>
</entry>
                            </row>
                            <row>
<entry>__b</entry><entry>
<para>Reference to the ios_base object. </para>
</entry>
                            </row>
                            <row>
<entry>__i</entry><entry>
<para>The integer provided when the callback was registered.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Event callbacks are user defined functions that get called during several ios_base and basic_ios functions, specifically imbue(), copyfmt(), and ~ios().</para>

<para>Add the callback __fn with parameter __index. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__fn</entry><entry>
<para>The function to add. </para>
</entry>
                            </row>
                            <row>
<entry>__index</entry><entry>
<para>The integer to pass to the function when invoked.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Registers a function as an event callback with an integer parameter to be passed to the function when invoked. Multiple copies of the function are allowed. If there are multiple callbacks, they are invoked in the order they were registered.</para>

<para>Access to format flags. <formalpara><title>Returns</title>

<para>The format control flags for both input and output.</para>
</formalpara>
Setting new format flags all at once. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__fmtfl</entry><entry>
<para>The new flags to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previous format control flags.</para>
</formalpara>
This function overwrites all the format flags with <emphasis>__fmtfl</emphasis>.</para>

<para>Setting new format flags. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__fmtfl</entry><entry>
<para>Additional flags to set. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previous format control flags.</para>
</formalpara>
This function sets additional flags in format control. Flags that were previously set remain set.</para>

<para>Setting new format flags. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__fmtfl</entry><entry>
<para>Additional flags to set. </para>
</entry>
                            </row>
                            <row>
<entry>__mask</entry><entry>
<para>The flags mask for <emphasis>fmtfl</emphasis>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previous format control flags.</para>
</formalpara>
This function clears <emphasis>mask</emphasis> in the format flags, then sets <emphasis>fmtfl</emphasis> <computeroutput>&amp;</computeroutput> <emphasis>mask</emphasis>. An example mask is <computeroutput>ios_base::adjustfield</computeroutput>.</para>

<para>Clearing format flags. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__mask</entry><entry>
<para>The flags to unset.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function clears <emphasis>__mask</emphasis> in the format flags.</para>

<para>Flags access. <formalpara><title>Returns</title>

<para>The precision to generate on certain output operations.</para>
</formalpara>
Be careful if you try to give a definition of <emphasis>precision</emphasis> here; see DR 189.</para>

<para>Changing flags. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__prec</entry><entry>
<para>The new precision value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previous value of <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae6165268264b393d031f89082216499d">precision()</link>.</para>
</formalpara>
Flags access. <formalpara><title>Returns</title>

<para>The minimum field width to generate on output operations.</para>
</formalpara>
<emphasis>Minimum field width</emphasis> refers to the number of characters.</para>

<para>Changing flags. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__wide</entry><entry>
<para>The new width value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previous value of <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width()</link>.</para>
</formalpara>
Interaction with the standard C I/O objects. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__sync</entry><entry>
<para>Whether to synchronize or not. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True if the standard streams were previously synchronized.</para>
</formalpara>
The synchronization referred to is <emphasis>only</emphasis> that between the standard C facilities (e.g., stdout) and the standard C++ objects (e.g., cout). User-declared streams are unaffected. See <link xlink:href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary">https://gcc.gnu.org/onlinedocs/libstdc++/manual/fstreams.html#std.io.filestreams.binary</link></para>

<para>Setting a new locale. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__loc</entry><entry>
<para>The new locale. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The previous locale.</para>
</formalpara>
Sets the new locale for this stream, and then invokes each callback with imbue_event.</para>

<para>Locale access <formalpara><title>Returns</title>

<para>A copy of the current locale.</para>
</formalpara>
If <computeroutput>imbue(loc)</computeroutput> has previously been called, then this function returns <computeroutput>loc</computeroutput>. Otherwise, it returns a copy of <computeroutput>std::locale()</computeroutput>, the global C++ locale.</para>

<para>Locale access <formalpara><title>Returns</title>

<para>A reference to the current locale.</para>
</formalpara>
Like getloc above, but returns a reference instead of generating a copy.</para>

<para>Access to unique indices. <formalpara><title>Returns</title>

<para>An integer different from all previous calls.</para>
</formalpara>
This function returns a unique integer every time it is called. It can be used for any purpose, but is primarily intended to be a unique index for the iword and pword functions. The expectation is that an application calls xalloc in order to obtain an index in the iword and pword arrays that can be used without fear of conflict.</para>

<para>The implementation maintains a static variable that is incremented and returned on each invocation. xalloc is guaranteed to return an index that is safe to use in the iword and pword arrays.</para>

<para>Access to integer array. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__ix</entry><entry>
<para>Index into the array. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to an integer associated with the index.</para>
</formalpara>
The iword function provides access to an array of integers that can be used for any purpose. The array grows as required to hold the supplied index. All integers in the array are initialized to 0.</para>

<para>The implementation reserves several indices. You should use xalloc to obtain an index that is safe to use. Also note that since the array can grow dynamically, it is not safe to hold onto the reference.</para>

<para>Access to void pointer array. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__ix</entry><entry>
<para>Index into the array. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to a void* associated with the index.</para>
</formalpara>
The pword function provides access to an array of pointers that can be used for any purpose. The array grows as required to hold the supplied index. All pointers in the array are initialized to 0.</para>

<para>The implementation reserves several indices. You should use xalloc to obtain an index that is safe to use. Also note that since the array can grow dynamically, it is not safe to hold onto the reference.</para>

<para>Invokes each callback with erase_event. Destroys local storage.</para>

<para>Note that the ios_base object for the standard streams never gets destroyed. As a result, any callbacks registered with the standard streams will not get invoked with erase_event (unless copyfmt is used).</para>

<para>Calls base.setf(ios_base::boolalpha).</para>

<para>Calls base.unsetf(ios_base::boolalpha).</para>

<para>Calls base.setf(ios_base::showbase).</para>

<para>Calls base.unsetf(ios_base::showbase).</para>

<para>Calls base.setf(ios_base::showpoint).</para>

<para>Calls base.unsetf(ios_base::showpoint).</para>

<para>Calls base.setf(ios_base::showpos).</para>

<para>Calls base.unsetf(ios_base::showpos).</para>

<para>Calls base.setf(ios_base::skipws).</para>

<para>Calls base.unsetf(ios_base::skipws).</para>

<para>Calls base.setf(ios_base::uppercase).</para>

<para>Calls base.unsetf(ios_base::uppercase).</para>

<para>Calls base.setf(ios_base::unitbuf).</para>

<para>Calls base.unsetf(ios_base::unitbuf).</para>

<para>Calls base.setf(ios_base::internal, ios_base::adjustfield).</para>

<para>Calls base.setf(ios_base::left, ios_base::adjustfield).</para>

<para>Calls base.setf(ios_base::right, ios_base::adjustfield).</para>

<para>Calls base.setf(ios_base::dec, ios_base::basefield).</para>

<para>Calls base.setf(ios_base::hex, ios_base::basefield).</para>

<para>Calls base.setf(ios_base::oct, ios_base::basefield).</para>

<para>Calls base.setf(ios_base::fixed, ios_base::floatfield).</para>

<para>Calls base.setf(ios_base::scientific, ios_base::floatfield).</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2bits_2ios__base_8h_ga544d74b2d5d0dd2197f5fd6f02691de0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
