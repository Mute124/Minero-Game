<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2tr1_2shared__ptr_8h_source" xml:lang="en-US">
<title>shared_ptr.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/tr1/shared_ptr.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;&lt;tr1/shared_ptr.h&gt;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;&#32;shared_count.hpp</emphasis>
26 <emphasis role="comment">//&#32;&#32;Copyright&#32;(c)&#32;2001,&#32;2002,&#32;2003&#32;Peter&#32;Dimov&#32;and&#32;Multi&#32;Media&#32;Ltd.</emphasis>
27 
28 <emphasis role="comment">//&#32;&#32;shared_ptr.hpp</emphasis>
29 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;1998,&#32;1999&#32;Greg&#32;Colvin&#32;and&#32;Beman&#32;Dawes.</emphasis>
30 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;2001,&#32;2002,&#32;2003&#32;Peter&#32;Dimov</emphasis>
31 
32 <emphasis role="comment">//&#32;&#32;weak_ptr.hpp</emphasis>
33 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;2001,&#32;2002,&#32;2003&#32;Peter&#32;Dimov</emphasis>
34 
35 <emphasis role="comment">//&#32;&#32;enable_shared_from_this.hpp</emphasis>
36 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;2002&#32;Peter&#32;Dimov</emphasis>
37 
38 <emphasis role="comment">//&#32;Distributed&#32;under&#32;the&#32;Boost&#32;Software&#32;License,&#32;Version&#32;1.0.&#32;(See</emphasis>
39 <emphasis role="comment">//&#32;accompanying&#32;file&#32;LICENSE_1_0.txt&#32;or&#32;copy&#32;at</emphasis>
40 <emphasis role="comment">//&#32;http://www.boost.org/LICENSE_1_0.txt)</emphasis>
41 
42 <emphasis role="comment">//&#32;GCC&#32;Note:&#32;&#32;based&#32;on&#32;version&#32;1.32.0&#32;of&#32;the&#32;Boost&#32;library.</emphasis>
43 
49 <emphasis role="preprocessor">#ifndef&#32;_TR1_SHARED_PTR_H</emphasis>
50 <emphasis role="preprocessor">#define&#32;_TR1_SHARED_PTR_H&#32;1</emphasis>
51 
52 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
53 {
54 _GLIBCXX_BEGIN_NAMESPACE_VERSION
55 
56 <emphasis role="keyword">namespace&#32;</emphasis>tr1
57 {
62 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>bad_weak_ptr&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classstd_1_1exception">std::exception</link>
63 &#32;&#32;{
64 &#32;&#32;<emphasis role="keyword">public</emphasis>:
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*
66 &#32;&#32;&#32;&#32;what()&#32;<emphasis role="keyword">const</emphasis>&#32;throw()
67 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;tr1::bad_weak_ptr&quot;</emphasis>;&#32;}
68 &#32;&#32;};
69 
70 &#32;&#32;<emphasis role="comment">//&#32;Substitute&#32;for&#32;bad_weak_ptr&#32;object&#32;in&#32;the&#32;case&#32;of&#32;-fno-exceptions.</emphasis>
71 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
72 &#32;&#32;__throw_bad_weak_ptr()
73 &#32;&#32;{&#32;_GLIBCXX_THROW_OR_ABORT(bad_weak_ptr());&#32;}
74 
75 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_Lock_policy;
76 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::__default_lock_policy;
77 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_S_single;
78 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_S_mutex;
79 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_S_atomic;
80 
81 &#32;&#32;<emphasis role="comment">//&#32;Empty&#32;helper&#32;class&#32;except&#32;when&#32;the&#32;template&#32;argument&#32;is&#32;_S_mutex.</emphasis>
82 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Mutex_base
84 &#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;atomic&#32;policy&#32;uses&#32;fully-fenced&#32;builtins,&#32;single&#32;doesn&apos;t&#32;care.</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_need_barriers&#32;=&#32;0&#32;};
88 &#32;&#32;&#32;&#32;};
89 
90 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Mutex_base&lt;_S_mutex&gt;
92 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__gnu_cxx::__mutex
93 &#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;policy&#32;is&#32;used&#32;when&#32;atomic&#32;builtins&#32;are&#32;not&#32;available.</emphasis>
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;replacement&#32;atomic&#32;operations&#32;might&#32;not&#32;have&#32;the&#32;necessary</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;memory&#32;barriers.</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_need_barriers&#32;=&#32;1&#32;};
99 &#32;&#32;&#32;&#32;};
100 
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_base
103 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Mutex_base&lt;_Lp&gt;
104 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;&#32;
106 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base()
107 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_use_count(1),&#32;_M_weak_count(1)&#32;{&#32;}
108 &#32;&#32;&#32;&#32;&#32;&#32;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;~_Sp_counted_base()&#32;<emphasis role="comment">//&#32;nothrow&#32;</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
112 &#32;&#32;
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;when&#32;_M_use_count&#32;drops&#32;to&#32;zero,&#32;to&#32;release&#32;the&#32;resources</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;managed&#32;by&#32;*this.</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;when&#32;_M_weak_count&#32;drops&#32;to&#32;zero.</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy()&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
122 &#32;&#32;&#32;&#32;&#32;&#32;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
124 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;)&#32;=&#32;0;
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_ref_copy()
128 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_use_count,&#32;1);&#32;}
129 &#32;&#32;
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_ref_lock();
132 &#32;&#32;&#32;&#32;&#32;&#32;
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;_M_release()&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_use_count);
138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count,&#32;-1)&#32;==&#32;1)
139 &#32;&#32;&#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_use_count);
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;must&#32;be&#32;a&#32;memory&#32;barrier&#32;between&#32;dispose()&#32;and&#32;destroy()</emphasis>
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;ensure&#32;that&#32;the&#32;effects&#32;of&#32;dispose()&#32;are&#32;observed&#32;in&#32;the</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;thread&#32;that&#32;runs&#32;destroy().</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Mutex_base&lt;_Lp&gt;::_S_need_barriers)
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_thread_fence&#32;(__ATOMIC_ACQ_REL);
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_weak_count);
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_weak_count,
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)&#32;==&#32;1)
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_weak_count);
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy();
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
159 &#32;&#32;&#32;&#32;&#32;&#32;}
160 &#32;&#32;&#32;&#32;&#32;&#32;}
161 &#32;&#32;
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;_M_weak_add_ref()&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_weak_count,&#32;1);&#32;}
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;_M_weak_release()&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_weak_count);
171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_weak_count,&#32;-1)&#32;==&#32;1)
172 &#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_weak_count);
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Mutex_base&lt;_Lp&gt;::_S_need_barriers)
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;_M_release(),</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;destroy()&#32;must&#32;observe&#32;results&#32;of&#32;dispose()</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_thread_fence&#32;(__ATOMIC_ACQ_REL);
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy();
181 &#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;&#32;&#32;&#32;&#32;}
183 &#32;&#32;
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_use_count()&#32;const&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
186 &#32;&#32;&#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;memory&#32;barrier&#32;is&#32;used&#32;here&#32;so&#32;there&#32;is&#32;no&#32;synchronization</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;other&#32;threads.</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&amp;<emphasis role="keyword">&gt;</emphasis>(_M_use_count);
190 &#32;&#32;&#32;&#32;&#32;&#32;}
191 
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:&#32;&#32;
193 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base(_Sp_counted_base&#32;<emphasis role="keyword">const</emphasis>&amp;);
194 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base&amp;&#32;operator=(_Sp_counted_base&#32;<emphasis role="keyword">const</emphasis>&amp;);
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;_M_use_count;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#shared</emphasis>
197 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;_M_weak_count;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#weak&#32;+&#32;(#shared&#32;!=&#32;0)</emphasis>
198 &#32;&#32;&#32;&#32;};
199 
200 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
201 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
202 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_single&gt;::
203 &#32;&#32;&#32;&#32;_M_add_ref_lock()
204 &#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count,&#32;1)&#32;==&#32;0)
206 &#32;&#32;&#32;&#32;{
207 &#32;&#32;&#32;&#32;&#32;&#32;_M_use_count&#32;=&#32;0;
208 &#32;&#32;&#32;&#32;&#32;&#32;__throw_bad_weak_ptr();
209 &#32;&#32;&#32;&#32;}
210 &#32;&#32;&#32;&#32;}
211 
212 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
214 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_mutex&gt;::
215 &#32;&#32;&#32;&#32;_M_add_ref_lock()
216 &#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__scoped_lock&#32;sentry(*<emphasis role="keyword">this</emphasis>);
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count,&#32;1)&#32;==&#32;0)
219 &#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;_M_use_count&#32;=&#32;0;
221 &#32;&#32;&#32;&#32;&#32;&#32;__throw_bad_weak_ptr();
222 &#32;&#32;&#32;&#32;}
223 &#32;&#32;&#32;&#32;}
224 
225 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
227 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_atomic&gt;::
228 &#32;&#32;&#32;&#32;_M_add_ref_lock()
229 &#32;&#32;&#32;&#32;{
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Perform&#32;lock-free&#32;add-if-not-zero&#32;operation.</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;_M_use_count;
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
233 &#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;==&#32;0)
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_bad_weak_ptr();
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Replace&#32;the&#32;current&#32;counter&#32;value&#32;with&#32;the&#32;old&#32;value&#32;+&#32;1,&#32;as</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;long&#32;as&#32;it&apos;s&#32;not&#32;changed&#32;meanwhile.&#32;</emphasis>
238 &#32;&#32;&#32;&#32;}
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!__atomic_compare_exchange_n(&amp;_M_use_count,&#32;&amp;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;+&#32;1,
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>,&#32;__ATOMIC_ACQ_REL,&#32;
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_RELAXED));
242 &#32;&#32;&#32;&#32;&#32;}
243 
244 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,&#32;_Lock_policy&#32;_Lp&gt;
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_base_impl
246 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_counted_base&lt;_Lp&gt;
247 &#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;__d(__p)&#32;must&#32;not&#32;throw.</emphasis>
250 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base_impl(_Ptr&#32;__p,&#32;_Deleter&#32;__d)
251 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_del(__d)&#32;{&#32;}
252 &#32;&#32;&#32;&#32;
253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
254 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
255 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_del(_M_ptr);&#32;}
256 &#32;&#32;&#32;&#32;&#32;&#32;
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
258 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;&#32;__ti)
259 &#32;&#32;&#32;&#32;&#32;&#32;{
260 <emphasis role="preprocessor">#if&#32;__cpp_rtti</emphasis>
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ti&#32;==&#32;<emphasis role="keyword">typeid</emphasis>(_Deleter)&#32;?&#32;&amp;_M_del&#32;:&#32;0;
262 <emphasis role="preprocessor">#else</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
264 <emphasis role="preprocessor">#endif</emphasis>
265 &#32;&#32;&#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;&#32;&#32;
267 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
268 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base_impl(<emphasis role="keyword">const</emphasis>&#32;_Sp_counted_base_impl&amp;);
269 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base_impl&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Sp_counted_base_impl&amp;);
270 &#32;&#32;&#32;&#32;&#32;&#32;
271 &#32;&#32;&#32;&#32;&#32;&#32;_Ptr&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr;&#32;&#32;<emphasis role="comment">//&#32;copy&#32;constructor&#32;must&#32;not&#32;throw</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;_Deleter&#32;&#32;_M_del;&#32;&#32;<emphasis role="comment">//&#32;copy&#32;constructor&#32;must&#32;not&#32;throw</emphasis>
273 &#32;&#32;&#32;&#32;};
274 
275 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
276 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_count;
277 
278 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
279 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_deleter
280 &#32;&#32;&#32;&#32;{
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;result_type;
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;argument_type;
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(_Tp*&#32;__p)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keyword">delete</emphasis>&#32;__p;&#32;}
284 &#32;&#32;&#32;&#32;};
285 
286 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count
288 &#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:&#32;
290 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count()
291 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(0)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
292 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
293 &#32;&#32;
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_count(_Ptr&#32;__p)&#32;:&#32;_M_pi(0)
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::tr1::remove_pointer&lt;_Ptr&gt;::type&#32;_Tp;
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_Sp_counted_base_impl&lt;_Ptr,&#32;_Sp_deleter&lt;_Tp&gt;,&#32;_Lp&gt;(
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p,&#32;_Sp_deleter&lt;_Tp&gt;());
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
303 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;__p;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
308 &#32;&#32;&#32;&#32;}
309 
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter&gt;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_count(_Ptr&#32;__p,&#32;_Deleter&#32;__d)&#32;:&#32;_M_pi(0)
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_Sp_counted_base_impl&lt;_Ptr,&#32;_Deleter,&#32;_Lp&gt;(__p,&#32;__d);
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
317 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__d(__p);&#32;<emphasis role="comment">//&#32;Call&#32;_Deleter&#32;on&#32;__p.</emphasis>
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
322 &#32;&#32;&#32;&#32;}
323 
324 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&lt;&#32;201103L)&#32;||&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
325 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
326 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Special&#32;case&#32;for&#32;auto_ptr&lt;_Tp&gt;&#32;to&#32;provide&#32;the&#32;strong&#32;guarantee.</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_count(std::auto_ptr&lt;_Tp&gt;&amp;&#32;__r)
331 &#32;&#32;&#32;&#32;:&#32;_M_pi(new&#32;_Sp_counted_base_impl&lt;_Tp*,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sp_deleter&lt;_Tp&gt;,&#32;_Lp&#32;&gt;(__r.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(),&#32;_Sp_deleter&lt;_Tp&gt;()))
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;__r.release();&#32;}
334 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
335 <emphasis role="preprocessor">#endif</emphasis>
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Throw&#32;bad_weak_ptr&#32;when&#32;__r._M_get_use_count()&#32;==&#32;0.</emphasis>
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r);
340 &#32;&#32;
341 &#32;&#32;&#32;&#32;&#32;&#32;~__shared_count()&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
342 &#32;&#32;&#32;&#32;&#32;&#32;{
343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
344 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_release();
345 &#32;&#32;&#32;&#32;&#32;&#32;}
346 &#32;&#32;&#32;&#32;&#32;&#32;
347 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__r)
348 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;{
350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
351 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_add_ref_copy();
352 &#32;&#32;&#32;&#32;&#32;&#32;}
353 &#32;&#32;
354 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count&amp;
355 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;_M_pi)
359 &#32;&#32;&#32;&#32;&#32;&#32;{
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;0)
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_add_ref_copy();
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_release();
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
365 &#32;&#32;&#32;&#32;&#32;&#32;}
366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
367 &#32;&#32;&#32;&#32;&#32;&#32;}
368 &#32;&#32;
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(__shared_count&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
371 &#32;&#32;&#32;&#32;&#32;&#32;{
372 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
373 &#32;&#32;&#32;&#32;__r._M_pi&#32;=&#32;_M_pi;
374 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
375 &#32;&#32;&#32;&#32;&#32;&#32;}
376 &#32;&#32;
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_use_count()&#32;const&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
379 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pi&#32;!=&#32;0&#32;?&#32;_M_pi-&gt;_M_get_use_count()&#32;:&#32;0;&#32;}
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
382 &#32;&#32;&#32;&#32;&#32;&#32;_M_unique()&#32;const&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_get_use_count()&#32;==&#32;1;&#32;}
384 &#32;&#32;&#32;&#32;&#32;&#32;
385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__b)
387 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_pi&#32;==&#32;__b._M_pi;&#32;}
388 &#32;&#32;
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__b)
391 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::less&lt;_Sp_counted_base&lt;_Lp&gt;*&gt;()(__a._M_pi,&#32;__b._M_pi);&#32;}
392 &#32;&#32;
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
394 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;&#32;__ti)<emphasis role="keyword">&#32;const</emphasis>
395 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pi&#32;?&#32;_M_pi-&gt;_M_get_deleter(__ti)&#32;:&#32;0;&#32;}
396 
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_count&lt;_Lp&gt;;
399 
400 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;&#32;_M_pi;
401 &#32;&#32;&#32;&#32;};
402 
403 
404 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
405 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_count
406 &#32;&#32;&#32;&#32;{
407 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
408 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count()
409 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(0)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
410 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
411 &#32;&#32;
412 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__r)
413 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;{
415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
416 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_add_ref();
417 &#32;&#32;&#32;&#32;&#32;&#32;}
418 &#32;&#32;&#32;&#32;&#32;&#32;
419 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r)
420 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
421 &#32;&#32;&#32;&#32;&#32;&#32;{
422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
423 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_add_ref();
424 &#32;&#32;&#32;&#32;&#32;&#32;}
425 &#32;&#32;&#32;&#32;&#32;&#32;
426 &#32;&#32;&#32;&#32;&#32;&#32;~__weak_count()&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;{
428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
429 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_release();
430 &#32;&#32;&#32;&#32;&#32;&#32;}
431 &#32;&#32;&#32;&#32;&#32;&#32;
432 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count&lt;_Lp&gt;&amp;
433 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
434 &#32;&#32;&#32;&#32;&#32;&#32;{
435 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;0)
437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_weak_add_ref();
438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
439 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_release();
440 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;&#32;&#32;
441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
442 &#32;&#32;&#32;&#32;&#32;&#32;}
443 &#32;&#32;&#32;&#32;&#32;&#32;
444 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count&lt;_Lp&gt;&amp;
445 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
446 &#32;&#32;&#32;&#32;&#32;&#32;{
447 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;0)
449 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_weak_add_ref();
450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
451 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_release();
452 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
454 &#32;&#32;&#32;&#32;&#32;&#32;}
455 
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
457 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(__weak_count&lt;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
458 &#32;&#32;&#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
460 &#32;&#32;&#32;&#32;__r._M_pi&#32;=&#32;_M_pi;
461 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
462 &#32;&#32;&#32;&#32;&#32;&#32;}
463 &#32;&#32;
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_use_count()&#32;const&#32;<emphasis role="comment">//&#32;nothrow</emphasis>
466 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pi&#32;!=&#32;0&#32;?&#32;_M_pi-&gt;_M_get_use_count()&#32;:&#32;0;&#32;}
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
469 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__b)
470 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_pi&#32;==&#32;__b._M_pi;&#32;}
471 &#32;&#32;&#32;&#32;&#32;&#32;
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
473 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__b)
474 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::less&lt;_Sp_counted_base&lt;_Lp&gt;*&gt;()(__a._M_pi,&#32;__b._M_pi);&#32;}
475 
476 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count&lt;_Lp&gt;;
478 
479 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;&#32;_M_pi;
480 &#32;&#32;&#32;&#32;};
481 
482 &#32;&#32;<emphasis role="comment">//&#32;now&#32;that&#32;__weak_count&#32;is&#32;defined&#32;we&#32;can&#32;define&#32;this&#32;constructor:</emphasis>
483 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
484 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
485 &#32;&#32;&#32;&#32;__shared_count&lt;_Lp&gt;::
486 &#32;&#32;&#32;&#32;__shared_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r)
487 &#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)
488 &#32;&#32;&#32;&#32;{
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;0)
490 &#32;&#32;&#32;&#32;_M_pi-&gt;_M_add_ref_lock();
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
492 &#32;&#32;&#32;&#32;__throw_bad_weak_ptr();
493 &#32;&#32;&#32;&#32;}
494 
495 &#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declarations.</emphasis>
496 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
497 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr;
498 &#32;&#32;
499 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
500 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr;
501 
502 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
503 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__enable_shared_from_this;
504 
505 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>shared_ptr;
507 &#32;&#32;
508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
509 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>weak_ptr;
510 
511 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>enable_shared_from_this;
513 
514 &#32;&#32;<emphasis role="comment">//&#32;Support&#32;for&#32;enable_shared_from_this.</emphasis>
515 
516 &#32;&#32;<emphasis role="comment">//&#32;Friend&#32;of&#32;__enable_shared_from_this.</emphasis>
517 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
518 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
519 &#32;&#32;&#32;&#32;__enable_shared_from_this_helper(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;,
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this&lt;_Tp1,
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Lp&gt;*,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2*);
522 
523 &#32;&#32;<emphasis role="comment">//&#32;Friend&#32;of&#32;enable_shared_from_this.</emphasis>
524 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
525 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
526 &#32;&#32;&#32;&#32;__enable_shared_from_this_helper(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;&gt;&amp;,
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;enable_shared_from_this&lt;_Tp1&gt;*,
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2*);
529 
530 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
531 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
532 &#32;&#32;&#32;&#32;__enable_shared_from_this_helper(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;,&#32;...)
533 &#32;&#32;&#32;&#32;{&#32;}
534 
535 
536 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_cast_tag&#32;{&#32;};
537 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__const_cast_tag&#32;{&#32;};
538 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__dynamic_cast_tag&#32;{&#32;};
539 
540 &#32;&#32;<emphasis role="comment">//&#32;A&#32;smart&#32;pointer&#32;with&#32;reference-counted&#32;copy&#32;semantics.&#32;&#32;The</emphasis>
541 &#32;&#32;<emphasis role="comment">//&#32;object&#32;pointed&#32;to&#32;is&#32;deleted&#32;when&#32;the&#32;last&#32;shared_ptr&#32;pointing&#32;to</emphasis>
542 &#32;&#32;<emphasis role="comment">//&#32;it&#32;is&#32;destroyed&#32;or&#32;reset.</emphasis>
543 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
544 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr
545 &#32;&#32;&#32;&#32;{
546 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;element_type;
548 &#32;&#32;&#32;&#32;&#32;&#32;
549 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr()
550 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(0),&#32;_M_refcount()&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
551 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
552 
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(_Tp1*&#32;__p)
556 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_refcount(__p)
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
558 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)
559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_IsComplete[<emphasis role="keyword">sizeof</emphasis>(_Tp1)];
560 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this_helper(_M_refcount,&#32;__p,&#32;__p);
561 &#32;&#32;&#32;&#32;}
562 
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter&gt;
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(_Tp1*&#32;__p,&#32;_Deleter&#32;__d)
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_refcount(__p,&#32;__d)
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
567 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;requires&#32;_Deleter&#32;CopyConstructible&#32;and&#32;__d(__p)&#32;well-formed</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this_helper(_M_refcount,&#32;__p,&#32;__p);
570 &#32;&#32;&#32;&#32;}
571 &#32;&#32;&#32;&#32;&#32;&#32;
572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;generated&#32;copy&#32;constructor,&#32;assignment,&#32;destructor&#32;are&#32;fine.</emphasis>
573 &#32;&#32;&#32;&#32;&#32;&#32;
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)
576 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(__r._M_refcount)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)&#32;}
578 
579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)
582 &#32;&#32;&#32;&#32;:&#32;_M_refcount(__r._M_refcount)&#32;<emphasis role="comment">//&#32;may&#32;throw</emphasis>
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
584 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;now&#32;safe&#32;to&#32;copy&#32;__r._M_ptr,&#32;as&#32;_M_refcount(__r._M_refcount)</emphasis>
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;did&#32;not&#32;throw.</emphasis>
587 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r._M_ptr;
588 &#32;&#32;&#32;&#32;}
589 
590 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&lt;&#32;201103L)&#32;||&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
591 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
592 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Postcondition:&#32;use_count()&#32;==&#32;1&#32;and&#32;__r.get()&#32;==&#32;0</emphasis>
594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(std::auto_ptr&lt;_Tp1&gt;&amp;&#32;__r)
597 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()),&#32;_M_refcount()
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;TODO&#32;requries&#32;delete&#32;__r.release()&#32;well-formed</emphasis>
599 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_IsComplete[<emphasis role="keyword">sizeof</emphasis>(_Tp1)];
601 &#32;&#32;&#32;&#32;&#32;&#32;_Tp1*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r.get();
602 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__shared_count&lt;_Lp&gt;(__r);
603 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this_helper(_M_refcount,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
604 &#32;&#32;&#32;&#32;}
605 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
606 <emphasis role="preprocessor">#endif</emphasis>
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r,&#32;__static_cast_tag)
610 &#32;&#32;&#32;&#32;:&#32;_M_ptr(static_cast&lt;element_type*&gt;(__r._M_ptr)),
611 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount(__r._M_refcount)
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r,&#32;__const_cast_tag)
616 &#32;&#32;&#32;&#32;:&#32;_M_ptr(const_cast&lt;element_type*&gt;(__r._M_ptr)),
617 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount(__r._M_refcount)
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
619 
620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r,&#32;__dynamic_cast_tag)
622 &#32;&#32;&#32;&#32;:&#32;_M_ptr(dynamic_cast&lt;element_type*&gt;(__r._M_ptr)),
623 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount(__r._M_refcount)
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ptr&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;need&#32;to&#32;allocate&#32;new&#32;counter&#32;--&#32;the&#32;cast&#32;failed</emphasis>
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__shared_count&lt;_Lp&gt;();
627 &#32;&#32;&#32;&#32;}
628 
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&amp;
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
633 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r._M_ptr;
634 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__r._M_refcount;&#32;<emphasis role="comment">//&#32;__shared_count::op=&#32;doesn&apos;t&#32;throw</emphasis>
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
636 &#32;&#32;&#32;&#32;}
637 
638 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&lt;&#32;201103L)&#32;||&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
639 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
640 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&amp;
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(std::auto_ptr&lt;_Tp1&gt;&amp;&#32;__r)
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
645 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(__r).swap(*<emphasis role="keyword">this</emphasis>);
646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
647 &#32;&#32;&#32;&#32;}
648 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
649 <emphasis role="preprocessor">#endif</emphasis>
650 
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
652 &#32;&#32;&#32;&#32;&#32;&#32;reset()&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
653 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__shared_ptr().swap(*<emphasis role="keyword">this</emphasis>);&#32;}
654 
655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset(_Tp1*&#32;__p)&#32;<emphasis role="comment">//&#32;_Tp1&#32;must&#32;be&#32;complete.</emphasis>
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Catch&#32;self-reset&#32;errors.</emphasis>
660 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(__p&#32;==&#32;0&#32;||&#32;__p&#32;!=&#32;_M_ptr);&#32;
661 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(__p).swap(*<emphasis role="keyword">this</emphasis>);
662 &#32;&#32;&#32;&#32;}
663 
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter&gt;
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset(_Tp1*&#32;__p,&#32;_Deleter&#32;__d)
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;__shared_ptr(__p,&#32;__d).swap(*<emphasis role="keyword">this</emphasis>);&#32;}
668 
669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;class&#32;instantiation&#32;when&#32;_Tp&#32;is&#32;[cv-qual]&#32;void.</emphasis>
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::tr1::add_reference&lt;_Tp&gt;::type
671 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
672 &#32;&#32;&#32;&#32;&#32;&#32;{
673 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(_M_ptr&#32;!=&#32;0);
674 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_ptr;
675 &#32;&#32;&#32;&#32;&#32;&#32;}
676 
677 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
678 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
679 &#32;&#32;&#32;&#32;&#32;&#32;{
680 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(_M_ptr&#32;!=&#32;0);
681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;
682 &#32;&#32;&#32;&#32;&#32;&#32;}
683 &#32;&#32;&#32;&#32;
684 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
685 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
686 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;&#32;}
687 
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implicit&#32;conversion&#32;to&#32;&quot;bool&quot;</emphasis>
689 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;__shared_ptr::*__unspecified_bool_type;
691 
692 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__unspecified_bool_type()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
694 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr&#32;==&#32;0&#32;?&#32;0&#32;:&#32;&amp;__shared_ptr::_M_ptr;&#32;}
695 
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
697 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link>()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
698 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_unique();&#32;}
699 
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
701 &#32;&#32;&#32;&#32;&#32;&#32;use_count()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
702 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_use_count();&#32;}
703 
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
705 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__other)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
706 &#32;&#32;&#32;&#32;&#32;&#32;{
707 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_ptr,&#32;__other._M_ptr);
708 &#32;&#32;&#32;&#32;_M_refcount._M_swap(__other._M_refcount);
709 &#32;&#32;&#32;&#32;&#32;&#32;}
710 
711 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
713 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;&#32;__ti)<emphasis role="keyword">&#32;const</emphasis>
714 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_deleter(__ti);&#32;}
715 
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_less(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp1&gt;&amp;&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
719 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount&#32;&lt;&#32;__rhs._M_refcount;&#32;}
720 
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr;
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr;
723 
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Del,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Del*&#32;get_deleter(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp1&gt;&amp;);
726 
727 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Friends&#32;injected&#32;into&#32;enclosing&#32;namespace&#32;and&#32;found&#32;by&#32;ADL:</emphasis>
728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__b)
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.get()&#32;==&#32;__b.get();&#32;}
732 
733 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__b)
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.get()&#32;!=&#32;__b.get();&#32;}
737 
738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__b)
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_less(__b);&#32;}
742 
743 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contained&#32;pointer.</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count&lt;_Lp&gt;&#32;&#32;_M_refcount;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reference&#32;counter.</emphasis>
745 &#32;&#32;&#32;&#32;};
746 
747 &#32;&#32;<emphasis role="comment">//&#32;2.2.3.8&#32;shared_ptr&#32;specialized&#32;algorithms.</emphasis>
748 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
749 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
750 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__b)
751 &#32;&#32;&#32;&#32;{&#32;__a.swap(__b);&#32;}
752 
753 &#32;&#32;<emphasis role="comment">//&#32;2.2.3.9&#32;shared_ptr&#32;casts</emphasis>
754 &#32;&#32;<emphasis role="comment">/*&#32;&#32;The&#32;seemingly&#32;equivalent</emphasis>
755 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp,&#32;_Lp&gt;(static_cast&lt;_Tp*&gt;(__r.get()))</emphasis>
756 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;will&#32;eventually&#32;result&#32;in&#32;undefined&#32;behaviour,</emphasis>
757 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;attempting&#32;to&#32;delete&#32;the&#32;same&#32;object&#32;twice.</emphasis>
758 <emphasis role="comment">&#32;&#32;&#32;*/</emphasis>
759 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp&gt;
760 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
761 &#32;&#32;&#32;&#32;static_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)
762 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;(__r,&#32;__static_cast_tag());&#32;}
763 
764 &#32;&#32;<emphasis role="comment">/*&#32;&#32;The&#32;seemingly&#32;equivalent</emphasis>
765 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp,&#32;_Lp&gt;(const_cast&lt;_Tp*&gt;(__r.get()))</emphasis>
766 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;will&#32;eventually&#32;result&#32;in&#32;undefined&#32;behaviour,</emphasis>
767 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;attempting&#32;to&#32;delete&#32;the&#32;same&#32;object&#32;twice.</emphasis>
768 <emphasis role="comment">&#32;&#32;&#32;*/</emphasis>
769 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp&gt;
770 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
771 &#32;&#32;&#32;&#32;const_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)
772 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;(__r,&#32;__const_cast_tag());&#32;}
773 
774 &#32;&#32;<emphasis role="comment">/*&#32;&#32;The&#32;seemingly&#32;equivalent</emphasis>
775 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp,&#32;_Lp&gt;(dynamic_cast&lt;_Tp*&gt;(__r.get()))</emphasis>
776 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;will&#32;eventually&#32;result&#32;in&#32;undefined&#32;behaviour,</emphasis>
777 <emphasis role="comment">&#32;&#32;&#32;*&#32;&#32;attempting&#32;to&#32;delete&#32;the&#32;same&#32;object&#32;twice.</emphasis>
778 <emphasis role="comment">&#32;&#32;&#32;*/</emphasis>
779 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp&gt;
780 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
781 &#32;&#32;&#32;&#32;dynamic_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)
782 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;(__r,&#32;__dynamic_cast_tag());&#32;}
783 
784 &#32;&#32;<emphasis role="comment">//&#32;2.2.3.7&#32;shared_ptr&#32;I/O</emphasis>
785 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
786 &#32;&#32;&#32;&#32;std::basic_ostream&lt;_Ch,&#32;_Tr&gt;&amp;
787 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_Ch,&#32;_Tr&gt;&amp;&#32;__os,&#32;
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__p)
789 &#32;&#32;&#32;&#32;{
790 &#32;&#32;&#32;&#32;&#32;&#32;__os&#32;&lt;&lt;&#32;__p.get();
791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__os;
792 &#32;&#32;&#32;&#32;}
793 
794 &#32;&#32;<emphasis role="comment">//&#32;2.2.3.10&#32;shared_ptr&#32;get_deleter&#32;(experimental)</emphasis>
795 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Del,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
796 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Del*
797 &#32;&#32;&#32;&#32;get_deleter(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__p)
798 &#32;&#32;&#32;&#32;{
799 <emphasis role="preprocessor">#if&#32;__cpp_rtti</emphasis>
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Del*<emphasis role="keyword">&gt;</emphasis>(__p._M_get_deleter(<emphasis role="keyword">typeid</emphasis>(_Del)));
801 <emphasis role="preprocessor">#else</emphasis>
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
803 <emphasis role="preprocessor">#endif</emphasis>
804 &#32;&#32;&#32;&#32;}
805 
806 
807 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
808 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr
809 &#32;&#32;&#32;&#32;{
810 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;element_type;
812 &#32;&#32;&#32;&#32;&#32;&#32;
813 &#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr()
814 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(0),&#32;_M_refcount()&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
815 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
816 
817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generated&#32;copy&#32;constructor,&#32;assignment,&#32;destructor&#32;are&#32;fine.</emphasis>
818 &#32;&#32;&#32;&#32;&#32;&#32;
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;&quot;obvious&quot;&#32;converting&#32;constructor&#32;implementation:</emphasis>
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
821 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;template&lt;typename&#32;_Tp1&gt;</emphasis>
822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;__weak_ptr(const&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)</emphasis>
823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(__r._M_refcount)&#32;//&#32;never&#32;throws</emphasis>
824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;{&#32;}</emphasis>
825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;has&#32;a&#32;serious&#32;problem.</emphasis>
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;__r._M_ptr&#32;may&#32;already&#32;have&#32;been&#32;invalidated.&#32;The&#32;_M_ptr(__r._M_ptr)</emphasis>
829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;conversion&#32;may&#32;require&#32;access&#32;to&#32;*__r._M_ptr&#32;(virtual&#32;inheritance).</emphasis>
830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;not&#32;possible&#32;to&#32;avoid&#32;spurious&#32;access&#32;violations&#32;since</emphasis>
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;multithreaded&#32;programs&#32;__r._M_ptr&#32;may&#32;be&#32;invalidated&#32;at&#32;any&#32;point.</emphasis>
833 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)
835 &#32;&#32;&#32;&#32;:&#32;_M_refcount(__r._M_refcount)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
837 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)
838 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r.lock().get();
839 &#32;&#32;&#32;&#32;}
840 
841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)
843 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(__r._M_refcount)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)&#32;}
845 
846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr&amp;
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
850 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r.lock().get();
851 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__r._M_refcount;
852 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
853 &#32;&#32;&#32;&#32;}
854 &#32;&#32;&#32;&#32;&#32;&#32;
855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr&amp;
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
859 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r._M_ptr;
860 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__r._M_refcount;
861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
862 &#32;&#32;&#32;&#32;}
863 
864 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
865 &#32;&#32;&#32;&#32;&#32;&#32;lock()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
866 &#32;&#32;&#32;&#32;&#32;&#32;{
867 <emphasis role="preprocessor">#ifdef&#32;__GTHREADS</emphasis>
868 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optimization:&#32;avoid&#32;throw&#32;overhead.</emphasis>
869 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expired())
870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;element_type,&#32;_Lp&gt;();
871 
872 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
873 &#32;&#32;&#32;&#32;&#32;&#32;{
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;element_type,&#32;_Lp&gt;(*<emphasis role="keyword">this</emphasis>);
875 &#32;&#32;&#32;&#32;&#32;&#32;}
876 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(<emphasis role="keyword">const</emphasis>&#32;bad_weak_ptr&amp;)
877 &#32;&#32;&#32;&#32;&#32;&#32;{
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Q:&#32;How&#32;can&#32;we&#32;get&#32;here?</emphasis>
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A:&#32;Another&#32;thread&#32;may&#32;have&#32;invalidated&#32;r&#32;after&#32;the</emphasis>
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;use_count&#32;test&#32;above.</emphasis>
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;element_type,&#32;_Lp&gt;();
882 &#32;&#32;&#32;&#32;&#32;&#32;}
883 &#32;&#32;&#32;&#32;
884 <emphasis role="preprocessor">#else</emphasis>
885 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optimization:&#32;avoid&#32;try/catch&#32;overhead&#32;when&#32;single&#32;threaded.</emphasis>
886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;expired()&#32;?&#32;__shared_ptr&lt;element_type,&#32;_Lp&gt;()
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;element_type,&#32;_Lp&gt;(*this);
888 
889 <emphasis role="preprocessor">#endif</emphasis>
890 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;XXX&#32;MT</emphasis>
891 
892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
893 &#32;&#32;&#32;&#32;&#32;&#32;use_count()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
894 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_use_count();&#32;}
895 
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
897 &#32;&#32;&#32;&#32;&#32;&#32;expired()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
898 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_use_count()&#32;==&#32;0;&#32;}
899 &#32;&#32;&#32;&#32;&#32;&#32;
900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
901 &#32;&#32;&#32;&#32;&#32;&#32;reset()&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
902 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__weak_ptr().swap(*<emphasis role="keyword">this</emphasis>);&#32;}
903 
904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
905 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__weak_ptr&amp;&#32;__s)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;{
907 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_ptr,&#32;__s._M_ptr);
908 &#32;&#32;&#32;&#32;_M_refcount._M_swap(__s._M_refcount);
909 &#32;&#32;&#32;&#32;&#32;&#32;}
910 
911 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;by&#32;__enable_shared_from_this.</emphasis>
913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
914 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(_Tp*&#32;__ptr,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__refcount)
915 &#32;&#32;&#32;&#32;&#32;&#32;{
916 &#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__ptr;
917 &#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__refcount;
918 &#32;&#32;&#32;&#32;&#32;&#32;}
919 
920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_less(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
923 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount&#32;&lt;&#32;__rhs._M_refcount;&#32;}
924 
925 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr;
926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr;
927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__enable_shared_from_this&lt;_Tp,&#32;_Lp&gt;;
928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>enable_shared_from_this&lt;_Tp&gt;;
929 
930 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Friend&#32;injected&#32;into&#32;namespace&#32;and&#32;found&#32;by&#32;ADL.</emphasis>
931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__rhs)
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_less(__rhs);&#32;}
935 
936 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contained&#32;pointer.</emphasis>
937 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count&lt;_Lp&gt;&#32;&#32;_M_refcount;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reference&#32;counter.</emphasis>
938 &#32;&#32;&#32;&#32;};
939 
940 &#32;&#32;<emphasis role="comment">//&#32;2.2.4.7&#32;weak_ptr&#32;specialized&#32;algorithms.</emphasis>
941 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
942 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
943 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__weak_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__b)
944 &#32;&#32;&#32;&#32;{&#32;__a.swap(__b);&#32;}
945 
946 
947 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
948 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__enable_shared_from_this
949 &#32;&#32;&#32;&#32;{
950 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
951 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this()&#32;{&#32;}
952 &#32;&#32;&#32;&#32;&#32;&#32;
953 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this(<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this&amp;)&#32;{&#32;}
954 &#32;&#32;&#32;&#32;&#32;&#32;
955 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this&amp;
956 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this&amp;)
957 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
958 
959 &#32;&#32;&#32;&#32;&#32;&#32;~__enable_shared_from_this()&#32;{&#32;}
960 &#32;&#32;&#32;&#32;&#32;&#32;
961 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
962 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
963 &#32;&#32;&#32;&#32;&#32;&#32;shared_from_this()
964 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;(this-&gt;_M_weak_this);&#32;}
965 
966 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;const&#32;_Tp,&#32;_Lp&gt;
967 &#32;&#32;&#32;&#32;&#32;&#32;shared_from_this()<emphasis role="keyword">&#32;const</emphasis>
968 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;const&#32;_Tp,&#32;_Lp&gt;(this-&gt;_M_weak_this);&#32;}
969 
970 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_weak_assign(_Tp1*&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
974 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;_M_weak_this._M_assign(__p,&#32;__n);&#32;}
975 
976 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this_helper(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__pn,
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this*&#32;__pe,
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1*&#32;__px)
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pe&#32;!=&#32;0)
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pe-&gt;_M_weak_assign(<emphasis role="keyword">const_cast&lt;</emphasis>_Tp1*<emphasis role="keyword">&gt;</emphasis>(__px),&#32;__pn);
984 &#32;&#32;&#32;&#32;}
985 
986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;&#32;&#32;_M_weak_this;
987 &#32;&#32;&#32;&#32;};
988 
989 
990 &#32;&#32;<emphasis role="comment">//&#32;The&#32;actual&#32;shared_ptr,&#32;with&#32;forwarding&#32;constructors&#32;and</emphasis>
991 &#32;&#32;<emphasis role="comment">//&#32;assignment&#32;operators.</emphasis>
992 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
993 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>shared_ptr
994 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__shared_ptr&lt;_Tp&gt;
995 &#32;&#32;&#32;&#32;{
996 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
997 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr()
998 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;()&#32;{&#32;}
999 
1000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(_Tp1*&#32;__p)
1003 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__p)&#32;{&#32;}
1004 
1005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter&gt;
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(_Tp1*&#32;__p,&#32;_Deleter&#32;__d)
1007 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__p,&#32;__d)&#32;{&#32;}
1008 
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1011 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__r)&#32;{&#32;}
1012 
1013 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(<emphasis role="keyword">const</emphasis>&#32;weak_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1016 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__r)&#32;{&#32;}
1017 
1018 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&lt;&#32;201103L)&#32;||&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1019 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
1020 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
1021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(std::auto_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1024 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__r)&#32;{&#32;}
1025 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1026 <emphasis role="preprocessor">#endif</emphasis>
1027 
1028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r,&#32;__static_cast_tag)
1030 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__r,&#32;__static_cast_tag())&#32;{&#32;}
1031 
1032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r,&#32;__const_cast_tag)
1034 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__r,&#32;__const_cast_tag())&#32;{&#32;}
1035 
1036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r,&#32;__dynamic_cast_tag)
1038 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(__r,&#32;__dynamic_cast_tag())&#32;{&#32;}
1039 
1040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&amp;
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1044 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;__shared_ptr&lt;_Tp&gt;::operator=(__r);
1045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1046 &#32;&#32;&#32;&#32;}
1047 
1048 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&lt;&#32;201103L)&#32;||&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1049 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
1050 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&amp;
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(std::auto_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1055 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;__shared_ptr&lt;_Tp&gt;::operator=(__r);
1056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1057 &#32;&#32;&#32;&#32;}
1058 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1059 <emphasis role="preprocessor">#endif</emphasis>
1060 &#32;&#32;&#32;&#32;};
1061 
1062 &#32;&#32;<emphasis role="comment">//&#32;2.2.3.8&#32;shared_ptr&#32;specialized&#32;algorithms.</emphasis>
1063 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1064 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1065 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__shared_ptr&lt;_Tp&gt;&amp;&#32;__a,&#32;__shared_ptr&lt;_Tp&gt;&amp;&#32;__b)
1066 &#32;&#32;&#32;&#32;{&#32;__a.swap(__b);&#32;}
1067 
1068 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1069 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;shared_ptr&lt;_Tp&gt;
1070 &#32;&#32;&#32;&#32;static_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1071 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;_Tp&gt;(__r,&#32;__static_cast_tag());&#32;}
1072 
1073 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1074 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;shared_ptr&lt;_Tp&gt;
1075 &#32;&#32;&#32;&#32;const_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1076 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;_Tp&gt;(__r,&#32;__const_cast_tag());&#32;}
1077 
1078 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1079 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;shared_ptr&lt;_Tp&gt;
1080 &#32;&#32;&#32;&#32;dynamic_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1081 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;_Tp&gt;(__r,&#32;__dynamic_cast_tag());&#32;}
1082 
1083 
1084 &#32;&#32;<emphasis role="comment">//&#32;The&#32;actual&#32;weak_ptr,&#32;with&#32;forwarding&#32;constructors&#32;and</emphasis>
1085 &#32;&#32;<emphasis role="comment">//&#32;assignment&#32;operators.</emphasis>
1086 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1087 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>weak_ptr
1088 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__weak_ptr&lt;_Tp&gt;
1089 &#32;&#32;&#32;&#32;{
1090 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1091 &#32;&#32;&#32;&#32;&#32;&#32;weak_ptr()
1092 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__weak_ptr&lt;_Tp&gt;()&#32;{&#32;}
1093 &#32;&#32;&#32;&#32;&#32;&#32;
1094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weak_ptr(<emphasis role="keyword">const</emphasis>&#32;weak_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1096 &#32;&#32;&#32;&#32;:&#32;__weak_ptr&lt;_Tp&gt;(__r)&#32;{&#32;}
1097 
1098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weak_ptr(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r)
1100 &#32;&#32;&#32;&#32;:&#32;__weak_ptr&lt;_Tp&gt;(__r)&#32;{&#32;}
1101 
1102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weak_ptr&amp;
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;weak_ptr&lt;_Tp1&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1106 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;__weak_ptr&lt;_Tp&gt;::operator=(__r);
1107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1108 &#32;&#32;&#32;&#32;}
1109 
1110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weak_ptr&amp;
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;&#32;__r)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1114 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;__weak_ptr&lt;_Tp&gt;::operator=(__r);
1115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1116 &#32;&#32;&#32;&#32;}
1117 
1118 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;
1119 &#32;&#32;&#32;&#32;&#32;&#32;lock()&#32;const&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
1120 &#32;&#32;&#32;&#32;&#32;&#32;{
1121 <emphasis role="preprocessor">#ifdef&#32;__GTHREADS</emphasis>
1122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;expired())
1123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;_Tp&gt;();
1124 
1125 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
1126 &#32;&#32;&#32;&#32;&#32;&#32;{
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;_Tp&gt;(*<emphasis role="keyword">this</emphasis>);
1128 &#32;&#32;&#32;&#32;&#32;&#32;}
1129 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(<emphasis role="keyword">const</emphasis>&#32;bad_weak_ptr&amp;)
1130 &#32;&#32;&#32;&#32;&#32;&#32;{
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;_Tp&gt;();
1132 &#32;&#32;&#32;&#32;&#32;&#32;}
1133 <emphasis role="preprocessor">#else</emphasis>
1134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;expired()&#32;?&#32;shared_ptr&lt;_Tp&gt;()
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;shared_ptr&lt;_Tp&gt;(*this);
1136 <emphasis role="preprocessor">#endif</emphasis>
1137 &#32;&#32;&#32;&#32;&#32;&#32;}
1138 &#32;&#32;&#32;&#32;};
1139 
1140 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1141 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>enable_shared_from_this
1142 &#32;&#32;&#32;&#32;{
1143 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1144 &#32;&#32;&#32;&#32;&#32;&#32;enable_shared_from_this()&#32;{&#32;}
1145 &#32;&#32;&#32;&#32;&#32;&#32;
1146 &#32;&#32;&#32;&#32;&#32;&#32;enable_shared_from_this(<emphasis role="keyword">const</emphasis>&#32;enable_shared_from_this&amp;)&#32;{&#32;}
1147 
1148 &#32;&#32;&#32;&#32;&#32;&#32;enable_shared_from_this&amp;
1149 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;enable_shared_from_this&amp;)
1150 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
1151 
1152 &#32;&#32;&#32;&#32;&#32;&#32;~enable_shared_from_this()&#32;{&#32;}
1153 
1154 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1155 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;
1156 &#32;&#32;&#32;&#32;&#32;&#32;shared_from_this()
1157 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;_Tp&gt;(this-&gt;_M_weak_this);&#32;}
1158 
1159 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;const&#32;_Tp&gt;
1160 &#32;&#32;&#32;&#32;&#32;&#32;shared_from_this()<emphasis role="keyword">&#32;const</emphasis>
1161 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_ptr&lt;const&#32;_Tp&gt;(this-&gt;_M_weak_this);&#32;}
1162 
1163 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_weak_assign(_Tp1*&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;&gt;&amp;&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1167 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;_M_weak_this._M_assign(__p,&#32;__n);&#32;}
1168 
1169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this_helper(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;&gt;&amp;&#32;__pn,
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;enable_shared_from_this*&#32;__pe,
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1*&#32;__px)
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pe&#32;!=&#32;0)
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pe-&gt;_M_weak_assign(<emphasis role="keyword">const_cast&lt;</emphasis>_Tp1*<emphasis role="keyword">&gt;</emphasis>(__px),&#32;__pn);
1177 &#32;&#32;&#32;&#32;}
1178 
1179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;weak_ptr&lt;_Tp&gt;&#32;&#32;_M_weak_this;
1180 &#32;&#32;&#32;&#32;};
1181 }
1182 
1183 _GLIBCXX_END_NAMESPACE_VERSION
1184 }
1185 
1186 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_TR1_SHARED_PTR_H</emphasis>
</programlisting></section>
