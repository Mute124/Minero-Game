<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__map_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_map.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_map.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;bits/functexcept.h&gt;<?linebreak?>#include &lt;bits/concept_check.h&gt;<?linebreak?></programlisting>Include dependency graph for stl_map.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2stl__map_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
<simplesect><title></title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__map_8h_1a544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__map_8h_1a544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>stl_map.h</secondary></indexterm>
<indexterm><primary>stl_map.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>A standard container made up of (key,value) pairs, which can be retrieved based on a key, in logarithmic time.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_Key</entry><entry>
<para>Type of key objects. </para>
</entry>
                            </row>
                            <row>
<entry>_Tp</entry><entry>
<para>Type of mapped objects. </para>
</entry>
                            </row>
                            <row>
<entry>_Compare</entry><entry>
<para>Comparison function object type, defaults to less&lt;_Key&gt;. </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type, defaults to allocator&lt;pair&lt;const _Key, _Tp&gt;.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Meets the requirements of a <link xlink:href="tables.html#65">container</link>, a <link xlink:href="tables.html#66">reversible container</link>, and an <link xlink:href="tables.html#69">associative container</link> (using unique keys). For a <computeroutput>map&lt;Key,T&gt;</computeroutput> the key_type is Key, the mapped_type is T, and the value_type is std::pair&lt;const Key,T&gt;.</para>

<para>Maps support bidirectional iterators.</para>

<para>The private tree data is declared exactly the same way for map and multimap; the distinction is made entirely in how the tree functions are called (*_unique versus *_equal, same as the standard).</para>

<para>This turns a red-black tree into a [multi]map.</para>

<para>The actual tree structure.</para>

<para>Default constructor creates no elements.</para>

<para>Creates a map with no elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__comp</entry><entry>
<para>A comparison object. </para>
</entry>
                            </row>
                            <row>
<entry>__a</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Map copy constructor.</para>

<para>Whether the allocator is copied depends on the allocator traits.</para>

<para>Builds a map from a range. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Create a map consisting of copies of the elements from [__first,__last). This is linear in N if the range is already sorted, and NlogN otherwise (where N is distance(__first,__last)).</para>

<para>Builds a map from a range. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>A comparison functor. </para>
</entry>
                            </row>
                            <row>
<entry>__a</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Create a map consisting of copies of the elements from [__first,__last). This is linear in N if the range is already sorted, and NlogN otherwise (where N is distance(__first,__last)).</para>

<para>Map assignment operator.</para>

<para>Whether the allocator is copied depends on the allocator traits.</para>

<para>Get a copy of the memory allocation object.</para>

<para>Returns a read/write iterator that points to the first pair in the map. Iteration is done in ascending order according to the keys.</para>

<para>Returns a read-only (constant) iterator that points to the first pair in the map. Iteration is done in ascending order according to the keys.</para>

<para>Returns a read/write iterator that points one past the last pair in the map. Iteration is done in ascending order according to the keys.</para>

<para>Returns a read-only (constant) iterator that points one past the last pair in the map. Iteration is done in ascending order according to the keys.</para>

<para>Returns a read/write reverse iterator that points to the last pair in the map. Iteration is done in descending order according to the keys.</para>

<para>Returns a read-only (constant) reverse iterator that points to the last pair in the map. Iteration is done in descending order according to the keys.</para>

<para>Returns a read/write reverse iterator that points to one before the first pair in the map. Iteration is done in descending order according to the keys.</para>

<para>Returns a read-only (constant) reverse iterator that points to one before the first pair in the map. Iteration is done in descending order according to the keys.</para>

<para>Returns true if the map is empty. (Thus begin() would equal <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link>.)</para>

<para>Returns the size of the map. <?linebreak?></para>

<para>Returns the maximum size of the map. <?linebreak?></para>

<para>Subscript ( <computeroutput></computeroutput>[] ) access to map data. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__k</entry><entry>
<para>The key for which data should be retrieved. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the data of the (key,data) pair.</para>
</formalpara>
Allows for easy lookup with the subscript ( <computeroutput></computeroutput>[] ) operator. Returns data associated with the key specified in subscript. If the key does not exist, a pair with that key is created using default values, which is then returned.</para>

<para>Lookup requires logarithmic time.</para>

<para>Access to map data. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__k</entry><entry>
<para>The key for which data should be retrieved. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A reference to the data whose key is equivalent to <emphasis>__k</emphasis>, if such a data is present in the map. </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::out_of_range</entry><entry>
<para>If no such data is present.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Attempts to insert a std::pair into the map. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>Pair to be inserted (see std::make_pair for easy creation of pairs).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>A pair, of which the first element is an iterator that points to the possibly inserted pair, and the second is a bool that is true if the pair was actually inserted.</para>
</formalpara>
This function attempts to insert a (key, value) pair into the map. A map relies on unique keys and thus a pair is only inserted if its first element (the key) is not already present in the map.</para>

<para>Insertion requires logarithmic time.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2stl__map_8h_a544d74b2d5d0dd2197f5fd6f02691de0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
