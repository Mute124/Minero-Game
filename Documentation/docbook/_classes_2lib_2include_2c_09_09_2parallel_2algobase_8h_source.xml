<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2parallel_2algobase_8h_source" xml:lang="en-US">
<title>algobase.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/algobase.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
34 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler&#32;and&#32;Felix&#32;Putze.</emphasis>
35 
36 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_ALGOBASE_H</emphasis>
37 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_ALGOBASE_H&#32;1</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;parallel/base.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;parallel/algorithmfwd.h&gt;</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;parallel/find.h&gt;</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;parallel/find_selectors.h&gt;</emphasis>
44 
45 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
46 {
47 <emphasis role="keyword">namespace&#32;</emphasis>__parallel
48 {
49 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;equal&#32;and&#32;lexicographical_compare&#32;require&#32;mismatch.</emphasis>
50 
51 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
52 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
54 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
56 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__begin1,&#32;__end1,&#32;__begin2);&#32;}
57 
58 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
59 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
61 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
63 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred);&#32;}
64 
65 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
66 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
69 &#32;&#32;&#32;&#32;__mismatch_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;_IteratorTag1,&#32;_IteratorTag2)
71 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred);&#32;}
72 
73 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;mismatch&#32;for&#32;random&#32;access&#32;iterators</emphasis>
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
75 &#32;&#32;&#32;&#32;pair&lt;_RAIter1,&#32;_RAIter2&gt;
76 &#32;&#32;&#32;&#32;__mismatch_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_Predicate&#32;__pred,&#32;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag)
79 &#32;&#32;&#32;&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__res&#32;=
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::__find_template</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel">__gnu_parallel</link>::
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mismatch_selector()).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;make_pair(__res&#32;,&#32;__begin2&#32;+&#32;(__res&#32;-&#32;__begin1));
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred);
90 &#32;&#32;&#32;&#32;}
91 
92 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
93 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
95 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2)
96 &#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo</link>&lt;
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type,
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&gt;&#32;_EqualTo;
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mismatch_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;_EqualTo(),
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
104 &#32;&#32;&#32;&#32;}
105 
106 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
107 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
109 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mismatch_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred,
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
115 &#32;&#32;&#32;&#32;}
116 
117 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
118 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
119 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2&gt;
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
121 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
124 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__first1,&#32;__last1,&#32;__first2,&#32;__last2);&#32;}
125 
126 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
127 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
130 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
134 &#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred);
137 &#32;&#32;&#32;&#32;}
138 
139 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
140 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
143 &#32;&#32;&#32;&#32;__mismatch_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;_Predicate&#32;__pred,
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2)
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__begin1,&#32;__end1,
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__pred);
149 &#32;&#32;&#32;&#32;}
150 
151 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;mismatch&#32;for&#32;random&#32;access&#32;iterators</emphasis>
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
153 &#32;&#32;&#32;&#32;pair&lt;_RAIter1,&#32;_RAIter2&gt;
154 &#32;&#32;&#32;&#32;__mismatch_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_RAIter2&#32;__end2,&#32;_Predicate&#32;__pred,&#32;
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag)
157 &#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__end2&#32;-&#32;__begin2)&#32;&lt;&#32;(__end1&#32;-&#32;__begin1))
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end1&#32;=&#32;__begin1&#32;+&#32;(__end2&#32;-&#32;__begin2);
162 
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__res&#32;=
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::__find_template</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred,
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel">__gnu_parallel</link>::
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mismatch_selector()).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;make_pair(__res&#32;,&#32;__begin2&#32;+&#32;(__res&#32;-&#32;__begin1));
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::mismatch(__begin1,&#32;__end1,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__pred);
172 &#32;&#32;&#32;&#32;}
173 
174 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
176 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2)
177 &#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo</link>&lt;
179 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type,
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&gt;&#32;_EqualTo;
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mismatch_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;_EqualTo(),
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
185 &#32;&#32;&#32;&#32;}
186 
187 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
189 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
190 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_InputIterator1&#32;__begin1,&#32;_InputIterator1&#32;__end1,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__begin2,&#32;_InputIterator2&#32;__end2,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
193 &#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mismatch_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
198 &#32;&#32;&#32;&#32;}
199 <emphasis role="preprocessor">#endif</emphasis>
200 
201 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
202 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
204 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
206 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2);&#32;}
207 
208 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
209 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
211 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
213 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred);&#32;}
214 
215 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
216 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
217 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
219 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2)
220 &#32;&#32;&#32;&#32;{
221 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2);
224 <emphasis role="preprocessor">#endif</emphasis>
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::mismatch(__begin1,&#32;__end1,&#32;__begin2).first
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;__end1;
228 &#32;&#32;&#32;&#32;}
229 
230 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
231 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
232 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
234 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
236 &#32;&#32;&#32;&#32;{
237 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred);
240 <emphasis role="preprocessor">#endif</emphasis>
241 
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::mismatch(__begin1,&#32;__end1,&#32;__begin2,&#32;__pred).first
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;__end1;
244 &#32;&#32;&#32;&#32;}
245 
246 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
247 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
250 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
252 &#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2);
254 &#32;&#32;&#32;&#32;}
255 
256 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
257 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
259 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
260 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;_BinaryPredicate&#32;__binary_pred,
261 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
262 &#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred);
265 &#32;&#32;&#32;&#32;}
266 
267 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
268 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
271 &#32;&#32;&#32;&#32;__equal_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;_Predicate&#32;__pred,
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2)
274 &#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__pred);
277 &#32;&#32;&#32;&#32;}
278 
279 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;equal&#32;for&#32;random&#32;access&#32;iterators</emphasis>
280 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
281 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
282 &#32;&#32;&#32;&#32;__equal_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_RAIter2&#32;__end2,&#32;_Predicate&#32;__pred,&#32;
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag)
285 &#32;&#32;&#32;&#32;{
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::distance(__begin1,&#32;__end1)
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;std::distance(__begin2,&#32;__end2))
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::mismatch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred).first&#32;==&#32;__end1;
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__pred);
298 &#32;&#32;&#32;&#32;}
299 
300 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
301 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
302 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
303 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2)
304 &#32;&#32;&#32;&#32;{
305 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2);
308 <emphasis role="preprocessor">#endif</emphasis>
309 
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo</link>&lt;
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type,
312 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&gt;&#32;_EqualTo;
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__equal_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;_EqualTo(),
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
317 &#32;&#32;&#32;&#32;}
318 
319 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
320 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
322 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
323 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;_BinaryPredicate&#32;__binary_pred)
324 &#32;&#32;&#32;&#32;{
325 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred);
329 <emphasis role="preprocessor">#endif</emphasis>
330 
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__equal_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__binary_pred,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
334 &#32;&#32;&#32;&#32;}
335 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
336 
337 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
338 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
340 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
343 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::lexicographical_compare(__begin1,&#32;__end1,
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2);&#32;}
345 
346 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
347 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
348 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
349 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
352 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::lexicographical_compare(
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred);&#32;}
354 
355 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
356 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
358 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
359 &#32;&#32;&#32;&#32;__lexicographical_compare_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2)
363 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::lexicographical_compare(
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred);&#32;}
365 
366 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;lexicographical_compare&#32;for&#32;random&#32;access&#32;iterators</emphasis>
367 &#32;&#32;<emphasis role="comment">//&#32;Limitation:&#32;Both&#32;valuetypes&#32;must&#32;be&#32;the&#32;same</emphasis>
368 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
369 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
370 &#32;&#32;&#32;&#32;__lexicographical_compare_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_RAIter2&#32;__end2,
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
375 &#32;&#32;&#32;&#32;{
376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter1&gt;&#32;_TraitsType1;
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType1::value_type&#32;_ValueType1;
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter2&gt;&#32;_TraitsType2;
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType2::value_type&#32;_ValueType2;
383 
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_parallel::
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_EqualFromLess&lt;_ValueType1,&#32;_ValueType2,&#32;_Predicate&gt;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_EqualFromLessCompare;
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Longer&#32;sequence&#32;in&#32;first&#32;place.</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__end1&#32;-&#32;__begin1)&#32;&lt;&#32;(__end2&#32;-&#32;__begin2))
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;_RAIter1,&#32;_RAIter2&gt;&#32;_SpotType;
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SpotType&#32;__mm&#32;=&#32;__mismatch_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_EqualFromLessCompare(__pred),&#32;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag(),&#32;
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__mm.first&#32;==&#32;__end1)
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(__pred(*__mm.first,&#32;*__mm.second));
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;_RAIter2,&#32;_RAIter1&gt;&#32;_SpotType;
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SpotType&#32;__mm&#32;=&#32;__mismatch_switch(__begin2,&#32;__end2,&#32;__begin1,&#32;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_EqualFromLessCompare(__pred),&#32;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag(),&#32;
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
407 
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__mm.first&#32;!=&#32;__end2)
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(__pred(*__mm.second,&#32;*__mm.first));
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::lexicographical_compare(
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred);
415 &#32;&#32;&#32;&#32;}
416 
417 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
418 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
419 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
420 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
421 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2)
423 &#32;&#32;&#32;&#32;{
424 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::lexicographical_compare(__begin1,&#32;__end1,
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2);
428 <emphasis role="preprocessor">#endif</emphasis>
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_IIter1&gt;&#32;_TraitsType1;
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType1::value_type&#32;_ValueType1;
432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType1::iterator_category&#32;_IteratorCategory1;
433 
434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_IIter2&gt;&#32;_TraitsType2;
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType2::value_type&#32;_ValueType2;
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType2::iterator_category&#32;_IteratorCategory2;
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___less">__gnu_parallel::_Less&lt;_ValueType1, _ValueType2&gt;</link>&#32;_LessType;
438 
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lexicographical_compare_switch(
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;_LessType(),
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorCategory1(),&#32;_IteratorCategory2());
442 &#32;&#32;&#32;&#32;}
443 
444 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
445 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
446 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
447 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
448 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
451 &#32;&#32;&#32;&#32;{
452 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::lexicographical_compare(__begin1,&#32;__end1,
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred);
457 <emphasis role="preprocessor">#endif</emphasis>
458 
459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_IIter1&gt;&#32;_TraitsType1;
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType1::iterator_category&#32;_IteratorCategory1;
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_IIter2&gt;&#32;_TraitsType2;
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType2::iterator_category&#32;_IteratorCategory2;
464 
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lexicographical_compare_switch(
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred,
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorCategory1(),&#32;_IteratorCategory2());
468 &#32;&#32;&#32;&#32;}
469 
470 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
471 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_GLIBCXX_STD_A::lexicographical_compare_three_way;
472 <emphasis role="preprocessor">#endif</emphasis>
473 }&#32;<emphasis role="comment">//&#32;end&#32;namespace</emphasis>
474 }&#32;<emphasis role="comment">//&#32;end&#32;namespace</emphasis>
475 
476 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_ALGOBASE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
