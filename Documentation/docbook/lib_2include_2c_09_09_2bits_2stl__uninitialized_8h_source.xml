<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__uninitialized_8h_source" xml:lang="en-US">
<title>stl_uninitialized.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_uninitialized.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Raw&#32;memory&#32;manipulators&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_UNINITIALIZED_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_UNINITIALIZED_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
61 <emphasis role="preprocessor">#endif</emphasis>
62 
63 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copy</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__alloc_traits</emphasis>
65 
66 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
67 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
70 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
71 {
72 _GLIBCXX_BEGIN_NAMESPACE_VERSION
73 
79 
80 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
81 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ValueType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
83 &#32;&#32;&#32;&#32;__check_constructible()
84 &#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Trivial&#32;types&#32;can&#32;have&#32;deleted&#32;constructors,&#32;but&#32;std::copy&#32;etc.</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;use&#32;assignment&#32;(or&#32;memmove)&#32;not&#32;construction,&#32;so&#32;we&#32;need&#32;an</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;explicit&#32;check&#32;that&#32;construction&#32;from&#32;_Tp&#32;is&#32;actually&#32;valid,</emphasis>
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;some&#32;ill-formed&#32;uses&#32;of&#32;std::uninitialized_xxx&#32;would</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compile&#32;without&#32;errors.&#32;This&#32;gives&#32;a&#32;nice&#32;clear&#32;error&#32;message.</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_constructible&lt;_ValueType,&#32;_Tp&gt;::value,
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;result&#32;type&#32;must&#32;be&#32;constructible&#32;from&#32;input&#32;type&quot;</emphasis>);
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
94 &#32;&#32;&#32;&#32;}
95 
96 <emphasis role="comment">//&#32;If&#32;the&#32;type&#32;is&#32;trivial&#32;we&#32;don&apos;t&#32;need&#32;to&#32;construct&#32;it,&#32;just&#32;assign&#32;to&#32;it.</emphasis>
97 <emphasis role="comment">//&#32;But&#32;trivial&#32;types&#32;can&#32;still&#32;have&#32;deleted&#32;or&#32;inaccessible&#32;assignment,</emphasis>
98 <emphasis role="comment">//&#32;so&#32;don&apos;t&#32;try&#32;to&#32;use&#32;std::copy&#32;or&#32;std::fill&#32;etc.&#32;if&#32;we&#32;can&apos;t&#32;assign.</emphasis>
99 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_USE_ASSIGN_FOR_INIT(T,&#32;U)&#32;\</emphasis>
100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__is_trivial(T)&#32;&amp;&amp;&#32;__is_assignable(T&amp;,&#32;U)&#32;\</emphasis>
101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;std::__check_constructible&lt;T,&#32;U&gt;()</emphasis>
102 <emphasis role="preprocessor">#else</emphasis>
103 <emphasis role="comment">//&#32;No&#32;need&#32;to&#32;check&#32;if&#32;is_constructible&lt;T,&#32;U&gt;&#32;for&#32;C++98.&#32;Trivial&#32;types&#32;have</emphasis>
104 <emphasis role="comment">//&#32;no&#32;user-declared&#32;constructors,&#32;so&#32;if&#32;the&#32;assignment&#32;is&#32;valid,&#32;construction</emphasis>
105 <emphasis role="comment">//&#32;should&#32;be&#32;too.</emphasis>
106 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_USE_ASSIGN_FOR_INIT(T,&#32;U)&#32;\</emphasis>
107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__is_trivial(T)&#32;&amp;&amp;&#32;__is_assignable(T&amp;,&#32;U)</emphasis>
108 <emphasis role="preprocessor">#endif</emphasis>
109 
110 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
111 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
112 &#32;&#32;&#32;&#32;_ForwardIterator
113 &#32;&#32;&#32;&#32;__do_uninit_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
115 &#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__result;
117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
118 &#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__cur)
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur),&#32;*__first);
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
122 &#32;&#32;&#32;&#32;}
123 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
124 &#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__result,&#32;__cur);
126 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
127 &#32;&#32;&#32;&#32;}
128 &#32;&#32;&#32;&#32;}
129 
130 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_TrivialValueTypes&gt;
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_copy
132 &#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
137 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__do_uninit_copy(__first,&#32;__last,&#32;__result);&#32;}
138 &#32;&#32;&#32;&#32;};
139 
140 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_copy&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
142 &#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__last,&#32;__result);&#32;}
148 &#32;&#32;&#32;&#32;};
149 
151 
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
163 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">uninitialized_copy</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
165 &#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type
167 &#32;&#32;&#32;&#32;_ValueType1;
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
169 &#32;&#32;&#32;&#32;_ValueType2;
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_ValueType1&#32;must&#32;be&#32;trivially-copyable&#32;to&#32;use&#32;memmove,&#32;so&#32;don&apos;t</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bother&#32;optimizing&#32;to&#32;std::copy&#32;if&#32;it&#32;isn&apos;t.</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;Unnecessary&#32;because&#32;std::copy&#32;would&#32;check&#32;it&#32;anyway?</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__can_memmove&#32;=&#32;__is_trivial(_ValueType1);
175 
176 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::reference&#32;_From;
178 <emphasis role="preprocessor">#else</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_From&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(*__first);
180 <emphasis role="preprocessor">#endif</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__assignable
182 &#32;&#32;&#32;&#32;=&#32;_GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2,&#32;_From);
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_copy&lt;__can_memmove&#32;&amp;&amp;&#32;__assignable&gt;::
185 &#32;&#32;&#32;&#32;__uninit_copy(__first,&#32;__last,&#32;__result);
186 &#32;&#32;&#32;&#32;}
187 
189 
190 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
191 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
192 &#32;&#32;&#32;&#32;__do_uninit_fill(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
194 &#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
197 &#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__cur&#32;!=&#32;__last;&#32;++__cur)
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur),&#32;__x);
200 &#32;&#32;&#32;&#32;}
201 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
202 &#32;&#32;&#32;&#32;{
203 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur);
204 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
205 &#32;&#32;&#32;&#32;}
206 &#32;&#32;&#32;&#32;}
207 
208 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_TrivialValueType&gt;
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_fill
210 &#32;&#32;&#32;&#32;{
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_fill(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
215 &#32;&#32;&#32;&#32;{&#32;std::__do_uninit_fill(__first,&#32;__last,&#32;__x);&#32;}
216 &#32;&#32;&#32;&#32;};
217 
218 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_fill&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_fill(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link>(__first,&#32;__last,&#32;__x);&#32;}
226 &#32;&#32;&#32;&#32;};
227 
229 
239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
241 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a10e163c934df1d0793031027dd113f45">uninitialized_fill</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
245 &#32;&#32;&#32;&#32;_ValueType;
246 
247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Trivial&#32;types&#32;do&#32;not&#32;need&#32;a&#32;constructor&#32;to&#32;begin&#32;their&#32;lifetime,</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;try&#32;to&#32;use&#32;std::fill&#32;to&#32;benefit&#32;from&#32;its&#32;memset&#32;optimization.</emphasis>
249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__can_fill
250 &#32;&#32;&#32;&#32;=&#32;_GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
251 
252 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_fill&lt;__can_fill&gt;::
253 &#32;&#32;&#32;&#32;__uninit_fill(__first,&#32;__last,&#32;__x);
254 &#32;&#32;&#32;&#32;}
255 
257 
258 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
259 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
260 &#32;&#32;&#32;&#32;_ForwardIterator
261 &#32;&#32;&#32;&#32;__do_uninit_fill_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
262 &#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
264 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
265 &#32;&#32;&#32;&#32;{
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__cur)
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur),&#32;__x);
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
269 &#32;&#32;&#32;&#32;}
270 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
271 &#32;&#32;&#32;&#32;{
272 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur);
273 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
274 &#32;&#32;&#32;&#32;}
275 &#32;&#32;&#32;&#32;}
276 
277 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_TrivialValueType&gt;
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_fill_n
279 &#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
281 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_fill_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
284 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__do_uninit_fill_n(__first,&#32;__n,&#32;__x);&#32;}
285 &#32;&#32;&#32;&#32;};
286 
287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_fill_n&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
289 &#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
291 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_fill_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">std::fill_n</link>(__first,&#32;__n,&#32;__x);&#32;}
295 &#32;&#32;&#32;&#32;};
296 
298 
299 &#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
300 &#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;1339.&#32;uninitialized_fill_n&#32;should&#32;return&#32;the&#32;end&#32;of&#32;its&#32;range</emphasis>
310 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
312 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a53c0988739169fa73adec7bc92953ee2">uninitialized_fill_n</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
313 &#32;&#32;&#32;&#32;{
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
315 &#32;&#32;&#32;&#32;_ValueType;
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Trivial&#32;types&#32;do&#32;not&#32;need&#32;a&#32;constructor&#32;to&#32;begin&#32;their&#32;lifetime,</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;try&#32;to&#32;use&#32;std::fill_n&#32;to&#32;benefit&#32;from&#32;its&#32;optimizations.</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__can_fill
320 &#32;&#32;&#32;&#32;=&#32;_GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;)
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;arbitrary&#32;class&#32;types&#32;and&#32;floating&#32;point&#32;types&#32;we&#32;can&apos;t&#32;assume</emphasis>
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;__n&#32;&gt;&#32;0&#32;and&#32;std::__size_to_integer(__n)&#32;&gt;&#32;0&#32;are&#32;equivalent,</emphasis>
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;only&#32;use&#32;std::fill_n&#32;when&#32;_Size&#32;is&#32;already&#32;an&#32;integral&#32;type.</emphasis>
324 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_integer&lt;_Size&gt;::__value;
325 
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__uninitialized_fill_n&lt;__can_fill&gt;::
327 &#32;&#32;&#32;&#32;__uninit_fill_n(__first,&#32;__n,&#32;__x);
328 &#32;&#32;&#32;&#32;}
329 
330 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_USE_ASSIGN_FOR_INIT</emphasis>
331 
333 
334 &#32;&#32;<emphasis role="comment">//&#32;Extensions:&#32;versions&#32;of&#32;uninitialized_copy,&#32;uninitialized_fill,</emphasis>
335 &#32;&#32;<emphasis role="comment">//&#32;&#32;and&#32;uninitialized_fill_n&#32;that&#32;take&#32;an&#32;allocator&#32;parameter.</emphasis>
336 &#32;&#32;<emphasis role="comment">//&#32;&#32;We&#32;dispatch&#32;back&#32;to&#32;the&#32;standard&#32;versions&#32;when&#32;we&apos;re&#32;given&#32;the</emphasis>
337 &#32;&#32;<emphasis role="comment">//&#32;&#32;default&#32;allocator.&#32;&#32;For&#32;nondefault&#32;allocators&#32;we&#32;do&#32;not&#32;use</emphasis>
338 &#32;&#32;<emphasis role="comment">//&#32;&#32;any&#32;of&#32;the&#32;POD&#32;optimizations.</emphasis>
339 
340 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
342 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
343 &#32;&#32;&#32;&#32;_ForwardIterator
344 &#32;&#32;&#32;&#32;__uninitialized_copy_a(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;_Allocator&amp;&#32;__alloc)
346 &#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__result;
348 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
349 &#32;&#32;&#32;&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Allocator&gt;&#32;__traits;
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__cur)
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__traits::construct(__alloc,&#32;std::__addressof(*__cur),&#32;*__first);
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
354 &#32;&#32;&#32;&#32;}
355 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__result,&#32;__cur,&#32;__alloc);
358 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
359 &#32;&#32;&#32;&#32;}
360 &#32;&#32;&#32;&#32;}
361 
362 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
363 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
364 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
365 &#32;&#32;&#32;&#32;__uninitialized_copy_a(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;allocator&lt;_Tp&gt;&amp;)
367 &#32;&#32;&#32;&#32;{
368 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__do_uninit_copy(__first,&#32;__last,&#32;__result);
371 <emphasis role="preprocessor">#endif</emphasis>
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">std::uninitialized_copy</link>(__first,&#32;__last,&#32;__result);
373 &#32;&#32;&#32;&#32;}
374 
375 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
377 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
378 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
379 &#32;&#32;&#32;&#32;__uninitialized_move_a(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;_Allocator&amp;&#32;__alloc)
381 &#32;&#32;&#32;&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_copy_a(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_1af055d96e34ef409f987691ecfe97c510">_GLIBCXX_MAKE_MOVE_ITERATOR</link>(__first),
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_1af055d96e34ef409f987691ecfe97c510">_GLIBCXX_MAKE_MOVE_ITERATOR</link>(__last),
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,&#32;__alloc);
385 &#32;&#32;&#32;&#32;}
386 
387 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
389 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
391 &#32;&#32;&#32;&#32;__uninitialized_move_if_noexcept_a(_InputIterator&#32;__first,
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last,
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
395 &#32;&#32;&#32;&#32;{
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_copy_a
397 &#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_1af6c3752aa81b9b351813642ec18cfaca">_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR</link>(__first),
398 &#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_1af6c3752aa81b9b351813642ec18cfaca">_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR</link>(__last),&#32;__result,&#32;__alloc);
399 &#32;&#32;&#32;&#32;}
400 
401 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
402 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
403 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
404 &#32;&#32;&#32;&#32;__uninitialized_fill_a(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;_Allocator&amp;&#32;__alloc)
406 &#32;&#32;&#32;&#32;{
407 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
408 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
409 &#32;&#32;&#32;&#32;{
410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Allocator&gt;&#32;__traits;
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__cur&#32;!=&#32;__last;&#32;++__cur)
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__traits::construct(__alloc,&#32;std::__addressof(*__cur),&#32;__x);
413 &#32;&#32;&#32;&#32;}
414 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
415 &#32;&#32;&#32;&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur,&#32;__alloc);
417 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
418 &#32;&#32;&#32;&#32;}
419 &#32;&#32;&#32;&#32;}
420 
421 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
422 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
424 &#32;&#32;&#32;&#32;__uninitialized_fill_a(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;allocator&lt;_Tp2&gt;&amp;)
426 &#32;&#32;&#32;&#32;{
427 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__do_uninit_fill(__first,&#32;__last,&#32;__x);
430 <emphasis role="preprocessor">#endif</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a10e163c934df1d0793031027dd113f45">std::uninitialized_fill</link>(__first,&#32;__last,&#32;__x);
432 &#32;&#32;&#32;&#32;}
433 
434 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
436 &#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
437 &#32;&#32;&#32;&#32;_ForwardIterator
438 &#32;&#32;&#32;&#32;__uninitialized_fill_n_a(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;_Allocator&amp;&#32;__alloc)
440 &#32;&#32;&#32;&#32;{
441 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
442 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
443 &#32;&#32;&#32;&#32;{
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Allocator&gt;&#32;__traits;
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__cur)
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__traits::construct(__alloc,&#32;std::__addressof(*__cur),&#32;__x);
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
448 &#32;&#32;&#32;&#32;}
449 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
450 &#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur,&#32;__alloc);
452 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
453 &#32;&#32;&#32;&#32;}
454 &#32;&#32;&#32;&#32;}
455 
456 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
458 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
459 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
460 &#32;&#32;&#32;&#32;__uninitialized_fill_n_a(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;allocator&lt;_Tp2&gt;&amp;)
462 &#32;&#32;&#32;&#32;{
463 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__do_uninit_fill_n(__first,&#32;__n,&#32;__x);
466 <emphasis role="preprocessor">#endif</emphasis>
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a53c0988739169fa73adec7bc92953ee2">std::uninitialized_fill_n</link>(__first,&#32;__n,&#32;__x);
468 &#32;&#32;&#32;&#32;}
469 
470 
471 &#32;&#32;<emphasis role="comment">//&#32;Extensions:&#32;__uninitialized_copy_move,&#32;__uninitialized_move_copy,</emphasis>
472 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_fill_move,&#32;__uninitialized_move_fill.</emphasis>
473 &#32;&#32;<emphasis role="comment">//&#32;All&#32;of&#32;these&#32;algorithms&#32;take&#32;a&#32;user-supplied&#32;allocator,&#32;which&#32;is&#32;used</emphasis>
474 &#32;&#32;<emphasis role="comment">//&#32;for&#32;construction&#32;and&#32;destruction.</emphasis>
475 
476 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_copy_move</emphasis>
477 &#32;&#32;<emphasis role="comment">//&#32;Copies&#32;[first1,&#32;last1)&#32;into&#32;[result,&#32;result&#32;+&#32;(last1&#32;-&#32;first1)),&#32;and</emphasis>
478 &#32;&#32;<emphasis role="comment">//&#32;&#32;move&#32;[first2,&#32;last2)&#32;into</emphasis>
479 &#32;&#32;<emphasis role="comment">//&#32;&#32;[result,&#32;result&#32;+&#32;(last1&#32;-&#32;first1)&#32;+&#32;(last2&#32;-&#32;first2)).</emphasis>
480 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
482 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
483 &#32;&#32;&#32;&#32;__uninitialized_copy_move(_InputIterator1&#32;__first1,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator1&#32;__last1,
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__last2,
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
489 &#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__mid&#32;=&#32;std::__uninitialized_copy_a(__first1,&#32;__last1,
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc);
493 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
494 &#32;&#32;&#32;&#32;{
495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_move_a(__first2,&#32;__last2,&#32;__mid,&#32;__alloc);
496 &#32;&#32;&#32;&#32;}
497 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
498 &#32;&#32;&#32;&#32;{
499 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__result,&#32;__mid,&#32;__alloc);
500 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
501 &#32;&#32;&#32;&#32;}
502 &#32;&#32;&#32;&#32;}
503 
504 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_move_copy</emphasis>
505 &#32;&#32;<emphasis role="comment">//&#32;Moves&#32;[first1,&#32;last1)&#32;into&#32;[result,&#32;result&#32;+&#32;(last1&#32;-&#32;first1)),&#32;and</emphasis>
506 &#32;&#32;<emphasis role="comment">//&#32;&#32;copies&#32;[first2,&#32;last2)&#32;into</emphasis>
507 &#32;&#32;<emphasis role="comment">//&#32;&#32;[result,&#32;result&#32;+&#32;(last1&#32;-&#32;first1)&#32;+&#32;(last2&#32;-&#32;first2)).</emphasis>
508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
510 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
511 &#32;&#32;&#32;&#32;__uninitialized_move_copy(_InputIterator1&#32;__first1,
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator1&#32;__last1,
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__last2,
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
517 &#32;&#32;&#32;&#32;{
518 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__mid&#32;=&#32;std::__uninitialized_move_a(__first1,&#32;__last1,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc);
521 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
522 &#32;&#32;&#32;&#32;{
523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_copy_a(__first2,&#32;__last2,&#32;__mid,&#32;__alloc);
524 &#32;&#32;&#32;&#32;}
525 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
526 &#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__result,&#32;__mid,&#32;__alloc);
528 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
529 &#32;&#32;&#32;&#32;}
530 &#32;&#32;&#32;&#32;}
531 
532 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_fill_move</emphasis>
533 &#32;&#32;<emphasis role="comment">//&#32;Fills&#32;[result,&#32;mid)&#32;with&#32;x,&#32;and&#32;moves&#32;[first,&#32;last)&#32;into</emphasis>
534 &#32;&#32;<emphasis role="comment">//&#32;&#32;[mid,&#32;mid&#32;+&#32;(last&#32;-&#32;first)).</emphasis>
535 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
537 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
538 &#32;&#32;&#32;&#32;__uninitialized_fill_move(_ForwardIterator&#32;__result,&#32;_ForwardIterator&#32;__mid,
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;_InputIterator&#32;__first,
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last,&#32;_Allocator&amp;&#32;__alloc)
541 &#32;&#32;&#32;&#32;{
542 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_fill_a(__result,&#32;__mid,&#32;__x,&#32;__alloc);
543 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
544 &#32;&#32;&#32;&#32;{
545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_move_a(__first,&#32;__last,&#32;__mid,&#32;__alloc);
546 &#32;&#32;&#32;&#32;}
547 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
548 &#32;&#32;&#32;&#32;{
549 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__result,&#32;__mid,&#32;__alloc);
550 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
551 &#32;&#32;&#32;&#32;}
552 &#32;&#32;&#32;&#32;}
553 
554 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_move_fill</emphasis>
555 &#32;&#32;<emphasis role="comment">//&#32;Moves&#32;[first1,&#32;last1)&#32;into&#32;[first2,&#32;first2&#32;+&#32;(last1&#32;-&#32;first1)),&#32;and</emphasis>
556 &#32;&#32;<emphasis role="comment">//&#32;&#32;fills&#32;[first2&#32;+&#32;(last1&#32;-&#32;first1),&#32;last2)&#32;with&#32;x.</emphasis>
557 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
559 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
560 &#32;&#32;&#32;&#32;__uninitialized_move_fill(_InputIterator&#32;__first1,&#32;_InputIterator&#32;__last1,
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__first2,
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last2,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
564 &#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__mid2&#32;=&#32;std::__uninitialized_move_a(__first1,&#32;__last1,
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc);
568 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
569 &#32;&#32;&#32;&#32;{
570 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_fill_a(__mid2,&#32;__last2,&#32;__x,&#32;__alloc);
571 &#32;&#32;&#32;&#32;}
572 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
573 &#32;&#32;&#32;&#32;{
574 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first2,&#32;__mid2,&#32;__alloc);
575 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
576 &#32;&#32;&#32;&#32;}
577 &#32;&#32;&#32;&#32;}
578 
580 
581 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
583 
584 &#32;&#32;<emphasis role="comment">//&#32;Extensions:&#32;__uninitialized_default,&#32;__uninitialized_default_n,</emphasis>
585 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default_a,&#32;__uninitialized_default_n_a.</emphasis>
586 
587 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_TrivialValueType&gt;
588 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_1
589 &#32;&#32;&#32;&#32;{
590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_default(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
594 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
595 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__cur&#32;!=&#32;__last;&#32;++__cur)
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur));
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
600 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur);
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
605 &#32;&#32;&#32;&#32;}
606 &#32;&#32;&#32;&#32;};
607 
608 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
609 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_1&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
610 &#32;&#32;&#32;&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_default(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
617 
618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type*&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__addressof(*__first);
620 &#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__first&#32;!=&#32;__last)
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link>(__first,&#32;__last,&#32;*<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
623 &#32;&#32;&#32;&#32;}
624 &#32;&#32;&#32;&#32;};
625 
626 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_TrivialValueType&gt;
627 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_n_1
628 &#32;&#32;&#32;&#32;{
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
630 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_default_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
634 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
635 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__cur)
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur));
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
641 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur);
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
646 &#32;&#32;&#32;&#32;}
647 &#32;&#32;&#32;&#32;};
648 
649 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
650 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_n_1&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
651 &#32;&#32;&#32;&#32;{
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
653 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_default_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;0)
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type*&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__addressof(*__first);
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;<link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">std::fill_n</link>(__first,&#32;__n&#32;-&#32;1,&#32;*<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
666 &#32;&#32;&#32;&#32;}
667 &#32;&#32;&#32;&#32;};
668 
669 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default</emphasis>
670 &#32;&#32;<emphasis role="comment">//&#32;Fills&#32;[first,&#32;last)&#32;with&#32;value-initialized&#32;value_types.</emphasis>
671 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
672 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
673 &#32;&#32;&#32;&#32;__uninitialized_default(_ForwardIterator&#32;__first,
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last)
675 &#32;&#32;&#32;&#32;{
676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
677 &#32;&#32;&#32;&#32;_ValueType;
678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trivial&#32;types&#32;can&#32;have&#32;deleted&#32;assignment</emphasis>
679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__assignable&#32;=&#32;is_copy_assignable&lt;_ValueType&gt;::value;
680 
681 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_default_1&lt;__is_trivial(_ValueType)
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__assignable&gt;::
683 &#32;&#32;&#32;&#32;__uninit_default(__first,&#32;__last);
684 &#32;&#32;&#32;&#32;}
685 
686 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default_n</emphasis>
687 &#32;&#32;<emphasis role="comment">//&#32;Fills&#32;[first,&#32;first&#32;+&#32;n)&#32;with&#32;value-initialized&#32;value_types.</emphasis>
688 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
689 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
690 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
691 &#32;&#32;&#32;&#32;__uninitialized_default_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
692 &#32;&#32;&#32;&#32;{
693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
694 &#32;&#32;&#32;&#32;_ValueType;
695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;uninitialized_fill_n&#32;for&#32;the&#32;conditions&#32;for&#32;using&#32;std::fill_n.</emphasis>
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__can_fill
697 &#32;&#32;&#32;&#32;=&#32;__and_&lt;is_integral&lt;_Size&gt;,&#32;is_copy_assignable&lt;_ValueType&gt;&gt;<link linkend="_classvalue">::value</link>;
698 
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__uninitialized_default_n_1&lt;__is_trivial(_ValueType)
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__can_fill&gt;::
701 &#32;&#32;&#32;&#32;__uninit_default_n(__first,&#32;__n);
702 &#32;&#32;&#32;&#32;}
703 
704 
705 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default_a</emphasis>
706 &#32;&#32;<emphasis role="comment">//&#32;Fills&#32;[first,&#32;last)&#32;with&#32;value_types&#32;constructed&#32;by&#32;the&#32;allocator</emphasis>
707 &#32;&#32;<emphasis role="comment">//&#32;alloc,&#32;with&#32;no&#32;arguments&#32;passed&#32;to&#32;the&#32;construct&#32;call.</emphasis>
708 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
710 &#32;&#32;&#32;&#32;__uninitialized_default_a(_ForwardIterator&#32;__first,
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
713 &#32;&#32;&#32;&#32;{
714 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
715 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
716 &#32;&#32;&#32;&#32;{
717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Allocator&gt;&#32;__traits;
718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__cur&#32;!=&#32;__last;&#32;++__cur)
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__traits::construct(__alloc,&#32;std::__addressof(*__cur));
720 &#32;&#32;&#32;&#32;}
721 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
722 &#32;&#32;&#32;&#32;{
723 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur,&#32;__alloc);
724 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
725 &#32;&#32;&#32;&#32;}
726 &#32;&#32;&#32;&#32;}
727 
728 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
729 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
730 &#32;&#32;&#32;&#32;__uninitialized_default_a(_ForwardIterator&#32;__first,
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;_Tp&gt;&amp;)
733 &#32;&#32;&#32;&#32;{&#32;std::__uninitialized_default(__first,&#32;__last);&#32;}
734 
735 
736 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default_n_a</emphasis>
737 &#32;&#32;<emphasis role="comment">//&#32;Fills&#32;[first,&#32;first&#32;+&#32;n)&#32;with&#32;value_types&#32;constructed&#32;by&#32;the&#32;allocator</emphasis>
738 &#32;&#32;<emphasis role="comment">//&#32;alloc,&#32;with&#32;no&#32;arguments&#32;passed&#32;to&#32;the&#32;construct&#32;call.</emphasis>
739 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
740 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;_ForwardIterator
741 &#32;&#32;&#32;&#32;__uninitialized_default_n_a(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
743 &#32;&#32;&#32;&#32;{
744 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
745 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
746 &#32;&#32;&#32;&#32;{
747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Allocator&gt;&#32;__traits;
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__cur)
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__traits::construct(__alloc,&#32;std::__addressof(*__cur));
750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
751 &#32;&#32;&#32;&#32;}
752 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
753 &#32;&#32;&#32;&#32;{
754 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur,&#32;__alloc);
755 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
756 &#32;&#32;&#32;&#32;}
757 &#32;&#32;&#32;&#32;}
758 
759 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default_n_a&#32;specialization&#32;for&#32;std::allocator,</emphasis>
760 &#32;&#32;<emphasis role="comment">//&#32;which&#32;ignores&#32;the&#32;allocator&#32;and&#32;value-initializes&#32;the&#32;elements.</emphasis>
761 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
762 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
764 &#32;&#32;&#32;&#32;__uninitialized_default_n_a(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;_Tp&gt;&amp;)
766 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_default_n(__first,&#32;__n);&#32;}
767 
768 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_TrivialValueType&gt;
769 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_novalue_1
770 &#32;&#32;&#32;&#32;{
771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
772 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
773 &#32;&#32;&#32;&#32;__uninit_default_novalue(_ForwardIterator&#32;__first,
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last)
775 &#32;&#32;&#32;&#32;{
776 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
777 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__cur&#32;!=&#32;__last;&#32;++__cur)
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct_novalue(std::__addressof(*__cur));
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
782 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur);
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
787 &#32;&#32;&#32;&#32;}
788 &#32;&#32;&#32;&#32;};
789 
790 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
791 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_novalue_1&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
792 &#32;&#32;&#32;&#32;{
793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uninit_default_novalue(_ForwardIterator&#32;__first,
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last)
797 &#32;&#32;&#32;&#32;{
798 &#32;&#32;&#32;&#32;}
799 &#32;&#32;&#32;&#32;};
800 
801 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_TrivialValueType&gt;
802 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_novalue_n_1
803 &#32;&#32;&#32;&#32;{
804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
805 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
806 &#32;&#32;&#32;&#32;__uninit_default_novalue_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
807 &#32;&#32;&#32;&#32;{
808 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__first;
809 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__cur)
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct_novalue(std::__addressof(*__cur));
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
815 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__cur);
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
820 &#32;&#32;&#32;&#32;}
821 &#32;&#32;&#32;&#32;};
822 
823 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
824 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uninitialized_default_novalue_n_1&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
825 &#32;&#32;&#32;&#32;{
826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
827 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
828 &#32;&#32;&#32;&#32;__uninit_default_novalue_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
829 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::next(__first,&#32;__n);&#32;}
830 &#32;&#32;&#32;&#32;};
831 
832 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default_novalue</emphasis>
833 &#32;&#32;<emphasis role="comment">//&#32;Fills&#32;[first,&#32;last)&#32;with&#32;default-initialized&#32;value_types.</emphasis>
834 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
835 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
836 &#32;&#32;&#32;&#32;__uninitialized_default_novalue(_ForwardIterator&#32;__first,
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last)
838 &#32;&#32;&#32;&#32;{
839 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
840 &#32;&#32;&#32;&#32;_ValueType;
841 
842 &#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_default_novalue_1&lt;
843 &#32;&#32;&#32;&#32;is_trivially_default_constructible&lt;_ValueType&gt;::value&gt;::
844 &#32;&#32;&#32;&#32;__uninit_default_novalue(__first,&#32;__last);
845 &#32;&#32;&#32;&#32;}
846 
847 &#32;&#32;<emphasis role="comment">//&#32;__uninitialized_default_novalue_n</emphasis>
848 &#32;&#32;<emphasis role="comment">//&#32;Fills&#32;[first,&#32;first&#32;+&#32;n)&#32;with&#32;default-initialized&#32;value_types.</emphasis>
849 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
850 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
851 &#32;&#32;&#32;&#32;__uninitialized_default_novalue_n(_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
852 &#32;&#32;&#32;&#32;{
853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
854 &#32;&#32;&#32;&#32;_ValueType;
855 
856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__uninitialized_default_novalue_n_1&lt;
857 &#32;&#32;&#32;&#32;is_trivially_default_constructible&lt;_ValueType&gt;::value&gt;::
858 &#32;&#32;&#32;&#32;__uninit_default_novalue_n(__first,&#32;__n);
859 &#32;&#32;&#32;&#32;}
860 
861 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
863 &#32;&#32;&#32;&#32;_ForwardIterator
864 &#32;&#32;&#32;&#32;__uninitialized_copy_n(_InputIterator&#32;__first,&#32;_Size&#32;__n,
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;input_iterator_tag)
866 &#32;&#32;&#32;&#32;{
867 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__result;
868 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
869 &#32;&#32;&#32;&#32;{
870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__first,&#32;++__cur)
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur),&#32;*__first);
872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
873 &#32;&#32;&#32;&#32;}
874 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
875 &#32;&#32;&#32;&#32;{
876 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__result,&#32;__cur);
877 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
878 &#32;&#32;&#32;&#32;}
879 &#32;&#32;&#32;&#32;}
880 
881 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
883 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
884 &#32;&#32;&#32;&#32;__uninitialized_copy_n(_RandomAccessIterator&#32;__first,&#32;_Size&#32;__n,
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
887 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">std::uninitialized_copy</link>(__first,&#32;__first&#32;+&#32;__n,&#32;__result);&#32;}
888 
889 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
891 &#32;&#32;&#32;&#32;pair&lt;_InputIterator,&#32;_ForwardIterator&gt;
892 &#32;&#32;&#32;&#32;__uninitialized_copy_n_pair(_InputIterator&#32;__first,&#32;_Size&#32;__n,
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;input_iterator_tag)
894 &#32;&#32;&#32;&#32;{
895 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__result;
896 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
897 &#32;&#32;&#32;&#32;{
898 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__first,&#32;++__cur)
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Construct(std::__addressof(*__cur),&#32;*__first);
900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__cur};
901 &#32;&#32;&#32;&#32;}
902 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
903 &#32;&#32;&#32;&#32;{
904 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__result,&#32;__cur);
905 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
906 &#32;&#32;&#32;&#32;}
907 &#32;&#32;&#32;&#32;}
908 
909 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
911 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_RandomAccessIterator,&#32;_ForwardIterator&gt;
912 &#32;&#32;&#32;&#32;__uninitialized_copy_n_pair(_RandomAccessIterator&#32;__first,&#32;_Size&#32;__n,
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
915 &#32;&#32;&#32;&#32;{
916 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__second_res&#32;=&#32;<link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">uninitialized_copy</link>(__first,&#32;__first&#32;+&#32;__n,&#32;__result);
917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__first_res&#32;=&#32;std::next(__first,&#32;__n);
918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first_res,&#32;__second_res};
919 &#32;&#32;&#32;&#32;}
920 
922 
933 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
934 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
935 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a05e4bc318c0d5f2efb68a9ea6c55739b">uninitialized_copy_n</link>(_InputIterator&#32;__first,&#32;_Size&#32;__n,
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
937 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__uninitialized_copy_n(__first,&#32;__n,&#32;__result,
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));&#32;}
939 
941 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
942 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator,&#32;_ForwardIterator&gt;
943 &#32;&#32;&#32;&#32;__uninitialized_copy_n_pair(_InputIterator&#32;__first,&#32;_Size&#32;__n,
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
945 &#32;&#32;&#32;&#32;{
946 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
947 &#32;&#32;&#32;&#32;std::__uninitialized_copy_n_pair(__first,&#32;__n,&#32;__result,
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
949 &#32;&#32;&#32;&#32;}
951 <emphasis role="preprocessor">#endif</emphasis>
952 
953 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
954 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_raw_memory_algorithms&#32;201606L</emphasis>
955 
962 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
963 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
964 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad2a13bc06282fe96b24e2246025bc8a9">uninitialized_default_construct</link>(_ForwardIterator&#32;__first,
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last)
966 &#32;&#32;&#32;&#32;{
967 &#32;&#32;&#32;&#32;&#32;&#32;__uninitialized_default_novalue(__first,&#32;__last);
968 &#32;&#32;&#32;&#32;}
969 
977 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
978 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
979 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1acf95338aa12ecf2e9d44b3195412bfac">uninitialized_default_construct_n</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
980 &#32;&#32;&#32;&#32;{
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__uninitialized_default_novalue_n(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
982 &#32;&#32;&#32;&#32;}
983 
990 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
991 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
992 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a08ede7ab702bb5649a587b656f0e0c2c">uninitialized_value_construct</link>(_ForwardIterator&#32;__first,
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last)
994 &#32;&#32;&#32;&#32;{
995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__uninitialized_default(__first,&#32;__last);
996 &#32;&#32;&#32;&#32;}
997 
1005 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
1006 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1007 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab737a726156b3474897e2283525b46aa">uninitialized_value_construct_n</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
1008 &#32;&#32;&#32;&#32;{
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__uninitialized_default_n(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
1010 &#32;&#32;&#32;&#32;}
1011 
1020 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1021 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1022 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1affe72b3822ef701f99b9ba1a6c953aed">uninitialized_move</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
1024 &#32;&#32;&#32;&#32;{
1025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">std::uninitialized_copy</link>
1026 &#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_1af055d96e34ef409f987691ecfe97c510">_GLIBCXX_MAKE_MOVE_ITERATOR</link>(__first),
1027 &#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_1af055d96e34ef409f987691ecfe97c510">_GLIBCXX_MAKE_MOVE_ITERATOR</link>(__last),&#32;__result);
1028 &#32;&#32;&#32;&#32;}
1029 
1038 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1039 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator,&#32;_ForwardIterator&gt;
1040 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab613a9e189675f990f49fa9de211d509">uninitialized_move_n</link>(_InputIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result)
1042 &#32;&#32;&#32;&#32;{
1043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;std::__uninitialized_copy_n_pair
1044 &#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_1af055d96e34ef409f987691ecfe97c510">_GLIBCXX_MAKE_MOVE_ITERATOR</link>(__first),
1045 &#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__result);
1046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__res.first.base(),&#32;__res.second};
1047 &#32;&#32;&#32;&#32;}
1048 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1049 
1050 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1052 
1053 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1054 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1055 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1056 &#32;&#32;&#32;&#32;__relocate_object_a(_Tp*&#32;__restrict&#32;__dest,&#32;_Up*&#32;__restrict&#32;__orig,
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
1058 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::allocator_traits&lt;_Allocator&gt;::construct(__alloc,
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dest,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__orig)))
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(std::allocator_traits&lt;_Allocator&gt;::destroy(
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc,&#32;std::__addressof(*__orig))))
1062 &#32;&#32;&#32;&#32;{
1063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::allocator_traits&lt;_Allocator&gt;&#32;__traits;
1064 &#32;&#32;&#32;&#32;&#32;&#32;__traits::construct(__alloc,&#32;__dest,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__orig));
1065 &#32;&#32;&#32;&#32;&#32;&#32;__traits::destroy(__alloc,&#32;std::__addressof(*__orig));
1066 &#32;&#32;&#32;&#32;}
1067 
1068 &#32;&#32;<emphasis role="comment">//&#32;This&#32;class&#32;may&#32;be&#32;specialized&#32;for&#32;specific&#32;types.</emphasis>
1069 &#32;&#32;<emphasis role="comment">//&#32;Also&#32;known&#32;as&#32;is_trivially_relocatable.</emphasis>
1070 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1071 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_bitwise_relocatable
1072 &#32;&#32;&#32;&#32;:&#32;is_trivial&lt;_Tp&gt;&#32;{&#32;};
1073 
1074 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1076 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1077 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1078 &#32;&#32;&#32;&#32;__relocate_a_1(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;_Allocator&amp;&#32;__alloc)
1080 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::__relocate_object_a(std::addressof(*__result),
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::addressof(*__first),
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc)))
1083 &#32;&#32;&#32;&#32;{
1084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type
1085 &#32;&#32;&#32;&#32;_ValueType;
1086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
1087 &#32;&#32;&#32;&#32;_ValueType2;
1088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_same&lt;_ValueType,&#32;_ValueType2&gt;::value,
1089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;relocation&#32;is&#32;only&#32;possible&#32;for&#32;values&#32;of&#32;the&#32;same&#32;type&quot;</emphasis>);
1090 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__cur&#32;=&#32;__result;
1091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__cur)
1092 &#32;&#32;&#32;&#32;std::__relocate_object_a(std::__addressof(*__cur),
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__addressof(*__first),&#32;__alloc);
1094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
1095 &#32;&#32;&#32;&#32;}
1096 
1097 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1098 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1099 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__enable_if_t&lt;std::__is_bitwise_relocatable&lt;_Tp&gt;::value,&#32;_Tp*&gt;
1100 &#32;&#32;&#32;&#32;__relocate_a_1(_Tp*&#32;__first,&#32;_Tp*&#32;__last,
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__result,
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[__maybe_unused__]]&#32;allocator&lt;_Up&gt;&amp;&#32;__alloc)&#32;<emphasis role="keyword">noexcept</emphasis>
1103 &#32;&#32;&#32;&#32;{
1104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;__last&#32;-&#32;__first;
1105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;&gt;&#32;0)
1106 &#32;&#32;&#32;&#32;{
1107 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
1108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Can&apos;t&#32;use&#32;memmove.&#32;Wrap&#32;the&#32;pointer&#32;so&#32;that&#32;__relocate_a_1</emphasis>
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;resolves&#32;to&#32;the&#32;non-trivial&#32;overload&#32;above.</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__normal_iterator&lt;_Tp*,&#32;void&gt;&#32;__out(__result);
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__out&#32;=&#32;std::__relocate_a_1(__first,&#32;__last,&#32;__out,&#32;__alloc);
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out.base();
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1116 <emphasis role="preprocessor">#endif</emphasis>
1117 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memmove(__result,&#32;__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
1118 &#32;&#32;&#32;&#32;}
1119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>;
1120 &#32;&#32;&#32;&#32;}
1121 
1122 
1123 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
1125 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1126 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1127 &#32;&#32;&#32;&#32;__relocate_a(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;_Allocator&amp;&#32;__alloc)
1129 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__relocate_a_1(std::__niter_base(__first),
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__last),
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__result),&#32;__alloc)))
1132 &#32;&#32;&#32;&#32;{
1133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__relocate_a_1(std::__niter_base(__first),
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__last),
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__result),&#32;__alloc);
1136 &#32;&#32;&#32;&#32;}
1137 
1139 <emphasis role="preprocessor">#endif</emphasis>
1140 
1142 
1143 _GLIBCXX_END_NAMESPACE_VERSION
1144 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1145 
1146 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_UNINITIALIZED_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
