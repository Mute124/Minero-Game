<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classutf8__reader" xml:lang="en-US">
<title>utf8_reader&lt; T &gt; Class Template Reference</title>
<indexterm><primary>utf8_reader&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;toml.hpp&gt;</computeroutput>
</para>
Inheritance diagram for utf8_reader&lt; T &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classutf8__reader__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for utf8_reader&lt; T &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classutf8__reader__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename U , typename String  = std::string_view&gt; </para><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classutf8__reader_1a0bb05e6654cb4453ee9f719388cf5ab9">utf8_reader</link> (U &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>, String &amp;&amp;<link linkend="_classutf8__reader_1a780f2a782652606b6db722e880019eb2">source_path</link>={}) noexcept(std::is_nothrow_constructible_v&lt; utf8_byte_stream&lt; T &gt;, U &amp;&amp; &gt;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link> &amp; <link linkend="_classutf8__reader_1a780f2a782652606b6db722e880019eb2">source_path</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const <link linkend="_structutf8__codepoint">utf8_codepoint</link> * <link linkend="_classutf8__reader_1aed6bb16cd83adb87af6c0d008a0c78f7">read_next</link> () noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>) final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__reader_1ae203f27a05b9833af011c2f169b97dae">peek_eof</link> () const noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>) final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> optional&lt; parse_error &gt; &amp;&amp; <link linkend="_classutf8__reader_1a70b6e1eebfed24383be8f99c675ed1b3">error</link> () noexcept final</para>
</listitem>
            <listitem><para>template&lt;typename U , typename String  = std::string_view&gt; </para><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classutf8__reader_1a0bb05e6654cb4453ee9f719388cf5ab9">utf8_reader</link> (U &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>, String &amp;&amp;<link linkend="_classutf8__reader_1a780f2a782652606b6db722e880019eb2">source_path</link>={}) noexcept(std::is_nothrow_constructible_v&lt; utf8_byte_stream&lt; T &gt;, U &amp;&amp; &gt;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link> &amp; <link linkend="_classutf8__reader_1a780f2a782652606b6db722e880019eb2">source_path</link> () const noexcept final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const <link linkend="_structutf8__codepoint">utf8_codepoint</link> * <link linkend="_classutf8__reader_1aed6bb16cd83adb87af6c0d008a0c78f7">read_next</link> () noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>) final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__reader_1ae203f27a05b9833af011c2f169b97dae">peek_eof</link> () const noexcept(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>) final</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> optional&lt; parse_error &gt; &amp;&amp; <link linkend="_classutf8__reader_1a70b6e1eebfed24383be8f99c675ed1b3">error</link> () noexcept final</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_structutf8__reader__interface">utf8_reader_interface</link>        <itemizedlist>
            <listitem><para>virtual <link linkend="_structutf8__reader__interface_1a467484791fcf69056a30f380439703ba">~utf8_reader_interface</link> () noexcept=default</para>
</listitem>
            <listitem><para>virtual <link linkend="_structutf8__reader__interface_1a467484791fcf69056a30f380439703ba">~utf8_reader_interface</link> () noexcept=default</para>
</listitem>
        </itemizedlist>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classutf8__reader_1a0bb05e6654cb4453ee9f719388cf5ab9"/><section>
    <title>utf8_reader()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>utf8_reader</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>utf8_reader</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename U , typename String  = std::string_view&gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;<link linkend="_classutf8__reader">::utf8_reader</link> (U &amp;&amp; source, String &amp;&amp; source_path = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classutf8__reader_1a0bb05e6654cb4453ee9f719388cf5ab9"/><section>
    <title>utf8_reader()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>utf8_reader</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>utf8_reader</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename U , typename String  = std::string_view&gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;<link linkend="_classutf8__reader">::utf8_reader</link> (U &amp;&amp; source, String &amp;&amp; source_path = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classutf8__reader_1a70b6e1eebfed24383be8f99c675ed1b3"/><section>
    <title>error()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>error</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>error</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> optional&lt; parse_error &gt; &amp;&amp; <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::error ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1a137047d526546c1d4e0ce23ba69ceac5">utf8_reader_interface</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classutf8__reader_a70b6e1eebfed24383be8f99c675ed1b3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classutf8__reader_1a70b6e1eebfed24383be8f99c675ed1b3"/><section>
    <title>error()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>error</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>error</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> optional&lt; parse_error &gt; &amp;&amp; <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::error ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1a137047d526546c1d4e0ce23ba69ceac5">utf8_reader_interface</link>.</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classutf8__reader_a70b6e1eebfed24383be8f99c675ed1b3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classutf8__reader_1ae203f27a05b9833af011c2f169b97dae"/><section>
    <title>peek_eof()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>peek_eof</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>peek_eof</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::peek_eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1aa49d7571963817157d85094a3191997c">utf8_reader_interface</link>.</para>
</section>
<anchor xml:id="_classutf8__reader_1ae203f27a05b9833af011c2f169b97dae"/><section>
    <title>peek_eof()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>peek_eof</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>peek_eof</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::peek_eof ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1aa49d7571963817157d85094a3191997c">utf8_reader_interface</link>.</para>
</section>
<anchor xml:id="_classutf8__reader_1aed6bb16cd83adb87af6c0d008a0c78f7"/><section>
    <title>read_next()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>read_next</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>read_next</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const <link linkend="_structutf8__codepoint">utf8_codepoint</link> * <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::read_next ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1abfc2cf51cb019309c776bcef347e9796">utf8_reader_interface</link>.</para>
</section>
<anchor xml:id="_classutf8__reader_1aed6bb16cd83adb87af6c0d008a0c78f7"/><section>
    <title>read_next()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>read_next</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>read_next</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> const <link linkend="_structutf8__codepoint">utf8_codepoint</link> * <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::read_next ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1abfc2cf51cb019309c776bcef347e9796">utf8_reader_interface</link>.</para>
</section>
<anchor xml:id="_classutf8__reader_1a780f2a782652606b6db722e880019eb2"/><section>
    <title>source_path()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>source_path</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>source_path</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link> &amp; <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::source_path ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1a4556538dd8acf45ad0e54594b7f23519">utf8_reader_interface</link>.</para>
</section>
<anchor xml:id="_classutf8__reader_1a780f2a782652606b6db722e880019eb2"/><section>
    <title>source_path()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>source_path</primary><secondary>utf8_reader&lt; T &gt;</secondary></indexterm>
<indexterm><primary>utf8_reader&lt; T &gt;</primary><secondary>source_path</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link> &amp; <link linkend="_classutf8__reader">utf8_reader</link>&lt; T &gt;::source_path ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>
Implements <link linkend="_structutf8__reader__interface_1a4556538dd8acf45ad0e54594b7f23519">utf8_reader_interface</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/<link linkend="_parser_8inl">parser.inl</link>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
