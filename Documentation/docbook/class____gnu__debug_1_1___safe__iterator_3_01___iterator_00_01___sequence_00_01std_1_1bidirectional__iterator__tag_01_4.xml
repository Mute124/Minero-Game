<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4" xml:lang="en-US">
<title>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt; Class Template Reference</title>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;safe_iterator.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectio4dd47ca4d869b8d92d92781bb07bbb06.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectio8c5b40a5e719501d94b91a4bd29878b8.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a3a3a5cc69b2e1e4c50e33daaa8689604">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a037d25edc49ed6168a1092d6b3157bdf">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a47d3374fdff94b8780c3b708fbc59b31">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a0d635b5b496022278e946dd102e1c334">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link> &gt;::__value, std::bidirectional_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a5c975e7983a98b3e0ce2573b79b08af7">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a251ba70c245471b93e1c440f093a9cd5">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa380eff611c872f236277e43e4eedf7b">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa071d99ce70ab4fa90ac8992489d2b88">operator--</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator predecrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a116df69aba5b5e6182942243df25b698">operator--</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postdecrement. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aee45ca57597d27fb0ebcaa342709efe5">_M_decrementable</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a3a3a5cc69b2e1e4c50e33daaa8689604">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a037d25edc49ed6168a1092d6b3157bdf">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a47d3374fdff94b8780c3b708fbc59b31">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a0d635b5b496022278e946dd102e1c334">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link> &gt;::__value, std::bidirectional_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a5c975e7983a98b3e0ce2573b79b08af7">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a251ba70c245471b93e1c440f093a9cd5">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa380eff611c872f236277e43e4eedf7b">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa071d99ce70ab4fa90ac8992489d2b88">operator--</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator predecrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a116df69aba5b5e6182942243df25b698">operator--</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postdecrement. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aee45ca57597d27fb0ebcaa342709efe5">_M_decrementable</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a9c152e7a0e9b12c9bf6d9db309fff72b">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af80c8adce05a44a11776092f029b0645">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af7595c1b79ad6fd9c6330085e0b07cf9">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1aa19b46fc4451b021905e0e4f0d173b58">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link> &gt;::__value, std::forward_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a9c152e7a0e9b12c9bf6d9db309fff72b">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af80c8adce05a44a11776092f029b0645">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af7595c1b79ad6fd9c6330085e0b07cf9">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1aa19b46fc4451b021905e0e4f0d173b58">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link> &gt;::__value, std::forward_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1acbd0220fdddeff06c0a1c8581a81c856">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1acbd0220fdddeff06c0a1c8581a81c856">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a49475214180c9591e286ba45636d2447">operator*</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a49475214180c9591e286ba45636d2447">operator*</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aaf4e403a90c0f4c19fa0d3386e541638">operator-&gt;</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aaf4e403a90c0f4c19fa0d3386e541638">operator-&gt;</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a604aa250fdd3301544a77e49bd3021f0">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1afcab5e513c8f51d1603094b906f2a5b7">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a604aa250fdd3301544a77e49bd3021f0">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1afcab5e513c8f51d1603094b906f2a5b7">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8ab2bd3cab984cb85cd02f1d61ce9931">base</link> () _GLIBCXX_NOEXCEPT</para>

<para>Return the underlying iterator. </para>
</listitem>
            <listitem><para>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a512e3878e5fb2411995fcd86fe64a11b">base</link> () const _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8ab2bd3cab984cb85cd02f1d61ce9931">base</link> () _GLIBCXX_NOEXCEPT</para>

<para>Return the underlying iterator. </para>
</listitem>
            <listitem><para>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a512e3878e5fb2411995fcd86fe64a11b">base</link> () const _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a2f840fc0c5344d911e8fdbc73e9ca79e">operator _Iterator</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a2f840fc0c5344d911e8fdbc73e9ca79e">operator _Iterator</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ad58fb2d0ddcf50022427bdee797690e9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ad58fb2d0ddcf50022427bdee797690e9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3b20ef089474f666775bd1f1a865c392">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3b20ef089474f666775bd1f1a865c392">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1653d02083343be4ddbd662070eec301">_M_dereferenceable</link> () const</para>

<para>Is the iterator dereferenceable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1653d02083343be4ddbd662070eec301">_M_dereferenceable</link> () const</para>

<para>Is the iterator dereferenceable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5fa0f26e5d046377ffccb409f2944833">_M_before_dereferenceable</link> () const</para>

<para>Is the iterator before a dereferenceable one? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5fa0f26e5d046377ffccb409f2944833">_M_before_dereferenceable</link> () const</para>

<para>Is the iterator before a dereferenceable one? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a046fd9f196da5476ba014a3ed33316f6">_M_incrementable</link> () const</para>

<para>Is the iterator incrementable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a046fd9f196da5476ba014a3ed33316f6">_M_incrementable</link> () const</para>

<para>Is the iterator incrementable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a4c52f7fc0caab7e9923ae59d5353c05d">_M_can_advance</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link> __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a61b0d14c3b13f7a1989796596ef0e8c5">_M_can_advance</link> (const std::pair&lt; _Diff, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, int __way) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a4c52f7fc0caab7e9923ae59d5353c05d">_M_can_advance</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link> __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a61b0d14c3b13f7a1989796596ef0e8c5">_M_can_advance</link> (const std::pair&lt; _Diff, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, int __way) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5499070e50573f63e76f4333fa156166">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __check_dereferenceable=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5499070e50573f63e76f4333fa156166">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __check_dereferenceable=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) const</para>
</listitem>
            <listitem><para>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a11704a65f7bb3df9b8cf2e63745d8d66">_M_get_sequence</link> () const</para>
</listitem>
            <listitem><para>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a11704a65f7bb3df9b8cf2e63745d8d66">_M_get_sequence</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a130167f02144c108f212d17375b21e88">_M_get_distance_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs) const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a130167f02144c108f212d17375b21e88">_M_get_distance_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs) const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f313f1664dac97493435fb4ebbdde49">_M_get_distance_from_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f313f1664dac97493435fb4ebbdde49">_M_get_distance_from_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a7e1d9cbcbb61e6410dc8054e1a52b3c4">_M_get_distance_to_end</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a7e1d9cbcbb61e6410dc8054e1a52b3c4">_M_get_distance_to_end</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8b74400462adbb5068c2df54871d10cb">_M_is_begin</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s begin() iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8b74400462adbb5068c2df54871d10cb">_M_is_begin</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s begin() iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ac5c54eb2babadef8f12760583730dd85">_M_is_end</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link> iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ac5c54eb2babadef8f12760583730dd85">_M_is_end</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link> iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2340dafeccff234ffc0138e2aa23230">_M_is_before_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2340dafeccff234ffc0138e2aa23230">_M_is_before_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8150f9d08a7b921758b2e1b59263c733">_M_is_beginnest</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8150f9d08a7b921758b2e1b59263c733">_M_is_beginnest</link> () const</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_Safe_base::_OtherIterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link></para>
</listitem>
            <listitem><para>typedef _Safe_base::_Attach_single <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_Safe_base::_OtherIterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link></para>
</listitem>
            <listitem><para>typedef _Safe_base::_Attach_single <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link></para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Types inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para>typedef std::__are_same&lt; typename _Sequence::_Base::const_iterator, _Iterator &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2141f1bd85bd010b1b132172ff49f49">_IsConstant</link></para>
</listitem>
            <listitem><para>typedef std::__are_same&lt; typename _Sequence::_Base::const_iterator, _Iterator &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2141f1bd85bd010b1b132172ff49f49">_IsConstant</link></para>
</listitem>
            <listitem><para>typedef __gnu_cxx::__conditional_type&lt; _IsConstant::__value, typename_Sequence::_Base::iterator, typename_Sequence::_Base::const_iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link></para>
</listitem>
            <listitem><para>typedef __gnu_cxx::__conditional_type&lt; _IsConstant::__value, typename_Sequence::_Base::iterator, typename_Sequence::_Base::const_iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link></para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1ad10eaf532f15db6889dd038f1c74dde7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link>) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1ad10eaf532f15db6889dd038f1c74dde7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link>) _GLIBCXX_NOEXCEPT</para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a71ecf6d5f10f591b08be04bfdf5684f7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, _Attach_single) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a71ecf6d5f10f591b08be04bfdf5684f7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, _Attach_single) _GLIBCXX_NOEXCEPT</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Types inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__iterator_1a0bb334e63c3292865e9ff2f608eee3a8">iterator_type</link></para>
</listitem>
            <listitem><para>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__iterator_1a0bb334e63c3292865e9ff2f608eee3a8">iterator_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link></para>
</listitem>
            <listitem><para>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link></para>
</listitem>
            <listitem><para>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3ca0810e8158c07034be3fe7326d7a12">value_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3ca0810e8158c07034be3fe7326d7a12">value_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link></para>
</listitem>
            <listitem><para>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link></para>
</listitem>
            <listitem><para>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link></para>
</listitem>
            <listitem><para>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link> &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f230bfabecb6d267f489c4019ef6676">_Self</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link> &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f230bfabecb6d267f489c4019ef6676">_Self</link></para>
</listitem>
        </itemizedlist>
</simplesect>
Static Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para>static _GLIBCXX_CONSTEXPR <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aebecd16df3b101fbb55d205714f5f74c">_S_constant</link> ()</para>

<para>Determine if this is a constant iterator. </para>
</listitem>
            <listitem><para>static _GLIBCXX_CONSTEXPR <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aebecd16df3b101fbb55d205714f5f74c">_S_constant</link> ()</para>

<para>Determine if this is a constant iterator. </para>
</listitem>
        </itemizedlist>
Public Attributes inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad07568d7660eb8b85493b548d10c637a">_M_version</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7f653b7476705d7d0445edac938ac78f">_M_prior</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7c9c250dea264463f74591429f8ba123">_M_next</link></para>
</listitem>
        </itemizedlist>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22"/><section>
    <title>_Attach_single<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_Attach_single</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Attach_single</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Safe_base::_Attach_single <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Attach_single<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22"/><section>
    <title>_Attach_single<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_Attach_single</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Attach_single</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Safe_base::_Attach_single <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Attach_single<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211"/><section>
    <title>_OtherIterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_OtherIterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_OtherIterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_Safe_base::_OtherIterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_OtherIterator<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211"/><section>
    <title>_OtherIterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_OtherIterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_OtherIterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_Safe_base::_OtherIterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_OtherIterator<computeroutput>[protected]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1ad10eaf532f15db6889dd038f1c74dde7"/><section>
    <title>_Safe_iterator()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link> )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a3a3a5cc69b2e1e4c50e33daaa8689604"/><section>
    <title>_Safe_iterator()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><formalpara><title>Postcondition</title>

<para>the iterator is singular and unattached </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a037d25edc49ed6168a1092d6b3157bdf"/><section>
    <title>_Safe_iterator()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</para>

<para><formalpara><title>Precondition</title>

<para><computeroutput>seq</computeroutput> is not NULL </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>this is not singular </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a47d3374fdff94b8780c3b708fbc59b31"/><section>
    <title>_Safe_iterator()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy construction. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a0d635b5b496022278e946dd102e1c334"/><section>
    <title>_Safe_iterator()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _MutableIterator &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link> &gt;::__value, std::bidirectional_iterator_tag &gt;::__type &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1ad10eaf532f15db6889dd038f1c74dde7"/><section>
    <title>_Safe_iterator()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link> )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a3a3a5cc69b2e1e4c50e33daaa8689604"/><section>
    <title>_Safe_iterator()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><formalpara><title>Postcondition</title>

<para>the iterator is singular and unattached </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a037d25edc49ed6168a1092d6b3157bdf"/><section>
    <title>_Safe_iterator()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</para>

<para><formalpara><title>Precondition</title>

<para><computeroutput>seq</computeroutput> is not NULL </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>this is not singular </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a47d3374fdff94b8780c3b708fbc59b31"/><section>
    <title>_Safe_iterator()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy construction. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a0d635b5b496022278e946dd102e1c334"/><section>
    <title>_Safe_iterator()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _MutableIterator &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link> &gt;::__value, std::bidirectional_iterator_tag &gt;::__type &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aee45ca57597d27fb0ebcaa342709efe5"/><section>
    <title>_M_decrementable()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_decrementable</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_M_decrementable</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_M_decrementable ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_aee45ca57597d27fb0ebcaa342709efe5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aee45ca57597d27fb0ebcaa342709efe5"/><section>
    <title>_M_decrementable()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_decrementable</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>_M_decrementable</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::_M_decrementable ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_aee45ca57597d27fb0ebcaa342709efe5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a251ba70c245471b93e1c440f093a9cd5"/><section>
    <title>operator++()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator preincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a251ba70c245471b93e1c440f093a9cd5"/><section>
    <title>operator++()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator preincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa380eff611c872f236277e43e4eedf7b"/><section>
    <title>operator++()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_aa380eff611c872f236277e43e4eedf7b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa380eff611c872f236277e43e4eedf7b"/><section>
    <title>operator++()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_aa380eff611c872f236277e43e4eedf7b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa071d99ce70ab4fa90ac8992489d2b88"/><section>
    <title>operator--()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator predecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_aa071d99ce70ab4fa90ac8992489d2b88_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa071d99ce70ab4fa90ac8992489d2b88"/><section>
    <title>operator--()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator predecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_aa071d99ce70ab4fa90ac8992489d2b88_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a116df69aba5b5e6182942243df25b698"/><section>
    <title>operator--()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator-- (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postdecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_a116df69aba5b5e6182942243df25b698_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a116df69aba5b5e6182942243df25b698"/><section>
    <title>operator--()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator-- (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postdecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_a116df69aba5b5e6182942243df25b698_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a5c975e7983a98b3e0ce2573b79b08af7"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy assignment. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a5c975e7983a98b3e0ce2573b79b08af7"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy assignment. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__iterator_8h">safe_iterator.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__iterator_8h">safe_iterator.h</link></section>
</section>
