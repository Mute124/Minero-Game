<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_parse__error_8h_source" xml:lang="en-US">
<title>parse_error.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/parse_error.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER</emphasis>
9 
10 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__except_8h">std_except.h</link>&quot;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_source__region_8h">source_region.h</link>&quot;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_print__to__stream_8h">print_to_stream.h</link>&quot;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
14 
15 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;!TOML_EXCEPTIONS</emphasis>
16 <emphasis role="preprocessor">#define&#32;TOML_PARSE_ERROR_BASE</emphasis>
17 <emphasis role="preprocessor">#else</emphasis>
18 <emphasis role="preprocessor">#define&#32;TOML_PARSE_ERROR_BASE&#32;&#32;&#32;&#32;:&#32;public&#32;std::runtime_error</emphasis>
19 <emphasis role="preprocessor">#endif</emphasis>
20 
21 <link linkend="_parse__error_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
22 {
23 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex);
24 
29 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>parse_error&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e">TOML_PARSE_ERROR_BASE</link>
30 &#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
32 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;description_;
34 <emphasis role="preprocessor">#endif</emphasis>
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__region">source_region</link>&#32;source_;
36 
37 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
38 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
39 
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::runtime_error{&#32;desc&#32;},
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
46 
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}&#32;}
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
52 
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;<link linkend="_classpath">path</link>&#32;=&#32;{})&#32;<emphasis role="keyword">noexcept</emphasis>
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_classpath">path</link>&#32;}&#32;}
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
58 
59 <emphasis role="preprocessor">#else</emphasis>
60 
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a00e25a3aafdabaecf43c1b963c932933">parse_error</link>(std::string&amp;&amp;&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;description_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(desc)&#32;},
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
66 
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a2e2596415c0b4416ea318f066b31c780">parse_error</link>(std::string&amp;&amp;&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(desc),&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}&#32;}
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a8cad309102946c5e9570f052fa4a2da8">parse_error</link>(std::string&amp;&amp;&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;<link linkend="_classpath">path</link>&#32;=&#32;{})&#32;<emphasis role="keyword">noexcept</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;<link linkend="_namespacestd">std</link>::move(desc),&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_classpath">path</link>&#32;}&#32;}
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
76 
77 <emphasis role="preprocessor">#endif</emphasis>
78 
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a8cd74000216c01fdb432ec811cb51d2a">description</link>()&#32;const&#32;noexcept
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
84 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string_view{&#32;what()&#32;};
86 <emphasis role="preprocessor">#else</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;description_;
88 <emphasis role="preprocessor">#endif</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
90 
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a7bc4debd390ea05d61cf6a11707edfd2">source</link>()&#32;const&#32;noexcept
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;source_;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
97 
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a3708b936f4344b8ca8a0e6a0de70f687">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;parse_error&amp;&#32;rhs)
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs.description());
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;<emphasis role="stringliteral">&quot;\n\t(error&#32;occurred&#32;at&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs.source());
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
130 &#32;&#32;&#32;&#32;};
131 
132 &#32;&#32;&#32;&#32;<link linkend="_parse__error_8h_1aa188664cce4904ae8832f7fa59f10211">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
133 }
134 <link linkend="_parse__error_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
135 
136 <emphasis role="preprocessor">#undef&#32;TOML_PARSE_ERROR_BASE</emphasis>
137 
138 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
139 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_PARSER</emphasis>
</programlisting></section>
