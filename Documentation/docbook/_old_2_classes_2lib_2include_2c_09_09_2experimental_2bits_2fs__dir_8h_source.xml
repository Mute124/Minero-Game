<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2fs__dir_8h_source" xml:lang="en-US">
<title>fs_dir.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/fs_dir.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Filesystem&#32;directory&#32;utilities&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_FS_DIR_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_FS_DIR_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
35 <emphasis role="preprocessor">#else</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;typeinfo&gt;</emphasis>
37 <emphasis role="preprocessor">#&#32;include&#32;&lt;ext/concurrence.h&gt;</emphasis>
38 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/unique_ptr.h&gt;</emphasis>
39 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/shared_ptr.h&gt;</emphasis>
40 
41 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
42 {
43 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
45 <emphasis role="keyword">namespace&#32;</emphasis>experimental
46 {
47 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
48 {
49 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>
50 {
56 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>file_status
57 &#32;&#32;{
58 &#32;&#32;<emphasis role="keyword">public</emphasis>:
59 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors</emphasis>
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
61 &#32;&#32;&#32;&#32;file_status(file_type&#32;__ft&#32;=&#32;file_type::none,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perms&#32;__prms&#32;=&#32;perms::unknown)&#32;noexcept
63 &#32;&#32;&#32;&#32;:&#32;_M_type(__ft),&#32;_M_perms(__prms)&#32;{&#32;}
64 
65 &#32;&#32;&#32;&#32;file_status(<emphasis role="keyword">const</emphasis>&#32;file_status&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
66 &#32;&#32;&#32;&#32;file_status(file_status&amp;&amp;)&#32;noexcept&#32;=&#32;default;
67 &#32;&#32;&#32;&#32;~file_status()&#32;=&#32;default;
68 
69 &#32;&#32;&#32;&#32;file_status&amp;&#32;operator=(const&#32;file_status&amp;)&#32;noexcept&#32;=&#32;default;
70 &#32;&#32;&#32;&#32;file_status&amp;&#32;operator=(file_status&amp;&amp;)&#32;noexcept&#32;=&#32;default;
71 
72 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
73 &#32;&#32;&#32;&#32;file_type&#32;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type;&#32;}
74 &#32;&#32;&#32;&#32;perms&#32;&#32;&#32;&#32;&#32;&#32;permissions()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_perms;&#32;}
75 
76 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
77 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>(file_type&#32;__ft)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;_M_type&#32;=&#32;__ft;&#32;}
78 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;permissions(perms&#32;__prms)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;_M_perms&#32;=&#32;__prms;&#32;}
79 
80 &#32;&#32;<emphasis role="keyword">private</emphasis>:
81 &#32;&#32;&#32;&#32;file_type&#32;&#32;&#32;_M_type;
82 &#32;&#32;&#32;&#32;perms&#32;&#32;&#32;_M_perms;
83 &#32;&#32;};
84 
85 _GLIBCXX_BEGIN_NAMESPACE_CXX11
86 
87 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_entry
88 &#32;&#32;{
89 &#32;&#32;<emphasis role="keyword">public</emphasis>:
90 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;and&#32;destructor</emphasis>
91 &#32;&#32;&#32;&#32;directory_entry()&#32;noexcept&#32;=&#32;default;
92 &#32;&#32;&#32;&#32;directory_entry(const&#32;directory_entry&amp;)&#32;=&#32;default;
93 &#32;&#32;&#32;&#32;directory_entry(directory_entry&amp;&amp;)&#32;noexcept&#32;=&#32;default;
94 &#32;&#32;&#32;&#32;explicit&#32;directory_entry(const&#32;filesystem::<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;:&#32;_M_path(__p)&#32;{&#32;}
95 &#32;&#32;&#32;&#32;~directory_entry()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
96 
97 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
98 &#32;&#32;&#32;&#32;directory_entry&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
99 &#32;&#32;&#32;&#32;directory_entry&amp;&#32;operator=(directory_entry&amp;&amp;)&#32;noexcept&#32;=&#32;default;
100 
101 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;assign(const&#32;filesystem::<link linkend="_classpath">path</link>&amp;&#32;__p)&#32;{&#32;_M_path&#32;=&#32;__p;&#32;}
102 
103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
104 &#32;&#32;&#32;&#32;replace_filename(<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;__p)
105 &#32;&#32;&#32;&#32;{&#32;_M_path&#32;=&#32;_M_path.parent_path()&#32;/&#32;__p;&#32;}
106 
107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;&#32;&#32;<link linkend="_classpath">path</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path;&#32;}
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;filesystem::path&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path;&#32;}
110 
111 &#32;&#32;&#32;&#32;file_status
112 &#32;&#32;&#32;&#32;status()<emphasis role="keyword">&#32;const</emphasis>
113 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::status(_M_path);&#32;}
114 
115 &#32;&#32;&#32;&#32;file_status
116 &#32;&#32;&#32;&#32;status(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
117 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::status(_M_path,&#32;__ec);&#32;}
118 
119 &#32;&#32;&#32;&#32;file_status
120 &#32;&#32;&#32;&#32;symlink_status()<emphasis role="keyword">&#32;const</emphasis>
121 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::symlink_status(_M_path);&#32;}
122 
123 &#32;&#32;&#32;&#32;file_status
124 &#32;&#32;&#32;&#32;symlink_status(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
125 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;filesystem::symlink_status(_M_path,&#32;__ec);&#32;}
126 
127 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
128 &#32;&#32;&#32;&#32;operator&lt;&#32;(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
129 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&lt;&#32;__rhs._M_path;&#32;}
130 
131 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
132 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
133 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;==&#32;__rhs._M_path;&#32;}
134 
135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
136 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
137 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;!=&#32;__rhs._M_path;&#32;}
138 
139 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
140 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
141 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&lt;=&#32;__rhs._M_path;&#32;}
142 
143 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
144 &#32;&#32;&#32;&#32;operator&gt;&#32;(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
145 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&gt;&#32;__rhs._M_path;&#32;}
146 
147 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
148 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
149 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_path&#32;&gt;=&#32;__rhs._M_path;&#32;}
150 
151 &#32;&#32;<emphasis role="keyword">private</emphasis>:
152 &#32;&#32;&#32;&#32;filesystem::path&#32;&#32;&#32;&#32;_M_path;
153 &#32;&#32;};
154 
155 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Dir;
156 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator;
157 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
158 
159 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__directory_iterator_proxy
160 &#32;&#32;{
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&amp;&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_entry;&#32;}
162 
163 &#32;&#32;&#32;&#32;directory_entry&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_entry);&#32;}
164 
165 &#32;&#32;<emphasis role="keyword">private</emphasis>:
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator;
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
168 
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
170 &#32;&#32;&#32;&#32;__directory_iterator_proxy(<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;__e)&#32;:&#32;_M_entry(__e)&#32;{&#32;}
171 
172 &#32;&#32;&#32;&#32;directory_entry&#32;_M_entry;
173 &#32;&#32;};
174 
175 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>directory_iterator
176 &#32;&#32;{
177 &#32;&#32;<emphasis role="keyword">public</emphasis>:
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;directory_entry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
179 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;reference;
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;input_iterator_tag&#32;&#32;&#32;&#32;&#32;iterator_category;
183 
184 &#32;&#32;&#32;&#32;directory_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
185 
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
187 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
188 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;directory_options::none,&#32;nullptr)&#32;{&#32;}
189 
190 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;directory_options&#32;__options)
191 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;__options,&#32;nullptr)&#32;{&#32;}
192 
193 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;noexcept
194 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;directory_options::none,&#32;__ec)&#32;{&#32;}
195 
196 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;directory_options&#32;__options,
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;noexcept
199 &#32;&#32;&#32;&#32;:&#32;directory_iterator(__p,&#32;__options,&#32;&amp;__ec)&#32;{&#32;}
200 
201 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
202 
203 &#32;&#32;&#32;&#32;directory_iterator(directory_iterator&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
204 
205 &#32;&#32;&#32;&#32;~directory_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
206 
207 &#32;&#32;&#32;&#32;directory_iterator&amp;
208 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
209 
210 &#32;&#32;&#32;&#32;directory_iterator&amp;
211 &#32;&#32;&#32;&#32;operator=(directory_iterator&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
212 
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;<emphasis role="keyword">const</emphasis>;
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry*&#32;operator-&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;**<emphasis role="keyword">this</emphasis>;&#32;}
215 &#32;&#32;&#32;&#32;directory_iterator&amp;&#32;&#32;&#32;&#32;operator++();
216 &#32;&#32;&#32;&#32;directory_iterator&amp;&#32;&#32;&#32;&#32;increment(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
217 
218 &#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
219 &#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;__pr{**<emphasis role="keyword">this</emphasis>};
221 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pr;
223 &#32;&#32;&#32;&#32;}
224 
225 &#32;&#32;<emphasis role="keyword">private</emphasis>:
226 &#32;&#32;&#32;&#32;directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;directory_options,&#32;error_code*);
227 
228 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
229 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__lhs,
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs);
231 
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator;
233 
234 &#32;&#32;&#32;&#32;std::shared_ptr&lt;_Dir&gt;&#32;_M_dir;
235 &#32;&#32;};
236 
237 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_iterator
238 &#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(directory_iterator&#32;__iter)&#32;<emphasis role="keyword">noexcept</emphasis>
239 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__iter;&#32;}
240 
241 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;directory_iterator
242 &#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(directory_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>
243 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;directory_iterator();&#32;}
244 
245 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
246 &#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)
247 &#32;&#32;{
248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__rhs._M_dir.owner_before(__lhs._M_dir)
249 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__lhs._M_dir.owner_before(__rhs._M_dir);
250 &#32;&#32;}
251 
252 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
253 &#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;directory_iterator&amp;&#32;__rhs)
254 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
255 
256 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_directory_iterator
257 &#32;&#32;{
258 &#32;&#32;<emphasis role="keyword">public</emphasis>:
259 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;directory_entry&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
261 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;reference;
263 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;input_iterator_tag&#32;&#32;&#32;&#32;&#32;iterator_category;
264 
265 &#32;&#32;&#32;&#32;recursive_directory_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
266 
267 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
268 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
269 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;directory_options::none,&#32;nullptr)&#32;{&#32;}
270 
271 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;directory_options&#32;__options)
272 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;__options,&#32;nullptr)&#32;{&#32;}
273 
274 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;directory_options&#32;__options,
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;noexcept
277 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;__options,&#32;&amp;__ec)&#32;{&#32;}
278 
279 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;noexcept
280 &#32;&#32;&#32;&#32;:&#32;recursive_directory_iterator(__p,&#32;directory_options::none,&#32;&amp;__ec)&#32;{&#32;}
281 
282 &#32;&#32;&#32;&#32;recursive_directory_iterator(
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
284 
285 &#32;&#32;&#32;&#32;recursive_directory_iterator(recursive_directory_iterator&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
286 
287 &#32;&#32;&#32;&#32;~recursive_directory_iterator();
288 
289 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers</emphasis>
290 &#32;&#32;&#32;&#32;directory_options&#32;&#32;options()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_options;&#32;}
291 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>()&#32;<emphasis role="keyword">const</emphasis>;
292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursion_pending()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pending;&#32;}
293 
294 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;<emphasis role="keyword">const</emphasis>;
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;directory_entry*&#32;operator-&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;**<emphasis role="keyword">this</emphasis>;&#32;}
296 
297 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers</emphasis>
298 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;
299 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
300 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;
301 &#32;&#32;&#32;&#32;operator=(recursive_directory_iterator&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
302 
303 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;&#32;operator++();
304 &#32;&#32;&#32;&#32;recursive_directory_iterator&amp;&#32;increment(error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
305 
306 &#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
307 &#32;&#32;&#32;&#32;{
308 &#32;&#32;&#32;&#32;&#32;&#32;__directory_iterator_proxy&#32;__pr{**<emphasis role="keyword">this</emphasis>};
309 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pr;
311 &#32;&#32;&#32;&#32;}
312 
313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop</link>();
314 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop</link>(error_code&amp;);
315 
316 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;disable_recursion_pending()&#32;{&#32;_M_pending&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;}
317 
318 &#32;&#32;<emphasis role="keyword">private</emphasis>:
319 &#32;&#32;&#32;&#32;recursive_directory_iterator(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;directory_options,&#32;error_code*);
320 
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
322 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__lhs,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__rhs);
324 
325 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Dir_stack;
326 &#32;&#32;&#32;&#32;std::shared_ptr&lt;_Dir_stack&gt;&#32;_M_dirs;
327 &#32;&#32;&#32;&#32;directory_options&#32;_M_options&#32;=&#32;{};
328 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_pending&#32;=&#32;<emphasis role="keyword">false</emphasis>;
329 &#32;&#32;};
330 
331 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;recursive_directory_iterator
332 &#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(recursive_directory_iterator&#32;__iter)&#32;<emphasis role="keyword">noexcept</emphasis>
333 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__iter;&#32;}
334 
335 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;recursive_directory_iterator
336 &#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(recursive_directory_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>
337 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;recursive_directory_iterator();&#32;}
338 
339 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
340 &#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__lhs,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__rhs)
342 &#32;&#32;{
343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__rhs._M_dirs.owner_before(__lhs._M_dirs)
344 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__lhs._M_dirs.owner_before(__rhs._M_dirs);
345 &#32;&#32;}
346 
347 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
348 &#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__lhs,
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;recursive_directory_iterator&amp;&#32;__rhs)
350 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
351 
352 _GLIBCXX_END_NAMESPACE_CXX11
353 
355 }&#32;<emphasis role="comment">//&#32;namespace&#32;v1</emphasis>
356 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
357 }&#32;<emphasis role="comment">//&#32;namespace&#32;experimental</emphasis>
358 
359 _GLIBCXX_END_NAMESPACE_VERSION
360 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
361 
362 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
363 
364 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_FS_DIR_H</emphasis>
</programlisting></section>
