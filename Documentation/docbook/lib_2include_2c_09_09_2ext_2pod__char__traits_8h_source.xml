<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pod__char__traits_8h_source" xml:lang="en-US">
<title>pod_char_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pod_char_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;POD&#32;character,&#32;std::char_traits&#32;specialization&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2002-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="comment">//&#32;Gabriel&#32;Dos&#32;Reis&#32;&lt;gdr@integrable-solutions.net&gt;</emphasis>
30 <emphasis role="comment">//&#32;Benjamin&#32;Kosnik&#32;&lt;bkoz@redhat.com&gt;</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_POD_CHAR_TRAITS_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_POD_CHAR_TRAITS_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 
43 &#32;&#32;<emphasis role="comment">//&#32;POD&#32;character&#32;abstraction.</emphasis>
44 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;The&#32;char_type&#32;parameter&#32;is&#32;a&#32;subset&#32;of&#32;int_type,&#32;as&#32;to&#32;allow</emphasis>
45 &#32;&#32;<emphasis role="comment">//&#32;int_type&#32;to&#32;properly&#32;hold&#32;the&#32;full&#32;range&#32;of&#32;char_type&#32;values&#32;as</emphasis>
46 &#32;&#32;<emphasis role="comment">//&#32;well&#32;as&#32;EOF.</emphasis>
48 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Int,&#32;<emphasis role="keyword">typename</emphasis>&#32;_St&#32;=&#32;std::mbstate_t&gt;
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>character
50 &#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Value&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Int&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
53 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_St&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;character&lt;_Value,&#32;_Int,&#32;_St&gt;&#32;&#32;char_type;
55 
56 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>;
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;V2&gt;
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;char_type
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;from(<emphasis role="keyword">const</emphasis>&#32;V2&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
62 &#32;&#32;&#32;&#32;&#32;&#32;char_type&#32;ret&#32;=&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&#32;};
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
64 &#32;&#32;&#32;&#32;}
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;V2&gt;
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;V2
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;c)
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;V2&#32;ret&#32;=&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>V2<emphasis role="keyword">&gt;</emphasis>(c.value)&#32;};
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
72 &#32;&#32;&#32;&#32;}
73 
74 &#32;&#32;&#32;&#32;};
75 
76 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Int,&#32;<emphasis role="keyword">typename</emphasis>&#32;_St&gt;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
78 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;character&lt;_Value,&#32;_Int,&#32;_St&gt;&amp;&#32;lhs,
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;character&lt;_Value,&#32;_Int,&#32;_St&gt;&amp;&#32;rhs)
80 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.value&#32;==&#32;rhs.value;&#32;}
81 
82 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Int,&#32;<emphasis role="keyword">typename</emphasis>&#32;_St&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
84 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;character&lt;_Value,&#32;_Int,&#32;_St&gt;&amp;&#32;lhs,
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;character&lt;_Value,&#32;_Int,&#32;_St&gt;&amp;&#32;rhs)
86 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.value&#32;&lt;&#32;rhs.value;&#32;}
87 
88 _GLIBCXX_END_NAMESPACE_VERSION
89 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
90 
91 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
92 {
93 _GLIBCXX_BEGIN_NAMESPACE_VERSION
94 
96 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Int,&#32;<emphasis role="keyword">typename</emphasis>&#32;_St&gt;
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits&lt;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::character&lt;_Value,&#32;_Int,&#32;_St&gt;&#32;&gt;
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::character&lt;_Value,&#32;_Int,&#32;_St&gt;&#32;&#32;&#32;char_type;
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;char_type::int_type&#32;&#32;&#32;&#32;&#32;&#32;int_type;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;char_type::state_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;fpos&lt;state_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;streamoff&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
104 
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)
107 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__c1&#32;=&#32;__c2;&#32;}
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;eq(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)
111 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;lt(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c2)
115 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;&lt;&#32;__c2;&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
119 &#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!eq(__s1[__i],&#32;__s2[__i]))
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lt(__s1[__i],&#32;__s2[__i])&#32;?&#32;-1&#32;:&#32;1;
123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
124 &#32;&#32;&#32;&#32;&#32;&#32;}
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s)
128 &#32;&#32;&#32;&#32;&#32;&#32;{
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__p&#32;=&#32;__s;
130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__p-&gt;value)
131 &#32;&#32;&#32;&#32;&#32;&#32;++__p;
132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p&#32;-&#32;__s);
133 &#32;&#32;&#32;&#32;&#32;&#32;}
134 
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*
136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__a)
137 &#32;&#32;&#32;&#32;&#32;&#32;{
138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__p&#32;=&#32;__s;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(__p&#32;-&#32;__s)&#32;&lt;&#32;__n;&#32;++__p)
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__p&#32;==&#32;__a)
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
142 &#32;&#32;&#32;&#32;&#32;&#32;}
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;char_type*
145 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
146 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>char_type*<emphasis role="keyword">&gt;</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;(__builtin_memmove(__s1,&#32;__s2,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(char_type)));
151 &#32;&#32;&#32;&#32;&#32;&#32;}
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;char_type*
154 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(char_type*&#32;__s1,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
155 &#32;&#32;&#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
158 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__s2,&#32;__s2&#32;+&#32;__n,&#32;__s1);
159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s1;
160 &#32;&#32;&#32;&#32;&#32;&#32;}
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;char_type*
163 &#32;&#32;&#32;&#32;&#32;&#32;assign(char_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;char_type&#32;__a)
164 &#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">std::fill_n</link>(__s,&#32;__n,&#32;__a);
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s;
167 &#32;&#32;&#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;char_type
170 &#32;&#32;&#32;&#32;&#32;&#32;to_char_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__i)
171 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;char_type::template&#32;from(__i);&#32;}
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;int_type
174 &#32;&#32;&#32;&#32;&#32;&#32;to_int_type(<emphasis role="keyword">const</emphasis>&#32;char_type&amp;&#32;__c)
175 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;char_type::template&#32;to&lt;int_type&gt;(__c);&#32;}
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;eq_int_type(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c1,&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c2)
179 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c1&#32;==&#32;__c2;&#32;}
180 
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;int_type
182 &#32;&#32;&#32;&#32;&#32;&#32;eof()&#32;
183 &#32;&#32;&#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;int_type&#32;__r&#32;=&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;__gnu_cxx::__conditional_type
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;std::__is_integer&lt;int_type&gt;::__value,
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type,&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>::__type&gt;(-1)&#32;};
187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
188 &#32;&#32;&#32;&#32;&#32;&#32;}
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;int_type
191 &#32;&#32;&#32;&#32;&#32;&#32;not_eof(<emphasis role="keyword">const</emphasis>&#32;int_type&amp;&#32;__c)
192 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;eq_int_type(__c,&#32;eof())&#32;?&#32;int_type()&#32;:&#32;__c;&#32;}
193 &#32;&#32;&#32;&#32;};
194 
195 _GLIBCXX_END_NAMESPACE_VERSION
196 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
197 
198 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
