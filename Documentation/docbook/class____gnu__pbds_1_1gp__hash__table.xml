<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__pbds_1_1gp__hash__table" xml:lang="en-US">
<title>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; Class Template Reference</title>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;assoc_container.hpp&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1gp__hash__table__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1gp__hash__table__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1gp__hash__tag">gp_hash_tag</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a7415e10342e8b63d55700e6d48221899">container_category</link></para>
</listitem>
            <listitem><para>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link></para>
</listitem>
            <listitem><para>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link></para>
</listitem>
            <listitem><para>typedef Comb_Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link></para>
</listitem>
            <listitem><para>typedef Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link></para>
</listitem>
            <listitem><para>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1gp__hash__tag">gp_hash_tag</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a7415e10342e8b63d55700e6d48221899">container_category</link></para>
</listitem>
            <listitem><para>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link></para>
</listitem>
            <listitem><para>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link></para>
</listitem>
            <listitem><para>typedef Comb_Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link></para>
</listitem>
            <listitem><para>typedef Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link></para>
</listitem>
            <listitem><para>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct____gnu__pbds_1_1gp__hash__tag">gp_hash_tag</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a7415e10342e8b63d55700e6d48221899">container_category</link></para>
</listitem>
            <listitem><para>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link></para>
</listitem>
            <listitem><para>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link></para>
</listitem>
            <listitem><para>typedef Comb_Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link></para>
</listitem>
            <listitem><para>typedef Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link></para>
</listitem>
            <listitem><para>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a090fe23fa9a464334f41bac7c58839d7">gp_hash_table</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1aa868348b5d0403163cc3fcff72488ecf">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a46ef48ae07c1e2407f5676a519fda8d2">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1afc4daba066d47ce7f3687adadb8d49e7">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a02d894524f232f722315e57158ea6c62">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a57a476e9e07131b80495dd9bfe56f3f0">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a3b2755912ddc11a6aa6387825f1b4dd2">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a79315b5c79f3c457c2ed81a6e369ef79">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1ad8b1efc6af0b813705792313fd566b04">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a1e09abc416f9e136eba0221560b61002">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a1483741a8699383e857cefa0834767db">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a046c24793ff31b211894e668ae0146a5">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a88c1ec535d8fea3c84ac0adfdfd87b43">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a20fa8b32ebbe4f478a47fc8087802cf2">~gp_hash_table</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1gp__hash__table_1ab60a98e829799556cebbd1a0e15ac1bd">operator=</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a8f4f0c541807c4cddd24b0985b12dfb4">swap</link> (<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a090fe23fa9a464334f41bac7c58839d7">gp_hash_table</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1aa868348b5d0403163cc3fcff72488ecf">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a46ef48ae07c1e2407f5676a519fda8d2">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1afc4daba066d47ce7f3687adadb8d49e7">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a02d894524f232f722315e57158ea6c62">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a57a476e9e07131b80495dd9bfe56f3f0">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a3b2755912ddc11a6aa6387825f1b4dd2">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a79315b5c79f3c457c2ed81a6e369ef79">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1ad8b1efc6af0b813705792313fd566b04">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a1e09abc416f9e136eba0221560b61002">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a1483741a8699383e857cefa0834767db">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a046c24793ff31b211894e668ae0146a5">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a88c1ec535d8fea3c84ac0adfdfd87b43">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a20fa8b32ebbe4f478a47fc8087802cf2">~gp_hash_table</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1gp__hash__table_1ab60a98e829799556cebbd1a0e15ac1bd">operator=</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a8f4f0c541807c4cddd24b0985b12dfb4">swap</link> (<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a090fe23fa9a464334f41bac7c58839d7">gp_hash_table</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1aa868348b5d0403163cc3fcff72488ecf">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a46ef48ae07c1e2407f5676a519fda8d2">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1afc4daba066d47ce7f3687adadb8d49e7">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a02d894524f232f722315e57158ea6c62">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a57a476e9e07131b80495dd9bfe56f3f0">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a3b2755912ddc11a6aa6387825f1b4dd2">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a79315b5c79f3c457c2ed81a6e369ef79">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1ad8b1efc6af0b813705792313fd566b04">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a1e09abc416f9e136eba0221560b61002">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a1483741a8699383e857cefa0834767db">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a046c24793ff31b211894e668ae0146a5">gp_hash_table</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp;h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp;e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp;cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp;p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp;rp)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table_1a88c1ec535d8fea3c84ac0adfdfd87b43">gp_hash_table</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a20fa8b32ebbe4f478a47fc8087802cf2">~gp_hash_table</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1gp__hash__table_1ab60a98e829799556cebbd1a0e15ac1bd">operator=</link> (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a8f4f0c541807c4cddd24b0985b12dfb4">swap</link> (<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp;other)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Key, typename Mapped, typename Hash_Fn = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn = detail::default_comb_hash_fn::type, typename Probe_Fn = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc = std::allocator&lt;char&gt;&gt;<?linebreak?>class __gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</title></simplesect>

<para>A general-probing hash-based associative container.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Key</entry><entry>
<para>Key type. </para>
</entry>
                            </row>
                            <row>
<entry>Mapped</entry><entry>
<para>Map type. </para>
</entry>
                            </row>
                            <row>
<entry>Hash_Fn</entry><entry>
<para>Hashing functor. </para>
</entry>
                            </row>
                            <row>
<entry>Eq_Fn</entry><entry>
<para>Equal functor. </para>
</entry>
                            </row>
                            <row>
<entry>Comb_Probe_Fn</entry><entry>
<para>Combining probe functor. If Hash_Fn is not <link linkend="_struct____gnu__pbds_1_1null__type">null_type</link>, then this is the ranged-probe functor; otherwise, this is the range-hashing functor. XXX See Design::Hash-Based Containers::Hash Policies. </para>
</entry>
                            </row>
                            <row>
<entry>Probe_Fn</entry><entry>
<para>Probe functor. </para>
</entry>
                            </row>
                            <row>
<entry>Resize_Policy</entry><entry>
<para>Resizes hash. </para>
</entry>
                            </row>
                            <row>
<entry>Store_Hash</entry><entry>
<para>Indicates whether the hash value will be stored along with each key. If Hash_Fn is <link linkend="_struct____gnu__pbds_1_1null__type">null_type</link>, then the container will not compile if this value is true </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Base tag choices are: <link linkend="_struct____gnu__pbds_1_1gp__hash__tag">gp_hash_tag</link>.</para>

<para>Base is <link linkend="_class____gnu__pbds_1_1basic__hash__table">basic_hash_table</link>. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd"/><section>
    <title>comb_probe_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>comb_probe_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>comb_probe_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Comb_Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::comb_probe_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd"/><section>
    <title>comb_probe_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>comb_probe_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>comb_probe_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Comb_Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::comb_probe_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd"/><section>
    <title>comb_probe_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>comb_probe_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>comb_probe_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Comb_Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::comb_probe_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a7415e10342e8b63d55700e6d48221899"/><section>
    <title>container_category<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>container_category</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>container_category</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1gp__hash__tag">gp_hash_tag</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::container_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a7415e10342e8b63d55700e6d48221899"/><section>
    <title>container_category<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>container_category</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>container_category</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1gp__hash__tag">gp_hash_tag</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::container_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a7415e10342e8b63d55700e6d48221899"/><section>
    <title>container_category<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>container_category</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>container_category</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct____gnu__pbds_1_1gp__hash__tag">gp_hash_tag</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::container_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53"/><section>
    <title>eq_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>eq_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>eq_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::eq_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53"/><section>
    <title>eq_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>eq_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>eq_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::eq_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53"/><section>
    <title>eq_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>eq_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>eq_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Eq_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::eq_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228"/><section>
    <title>hash_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>hash_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228"/><section>
    <title>hash_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>hash_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228"/><section>
    <title>hash_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>hash_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>hash_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Hash_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::hash_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd"/><section>
    <title>probe_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>probe_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>probe_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::probe_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd"/><section>
    <title>probe_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>probe_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>probe_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::probe_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd"/><section>
    <title>probe_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>probe_fn</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>probe_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Probe_Fn <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::probe_fn</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8"/><section>
    <title>resize_policy<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>resize_policy</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>resize_policy</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::resize_policy</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8"/><section>
    <title>resize_policy<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>resize_policy</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>resize_policy</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::resize_policy</computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8"/><section>
    <title>resize_policy<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>resize_policy</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>resize_policy</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Resize_Policy <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::resize_policy</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a090fe23fa9a464334f41bac7c58839d7"/><section>
    <title>gp_hash_table()<computeroutput>[1/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1aa868348b5d0403163cc3fcff72488ecf"/><section>
    <title>gp_hash_table()<computeroutput>[2/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a46ef48ae07c1e2407f5676a519fda8d2"/><section>
    <title>gp_hash_table()<computeroutput>[3/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1afc4daba066d47ce7f3687adadb8d49e7"/><section>
    <title>gp_hash_table()<computeroutput>[4/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_probe_fn will be copied by the comb_probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a02d894524f232f722315e57158ea6c62"/><section>
    <title>gp_hash_table()<computeroutput>[5/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, and r_probe_fn will be copied by the probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a57a476e9e07131b80495dd9bfe56f3f0"/><section>
    <title>gp_hash_table()<computeroutput>[6/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, r_probe_fn will be copied by the probe_fn object of the container object, and r_resize_policy will be copied by the Resize_Policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a3b2755912ddc11a6aa6387825f1b4dd2"/><section>
    <title>gp_hash_table()<computeroutput>[7/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a79315b5c79f3c457c2ed81a6e369ef79"/><section>
    <title>gp_hash_table()<computeroutput>[8/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1ad8b1efc6af0b813705792313fd566b04"/><section>
    <title>gp_hash_table()<computeroutput>[9/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a1e09abc416f9e136eba0221560b61002"/><section>
    <title>gp_hash_table()<computeroutput>[10/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_probe_fn will be copied by the comb_probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a1483741a8699383e857cefa0834767db"/><section>
    <title>gp_hash_table()<computeroutput>[11/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, and r_probe_fn will be copied by the probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a046c24793ff31b211894e668ae0146a5"/><section>
    <title>gp_hash_table()<computeroutput>[12/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, r_probe_fn will be copied by the probe_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a88c1ec535d8fea3c84ac0adfdfd87b43"/><section>
    <title>gp_hash_table()<computeroutput>[13/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a20fa8b32ebbe4f478a47fc8087802cf2"/><section>
    <title>~gp_hash_table()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>~gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>~gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a090fe23fa9a464334f41bac7c58839d7"/><section>
    <title>gp_hash_table()<computeroutput>[14/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1aa868348b5d0403163cc3fcff72488ecf"/><section>
    <title>gp_hash_table()<computeroutput>[15/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a46ef48ae07c1e2407f5676a519fda8d2"/><section>
    <title>gp_hash_table()<computeroutput>[16/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1afc4daba066d47ce7f3687adadb8d49e7"/><section>
    <title>gp_hash_table()<computeroutput>[17/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_probe_fn will be copied by the comb_probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a02d894524f232f722315e57158ea6c62"/><section>
    <title>gp_hash_table()<computeroutput>[18/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, and r_probe_fn will be copied by the probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a57a476e9e07131b80495dd9bfe56f3f0"/><section>
    <title>gp_hash_table()<computeroutput>[19/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, r_probe_fn will be copied by the probe_fn object of the container object, and r_resize_policy will be copied by the Resize_Policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a3b2755912ddc11a6aa6387825f1b4dd2"/><section>
    <title>gp_hash_table()<computeroutput>[20/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a79315b5c79f3c457c2ed81a6e369ef79"/><section>
    <title>gp_hash_table()<computeroutput>[21/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1ad8b1efc6af0b813705792313fd566b04"/><section>
    <title>gp_hash_table()<computeroutput>[22/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a1e09abc416f9e136eba0221560b61002"/><section>
    <title>gp_hash_table()<computeroutput>[23/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_probe_fn will be copied by the comb_probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a1483741a8699383e857cefa0834767db"/><section>
    <title>gp_hash_table()<computeroutput>[24/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, and r_probe_fn will be copied by the probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a046c24793ff31b211894e668ae0146a5"/><section>
    <title>gp_hash_table()<computeroutput>[25/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, r_probe_fn will be copied by the probe_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a88c1ec535d8fea3c84ac0adfdfd87b43"/><section>
    <title>gp_hash_table()<computeroutput>[26/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a20fa8b32ebbe4f478a47fc8087802cf2"/><section>
    <title>~gp_hash_table()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>~gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>~gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a090fe23fa9a464334f41bac7c58839d7"/><section>
    <title>gp_hash_table()<computeroutput>[27/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1aa868348b5d0403163cc3fcff72488ecf"/><section>
    <title>gp_hash_table()<computeroutput>[28/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a46ef48ae07c1e2407f5676a519fda8d2"/><section>
    <title>gp_hash_table()<computeroutput>[29/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1afc4daba066d47ce7f3687adadb8d49e7"/><section>
    <title>gp_hash_table()<computeroutput>[30/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_probe_fn will be copied by the comb_probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a02d894524f232f722315e57158ea6c62"/><section>
    <title>gp_hash_table()<computeroutput>[31/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, and r_probe_fn will be copied by the probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a57a476e9e07131b80495dd9bfe56f3f0"/><section>
    <title>gp_hash_table()<computeroutput>[32/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, r_probe_fn will be copied by the probe_fn object of the container object, and r_resize_policy will be copied by the Resize_Policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a3b2755912ddc11a6aa6387825f1b4dd2"/><section>
    <title>gp_hash_table()<computeroutput>[33/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a79315b5c79f3c457c2ed81a6e369ef79"/><section>
    <title>gp_hash_table()<computeroutput>[34/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1ad8b1efc6af0b813705792313fd566b04"/><section>
    <title>gp_hash_table()<computeroutput>[35/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, and r_eq_fn will be copied by the eq_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a1e09abc416f9e136eba0221560b61002"/><section>
    <title>gp_hash_table()<computeroutput>[36/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, and r_comb_probe_fn will be copied by the comb_probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a1483741a8699383e857cefa0834767db"/><section>
    <title>gp_hash_table()<computeroutput>[37/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, and r_probe_fn will be copied by the probe_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a046c24793ff31b211894e668ae0146a5"/><section>
    <title>gp_hash_table()<computeroutput>[38/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (It first, It last, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1acfe0ac08f7eb44b861a049f0d348b228">hash_fn</link> &amp; h, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a9663f38c12488fef91036c5507c73d53">eq_fn</link> &amp; e, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1a6063620a69df7299733b37f7425497bd">comb_probe_fn</link> &amp; cp, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af54cb8a032eed4a3b269b26e2c98dfbd">probe_fn</link> &amp; p, const <link linkend="_class____gnu__pbds_1_1gp__hash__table_1af276273090232adb44f6fbb3346268e8">resize_policy</link> &amp; rp)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. r_hash_fn will be copied by the hash_fn object of the container object, r_eq_fn will be copied by the eq_fn object of the container object, r_comb_probe_fn will be copied by the comb_probe_fn object of the container object, r_probe_fn will be copied by the probe_fn object of the container object, and r_resize_policy will be copied by the resize_policy object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a88c1ec535d8fea3c84ac0adfdfd87b43"/><section>
    <title>gp_hash_table()<computeroutput>[39/39]</computeroutput></title>
<indexterm><primary>gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::gp_hash_table (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a20fa8b32ebbe4f478a47fc8087802cf2"/><section>
    <title>~gp_hash_table()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>~gp_hash_table</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>~gp_hash_table</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1ab60a98e829799556cebbd1a0e15ac1bd"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1gp__hash__table_ab60a98e829799556cebbd1a0e15ac1bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1ab60a98e829799556cebbd1a0e15ac1bd"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1gp__hash__table_ab60a98e829799556cebbd1a0e15ac1bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1ab60a98e829799556cebbd1a0e15ac1bd"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link> &amp; <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1gp__hash__table_ab60a98e829799556cebbd1a0e15ac1bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a8f4f0c541807c4cddd24b0985b12dfb4"/><section>
    <title>swap()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1gp__hash__table_a8f4f0c541807c4cddd24b0985b12dfb4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a8f4f0c541807c4cddd24b0985b12dfb4"/><section>
    <title>swap()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1gp__hash__table_1a8f4f0c541807c4cddd24b0985b12dfb4"/><section>
    <title>swap()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::gp_hash_table&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Hash_Fn  = typename detail::default_hash_fn&lt;Key&gt;::type, typename Eq_Fn  = typename detail::default_eq_fn&lt;Key&gt;::type, typename Comb_Probe_Fn  = detail::default_comb_hash_fn::type, typename Probe_Fn  = typename detail::default_probe_fn&lt;Comb_Probe_Fn&gt;::type, typename Resize_Policy  = typename detail::default_resize_policy&lt;Comb_Probe_Fn&gt;::type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> Store_Hash = detail::default_store_hash, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1gp__hash__table">__gnu_pbds::gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1gp__hash__table">gp_hash_table</link>&lt; Key, Mapped, Hash_Fn, Eq_Fn, Comb_Probe_Fn, Probe_Fn, Resize_Policy, Store_Hash, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/<link linkend="_lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link></section>
</section>
