<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge" xml:lang="en-US">
<title>__pstl::__utils::__serial_move_merge Struct Reference</title>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary></indexterm>
<para>

<para>Merge sequences [__xs,__xe) and [__ys,__ye) to output sequence [__zs,(__xe-__xs)+(__ye-__ys)), using <link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>. </para>
 
</para>
<para>
<computeroutput>#include &lt;parallel_backend_utils.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aa9f1d95b37acaf76f898fcadd5ff5894">__serial_move_merge</link> (std::size_t __nmerge)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Compare , class _MoveValueX , class _MoveValueY , class _MoveSequenceX , class _MoveSequenceY &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____utils_1_1____serial__move__merge_1a90024e79a3405141adb05089e0eb8043">operator()</link> (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __ys, _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp, _MoveValueX __move_value_x, _MoveValueY __move_value_y, _MoveSequenceX __move_sequence_x, _MoveSequenceY __move_sequence_y)</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aa9f1d95b37acaf76f898fcadd5ff5894">__serial_move_merge</link> (std::size_t __nmerge)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Compare , class _MoveValueX , class _MoveValueY , class _MoveSequenceX , class _MoveSequenceY &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____utils_1_1____serial__move__merge_1a90024e79a3405141adb05089e0eb8043">operator()</link> (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __ys, _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp, _MoveValueX __move_value_x, _MoveValueY __move_value_y, _MoveSequenceX __move_sequence_x, _MoveSequenceY __move_sequence_y)</para>
</listitem>
            <listitem><para><link linkend="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aa9f1d95b37acaf76f898fcadd5ff5894">__serial_move_merge</link> (std::size_t __nmerge)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Compare , class _MoveValueX , class _MoveValueY , class _MoveSequenceX , class _MoveSequenceY &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_struct____pstl_1_1____utils_1_1____serial__move__merge_1a90024e79a3405141adb05089e0eb8043">operator()</link> (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __ys, _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp, _MoveValueX __move_value_x, _MoveValueY __move_value_y, _MoveSequenceX __move_sequence_x, _MoveSequenceY __move_sequence_y)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>const std::size_t <link linkend="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aaf0ea92e7386f42e24252d63cbe3e233">_M_nmerge</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Merge sequences [__xs,__xe) and [__ys,__ye) to output sequence [__zs,(__xe-__xs)+(__ye-__ys)), using <link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aa9f1d95b37acaf76f898fcadd5ff5894"/><section>
    <title>__serial_move_merge()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__serial_move_merge</primary><secondary>__pstl::__utils::__serial_move_merge</secondary></indexterm>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary><secondary>__serial_move_merge</secondary></indexterm>
<para><computeroutput>__pstl::__utils::__serial_move_merge::__serial_move_merge (std::size_t __nmerge)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aa9f1d95b37acaf76f898fcadd5ff5894"/><section>
    <title>__serial_move_merge()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__serial_move_merge</primary><secondary>__pstl::__utils::__serial_move_merge</secondary></indexterm>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary><secondary>__serial_move_merge</secondary></indexterm>
<para><computeroutput>__pstl::__utils::__serial_move_merge::__serial_move_merge (std::size_t __nmerge)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aa9f1d95b37acaf76f898fcadd5ff5894"/><section>
    <title>__serial_move_merge()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__serial_move_merge</primary><secondary>__pstl::__utils::__serial_move_merge</secondary></indexterm>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary><secondary>__serial_move_merge</secondary></indexterm>
<para><computeroutput>__pstl::__utils::__serial_move_merge::__serial_move_merge (std::size_t __nmerge)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge_1a90024e79a3405141adb05089e0eb8043"/><section>
    <title>operator()()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__utils::__serial_move_merge</secondary></indexterm>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Compare , class _MoveValueX , class _MoveValueY , class _MoveSequenceX , class _MoveSequenceY &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__utils::__serial_move_merge::operator() (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __ys, _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp, _MoveValueX __move_value_x, _MoveValueY __move_value_y, _MoveSequenceX __move_sequence_x, _MoveSequenceY __move_sequence_y)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge_1a90024e79a3405141adb05089e0eb8043"/><section>
    <title>operator()()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__utils::__serial_move_merge</secondary></indexterm>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Compare , class _MoveValueX , class _MoveValueY , class _MoveSequenceX , class _MoveSequenceY &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__utils::__serial_move_merge::operator() (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __ys, _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp, _MoveValueX __move_value_x, _MoveValueY __move_value_y, _MoveSequenceX __move_sequence_x, _MoveSequenceY __move_sequence_y)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge_1a90024e79a3405141adb05089e0eb8043"/><section>
    <title>operator()()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__utils::__serial_move_merge</secondary></indexterm>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Compare , class _MoveValueX , class _MoveValueY , class _MoveSequenceX , class _MoveSequenceY &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__utils::__serial_move_merge::operator() (_RandomAccessIterator1 __xs, _RandomAccessIterator1 __xe, _RandomAccessIterator2 __ys, _RandomAccessIterator2 __ye, _RandomAccessIterator3 __zs, _Compare __comp, _MoveValueX __move_value_x, _MoveValueY __move_value_y, _MoveSequenceX __move_sequence_x, _MoveSequenceY __move_sequence_y)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct____pstl_1_1____utils_1_1____serial__move__merge_1aaf0ea92e7386f42e24252d63cbe3e233"/><section>
    <title>_M_nmerge</title>
<indexterm><primary>_M_nmerge</primary><secondary>__pstl::__utils::__serial_move_merge</secondary></indexterm>
<indexterm><primary>__pstl::__utils::__serial_move_merge</primary><secondary>_M_nmerge</secondary></indexterm>
<para><computeroutput>const std::size_t __pstl::__utils::__serial_move_merge::_M_nmerge</computeroutput></para></section>
<para>
The documentation for this struct was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/pstl/<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__utils_8h">parallel_backend_utils.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/<link linkend="_lib_2include_2c_09_09_2pstl_2parallel__backend__utils_8h">parallel_backend_utils.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__utils_8h">parallel_backend_utils.h</link></section>
</section>
