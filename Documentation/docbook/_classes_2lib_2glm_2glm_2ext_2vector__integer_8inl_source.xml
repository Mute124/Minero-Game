<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2glm_2glm_2ext_2vector__integer_8inl_source" xml:lang="en-US">
<title>vector_integer.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/glm/glm/ext/vector_integer.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2glm_2glm_2ext_2scalar__integer_8hpp">scalar_integer.hpp</link>&quot;</emphasis>
2 
3 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>
4 {
5 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
6 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, bool, Q&gt;</link>&#32;<link linkend="_namespaceis_power_of_two">isPowerOfTwo</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Value)
7 &#32;&#32;&#32;&#32;{
8 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;isPowerOfTwo&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
9 
10 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&#32;Result(<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(Value));
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>(Result&#32;&amp;&#32;(Result&#32;-&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(1)),&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(0));
12 &#32;&#32;&#32;&#32;}
13 
14 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
15 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_namespacenext_power_of_two">nextPowerOfTwo</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
16 &#32;&#32;&#32;&#32;{
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;nextPowerOfTwo&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
18 
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1compute__ceil_power_of_two">detail::compute_ceilPowerOfTwo&lt;L, T, Q, std::numeric_limits&lt;T&gt;::is_signed</link>&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
20 &#32;&#32;&#32;&#32;}
21 
22 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
23 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_namespaceprev_power_of_two">prevPowerOfTwo</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
24 &#32;&#32;&#32;&#32;{
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;prevPowerOfTwo&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
26 
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1functor1">detail::functor1&lt;vec, L, T, T, Q&gt;::call</link>(<link linkend="_namespaceprev_power_of_two">prevPowerOfTwo</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
28 &#32;&#32;&#32;&#32;}
29 
30 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
31 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, bool, Q&gt;</link>&#32;<link linkend="_group__ext__scalar__integer_1gaec593d33956a8fe43f78fccc63ddde9a">isMultiple</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Value,&#32;T&#32;Multiple)
32 &#32;&#32;&#32;&#32;{
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;isMultiple&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
34 
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Value&#32;%&#32;Multiple)&#32;==&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(0);
36 &#32;&#32;&#32;&#32;}
37 
38 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
39 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, bool, Q&gt;</link>&#32;<link linkend="_group__ext__scalar__integer_1gaec593d33956a8fe43f78fccc63ddde9a">isMultiple</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Value,&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Multiple)
40 &#32;&#32;&#32;&#32;{
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;isMultiple&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
42 
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Value&#32;%&#32;Multiple)&#32;==&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(0);
44 &#32;&#32;&#32;&#32;}
45 
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
47 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_namespacenext_multiple">nextMultiple</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;T&#32;Multiple)
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;nextMultiple&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1functor2">detail::functor2&lt;vec, L, T, Q&gt;::call</link>(<link linkend="_namespacenext_multiple">nextMultiple</link>,&#32;Source,&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(Multiple));
52 &#32;&#32;&#32;&#32;}
53 
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
55 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_namespacenext_multiple">nextMultiple</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Multiple)
56 &#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;nextMultiple&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
58 
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1functor2">detail::functor2&lt;vec, L, T, Q&gt;::call</link>(<link linkend="_namespacenext_multiple">nextMultiple</link>,&#32;Source,&#32;Multiple);
60 &#32;&#32;&#32;&#32;}
61 
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
63 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_namespaceprev_multiple">prevMultiple</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;T&#32;Multiple)
64 &#32;&#32;&#32;&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;prevMultiple&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
66 
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1functor2">detail::functor2&lt;vec, L, T, Q&gt;::call</link>(<link linkend="_namespaceprev_multiple">prevMultiple</link>,&#32;Source,&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(Multiple));
68 &#32;&#32;&#32;&#32;}
69 
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
71 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_namespaceprev_multiple">prevMultiple</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Multiple)
72 &#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;prevMultiple&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1functor2">detail::functor2&lt;vec, L, T, Q&gt;::call</link>(<link linkend="_namespaceprev_multiple">prevMultiple</link>,&#32;Source,&#32;Multiple);
76 &#32;&#32;&#32;&#32;}
77 
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
79 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, int, Q&gt;</link>&#32;<link linkend="_namespacefind_n_s_b">findNSB</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;<link linkend="_structglm_1_1vec">vec&lt;L, int, Q&gt;</link>&#32;SignificantBitCount)
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;findNSB&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1functor2__vec__int">detail::functor2_vec_int&lt;L, T, Q&gt;::call</link>(<link linkend="_namespacefind_n_s_b">findNSB</link>,&#32;Source,&#32;SignificantBitCount);
84 &#32;&#32;&#32;&#32;}
85 }<emphasis role="comment">//namespace&#32;glm</emphasis>
</programlisting></section>
