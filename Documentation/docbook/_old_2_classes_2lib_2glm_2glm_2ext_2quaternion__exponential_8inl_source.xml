<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2glm_2glm_2ext_2quaternion__exponential_8inl_source" xml:lang="en-US">
<title>quaternion_exponential.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/glm/glm/ext/quaternion_exponential.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2glm_2glm_2ext_2scalar__constants_8hpp">scalar_constants.hpp</link>&quot;</emphasis>
2 
3 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>
4 {
5 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
6 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
7 &#32;&#32;&#32;&#32;{
8 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>(q.x,&#32;q.y,&#32;q.z);
9 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;Angle&#32;=&#32;<link linkend="_namespaceglm_1abcd8538aa95a8963803ec42c2fd654cd">glm::length</link>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>);
10 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Angle&#32;&lt;&#32;epsilon&lt;T&gt;())
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;();
12 
13 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;/&#32;Angle);
14 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>(Angle),&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>(Angle)&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
15 &#32;&#32;&#32;&#32;}
16 
17 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
18 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
19 &#32;&#32;&#32;&#32;{
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>(q.x,&#32;q.y,&#32;q.z);
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;Vec3Len&#32;=&#32;<link linkend="_namespacelength">length</link>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>);
22 
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Vec3Len&#32;&lt;&#32;epsilon&lt;T&gt;())
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(q.w&#32;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0))
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>(q.w),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0));
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(q.w&#32;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0))
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>(-q.w),&#32;pi&lt;T&gt;(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0));
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(std::numeric_limits&lt;T&gt;::infinity(),&#32;std::numeric_limits&lt;T&gt;::infinity(),&#32;std::numeric_limits&lt;T&gt;::infinity(),&#32;std::numeric_limits&lt;T&gt;::infinity());
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;t&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>(Vec3Len,&#32;T(q.w))&#32;/&#32;Vec3Len;
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;QuatLen2&#32;=&#32;Vec3Len&#32;*&#32;Vec3Len&#32;+&#32;q.w&#32;*&#32;q.w;
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.5)&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>(QuatLen2),&#32;t&#32;*&#32;q.x,&#32;t&#32;*&#32;q.y,&#32;t&#32;*&#32;q.z);
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
38 &#32;&#32;&#32;&#32;}
39 
40 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
41 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;T&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)
42 &#32;&#32;&#32;&#32;{
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Raising&#32;to&#32;the&#32;power&#32;of&#32;0&#32;should&#32;yield&#32;1</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Needed&#32;to&#32;prevent&#32;a&#32;division&#32;by&#32;0&#32;error&#32;later&#32;on</emphasis>
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&gt;&#32;-epsilon&lt;T&gt;()&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&lt;&#32;epsilon&lt;T&gt;())
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(1,0,0,0);
47 
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//To&#32;deal&#32;with&#32;non-unit&#32;quaternions</emphasis>
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;magnitude&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.x&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.x&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.y&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.y&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.z&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.z&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.w&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.w);
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;Angle;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.w&#32;/&#32;magnitude)&#32;&gt;&#32;cos_one_over_two&lt;T&gt;())
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Scalar&#32;component&#32;is&#32;close&#32;to&#32;1;&#32;using&#32;it&#32;to&#32;recover&#32;angle&#32;would&#32;lose&#32;precision</emphasis>
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Instead,&#32;we&#32;use&#32;the&#32;non-scalar&#32;components&#32;since&#32;sin()&#32;is&#32;accurate&#32;around&#32;0</emphasis>
56 
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Prevent&#32;a&#32;division&#32;by&#32;0&#32;error&#32;later&#32;on</emphasis>
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;VectorMagnitude&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.x&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.x&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.y&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.y&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.z&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.z;
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">glm::abs</link>(VectorMagnitude&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0))&#32;&lt;&#32;glm::epsilon&lt;T&gt;())&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Equivalent&#32;to&#32;raising&#32;a&#32;real&#32;number&#32;to&#32;a&#32;power</emphasis>
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.w,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>),&#32;0,&#32;0,&#32;0);
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Angle&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1aa2375efebaed504113d91f1822bafa38">asin</link>(<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(VectorMagnitude)&#32;/&#32;magnitude);
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Scalar&#32;component&#32;is&#32;small,&#32;shouldn&apos;t&#32;cause&#32;loss&#32;of&#32;precision</emphasis>
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Angle&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6826a8b8db695e1c1cddea666254e56f">acos</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.w&#32;/&#32;magnitude);
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;NewAngle&#32;=&#32;Angle&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>;
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;Div&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>(NewAngle)&#32;/&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>(Angle);
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;Mag&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>(magnitude,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(1));
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>(NewAngle)&#32;*&#32;magnitude&#32;*&#32;Mag,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.x&#32;*&#32;Div&#32;*&#32;Mag,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.y&#32;*&#32;Div&#32;*&#32;Mag,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.z&#32;*&#32;Div&#32;*&#32;Mag);
76 &#32;&#32;&#32;&#32;}
77 
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
79 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.5));
82 &#32;&#32;&#32;&#32;}
83 }<emphasis role="comment">//namespace&#32;glm</emphasis>
84 
85 
</programlisting></section>
