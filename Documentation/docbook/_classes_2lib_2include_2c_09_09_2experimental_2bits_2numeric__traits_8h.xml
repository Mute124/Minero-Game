<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2experimental_2bits_2numeric__traits_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/experimental/bits/numeric_traits.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/experimental/bits/numeric_traits.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;type_traits&gt;<?linebreak?></programlisting>Include dependency graph for numeric_traits.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_classes_2lib_2include_2c_09_09_2experimental_2bits_2numeric__traits_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists__impl">std::__value_exists_impl&lt; _Trait, _Tp, typename &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists__impl_3_01___trait_00_01___tp_00_01void__t_3_01decltype_07___trai2a9d6c26cbf51bee76e01c3e3a87e2f8">std::__value_exists_impl&lt; _Trait, _Tp, void_t&lt; decltype(_Trait&lt; _Tp &gt;::value)&gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl">std::__digits_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01___tp_00_01true_01_4">std::__digits_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01float_00_01true_01_4">std::__digits_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01double_00_01true_01_4">std::__digits_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01long_01double_00_01true_01_4">std::__digits_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl">std::__digits10_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01___tp_00_01true_01_4">std::__digits10_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01float_00_01true_01_4">std::__digits10_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01double_00_01true_01_4">std::__digits10_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01long_01double_00_01true_01_4">std::__digits10_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10__impl">std::__max_digits10_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10__impl_3_01___tp_00_01true_01_4">std::__max_digits10_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl">std::__max_exponent_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01float_01_4">std::__max_exponent_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01double_01_4">std::__max_exponent_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01long_01double_01_4">std::__max_exponent_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl">std::__max_exponent10_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01float_01_4">std::__max_exponent10_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01double_01_4">std::__max_exponent10_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01long_01double_01_4">std::__max_exponent10_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl">std::__min_exponent_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01float_01_4">std::__min_exponent_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01double_01_4">std::__min_exponent_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01long_01double_01_4">std::__min_exponent_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl">std::__min_exponent10_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01float_01_4">std::__min_exponent10_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01double_01_4">std::__min_exponent10_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01long_01double_01_4">std::__min_exponent10_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix__impl">std::__radix_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix__impl_3_01___tp_00_01true_01_4">std::__radix_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists">std::__value_exists&lt; _Trait, _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl">std::__norm_min_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01___tp_00_01true_01_4">std::__norm_min_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01float_00_01true_01_4">std::__norm_min_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01double_00_01true_01_4">std::__norm_min_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01long_01double_00_01true_01_4">std::__norm_min_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____denorm__min__impl">std::__denorm_min_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl">std::__epsilon_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01float_01_4">std::__epsilon_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01double_01_4">std::__epsilon_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01long_01double_01_4">std::__epsilon_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl">std::__finite_min_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01___tp_00_01true_01_4">std::__finite_min_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01float_00_01true_01_4">std::__finite_min_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01double_00_01true_01_4">std::__finite_min_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01long_01double_00_01true_01_4">std::__finite_min_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl">std::__finite_max_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01___tp_00_01true_01_4">std::__finite_max_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01float_00_01true_01_4">std::__finite_max_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01double_00_01true_01_4">std::__finite_max_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01long_01double_00_01true_01_4">std::__finite_max_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____infinity__impl">std::__infinity_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____quiet___na_n__impl">std::__quiet_NaN_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold__impl">std::__reciprocal_overflow_threshold_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold__impl_3_01___tp_00_01true_01_4">std::__reciprocal_overflow_threshold_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error__impl">std::__round_error_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error__impl_3_01___tp_00_01true_01_4">std::__round_error_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____signaling___na_n__impl">std::__signaling_NaN_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____denorm__min">std::__denorm_min&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon">std::__epsilon&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max">std::__finite_max&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min">std::__finite_min&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____infinity">std::__infinity&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min">std::__norm_min&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____quiet___na_n">std::__quiet_NaN&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold">std::__reciprocal_overflow_threshold&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error">std::__round_error&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____signaling___na_n">std::__signaling_NaN&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits">std::__digits&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10">std::__digits10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10">std::__max_digits10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent">std::__max_exponent&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10">std::__max_exponent10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent">std::__min_exponent&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10">std::__min_exponent10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix">std::__radix&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____has__iec559__storage__format">std::__has_iec559_storage_format&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____has__iec559__behavior">std::__has_iec559_behavior&lt; _Trait, _Tp &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacestd">std</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;template&lt; typename &gt; class _Trait, typename _Tp , typename _Up  = _Tp&gt; </para><para>constexpr _Up <link linkend="_namespacestd_1afb0b54c9aca639344dd22870d4179eca">std::__value_or</link> (_Up __def=_Up()) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>template&lt;template&lt; typename &gt; class _Trait, typename _Tp &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacestd_1aa7ae232fbcf2790918a97f10f6ac2da4">std::__value_exists_v</link> = <link linkend="_structstd_1_1____value__exists">__value_exists</link>&lt;_Trait, _Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a62381ea7149c93b6d057c647ff1d1c49">std::__denorm_min_v</link> = <link linkend="_structstd_1_1____denorm__min">__denorm_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a3760ff6d7b14de23097c9a1e007ae635">std::__epsilon_v</link> = <link linkend="_structstd_1_1____epsilon">__epsilon</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a0d8da259a6a4c3a911b5a4f46a91bd65">std::__finite_max_v</link> = <link linkend="_structstd_1_1____finite__max">__finite_max</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1af108d927d1d48c236ee58f02e1f66206">std::__finite_min_v</link> = <link linkend="_structstd_1_1____finite__min">__finite_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a459ce5336666d09ed2cbda6902f8d464">std::__infinity_v</link> = <link linkend="_structstd_1_1____infinity">__infinity</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1ae82e3e386cb77c5f9df37f8a7e4002f8">std::__norm_min_v</link> = <link linkend="_structstd_1_1____norm__min">__norm_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a739eba7491f4e358b44a95d43570d4bf">std::__quiet_NaN_v</link> = <link linkend="_structstd_1_1____quiet___na_n">__quiet_NaN</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1ab133749ec0bcee1e1f914509b5512cb4">std::__reciprocal_overflow_threshold_v</link> = <link linkend="_structstd_1_1____reciprocal__overflow__threshold">__reciprocal_overflow_threshold</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a95c232e9e27c7f3d49016b0732483957">std::__round_error_v</link> = <link linkend="_structstd_1_1____round__error">__round_error</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a2d6041736fd2bd49d6492956f0b85f8f">std::__signaling_NaN_v</link> = <link linkend="_structstd_1_1____signaling___na_n">__signaling_NaN</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a3b0642926b321992beb023600ace989e">std::__digits_v</link> = <link linkend="_structstd_1_1____digits">__digits</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1ab4cb32ee09031f5ba80a0c177ad45b30">std::__digits10_v</link> = <link linkend="_structstd_1_1____digits10">__digits10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1aad62a7deedbdb38c20d9a5e398cdd4b9">std::__max_digits10_v</link> = <link linkend="_structstd_1_1____max__digits10">__max_digits10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a13620c564d7575a1e3c9057a9b42d4b1">std::__max_exponent_v</link> = <link linkend="_structstd_1_1____max__exponent">__max_exponent</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a70b9e37a46d30c3c7bb2f38e88d40802">std::__max_exponent10_v</link> = <link linkend="_structstd_1_1____max__exponent10">__max_exponent10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a1299ac5d8f27c5d9767c12358ca28971">std::__min_exponent_v</link> = <link linkend="_structstd_1_1____min__exponent">__min_exponent</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a40b4fcdd5587c393e222b408e5747b09">std::__min_exponent10_v</link> = <link linkend="_structstd_1_1____min__exponent10">__min_exponent10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a511c20ecb8405016527733b89d3aada3">std::__radix_v</link> = <link linkend="_structstd_1_1____radix">__radix</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacestd_1aa15f4d72f6eb58958e3763c45a2dfcdc">std::__has_iec559_storage_format_v</link> = <link linkend="_structstd_1_1____has__iec559__storage__format">__has_iec559_storage_format</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;template&lt; typename &gt; class _Trait, typename _Tp &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacestd_1a18c96fc1fd03305b7bffd337c2911751">std::__has_iec559_behavior_v</link> = <link linkend="_structstd_1_1____has__iec559__behavior">__has_iec559_behavior</link>&lt;_Trait, _Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
