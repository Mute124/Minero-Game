<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2unordered__set_8h_source" xml:lang="en-US">
<title>unordered_set.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/unordered_set.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;unordered_set&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2010-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_UNORDERED_SET_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_UNORDERED_SET_H</emphasis>
32 
33 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
34 {
35 _GLIBCXX_BEGIN_NAMESPACE_VERSION
36 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
37 
39 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Cache&gt;
40 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__uset_traits&#32;=&#32;__detail::_Hashtable_traits&lt;_Cache,&#32;true,&#32;true&gt;;
41 
42 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Value&gt;,
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;std::equal_to&lt;_Value&gt;,
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;_Value&gt;,
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&#32;=&#32;__uset_traits&lt;__cache_default&lt;_Value,&#32;_Hash&gt;::value&gt;&gt;
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__uset_hashtable&#32;=&#32;_Hashtable&lt;_Value,&#32;_Value,&#32;_Alloc,
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Identity,&#32;_Pred,&#32;_Hash,
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Mod_range_hashing,
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,&#32;_Tr&gt;;
52 
54 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Cache&gt;
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__umset_traits&#32;=&#32;__detail::_Hashtable_traits&lt;_Cache,&#32;true,&#32;false&gt;;
56 
57 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Value&gt;,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;std::equal_to&lt;_Value&gt;,
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;_Value&gt;,
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&#32;=&#32;__umset_traits&lt;__cache_default&lt;_Value,&#32;_Hash&gt;::value&gt;&gt;
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__umset_hashtable&#32;=&#32;_Hashtable&lt;_Value,&#32;_Value,&#32;_Alloc,
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Identity,
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Hash,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Mod_range_hashing,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,&#32;_Tr&gt;;
68 
69 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_multiset;
71 
93 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Value&gt;,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Value&gt;,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;allocator&lt;_Value&gt;&gt;
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_set
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__uset_hashtable&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&#32;&#32;_Hashtable;
100 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable&#32;_M_h;
101 
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typedefs:</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_type&#32;key_type;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::value_type&#32;&#32;&#32;value_type;
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::hasher&#32;&#32;&#32;hasher;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_equal&#32;&#32;&#32;&#32;key_equal;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::allocator_type&#32;allocator_type;
112 
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::pointer&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_pointer&#32;&#32;&#32;&#32;const_pointer;
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_reference&#32;&#32;const_reference;
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::iterator&#32;&#32;&#32;&#32;&#32;iterator;
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_iterator&#32;&#32;&#32;const_iterator;
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::local_iterator&#32;&#32;&#32;local_iterator;
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_local_iterator&#32;const_local_iterator;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::difference_type&#32;&#32;difference_type;
126 
127 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::node_type;
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>insert_return_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::insert_return_type;
130 <emphasis role="preprocessor">#endif</emphasis>
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;construct/destroy/copy</emphasis>
133 
135 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
136 
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(size_type&#32;__n,
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
149 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__n,&#32;__hf,&#32;__eql,&#32;__a)
150 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
151 
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
166 &#32;&#32;&#32;&#32;unordered_set(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
171 &#32;&#32;&#32;&#32;:&#32;_M_h(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
172 &#32;&#32;&#32;&#32;{&#32;}
173 
175 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(<emphasis role="keyword">const</emphasis>&#32;unordered_set&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
176 
178 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(unordered_set&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
179 
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
186 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__a)
187 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
190 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;Copy&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
191 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__uset&#32;&#32;Input&#32;%unordered_set&#32;to&#32;copy.</emphasis>
192 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__a&#32;&#32;An&#32;allocator&#32;object.</emphasis>
193 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(<emphasis role="keyword">const</emphasis>&#32;unordered_set&amp;&#32;__uset,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
196 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__uset._M_h,&#32;__a)
197 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
198 
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
200 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Move&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
201 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__uset&#32;Input&#32;%unordered_set&#32;to&#32;move.</emphasis>
202 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__a&#32;&#32;&#32;&#32;An&#32;allocator&#32;object.</emphasis>
203 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(unordered_set&amp;&amp;&#32;__uset,
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_Hashtable(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__uset._M_h),&#32;__a))&#32;)
207 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__uset._M_h),&#32;__a)
208 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
209 
221 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(initializer_list&lt;value_type&gt;&#32;__l,
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
226 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__l,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
227 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
228 
229 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
230 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_set(__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
231 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
235 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_set(__n,&#32;__hf,&#32;key_equal(),&#32;__a)
236 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
237 
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
239 &#32;&#32;&#32;&#32;unordered_set(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
242 &#32;&#32;&#32;&#32;:&#32;unordered_set(__first,&#32;__last,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
243 &#32;&#32;&#32;&#32;{&#32;}
244 
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
246 &#32;&#32;&#32;&#32;unordered_set(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
249 &#32;&#32;&#32;&#32;:&#32;unordered_set(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
250 &#32;&#32;&#32;&#32;{&#32;}
251 
252 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(initializer_list&lt;value_type&gt;&#32;__l,
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
255 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_set(__l,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
256 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(initializer_list&lt;value_type&gt;&#32;__l,
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
261 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_set(__l,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
262 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
263 
265 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set&amp;
266 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;unordered_set&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
267 
269 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set&amp;
270 &#32;&#32;&#32;&#32;&#32;&#32;operator=(unordered_set&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
271 
283 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set&amp;
284 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
285 &#32;&#32;&#32;&#32;&#32;&#32;{
286 &#32;&#32;&#32;&#32;_M_h&#32;=&#32;__l;
287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
288 &#32;&#32;&#32;&#32;&#32;&#32;}
289 
291 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
292 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
293 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.get_allocator();&#32;}
294 
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;and&#32;capacity:</emphasis>
296 
298 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.empty();&#32;}
301 
303 &#32;&#32;&#32;&#32;&#32;&#32;size_type
304 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
305 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.size();&#32;}
306 
308 &#32;&#32;&#32;&#32;&#32;&#32;size_type
309 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
310 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_size();&#32;}
311 
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators.</emphasis>
313 
315 
319 &#32;&#32;&#32;&#32;&#32;&#32;iterator
320 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">noexcept</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
322 
323 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
324 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
327 
329 
333 &#32;&#32;&#32;&#32;&#32;&#32;iterator
334 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
338 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
341 
346 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
347 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
349 
354 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
355 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
357 
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers.</emphasis>
359 
375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
376 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
377 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
378 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace(std::forward&lt;_Args&gt;(__args)...);&#32;}
379 
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
402 &#32;&#32;&#32;&#32;iterator
403 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
404 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace_hint(__pos,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
405 
407 
420 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
421 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
422 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__x);&#32;}
423 
424 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
425 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
426 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
428 
430 
449 &#32;&#32;&#32;&#32;&#32;&#32;iterator
450 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
451 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;__x);&#32;}
452 
453 &#32;&#32;&#32;&#32;&#32;&#32;iterator
454 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;value_type&amp;&amp;&#32;__x)
455 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
457 
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
468 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
469 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
470 &#32;&#32;&#32;&#32;{&#32;_M_h.insert(__first,&#32;__last);&#32;}
471 
479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
480 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
481 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.insert(__l);&#32;}
482 
483 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
485 &#32;&#32;&#32;&#32;&#32;&#32;node_type
486 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
487 &#32;&#32;&#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__pos);
490 &#32;&#32;&#32;&#32;&#32;&#32;}
491 
493 &#32;&#32;&#32;&#32;&#32;&#32;node_type
494 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
495 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__key);&#32;}
496 
498 &#32;&#32;&#32;&#32;&#32;&#32;insert_return_type
499 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
500 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
501 
503 &#32;&#32;&#32;&#32;&#32;&#32;iterator
504 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator,&#32;node_type&amp;&amp;&#32;__nh)
505 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh)).position;&#32;}
506 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
507 
509 
522 &#32;&#32;&#32;&#32;&#32;&#32;iterator
523 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
524 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
525 
526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;2059.</emphasis>
527 &#32;&#32;&#32;&#32;&#32;&#32;iterator
528 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
529 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
531 
544 &#32;&#32;&#32;&#32;&#32;&#32;size_type
545 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
546 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__x);&#32;}
547 
562 &#32;&#32;&#32;&#32;&#32;&#32;iterator
563 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
564 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__first,&#32;__last);&#32;}
565 
572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
573 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;<emphasis role="keyword">noexcept</emphasis>
574 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.clear();&#32;}
575 
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
586 &#32;&#32;&#32;&#32;&#32;&#32;swap(unordered_set&amp;&#32;__x)
587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_M_h.swap(__x._M_h))&#32;)
588 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.swap(__x._M_h);&#32;}
589 
590 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
592 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>std::_Hash_merge_helper;
593 
594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
595 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
596 &#32;&#32;&#32;&#32;merge(unordered_set&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
597 &#32;&#32;&#32;&#32;{
598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Hash_merge_helper&lt;unordered_set,&#32;_H2,&#32;_P2&gt;;
599 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
600 &#32;&#32;&#32;&#32;}
601 
602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
603 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
604 &#32;&#32;&#32;&#32;merge(unordered_set&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
605 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
606 
607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
608 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
609 &#32;&#32;&#32;&#32;merge(unordered_multiset&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
610 &#32;&#32;&#32;&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Hash_merge_helper&lt;unordered_set,&#32;_H2,&#32;_P2&gt;;
612 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
613 &#32;&#32;&#32;&#32;}
614 
615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
616 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
617 &#32;&#32;&#32;&#32;merge(unordered_multiset&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
618 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
619 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
620 
621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers.</emphasis>
622 
625 &#32;&#32;&#32;&#32;&#32;&#32;hasher
626 &#32;&#32;&#32;&#32;&#32;&#32;hash_function()<emphasis role="keyword">&#32;const</emphasis>
627 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.hash_function();&#32;}
628 
631 &#32;&#32;&#32;&#32;&#32;&#32;key_equal
632 &#32;&#32;&#32;&#32;&#32;&#32;key_eq()<emphasis role="keyword">&#32;const</emphasis>
633 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.key_eq();&#32;}
634 
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lookup.</emphasis>
636 
638 
649 &#32;&#32;&#32;&#32;&#32;&#32;iterator
650 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
651 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
652 
653 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
655 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
656 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)
657 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__k))
658 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__k);&#32;}
659 <emphasis role="preprocessor">#endif</emphasis>
660 
661 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
662 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
663 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
664 
665 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
667 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
668 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>
669 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__k))
670 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__k);&#32;}
671 <emphasis role="preprocessor">#endif</emphasis>
673 
675 
684 &#32;&#32;&#32;&#32;&#32;&#32;size_type
685 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
686 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.count(__x);&#32;}
687 
688 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
690 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
691 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>
692 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_count_tr(__k))
693 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_count_tr(__k);&#32;}
694 <emphasis role="preprocessor">#endif</emphasis>
696 
697 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
699 
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
705 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
706 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x)&#32;!=&#32;_M_h.end();&#32;}
707 
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
710 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>
711 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__k),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
712 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__k)&#32;!=&#32;_M_h.end();&#32;}
714 <emphasis role="preprocessor">#endif</emphasis>
715 
717 
725 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
726 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
727 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
728 
729 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
731 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
732 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)
733 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__k))
734 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__k);&#32;}
735 <emphasis role="preprocessor">#endif</emphasis>
736 
737 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
738 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
739 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
740 
741 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
743 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
744 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__k)&#32;<emphasis role="keyword">const</emphasis>
745 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__k))
746 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__k);&#32;}
747 <emphasis role="preprocessor">#endif</emphasis>
749 
750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bucket&#32;interface.</emphasis>
751 
753 &#32;&#32;&#32;&#32;&#32;&#32;size_type
754 &#32;&#32;&#32;&#32;&#32;&#32;bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
755 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_count();&#32;}
756 
758 &#32;&#32;&#32;&#32;&#32;&#32;size_type
759 &#32;&#32;&#32;&#32;&#32;&#32;max_bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
760 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_bucket_count();&#32;}
761 
762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
763 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;number&#32;of&#32;elements&#32;in&#32;a&#32;given&#32;bucket.</emphasis>
764 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__n&#32;&#32;A&#32;bucket&#32;index.</emphasis>
765 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;number&#32;of&#32;elements&#32;in&#32;the&#32;bucket.</emphasis>
766 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
767 &#32;&#32;&#32;&#32;&#32;&#32;size_type
768 &#32;&#32;&#32;&#32;&#32;&#32;bucket_size(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
769 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_size(__n);&#32;}
770 
771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
772 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;bucket&#32;index&#32;of&#32;a&#32;given&#32;element.</emphasis>
773 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__key&#32;&#32;A&#32;key&#32;instance.</emphasis>
774 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;key&#32;bucket&#32;index.</emphasis>
775 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
776 &#32;&#32;&#32;&#32;&#32;&#32;size_type
777 &#32;&#32;&#32;&#32;&#32;&#32;bucket(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
778 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket(__key);&#32;}
779 
781 
787 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
788 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)
789 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
790 
791 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
792 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
793 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
794 
795 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
796 &#32;&#32;&#32;&#32;&#32;&#32;cbegin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
797 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cbegin(__n);&#32;}
799 
801 
807 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
808 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)
809 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
810 
811 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
812 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
813 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
814 
815 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
816 &#32;&#32;&#32;&#32;&#32;&#32;cend(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
817 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cend(__n);&#32;}
819 
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hash&#32;policy.</emphasis>
821 
823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
824 &#32;&#32;&#32;&#32;&#32;&#32;load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
825 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.load_factor();&#32;}
826 
829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
830 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
831 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_load_factor();&#32;}
832 
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
838 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor(<emphasis role="keywordtype">float</emphasis>&#32;__z)
839 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.max_load_factor(__z);&#32;}
840 
848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
849 &#32;&#32;&#32;&#32;&#32;&#32;rehash(size_type&#32;__n)
850 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.rehash(__n);&#32;}
851 
859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
860 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__n)
861 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.reserve(__n);&#32;}
862 
863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred1,
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc1&gt;
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_set&lt;_Value1,&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;,
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_set&lt;_Value1,&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;);
868 &#32;&#32;&#32;&#32;};
869 
870 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
871 
872 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
883 &#32;&#32;&#32;&#32;unordered_set(_InputIterator,&#32;_InputIterator,
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_set&lt;int&gt;::size_type&#32;=&#32;{},
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),&#32;_Allocator&#32;=&#32;_Allocator())
886 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_set&lt;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Pred,&#32;_Allocator&gt;;
888 
889 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Tp&gt;,
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Tp&gt;,
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_Tp&gt;,
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
895 &#32;&#32;&#32;&#32;unordered_set(initializer_list&lt;_Tp&gt;,
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_set&lt;int&gt;::size_type&#32;=&#32;{},
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),&#32;_Allocator&#32;=&#32;_Allocator())
898 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_set&lt;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Allocator&gt;;
899 
900 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
903 &#32;&#32;&#32;&#32;unordered_set(_InputIterator,&#32;_InputIterator,
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_set&lt;int&gt;::size_type,&#32;_Allocator)
905 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_set&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
911 
912 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
916 &#32;&#32;&#32;&#32;unordered_set(_InputIterator,&#32;_InputIterator,
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_set&lt;int&gt;::size_type,
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Allocator)
919 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_set&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
924 
925 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
927 &#32;&#32;&#32;&#32;unordered_set(initializer_list&lt;_Tp&gt;,
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_set&lt;int&gt;::size_type,&#32;_Allocator)
929 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_set&lt;_Tp,&#32;hash&lt;_Tp&gt;,&#32;equal_to&lt;_Tp&gt;,&#32;_Allocator&gt;;
930 
931 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
934 &#32;&#32;&#32;&#32;unordered_set(initializer_list&lt;_Tp&gt;,
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_set&lt;int&gt;::size_type,&#32;_Hash,&#32;_Allocator)
936 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_set&lt;_Tp,&#32;_Hash,&#32;equal_to&lt;_Tp&gt;,&#32;_Allocator&gt;;
937 
938 <emphasis role="preprocessor">#endif</emphasis>
939 
959 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Value&gt;,
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Value&gt;,
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;allocator&lt;_Value&gt;&gt;
963 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_multiset
964 &#32;&#32;&#32;&#32;{
965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__umset_hashtable&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&#32;&#32;_Hashtable;
966 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable&#32;_M_h;
967 
968 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typedefs:</emphasis>
972 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_type&#32;key_type;
973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::value_type&#32;&#32;&#32;value_type;
974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::hasher&#32;&#32;&#32;hasher;
975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_equal&#32;&#32;&#32;&#32;key_equal;
976 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::allocator_type&#32;allocator_type;
978 
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::pointer&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_pointer&#32;&#32;&#32;&#32;const_pointer;
983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_reference&#32;&#32;const_reference;
985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::iterator&#32;&#32;&#32;&#32;&#32;iterator;
986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_iterator&#32;&#32;&#32;const_iterator;
987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::local_iterator&#32;&#32;&#32;local_iterator;
988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_local_iterator&#32;const_local_iterator;
989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::difference_type&#32;&#32;difference_type;
992 
993 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
994 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::node_type;
995 <emphasis role="preprocessor">#endif</emphasis>
996 
997 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;construct/destroy/copy</emphasis>
998 
1000 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1001 
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1010 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(size_type&#32;__n,
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1014 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__n,&#32;__hf,&#32;__eql,&#32;__a)
1015 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1016 
1030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1031 &#32;&#32;&#32;&#32;unordered_multiset(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1036 &#32;&#32;&#32;&#32;:&#32;_M_h(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
1037 &#32;&#32;&#32;&#32;{&#32;}
1038 
1040 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1041 
1043 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(unordered_multiset&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1044 
1056 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(initializer_list&lt;value_type&gt;&#32;__l,
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1061 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__l,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
1062 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1063 
1065 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&amp;
1066 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1067 
1069 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&amp;
1070 &#32;&#32;&#32;&#32;&#32;&#32;operator=(unordered_multiset&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1071 
1076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1077 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1078 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__a)
1079 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1080 
1081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1082 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;Copy&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
1083 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__uset&#32;&#32;Input&#32;%unordered_multiset&#32;to&#32;copy.</emphasis>
1084 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__a&#32;&#32;An&#32;allocator&#32;object.</emphasis>
1085 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1086 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&amp;&#32;__umset,
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1088 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__umset._M_h,&#32;__a)
1089 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1090 
1091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1092 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Move&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
1093 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__umset&#32;&#32;Input&#32;%unordered_multiset&#32;to&#32;move.</emphasis>
1094 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__a&#32;&#32;An&#32;allocator&#32;object.</emphasis>
1095 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1096 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(unordered_multiset&amp;&amp;&#32;__umset,
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1098 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_Hashtable(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__umset._M_h),&#32;__a))&#32;)
1099 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__umset._M_h),&#32;__a)
1100 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1101 
1102 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1103 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multiset(__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
1104 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1105 
1106 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1108 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multiset(__n,&#32;__hf,&#32;key_equal(),&#32;__a)
1109 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1110 
1111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1112 &#32;&#32;&#32;&#32;unordered_multiset(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1115 &#32;&#32;&#32;&#32;:&#32;unordered_multiset(__first,&#32;__last,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
1116 &#32;&#32;&#32;&#32;{&#32;}
1117 
1118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1119 &#32;&#32;&#32;&#32;unordered_multiset(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1122 &#32;&#32;&#32;&#32;:&#32;unordered_multiset(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
1123 &#32;&#32;&#32;&#32;{&#32;}
1124 
1125 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(initializer_list&lt;value_type&gt;&#32;__l,
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1128 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multiset(__l,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
1129 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1130 
1131 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(initializer_list&lt;value_type&gt;&#32;__l,
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1134 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multiset(__l,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
1135 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1136 
1148 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&amp;
1149 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
1150 &#32;&#32;&#32;&#32;&#32;&#32;{
1151 &#32;&#32;&#32;&#32;_M_h&#32;=&#32;__l;
1152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1153 &#32;&#32;&#32;&#32;&#32;&#32;}
1154 
1156 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
1157 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1158 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.get_allocator();&#32;}
1159 
1160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;and&#32;capacity:</emphasis>
1161 
1163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
1164 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1165 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.empty();&#32;}
1166 
1168 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1170 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.size();&#32;}
1171 
1173 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1174 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1175 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_size();&#32;}
1176 
1177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators.</emphasis>
1178 
1180 
1184 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1185 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">noexcept</emphasis>
1186 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
1187 
1188 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1189 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1190 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
1192 
1194 
1198 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1199 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
1200 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
1201 
1202 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1203 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1204 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
1206 
1211 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1212 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1213 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
1214 
1219 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1220 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1221 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
1222 
1223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers.</emphasis>
1224 
1232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1233 &#32;&#32;&#32;&#32;iterator
1234 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
1235 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace(std::forward&lt;_Args&gt;(__args)...);&#32;}
1236 
1254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1255 &#32;&#32;&#32;&#32;iterator
1256 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
1257 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace_hint(__pos,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
1258 
1260 
1267 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1268 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1269 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__x);&#32;}
1270 
1271 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1272 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
1273 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1275 
1277 
1293 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1294 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1295 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;__x);&#32;}
1296 
1297 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1298 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;value_type&amp;&amp;&#32;__x)
1299 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1301 
1310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1311 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1312 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1313 &#32;&#32;&#32;&#32;{&#32;_M_h.insert(__first,&#32;__last);&#32;}
1314 
1322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1323 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
1324 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.insert(__l);&#32;}
1325 
1326 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1328 &#32;&#32;&#32;&#32;&#32;&#32;node_type
1329 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
1330 &#32;&#32;&#32;&#32;&#32;&#32;{
1331 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__pos);
1333 &#32;&#32;&#32;&#32;&#32;&#32;}
1334 
1336 &#32;&#32;&#32;&#32;&#32;&#32;node_type
1337 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
1338 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__key);&#32;}
1339 
1341 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1342 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
1343 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node_multi(cend(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
1344 
1346 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1347 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
1348 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node_multi(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
1349 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1350 
1352 
1366 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1367 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1368 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
1369 
1370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;2059.</emphasis>
1371 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1372 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1373 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
1375 
1376 
1389 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1390 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1391 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__x);&#32;}
1392 
1409 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1410 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1411 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__first,&#32;__last);&#32;}
1412 
1420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1421 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;<emphasis role="keyword">noexcept</emphasis>
1422 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.clear();&#32;}
1423 
1433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1434 &#32;&#32;&#32;&#32;&#32;&#32;swap(unordered_multiset&amp;&#32;__x)
1435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_M_h.swap(__x._M_h))&#32;)
1436 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.swap(__x._M_h);&#32;}
1437 
1438 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1440 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>std::_Hash_merge_helper;
1441 
1442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1443 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1444 &#32;&#32;&#32;&#32;merge(unordered_multiset&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
1445 &#32;&#32;&#32;&#32;{
1446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Hash_merge_helper&lt;unordered_multiset,&#32;_H2,&#32;_P2&gt;;
1448 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
1449 &#32;&#32;&#32;&#32;}
1450 
1451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1452 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1453 &#32;&#32;&#32;&#32;merge(unordered_multiset&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
1454 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
1455 
1456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1457 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1458 &#32;&#32;&#32;&#32;merge(unordered_set&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
1459 &#32;&#32;&#32;&#32;{
1460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Hash_merge_helper&lt;unordered_multiset,&#32;_H2,&#32;_P2&gt;;
1462 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
1463 &#32;&#32;&#32;&#32;}
1464 
1465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1466 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1467 &#32;&#32;&#32;&#32;merge(unordered_set&lt;_Value,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
1468 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
1469 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1470 
1471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers.</emphasis>
1472 
1475 &#32;&#32;&#32;&#32;&#32;&#32;hasher
1476 &#32;&#32;&#32;&#32;&#32;&#32;hash_function()<emphasis role="keyword">&#32;const</emphasis>
1477 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.hash_function();&#32;}
1478 
1481 &#32;&#32;&#32;&#32;&#32;&#32;key_equal
1482 &#32;&#32;&#32;&#32;&#32;&#32;key_eq()<emphasis role="keyword">&#32;const</emphasis>
1483 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.key_eq();&#32;}
1484 
1485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lookup.</emphasis>
1486 
1488 
1499 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1500 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1501 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
1502 
1503 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1505 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1506 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
1507 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x))
1508 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x);&#32;}
1509 <emphasis role="preprocessor">#endif</emphasis>
1510 
1511 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1512 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1513 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
1514 
1515 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1517 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1518 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1519 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x))
1520 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x);&#32;}
1521 <emphasis role="preprocessor">#endif</emphasis>
1523 
1525 
1530 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1531 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1532 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.count(__x);&#32;}
1533 
1534 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1536 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1537 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_count_tr(__x))
1538 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_count_tr(__x);&#32;}
1539 <emphasis role="preprocessor">#endif</emphasis>
1541 
1542 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1544 
1549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1550 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1551 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x)&#32;!=&#32;_M_h.end();&#32;}
1552 
1553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1554 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1555 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1556 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
1557 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x)&#32;!=&#32;_M_h.end();&#32;}
1559 <emphasis role="preprocessor">#endif</emphasis>
1560 
1562 
1568 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
1569 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1570 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
1571 
1572 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1574 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1575 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
1576 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__x))
1577 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__x);&#32;}
1578 <emphasis role="preprocessor">#endif</emphasis>
1579 
1580 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
1581 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1582 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
1583 
1584 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1586 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1587 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1588 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__x))
1589 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__x);&#32;}
1590 <emphasis role="preprocessor">#endif</emphasis>
1592 
1593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bucket&#32;interface.</emphasis>
1594 
1596 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1597 &#32;&#32;&#32;&#32;&#32;&#32;bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1598 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_count();&#32;}
1599 
1601 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1602 &#32;&#32;&#32;&#32;&#32;&#32;max_bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1603 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_bucket_count();&#32;}
1604 
1605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1606 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;number&#32;of&#32;elements&#32;in&#32;a&#32;given&#32;bucket.</emphasis>
1607 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__n&#32;&#32;A&#32;bucket&#32;index.</emphasis>
1608 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;number&#32;of&#32;elements&#32;in&#32;the&#32;bucket.</emphasis>
1609 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1610 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1611 &#32;&#32;&#32;&#32;&#32;&#32;bucket_size(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1612 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_size(__n);&#32;}
1613 
1614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1615 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;bucket&#32;index&#32;of&#32;a&#32;given&#32;element.</emphasis>
1616 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__key&#32;&#32;A&#32;key&#32;instance.</emphasis>
1617 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;key&#32;bucket&#32;index.</emphasis>
1618 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1619 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1620 &#32;&#32;&#32;&#32;&#32;&#32;bucket(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
1621 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket(__key);&#32;}
1622 
1624 
1630 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
1631 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)
1632 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
1633 
1634 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1635 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1636 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
1637 
1638 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1639 &#32;&#32;&#32;&#32;&#32;&#32;cbegin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1640 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cbegin(__n);&#32;}
1642 
1644 
1650 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
1651 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)
1652 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
1653 
1654 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1655 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1656 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
1657 
1658 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1659 &#32;&#32;&#32;&#32;&#32;&#32;cend(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1660 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cend(__n);&#32;}
1662 
1663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hash&#32;policy.</emphasis>
1664 
1666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
1667 &#32;&#32;&#32;&#32;&#32;&#32;load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1668 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.load_factor();&#32;}
1669 
1672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
1673 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1674 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_load_factor();&#32;}
1675 
1680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1681 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor(<emphasis role="keywordtype">float</emphasis>&#32;__z)
1682 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.max_load_factor(__z);&#32;}
1683 
1691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1692 &#32;&#32;&#32;&#32;&#32;&#32;rehash(size_type&#32;__n)
1693 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.rehash(__n);&#32;}
1694 
1702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1703 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__n)
1704 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.reserve(__n);&#32;}
1705 
1706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred1,
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc1&gt;
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1709 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&lt;_Value1,&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;,
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&lt;_Value1,&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;);
1711 &#32;&#32;&#32;&#32;};
1712 
1713 
1714 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
1715 
1716 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
1721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=
1722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1727 &#32;&#32;&#32;&#32;unordered_multiset(_InputIterator,&#32;_InputIterator,
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;int&gt;::size_type&#32;=&#32;{},
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&#32;=&#32;_Allocator())
1731 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multiset&lt;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Pred,&#32;_Allocator&gt;;
1733 
1734 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Tp&gt;,
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Tp&gt;,
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_Tp&gt;,
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1740 &#32;&#32;&#32;&#32;unordered_multiset(initializer_list&lt;_Tp&gt;,
1741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;int&gt;::size_type&#32;=&#32;{},
1742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),
1743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&#32;=&#32;_Allocator())
1744 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multiset&lt;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Allocator&gt;;
1745 
1746 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1749 &#32;&#32;&#32;&#32;unordered_multiset(_InputIterator,&#32;_InputIterator,
1750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;int&gt;::size_type,&#32;_Allocator)
1751 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multiset&lt;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;<emphasis role="keyword">typename</emphasis>
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;<emphasis role="keyword">typename</emphasis>
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
1757 
1758 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1762 &#32;&#32;&#32;&#32;unordered_multiset(_InputIterator,&#32;_InputIterator,
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;int&gt;::size_type,
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Allocator)
1765 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multiset&lt;<emphasis role="keyword">typename</emphasis>
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;,
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
1772 
1773 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1775 &#32;&#32;&#32;&#32;unordered_multiset(initializer_list&lt;_Tp&gt;,
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;int&gt;::size_type,&#32;_Allocator)
1777 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multiset&lt;_Tp,&#32;hash&lt;_Tp&gt;,&#32;equal_to&lt;_Tp&gt;,&#32;_Allocator&gt;;
1778 
1779 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1782 &#32;&#32;&#32;&#32;unordered_multiset(initializer_list&lt;_Tp&gt;,
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;int&gt;::size_type,&#32;_Hash,&#32;_Allocator)
1784 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multiset&lt;_Tp,&#32;_Hash,&#32;equal_to&lt;_Tp&gt;,&#32;_Allocator&gt;;
1785 
1786 <emphasis role="preprocessor">#endif</emphasis>
1787 
1788 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
1789 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1790 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
1791 &#32;&#32;&#32;&#32;&#32;unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
1792 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
1793 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
1794 
1795 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
1796 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1797 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
1798 &#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
1799 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
1800 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
1801 
1802 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
1803 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1804 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
1806 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_h._M_equal(__y._M_h);&#32;}
1807 
1808 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
1809 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
1810 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1811 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
1813 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1814 <emphasis role="preprocessor">#endif</emphasis>
1815 
1816 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
1817 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1818 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
1820 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_h._M_equal(__y._M_h);&#32;}
1821 
1822 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
1823 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
1824 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1825 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
1827 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1828 <emphasis role="preprocessor">#endif</emphasis>
1829 
1830 _GLIBCXX_END_NAMESPACE_CONTAINER
1831 
1832 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1833 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::unordered_set&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;sets.</emphasis>
1834 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq2&gt;
1836 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_merge_helper&lt;
1837 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::unordered_set&lt;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;,&#32;_Hash2,&#32;_Eq2&gt;
1838 &#32;&#32;&#32;&#32;{
1839 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
1841 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_set&#32;=&#32;_GLIBCXX_STD_C::unordered_set&lt;_Tp...&gt;;
1842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
1843 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_multiset&#32;=&#32;_GLIBCXX_STD_C::unordered_multiset&lt;_Tp...&gt;;
1844 
1845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;unordered_set&lt;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;;
1846 
1847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1848 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_set&lt;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__set)
1849 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_h;&#32;}
1850 
1851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1852 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_multiset&lt;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__set)
1853 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_h;&#32;}
1854 &#32;&#32;&#32;&#32;};
1855 
1856 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::unordered_multiset&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;sets.</emphasis>
1857 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq2&gt;
1859 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_merge_helper&lt;
1860 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::unordered_multiset&lt;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;,
1861 &#32;&#32;&#32;&#32;&#32;&#32;_Hash2,&#32;_Eq2&gt;
1862 &#32;&#32;&#32;&#32;{
1863 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
1865 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_set&#32;=&#32;_GLIBCXX_STD_C::unordered_set&lt;_Tp...&gt;;
1866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
1867 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_multiset&#32;=&#32;_GLIBCXX_STD_C::unordered_multiset&lt;_Tp...&gt;;
1868 
1869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;unordered_multiset&lt;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;;
1870 
1871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1872 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_set&lt;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__set)
1873 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_h;&#32;}
1874 
1875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
1876 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_multiset&lt;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__set)
1877 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set._M_h;&#32;}
1878 &#32;&#32;&#32;&#32;};
1879 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1880 
1881 _GLIBCXX_END_NAMESPACE_VERSION
1882 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1883 
1884 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_UNORDERED_SET_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
