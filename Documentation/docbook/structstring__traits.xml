<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structstring__traits" xml:lang="en-US">
<title>string_traits&lt; T &gt; Struct Template Reference</title>
<indexterm><primary>string_traits&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;toml.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_structstring__traits_1acb511fff6377c844357fb14c998d4cf4">native_type</link> = std::string</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits_1a92f2ca5b8bb6e573abf39c8ce5efb292">is_native</link> = std::is_same_v&lt;T, <link linkend="_structstring__traits_1acb511fff6377c844357fb14c998d4cf4">native_type</link>&gt;</para>
</listitem>
            <listitem><para>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits_1aa142eeee0dde6e84f42a9fb90d3b9f3c">is_losslessly_convertible_to_native</link> = <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></para>
</listitem>
            <listitem><para>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54">can_represent_native</link></para>
</listitem>
            <listitem><para>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits_1ab9b6819ab5edb3cb5c8ae02589a0e762">can_partially_represent_native</link> = <link linkend="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54">can_represent_native</link></para>
</listitem>
            <listitem><para>static constexpr auto <link linkend="_structstring__traits_1a6cdd5fcda11af6cd8a04b178ae286a12">type</link> = node_type::string</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_structstring__traits_1acb511fff6377c844357fb14c998d4cf4"/><section>
    <title>native_type</title>
<indexterm><primary>native_type</primary><secondary>string_traits&lt; T &gt;</secondary></indexterm>
<indexterm><primary>string_traits&lt; T &gt;</primary><secondary>native_type</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_structstring__traits">string_traits</link>&lt; T &gt;::native_type =  std::string</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_structstring__traits_1ab9b6819ab5edb3cb5c8ae02589a0e762"/><section>
    <title>can_partially_represent_native</title>
<indexterm><primary>can_partially_represent_native</primary><secondary>string_traits&lt; T &gt;</secondary></indexterm>
<indexterm><primary>string_traits&lt; T &gt;</primary><secondary>can_partially_represent_native</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits">string_traits</link>&lt; T &gt;::can_partially_represent_native = <link linkend="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54">can_represent_native</link><computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54"/><section>
    <title>can_represent_native</title>
<indexterm><primary>can_represent_native</primary><secondary>string_traits&lt; T &gt;</secondary></indexterm>
<indexterm><primary>string_traits&lt; T &gt;</primary><secondary>can_represent_native</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits">string_traits</link>&lt; T &gt;::can_represent_native<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_array_v&lt;T&gt;&#32;&amp;&amp;&#32;(!std::is_pointer_v&lt;T&gt;&#32;||&#32;std::is_const_v&lt;std::remove_pointer_t&lt;T&gt;&gt;)
</programlisting></section>
<anchor xml:id="_structstring__traits_1aa142eeee0dde6e84f42a9fb90d3b9f3c"/><section>
    <title>is_losslessly_convertible_to_native</title>
<indexterm><primary>is_losslessly_convertible_to_native</primary><secondary>string_traits&lt; T &gt;</secondary></indexterm>
<indexterm><primary>string_traits&lt; T &gt;</primary><secondary>is_losslessly_convertible_to_native</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits">string_traits</link>&lt; T &gt;::is_losslessly_convertible_to_native = <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link><computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structstring__traits_1a92f2ca5b8bb6e573abf39c8ce5efb292"/><section>
    <title>is_native</title>
<indexterm><primary>is_native</primary><secondary>string_traits&lt; T &gt;</secondary></indexterm>
<indexterm><primary>string_traits&lt; T &gt;</primary><secondary>is_native</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structstring__traits">string_traits</link>&lt; T &gt;::is_native = std::is_same_v&lt;T, <link linkend="_structstring__traits_1acb511fff6377c844357fb14c998d4cf4">native_type</link>&gt;<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structstring__traits_1a6cdd5fcda11af6cd8a04b178ae286a12"/><section>
    <title>type</title>
<indexterm><primary>type</primary><secondary>string_traits&lt; T &gt;</secondary></indexterm>
<indexterm><primary>string_traits&lt; T &gt;</primary><secondary>type</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_structstring__traits">string_traits</link>&lt; T &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> = node_type::string<computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<para>
The documentation for this struct was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
