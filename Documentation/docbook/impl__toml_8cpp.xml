<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_impl__toml_8cpp" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/tests/impl_toml.cpp File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/tests/impl_toml.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;settings.h&quot;<?linebreak?>#include &quot;../include/toml++/toml.h&quot;<?linebreak?></programlisting>Include dependency graph for impl_toml.cpp:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="impl__toml_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacetoml">toml</link></para>

<para>The root namespace for all toml++ functions and types. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1a27ee69835a1ddff9dbaf3015b4b08a11">TOML_IMPLEMENTATION</link></para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1aec47ec227bd970072d0d17c2a22dacb1">CHECK_NODE_TYPE_MAPPING</link>(T,  expected)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1ad4eb8031653c1b100307e5991fe85c34">CHECK_CAN_REPRESENT_NATIVE</link>(T,  expected)&#160;&#160;&#160;	static_assert((impl::value_traits&lt;T&gt;<link linkend="_toml_8hpp_1a0b9e60ca26c89aac055ec4e01170cb78">::is_native</link> || impl::value_traits&lt;T&gt;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">::can_represent_native</link>) == expected)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1a85d83567069d38ec5f2ee38ba7aa5bc4">CHECK_VALUE_EXACT</link>(T,  expected)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1a3b216e5466622d374ef5885209e262e8">CHECK_VALUE_OR</link>(T,  expected)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1a032b806947df2d4dd9c1914bb95adf0b">CHECK_INSERTED_AS</link>(T,  expected)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1ab9a2029dba8d944c60b95fdd3c2aed51">CHECK_NODE_REF_TYPE</link>(T)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1a3968af8106c3469214e523bc142286dd">CHECK_NODE_VIEW_REF_TYPE</link>(T)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="_impl__toml_8cpp_1a7a2a6d6752626f4f33c0dcff0755727b">CHECK_CONST_NODE_VIEW_REF_TYPE</link>(T)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacetoml_1a5050d9b8d69e1a096f7725831899f304">toml::CHECK_NODE_TYPE_MAPPING</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>, node_type::integer)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a0762ccdfe128777f125bcb54027c0b08">toml::CHECK_NODE_TYPE_MAPPING</link> (double, node_type::floating_point)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a2726ae5f2fe5616e3176cb284b4a83d8">toml::CHECK_NODE_TYPE_MAPPING</link> (std::string, node_type::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3fbc6a5d51cd6118bc3b289b03d539d5">toml::CHECK_NODE_TYPE_MAPPING</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, node_type::boolean)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a561187faf35b6a0d00b9cc201044878a">toml::CHECK_NODE_TYPE_MAPPING</link> (toml::date, node_type::date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7fb59e4e1aa2d580171937e73d392612">toml::CHECK_NODE_TYPE_MAPPING</link> (toml::time, node_type::time)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a4e65e65ecf1c2c1611a5e131b8e3d8bc">toml::CHECK_NODE_TYPE_MAPPING</link> (toml::date_time, node_type::date_time)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a67b08e5bd43b4a6d4cb36a8fcff105bc">toml::CHECK_NODE_TYPE_MAPPING</link> (toml::array, node_type::array)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a0efcda5a39b6e154432b77a68d750e48">toml::CHECK_NODE_TYPE_MAPPING</link> (toml::table, node_type::table)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7af1aef382d7af90c8351fd3366bf83b">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="_structtime">time</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a8a066a3143ad06f5bc262c90ea1bf03c">toml::CHECK_CAN_REPRESENT_NATIVE</link> (date, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a637729256e70ceb0219815ee849fb824">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="_structdate__time">date_time</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1acfd5909c71431d677e09614a92e8f1c8">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a2b633ba37f0b66da91eaa37c8adffddf">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aef44329758059c91c76d334e8fc09700">int8_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7a3aa9b3d57c5cb6128f18190fc5cbb0">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a269259c924dce846340ddbb810db2e3c">int16_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a4f30aa6798b4156c1859bf79f63c578a">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ad6c92483b6c6a9c972d3fd7a828c308a">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aab8aaca57569e097f4f5e8b3edc2a624">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a04ea7a05a8fc58168f6555bdfb985e51">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ab11d393e89e89ed01d664210f240990e">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa71e8ae9176bedad025e25ea92745464">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a64e9dcfb9bee2fdc16b1bf4b49ed2ae4">toml::CHECK_CAN_REPRESENT_NATIVE</link> (float, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3f274584ee8645ff15a8ccb4215512c7">toml::CHECK_CAN_REPRESENT_NATIVE</link> (double, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a43f5f1586224411473ae26edec27b349">toml::CHECK_CAN_REPRESENT_NATIVE</link> (char *, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3dbbbab9f4cb839fd8a89eeededdb9ba">toml::CHECK_CAN_REPRESENT_NATIVE</link> (char[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a9212104e0683c4c61b195ecef4465ddd">toml::CHECK_CAN_REPRESENT_NATIVE</link> (char(&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a5a381f7784d49542b1ff8430db81c013">toml::CHECK_CAN_REPRESENT_NATIVE</link> (const char(&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a0baa6c510083fe1642714881c370db4f">toml::CHECK_CAN_REPRESENT_NATIVE</link> (char(&amp;&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae41bb7e49f363f92798ab8427880a797">toml::CHECK_CAN_REPRESENT_NATIVE</link> (const char(&amp;&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a23389335fe59299f06af21de01d3bafb">toml::CHECK_CAN_REPRESENT_NATIVE</link> (const char *, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a8ca2620a58c7842c1177d809373717b0">toml::CHECK_CAN_REPRESENT_NATIVE</link> (std::string, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a92a7485ee099479faaa137f1344c07fa">toml::CHECK_CAN_REPRESENT_NATIVE</link> (std::string_view, <link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3f044f33717d3922c35c55734b0e429e">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a9eccc67c6efe00c312281e9a8c7e3c2e">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1acae14c7330d8bec34fcbc87950758b54">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ad8191609cc5a2579388df47e003b887f">toml::CHECK_CAN_REPRESENT_NATIVE</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a27cf8eaed9ed222b28cb0bc1f2c79fdf">toml::CHECK_CAN_REPRESENT_NATIVE</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae5db3f493321ce4b58982225b79d233c">toml::CHECK_CAN_REPRESENT_NATIVE</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;&amp;)[2], <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a61636fb2373711033548f867f94ce081">toml::CHECK_CAN_REPRESENT_NATIVE</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa1c23a2c6cfc5c74dc033e5a5e41ed09">toml::CHECK_CAN_REPRESENT_NATIVE</link> (std::wstring, !!<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ab2628e65ba62b1e8f48418f8849e13af">toml::CHECK_CAN_REPRESENT_NATIVE</link> (std::wstring_view, <link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a570a94579d4e4d0d42fdae3ba2752b21">toml::CHECK_VALUE_EXACT</link> (<link linkend="_structtime">time</link>, <link linkend="_structtime">time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a0d7e2e41e4d6d55e08caa3b1b149e495">toml::CHECK_VALUE_EXACT</link> (date, date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7809c890eb91479eea43f092e45cf68c">toml::CHECK_VALUE_EXACT</link> (<link linkend="_structdate__time">date_time</link>, <link linkend="_structdate__time">date_time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1add455147ebb553de71f8abaf7aa25556">toml::CHECK_VALUE_EXACT</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a1e3f690fc3f545870e270f14cdc634c4">toml::CHECK_VALUE_EXACT</link> (double, double)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a70ab53e8aae1f31d3057c29572d30de3">toml::CHECK_VALUE_EXACT</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a68a476950310e5827a6b2e4b3dadcec0">toml::CHECK_VALUE_EXACT</link> (const char *, const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a5c1ff5c87c2d4fb28d87faf7a6117835">toml::CHECK_VALUE_EXACT</link> (std::string_view, std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a35d3358f8dbcda6652b7dfbad9e5faa4">toml::CHECK_VALUE_EXACT</link> (std::string, std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3c33ce050d59ea504126efacc469bf1a">toml::CHECK_VALUE_OR</link> (<link linkend="_structtime">time</link>, <link linkend="_structtime">time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a8dc86a72811c9f2ec49768127368e2df">toml::CHECK_VALUE_OR</link> (<link linkend="_structtime">time</link> &amp;, <link linkend="_structtime">time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a8311a7f7ae29e03fd04ca1d390688137">toml::CHECK_VALUE_OR</link> (<link linkend="_structtime">time</link> &amp;&amp;, <link linkend="_structtime">time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a0680c0219d01bb1b285ce2e9984c0f1f">toml::CHECK_VALUE_OR</link> (date, date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1adf17260d2108319440b2e5acc5a4c00d">toml::CHECK_VALUE_OR</link> (date &amp;, date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a28492a61f5d707e2b4140da0738123b7">toml::CHECK_VALUE_OR</link> (date &amp;&amp;, date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a32e05986e50beccd3c317d1411375223">toml::CHECK_VALUE_OR</link> (<link linkend="_structdate__time">date_time</link>, <link linkend="_structdate__time">date_time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a2168fec2ebae9c933ac32f7f92148b1e">toml::CHECK_VALUE_OR</link> (<link linkend="_structdate__time">date_time</link> &amp;, <link linkend="_structdate__time">date_time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1abefb06947c171ab06bf2c473458b9ca6">toml::CHECK_VALUE_OR</link> (<link linkend="_structdate__time">date_time</link> &amp;&amp;, <link linkend="_structdate__time">date_time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a83238ff8c122889a799f7eac856e87a0">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a39c6b9547396cf4d2404fa3b91406391">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &amp;, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a12076a4af9b89821434a64788afb8194">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &amp;&amp;, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a1866ce5ddf3576c9ca8f88c11d71de57">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link>, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a8b1659dd8ad3eb52557b0ee54f6bbd0d">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link> &amp;, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a96f2212d43a1e7c277f07919f3082240">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link> &amp;&amp;, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3f749f266f081c800cbeb9d2c0363f47">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ad49f3aa4554a465c0b427adc96b18950">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &amp;, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a90fa908c52b3e35282dcb14abd1f0c99">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &amp;&amp;, <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3cce4ddd78e33ef8c2ae95b718987423">toml::CHECK_VALUE_OR</link> (float, float)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7e7e9393522c4127afea5634cd16d15d">toml::CHECK_VALUE_OR</link> (float &amp;, float)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a944a50ba4bd352050310e3e36c30b329">toml::CHECK_VALUE_OR</link> (float &amp;&amp;, float)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aba2b6c98a728975377e13af2adfada80">toml::CHECK_VALUE_OR</link> (double, double)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a57b8689a817a896c30eacb1febb48c4e">toml::CHECK_VALUE_OR</link> (double &amp;, double)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a734f563aab74b54975c2aa8e6736257c">toml::CHECK_VALUE_OR</link> (double &amp;&amp;, double)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a690e9a203d16f876386dc56a1c07048f">toml::CHECK_VALUE_OR</link> (char *, const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a16ba7cded34147c3f9d28bd39d0d3fd6">toml::CHECK_VALUE_OR</link> (char *&amp;, const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a6782e0d200a9f8e7ab9020e3e7ac806f">toml::CHECK_VALUE_OR</link> (char *&amp;&amp;, const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa863de42e74c58cd3b25d21e810b1970">toml::CHECK_VALUE_OR</link> (char[2], const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ac1dcb50dccc1167bf3194614b45b8ba9">toml::CHECK_VALUE_OR</link> (char(&amp;)[2], const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1acc407f0e2e2cafee599dbd5cfc313af1">toml::CHECK_VALUE_OR</link> (char(&amp;&amp;)[2], const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aca710982f3db59398fdf980fe49cbc42">toml::CHECK_VALUE_OR</link> (const char *, const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aea25e674f2a9325c250bef894b6cf040">toml::CHECK_VALUE_OR</link> (const char *&amp;, const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a17b5727e72ac34b9d72d47206653a12b">toml::CHECK_VALUE_OR</link> (const char *&amp;&amp;, const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa77538ad74a6f64e7206c4198b1758d9">toml::CHECK_VALUE_OR</link> (const char(&amp;)[2], const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ab324d0ccc5a6b8e6c0165078ce67fbed">toml::CHECK_VALUE_OR</link> (const char(&amp;&amp;)[2], const char *)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1afb88905bd377dc0830be1201f5a7476e">toml::CHECK_VALUE_OR</link> (std::string_view, std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a1a78f8c119aa3e47871dde9400d25fa6">toml::CHECK_VALUE_OR</link> (std::string_view &amp;, std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a041ac9101601b0a72a9c3b6754cf4dc2">toml::CHECK_VALUE_OR</link> (std::string_view &amp;&amp;, std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a34534de6d9b9b76c0a8134bf91ffa568">toml::CHECK_VALUE_OR</link> (const std::string_view &amp;, std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa69614fee0c9331b2c3c8ead9ea45e77">toml::CHECK_VALUE_OR</link> (const std::string_view &amp;&amp;, std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a91e8cdd57a2e5489ddd4a9666dac50f4">toml::CHECK_VALUE_OR</link> (std::string, std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ad47334f13c6a285d082ca824086eebe0">toml::CHECK_VALUE_OR</link> (std::string &amp;, std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7a3daf5269b088e86c18edd0ae5339fe">toml::CHECK_VALUE_OR</link> (std::string &amp;&amp;, std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a3403b6cf499e4c26c3c03cac0932be2b">toml::CHECK_VALUE_OR</link> (const std::string &amp;, std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a979bcab6f17b028777c89cc8db0463f6">toml::CHECK_VALUE_OR</link> (const std::string &amp;&amp;, std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a93f9c47408c0e4d4f1eb6e0ab5d2ba71">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aea37fbe11f5892c834d14f6f6fe5c81c">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aeaacc3a63fd94fcaf9d89d883e3b3e19">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *&amp;&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aacbbf828eb20690ad00ac74200c46d06">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>[2], std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aabc7d1e3402d011fe9889089089f3661">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;)[2], std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a4dba4b986deda6cd71f7a5c495bca9c6">toml::CHECK_VALUE_OR</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;&amp;)[2], std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a136c8bc7a14d15f6c37b54f059a84a9e">toml::CHECK_VALUE_OR</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7d1d0d938c2a2bea83c19f29acd33434">toml::CHECK_VALUE_OR</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ad84b684786d2af1e021cbe0a49fe7739">toml::CHECK_VALUE_OR</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link> *&amp;&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa2dd2897d8a70a76e2d13c3ef41bffdf">toml::CHECK_VALUE_OR</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;)[2], std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1adcbeae8120306acb26e702a2f4b15460">toml::CHECK_VALUE_OR</link> (const <link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>(&amp;&amp;)[2], std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a7f98b181c1612fc013ee969dd1837602">toml::CHECK_VALUE_OR</link> (std::wstring_view, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1affbf2a6b0292184981190da8d26dd6eb">toml::CHECK_VALUE_OR</link> (std::wstring_view &amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ab9fddfc4186390bb3f572e34f724bcb1">toml::CHECK_VALUE_OR</link> (std::wstring_view &amp;&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae2062da15ce91c4920885755aaa74413">toml::CHECK_VALUE_OR</link> (const std::wstring_view &amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a9fb1602c44d61f9f4437fe6d5e47321e">toml::CHECK_VALUE_OR</link> (const std::wstring_view &amp;&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae2a8fc055384f0f9fd29ea27eb218a77">toml::CHECK_VALUE_OR</link> (std::wstring, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1abfab8bc8e1e97ce348efb8fb297a1427">toml::CHECK_VALUE_OR</link> (std::wstring &amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1adca05219495be75f868151215ecbb688">toml::CHECK_VALUE_OR</link> (std::wstring &amp;&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ac305b4004080788cee48f2d043a94c4f">toml::CHECK_VALUE_OR</link> (const std::wstring &amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ad349fe36c6eb0afd7522a7825457d900">toml::CHECK_VALUE_OR</link> (const std::wstring &amp;&amp;, std::wstring)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae0c45234356fac7c149329c5bbc5de6a">toml::CHECK_INSERTED_AS</link> (<link linkend="_classtable">table</link>, <link linkend="_classtable">table</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1af2a22998b4904c4bb330ce0972f15540">toml::CHECK_INSERTED_AS</link> (<link linkend="_classarray">array</link>, <link linkend="_classarray">array</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a66c2ec95e67206b14397d729fae6dcb8">toml::CHECK_INSERTED_AS</link> (node, node)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae70c29ab7e20de97b87c67bd9e45227c">toml::CHECK_INSERTED_AS</link> (<link linkend="_structtime">time</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="_structtime">time</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1adccf62eaf195c97422a800162568faa5">toml::CHECK_INSERTED_AS</link> (date, <link linkend="_classvalue">value</link>&lt; date &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aafe327a1493ef59b3de3e0fc0420413a">toml::CHECK_INSERTED_AS</link> (<link linkend="_structdate__time">date_time</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="_structdate__time">date_time</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae003c6e49b358875fd91f6e7e97b3fc5">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae1198b664b86247c5f69ffa354885974">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aef44329758059c91c76d334e8fc09700">int8_t</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1adcb56780e37d70a0c0df755a1f9e5347">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a269259c924dce846340ddbb810db2e3c">int16_t</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aaae296c32fe137db2359ceff9f43f7b5">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1af225655f204e5b8952b0aca517c4be4d">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a844f71ca8d5675a0dea391c97d0b1157">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a15e887bb2a15f79240cb627c473876f1">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aae4893a9186fa9779ed0566e162122a4">toml::CHECK_INSERTED_AS</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>, <link linkend="_classvalue">value</link>&lt; <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a16fe4f19c7d175b2375917f31ff8f42f">toml::CHECK_INSERTED_AS</link> (float, <link linkend="_classvalue">value</link>&lt; double &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a57e056570193cb1ed6441d020eb82f3c">toml::CHECK_INSERTED_AS</link> (double, <link linkend="_classvalue">value</link>&lt; double &gt;)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a1847f57f0ea7a338290291846fe8b305">toml::CHECK_NODE_REF_TYPE</link> (<link linkend="_classtable">table</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a34e02dc102b67d17d7e22fa9a93f5728">toml::CHECK_NODE_REF_TYPE</link> (<link linkend="_classarray">array</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a8394d8d51b7a09d4089552cd8a7c41cb">toml::CHECK_NODE_REF_TYPE</link> (std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ae082ccfbcf5341b6bb2ef5d8daf1c7e6">toml::CHECK_NODE_REF_TYPE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a046b98419a7ca981484bd3c575471525">toml::CHECK_NODE_REF_TYPE</link> (double)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a183c1e36407fd90e7f78f89aefbecd9b">toml::CHECK_NODE_REF_TYPE</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a9cfc8ce3bff4dfaa8d1ea3ee9542ad9e">toml::CHECK_NODE_REF_TYPE</link> (date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a69529c33e8336d69291e03690fbe6f78">toml::CHECK_NODE_REF_TYPE</link> (<link linkend="_structtime">time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ac80247b377420abe0e88fcfe3d47185e">toml::CHECK_NODE_REF_TYPE</link> (<link linkend="_structdate__time">date_time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1af98014c3eee8d430281e68c70f87e5f6">toml::CHECK_NODE_VIEW_REF_TYPE</link> (<link linkend="_classtable">table</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa7fae93b6951c2adba153ec6611a9342">toml::CHECK_NODE_VIEW_REF_TYPE</link> (<link linkend="_classarray">array</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a62562f042fd9b6ccd7a0d1b0532d30bb">toml::CHECK_NODE_VIEW_REF_TYPE</link> (std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a94d8200dd81bf5bad027b51d108758e8">toml::CHECK_NODE_VIEW_REF_TYPE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1af0d317c0b2315de3c23985370d7ca9e6">toml::CHECK_NODE_VIEW_REF_TYPE</link> (double)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1afd1a6a72f5f45f4678264c4876e0337c">toml::CHECK_NODE_VIEW_REF_TYPE</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a692d692ebadb49f7bca80e90a40d9ab9">toml::CHECK_NODE_VIEW_REF_TYPE</link> (date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ac76f056b0d504a98d587f5679f8bc214">toml::CHECK_NODE_VIEW_REF_TYPE</link> (<link linkend="_structtime">time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1acdc7b423696654286fe4b03f4ef0b728">toml::CHECK_NODE_VIEW_REF_TYPE</link> (<link linkend="_structdate__time">date_time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aaee20b47ebda78a0da6e2f4343b86bf8">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (<link linkend="_classtable">table</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1af72633ba76911158ffe3934d0be9cc08">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (<link linkend="_classarray">array</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a5e3564320d18bd016374176b3371c29e">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (std::string)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a9a8b6e24cff74fdb1a0a2bd19d2dcc7d">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ab1d8fe0f2af6e0726652391bfc8fa375">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (double)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1ad9f0d367c251220757b0d058ca0cb1a8">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a1dd1460293d462b8c660bad952b28954">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (date)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1aa49111e1309e46bea307e6c2b1b86708">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (<link linkend="_structtime">time</link>)</para>
</listitem>
            <listitem><para><link linkend="_namespacetoml_1a19943a2daf9d086f3ae9c7d259407843">toml::CHECK_CONST_NODE_VIEW_REF_TYPE</link> (<link linkend="_structdate__time">date_time</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_impl__toml_8cpp_1ad4eb8031653c1b100307e5991fe85c34"/><section>
    <title>CHECK_CAN_REPRESENT_NATIVE</title>
<indexterm><primary>CHECK_CAN_REPRESENT_NATIVE</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_CAN_REPRESENT_NATIVE</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_CAN_REPRESENT_NATIVE( T,  expected)&#160;&#160;&#160;	static_assert((impl::value_traits&lt;T&gt;<link linkend="_toml_8hpp_1a0b9e60ca26c89aac055ec4e01170cb78">::is_native</link> || impl::value_traits&lt;T&gt;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">::can_represent_native</link>) == expected)</computeroutput></para></section>
<anchor xml:id="_impl__toml_8cpp_1a7a2a6d6752626f4f33c0dcff0755727b"/><section>
    <title>CHECK_CONST_NODE_VIEW_REF_TYPE</title>
<indexterm><primary>CHECK_CONST_NODE_VIEW_REF_TYPE</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_CONST_NODE_VIEW_REF_TYPE</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_CONST_NODE_VIEW_REF_TYPE( T)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;node_view&lt;const&#32;node&gt;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;T&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const T&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;volatile T&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const volatile T&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;T&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const T&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;volatile T&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const volatile T&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;T&amp;&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const T&amp;&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;volatile T&amp;&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const volatile T&amp;&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&amp;&gt;)
</programlisting></section>
<anchor xml:id="_impl__toml_8cpp_1a032b806947df2d4dd9c1914bb95adf0b"/><section>
    <title>CHECK_INSERTED_AS</title>
<indexterm><primary>CHECK_INSERTED_AS</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_INSERTED_AS</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_INSERTED_AS( T,  expected)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_same_v&lt;toml::inserted_type_of&lt;T&gt;,&#32;expected&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(std::is_same_v&lt;toml::inserted_type_of&lt;const&#32;T&gt;,&#32;expected&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(std::is_same_v&lt;toml::inserted_type_of&lt;T&amp;&gt;,&#32;expected&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(std::is_same_v&lt;toml::inserted_type_of&lt;const&#32;T&amp;&gt;,&#32;expected&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(std::is_same_v&lt;toml::inserted_type_of&lt;T&amp;&amp;&gt;,&#32;expected&gt;)
</programlisting></section>
<anchor xml:id="_impl__toml_8cpp_1ab9a2029dba8d944c60b95fdd3c2aed51"/><section>
    <title>CHECK_NODE_REF_TYPE</title>
<indexterm><primary>CHECK_NODE_REF_TYPE</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_NODE_REF_TYPE</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_NODE_REF_TYPE( T)</computeroutput></para></section>
<anchor xml:id="_impl__toml_8cpp_1aec47ec227bd970072d0d17c2a22dacb1"/><section>
    <title>CHECK_NODE_TYPE_MAPPING</title>
<indexterm><primary>CHECK_NODE_TYPE_MAPPING</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_NODE_TYPE_MAPPING</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_NODE_TYPE_MAPPING( T,  expected)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::node_type_of&lt;T&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;T&amp;&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;T&amp;&amp;&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;const&#32;T&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;const&#32;T&amp;&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;const&#32;T&amp;&amp;&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;volatile&#32;T&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;volatile&#32;T&amp;&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;volatile&#32;T&amp;&amp;&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;const&#32;volatile&#32;T&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;const&#32;volatile&#32;T&amp;&gt;&#32;==&#32;expected);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(impl::node_type_of&lt;const&#32;volatile&#32;T&amp;&amp;&gt;&#32;==&#32;expected)
</programlisting></section>
<anchor xml:id="_impl__toml_8cpp_1a3968af8106c3469214e523bc142286dd"/><section>
    <title>CHECK_NODE_VIEW_REF_TYPE</title>
<indexterm><primary>CHECK_NODE_VIEW_REF_TYPE</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_NODE_VIEW_REF_TYPE</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_NODE_VIEW_REF_TYPE( T)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;node_view&lt;node&gt;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;T&gt;</link>()),&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const T&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;volatile T&gt;</link>()),&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const volatile T&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;T&amp;&gt;</link>()),&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const T&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;volatile T&amp;&gt;</link>()),&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const volatile T&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;T&amp;&amp;&gt;</link>()),&#32;T&amp;&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const T&amp;&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;volatile T&amp;&amp;&gt;</link>()),&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&amp;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;const volatile T&amp;&amp;&gt;</link>()),&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;T&amp;&amp;&gt;)
</programlisting></section>
<anchor xml:id="_impl__toml_8cpp_1a85d83567069d38ec5f2ee38ba7aa5bc4"/><section>
    <title>CHECK_VALUE_EXACT</title>
<indexterm><primary>CHECK_VALUE_EXACT</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_VALUE_EXACT</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_VALUE_EXACT( T,  expected)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;decltype(declval&lt;node&gt;().value_exact&lt;T&gt;()),&#32;optional&lt;expected&gt;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().value_exact&lt;T&gt;()),&#32;optional&lt;expected&gt;&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().value_exact&lt;T&gt;()),&#32;optional&lt;expected&gt;&gt;)
</programlisting></section>
<anchor xml:id="_impl__toml_8cpp_1a3b216e5466622d374ef5885209e262e8"/><section>
    <title>CHECK_VALUE_OR</title>
<indexterm><primary>CHECK_VALUE_OR</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>CHECK_VALUE_OR</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> CHECK_VALUE_OR( T,  expected)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;decltype(declval&lt;node&gt;().value_or(declval&lt;T&gt;())),&#32;expected&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&gt;().value_or(declval&lt;T&gt;())),&#32;expected&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;static_assert(is_same_v&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;().value_or(declval&lt;T&gt;())),&#32;expected&gt;)
</programlisting></section>
<anchor xml:id="_impl__toml_8cpp_1a27ee69835a1ddff9dbaf3015b4b08a11"/><section>
    <title>TOML_IMPLEMENTATION</title>
<indexterm><primary>TOML_IMPLEMENTATION</primary><secondary>impl_toml.cpp</secondary></indexterm>
<indexterm><primary>impl_toml.cpp</primary><secondary>TOML_IMPLEMENTATION</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> TOML_IMPLEMENTATION</computeroutput></para></section>
</section>
</section>
