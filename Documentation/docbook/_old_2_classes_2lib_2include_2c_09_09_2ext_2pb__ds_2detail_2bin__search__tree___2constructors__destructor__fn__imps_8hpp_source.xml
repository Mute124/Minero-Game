<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2constructors__destructor__fn__imps_8hpp_source" xml:lang="en-US">
<title>constructors_destructor_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_allocator
45 PB_DS_CLASS_C_DEC::s_node_allocator;
46 
47 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
48 PB_DS_CLASS_C_DEC::
49 PB_DS_BIN_TREE_NAME()&#32;:&#32;m_p_head(s_node_allocator.allocate(1)),&#32;m_size(0)
50 {
51 &#32;&#32;initialize();
52 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
53 }
54 
55 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
56 PB_DS_CLASS_C_DEC::
57 PB_DS_BIN_TREE_NAME(<emphasis role="keyword">const</emphasis>&#32;Cmp_Fn&amp;&#32;r_cmp_fn)&#32;:
58 &#32;&#32;Cmp_Fn(r_cmp_fn),&#32;m_p_head(s_node_allocator.allocate(1)),&#32;m_size(0)
59 {
60 &#32;&#32;initialize();
61 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
62 }
63 
64 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
65 PB_DS_CLASS_C_DEC::
66 PB_DS_BIN_TREE_NAME(<emphasis role="keyword">const</emphasis>&#32;Cmp_Fn&amp;&#32;r_cmp_fn,&#32;<emphasis role="keyword">const</emphasis>&#32;node_update&amp;&#32;r_node_update)&#32;:
67 &#32;&#32;Cmp_Fn(r_cmp_fn),
68 &#32;&#32;node_update(r_node_update),
69 &#32;&#32;m_p_head(s_node_allocator.allocate(1)),
70 &#32;&#32;m_size(0)
71 {
72 &#32;&#32;initialize();
73 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
74 }
75 
76 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
77 PB_DS_CLASS_C_DEC::
78 PB_DS_BIN_TREE_NAME(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)&#32;:
79 #ifdef&#32;_GLIBCXX_DEBUG
80 &#32;&#32;debug_base(other),
81 #endif&#32;
82 #ifdef&#32;PB_DS_TREE_TRACE
83 &#32;&#32;PB_DS_TREE_TRACE_BASE_C_DEC(other),
84 #endif&#32;
85 &#32;&#32;Cmp_Fn(other),
86 &#32;&#32;node_update(other),
87 &#32;&#32;m_p_head(s_node_allocator.allocate(1)),
88 &#32;&#32;m_size(0)
89 {
90 &#32;&#32;initialize();
91 &#32;&#32;m_size&#32;=&#32;other.m_size;
92 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>(other)
93 
94 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
95 &#32;&#32;&#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;recursive_copy_node(other.m_p_head-&gt;m_p_parent);
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;!=&#32;0)
98 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_parent-&gt;m_p_parent&#32;=&#32;m_p_head;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_size&#32;=&#32;other.m_size;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initialize_min_max();
101 &#32;&#32;&#32;&#32;&#32;&#32;}
102 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
103 &#32;&#32;&#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::clear();)
105 &#32;&#32;&#32;&#32;s_node_allocator.deallocate(m_p_head,&#32;1);
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
107 &#32;&#32;&#32;&#32;&#32;&#32;}
108 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
109 }
110 
111 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
112 <emphasis role="keywordtype">void</emphasis>
113 PB_DS_CLASS_C_DEC::
114 swap(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
115 {
116 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
117 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>(other)
118 &#32;&#32;value_swap(other);
119 &#32;&#32;<link linkend="_namespacestd">std</link>::swap((Cmp_Fn&amp;&#32;)(*this),&#32;(Cmp_Fn&amp;&#32;)other);
120 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*this))
121 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>(other)
122 }
123 
124 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
125 <emphasis role="keywordtype">void</emphasis>
126 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
127 value_swap(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
128 {
129 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::swap(other);)
130 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_p_head,&#32;other.m_p_head);
131 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_size,&#32;other.m_size);
132 }
133 
134 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
135 PB_DS_CLASS_C_DEC::
136 ~PB_DS_BIN_TREE_NAME()
137 {
138 &#32;&#32;clear();
139 &#32;&#32;s_node_allocator.deallocate(m_p_head,&#32;1);
140 }
141 
142 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
143 <emphasis role="keywordtype">void</emphasis>
144 PB_DS_CLASS_C_DEC::
145 initialize()
146 {
147 &#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;0;
148 &#32;&#32;m_p_head-&gt;m_p_left&#32;=&#32;m_p_head;
149 &#32;&#32;m_p_head-&gt;m_p_right&#32;=&#32;m_p_head;
150 &#32;&#32;m_size&#32;=&#32;0;
151 }
152 
153 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
154 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
155 PB_DS_CLASS_C_DEC::
156 recursive_copy_node(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd)
157 {
158 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd&#32;==&#32;0)
159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(0);
160 
161 &#32;&#32;node_pointer&#32;p_ret&#32;=&#32;s_node_allocator.allocate(1);
162 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(p_ret)&#32;node(*p_nd);
165 &#32;&#32;&#32;&#32;}
166 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
167 &#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;s_node_allocator.deallocate(p_ret,&#32;1);
169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
170 &#32;&#32;&#32;&#32;}
171 
172 &#32;&#32;p_ret-&gt;m_p_left&#32;=&#32;p_ret-&gt;m_p_right&#32;=&#32;0;
173 
174 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
175 &#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;p_ret-&gt;m_p_left&#32;=&#32;recursive_copy_node(p_nd-&gt;m_p_left);
177 &#32;&#32;&#32;&#32;&#32;&#32;p_ret-&gt;m_p_right&#32;=&#32;recursive_copy_node(p_nd-&gt;m_p_right);
178 &#32;&#32;&#32;&#32;}
179 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
180 &#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;clear_imp(p_ret);
182 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
183 &#32;&#32;&#32;&#32;}
184 
185 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_ret-&gt;m_p_left&#32;!=&#32;0)
186 &#32;&#32;&#32;&#32;p_ret-&gt;m_p_left-&gt;m_p_parent&#32;=&#32;p_ret;
187 
188 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_ret-&gt;m_p_right&#32;!=&#32;0)
189 &#32;&#32;&#32;&#32;p_ret-&gt;m_p_right-&gt;m_p_parent&#32;=&#32;p_ret;
190 
191 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a1dc24f5a5b20713ee2e6c908035de418">PB_DS_ASSERT_NODE_CONSISTENT</link>(p_ret)
192 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
193 }
194 
195 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
196 <emphasis role="keywordtype">void</emphasis>
197 PB_DS_CLASS_C_DEC::
198 initialize_min_max()
199 {
200 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;==&#32;0)
201 &#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_left&#32;=&#32;m_p_head-&gt;m_p_right&#32;=&#32;m_p_head;
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
204 &#32;&#32;&#32;&#32;}
205 
206 &#32;&#32;{
207 &#32;&#32;&#32;&#32;node_pointer&#32;p_min&#32;=&#32;m_p_head-&gt;m_p_parent;
208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_min-&gt;m_p_left&#32;!=&#32;0)
209 &#32;&#32;&#32;&#32;&#32;&#32;p_min&#32;=&#32;p_min-&gt;m_p_left;
210 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_left&#32;=&#32;p_min;
211 &#32;&#32;}
212 
213 &#32;&#32;{
214 &#32;&#32;&#32;&#32;node_pointer&#32;p_max&#32;=&#32;m_p_head-&gt;m_p_parent;
215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_max-&gt;m_p_right&#32;!=&#32;0)
216 &#32;&#32;&#32;&#32;&#32;&#32;p_max&#32;=&#32;p_max-&gt;m_p_right;
217 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_right&#32;=&#32;p_max;
218 &#32;&#32;}
219 }
220 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
