<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2pstl_2numeric__impl_8h_source" xml:lang="en-US">
<title>numeric_impl.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/pstl/numeric_impl.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;numeric_impl.h&#32;----------------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_NUMERIC_IMPL_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_NUMERIC_IMPL_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;numeric&gt;</emphasis>
16 
17 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend_8h">parallel_backend.h</link>&quot;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h">pstl_config.h</link>&quot;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2execution__impl_8h">execution_impl.h</link>&quot;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h">unseq_backend_simd.h</link>&quot;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2algorithm__fwd_8h">algorithm_fwd.h</link>&quot;</emphasis>
22 
23 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>
24 {
25 <emphasis role="keyword">namespace&#32;</emphasis>__internal
26 {
27 
28 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
29 <emphasis role="comment">//&#32;transform_reduce&#32;(version&#32;with&#32;two&#32;binary&#32;functions,&#32;according&#32;to&#32;draft&#32;N4659)</emphasis>
30 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
31 
32 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation1,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation2&gt;
33 _Tp
34 <link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__brick_transform_reduce</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,&#32;_Tp&#32;__init,
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation1&#32;__binary_op1,&#32;_BinaryOperation2&#32;__binary_op2,
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
37 {
38 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::inner_product(__first1,&#32;__last1,&#32;__first2,&#32;__init,&#32;__binary_op1,&#32;__binary_op2);
39 }
40 
41 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation1,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation2&gt;
42 _Tp
43 <link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__brick_transform_reduce</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,&#32;_Tp&#32;__init,
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation1&#32;__binary_op1,&#32;_BinaryOperation2&#32;__binary_op2,
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
46 {
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&#32;_DifferenceType;
48 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1afc12596caaca4854e89120ed63e7261e">__unseq_backend::__simd_transform_reduce</link>(
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last1&#32;-&#32;__first1,&#32;__init,&#32;__binary_op1,
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=,&#32;&amp;__binary_op2](_DifferenceType&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op2(__first1[__i],&#32;__first2[__i]);&#32;});
51 }
52 
53 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation1,
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation2,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
55 _Tp
56 <link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pattern_transform_reduce</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_Tp&#32;__init,&#32;_BinaryOperation1&#32;__binary_op1,
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation2&#32;__binary_op2,&#32;_IsVector&#32;__is_vector,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
60 {
61 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__brick_transform_reduce</link>(__first1,&#32;__last1,&#32;__first2,&#32;__init,&#32;__binary_op1,&#32;__binary_op2,&#32;__is_vector);
62 }
63 
64 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation1,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation2,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
66 _Tp
67 <link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pattern_transform_reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_Tp&#32;__init,&#32;_BinaryOperation1&#32;__binary_op1,
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation2&#32;__binary_op2,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
70 {
71 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__par_backend::__parallel_transform_reduce(
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;__binary_op2](_RandomAccessIterator1&#32;__i)&#32;<emphasis role="keyword">mutable</emphasis>&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op2(*__i,&#32;*(__first2&#32;+&#32;(__i&#32;-&#32;__first1)));
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__init,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op1,&#32;<emphasis role="comment">//&#32;Combine</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;__binary_op1,&#32;__binary_op2,
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector](_RandomAccessIterator1&#32;__i,&#32;_RandomAccessIterator1&#32;__j,&#32;_Tp&#32;__init)&#32;-&gt;&#32;_Tp&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__internal::__brick_transform_reduce</link>(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__init,&#32;__binary_op1,
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op2,&#32;__is_vector);
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
84 &#32;&#32;&#32;&#32;});
85 }
86 
87 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
88 <emphasis role="comment">//&#32;transform_reduce&#32;(version&#32;with&#32;unary&#32;and&#32;binary&#32;functions)</emphasis>
89 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
90 
91 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryOperation&gt;
92 _Tp
93 <link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__brick_transform_reduce</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
95 {
96 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">std::transform_reduce</link>(__first,&#32;__last,&#32;__init,&#32;__binary_op,&#32;__unary_op);
97 }
98 
99 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryOperation,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
100 _Tp
101 <link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__brick_transform_reduce</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
103 {
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type&#32;_DifferenceType;
105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1afc12596caaca4854e89120ed63e7261e">__unseq_backend::__simd_transform_reduce</link>(
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last&#32;-&#32;__first,&#32;__init,&#32;__binary_op,
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=,&#32;&amp;__unary_op](_DifferenceType&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__unary_op(__first[__i]);&#32;});
108 }
109 
110 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
112 _Tp
113 <link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pattern_transform_reduce</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Tp&#32;__init,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op,&#32;_UnaryOperation&#32;__unary_op,&#32;_IsVector&#32;__is_vector,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
116 {
117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__internal::__brick_transform_reduce</link>(__first,&#32;__last,&#32;__init,&#32;__binary_op,&#32;__unary_op,&#32;__is_vector);
118 }
119 
120 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
122 _Tp
123 <link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pattern_transform_reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Tp&#32;__init,
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op,&#32;_UnaryOperation&#32;__unary_op,&#32;_IsVector&#32;__is_vector,
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
126 {
127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__par_backend::__parallel_transform_reduce(
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__unary_op](_ForwardIterator&#32;__i)&#32;<emphasis role="keyword">mutable</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__unary_op(*__i);&#32;},&#32;__init,&#32;__binary_op,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__unary_op,&#32;__binary_op,&#32;__is_vector](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j,&#32;_Tp&#32;__init)&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__internal::__brick_transform_reduce</link>(__i,&#32;__j,&#32;__init,&#32;__binary_op,&#32;__unary_op,&#32;__is_vector);
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
134 &#32;&#32;&#32;&#32;});
135 }
136 
137 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
138 <emphasis role="comment">//&#32;transform_exclusive_scan</emphasis>
139 <emphasis role="comment">//</emphasis>
140 <emphasis role="comment">//&#32;walk3&#32;evaluates&#32;f(x,y,z)&#32;for&#32;(x,y,z)&#32;drawn&#32;from&#32;[first1,last1),&#32;[first2,...),&#32;[first3,...)</emphasis>
141 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
142 
143 <emphasis role="comment">//&#32;Exclusive&#32;form</emphasis>
144 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryOperation,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
145 std::pair&lt;_OutputIterator,&#32;_Tp&gt;
146 <link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__brick_transform_scan</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*Inclusive*/</emphasis>&#32;std::false_type,&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
149 {
150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;++__result)
151 &#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;__init;
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1ac4da865ecd911c850842ba22933784aa">_PSTL_PRAGMA_FORCEINLINE</link>
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__init&#32;=&#32;__binary_op(__init,&#32;__unary_op(*__first));
155 &#32;&#32;&#32;&#32;}
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__result,&#32;__init);
157 }
158 
159 <emphasis role="comment">//&#32;Inclusive&#32;form</emphasis>
160 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryOperation,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
161 std::pair&lt;_OutputIterator,&#32;_Tp&gt;
162 <link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__brick_transform_scan</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*Inclusive*/</emphasis>&#32;std::true_type,&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
165 {
166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;++__result)
167 &#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1ac4da865ecd911c850842ba22933784aa">_PSTL_PRAGMA_FORCEINLINE</link>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__init&#32;=&#32;__binary_op(__init,&#32;__unary_op(*__first));
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;__init;
171 &#32;&#32;&#32;&#32;}
172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__result,&#32;__init);
173 }
174 
175 <emphasis role="comment">//&#32;type&#32;is&#32;arithmetic&#32;and&#32;binary&#32;operation&#32;is&#32;a&#32;user&#32;defined&#32;operation.</emphasis>
176 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
177 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f">is_arithmetic_udop</link>&#32;=&#32;std::integral_constant&lt;bool,&#32;std::is_arithmetic&lt;_Tp&gt;::value&#32;&amp;&amp;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_same&lt;_BinaryOperation,&#32;std::plus&lt;_Tp&gt;&gt;<link linkend="_classvalue">::value</link>&gt;;
179 
180 <emphasis role="comment">//&#32;[restriction]&#32;-&#32;T&#32;shall&#32;be&#32;DefaultConstructible.</emphasis>
181 <emphasis role="comment">//&#32;[violation]&#32;-&#32;default&#32;ctor&#32;of&#32;T&#32;shall&#32;set&#32;the&#32;identity&#32;value&#32;for&#32;binary_op.</emphasis>
182 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Inclusive&gt;
184 <emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;!is_arithmetic_udop&lt;_Tp,&#32;_BinaryOperation&gt;::value,&#32;std::pair&lt;_OutputIterator,&#32;_Tp&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
185 <link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__brick_transform_scan</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,&#32;_Inclusive,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
188 {
189 <emphasis role="preprocessor">#if&#32;(_PSTL_UDS_PRESENT)</emphasis>
190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1ab2bb4d082cad248f414d6cd55326980c">__unseq_backend::__simd_scan</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__result,&#32;__unary_op,&#32;__init,&#32;__binary_op,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Inclusive());
192 <emphasis role="preprocessor">#else</emphasis>
193 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;need&#32;to&#32;call&#32;serial&#32;brick&#32;here&#32;to&#32;call&#32;function&#32;for&#32;inclusive&#32;and&#32;exclusive&#32;scan&#32;that&#32;depends&#32;on&#32;_Inclusive()&#32;value</emphasis>
194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__internal::__brick_transform_scan</link>(__first,&#32;__last,&#32;__result,&#32;__unary_op,&#32;__init,&#32;__binary_op,&#32;_Inclusive(),
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type());
196 <emphasis role="preprocessor">#endif</emphasis>
197 }
198 
199 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Inclusive&gt;
201 <emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;is_arithmetic_udop&lt;_Tp,&#32;_BinaryOperation&gt;::value,&#32;std::pair&lt;_OutputIterator,&#32;_Tp&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
202 <link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__brick_transform_scan</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,&#32;_Inclusive,
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
205 {
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__internal::__brick_transform_scan</link>(__first,&#32;__last,&#32;__result,&#32;__unary_op,&#32;__init,&#32;__binary_op,&#32;_Inclusive(),
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type());
208 }
209 
210 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Inclusive,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
212 _OutputIterator
213 <link linkend="_namespace____pstl_1_1____internal_1a8b1fafa95881c18c8c209a63b817198d">__pattern_transform_scan</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_UnaryOperation&#32;__unary_op,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Inclusive,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
216 {
217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__internal::__brick_transform_scan</link>(__first,&#32;__last,&#32;__result,&#32;__unary_op,&#32;__init,&#32;__binary_op,&#32;_Inclusive(),
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector)
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.first;
220 }
221 
222 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Inclusive,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
224 <emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;!std::is_floating_point&lt;_Tp&gt;::value,&#32;_OutputIterator&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
225 <link linkend="_namespace____pstl_1_1____internal_1a8b1fafa95881c18c8c209a63b817198d">__pattern_transform_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_UnaryOperation&#32;__unary_op,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Inclusive,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
228 {
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_DifferenceType;
230 
231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_transform_scan(
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__last&#32;-&#32;__first,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__unary_op](_DifferenceType&#32;__i)&#32;<emphasis role="keyword">mutable</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__unary_op(__first[__i]);&#32;},&#32;__init,
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op,
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__unary_op,&#32;__binary_op](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__j,&#32;_Tp&#32;__init)&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Execute&#32;serial&#32;__brick_transform_reduce,&#32;due&#32;to&#32;the&#32;explicit&#32;SIMD&#32;vectorization&#32;(reduction)&#32;requires&#32;a&#32;commutative&#32;operation&#32;for&#32;the&#32;guarantee&#32;of&#32;correct&#32;scan.</emphasis>
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__internal::__brick_transform_reduce</link>(__first&#32;+&#32;__i,&#32;__first&#32;+&#32;__j,&#32;__init,&#32;__binary_op,
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__unary_op,
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector*/</emphasis>&#32;std::false_type());
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__unary_op,&#32;__binary_op,&#32;__result,&#32;__is_vector](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__j,
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__init)&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__internal::__brick_transform_scan</link>(__first&#32;+&#32;__i,&#32;__first&#32;+&#32;__j,&#32;__result&#32;+&#32;__i,&#32;__unary_op,
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__init,&#32;__binary_op,&#32;_Inclusive(),&#32;__is_vector)
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.second;
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;(__last&#32;-&#32;__first);
249 &#32;&#32;&#32;&#32;});
250 }
251 
252 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Inclusive,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
254 <emphasis role="keyword">typename</emphasis>&#32;std::enable_if&lt;std::is_floating_point&lt;_Tp&gt;::value,&#32;_OutputIterator&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
255 <link linkend="_namespace____pstl_1_1____internal_1a8b1fafa95881c18c8c209a63b817198d">__pattern_transform_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_UnaryOperation&#32;__unary_op,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Inclusive,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
258 {
259 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_DifferenceType;
260 &#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
261 
262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;0)
263 &#32;&#32;&#32;&#32;{
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
265 &#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_strict_scan(
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__n,&#32;__init,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__unary_op,&#32;__binary_op,&#32;__result,&#32;__is_vector](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len)&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__internal::__brick_transform_scan</link>(__first&#32;+&#32;__i,&#32;__first&#32;+&#32;(__i&#32;+&#32;__len),&#32;__result&#32;+&#32;__i,
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__unary_op,&#32;_Tp{},&#32;__binary_op,&#32;_Inclusive(),&#32;__is_vector)
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.second;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op,
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__result,&#32;&amp;__binary_op](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len,&#32;_Tp&#32;__initial)&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform</link>(__result&#32;+&#32;__i,&#32;__result&#32;+&#32;__i&#32;+&#32;__len,&#32;__result&#32;+&#32;__i,
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__initial,&#32;&amp;__binary_op](<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1ac4da865ecd911c850842ba22933784aa">_PSTL_PRAGMA_FORCEINLINE</link>
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op(__initial,&#32;__x);
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})&#32;-
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1);
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_Tp)&#32;{});
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;(__last&#32;-&#32;__first);
285 &#32;&#32;&#32;&#32;});
286 }
287 
288 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
289 <emphasis role="comment">//&#32;adjacent_difference</emphasis>
290 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
291 
292 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
293 _OutputIterator
294 <link linkend="_namespace____pstl_1_1____internal_1a90a33e151b2c88ee9555294dfff168ae">__brick_adjacent_difference</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__d_first,
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__op,&#32;<emphasis role="comment">/*is_vector*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
296 {
297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8e0ebcf0b7a1a4e60d98f9a377ed012a">std::adjacent_difference</link>(__first,&#32;__last,&#32;__d_first,&#32;__op);
298 }
299 
300 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;BinaryOperation&gt;
301 _ForwardIterator2
302 <link linkend="_namespace____pstl_1_1____internal_1a90a33e151b2c88ee9555294dfff168ae">__brick_adjacent_difference</link>(_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__d_first,
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BinaryOperation&#32;__op,&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
304 {
305 &#32;&#32;&#32;&#32;_PSTL_ASSERT(__first&#32;!=&#32;__last);
306 
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::reference&#32;_ReferenceType1;
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator2&gt;::reference&#32;_ReferenceType2;
309 
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
311 &#32;&#32;&#32;&#32;*__d_first&#32;=&#32;*__first;
312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a08f3845eaf1306879cde3522c5e2d542">__unseq_backend::__simd_walk_3</link>(
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;1,&#32;__n&#32;-&#32;1,&#32;__first,&#32;__d_first&#32;+&#32;1,
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__op](_ReferenceType1&#32;__x,&#32;_ReferenceType1&#32;__y,&#32;_ReferenceType2&#32;__z)&#32;{&#32;__z&#32;=&#32;__op(__x,&#32;__y);&#32;});
315 }
316 
317 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
319 _OutputIterator
320 <link linkend="_namespace____pstl_1_1____internal_1a06ab524ac584392677a2d3002e998d89">__pattern_adjacent_difference</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__d_first,&#32;_BinaryOperation&#32;__op,&#32;_IsVector&#32;__is_vector,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
323 {
324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a90a33e151b2c88ee9555294dfff168ae">__internal::__brick_adjacent_difference</link>(__first,&#32;__last,&#32;__d_first,&#32;__op,&#32;__is_vector);
325 }
326 
327 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
329 _ForwardIterator2
330 <link linkend="_namespace____pstl_1_1____internal_1a06ab524ac584392677a2d3002e998d89">__pattern_adjacent_difference</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__d_first,&#32;_BinaryOperation&#32;__op,&#32;_IsVector&#32;__is_vector,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
333 {
334 &#32;&#32;&#32;&#32;_PSTL_ASSERT(__first&#32;!=&#32;__last);
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::reference&#32;_ReferenceType1;
336 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator2&gt;::reference&#32;_ReferenceType2;
337 
338 &#32;&#32;&#32;&#32;*__d_first&#32;=&#32;*__first;
339 &#32;&#32;&#32;&#32;__par_backend::__parallel_for(
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last&#32;-&#32;1,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__op,&#32;__is_vector,&#32;__d_first,&#32;__first](_ForwardIterator1&#32;__b,&#32;_ForwardIterator1&#32;__e)&#32;{
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__d_b&#32;=&#32;__d_first&#32;+&#32;(__b&#32;-&#32;__first);
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__internal::__brick_walk3</link>(
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b,&#32;__e,&#32;__b&#32;+&#32;1,&#32;__d_b&#32;+&#32;1,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__op](_ReferenceType1&#32;__x,&#32;_ReferenceType1&#32;__y,&#32;_ReferenceType2&#32;__z)&#32;{&#32;__z&#32;=&#32;__op(__y,&#32;__x);&#32;},
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d_first&#32;+&#32;(__last&#32;-&#32;__first);
349 }
350 
351 }&#32;<emphasis role="comment">//&#32;namespace&#32;__internal</emphasis>
352 }&#32;<emphasis role="comment">//&#32;namespace&#32;__pstl</emphasis>
353 
354 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_NUMERIC_IMPL_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
