<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2insert__fn__imps_8hpp_source" xml:lang="en-US">
<title>insert_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">inline</emphasis>&#32;std::pair&lt;typename&#32;PB_DS_CLASS_C_DEC::point_iterator,&#32;bool&gt;
45 PB_DS_CLASS_C_DEC::
46 insert_leaf(const_reference&#32;r_value)
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 
50 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(m_size&#32;==&#32;0)
51 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::make_pair(insert_imp_empty(r_value),
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>);
53 
54 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;m_p_head-&gt;m_p_parent;
55 &#32;&#32;node_pointer&#32;p_pot&#32;=&#32;m_p_head;
56 
57 &#32;&#32;while&#32;(p_nd&#32;!=&#32;0)
58 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value),
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value)))
60 &#32;&#32;&#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;p_pot&#32;=&#32;p_nd;
62 
63 &#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_nd-&gt;m_p_left;
64 &#32;&#32;&#32;&#32;&#32;&#32;}
65 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_nd-&gt;m_p_right;
67 
68 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_pot&#32;==&#32;m_p_head)
69 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(insert_leaf_new(r_value,&#32;m_p_head-&gt;m_p_right,&#32;<emphasis role="keyword">false</emphasis>),
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>);
71 
72 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value),
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_pot-&gt;m_value)))
74 &#32;&#32;&#32;&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
76 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1acfae3994df576dbc37edc392d027c7ef">PB_DS_CHECK_KEY_EXISTS</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value))
77 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::make_pair(p_pot,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>);
78 &#32;&#32;&#32;&#32;}
79 
80 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value))
81 
82 &#32;&#32;p_nd&#32;=&#32;p_pot-&gt;m_p_left;
83 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_nd&#32;==&#32;0)
84 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::make_pair(insert_leaf_new(r_value,&#32;p_pot,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>),
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>);
86 
87 &#32;&#32;while&#32;(p_nd-&gt;m_p_right&#32;!=&#32;0)
88 &#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_nd-&gt;m_p_right;
89 
90 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::make_pair(insert_leaf_new(r_value,&#32;p_nd,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>),
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>);
92 }
93 
94 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
95 inline&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::iterator
96 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
97 insert_leaf_new(const_reference&#32;r_value,&#32;node_pointer&#32;p_nd,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;left_nd)
98 {
99 &#32;&#32;node_pointer&#32;p_new_nd&#32;=
100 &#32;&#32;&#32;&#32;get_new_node_for_leaf_insert(r_value,
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_base::m_no_throw_copies_indicator);
102 
103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(left_nd)
104 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_p_left&#32;==&#32;0);
106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value),
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value)));
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_left&#32;=&#32;p_new_nd;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_left&#32;==&#32;p_nd)
111 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_left&#32;=&#32;p_new_nd;
112 &#32;&#32;&#32;&#32;}
113 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_p_right&#32;==&#32;0);
116 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value),
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value)));
118 
119 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_right&#32;=&#32;p_new_nd;
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_right&#32;==&#32;p_nd)
121 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_right&#32;=&#32;p_new_nd;
122 &#32;&#32;&#32;&#32;}
123 
124 &#32;&#32;p_new_nd-&gt;m_p_parent&#32;=&#32;p_nd;
125 &#32;&#32;p_new_nd-&gt;m_p_left&#32;=&#32;p_new_nd-&gt;m_p_right&#32;=&#32;0;
126 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a1dc24f5a5b20713ee2e6c908035de418">PB_DS_ASSERT_NODE_CONSISTENT</link>(p_nd)
127 
128 &#32;&#32;update_to_top(p_new_nd,&#32;(node_update*&#32;)<emphasis role="keyword">this</emphasis>);
129 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::insert_new(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value));)
130 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(p_new_nd);
131 }
132 
133 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
134 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
135 PB_DS_CLASS_C_DEC::
136 insert_imp_empty(const_reference&#32;r_value)
137 {
138 &#32;&#32;node_pointer&#32;p_new_node&#32;=
139 &#32;&#32;&#32;&#32;get_new_node_for_leaf_insert(r_value,&#32;traits_base::m_no_throw_copies_indicator);
140 
141 &#32;&#32;m_p_head-&gt;m_p_left&#32;=&#32;m_p_head-&gt;m_p_right&#32;=
142 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;p_new_node;
143 
144 &#32;&#32;p_new_node-&gt;m_p_parent&#32;=&#32;m_p_head;
145 &#32;&#32;p_new_node-&gt;m_p_left&#32;=&#32;p_new_node-&gt;m_p_right&#32;=&#32;0;
146 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::insert_new(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_value));)
147 
148 &#32;&#32;update_to_top(m_p_head-&gt;m_p_parent,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
149 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(p_new_node);
150 }
151 
152 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
153 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
154 PB_DS_CLASS_C_DEC::
155 get_new_node_for_leaf_insert(const_reference&#32;r_val,&#32;false_type)
156 {
157 &#32;&#32;node_pointer&#32;p_new_nd&#32;=&#32;s_node_allocator.allocate(1);
158 &#32;&#32;cond_dealtor_t&#32;cond(p_new_nd);
159 
160 &#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(&amp;p_new_nd-&gt;m_value)))
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;node::value_type(r_val);
162 
163 &#32;&#32;cond.set_no_action();
164 &#32;&#32;p_new_nd-&gt;m_p_left&#32;=&#32;p_new_nd-&gt;m_p_right&#32;=&#32;0;
165 &#32;&#32;++m_size;
166 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_new_nd;
167 }
168 
169 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
170 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
171 PB_DS_CLASS_C_DEC::
172 get_new_node_for_leaf_insert(const_reference&#32;r_val,&#32;true_type)
173 {
174 &#32;&#32;node_pointer&#32;p_new_nd&#32;=&#32;s_node_allocator.allocate(1);
175 
176 &#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(&amp;p_new_nd-&gt;m_value)))
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;node::value_type(r_val);
178 
179 &#32;&#32;p_new_nd-&gt;m_p_left&#32;=&#32;p_new_nd-&gt;m_p_right&#32;=&#32;0;
180 &#32;&#32;++m_size;
181 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_new_nd;
182 }
183 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
