<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_source" xml:lang="en-US">
<title>exception_ptr.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/exception_ptr.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Exception&#32;Handling&#32;support&#32;header&#32;(exception_ptr&#32;class)&#32;for&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;GCC.</emphasis>
6 <emphasis role="comment">//</emphasis>
7 <emphasis role="comment">//&#32;GCC&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
8 <emphasis role="comment">//&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
9 <emphasis role="comment">//&#32;the&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
10 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
11 <emphasis role="comment">//&#32;</emphasis>
12 <emphasis role="comment">//&#32;GCC&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
13 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
14 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
15 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
16 <emphasis role="comment">//&#32;</emphasis>
17 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
18 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
19 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
20 
21 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
22 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
23 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
24 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
25 
31 <emphasis role="preprocessor">#ifndef&#32;_EXCEPTION_PTR_H</emphasis>
32 <emphasis role="preprocessor">#define&#32;_EXCEPTION_PTR_H</emphasis>
33 
34 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;push(default)</emphasis>
35 
36 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/exception_defines.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/cxxabi_init_exception.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;typeinfo&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
41 
42 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
43 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/move.h&gt;</emphasis>
44 <emphasis role="preprocessor">#endif</emphasis>
45 
46 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_EH_PTR_RELOPS_COMPAT</emphasis>
47 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_EH_PTR_USED&#32;__attribute__((__used__))</emphasis>
48 <emphasis role="preprocessor">#else</emphasis>
49 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_EH_PTR_USED</emphasis>
50 <emphasis role="preprocessor">#endif</emphasis>
51 
52 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C++&quot;</emphasis>&#32;{
53 
54 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;
55 {
56 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>type_info;
57 
63 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__exception_ptr
64 &#32;&#32;{
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>;
66 &#32;&#32;}
67 
68 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">__exception_ptr::exception_ptr</link>;
69 
74 &#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&#32;<link linkend="_group__exceptions_1gafcca609a0e064086e3d37ff25c85ab69">current_exception</link>()&#32;_GLIBCXX_USE_NOEXCEPT;
75 
76 &#32;&#32;template&lt;typename&#32;_Ex&gt;
77 &#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&#32;<link linkend="_group__exceptions_1ga90822fbbd4a65b89480fb64d67fc69b6">make_exception_ptr</link>(_Ex)&#32;_GLIBCXX_USE_NOEXCEPT;
78 
80 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;rethrow_exception(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>)&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__noreturn__));
81 
82 &#32;&#32;namespace&#32;__exception_ptr
83 &#32;&#32;{
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_group__exceptions_1ga64d0b68338d7edbfd7d95f4177dbc442">std::rethrow_exception</link>;
85 
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>
91 &#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;_M_exception_object;
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a41bb6fa688c9729dc9f0a7c528ad7d80">exception_ptr</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__e)&#32;_GLIBCXX_USE_NOEXCEPT;
95 
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_addref()&#32;_GLIBCXX_USE_NOEXCEPT;
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_release()&#32;_GLIBCXX_USE_NOEXCEPT;
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*_M_get()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__pure__));
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&#32;<link linkend="_group__exceptions_1gafcca609a0e064086e3d37ff25c85ab69">std::current_exception</link>()&#32;_GLIBCXX_USE_NOEXCEPT;
102 &#32;&#32;&#32;&#32;&#32;&#32;friend&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd">std</link>::<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a1cf5c13411faa966fc08c033cbc61c9c">rethrow_exception</link>(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>);
103 &#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;_Ex&gt;
104 &#32;&#32;&#32;&#32;&#32;&#32;friend&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&#32;<link linkend="_namespacestd">std</link>::<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a3488fca5d93433c497850d468c64fcc2">make_exception_ptr</link>(_Ex)&#32;_GLIBCXX_USE_NOEXCEPT;
105 
106 &#32;&#32;&#32;&#32;public:
107 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>()&#32;_GLIBCXX_USE_NOEXCEPT;
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>(const&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;)&#32;_GLIBCXX_USE_NOEXCEPT;
110 
111 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a41bb6fa688c9729dc9f0a7c528ad7d80">exception_ptr</link>(nullptr_t)&#32;noexcept
113 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_exception_object(<emphasis role="keyword">nullptr</emphasis>)
114 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a41bb6fa688c9729dc9f0a7c528ad7d80">exception_ptr</link>(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&amp;&#32;__o)&#32;noexcept
117 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_exception_object(__o._M_exception_object)
118 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__o._M_exception_object&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
119 <emphasis role="preprocessor">#endif</emphasis>
120 
121 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&lt;&#32;201103L)&#32;||&#32;defined&#32;(_GLIBCXX_EH_PTR_COMPAT)</emphasis>
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>::*<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a31db05ed784a6ed226fefc685ebc13b4">__safe_bool</link>)();
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;construction&#32;from&#32;nullptr&#32;or&#32;0.</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a31f3ee45d18bb172fb20b5ff01558991">exception_ptr</link>(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a31db05ed784a6ed226fefc685ebc13b4">__safe_bool</link>)&#32;_GLIBCXX_USE_NOEXCEPT;
126 <emphasis role="preprocessor">#endif</emphasis>
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;
129 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ac244e056b65a71e8d8dd1d6da494f012">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;)&#32;_GLIBCXX_USE_NOEXCEPT;
130 
131 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;
133 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ac244e056b65a71e8d8dd1d6da494f012">operator=</link>(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&amp;&#32;__o)&#32;<emphasis role="keyword">noexcept</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a41bb6fa688c9729dc9f0a7c528ad7d80">exception_ptr</link>(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__o)).<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ab3ba9a2aba5540d4813086996d427820">swap</link>(*<emphasis role="keyword">this</emphasis>);
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
137 &#32;&#32;&#32;&#32;&#32;&#32;}
138 <emphasis role="preprocessor">#endif</emphasis>
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ac9f40dccc2da558929a5afcb6f331307">~exception_ptr</link>()&#32;_GLIBCXX_USE_NOEXCEPT;
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
143 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ab3ba9a2aba5540d4813086996d427820">swap</link>(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;)&#32;_GLIBCXX_USE_NOEXCEPT;
144 
145 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_EH_PTR_COMPAT</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Retained&#32;for&#32;compatibility&#32;with&#32;CXXABI_1.3.</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_safe_bool_dummy()&#32;_GLIBCXX_USE_NOEXCEPT
148 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__const__));
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator!()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT
150 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__pure__));
151 &#32;&#32;&#32;&#32;&#32;&#32;operator&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a31db05ed784a6ed226fefc685ebc13b4">__safe_bool</link>()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT;
152 <emphasis role="preprocessor">#endif</emphasis>
153 
154 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_exception_object;&#32;}
157 <emphasis role="preprocessor">#endif</emphasis>
158 
159 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&gt;=&#32;201907L&#32;\</emphasis>
160 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!&#32;defined&#32;_GLIBCXX_EH_PTR_RELOPS_COMPAT</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a712c84bb4e7d5d67cde94235c0b61a95">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
163 <emphasis role="preprocessor">#else</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_1aa48e700d823672fe7012560a9a4d7544">_GLIBCXX_EH_PTR_USED</link>&#32;<emphasis role="keywordtype">bool</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a712c84bb4e7d5d67cde94235c0b61a95">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__y)
166 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT
167 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_exception_object&#32;==&#32;__y._M_exception_object;&#32;}
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_1aa48e700d823672fe7012560a9a4d7544">_GLIBCXX_EH_PTR_USED</link>&#32;<emphasis role="keywordtype">bool</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ac0e955eb70246056d7a6eba9a3d5ce75">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__y)
171 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT
172 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_exception_object&#32;!=&#32;__y._M_exception_object;&#32;}
173 <emphasis role="preprocessor">#endif</emphasis>
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>std::type_info*
176 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a077f057568146bb094b5209833caf6e1">__cxa_exception_type</link>()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT
177 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__pure__));
178 &#32;&#32;&#32;&#32;};
179 
180 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_1aa48e700d823672fe7012560a9a4d7544">_GLIBCXX_EH_PTR_USED</link>
181 &#32;&#32;&#32;&#32;inline
182 &#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>::<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>()&#32;_GLIBCXX_USE_NOEXCEPT
183 &#32;&#32;&#32;&#32;:&#32;_M_exception_object(0)
184 &#32;&#32;&#32;&#32;{&#32;}
185 
186 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_1aa48e700d823672fe7012560a9a4d7544">_GLIBCXX_EH_PTR_USED</link>
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
188 &#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a41bb6fa688c9729dc9f0a7c528ad7d80">exception_ptr::exception_ptr</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__other)
189 &#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT
190 &#32;&#32;&#32;&#32;:&#32;_M_exception_object(__other._M_exception_object)
191 &#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_exception_object)
193 &#32;&#32;&#32;&#32;_M_addref();
194 &#32;&#32;&#32;&#32;}
195 
196 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_1aa48e700d823672fe7012560a9a4d7544">_GLIBCXX_EH_PTR_USED</link>
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
198 &#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ac9f40dccc2da558929a5afcb6f331307">exception_ptr::~exception_ptr</link>()&#32;_GLIBCXX_USE_NOEXCEPT
199 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_exception_object)
201 &#32;&#32;&#32;&#32;_M_release();
202 &#32;&#32;&#32;&#32;}
203 
204 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_1aa48e700d823672fe7012560a9a4d7544">_GLIBCXX_EH_PTR_USED</link>
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;
206 &#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ac244e056b65a71e8d8dd1d6da494f012">exception_ptr::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__other)&#32;_GLIBCXX_USE_NOEXCEPT
207 &#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1a41bb6fa688c9729dc9f0a7c528ad7d80">exception_ptr</link>(__other).<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ab3ba9a2aba5540d4813086996d427820">swap</link>(*<emphasis role="keyword">this</emphasis>);
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
210 &#32;&#32;&#32;&#32;}
211 
212 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__ptr_8h_1aa48e700d823672fe7012560a9a4d7544">_GLIBCXX_EH_PTR_USED</link>
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
214 &#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ab3ba9a2aba5540d4813086996d427820">exception_ptr::swap</link>(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&#32;&amp;__other)&#32;_GLIBCXX_USE_NOEXCEPT
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_exception_object;
217 &#32;&#32;&#32;&#32;&#32;&#32;_M_exception_object&#32;=&#32;__other._M_exception_object;
218 &#32;&#32;&#32;&#32;&#32;&#32;__other._M_exception_object&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
219 &#32;&#32;&#32;&#32;}
220 
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
223 &#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ab2993affdeddd22000ed84de6dfb8f3a">swap</link>(<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__lhs,&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>&amp;&#32;__rhs)
224 &#32;&#32;&#32;&#32;{&#32;__lhs.<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr_1ab3ba9a2aba5540d4813086996d427820">swap</link>(__rhs);&#32;}
225 
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ex&gt;
228 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2cxxabi__init__exception_8h_1a828ecaf2bdddef626693b1f4f331da61">_GLIBCXX_CDTOR_CALLABI</link>
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;__dest_thunk(<emphasis role="keywordtype">void</emphasis>*&#32;__x)
231 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Ex*<emphasis role="keyword">&gt;</emphasis>(__x)-&gt;~_Ex();&#32;}
233 
234 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__exception_ptr</emphasis>
235 
237 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&gt;=&#32;201103L&#32;&amp;&amp;&#32;__cpp_rtti)&#32;||&#32;__cpp_exceptions</emphasis>
238 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ex&gt;
239 &#32;&#32;&#32;&#32;exception_ptr
240 &#32;&#32;&#32;&#32;<link linkend="_group__exceptions_1ga90822fbbd4a65b89480fb64d67fc69b6">make_exception_ptr</link>(_Ex&#32;__ex)&#32;_GLIBCXX_USE_NOEXCEPT
241 &#32;&#32;&#32;&#32;{
242 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L&#32;&amp;&amp;&#32;__cpp_rtti</emphasis>
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ex2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;decay&lt;_Ex&gt;::type;
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__e&#32;=&#32;__cxxabiv1::__cxa_allocate_exception(<emphasis role="keyword">sizeof</emphasis>(_Ex));
245 &#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;__cxxabiv1::__cxa_init_primary_exception(
246 &#32;&#32;&#32;&#32;&#32;&#32;__e,&#32;<emphasis role="keyword">const_cast&lt;</emphasis>std::type_info*<emphasis role="keyword">&gt;</emphasis>(&amp;<emphasis role="keyword">typeid</emphasis>(_Ex)),
247 &#32;&#32;&#32;&#32;&#32;&#32;__exception_ptr::__dest_thunk&lt;_Ex2&gt;);
248 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
249 &#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(__e)&#32;_Ex2(__ex);
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;exception_ptr(__e);
252 &#32;&#32;&#32;&#32;}
253 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
254 &#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;__cxxabiv1::__cxa_free_exception(__e);
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__exceptions_1gafcca609a0e064086e3d37ff25c85ab69">current_exception</link>();
257 &#32;&#32;&#32;&#32;}
258 <emphasis role="preprocessor">#else</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
260 &#32;&#32;&#32;&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;__ex;
262 &#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>(...)
264 &#32;&#32;&#32;&#32;{
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__exceptions_1gafcca609a0e064086e3d37ff25c85ab69">current_exception</link>();
266 &#32;&#32;&#32;&#32;}
267 <emphasis role="preprocessor">#endif</emphasis>
268 &#32;&#32;&#32;&#32;}
269 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;no&#32;RTTI&#32;and&#32;no&#32;exceptions</emphasis>
270 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;always_inline&#32;so&#32;the&#32;linker&#32;will&#32;never&#32;use&#32;this&#32;useless&#32;definition</emphasis>
271 &#32;&#32;<emphasis role="comment">//&#32;instead&#32;of&#32;a&#32;working&#32;one&#32;compiled&#32;with&#32;RTTI&#32;and/or&#32;exceptions&#32;enabled.</emphasis>
272 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ex&gt;
273 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__always_inline__))
274 &#32;&#32;&#32;&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>
275 &#32;&#32;&#32;&#32;<link linkend="_group__exceptions_1ga90822fbbd4a65b89480fb64d67fc69b6">make_exception_ptr</link>(_Ex)&#32;_GLIBCXX_USE_NOEXCEPT
276 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>();&#32;}
277 <emphasis role="preprocessor">#endif</emphasis>
278 
279 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_EH_PTR_USED</emphasis>
280 
282 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
283 
284 }&#32;<emphasis role="comment">//&#32;extern&#32;&quot;C++&quot;</emphasis>
285 
286 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;pop</emphasis>
287 
288 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
