<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structlest_1_1is__container" xml:lang="en-US">
<title>lest::is_container&lt; T &gt; Struct Template Reference</title>
<indexterm><primary>lest::is_container&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;lest.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename U &gt; </para><para>static auto <link linkend="_structlest_1_1is__container_1a529292f3e3652a85f3fde8bd1fb5c29a">test</link> (int) -&gt; decltype(std::declval&lt; U &gt;().begin()==std::declval&lt; U &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(), std::true_type())</para>
</listitem>
            <listitem><para>template&lt;typename &gt; </para><para>static auto <link linkend="_structlest_1_1is__container_1ab115a3c257812e1b095434db34b405ae">test</link> (...) -&gt; std::false_type</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para>static auto <link linkend="_structlest_1_1is__container_1a529292f3e3652a85f3fde8bd1fb5c29a">test</link> (int) -&gt; decltype(std::declval&lt; U &gt;().begin()==std::declval&lt; U &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(), std::true_type())</para>
</listitem>
            <listitem><para>template&lt;typename &gt; </para><para>static auto <link linkend="_structlest_1_1is__container_1ab115a3c257812e1b095434db34b405ae">test</link> (...) -&gt; std::false_type</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para>static auto <link linkend="_structlest_1_1is__container_1a529292f3e3652a85f3fde8bd1fb5c29a">test</link> (int) -&gt; decltype(std::declval&lt; U &gt;().begin()==std::declval&lt; U &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(), std::true_type())</para>
</listitem>
            <listitem><para>template&lt;typename &gt; </para><para>static auto <link linkend="_structlest_1_1is__container_1ab115a3c257812e1b095434db34b405ae">test</link> (...) -&gt; std::false_type</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structlest_1_1is__container_1a8ad3ebe19fc6637df51097715a474fdf">value</link> = std::is_same&lt; decltype( <link linkend="_structlest_1_1test">test</link>&lt;T&gt;(0) ), std::true_type &gt;<link linkend="_classvalue">::value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_structlest_1_1is__container_1ab115a3c257812e1b095434db34b405ae"/><section>
    <title>test()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>test</primary><secondary>lest::is_container&lt; T &gt;</secondary></indexterm>
<indexterm><primary>lest::is_container&lt; T &gt;</primary><secondary>test</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structlest_1_1is__container">lest::is_container</link>&lt; T &gt;::test ( ...) -&gt;  std::false_type<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structlest_1_1is__container_1ab115a3c257812e1b095434db34b405ae"/><section>
    <title>test()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>test</primary><secondary>lest::is_container&lt; T &gt;</secondary></indexterm>
<indexterm><primary>lest::is_container&lt; T &gt;</primary><secondary>test</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structlest_1_1is__container">lest::is_container</link>&lt; T &gt;::test ( ...) -&gt;  std::false_type<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structlest_1_1is__container_1ab115a3c257812e1b095434db34b405ae"/><section>
    <title>test()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>test</primary><secondary>lest::is_container&lt; T &gt;</secondary></indexterm>
<indexterm><primary>lest::is_container&lt; T &gt;</primary><secondary>test</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structlest_1_1is__container">lest::is_container</link>&lt; T &gt;::test ( ...) -&gt;  std::false_type<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structlest_1_1is__container_1a529292f3e3652a85f3fde8bd1fb5c29a"/><section>
    <title>test()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>test</primary><secondary>lest::is_container&lt; T &gt;</secondary></indexterm>
<indexterm><primary>lest::is_container&lt; T &gt;</primary><secondary>test</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structlest_1_1is__container">lest::is_container</link>&lt; T &gt;::test (int ) -&gt;  decltype(std::declval&lt; U &gt;().begin()==std::declval&lt; U &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(), std::true_type())<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structlest_1_1is__container_1a529292f3e3652a85f3fde8bd1fb5c29a"/><section>
    <title>test()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>test</primary><secondary>lest::is_container&lt; T &gt;</secondary></indexterm>
<indexterm><primary>lest::is_container&lt; T &gt;</primary><secondary>test</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structlest_1_1is__container">lest::is_container</link>&lt; T &gt;::test (int ) -&gt;  decltype(std::declval&lt; U &gt;().begin()==std::declval&lt; U &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(), std::true_type())<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_structlest_1_1is__container_1a529292f3e3652a85f3fde8bd1fb5c29a"/><section>
    <title>test()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>test</primary><secondary>lest::is_container&lt; T &gt;</secondary></indexterm>
<indexterm><primary>lest::is_container&lt; T &gt;</primary><secondary>test</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput>static auto <link linkend="_structlest_1_1is__container">lest::is_container</link>&lt; T &gt;::test (int ) -&gt;  decltype(std::declval&lt; U &gt;().begin()==std::declval&lt; U &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(), std::true_type())<computeroutput>[static]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_structlest_1_1is__container_1a8ad3ebe19fc6637df51097715a474fdf"/><section>
    <title>value</title>
<indexterm><primary>value</primary><secondary>lest::is_container&lt; T &gt;</secondary></indexterm>
<indexterm><primary>lest::is_container&lt; T &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_structlest_1_1is__container">lest::is_container</link>&lt; T &gt;<link linkend="_classvalue">::value</link> = std::is_same&lt; decltype( <link linkend="_structlest_1_1test">test</link>&lt;T&gt;(0) ), std::true_type &gt;<link linkend="_classvalue">::value</link><computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<para>
The documentation for this struct was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/mINI-master/tests/lest/<link linkend="__classes_2lib_2m_i_n_i-master_2tests_2lest_2lest_8hpp">lest.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/mINI-master/tests/lest/<link linkend="_lib_2m_i_n_i-master_2tests_2lest_2lest_8hpp">lest.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/mINI-master/tests/lest/<link linkend="__old_2_classes_2lib_2m_i_n_i-master_2tests_2lest_2lest_8hpp">lest.hpp</link></section>
</section>
