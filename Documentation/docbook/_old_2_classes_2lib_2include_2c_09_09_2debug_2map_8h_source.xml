<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2debug_2map_8h_source" xml:lang="en-US">
<title>map.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/map.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Debugging&#32;map&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2003-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_MAP_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_MAP_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_sequence.h&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_container.h&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_iterator.h&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 <emphasis role="keyword">namespace&#32;</emphasis>__debug
40 {
42 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;std::less&lt;_Key&gt;,
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;std::allocator&lt;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&gt;&#32;&gt;
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>map
45 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__container">__gnu_debug::_Safe_container</link>&lt;
46 &#32;&#32;&#32;&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;,&#32;_Allocator,
47 &#32;&#32;&#32;&#32;__gnu_debug::_Safe_node_sequence&gt;,
48 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;_GLIBCXX_STD_C::map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;
49 &#32;&#32;&#32;&#32;{
50 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_GLIBCXX_STD_C::map&lt;
51 &#32;&#32;&#32;&#32;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base;
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__container">__gnu_debug::_Safe_container</link>&lt;
53 &#32;&#32;&#32;&#32;map,&#32;_Allocator,&#32;<link linkend="_class____gnu__debug_1_1___safe__node__sequence">__gnu_debug::_Safe_node_sequence</link>&gt;&#32;&#32;_Safe;
54 
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_iterator&#32;&#32;&#32;&#32;_Base_const_iterator;
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::iterator&#32;&#32;&#32;&#32;&#32;&#32;_Base_iterator;
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___equal__to">__gnu_debug::_Equal_to&lt;_Base_const_iterator&gt;</link>&#32;_Equal;
58 
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ItT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SeqT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CatT&gt;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;class&#32;::__gnu_debug::_Safe_iterator;
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reference&#32;wrapper&#32;for&#32;base&#32;class.&#32;Disambiguates&#32;map(const&#32;_Base&amp;)</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;copy&#32;constructor&#32;by&#32;requiring&#32;a&#32;user-defined&#32;conversion.</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;PR&#32;libstdc++/90102.</emphasis>
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Base_ref
66 &#32;&#32;&#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;_Base_ref(<emphasis role="keyword">const</emphasis>&#32;_Base&amp;&#32;__r)&#32;:&#32;_M_ref(__r)&#32;{&#32;}
68 
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Base&amp;&#32;_M_ref;
70 &#32;&#32;&#32;&#32;&#32;&#32;};
71 
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;types:</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_type;
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mapped_type;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Compare&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_compare;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Allocator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt;_Base_iterator, map&gt;</link>
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt;_Base_const_iterator, map&gt;</link>
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::difference_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_pointer&#32;&#32;&#32;&#32;&#32;const_pointer;
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.1.1&#32;construct/copy/destroy:</emphasis>
95 
96 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;map()&#32;:&#32;_Base()&#32;{&#32;}
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;map&amp;&#32;__x)
100 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__x)&#32;{&#32;}
101 
102 &#32;&#32;&#32;&#32;&#32;&#32;~map()&#32;{&#32;}
103 <emphasis role="preprocessor">#else</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;map()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
105 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;map&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
106 &#32;&#32;&#32;&#32;&#32;&#32;map(map&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;map(initializer_list&lt;value_type&gt;&#32;__l,
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__c&#32;=&#32;_Compare(),
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
111 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__l,&#32;__c,&#32;__a)&#32;{&#32;}
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
115 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)&#32;{&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;map(<emphasis role="keyword">const</emphasis>&#32;map&amp;&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
118 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__m,&#32;__a)&#32;{&#32;}
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;map(map&amp;&amp;&#32;__m,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m),&#32;__a))&#32;)
122 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Safe(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m),&#32;__a),
123 &#32;&#32;&#32;&#32;_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m),&#32;__a)&#32;{&#32;}
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;map(initializer_list&lt;value_type&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
126 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__l,&#32;__a)&#32;{&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
129 &#32;&#32;&#32;&#32;map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
131 &#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1ad801dca99ec542225b4b1127b8d81568">__glibcxx_check_valid_constructor_range</link>(__first,&#32;__last)),
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(__last),&#32;__a)
134 &#32;&#32;&#32;&#32;{&#32;}
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;~map()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
137 <emphasis role="preprocessor">#endif</emphasis>
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;map(_Base_ref&#32;__x)
140 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__x._M_ref)&#32;{&#32;}
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;map(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())
144 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__comp,&#32;__a)&#32;{&#32;}
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
147 &#32;&#32;&#32;&#32;map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__comp&#32;=&#32;_Compare(),
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;__a&#32;=&#32;_Allocator())
150 &#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1ad801dca99ec542225b4b1127b8d81568">__glibcxx_check_valid_constructor_range</link>(__first,&#32;__last)),
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__gnu_debug::__base</link>(__last),
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__a)&#32;{&#32;}
154 
155 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;map&amp;
157 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;map&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
158 
159 &#32;&#32;&#32;&#32;&#32;&#32;map&amp;
160 &#32;&#32;&#32;&#32;&#32;&#32;operator=(map&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;map&amp;
163 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
164 &#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;_Base::operator=(__l);
166 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_all();
167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
168 &#32;&#32;&#32;&#32;&#32;&#32;}
169 <emphasis role="preprocessor">#endif</emphasis>
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;133.&#32;map&#32;missing&#32;get_allocator()</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::get_allocator;
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators:</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;iterator
177 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
178 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::begin(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
179 
180 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
181 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
182 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::begin(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;iterator
185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
186 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::end(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
187 
188 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
189 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
190 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::end(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
193 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
194 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
197 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
198 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
201 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
202 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(begin());&#32;}
203 
204 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
205 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
206 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
207 
208 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
210 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::begin(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
214 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::end(),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
216 
217 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
218 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
222 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
224 <emphasis role="preprocessor">#endif</emphasis>
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;capacity:</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::empty;
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::size;
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::max_size;
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.1.2&#32;element&#32;access:</emphasis>
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::operator[];
233 
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;464.&#32;Suggestion&#32;for&#32;new&#32;member&#32;functions&#32;in&#32;standard&#32;containers.</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::at;
237 
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers:</emphasis>
239 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
241 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
242 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::emplace(std::forward&lt;_Args&gt;(__args)...);
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
246 &#32;&#32;&#32;&#32;}
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
249 &#32;&#32;&#32;&#32;iterator
250 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
251 &#32;&#32;&#32;&#32;{
252 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__pos);
253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::emplace_hint(__pos.base(),&#32;std::forward&lt;_Args&gt;(__args)...),
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
258 &#32;&#32;&#32;&#32;}
259 <emphasis role="preprocessor">#endif</emphasis>
260 
261 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
262 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
263 &#32;&#32;&#32;&#32;&#32;&#32;{
264 &#32;&#32;&#32;&#32;std::pair&lt;_Base_iterator,&#32;bool&gt;&#32;__res&#32;=&#32;_Base::insert(__x);
265 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;iterator,&#32;bool&gt;(iterator(__res.first,&#32;<emphasis role="keyword">this</emphasis>),
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res.second);
267 &#32;&#32;&#32;&#32;&#32;&#32;}
268 
269 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
273 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
274 &#32;&#32;&#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
277 &#32;&#32;&#32;&#32;&#32;&#32;}
278 
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::enable_if&lt;std::is_constructible&lt;value_type,
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pair&amp;&amp;&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
282 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
283 &#32;&#32;&#32;&#32;insert(_Pair&amp;&amp;&#32;__x)
284 &#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::insert(std::forward&lt;_Pair&gt;(__x));
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
287 &#32;&#32;&#32;&#32;}
288 <emphasis role="preprocessor">#endif</emphasis>
289 
290 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
292 &#32;&#32;&#32;&#32;&#32;&#32;insert(std::initializer_list&lt;value_type&gt;&#32;__list)
293 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Base::insert(__list);&#32;}
294 <emphasis role="preprocessor">#endif</emphasis>
295 
296 &#32;&#32;&#32;&#32;&#32;&#32;iterator
297 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
299 <emphasis role="preprocessor">#else</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
301 <emphasis role="preprocessor">#endif</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;{
303 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__position);
304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::insert(__position.base(),&#32;__x),&#32;<emphasis role="keyword">this</emphasis>);
305 &#32;&#32;&#32;&#32;&#32;&#32;}
306 
307 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
310 &#32;&#32;&#32;&#32;&#32;&#32;iterator
311 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
312 &#32;&#32;&#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__position);
314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::insert(__position.base(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x)),&#32;<emphasis role="keyword">this</emphasis>&#32;};
315 &#32;&#32;&#32;&#32;&#32;&#32;}
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::enable_if&lt;std::is_constructible&lt;value_type,
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pair&amp;&amp;&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
320 &#32;&#32;&#32;&#32;iterator
321 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;_Pair&amp;&amp;&#32;__x)
322 &#32;&#32;&#32;&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__position);
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::insert(__position.base(),&#32;std::forward&lt;_Pair&gt;(__x)),
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
329 &#32;&#32;&#32;&#32;}
330 <emphasis role="preprocessor">#endif</emphasis>
331 
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
333 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
334 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
335 &#32;&#32;&#32;&#32;{
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">__gnu_debug::_Distance_traits&lt;_InputIterator&gt;::__type</link>&#32;__dist;
337 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a3feecb348a86e8cfcb82c62cb0ecae5e">__glibcxx_check_valid_range2</link>(__first,&#32;__last,&#32;__dist);
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dist.second&#32;&gt;=&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a189d83cf02a806b7262facbf260a3af7">__gnu_debug::__dp_sign</link>)
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::insert(<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__gnu_debug::__unsafe</link>(__first),
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__gnu_debug::__unsafe</link>(__last));
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::insert(__first,&#32;__last);
344 &#32;&#32;&#32;&#32;}
345 
346 
347 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try_emplace(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::try_emplace(__k,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
355 &#32;&#32;&#32;&#32;}
356 
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try_emplace(key_type&amp;&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::try_emplace(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
364 &#32;&#32;&#32;&#32;}
365 
366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try_emplace(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__hint);
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::try_emplace(__hint.base(),&#32;__k,
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...),
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
378 &#32;&#32;&#32;&#32;}
379 
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try_emplace(const_iterator&#32;__hint,&#32;key_type&amp;&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
384 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__hint);
385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::try_emplace(__hint.base(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...),
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
391 &#32;&#32;&#32;&#32;}
392 
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_or_assign(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
396 &#32;&#32;&#32;&#32;{
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::insert_or_assign(__k,
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj));
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
400 &#32;&#32;&#32;&#32;}
401 
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_or_assign(key_type&amp;&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
405 &#32;&#32;&#32;&#32;{
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::insert_or_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj));
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__res.second&#32;};
409 &#32;&#32;&#32;&#32;}
410 
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_or_assign(const_iterator&#32;__hint,
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
415 &#32;&#32;&#32;&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__hint);
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::insert_or_assign(__hint.base(),&#32;__k,
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj)),
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
423 &#32;&#32;&#32;&#32;}
424 
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_or_assign(const_iterator&#32;__hint,&#32;key_type&amp;&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
429 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__hint);
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::insert_or_assign(__hint.base(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj)),
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
436 &#32;&#32;&#32;&#32;}
437 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
438 
439 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::node_type;
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>insert_return_type&#32;=&#32;_Node_insert_return&lt;iterator,&#32;node_type&gt;;
442 
443 &#32;&#32;&#32;&#32;&#32;&#32;node_type
444 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__position)
445 &#32;&#32;&#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a991c7e564ec0f174f81e0b65bdd236cf">__glibcxx_check_erase</link>(__position);
447 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__position.base()));
448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::extract(__position.base());
449 &#32;&#32;&#32;&#32;&#32;&#32;}
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;node_type
452 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
453 &#32;&#32;&#32;&#32;&#32;&#32;{
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__position&#32;=&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__key);
455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__position&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;extract(__position);
457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
458 &#32;&#32;&#32;&#32;&#32;&#32;}
459 
460 &#32;&#32;&#32;&#32;&#32;&#32;insert_return_type
461 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
462 &#32;&#32;&#32;&#32;&#32;&#32;{
463 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;_Base::insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));
464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;{&#32;__ret.position,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;__ret.inserted,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ret.node)&#32;};
466 &#32;&#32;&#32;&#32;&#32;&#32;}
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;iterator
469 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
470 &#32;&#32;&#32;&#32;&#32;&#32;{
471 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a14508f9347d4fb4566b1a16f8ce685d5">__glibcxx_check_insert</link>(__hint);
472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::insert(__hint.base(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh)),&#32;<emphasis role="keyword">this</emphasis>&#32;};
473 &#32;&#32;&#32;&#32;&#32;&#32;}
474 
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::merge;
476 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
477 
478 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
479 &#32;&#32;&#32;&#32;&#32;&#32;iterator
480 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
481 &#32;&#32;&#32;&#32;&#32;&#32;{
482 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a991c7e564ec0f174f81e0b65bdd236cf">__glibcxx_check_erase</link>(__position);
483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;erase(__position.base()),&#32;<emphasis role="keyword">this</emphasis>&#32;};
484 &#32;&#32;&#32;&#32;&#32;&#32;}
485 
486 &#32;&#32;&#32;&#32;&#32;&#32;_Base_iterator
487 &#32;&#32;&#32;&#32;&#32;&#32;erase(_Base_const_iterator&#32;__position)
488 &#32;&#32;&#32;&#32;&#32;&#32;{
489 &#32;&#32;&#32;&#32;__glibcxx_check_erase2(__position);
490 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__position));
491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::erase(__position);
492 &#32;&#32;&#32;&#32;&#32;&#32;}
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>
495 &#32;&#32;&#32;&#32;&#32;&#32;iterator
496 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
497 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;erase(const_iterator(__position));&#32;}
498 <emphasis role="preprocessor">#else</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
500 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
501 &#32;&#32;&#32;&#32;&#32;&#32;{
502 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a991c7e564ec0f174f81e0b65bdd236cf">__glibcxx_check_erase</link>(__position);
503 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__position.base()));
504 &#32;&#32;&#32;&#32;_Base::erase(__position.base());
505 &#32;&#32;&#32;&#32;&#32;&#32;}
506 <emphasis role="preprocessor">#endif</emphasis>
507 
508 &#32;&#32;&#32;&#32;&#32;&#32;size_type
509 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
510 &#32;&#32;&#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;_Base_iterator&#32;__victim&#32;=&#32;_Base::find(__x);
512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__victim&#32;==&#32;_Base::end())
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
514 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
515 &#32;&#32;&#32;&#32;&#32;&#32;{
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__victim));
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base::erase(__victim);
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
519 &#32;&#32;&#32;&#32;&#32;&#32;}
520 &#32;&#32;&#32;&#32;&#32;&#32;}
521 
522 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
523 &#32;&#32;&#32;&#32;&#32;&#32;iterator
524 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
525 &#32;&#32;&#32;&#32;&#32;&#32;{
526 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
527 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;151.&#32;can&apos;t&#32;currently&#32;clear()&#32;empty&#32;container</emphasis>
528 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a7f5f459ee711afceff11d342059a5bcd">__glibcxx_check_erase_range</link>(__first,&#32;__last);
529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Base_const_iterator&#32;__victim&#32;=&#32;__first.base();
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__victim&#32;!=&#32;__last.base();&#32;++__victim)
531 &#32;&#32;&#32;&#32;&#32;&#32;{
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(__victim&#32;!=&#32;_Base::cend(),
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa35c44d6fbfe5a3fb8195fe467f89f0e">__gnu_debug::__msg_valid_range</link>)
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__first,&#32;<emphasis role="stringliteral">&quot;first&quot;</emphasis>)
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__last,&#32;<emphasis role="stringliteral">&quot;last&quot;</emphasis>));
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__victim));
537 &#32;&#32;&#32;&#32;&#32;&#32;}
538 
539 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::erase(__first.base(),&#32;__last.base()),&#32;<emphasis role="keyword">this</emphasis>&#32;};
540 &#32;&#32;&#32;&#32;&#32;&#32;}
541 <emphasis role="preprocessor">#else</emphasis>
542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
543 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
544 &#32;&#32;&#32;&#32;&#32;&#32;{
545 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
546 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;151.&#32;can&apos;t&#32;currently&#32;clear()&#32;empty&#32;container</emphasis>
547 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1a7f5f459ee711afceff11d342059a5bcd">__glibcxx_check_erase_range</link>(__first,&#32;__last);
548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Base_iterator&#32;__victim&#32;=&#32;__first.base();
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__victim&#32;!=&#32;__last.base();&#32;++__victim)
550 &#32;&#32;&#32;&#32;&#32;&#32;{
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(__victim&#32;!=&#32;_Base::end(),
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa35c44d6fbfe5a3fb8195fe467f89f0e">__gnu_debug::__msg_valid_range</link>)
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__first,&#32;<emphasis role="stringliteral">&quot;first&quot;</emphasis>)
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__last,&#32;<emphasis role="stringliteral">&quot;last&quot;</emphasis>));
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_invalidate_if(_Equal(__victim));
556 &#32;&#32;&#32;&#32;&#32;&#32;}
557 &#32;&#32;&#32;&#32;_Base::erase(__first.base(),&#32;__last.base());
558 &#32;&#32;&#32;&#32;&#32;&#32;}
559 <emphasis role="preprocessor">#endif</emphasis>
560 
561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
562 &#32;&#32;&#32;&#32;&#32;&#32;swap(map&amp;&#32;__x)
563 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(&#32;<emphasis role="keyword">noexcept</emphasis>(declval&lt;_Base&amp;&gt;().swap(__x))&#32;)
564 &#32;&#32;&#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;_Safe::_M_swap(__x);
566 &#32;&#32;&#32;&#32;_Base::swap(__x);
567 &#32;&#32;&#32;&#32;&#32;&#32;}
568 
569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
570 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
571 &#32;&#32;&#32;&#32;&#32;&#32;{
572 &#32;&#32;&#32;&#32;this-&gt;_M_invalidate_all();
573 &#32;&#32;&#32;&#32;_Base::clear();
574 &#32;&#32;&#32;&#32;&#32;&#32;}
575 
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers:</emphasis>
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::key_comp;
578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::value_comp;
579 
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.1.3&#32;map&#32;operations:</emphasis>
581 &#32;&#32;&#32;&#32;&#32;&#32;iterator
582 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
583 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
584 
585 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
589 &#32;&#32;&#32;&#32;iterator
590 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
591 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
592 <emphasis role="preprocessor">#endif</emphasis>
593 
594 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
595 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
596 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
597 
598 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
602 &#32;&#32;&#32;&#32;const_iterator
603 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
604 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::find(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
605 <emphasis role="preprocessor">#endif</emphasis>
606 
607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::count;
608 
609 &#32;&#32;&#32;&#32;&#32;&#32;iterator
610 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
611 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
612 
613 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
617 &#32;&#32;&#32;&#32;iterator
618 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
619 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
620 <emphasis role="preprocessor">#endif</emphasis>
621 
622 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
623 &#32;&#32;&#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
624 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
625 
626 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
630 &#32;&#32;&#32;&#32;const_iterator
631 &#32;&#32;&#32;&#32;lower_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
632 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::lower_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
633 <emphasis role="preprocessor">#endif</emphasis>
634 
635 &#32;&#32;&#32;&#32;&#32;&#32;iterator
636 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
637 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
638 
639 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
643 &#32;&#32;&#32;&#32;iterator
644 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
645 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
646 <emphasis role="preprocessor">#endif</emphasis>
647 
648 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
649 &#32;&#32;&#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
650 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>);&#32;}
651 
652 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
656 &#32;&#32;&#32;&#32;const_iterator
657 &#32;&#32;&#32;&#32;upper_bound(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
658 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;_Base::upper_bound(__x),&#32;<emphasis role="keyword">this</emphasis>&#32;};&#32;}
659 <emphasis role="preprocessor">#endif</emphasis>
660 
661 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,iterator&gt;
662 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
663 &#32;&#32;&#32;&#32;&#32;&#32;{
664 &#32;&#32;&#32;&#32;std::pair&lt;_Base_iterator,&#32;_Base_iterator&gt;&#32;__res&#32;=
665 &#32;&#32;&#32;&#32;_Base::equal_range(__x);
666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(iterator(__res.first,&#32;<emphasis role="keyword">this</emphasis>),
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(__res.second,&#32;<emphasis role="keyword">this</emphasis>));
668 &#32;&#32;&#32;&#32;&#32;&#32;}
669 
670 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
674 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
675 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
676 &#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::equal_range(__x);
678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;{&#32;__res.second,&#32;<emphasis role="keyword">this</emphasis>&#32;}&#32;};
679 &#32;&#32;&#32;&#32;}
680 <emphasis role="preprocessor">#endif</emphasis>
681 
682 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,const_iterator&gt;
683 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
684 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
685 &#32;&#32;&#32;&#32;std::pair&lt;_Base_const_iterator,&#32;_Base_const_iterator&gt;&#32;__res&#32;=
686 &#32;&#32;&#32;&#32;_Base::equal_range(__x);
687 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(const_iterator(__res.first,&#32;<emphasis role="keyword">this</emphasis>),
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator(__res.second,&#32;<emphasis role="keyword">this</emphasis>));
689 &#32;&#32;&#32;&#32;&#32;&#32;}
690 
691 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt,
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Compare,&#32;_Kt&gt;::type&gt;
695 &#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
696 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
697 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;_Base::equal_range(__x);
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;{&#32;__res.first,&#32;<emphasis role="keyword">this</emphasis>&#32;},&#32;{&#32;__res.second,&#32;<emphasis role="keyword">this</emphasis>&#32;}&#32;};
700 &#32;&#32;&#32;&#32;}
701 <emphasis role="preprocessor">#endif</emphasis>
702 
703 &#32;&#32;&#32;&#32;&#32;&#32;_Base&amp;
704 &#32;&#32;&#32;&#32;&#32;&#32;_M_base()&#32;_GLIBCXX_NOEXCEPT&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
705 
706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Base&amp;
707 &#32;&#32;&#32;&#32;&#32;&#32;_M_base()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
708 &#32;&#32;&#32;&#32;};
709 
710 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
711 
712 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;__iter_to_alloc_t&lt;_InputIterator&gt;&gt;,
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
718 &#32;&#32;&#32;&#32;map(_InputIterator,&#32;_InputIterator,
719 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
720 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;__iter_key_t&lt;_InputIterator&gt;,&#32;__iter_val_t&lt;_InputIterator&gt;,
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_Allocator&gt;;
722 
723 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;_Key&gt;,
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;,
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
727 &#32;&#32;&#32;&#32;map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
728 &#32;&#32;&#32;&#32;_Compare&#32;=&#32;_Compare(),&#32;_Allocator&#32;=&#32;_Allocator())
729 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;;
730 
731 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
734 &#32;&#32;&#32;&#32;map(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
735 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;__iter_key_t&lt;_InputIterator&gt;,&#32;__iter_val_t&lt;_InputIterator&gt;,
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;less&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,&#32;_Allocator&gt;;
737 
738 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
740 &#32;&#32;&#32;&#32;map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,&#32;_Allocator)
741 &#32;&#32;&#32;&#32;-&gt;&#32;map&lt;_Key,&#32;_Tp,&#32;less&lt;_Key&gt;,&#32;_Allocator&gt;;
742 
743 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;deduction&#32;guides</emphasis>
744 
745 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
747 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
748 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__lhs,
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__rhs)
750 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;==&#32;__rhs._M_base();&#32;}
751 
752 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
753 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
754 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;
755 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__lhs,
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Alloc&gt;&amp;&#32;__rhs)
757 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&lt;=&gt;&#32;__rhs._M_base();&#32;}
758 <emphasis role="preprocessor">#else</emphasis>
759 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
761 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
762 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__lhs,
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__rhs)
764 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;!=&#32;__rhs._M_base();&#32;}
765 
766 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
768 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
769 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__lhs,
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__rhs)
771 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&lt;&#32;__rhs._M_base();&#32;}
772 
773 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
775 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
776 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__lhs,
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__rhs)
778 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&lt;=&#32;__rhs._M_base();&#32;}
779 
780 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
782 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
783 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__lhs,
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__rhs)
785 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&gt;=&#32;__rhs._M_base();&#32;}
786 
787 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
789 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
790 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__lhs,
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__rhs)
792 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_base()&#32;&gt;&#32;__rhs._M_base();&#32;}
793 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
794 
795 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
797 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
798 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__lhs,
799 &#32;&#32;&#32;&#32;&#32;map&lt;_Key,&#32;_Tp,&#32;_Compare,&#32;_Allocator&gt;&amp;&#32;__rhs)
800 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__lhs.swap(__rhs)))
801 &#32;&#32;&#32;&#32;{&#32;__lhs.swap(__rhs);&#32;}
802 
803 }&#32;<emphasis role="comment">//&#32;namespace&#32;__debug</emphasis>
804 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
805 
806 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
