<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2locale__facets__nonio_8h_source" xml:lang="en-US">
<title>locale_facets_nonio.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/locale_facets_nonio.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Locale&#32;support&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//</emphasis>
31 <emphasis role="comment">//&#32;ISO&#32;C++&#32;14882:&#32;22.1&#32;&#32;Locales</emphasis>
32 <emphasis role="comment">//</emphasis>
33 
34 <emphasis role="preprocessor">#ifndef&#32;_LOCALE_FACETS_NONIO_H</emphasis>
35 <emphasis role="preprocessor">#define&#32;_LOCALE_FACETS_NONIO_H&#32;1</emphasis>
36 
37 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;struct&#32;tm</emphasis>
40 
41 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
42 {
43 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
52 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>time_base
53 &#32;&#32;{
54 &#32;&#32;<emphasis role="keyword">public</emphasis>:
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;dateorder&#32;{&#32;no_order,&#32;dmy,&#32;mdy,&#32;ymd,&#32;ydm&#32;};
56 &#32;&#32;};
57 
58 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__timepunct_cache&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
60 &#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;List&#32;of&#32;all&#32;known&#32;timezones,&#32;with&#32;GMT&#32;first.</emphasis>
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;_S_timezones[14];
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_date_format;
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_date_era_format;
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_time_format;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_time_era_format;
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_date_time_format;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_date_time_era_format;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_am;
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pm;
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_am_pm_format;
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Day&#32;names,&#32;starting&#32;with&#32;&quot;C&quot;&apos;s&#32;Sunday.</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_day1;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_day2;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_day3;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_day4;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_day5;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_day6;
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_day7;
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Abbreviated&#32;day&#32;names,&#32;starting&#32;with&#32;&quot;C&quot;&apos;s&#32;Sun.</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_aday1;
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_aday2;
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_aday3;
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_aday4;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_aday5;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_aday6;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_aday7;
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Month&#32;names,&#32;starting&#32;with&#32;&quot;C&quot;&apos;s&#32;January.</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month01;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month02;
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month03;
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month04;
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month05;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month06;
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month07;
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month08;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month09;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month10;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month11;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_month12;
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Abbreviated&#32;month&#32;names,&#32;starting&#32;with&#32;&quot;C&quot;&apos;s&#32;Jan.</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth01;
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth02;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth03;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth04;
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth05;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth06;
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth07;
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth08;
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth09;
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth10;
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth11;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_amonth12;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocated;
121 
122 &#32;&#32;&#32;&#32;&#32;&#32;__timepunct_cache(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;:&#32;facet(__refs),
123 &#32;&#32;&#32;&#32;&#32;&#32;_M_date_format(0),&#32;_M_date_era_format(0),&#32;_M_time_format(0),
124 &#32;&#32;&#32;&#32;&#32;&#32;_M_time_era_format(0),&#32;_M_date_time_format(0),
125 &#32;&#32;&#32;&#32;&#32;&#32;_M_date_time_era_format(0),&#32;_M_am(0),&#32;_M_pm(0),
126 &#32;&#32;&#32;&#32;&#32;&#32;_M_am_pm_format(0),&#32;_M_day1(0),&#32;_M_day2(0),&#32;_M_day3(0),
127 &#32;&#32;&#32;&#32;&#32;&#32;_M_day4(0),&#32;_M_day5(0),&#32;_M_day6(0),&#32;_M_day7(0),
128 &#32;&#32;&#32;&#32;&#32;&#32;_M_aday1(0),&#32;_M_aday2(0),&#32;_M_aday3(0),&#32;_M_aday4(0),
129 &#32;&#32;&#32;&#32;&#32;&#32;_M_aday5(0),&#32;_M_aday6(0),&#32;_M_aday7(0),&#32;_M_month01(0),
130 &#32;&#32;&#32;&#32;&#32;&#32;_M_month02(0),&#32;_M_month03(0),&#32;_M_month04(0),&#32;_M_month05(0),
131 &#32;&#32;&#32;&#32;&#32;&#32;_M_month06(0),&#32;_M_month07(0),&#32;_M_month08(0),&#32;_M_month09(0),
132 &#32;&#32;&#32;&#32;&#32;&#32;_M_month10(0),&#32;_M_month11(0),&#32;_M_month12(0),&#32;_M_amonth01(0),
133 &#32;&#32;&#32;&#32;&#32;&#32;_M_amonth02(0),&#32;_M_amonth03(0),&#32;_M_amonth04(0),
134 &#32;&#32;&#32;&#32;&#32;&#32;_M_amonth05(0),&#32;_M_amonth06(0),&#32;_M_amonth07(0),
135 &#32;&#32;&#32;&#32;&#32;&#32;_M_amonth08(0),&#32;_M_amonth09(0),&#32;_M_amonth10(0),
136 &#32;&#32;&#32;&#32;&#32;&#32;_M_amonth11(0),&#32;_M_amonth12(0),&#32;_M_allocated(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
137 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;~__timepunct_cache();
140 
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
142 &#32;&#32;&#32;&#32;&#32;&#32;__timepunct_cache&amp;
143 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__timepunct_cache&amp;);
144 &#32;&#32;&#32;&#32;&#32;&#32;
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;__timepunct_cache(<emphasis role="keyword">const</emphasis>&#32;__timepunct_cache&amp;);
147 &#32;&#32;&#32;&#32;};
148 
149 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
150 &#32;&#32;&#32;&#32;__timepunct_cache&lt;_CharT&gt;::~__timepunct_cache()
151 &#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_allocated)
153 &#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unused.</emphasis>
155 &#32;&#32;&#32;&#32;}
156 &#32;&#32;&#32;&#32;}
157 
158 &#32;&#32;<emphasis role="comment">//&#32;Specializations.</emphasis>
159 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
161 &#32;&#32;&#32;&#32;__timepunct_cache&lt;char&gt;::_S_timezones[14];
162 
163 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
164 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*
166 &#32;&#32;&#32;&#32;__timepunct_cache&lt;wchar_t&gt;::_S_timezones[14];
167 <emphasis role="preprocessor">#endif</emphasis>
168 
169 &#32;&#32;<emphasis role="comment">//&#32;Generic.</emphasis>
170 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__timepunct_cache&lt;_CharT&gt;::_S_timezones[14];
172 
173 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
174 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__timepunct&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
175 &#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__char_type;
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__timepunct_cache&lt;_CharT&gt;&#32;__cache_type;
180 
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
182 &#32;&#32;&#32;&#32;&#32;&#32;__cache_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data;
183 &#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_c_locale_timepunct;
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_name_timepunct;
185 
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
191 &#32;&#32;&#32;&#32;&#32;&#32;__timepunct(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
192 
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;__timepunct(__cache_type*&#32;__cache,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
195 
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;__timepunct(__c_locale&#32;__cloc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
208 
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;for&#32;error&#32;checking&#32;purposes&#32;_M_put&#32;should&#32;return&#32;the&#32;return</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;of&#32;strftime/wcsftime.</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;_M_put(_CharT*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__maxlen,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__format,
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;tm*&#32;__tm)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
214 
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
216 &#32;&#32;&#32;&#32;&#32;&#32;_M_date_formats(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__date)<emphasis role="keyword">&#32;const</emphasis>
217 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
218 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;have&#32;default&#32;first.</emphasis>
219 &#32;&#32;&#32;&#32;__date[0]&#32;=&#32;_M_data-&gt;_M_date_format;
220 &#32;&#32;&#32;&#32;__date[1]&#32;=&#32;_M_data-&gt;_M_date_era_format;
221 &#32;&#32;&#32;&#32;&#32;&#32;}
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;_M_time_formats(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__time)<emphasis role="keyword">&#32;const</emphasis>
225 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
226 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;have&#32;default&#32;first.</emphasis>
227 &#32;&#32;&#32;&#32;__time[0]&#32;=&#32;_M_data-&gt;_M_time_format;
228 &#32;&#32;&#32;&#32;__time[1]&#32;=&#32;_M_data-&gt;_M_time_era_format;
229 &#32;&#32;&#32;&#32;&#32;&#32;}
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
232 &#32;&#32;&#32;&#32;&#32;&#32;_M_date_time_formats(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__dt)<emphasis role="keyword">&#32;const</emphasis>
233 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
234 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;have&#32;default&#32;first.</emphasis>
235 &#32;&#32;&#32;&#32;__dt[0]&#32;=&#32;_M_data-&gt;_M_date_time_format;
236 &#32;&#32;&#32;&#32;__dt[1]&#32;=&#32;_M_data-&gt;_M_date_time_era_format;
237 &#32;&#32;&#32;&#32;&#32;&#32;}
238 
239 <emphasis role="preprocessor">#if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;_M_am_pm_format(<emphasis role="keyword">const</emphasis>&#32;_CharT*)<emphasis role="keyword">&#32;const</emphasis>
242 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="comment">/*&#32;Kept&#32;for&#32;ABI&#32;compatibility,&#32;see&#32;PR65927&#32;*/</emphasis>&#32;}
243 <emphasis role="preprocessor">#endif</emphasis>
244 
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;_M_am_pm_format(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__ampm_format)<emphasis role="keyword">&#32;const</emphasis>
247 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
248 &#32;&#32;&#32;&#32;__ampm_format[0]&#32;=&#32;_M_data-&gt;_M_am_pm_format;
249 &#32;&#32;&#32;&#32;&#32;&#32;}
250 
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
252 &#32;&#32;&#32;&#32;&#32;&#32;_M_am_pm(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__ampm)<emphasis role="keyword">&#32;const</emphasis>
253 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
254 &#32;&#32;&#32;&#32;__ampm[0]&#32;=&#32;_M_data-&gt;_M_am;
255 &#32;&#32;&#32;&#32;__ampm[1]&#32;=&#32;_M_data-&gt;_M_pm;
256 &#32;&#32;&#32;&#32;&#32;&#32;}
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;_M_days(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__days)<emphasis role="keyword">&#32;const</emphasis>
260 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
261 &#32;&#32;&#32;&#32;__days[0]&#32;=&#32;_M_data-&gt;_M_day1;
262 &#32;&#32;&#32;&#32;__days[1]&#32;=&#32;_M_data-&gt;_M_day2;
263 &#32;&#32;&#32;&#32;__days[2]&#32;=&#32;_M_data-&gt;_M_day3;
264 &#32;&#32;&#32;&#32;__days[3]&#32;=&#32;_M_data-&gt;_M_day4;
265 &#32;&#32;&#32;&#32;__days[4]&#32;=&#32;_M_data-&gt;_M_day5;
266 &#32;&#32;&#32;&#32;__days[5]&#32;=&#32;_M_data-&gt;_M_day6;
267 &#32;&#32;&#32;&#32;__days[6]&#32;=&#32;_M_data-&gt;_M_day7;
268 &#32;&#32;&#32;&#32;&#32;&#32;}
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;_M_days_abbreviated(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__days)<emphasis role="keyword">&#32;const</emphasis>
272 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
273 &#32;&#32;&#32;&#32;__days[0]&#32;=&#32;_M_data-&gt;_M_aday1;
274 &#32;&#32;&#32;&#32;__days[1]&#32;=&#32;_M_data-&gt;_M_aday2;
275 &#32;&#32;&#32;&#32;__days[2]&#32;=&#32;_M_data-&gt;_M_aday3;
276 &#32;&#32;&#32;&#32;__days[3]&#32;=&#32;_M_data-&gt;_M_aday4;
277 &#32;&#32;&#32;&#32;__days[4]&#32;=&#32;_M_data-&gt;_M_aday5;
278 &#32;&#32;&#32;&#32;__days[5]&#32;=&#32;_M_data-&gt;_M_aday6;
279 &#32;&#32;&#32;&#32;__days[6]&#32;=&#32;_M_data-&gt;_M_aday7;
280 &#32;&#32;&#32;&#32;&#32;&#32;}
281 
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;_M_months(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__months)<emphasis role="keyword">&#32;const</emphasis>
284 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
285 &#32;&#32;&#32;&#32;__months[0]&#32;=&#32;_M_data-&gt;_M_month01;
286 &#32;&#32;&#32;&#32;__months[1]&#32;=&#32;_M_data-&gt;_M_month02;
287 &#32;&#32;&#32;&#32;__months[2]&#32;=&#32;_M_data-&gt;_M_month03;
288 &#32;&#32;&#32;&#32;__months[3]&#32;=&#32;_M_data-&gt;_M_month04;
289 &#32;&#32;&#32;&#32;__months[4]&#32;=&#32;_M_data-&gt;_M_month05;
290 &#32;&#32;&#32;&#32;__months[5]&#32;=&#32;_M_data-&gt;_M_month06;
291 &#32;&#32;&#32;&#32;__months[6]&#32;=&#32;_M_data-&gt;_M_month07;
292 &#32;&#32;&#32;&#32;__months[7]&#32;=&#32;_M_data-&gt;_M_month08;
293 &#32;&#32;&#32;&#32;__months[8]&#32;=&#32;_M_data-&gt;_M_month09;
294 &#32;&#32;&#32;&#32;__months[9]&#32;=&#32;_M_data-&gt;_M_month10;
295 &#32;&#32;&#32;&#32;__months[10]&#32;=&#32;_M_data-&gt;_M_month11;
296 &#32;&#32;&#32;&#32;__months[11]&#32;=&#32;_M_data-&gt;_M_month12;
297 &#32;&#32;&#32;&#32;&#32;&#32;}
298 
299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;_M_months_abbreviated(<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__months)<emphasis role="keyword">&#32;const</emphasis>
301 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
302 &#32;&#32;&#32;&#32;__months[0]&#32;=&#32;_M_data-&gt;_M_amonth01;
303 &#32;&#32;&#32;&#32;__months[1]&#32;=&#32;_M_data-&gt;_M_amonth02;
304 &#32;&#32;&#32;&#32;__months[2]&#32;=&#32;_M_data-&gt;_M_amonth03;
305 &#32;&#32;&#32;&#32;__months[3]&#32;=&#32;_M_data-&gt;_M_amonth04;
306 &#32;&#32;&#32;&#32;__months[4]&#32;=&#32;_M_data-&gt;_M_amonth05;
307 &#32;&#32;&#32;&#32;__months[5]&#32;=&#32;_M_data-&gt;_M_amonth06;
308 &#32;&#32;&#32;&#32;__months[6]&#32;=&#32;_M_data-&gt;_M_amonth07;
309 &#32;&#32;&#32;&#32;__months[7]&#32;=&#32;_M_data-&gt;_M_amonth08;
310 &#32;&#32;&#32;&#32;__months[8]&#32;=&#32;_M_data-&gt;_M_amonth09;
311 &#32;&#32;&#32;&#32;__months[9]&#32;=&#32;_M_data-&gt;_M_amonth10;
312 &#32;&#32;&#32;&#32;__months[10]&#32;=&#32;_M_data-&gt;_M_amonth11;
313 &#32;&#32;&#32;&#32;__months[11]&#32;=&#32;_M_data-&gt;_M_amonth12;
314 &#32;&#32;&#32;&#32;&#32;&#32;}
315 
316 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;~__timepunct();
319 
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;use&#32;at&#32;construction&#32;time&#32;only.</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
322 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_timepunct(__c_locale&#32;__cloc&#32;=&#32;0);
323 &#32;&#32;&#32;&#32;};
324 
325 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
326 &#32;&#32;&#32;&#32;locale::id&#32;__timepunct&lt;_CharT&gt;::id;
327 
328 &#32;&#32;<emphasis role="comment">//&#32;Specializations.</emphasis>
329 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
330 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
331 &#32;&#32;&#32;&#32;__timepunct&lt;char&gt;::_M_initialize_timepunct(__c_locale&#32;__cloc);
332 
333 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
334 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
335 &#32;&#32;&#32;&#32;__timepunct&lt;char&gt;::_M_put(<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;tm*)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
336 
337 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
338 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
339 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
340 &#32;&#32;&#32;&#32;__timepunct&lt;wchar_t&gt;::_M_initialize_timepunct(__c_locale&#32;__cloc);
341 
342 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
343 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
344 &#32;&#32;&#32;&#32;__timepunct&lt;wchar_t&gt;::_M_put(<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;tm*)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
346 <emphasis role="preprocessor">#endif</emphasis>
347 
348 _GLIBCXX_END_NAMESPACE_VERSION
349 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
350 
351 &#32;&#32;<emphasis role="comment">//&#32;Include&#32;host&#32;and&#32;configuration&#32;specific&#32;timepunct&#32;functions.</emphasis>
352 <emphasis role="preprocessor">&#32;&#32;#include&#32;&lt;bits/time_members.h&gt;</emphasis>
353 
354 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
355 {
356 _GLIBCXX_BEGIN_NAMESPACE_VERSION
357 
358 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__time_get_state
359 &#32;&#32;{
360 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Finalize&#32;state.</emphasis>
361 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
362 &#32;&#32;&#32;&#32;_M_finalize_state(tm*&#32;__tm);
363 
364 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_I&#32;:&#32;1;
365 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_wday&#32;:&#32;1;
366 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_yday&#32;:&#32;1;
367 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_mon&#32;:&#32;1;
368 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_mday&#32;:&#32;1;
369 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_uweek&#32;:&#32;1;
370 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_wweek&#32;:&#32;1;
371 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_have_century&#32;:&#32;1;
372 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_is_pm&#32;:&#32;1;
373 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_want_century&#32;:&#32;1;
374 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_want_xday&#32;:&#32;1;
375 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_pad1&#32;:&#32;5;
376 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_week_no&#32;:&#32;6;
377 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_pad2&#32;:&#32;10;
378 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_century;
379 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_pad3;
380 &#32;&#32;};
381 
382 _GLIBCXX_BEGIN_NAMESPACE_CXX11
383 
397 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>time_get&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet,&#32;<emphasis role="keyword">public</emphasis>&#32;time_base
399 &#32;&#32;&#32;&#32;{
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_InIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
407 
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
410 
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
419 &#32;&#32;&#32;&#32;&#32;&#32;time_get(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
420 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet&#32;(__refs)&#32;{&#32;}
421 
435 &#32;&#32;&#32;&#32;&#32;&#32;dateorder
436 &#32;&#32;&#32;&#32;&#32;&#32;date_order()<emphasis role="keyword">&#32;&#32;const</emphasis>
437 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_date_order();&#32;}
438 
459 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
460 &#32;&#32;&#32;&#32;&#32;&#32;get_time(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)<emphasis role="keyword">&#32;&#32;const</emphasis>
462 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get_time(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__tm);&#32;}
463 
484 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
485 &#32;&#32;&#32;&#32;&#32;&#32;get_date(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)<emphasis role="keyword">&#32;&#32;const</emphasis>
487 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get_date(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__tm);&#32;}
488 
512 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
513 &#32;&#32;&#32;&#32;&#32;&#32;get_weekday(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)<emphasis role="keyword">&#32;const</emphasis>
515 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get_weekday(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__tm);&#32;}
516 
541 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
542 &#32;&#32;&#32;&#32;&#32;&#32;get_monthname(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)<emphasis role="keyword">&#32;const</emphasis>
544 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get_monthname(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__tm);&#32;}
545 
567 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
568 &#32;&#32;&#32;&#32;&#32;&#32;get_year(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)<emphasis role="keyword">&#32;const</emphasis>
570 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get_year(__beg,&#32;__end,&#32;__io,&#32;__err,&#32;__tm);&#32;}
571 
572 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
589 &#32;&#32;&#32;&#32;&#32;&#32;iter_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__format,
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__modifier&#32;=&#32;0)<emphasis role="keyword">&#32;const</emphasis>
592 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__s,&#32;__end,&#32;__io,&#32;__err,&#32;__tm,&#32;__format,
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__modifier);
595 &#32;&#32;&#32;&#32;&#32;&#32;}
596 
615 &#32;&#32;&#32;&#32;&#32;&#32;iter_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__fmt,
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__fmtend)&#32;<emphasis role="keyword">const</emphasis>;
618 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
619 
620 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
623 &#32;&#32;&#32;&#32;&#32;&#32;~time_get()&#32;{&#32;}
624 
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;dateorder
636 &#32;&#32;&#32;&#32;&#32;&#32;do_date_order()&#32;<emphasis role="keyword">const</emphasis>;
637 
653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
654 &#32;&#32;&#32;&#32;&#32;&#32;do_get_time(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)&#32;<emphasis role="keyword">const</emphasis>;
656 
672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
673 &#32;&#32;&#32;&#32;&#32;&#32;do_get_date(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)&#32;<emphasis role="keyword">const</emphasis>;
675 
691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
692 &#32;&#32;&#32;&#32;&#32;&#32;do_get_weekday(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;,
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)&#32;<emphasis role="keyword">const</emphasis>;
694 
710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
711 &#32;&#32;&#32;&#32;&#32;&#32;do_get_monthname(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;,
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)&#32;<emphasis role="keyword">const</emphasis>;
713 
729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
730 &#32;&#32;&#32;&#32;&#32;&#32;do_get_year(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm)&#32;<emphasis role="keyword">const</emphasis>;
732 
733 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
751 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
753 <emphasis role="preprocessor">#endif</emphasis>
754 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
755 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__f,
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm,
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__format,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__modifier)&#32;<emphasis role="keyword">const</emphasis>;
758 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
759 
760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extract&#32;numeric&#32;component&#32;of&#32;length&#32;__len.</emphasis>
761 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
762 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract_num(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__member,
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__min,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__max,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len,
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base&amp;&#32;__io,&#32;ios_base::iostate&amp;&#32;__err)&#32;<emphasis role="keyword">const</emphasis>;
765 
766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extract&#32;any&#32;unique&#32;array&#32;of&#32;string&#32;literals&#32;in&#32;a&#32;const&#32;_CharT*&#32;array.</emphasis>
767 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
768 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract_name(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__member,
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__names,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__indexlen,
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base&amp;&#32;__io,&#32;ios_base::iostate&amp;&#32;__err)&#32;<emphasis role="keyword">const</emphasis>;
771 
772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extract&#32;day&#32;or&#32;month&#32;name&#32;in&#32;a&#32;const&#32;_CharT*&#32;array.</emphasis>
773 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
774 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract_wday_or_month(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__member,
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT**&#32;__names,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__indexlen,
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base&amp;&#32;__io,&#32;ios_base::iostate&amp;&#32;__err)&#32;<emphasis role="keyword">const</emphasis>;
777 
778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extract&#32;on&#32;a&#32;component-by-component&#32;basis,&#32;via&#32;__format&#32;argument.</emphasis>
779 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
780 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract_via_format(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm,
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__format)&#32;<emphasis role="keyword">const</emphasis>;
783 
784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extract&#32;on&#32;a&#32;component-by-component&#32;basis,&#32;via&#32;__format&#32;argument,&#32;with</emphasis>
785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;state.</emphasis>
786 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
787 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract_via_format(iter_type&#32;__beg,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;tm*&#32;__tm,
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__format,
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__time_get_state&#32;&amp;__state)&#32;<emphasis role="keyword">const</emphasis>;
791 &#32;&#32;&#32;&#32;};
792 
793 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
794 &#32;&#32;&#32;&#32;locale::id&#32;time_get&lt;_CharT,&#32;_InIter&gt;::id;
795 
797 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
798 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>time_get_byname&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;time_get&lt;_CharT,&#32;_InIter&gt;
799 &#32;&#32;&#32;&#32;{
800 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_InIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
804 
805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
806 &#32;&#32;&#32;&#32;&#32;&#32;time_get_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
807 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;time_get&lt;_CharT,&#32;_InIter&gt;(__refs)&#32;{&#32;}
808 
809 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
811 &#32;&#32;&#32;&#32;&#32;&#32;time_get_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
812 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;time_get_byname(__s.c_str(),&#32;__refs)&#32;{&#32;}
813 <emphasis role="preprocessor">#endif</emphasis>
814 
815 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
817 &#32;&#32;&#32;&#32;&#32;&#32;~time_get_byname()&#32;{&#32;}
818 &#32;&#32;&#32;&#32;};
819 
820 _GLIBCXX_END_NAMESPACE_CXX11
821 
834 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
835 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>time_put&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
836 &#32;&#32;&#32;&#32;{
837 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_OutIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
844 
846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
847 
855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
856 &#32;&#32;&#32;&#32;&#32;&#32;time_put(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
857 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs)&#32;{&#32;}
858 
874 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
875 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keyword">const</emphasis>&#32;tm*&#32;__tm,
876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__beg,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__end)&#32;<emphasis role="keyword">const</emphasis>;
877 
894 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
895 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;tm*&#32;__tm,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__format,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__mod&#32;=&#32;0)<emphasis role="keyword">&#32;const</emphasis>
897 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__io,&#32;__fill,&#32;__tm,&#32;__format,&#32;__mod);&#32;}
898 
899 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
902 &#32;&#32;&#32;&#32;&#32;&#32;~time_put()
903 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
904 
921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
922 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,&#32;<emphasis role="keyword">const</emphasis>&#32;tm*&#32;__tm,
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__format,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__mod)&#32;<emphasis role="keyword">const</emphasis>;
924 &#32;&#32;&#32;&#32;};
925 
926 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
927 &#32;&#32;&#32;&#32;locale::id&#32;time_put&lt;_CharT,&#32;_OutIter&gt;::id;
928 
930 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
931 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>time_put_byname&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;time_put&lt;_CharT,&#32;_OutIter&gt;
932 &#32;&#32;&#32;&#32;{
933 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
935 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_OutIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
937 
938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
939 &#32;&#32;&#32;&#32;&#32;&#32;time_put_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
940 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;time_put&lt;_CharT,&#32;_OutIter&gt;(__refs)
941 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
942 
943 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
945 &#32;&#32;&#32;&#32;&#32;&#32;time_put_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
946 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;time_put_byname(__s.c_str(),&#32;__refs)&#32;{&#32;}
947 <emphasis role="preprocessor">#endif</emphasis>
948 
949 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
951 &#32;&#32;&#32;&#32;&#32;&#32;~time_put_byname()&#32;{&#32;}
952 &#32;&#32;&#32;&#32;};
953 
954 
966 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>money_base
967 &#32;&#32;{
968 &#32;&#32;<emphasis role="keyword">public</emphasis>:
969 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;part&#32;{&#32;none,&#32;space,&#32;symbol,&#32;<link linkend="_namespacesign">sign</link>,&#32;<link linkend="_classvalue">value</link>&#32;};
970 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>pattern&#32;{&#32;<emphasis role="keywordtype">char</emphasis>&#32;field[4];&#32;};
971 
972 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;pattern&#32;_S_default_pattern;
973 
974 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
975 &#32;&#32;&#32;&#32;{
976 &#32;&#32;&#32;&#32;&#32;&#32;_S_minus,
977 &#32;&#32;&#32;&#32;&#32;&#32;_S_zero,
978 &#32;&#32;&#32;&#32;&#32;&#32;_S_end&#32;=&#32;11
979 &#32;&#32;&#32;&#32;};
980 
981 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String&#32;literal&#32;of&#32;acceptable&#32;(narrow)&#32;input/output,&#32;for</emphasis>
982 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;money_get/money_put.&#32;&quot;-0123456789&quot;</emphasis>
983 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_S_atoms;
984 
985 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Construct&#32;and&#32;return&#32;valid&#32;pattern&#32;consisting&#32;of&#32;some&#32;combination&#32;of:</emphasis>
986 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;space&#32;none&#32;symbol&#32;sign&#32;value</emphasis>
987 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">static</emphasis>&#32;pattern
988 &#32;&#32;&#32;&#32;_S_construct_pattern(<emphasis role="keywordtype">char</emphasis>&#32;__precedes,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__space,&#32;<emphasis role="keywordtype">char</emphasis>&#32;__posn)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
989 &#32;&#32;};
990 
991 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
992 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__moneypunct_cache&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
993 &#32;&#32;&#32;&#32;{
994 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_grouping;
995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_grouping_size;
996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_use_grouping;
997 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_decimal_point;
998 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_thousands_sep;
999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_curr_symbol;
1000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_curr_symbol_size;
1001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_positive_sign;
1002 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_positive_sign_size;
1003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_negative_sign;
1004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_negative_sign_size;
1005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_frac_digits;
1006 &#32;&#32;&#32;&#32;&#32;&#32;money_base::pattern&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pos_format;
1007 &#32;&#32;&#32;&#32;&#32;&#32;money_base::pattern&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_neg_format;
1008 
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;list&#32;of&#32;valid&#32;numeric&#32;literals&#32;for&#32;input&#32;and&#32;output:&#32;in&#32;the&#32;standard</emphasis>
1010 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;C&quot;&#32;locale,&#32;this&#32;is&#32;&quot;-0123456789&quot;.&#32;This&#32;array&#32;contains&#32;the&#32;chars&#32;after</emphasis>
1011 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;having&#32;been&#32;passed&#32;through&#32;the&#32;current&#32;locale&apos;s&#32;ctype&lt;_CharT&gt;.widen().</emphasis>
1012 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_atoms[money_base::_S_end];
1013 
1014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocated;
1015 
1016 &#32;&#32;&#32;&#32;&#32;&#32;__moneypunct_cache(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;:&#32;facet(__refs),
1017 &#32;&#32;&#32;&#32;&#32;&#32;_M_grouping(0),&#32;_M_grouping_size(0),&#32;_M_use_grouping(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>),
1018 &#32;&#32;&#32;&#32;&#32;&#32;_M_decimal_point(_CharT()),&#32;_M_thousands_sep(_CharT()),
1019 &#32;&#32;&#32;&#32;&#32;&#32;_M_curr_symbol(0),&#32;_M_curr_symbol_size(0),
1020 &#32;&#32;&#32;&#32;&#32;&#32;_M_positive_sign(0),&#32;_M_positive_sign_size(0),
1021 &#32;&#32;&#32;&#32;&#32;&#32;_M_negative_sign(0),&#32;_M_negative_sign_size(0),
1022 &#32;&#32;&#32;&#32;&#32;&#32;_M_frac_digits(0),
1023 &#32;&#32;&#32;&#32;&#32;&#32;_M_pos_format(money_base::pattern()),
1024 &#32;&#32;&#32;&#32;&#32;&#32;_M_neg_format(money_base::pattern()),&#32;_M_allocated(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
1025 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1026 
1027 &#32;&#32;&#32;&#32;&#32;&#32;~__moneypunct_cache();
1028 
1029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1030 &#32;&#32;&#32;&#32;&#32;&#32;_M_cache(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc);
1031 
1032 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1033 &#32;&#32;&#32;&#32;&#32;&#32;__moneypunct_cache&amp;
1034 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__moneypunct_cache&amp;);
1035 &#32;&#32;&#32;&#32;&#32;&#32;
1036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1037 &#32;&#32;&#32;&#32;&#32;&#32;__moneypunct_cache(<emphasis role="keyword">const</emphasis>&#32;__moneypunct_cache&amp;);
1038 &#32;&#32;&#32;&#32;};
1039 
1040 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1041 &#32;&#32;&#32;&#32;__moneypunct_cache&lt;_CharT,&#32;_Intl&gt;::~__moneypunct_cache()
1042 &#32;&#32;&#32;&#32;{
1043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_allocated)
1044 &#32;&#32;&#32;&#32;{
1045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_M_grouping;
1046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_M_curr_symbol;
1047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_M_positive_sign;
1048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;[]&#32;_M_negative_sign;
1049 &#32;&#32;&#32;&#32;}
1050 &#32;&#32;&#32;&#32;}
1051 
1052 _GLIBCXX_BEGIN_NAMESPACE_CXX11
1053 
1061 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1062 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>moneypunct&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet,&#32;<emphasis role="keyword">public</emphasis>&#32;money_base
1063 &#32;&#32;&#32;&#32;{
1064 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
1068 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
1071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__moneypunct_cache&lt;_CharT,&#32;_Intl&gt;&#32;&#32;&#32;&#32;&#32;__cache_type;
1072 
1073 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1074 &#32;&#32;&#32;&#32;&#32;&#32;__cache_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data;
1075 
1076 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;intl&#32;=&#32;_Intl;
1081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
1082 
1090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1091 &#32;&#32;&#32;&#32;&#32;&#32;moneypunct(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1092 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_data(0)
1093 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_moneypunct();&#32;}
1094 
1103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1104 &#32;&#32;&#32;&#32;&#32;&#32;moneypunct(__cache_type*&#32;__cache,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1105 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_data(__cache)
1106 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_moneypunct();&#32;}
1107 
1118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1119 &#32;&#32;&#32;&#32;&#32;&#32;moneypunct(__c_locale&#32;__cloc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1120 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_data(0)
1121 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_moneypunct(__cloc,&#32;__s);&#32;}
1122 
1132 &#32;&#32;&#32;&#32;&#32;&#32;char_type
1133 &#32;&#32;&#32;&#32;&#32;&#32;decimal_point()<emphasis role="keyword">&#32;const</emphasis>
1134 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_decimal_point();&#32;}
1135 
1145 &#32;&#32;&#32;&#32;&#32;&#32;char_type
1146 &#32;&#32;&#32;&#32;&#32;&#32;thousands_sep()<emphasis role="keyword">&#32;const</emphasis>
1147 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_thousands_sep();&#32;}
1148 
1175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>
1176 &#32;&#32;&#32;&#32;&#32;&#32;grouping()<emphasis role="keyword">&#32;const</emphasis>
1177 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_grouping();&#32;}
1178 
1188 &#32;&#32;&#32;&#32;&#32;&#32;string_type
1189 &#32;&#32;&#32;&#32;&#32;&#32;curr_symbol()<emphasis role="keyword">&#32;const</emphasis>
1190 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_curr_symbol();&#32;}
1191 
1205 &#32;&#32;&#32;&#32;&#32;&#32;string_type
1206 &#32;&#32;&#32;&#32;&#32;&#32;positive_sign()<emphasis role="keyword">&#32;const</emphasis>
1207 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_positive_sign();&#32;}
1208 
1222 &#32;&#32;&#32;&#32;&#32;&#32;string_type
1223 &#32;&#32;&#32;&#32;&#32;&#32;negative_sign()<emphasis role="keyword">&#32;const</emphasis>
1224 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_negative_sign();&#32;}
1225 
1238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
1239 &#32;&#32;&#32;&#32;&#32;&#32;frac_digits()<emphasis role="keyword">&#32;const</emphasis>
1240 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_frac_digits();&#32;}
1241 
1243 
1274 &#32;&#32;&#32;&#32;&#32;&#32;pattern
1275 &#32;&#32;&#32;&#32;&#32;&#32;pos_format()<emphasis role="keyword">&#32;const</emphasis>
1276 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_pos_format();&#32;}
1277 
1278 &#32;&#32;&#32;&#32;&#32;&#32;pattern
1279 &#32;&#32;&#32;&#32;&#32;&#32;neg_format()<emphasis role="keyword">&#32;const</emphasis>
1280 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_neg_format();&#32;}
1282 
1283 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1286 &#32;&#32;&#32;&#32;&#32;&#32;~moneypunct();
1287 
1296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
1297 &#32;&#32;&#32;&#32;&#32;&#32;do_decimal_point()<emphasis role="keyword">&#32;const</emphasis>
1298 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_decimal_point;&#32;}
1299 
1308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;char_type
1309 &#32;&#32;&#32;&#32;&#32;&#32;do_thousands_sep()<emphasis role="keyword">&#32;const</emphasis>
1310 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_thousands_sep;&#32;}
1311 
1321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
1322 &#32;&#32;&#32;&#32;&#32;&#32;do_grouping()<emphasis role="keyword">&#32;const</emphasis>
1323 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_grouping;&#32;}
1324 
1334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;string_type
1335 &#32;&#32;&#32;&#32;&#32;&#32;do_curr_symbol()<emphasis role="keyword">&#32;&#32;&#32;const</emphasis>
1336 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_curr_symbol;&#32;}
1337 
1347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;string_type
1348 &#32;&#32;&#32;&#32;&#32;&#32;do_positive_sign()<emphasis role="keyword">&#32;const</emphasis>
1349 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_positive_sign;&#32;}
1350 
1360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;string_type
1361 &#32;&#32;&#32;&#32;&#32;&#32;do_negative_sign()<emphasis role="keyword">&#32;const</emphasis>
1362 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_negative_sign;&#32;}
1363 
1374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1375 &#32;&#32;&#32;&#32;&#32;&#32;do_frac_digits()<emphasis role="keyword">&#32;const</emphasis>
1376 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_frac_digits;&#32;}
1377 
1388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;pattern
1389 &#32;&#32;&#32;&#32;&#32;&#32;do_pos_format()<emphasis role="keyword">&#32;const</emphasis>
1390 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_pos_format;&#32;}
1391 
1402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;pattern
1403 &#32;&#32;&#32;&#32;&#32;&#32;do_neg_format()<emphasis role="keyword">&#32;const</emphasis>
1404 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data-&gt;_M_neg_format;&#32;}
1405 
1406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;use&#32;at&#32;construction&#32;time&#32;only.</emphasis>
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_moneypunct(__c_locale&#32;__cloc&#32;=&#32;0,
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__name&#32;=&#32;0);
1410 &#32;&#32;&#32;&#32;};
1411 
1412 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1413 &#32;&#32;&#32;&#32;locale::id&#32;moneypunct&lt;_CharT,&#32;_Intl&gt;::id;
1414 
1415 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1416 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;moneypunct&lt;_CharT,&#32;_Intl&gt;::intl;
1417 
1418 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1419 &#32;&#32;&#32;&#32;moneypunct&lt;char,&#32;true&gt;::~moneypunct();
1420 
1421 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1422 &#32;&#32;&#32;&#32;moneypunct&lt;char,&#32;false&gt;::~moneypunct();
1423 
1424 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1425 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1426 &#32;&#32;&#32;&#32;moneypunct&lt;char,&#32;true&gt;::_M_initialize_moneypunct(__c_locale,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*);
1427 
1428 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1429 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1430 &#32;&#32;&#32;&#32;moneypunct&lt;char,&#32;false&gt;::_M_initialize_moneypunct(__c_locale,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*);
1431 
1432 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1433 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1434 &#32;&#32;&#32;&#32;moneypunct&lt;wchar_t,&#32;true&gt;::~moneypunct();
1435 
1436 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1437 &#32;&#32;&#32;&#32;moneypunct&lt;wchar_t,&#32;false&gt;::~moneypunct();
1438 
1439 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1441 &#32;&#32;&#32;&#32;moneypunct&lt;wchar_t,&#32;true&gt;::_M_initialize_moneypunct(__c_locale,
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*);
1443 
1444 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1445 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1446 &#32;&#32;&#32;&#32;moneypunct&lt;wchar_t,&#32;false&gt;::_M_initialize_moneypunct(__c_locale,
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*);
1448 <emphasis role="preprocessor">#endif</emphasis>
1449 
1451 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1452 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>moneypunct_byname&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;moneypunct&lt;_CharT,&#32;_Intl&gt;
1453 &#32;&#32;&#32;&#32;{
1454 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
1457 
1458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;intl&#32;=&#32;_Intl;
1459 
1460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1461 &#32;&#32;&#32;&#32;&#32;&#32;moneypunct_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1462 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;moneypunct&lt;_CharT,&#32;_Intl&gt;(__refs)
1463 &#32;&#32;&#32;&#32;&#32;&#32;{
1464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_strcmp(__s,&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>)&#32;!=&#32;0
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__builtin_strcmp(__s,&#32;<emphasis role="stringliteral">&quot;POSIX&quot;</emphasis>)&#32;!=&#32;0)
1466 &#32;&#32;&#32;&#32;&#32;&#32;{
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_create_c_locale(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__s);
1469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_initialize_moneypunct(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_destroy_c_locale(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
1471 &#32;&#32;&#32;&#32;&#32;&#32;}
1472 &#32;&#32;&#32;&#32;&#32;&#32;}
1473 
1474 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1476 &#32;&#32;&#32;&#32;&#32;&#32;moneypunct_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
1477 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;moneypunct_byname(__s.c_str(),&#32;__refs)&#32;{&#32;}
1478 <emphasis role="preprocessor">#endif</emphasis>
1479 
1480 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1482 &#32;&#32;&#32;&#32;&#32;&#32;~moneypunct_byname()&#32;{&#32;}
1483 &#32;&#32;&#32;&#32;};
1484 
1485 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1486 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;moneypunct_byname&lt;_CharT,&#32;_Intl&gt;::intl;
1487 
1488 _GLIBCXX_END_NAMESPACE_CXX11
1489 
1490 _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11
1491 
1505 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
1506 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>money_get&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
1507 &#32;&#32;&#32;&#32;{
1508 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
1512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_InIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
1514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
1516 
1518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
1519 
1527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1528 &#32;&#32;&#32;&#32;&#32;&#32;money_get(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;:&#32;facet(__refs)&#32;{&#32;}
1529 
1557 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
1558 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1559 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;__units)<emphasis role="keyword">&#32;const</emphasis>
1560 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__s,&#32;__end,&#32;__intl,&#32;__io,&#32;__err,&#32;__units);&#32;}
1561 
1588 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
1589 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1590 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;string_type&amp;&#32;__digits)<emphasis role="keyword">&#32;const</emphasis>
1591 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__s,&#32;__end,&#32;__intl,&#32;__io,&#32;__err,&#32;__digits);&#32;}
1592 
1593 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1596 &#32;&#32;&#32;&#32;&#32;&#32;~money_get()&#32;{&#32;}
1597 
1605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
1606 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__&#32;\</emphasis>
1607 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_GLIBCXX_USE_CXX11_ABI&#32;==&#32;0&#32;||&#32;defined&#32;__LONG_DOUBLE_IEEE128__)</emphasis>
1608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1609 &#32;&#32;&#32;&#32;&#32;&#32;__do_get(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1611 <emphasis role="preprocessor">#else</emphasis>
1612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1613 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1615 <emphasis role="preprocessor">#endif</emphasis>
1616 
1624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1625 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;string_type&amp;&#32;__digits)&#32;<emphasis role="keyword">const</emphasis>;
1627 
1628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
1629 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT&#32;\</emphasis>
1630 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_IEEE128__</emphasis>
1631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1632 &#32;&#32;&#32;&#32;&#32;&#32;__do_get(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;__ibm128&amp;&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1634 <emphasis role="preprocessor">#endif</emphasis>
1635 
1636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
1637 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__&#32;\</emphasis>
1638 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_GLIBCXX_USE_CXX11_ABI&#32;==&#32;0&#32;||&#32;defined&#32;__LONG_DOUBLE_IEEE128__)</emphasis>
1639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1640 &#32;&#32;&#32;&#32;&#32;&#32;do_get(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1642 <emphasis role="preprocessor">#endif</emphasis>
1643 
1644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_extract(iter_type&#32;__s,&#32;iter_type&#32;__end,&#32;ios_base&amp;&#32;__io,
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ios_base::iostate&amp;&#32;__err,&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__digits)&#32;<emphasis role="keyword">const</emphasis>;&#32;&#32;&#32;&#32;&#32;
1648 &#32;&#32;&#32;&#32;};
1649 
1650 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InIter&gt;
1651 &#32;&#32;&#32;&#32;locale::id&#32;money_get&lt;_CharT,&#32;_InIter&gt;::id;
1652 
1666 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
1667 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>money_put&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
1668 &#32;&#32;&#32;&#32;{
1669 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_OutIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type;
1674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
1676 
1678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
1679 
1687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1688 &#32;&#32;&#32;&#32;&#32;&#32;money_put(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;:&#32;facet(__refs)&#32;{&#32;}
1689 
1707 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
1708 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1709 &#32;&#32;&#32;&#32;&#32;&#32;char_type&#32;__fill,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__units)<emphasis role="keyword">&#32;const</emphasis>
1710 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__intl,&#32;__io,&#32;__fill,&#32;__units);&#32;}
1711 
1730 &#32;&#32;&#32;&#32;&#32;&#32;iter_type
1731 &#32;&#32;&#32;&#32;&#32;&#32;put(iter_type&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,
1732 &#32;&#32;&#32;&#32;&#32;&#32;char_type&#32;__fill,&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__digits)<emphasis role="keyword">&#32;const</emphasis>
1733 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_put(__s,&#32;__intl,&#32;__io,&#32;__fill,&#32;__digits);&#32;}
1734 
1735 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1738 &#32;&#32;&#32;&#32;&#32;&#32;~money_put()&#32;{&#32;}
1739 
1758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
1759 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__&#32;\</emphasis>
1760 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_GLIBCXX_USE_CXX11_ABI&#32;==&#32;0&#32;||&#32;defined&#32;__LONG_DOUBLE_IEEE128__)</emphasis>
1761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1762 &#32;&#32;&#32;&#32;&#32;&#32;__do_put(iter_type&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1764 <emphasis role="preprocessor">#else</emphasis>
1765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1766 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1768 <emphasis role="preprocessor">#endif</emphasis>
1769 
1789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1790 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__digits)&#32;<emphasis role="keyword">const</emphasis>;
1792 
1793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
1794 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT&#32;\</emphasis>
1795 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_IEEE128__</emphasis>
1796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1797 &#32;&#32;&#32;&#32;&#32;&#32;__do_put(iter_type&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ibm128&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1799 <emphasis role="preprocessor">#endif</emphasis>
1800 
1801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
1802 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_LONG_DOUBLE_COMPAT&#32;&amp;&amp;&#32;defined&#32;__LONG_DOUBLE_128__&#32;\</emphasis>
1803 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_GLIBCXX_USE_CXX11_ABI&#32;==&#32;0&#32;||&#32;defined&#32;__LONG_DOUBLE_IEEE128__)</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;iter_type
1805 &#32;&#32;&#32;&#32;&#32;&#32;do_put(iter_type&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__intl,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__units)&#32;<emphasis role="keyword">const</emphasis>;
1807 <emphasis role="preprocessor">#endif</emphasis>
1808 
1809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Intl&gt;
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_type
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert(iter_type&#32;__s,&#32;ios_base&amp;&#32;__io,&#32;char_type&#32;__fill,
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__digits)&#32;<emphasis role="keyword">const</emphasis>;
1813 &#32;&#32;&#32;&#32;};
1814 
1815 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutIter&gt;
1816 &#32;&#32;&#32;&#32;locale::id&#32;money_put&lt;_CharT,&#32;_OutIter&gt;::id;
1817 
1818 _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11
1819 
1824 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>messages_base
1825 &#32;&#32;{
1826 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;catalog;
1827 &#32;&#32;};
1828 
1829 _GLIBCXX_BEGIN_NAMESPACE_CXX11
1830 
1852 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
1853 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>messages&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet,&#32;<emphasis role="keyword">public</emphasis>&#32;messages_base
1854 &#32;&#32;&#32;&#32;{
1855 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
1859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
1862 
1863 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Underlying&#32;&quot;C&quot;&#32;library&#32;locale&#32;information&#32;saved&#32;from</emphasis>
1865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;initialization,&#32;needed&#32;by&#32;messages_byname&#32;as&#32;well.</emphasis>
1866 &#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_c_locale_messages;
1867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_name_messages;
1868 
1869 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
1872 
1880 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1881 &#32;&#32;&#32;&#32;&#32;&#32;messages(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1882 
1883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Non-standard.</emphasis>
1894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1895 &#32;&#32;&#32;&#32;&#32;&#32;messages(__c_locale&#32;__cloc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
1896 
1897 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1898 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Open&#32;a&#32;message&#32;catalog.</emphasis>
1899 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1900 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;This&#32;function&#32;opens&#32;and&#32;returns&#32;a&#32;handle&#32;to&#32;a&#32;message&#32;catalog&#32;by</emphasis>
1901 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;returning&#32;do_open(__s,&#32;__loc).</emphasis>
1902 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1903 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__s&#32;&#32;The&#32;catalog&#32;to&#32;open.</emphasis>
1904 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__loc&#32;&#32;Locale&#32;to&#32;use&#32;for&#32;character&#32;set&#32;conversions.</emphasis>
1905 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@return&#32;&#32;Handle&#32;to&#32;the&#32;catalog&#32;or&#32;value&#32;&lt;&#32;0&#32;if&#32;open&#32;fails.</emphasis>
1906 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1907 &#32;&#32;&#32;&#32;&#32;&#32;catalog
1908 &#32;&#32;&#32;&#32;&#32;&#32;open(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char&gt;</link>&amp;&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)<emphasis role="keyword">&#32;const</emphasis>
1909 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_open(__s,&#32;__loc);&#32;}
1910 
1911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Non-standard&#32;and&#32;unorthodox,&#32;yet&#32;effective.</emphasis>
1912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1913 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Open&#32;a&#32;message&#32;catalog.</emphasis>
1914 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1915 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;This&#32;non-standard&#32;function&#32;opens&#32;and&#32;returns&#32;a&#32;handle&#32;to&#32;a&#32;message</emphasis>
1916 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;catalog&#32;by&#32;returning&#32;do_open(s,&#32;loc).&#32;&#32;The&#32;third&#32;argument&#32;provides&#32;a</emphasis>
1917 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;message&#32;catalog&#32;root&#32;directory&#32;for&#32;gnu&#32;gettext&#32;and&#32;is&#32;ignored</emphasis>
1918 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;otherwise.</emphasis>
1919 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1920 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__s&#32;&#32;The&#32;catalog&#32;to&#32;open.</emphasis>
1921 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__loc&#32;&#32;Locale&#32;to&#32;use&#32;for&#32;character&#32;set&#32;conversions.</emphasis>
1922 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__dir&#32;&#32;Message&#32;catalog&#32;root&#32;directory.</emphasis>
1923 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@return&#32;&#32;Handle&#32;to&#32;the&#32;catalog&#32;or&#32;value&#32;&lt;&#32;0&#32;if&#32;open&#32;fails.</emphasis>
1924 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1925 &#32;&#32;&#32;&#32;&#32;&#32;catalog
1926 &#32;&#32;&#32;&#32;&#32;&#32;open(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char&gt;</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)&#32;<emphasis role="keyword">const</emphasis>;
1927 
1928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1929 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Look&#32;up&#32;a&#32;string&#32;in&#32;a&#32;message&#32;catalog.</emphasis>
1930 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1931 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;This&#32;function&#32;retrieves&#32;and&#32;returns&#32;a&#32;message&#32;from&#32;a&#32;catalog&#32;by</emphasis>
1932 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;returning&#32;do_get(c,&#32;set,&#32;msgid,&#32;s).</emphasis>
1933 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1934 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;For&#32;gnu,&#32;@a&#32;__set&#32;and&#32;@a&#32;msgid&#32;are&#32;ignored.&#32;&#32;Returns&#32;gettext(s).</emphasis>
1935 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;For&#32;default,&#32;returns&#32;s.&#32;For&#32;ieee,&#32;returns&#32;catgets(c,set,msgid,s).</emphasis>
1936 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1937 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__c&#32;&#32;The&#32;catalog&#32;to&#32;access.</emphasis>
1938 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__set&#32;&#32;Implementation-defined.</emphasis>
1939 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__msgid&#32;&#32;Implementation-defined.</emphasis>
1940 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__s&#32;&#32;Default&#32;return&#32;value&#32;if&#32;retrieval&#32;fails.</emphasis>
1941 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@return&#32;&#32;Retrieved&#32;message&#32;or&#32;@a&#32;__s&#32;if&#32;get&#32;fails.</emphasis>
1942 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1943 &#32;&#32;&#32;&#32;&#32;&#32;string_type
1944 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(catalog&#32;__c,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__set,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__msgid,&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
1945 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_get(__c,&#32;__set,&#32;__msgid,&#32;__s);&#32;}
1946 
1947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1948 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Close&#32;a&#32;message&#32;catalog.</emphasis>
1949 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1950 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;Closes&#32;catalog&#32;@a&#32;c&#32;by&#32;calling&#32;do_close(c).</emphasis>
1951 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1952 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__c&#32;&#32;The&#32;catalog&#32;to&#32;close.</emphasis>
1953 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1955 &#32;&#32;&#32;&#32;&#32;&#32;close(catalog&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
1956 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_close(__c);&#32;}
1957 
1958 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1960 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
1961 &#32;&#32;&#32;&#32;&#32;&#32;~messages();
1962 
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1964 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Open&#32;a&#32;message&#32;catalog.</emphasis>
1965 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1966 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;This&#32;function&#32;opens&#32;and&#32;returns&#32;a&#32;handle&#32;to&#32;a&#32;message&#32;catalog&#32;in&#32;an</emphasis>
1967 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;implementation-defined&#32;manner.&#32;&#32;This&#32;function&#32;is&#32;a&#32;hook&#32;for&#32;derived</emphasis>
1968 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;classes&#32;to&#32;change&#32;the&#32;value&#32;returned.</emphasis>
1969 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1970 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__s&#32;&#32;The&#32;catalog&#32;to&#32;open.</emphasis>
1971 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__loc&#32;&#32;Locale&#32;to&#32;use&#32;for&#32;character&#32;set&#32;conversions.</emphasis>
1972 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@return&#32;&#32;Handle&#32;to&#32;the&#32;opened&#32;catalog,&#32;value&#32;&lt;&#32;0&#32;if&#32;open&#32;failed.</emphasis>
1973 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;catalog
1975 &#32;&#32;&#32;&#32;&#32;&#32;do_open(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char&gt;</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;)&#32;<emphasis role="keyword">const</emphasis>;
1976 
1977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1978 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Look&#32;up&#32;a&#32;string&#32;in&#32;a&#32;message&#32;catalog.</emphasis>
1979 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1980 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;This&#32;function&#32;retrieves&#32;and&#32;returns&#32;a&#32;message&#32;from&#32;a&#32;catalog&#32;in&#32;an</emphasis>
1981 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;implementation-defined&#32;manner.&#32;&#32;This&#32;function&#32;is&#32;a&#32;hook&#32;for&#32;derived</emphasis>
1982 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;classes&#32;to&#32;change&#32;the&#32;value&#32;returned.</emphasis>
1983 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1984 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;For&#32;gnu,&#32;@a&#32;__set&#32;and&#32;@a&#32;__msgid&#32;are&#32;ignored.&#32;&#32;Returns&#32;gettext(s).</emphasis>
1985 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;For&#32;default,&#32;returns&#32;s.&#32;For&#32;ieee,&#32;returns&#32;catgets(c,set,msgid,s).</emphasis>
1986 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1987 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__c&#32;&#32;The&#32;catalog&#32;to&#32;access.</emphasis>
1988 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__set&#32;&#32;Implementation-defined.</emphasis>
1989 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__msgid&#32;&#32;Implementation-defined.</emphasis>
1990 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__s&#32;&#32;Default&#32;return&#32;value&#32;if&#32;retrieval&#32;fails.</emphasis>
1991 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@return&#32;&#32;Retrieved&#32;message&#32;or&#32;@a&#32;__s&#32;if&#32;get&#32;fails.</emphasis>
1992 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;string_type
1994 &#32;&#32;&#32;&#32;&#32;&#32;do_get(catalog,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__dfault)&#32;<emphasis role="keyword">const</emphasis>;
1995 
1996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1997 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Close&#32;a&#32;message&#32;catalog.</emphasis>
1998 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
1999 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__c&#32;&#32;The&#32;catalog&#32;to&#32;close.</emphasis>
2000 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
2001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2002 &#32;&#32;&#32;&#32;&#32;&#32;do_close(catalog)&#32;<emphasis role="keyword">const</emphasis>;
2003 
2004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;a&#32;locale&#32;and&#32;codeset-converted&#32;string,&#32;given&#32;a&#32;char*&#32;message.</emphasis>
2005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*
2006 &#32;&#32;&#32;&#32;&#32;&#32;_M_convert_to_char(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__msg)<emphasis role="keyword">&#32;const</emphasis>
2007 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2008 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX</emphasis>
2009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">const_cast&lt;</emphasis>_CharT*<emphasis role="keyword">&gt;</emphasis>(__msg.c_str()));
2010 &#32;&#32;&#32;&#32;&#32;&#32;}
2011 
2012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;a&#32;locale&#32;and&#32;codeset-converted&#32;string,&#32;given&#32;a&#32;char*&#32;message.</emphasis>
2013 &#32;&#32;&#32;&#32;&#32;&#32;string_type
2014 &#32;&#32;&#32;&#32;&#32;&#32;_M_convert_from_char(<emphasis role="keywordtype">char</emphasis>*)<emphasis role="keyword">&#32;const</emphasis>
2015 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2016 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX</emphasis>
2017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type();
2018 &#32;&#32;&#32;&#32;&#32;&#32;}
2019 &#32;&#32;&#32;&#32;&#32;};
2020 
2021 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2022 &#32;&#32;&#32;&#32;locale::id&#32;messages&lt;_CharT&gt;::id;
2023 
2025 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
2026 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>
2027 &#32;&#32;&#32;&#32;messages&lt;char&gt;::do_get(catalog,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2028 
2029 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
2030 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
2031 &#32;&#32;&#32;&#32;wstring
2032 &#32;&#32;&#32;&#32;messages&lt;wchar_t&gt;::do_get(catalog,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;wstring&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2033 <emphasis role="preprocessor">#endif</emphasis>
2034 
2036 &#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
2037 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>messages_byname&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;messages&lt;_CharT&gt;
2038 &#32;&#32;&#32;&#32;{
2039 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
2041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
2042 
2043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2044 &#32;&#32;&#32;&#32;&#32;&#32;messages_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0);
2045 
2046 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2048 &#32;&#32;&#32;&#32;&#32;&#32;messages_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
2049 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;messages_byname(__s.c_str(),&#32;__refs)&#32;{&#32;}
2050 <emphasis role="preprocessor">#endif</emphasis>
2051 
2052 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
2053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
2054 &#32;&#32;&#32;&#32;&#32;&#32;~messages_byname()
2055 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2056 &#32;&#32;&#32;&#32;};
2057 
2058 _GLIBCXX_END_NAMESPACE_CXX11
2059 
2060 _GLIBCXX_END_NAMESPACE_VERSION
2061 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
2062 
2063 <emphasis role="comment">//&#32;Include&#32;host&#32;and&#32;configuration&#32;specific&#32;messages&#32;functions.</emphasis>
2064 <emphasis role="preprocessor">#include&#32;&lt;bits/messages_members.h&gt;</emphasis>
2065 
2066 <emphasis role="comment">//&#32;22.2.1.5&#32;&#32;Template&#32;class&#32;codecvt</emphasis>
2067 <emphasis role="preprocessor">#include&#32;&lt;bits/codecvt.h&gt;</emphasis>
2068 
2069 <emphasis role="preprocessor">#include&#32;&lt;bits/locale_facets_nonio.tcc&gt;</emphasis>
2070 
2071 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
