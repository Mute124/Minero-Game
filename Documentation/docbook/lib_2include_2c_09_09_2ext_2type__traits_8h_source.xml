<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2type__traits_8h_source" xml:lang="en-US">
<title>type_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/type_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_EXT_TYPE_TRAITS</emphasis>
30 <emphasis role="preprocessor">#define&#32;_EXT_TYPE_TRAITS&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
33 
34 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>
36 
37 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C++&quot;</emphasis>&#32;{
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 
43 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;a&#32;nested&#32;type&#32;if&#32;some&#32;predicate&#32;holds.</emphasis>
44 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
45 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__enable_if&#32;
46 &#32;&#32;&#32;&#32;{&#32;};
47 
48 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__enable_if&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;_Tp&gt;
50 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;__type;&#32;};
51 
52 
53 &#32;&#32;<emphasis role="comment">//&#32;Conditional&#32;expression&#32;for&#32;types.&#32;If&#32;true,&#32;first,&#32;if&#32;false,&#32;second.</emphasis>
54 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Cond,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iftrue,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iffalse&gt;
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__conditional_type
56 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iftrue&#32;__type;&#32;};
57 
58 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iftrue,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iffalse&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__conditional_type&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_Iftrue,&#32;_Iffalse&gt;
60 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iffalse&#32;__type;&#32;};
61 
62 
63 &#32;&#32;<emphasis role="comment">//&#32;Given&#32;an&#32;integral&#32;builtin&#32;type,&#32;return&#32;the&#32;corresponding&#32;unsigned&#32;type.</emphasis>
64 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned
66 &#32;&#32;&#32;&#32;{&#32;
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__enable_if&lt;std::__is_integer&lt;_Tp&gt;::__value,&#32;_Tp&gt;&#32;__if_type;
69 &#32;&#32;&#32;&#32;&#32;&#32;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__if_type::__type&#32;__type;&#32;
72 &#32;&#32;&#32;&#32;};
73 
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;char&gt;
76 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__type;&#32;};
77 
78 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;signed&#32;char&gt;
80 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__type;&#32;};
81 
82 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;short&gt;
84 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;__type;&#32;};
85 
86 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;int&gt;
88 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__type;&#32;};
89 
90 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;long&gt;
92 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__type;&#32;};
93 
94 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;long&#32;long&gt;
96 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__type;&#32;};
97 
98 &#32;&#32;<emphasis role="comment">//&#32;Declare&#32;but&#32;don&apos;t&#32;define.</emphasis>
99 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;;
101 
102 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__add_unsigned&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;;
104 
105 
106 &#32;&#32;<emphasis role="comment">//&#32;Given&#32;an&#32;integral&#32;builtin&#32;type,&#32;return&#32;the&#32;corresponding&#32;signed&#32;type.</emphasis>
107 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned
109 &#32;&#32;&#32;&#32;{&#32;
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__enable_if&lt;std::__is_integer&lt;_Tp&gt;::__value,&#32;_Tp&gt;&#32;__if_type;
112 &#32;&#32;&#32;&#32;&#32;&#32;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__if_type::__type&#32;__type;&#32;
115 &#32;&#32;&#32;&#32;};
116 
117 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;char&gt;
119 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__type;&#32;};
120 
121 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;unsigned&#32;char&gt;
123 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__type;&#32;};
124 
125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;unsigned&#32;short&gt;
127 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;__type;&#32;};
128 
129 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;unsigned&#32;int&gt;
131 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__type;&#32;};
132 
133 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;unsigned&#32;long&gt;
135 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__type;&#32;};
136 
137 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;unsigned&#32;long&#32;long&gt;
139 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__type;&#32;};
140 
141 &#32;&#32;<emphasis role="comment">//&#32;Declare&#32;but&#32;don&apos;t&#32;define.</emphasis>
142 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;;
144 
145 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_unsigned&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;;
147 
148 
149 &#32;&#32;<emphasis role="comment">//&#32;For&#32;use&#32;in&#32;string&#32;and&#32;vstring.</emphasis>
150 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Type&gt;
151 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
153 &#32;&#32;&#32;&#32;__is_null_pointer(_Type*&#32;__ptr)
154 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr&#32;==&#32;0;&#32;}
155 
156 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Type&gt;
157 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
159 &#32;&#32;&#32;&#32;__is_null_pointer(_Type)
160 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
161 
162 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
163 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
164 &#32;&#32;__is_null_pointer(std::nullptr_t)
165 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
166 <emphasis role="preprocessor">#endif</emphasis>
167 
168 &#32;&#32;<emphasis role="comment">//&#32;For&#32;arithmetic&#32;promotions&#32;in&#32;&lt;complex&gt;&#32;and&#32;&lt;cmath&gt;</emphasis>
169 
170 &#32;&#32;template&lt;typename&#32;_Tp,&#32;bool&#32;=&#32;std::__is_integer&lt;_Tp&gt;::__value&gt;
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote
172 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__type;&#32;};
173 
174 &#32;&#32;<emphasis role="comment">//&#32;No&#32;nested&#32;__type&#32;member&#32;for&#32;non-integer&#32;non-floating&#32;point&#32;types,</emphasis>
175 &#32;&#32;<emphasis role="comment">//&#32;allows&#32;this&#32;type&#32;to&#32;be&#32;used&#32;for&#32;SFINAE&#32;to&#32;constrain&#32;overloads&#32;in</emphasis>
176 &#32;&#32;<emphasis role="comment">//&#32;&lt;cmath&gt;&#32;and&#32;&lt;complex&gt;&#32;to&#32;only&#32;the&#32;intended&#32;types.</emphasis>
177 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
179 &#32;&#32;&#32;&#32;{&#32;};
180 
181 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote&lt;long&#32;double&gt;
183 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__type;&#32;};
184 
185 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote&lt;double&gt;
187 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__type;&#32;};
188 
189 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
190 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote&lt;float&gt;
191 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__type;&#32;};
192 
193 <emphasis role="preprocessor">#if&#32;__cpp_fold_expressions</emphasis>
194 
195 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
196 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__promoted_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>((<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Tp&gt;::__type(0)&#32;+&#32;...));
197 
198 &#32;&#32;<emphasis role="comment">//&#32;Deducing&#32;the&#32;promoted&#32;type&#32;is&#32;done&#32;by&#32;__promoted_t&lt;_Tp...&gt;,</emphasis>
199 &#32;&#32;<emphasis role="comment">//&#32;then&#32;__promote&#32;is&#32;used&#32;to&#32;provide&#32;the&#32;nested&#32;__type&#32;member.</emphasis>
200 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
201 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__promote_2&#32;=&#32;__promote&lt;__promoted_t&lt;_Tp,&#32;_Up&gt;&gt;;
202 
203 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp&gt;
204 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__promote_3&#32;=&#32;__promote&lt;__promoted_t&lt;_Tp,&#32;_Up,&#32;_Vp&gt;&gt;;
205 
206 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Wp&gt;
207 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__promote_4&#32;=&#32;__promote&lt;__promoted_t&lt;_Tp,&#32;_Up,&#32;_Vp,&#32;_Wp&gt;&gt;;
208 
209 <emphasis role="preprocessor">#else</emphasis>
210 
211 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Tp&gt;::__type,
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Up&gt;::__type&gt;
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote_2
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__typeof__(_Tp2()&#32;+&#32;_Up2())&#32;__type;
217 &#32;&#32;&#32;&#32;};
218 
219 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp,
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Tp&gt;::__type,
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Up&gt;::__type,
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Vp&gt;::__type&gt;
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote_3
224 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__typeof__(_Tp2()&#32;+&#32;_Up2()&#32;+&#32;_Vp2())&#32;__type;
226 &#32;&#32;&#32;&#32;};
227 
228 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Wp,
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Tp&gt;::__type,
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Up&gt;::__type,
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Vp&gt;::__type,
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Wp2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__promote&lt;_Wp&gt;::__type&gt;
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__promote_4
234 &#32;&#32;&#32;&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__typeof__(_Tp2()&#32;+&#32;_Up2()&#32;+&#32;_Vp2()&#32;+&#32;_Wp2())&#32;__type;
236 &#32;&#32;&#32;&#32;};
237 <emphasis role="preprocessor">#endif</emphasis>
238 
239 _GLIBCXX_END_NAMESPACE_VERSION
240 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
241 }&#32;<emphasis role="comment">//&#32;extern&#32;&quot;C++&quot;</emphasis>
242 
243 <emphasis role="preprocessor">#endif&#32;</emphasis>
</programlisting></section>
