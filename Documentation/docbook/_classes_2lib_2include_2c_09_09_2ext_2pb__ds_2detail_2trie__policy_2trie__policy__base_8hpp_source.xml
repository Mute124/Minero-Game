<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2trie__policy_2trie__policy__base_8hpp_source" xml:lang="en-US">
<title>trie_policy_base.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/trie_policy/trie_policy_base.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifndef&#32;PB_DS_TRIE_POLICY_BASE_HPP</emphasis>
42 <emphasis role="preprocessor">#define&#32;PB_DS_TRIE_POLICY_BASE_HPP</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&lt;ext/pb_ds/detail/branch_policy/branch_policy.hpp&gt;</emphasis>
45 
46 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__pbds">__gnu_pbds</link>
47 {
48 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>detail
49 &#32;&#32;{
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node_CItr,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node_Itr,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ATraits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base">trie_policy_base</link>
54 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1branch__policy">branch_policy</link>&lt;Node_CItr,&#32;Node_Itr,&#32;_Alloc&gt;
55 &#32;&#32;&#32;&#32;{
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1branch__policy">branch_policy&lt;Node_CItr, Node_Itr, _Alloc&gt;</link>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1branch__policy">base_type</link>;
57 
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_ATraits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3bdc6e2badbc8b67dc8d8c64e8eb510b">access_traits</link>;
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a6b91a1a6cd0c7e8eb44d8df6678ef79c">allocator_type</link>;
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_type::size_type&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a4368bee7f62ad6f9af9e838b89fb1bef">size_type</link>;
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1null__type">null_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1af9ff0c8a456d4bc2b21f9b8c05b91a08">metadata_type</link>;
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Node_CItr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ab0b57cea30b20463f2c5416437aef914">node_const_iterator</link>;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Node_Itr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ae59bdc27bbddf1b87739130fd9d936e5">node_iterator</link>;
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;node_const_iterator::value_type&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a5a0f811e8dfb1021135df84ea975e368">const_iterator</link>;
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;node_iterator::value_type&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3f2206dc446a7df99df2e62019514392">iterator</link>;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1branch__policy_1a072873894d28bd8c0dcdf45d2cc4a716">base_type::key_type</link>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a49b8957277ab37202cc98759ac42c197">key_type</link>;
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1branch__policy_1a2b4f6fe644056dcbd3aaac0f4cc57770">base_type::key_const_reference</link>&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a921d8de461c50386550503d70cd7a016">key_const_reference</link>;
69 
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a5a0f811e8dfb1021135df84ea975e368">const_iterator</link>
72 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ade558c4d4c744deb280ad84c5b2bbc8f">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3f2206dc446a7df99df2e62019514392">iterator</link>
75 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1aaa007ad2ac0cf8acf696191d94b93dfa">end</link>()&#32;=&#32;0;
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ab0b57cea30b20463f2c5416437aef914">node_const_iterator</link>
78 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a57168578f9e18bc571d4d6332d60f267">node_begin</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ae59bdc27bbddf1b87739130fd9d936e5">node_iterator</link>
81 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a29ecc03ffc58511128a74646ca732adc">node_begin</link>()&#32;=&#32;0;
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ab0b57cea30b20463f2c5416437aef914">node_const_iterator</link>
84 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1afee2ca4511aed27f24de08c11f3b05a2">node_end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ae59bdc27bbddf1b87739130fd9d936e5">node_iterator</link>
87 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a5d945b28211c4bb07814cb5294e3e75a">node_end</link>()&#32;=&#32;0;
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3bdc6e2badbc8b67dc8d8c64e8eb510b">access_traits</link>&amp;
90 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a6bdf7b5ef11fe3955c005273e8efdd9d">get_access_traits</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
91 
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;access_traits::const_iterator&#32;&#32;&#32;&#32;e_const_iterator;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;e_const_iterator,&#32;e_const_iterator&gt;&#32;prefix_range_t;
95 
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a4368bee7f62ad6f9af9e838b89fb1bef">size_type</link>
98 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a40a998bbf8f8aa226364fb6b9427ed4b">common_prefix_len</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ae59bdc27bbddf1b87739130fd9d936e5">node_iterator</link>,&#32;e_const_iterator,
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e_const_iterator,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3bdc6e2badbc8b67dc8d8c64e8eb510b">access_traits</link>&amp;);
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3f2206dc446a7df99df2e62019514392">iterator</link>
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1aaa7a34287b762c82579c94f1eb19cb50">leftmost_it</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ae59bdc27bbddf1b87739130fd9d936e5">node_iterator</link>);
103 
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3f2206dc446a7df99df2e62019514392">iterator</link>
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a9a5da97da4f9d68533d379b8ee271a47">rightmost_it</link>(<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1ae59bdc27bbddf1b87739130fd9d936e5">node_iterator</link>);
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1abaf0c659ef41b32cb084b3c6a45293f8">less</link>(e_const_iterator,&#32;e_const_iterator,&#32;e_const_iterator,
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;e_const_iterator,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__pbds_1_1detail_1_1trie__policy__base_1a3bdc6e2badbc8b67dc8d8c64e8eb510b">access_traits</link>&amp;);
110 &#32;&#32;&#32;&#32;};
111 
112 
113 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_T_DEC&#32;\</emphasis>
114 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;Node_CItr,&#32;typename&#32;Node_Itr,&#32;\</emphasis>
115 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_ATraits,&#32;typename&#32;_Alloc&gt;</emphasis>
116 
117 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_C_DEC&#32;\</emphasis>
118 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;trie_policy_base&lt;Node_CItr,&#32;Node_Itr,&#32;_ATraits,&#32;_Alloc&gt;</emphasis>
119 
120 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::size_type
122 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
123 &#32;&#32;&#32;&#32;common_prefix_len(node_iterator&#32;nd_it,&#32;e_const_iterator&#32;b_r,
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e_const_iterator&#32;e_r,&#32;<emphasis role="keyword">const</emphasis>&#32;access_traits&amp;&#32;r_traits)
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;prefix_range_t&#32;pref_range&#32;=&#32;nd_it.valid_prefix();
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;e_const_iterator&#32;b_l&#32;=&#32;pref_range.first;
129 &#32;&#32;&#32;&#32;&#32;&#32;e_const_iterator&#32;e_l&#32;=&#32;pref_range.second;
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;range_length_l&#32;=&#32;std::distance(b_l,&#32;e_l);
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;range_length_r&#32;=&#32;std::distance(b_r,&#32;e_r);
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(range_length_r&#32;&lt;&#32;range_length_l)
135 &#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(b_l,&#32;b_r);
137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(e_l,&#32;e_r);
138 &#32;&#32;&#32;&#32;}
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;ret&#32;=&#32;0;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(b_l&#32;!=&#32;e_l)
142 &#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r_traits.e_pos(*b_l)&#32;!=&#32;r_traits.e_pos(*b_r))
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;++ret;
147 &#32;&#32;&#32;&#32;&#32;&#32;++b_l;
148 &#32;&#32;&#32;&#32;&#32;&#32;++b_r;
149 &#32;&#32;&#32;&#32;}
150 
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
152 &#32;&#32;&#32;&#32;}
153 
154 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
156 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
157 &#32;&#32;&#32;&#32;leftmost_it(node_iterator&#32;nd_it)
158 &#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nd_it.num_children()&#32;==&#32;0)
160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*nd_it;
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;leftmost_it(nd_it.get_child(0));
163 &#32;&#32;&#32;&#32;}
164 
165 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator
167 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
168 &#32;&#32;&#32;&#32;rightmost_it(node_iterator&#32;nd_it)
169 &#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;num_children&#32;=&#32;nd_it.num_children();
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(num_children&#32;==&#32;0)
173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*nd_it;
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rightmost_it(nd_it.get_child(num_children&#32;-&#32;1));
176 &#32;&#32;&#32;&#32;}
177 
178 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
180 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
181 &#32;&#32;&#32;&#32;less(e_const_iterator&#32;b_l,&#32;e_const_iterator&#32;e_l,
182 &#32;&#32;&#32;&#32;&#32;e_const_iterator&#32;b_r,&#32;e_const_iterator&#32;e_r,
183 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;access_traits&amp;&#32;r_traits)
184 &#32;&#32;&#32;&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(b_l&#32;!=&#32;e_l)
186 &#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(b_r&#32;==&#32;e_r)
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;l_pos&#32;=&#32;r_traits.e_pos(*b_l);
191 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;r_pos&#32;=&#32;r_traits.e_pos(*b_r);
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l_pos&#32;!=&#32;r_pos)
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(l_pos&#32;&lt;&#32;r_pos);
194 
195 &#32;&#32;&#32;&#32;&#32;&#32;++b_l;
196 &#32;&#32;&#32;&#32;&#32;&#32;++b_r;
197 &#32;&#32;&#32;&#32;}
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;b_r&#32;!=&#32;e_r;
199 &#32;&#32;&#32;&#32;}
200 
201 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_T_DEC</emphasis>
202 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_C_DEC</emphasis>
203 
204 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
205 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_pbds</emphasis>
206 
207 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;#ifndef&#32;PB_DS_TRIE_POLICY_BASE_HPP</emphasis>
</programlisting></section>
