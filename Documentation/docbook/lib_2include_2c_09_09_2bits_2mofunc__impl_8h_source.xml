<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2mofunc__impl_8h_source" xml:lang="en-US">
<title>mofunc_impl.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/mofunc_impl.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Implementation&#32;of&#32;std::move_only_function&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;The&#32;GNU&#32;Toolchain&#32;Authors.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_MOF_CV</emphasis>
31 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_MOF_CV</emphasis>
32 <emphasis role="preprocessor">#endif</emphasis>
33 
34 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_MOF_REF</emphasis>
35 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_MOF_INV_QUALS&#32;_GLIBCXX_MOF_CV&#32;_GLIBCXX_MOF_REF</emphasis>
36 <emphasis role="preprocessor">#else</emphasis>
37 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_MOF_REF</emphasis>
38 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_MOF_INV_QUALS&#32;_GLIBCXX_MOF_CV&#32;&amp;</emphasis>
39 <emphasis role="preprocessor">#endif</emphasis>
40 
41 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_CV_REF&#32;_GLIBCXX_MOF_CV&#32;_GLIBCXX_MOF_REF</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
63 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_ArgTypes,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Noex&gt;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>move_only_function&lt;_Res(_ArgTypes...)&#32;_GLIBCXX_MOF_CV
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2mofunc__impl_8h_1aaa9704ac71ba7a3f59a0e523b1ace789">_GLIBCXX_MOF_REF</link>&#32;noexcept(_Noex)&gt;
66 &#32;&#32;&#32;&#32;:&#32;_Mofunc_base
67 &#32;&#32;&#32;&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__callable
70 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;_Noex,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_invocable_r&lt;_Res,&#32;_Tp,&#32;_ArgTypes...&gt;,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_invocable_r&lt;_Res,&#32;_Tp,&#32;_ArgTypes...&gt;&gt;;
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[func.wrap.mov.con]/1&#32;is-callable-from&lt;VT&gt;</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Vt&gt;
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_callable_from
77 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__and_v&lt;__callable&lt;_Vt&#32;_GLIBCXX_MOF_CV_REF&gt;,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__callable&lt;_Vt&#32;_GLIBCXX_MOF_INV_QUALS&gt;&gt;;
79 
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>result_type&#32;=&#32;_Res;
82 
84 &#32;&#32;&#32;&#32;&#32;&#32;move_only_function()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;}
85 
87 &#32;&#32;&#32;&#32;&#32;&#32;move_only_function(nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;}
88 
90 &#32;&#32;&#32;&#32;&#32;&#32;move_only_function(move_only_function&amp;&amp;&#32;__x)&#32;noexcept
91 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Mofunc_base(<emphasis role="keyword">static_cast&lt;</emphasis>_Mofunc_base&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x)),
92 &#32;&#32;&#32;&#32;_M_invoke(std::__exchange(__x._M_invoke,&#32;<emphasis role="keyword">nullptr</emphasis>))
93 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
94 
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Vt&#32;=&#32;decay_t&lt;_Fn&gt;&gt;
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!is_same_v&lt;_Vt,&#32;move_only_function&gt;)
98 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!__is_in_place_type_v&lt;_Vt&gt;)&#32;&amp;&amp;&#32;__is_callable_from&lt;_Vt&gt;
99 &#32;&#32;&#32;&#32;move_only_function(_Fn&amp;&amp;&#32;__f)&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_init&lt;_Vt,&#32;_Fn&gt;())
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_function_v&lt;remove_pointer_t&lt;_Vt&gt;&gt;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_member_pointer_v&lt;_Vt&gt;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__is_move_only_function_v&lt;_Vt&gt;)
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__f&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
108 &#32;&#32;&#32;&#32;&#32;&#32;_M_init&lt;_Vt&gt;(std::forward&lt;_Fn&gt;(__f));
109 &#32;&#32;&#32;&#32;&#32;&#32;_M_invoke&#32;=&#32;&amp;_S_invoke&lt;_Vt&gt;;
110 &#32;&#32;&#32;&#32;}
111 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_constructible_v&lt;_Tp,&#32;_Args...&gt;
115 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_callable_from&lt;_Tp&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
117 &#32;&#32;&#32;&#32;move_only_function(in_place_type_t&lt;_Tp&gt;,&#32;_Args&amp;&amp;...&#32;__args)
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_init&lt;_Tp,&#32;_Args...&gt;())
119 &#32;&#32;&#32;&#32;:&#32;_M_invoke(&amp;_S_invoke&lt;_Tp&gt;)
120 &#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;decay_t&lt;_Tp&gt;,&#32;_Tp&gt;);
122 &#32;&#32;&#32;&#32;&#32;&#32;_M_init&lt;_Tp&gt;(std::forward&lt;_Args&gt;(__args)...);
123 &#32;&#32;&#32;&#32;}
124 
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_constructible_v&lt;_Tp,&#32;initializer_list&lt;_Up&gt;&amp;,&#32;_Args...&gt;
128 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_callable_from&lt;_Tp&gt;
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
130 &#32;&#32;&#32;&#32;move_only_function(in_place_type_t&lt;_Tp&gt;,&#32;initializer_list&lt;_Up&gt;&#32;__il,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_init&lt;_Tp,&#32;initializer_list&lt;_Up&gt;&amp;,&#32;_Args...&gt;())
133 &#32;&#32;&#32;&#32;:&#32;_M_invoke(&amp;_S_invoke&lt;_Tp&gt;)
134 &#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;decay_t&lt;_Tp&gt;,&#32;_Tp&gt;);
136 &#32;&#32;&#32;&#32;&#32;&#32;_M_init&lt;_Tp&gt;(__il,&#32;std::forward&lt;_Args&gt;(__args)...);
137 &#32;&#32;&#32;&#32;}
138 
140 &#32;&#32;&#32;&#32;&#32;&#32;move_only_function&amp;
141 &#32;&#32;&#32;&#32;&#32;&#32;operator=(move_only_function&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
142 &#32;&#32;&#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;_Mofunc_base::operator=(<emphasis role="keyword">static_cast&lt;</emphasis>_Mofunc_base&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x));
144 &#32;&#32;&#32;&#32;_M_invoke&#32;=&#32;std::__exchange(__x._M_invoke,&#32;<emphasis role="keyword">nullptr</emphasis>);
145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
146 &#32;&#32;&#32;&#32;&#32;&#32;}
147 
149 &#32;&#32;&#32;&#32;&#32;&#32;move_only_function&amp;
150 &#32;&#32;&#32;&#32;&#32;&#32;operator=(nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;_Mofunc_base::operator=(<emphasis role="keyword">nullptr</emphasis>);
153 &#32;&#32;&#32;&#32;_M_invoke&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
155 &#32;&#32;&#32;&#32;&#32;&#32;}
156 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_constructible_v&lt;move_only_function,&#32;_Fn&gt;
160 &#32;&#32;&#32;&#32;move_only_function&amp;
161 &#32;&#32;&#32;&#32;operator=(_Fn&amp;&amp;&#32;__f)
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_constructible_v&lt;move_only_function,&#32;_Fn&gt;)
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;move_only_function(std::forward&lt;_Fn&gt;(__f)).swap(*<emphasis role="keyword">this</emphasis>);
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
166 &#32;&#32;&#32;&#32;}
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;~move_only_function()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
169 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_invoke&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
172 
181 &#32;&#32;&#32;&#32;&#32;&#32;_Res
182 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_ArgTypes...&#32;__args)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2mofunc__impl_8h_1aae946c38e1c7ca36e5eb8088ea9d6b1c">_GLIBCXX_MOF_CV_REF</link>&#32;<emphasis role="keyword">noexcept</emphasis>(_Noex)
183 &#32;&#32;&#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;__glibcxx_assert(*<emphasis role="keyword">this</emphasis>&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_invoke(<emphasis role="keyword">this</emphasis>,&#32;std::forward&lt;_ArgTypes&gt;(__args)...);
186 &#32;&#32;&#32;&#32;&#32;&#32;}
187 
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;swap(move_only_function&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
191 &#32;&#32;&#32;&#32;&#32;&#32;{
192 &#32;&#32;&#32;&#32;_Mofunc_base::swap(__x);
193 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_invoke,&#32;__x._M_invoke);
194 &#32;&#32;&#32;&#32;&#32;&#32;}
195 
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;swap(move_only_function&amp;&#32;__x,&#32;move_only_function&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
199 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
200 
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;move_only_function&amp;&#32;__x,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_invoke&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
205 
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__param_t
209 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;is_trivially_copyable_v&lt;_Tp&gt;
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>),
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;_Tp&amp;&amp;&gt;;
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Invoker&#32;=&#32;_Res&#32;(*)(_Mofunc_base&#32;_GLIBCXX_MOF_CV*,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__param_t&lt;_ArgTypes&gt;...)&#32;<emphasis role="keyword">noexcept</emphasis>(_Noex);
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
217 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Res
218 &#32;&#32;&#32;&#32;_S_invoke(_Mofunc_base&#32;_GLIBCXX_MOF_CV*&#32;__self,
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__param_t&lt;_ArgTypes&gt;...&#32;__args)&#32;<emphasis role="keyword">noexcept</emphasis>(_Noex)
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TpCv&#32;=&#32;_Tp&#32;_GLIBCXX_MOF_CV;
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TpInv&#32;=&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2mofunc__impl_8h_1aff3621726f1a868b7a00cb3ca89c8901">_GLIBCXX_MOF_INV_QUALS</link>;
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke_r&lt;_Res&gt;(
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_TpInv&gt;(*_S_access&lt;_TpCv&gt;(__self)),
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;__param_t&lt;_ArgTypes&gt;&gt;(__args)...);
226 &#32;&#32;&#32;&#32;}
227 
228 &#32;&#32;&#32;&#32;&#32;&#32;_Invoker&#32;_M_invoke&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
229 &#32;&#32;&#32;&#32;};
230 
231 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_MOF_CV_REF</emphasis>
232 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_MOF_CV</emphasis>
233 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_MOF_REF</emphasis>
234 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_MOF_INV_QUALS</emphasis>
235 
236 _GLIBCXX_END_NAMESPACE_VERSION
237 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
</programlisting></section>
