<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2regex__automaton_8h_source" xml:lang="en-US">
<title>regex_automaton.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/regex_automaton.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;class&#32;template&#32;regex&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2013-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="comment">//&#32;This&#32;macro&#32;defines&#32;the&#32;maximal&#32;state&#32;number&#32;a&#32;NFA&#32;can&#32;have.</emphasis>
32 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_REGEX_STATE_LIMIT</emphasis>
33 <emphasis role="preprocessor">#define&#32;_GLIBCXX_REGEX_STATE_LIMIT&#32;100000</emphasis>
34 <emphasis role="preprocessor">#endif</emphasis>
35 
36 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
37 {
38 _GLIBCXX_BEGIN_NAMESPACE_VERSION
39 
40 <emphasis role="keyword">namespace&#32;</emphasis>__detail
41 {
48 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;_StateIdT;
49 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_StateIdT&#32;_S_invalid_state_id&#32;&#32;=&#32;-1;
50 
51 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Matcher&#32;=&#32;std::function&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>&#32;(_CharT)&gt;;
53 
56 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_Opcode&#32;:&#32;<emphasis role="keywordtype">int</emphasis>
57 &#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_unknown,
59 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_alternative,
60 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_repeat,
61 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_backref,
62 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_line_begin_assertion,
63 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_line_end_assertion,
64 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_word_boundary,
65 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_subexpr_lookahead,
66 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_subexpr_begin,
67 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_subexpr_end,
68 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_dummy,
69 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_match,
70 &#32;&#32;&#32;&#32;&#32;&#32;_S_opcode_accept,
71 &#32;&#32;};
72 
73 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_State_base
74 &#32;&#32;{
75 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
76 &#32;&#32;&#32;&#32;_Opcode&#32;&#32;&#32;&#32;&#32;&#32;_M_opcode;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type&#32;of&#32;outgoing&#32;transition</emphasis>
77 
78 &#32;&#32;<emphasis role="keyword">public</emphasis>:
79 &#32;&#32;&#32;&#32;_StateIdT&#32;&#32;&#32;&#32;_M_next;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;outgoing&#32;transition</emphasis>
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis><emphasis role="comment">//&#32;Since&#32;they&#32;are&#32;mutually&#32;exclusive.</emphasis>
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_subexpr;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;_S_opcode_subexpr_*</emphasis>
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_backref_index;&#32;&#32;<emphasis role="comment">//&#32;for&#32;_S_opcode_backref</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;_S_opcode_alternative,&#32;_S_opcode_repeat&#32;and</emphasis>
87 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_opcode_subexpr_lookahead</emphasis>
88 &#32;&#32;&#32;&#32;_StateIdT&#32;&#32;_M_alt;
89 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;_S_opcode_word_boundary&#32;or&#32;_S_opcode_subexpr_lookahead&#32;or</emphasis>
90 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;quantifiers&#32;(ungreedy&#32;if&#32;set&#32;true)</emphasis>
91 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_neg;
92 &#32;&#32;&#32;&#32;&#32;&#32;};
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;_S_opcode_match</emphasis>
94 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____aligned__membuf">__gnu_cxx::__aligned_membuf&lt;_Matcher&lt;char&gt;</link>&gt;&#32;_M_matcher_storage;
95 &#32;&#32;&#32;&#32;};
96 
97 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_State_base(_Opcode&#32;__opcode)&#32;noexcept
99 &#32;&#32;&#32;&#32;:&#32;_M_opcode(__opcode),&#32;_M_next(_S_invalid_state_id)
100 &#32;&#32;&#32;&#32;{&#32;}
101 
102 &#32;&#32;<emphasis role="keyword">public</emphasis>:
103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
104 &#32;&#32;&#32;&#32;_M_has_alt()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_opcode&#32;==&#32;_S_opcode_alternative
107 &#32;&#32;&#32;&#32;||&#32;_M_opcode&#32;==&#32;_S_opcode_repeat
108 &#32;&#32;&#32;&#32;||&#32;_M_opcode&#32;==&#32;_S_opcode_subexpr_lookahead;
109 &#32;&#32;&#32;&#32;}
110 
111 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
112 &#32;&#32;&#32;&#32;std::ostream&amp;
113 &#32;&#32;&#32;&#32;_M_print(std::ostream&amp;&#32;ostr)&#32;<emphasis role="keyword">const</emphasis>;
114 
115 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prints&#32;graphviz&#32;dot&#32;commands&#32;for&#32;state.</emphasis>
116 &#32;&#32;&#32;&#32;std::ostream&amp;
117 &#32;&#32;&#32;&#32;_M_dot(std::ostream&amp;&#32;__ostr,&#32;_StateIdT&#32;__id)&#32;<emphasis role="keyword">const</emphasis>;
118 <emphasis role="preprocessor">#endif</emphasis>
119 &#32;&#32;};
120 
121 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Char_type&gt;
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_State&#32;:&#32;_State_base
123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Matcher&lt;_Char_type&gt;&#32;_MatcherT;
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_MatcherT)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Matcher&lt;char&gt;),
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::function&lt;bool(T)&gt;&#32;has&#32;the&#32;same&#32;size&#32;as&#32;&quot;</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::function&lt;bool(char)&gt;&quot;</emphasis>);
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">alignof</emphasis>(_MatcherT)&#32;==&#32;<emphasis role="keyword">alignof</emphasis>(_Matcher&lt;char&gt;),
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::function&lt;bool(T)&gt;&#32;has&#32;the&#32;same&#32;alignment&#32;as&#32;&quot;</emphasis>
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::function&lt;bool(char)&gt;&quot;</emphasis>);
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;_State(_Opcode&#32;__opcode)&#32;noexcept&#32;:&#32;_State_base(__opcode)
134 &#32;&#32;&#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_opcode()&#32;==&#32;_S_opcode_match)
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(this-&gt;_M_matcher_storage._M_addr())&#32;_MatcherT();
137 &#32;&#32;&#32;&#32;&#32;&#32;}
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;_State(<emphasis role="keyword">const</emphasis>&#32;_State&amp;&#32;__rhs)&#32;:&#32;_State_base(__rhs)
140 &#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rhs._M_opcode()&#32;==&#32;_S_opcode_match)
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(this-&gt;_M_matcher_storage._M_addr())
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MatcherT(__rhs._M_get_matcher());
144 &#32;&#32;&#32;&#32;&#32;&#32;}
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;_State(_State&amp;&amp;&#32;__rhs)&#32;noexcept&#32;:&#32;_State_base(__rhs)
147 &#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rhs._M_opcode()&#32;==&#32;_S_opcode_match)
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(this-&gt;_M_matcher_storage._M_addr())
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MatcherT(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rhs._M_get_matcher()));
151 &#32;&#32;&#32;&#32;&#32;&#32;}
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;_State&amp;
154 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_State&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
155 
156 &#32;&#32;&#32;&#32;&#32;&#32;~_State()
157 &#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_opcode()&#32;==&#32;_S_opcode_match)
159 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_matcher().~_MatcherT();
160 &#32;&#32;&#32;&#32;&#32;&#32;}
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;correct&#32;ctor&#32;and&#32;dtor&#32;rely&#32;on&#32;_M_opcode,&#32;it&apos;s&#32;better&#32;not&#32;to</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;change&#32;it&#32;over&#32;time.</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;_Opcode
165 &#32;&#32;&#32;&#32;&#32;&#32;_M_opcode()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_State_base::_M_opcode;&#32;}
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;_M_matches(_Char_type&#32;__char)<emphasis role="keyword">&#32;const</emphasis>
170 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_matcher()(__char);&#32;}
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;_MatcherT&amp;
173 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_matcher()&#32;<emphasis role="keyword">noexcept</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_MatcherT*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_matcher_storage._M_addr());&#32;}
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MatcherT&amp;
177 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_matcher()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_MatcherT*<emphasis role="keyword">&gt;</emphasis>(
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_matcher_storage._M_addr());
181 &#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;&#32;&#32;};
183 
184 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_NFA_base
185 &#32;&#32;{
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_constants::syntax_option_type&#32;_FlagT;
187 
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
189 &#32;&#32;&#32;&#32;_NFA_base(_FlagT&#32;__f)&#32;noexcept
190 &#32;&#32;&#32;&#32;:&#32;_M_flags(__f),&#32;_M_start_state(0),&#32;_M_subexpr_count(0),
191 &#32;&#32;&#32;&#32;_M_has_backref(<emphasis role="keyword">false</emphasis>)
192 &#32;&#32;&#32;&#32;{&#32;}
193 
194 &#32;&#32;&#32;&#32;_NFA_base(_NFA_base&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
195 
196 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
197 &#32;&#32;&#32;&#32;~_NFA_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
198 
199 &#32;&#32;<emphasis role="keyword">public</emphasis>:
200 &#32;&#32;&#32;&#32;_FlagT
201 &#32;&#32;&#32;&#32;_M_options()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
202 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags;&#32;}
203 
204 &#32;&#32;&#32;&#32;_StateIdT
205 &#32;&#32;&#32;&#32;_M_start()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
206 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_start_state;&#32;}
207 
208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
209 &#32;&#32;&#32;&#32;_M_sub_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
210 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_subexpr_count;&#32;}
211 
212 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::vector&lt;size_t&gt;&#32;_M_paren_stack;
213 &#32;&#32;&#32;&#32;_FlagT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_flags;
214 &#32;&#32;&#32;&#32;_StateIdT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_start_state;
215 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_subexpr_count;
216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_has_backref;
217 &#32;&#32;};
218 
219 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT&gt;
220 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_NFA
221 &#32;&#32;&#32;&#32;:&#32;_NFA_base,&#32;_GLIBCXX_STD_C::vector&lt;_State&lt;typename&#32;_TraitsT::char_type&gt;&gt;
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::char_type&#32;&#32;_Char_type;
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_State&lt;_Char_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StateT;
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Matcher&lt;_Char_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;_MatcherT;
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;_NFA(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::locale_type&amp;&#32;__loc,&#32;_FlagT&#32;__flags)
228 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_NFA_base(__flags)
229 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_traits.imbue(__loc);&#32;}
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;performance&#32;reasons&#32;_NFA&#32;objects&#32;should&#32;only&#32;be&#32;moved&#32;not&#32;copied</emphasis>
232 &#32;&#32;&#32;&#32;&#32;&#32;_NFA(<emphasis role="keyword">const</emphasis>&#32;_NFA&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
233 &#32;&#32;&#32;&#32;&#32;&#32;_NFA(_NFA&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
234 
235 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
236 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_accept()
237 &#32;&#32;&#32;&#32;&#32;&#32;{
238 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;_M_insert_state(_StateT(_S_opcode_accept));
239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
240 &#32;&#32;&#32;&#32;&#32;&#32;}
241 
242 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
243 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_alt(_StateIdT&#32;__next,&#32;_StateIdT&#32;__alt,
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)))
245 &#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;_StateT&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(_S_opcode_alternative);
247 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;labels&#32;every&#32;quantifier&#32;to&#32;make&#32;greedy&#32;comparison&#32;easier&#32;in&#32;BFS</emphasis>
248 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;approach.</emphasis>
249 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_next&#32;=&#32;__next;
250 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_alt&#32;=&#32;__alt;
251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>));
252 &#32;&#32;&#32;&#32;&#32;&#32;}
253 
254 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
255 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_repeat(_StateIdT&#32;__next,&#32;_StateIdT&#32;__alt,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg)
256 &#32;&#32;&#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;_StateT&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(_S_opcode_repeat);
258 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;labels&#32;every&#32;quantifier&#32;to&#32;make&#32;greedy&#32;comparison&#32;easier&#32;in&#32;BFS</emphasis>
259 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;approach.</emphasis>
260 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_next&#32;=&#32;__next;
261 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_alt&#32;=&#32;__alt;
262 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_neg&#32;=&#32;__neg;
263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>));
264 &#32;&#32;&#32;&#32;&#32;&#32;}
265 
266 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
267 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_matcher(_MatcherT&#32;__m)
268 &#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;_StateT&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(_S_opcode_match);
270 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_get_matcher()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__m);
271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>));
272 &#32;&#32;&#32;&#32;&#32;&#32;}
273 
274 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
275 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_subexpr_begin()
276 &#32;&#32;&#32;&#32;&#32;&#32;{
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__id&#32;=&#32;this-&gt;_M_subexpr_count++;
278 &#32;&#32;&#32;&#32;this-&gt;_M_paren_stack.push_back(__id);
279 &#32;&#32;&#32;&#32;_StateT&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(_S_opcode_subexpr_begin);
280 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_subexpr&#32;=&#32;__id;
281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>));
282 &#32;&#32;&#32;&#32;&#32;&#32;}
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
285 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_subexpr_end()
286 &#32;&#32;&#32;&#32;&#32;&#32;{
287 &#32;&#32;&#32;&#32;_StateT&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(_S_opcode_subexpr_end);
288 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_subexpr&#32;=&#32;this-&gt;_M_paren_stack.back();
289 &#32;&#32;&#32;&#32;this-&gt;_M_paren_stack.pop_back();
290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>));
291 &#32;&#32;&#32;&#32;&#32;&#32;}
292 
293 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
294 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_backref(<emphasis role="keywordtype">size_t</emphasis>&#32;__index);
295 
296 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
297 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_line_begin()
298 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(_StateT(_S_opcode_line_begin_assertion));&#32;}
299 
300 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
301 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_line_end()
302 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(_StateT(_S_opcode_line_end_assertion));&#32;}
303 
304 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
305 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_word_bound(<emphasis role="keywordtype">bool</emphasis>&#32;__neg)
306 &#32;&#32;&#32;&#32;&#32;&#32;{
307 &#32;&#32;&#32;&#32;_StateT&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(_S_opcode_word_boundary);
308 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_neg&#32;=&#32;__neg;
309 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>));
310 &#32;&#32;&#32;&#32;&#32;&#32;}
311 
312 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
313 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_lookahead(_StateIdT&#32;__alt,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg)
314 &#32;&#32;&#32;&#32;&#32;&#32;{
315 &#32;&#32;&#32;&#32;_StateT&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(_S_opcode_subexpr_lookahead);
316 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_alt&#32;=&#32;__alt;
317 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_neg&#32;=&#32;__neg;
318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>));
319 &#32;&#32;&#32;&#32;&#32;&#32;}
320 
321 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
322 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_dummy()
323 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_insert_state(_StateT(_S_opcode_dummy));&#32;}
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT
326 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_state(_StateT&#32;__s)
327 &#32;&#32;&#32;&#32;&#32;&#32;{
328 &#32;&#32;&#32;&#32;this-&gt;push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__s));
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;&gt;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2regex__automaton_8h_1a54050905c0a97027a3d6f1053a03deb6">_GLIBCXX_REGEX_STATE_LIMIT</link>)
330 &#32;&#32;&#32;&#32;&#32;&#32;__throw_regex_error(
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::error_space,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Number&#32;of&#32;NFA&#32;states&#32;exceeds&#32;limit.&#32;Please&#32;use&#32;shorter&#32;regex&#32;&quot;</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;string,&#32;or&#32;use&#32;smaller&#32;brace&#32;expression,&#32;or&#32;make&#32;&quot;</emphasis>
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_GLIBCXX_REGEX_STATE_LIMIT&#32;larger.&quot;</emphasis>);
335 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1;
336 &#32;&#32;&#32;&#32;&#32;&#32;}
337 
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Eliminate&#32;dummy&#32;node&#32;in&#32;this&#32;NFA&#32;to&#32;make&#32;it&#32;compact.</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;_M_eliminate_dummy();
341 
342 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;
344 &#32;&#32;&#32;&#32;&#32;&#32;_M_dot(std::ostream&amp;&#32;__ostr)&#32;<emphasis role="keyword">const</emphasis>;
345 <emphasis role="preprocessor">#endif</emphasis>
346 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
347 &#32;&#32;&#32;&#32;&#32;&#32;_TraitsT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_traits;
348 &#32;&#32;&#32;&#32;};
349 
353 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT&gt;
354 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_StateSeq
355 &#32;&#32;&#32;&#32;{
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_NFA&lt;_TraitsT&gt;&#32;_RegexT;
358 
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
360 &#32;&#32;&#32;&#32;&#32;&#32;_StateSeq(_RegexT&amp;&#32;__nfa,&#32;_StateIdT&#32;__s)
361 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_nfa(__nfa),&#32;_M_start(__s),&#32;_M_end(__s)
362 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;_StateSeq(_RegexT&amp;&#32;__nfa,&#32;_StateIdT&#32;__s,&#32;_StateIdT&#32;__end)
365 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_nfa(__nfa),&#32;_M_start(__s),&#32;_M_end(__end)
366 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
367 
368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Append&#32;a&#32;state&#32;on&#32;*this&#32;and&#32;change&#32;*this&#32;to&#32;the&#32;new&#32;sequence.</emphasis>
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;_M_append(_StateIdT&#32;__id)
371 &#32;&#32;&#32;&#32;&#32;&#32;{
372 &#32;&#32;&#32;&#32;_M_nfa[_M_end]._M_next&#32;=&#32;__id;
373 &#32;&#32;&#32;&#32;_M_end&#32;=&#32;__id;
374 &#32;&#32;&#32;&#32;&#32;&#32;}
375 
376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Append&#32;a&#32;sequence&#32;on&#32;*this&#32;and&#32;change&#32;*this&#32;to&#32;the&#32;new&#32;sequence.</emphasis>
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;_M_append(<emphasis role="keyword">const</emphasis>&#32;_StateSeq&amp;&#32;__s)
379 &#32;&#32;&#32;&#32;&#32;&#32;{
380 &#32;&#32;&#32;&#32;_M_nfa[_M_end]._M_next&#32;=&#32;__s._M_start;
381 &#32;&#32;&#32;&#32;_M_end&#32;=&#32;__s._M_end;
382 &#32;&#32;&#32;&#32;&#32;&#32;}
383 
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clones&#32;an&#32;entire&#32;sequence.</emphasis>
385 &#32;&#32;&#32;&#32;&#32;&#32;_StateSeq
386 &#32;&#32;&#32;&#32;&#32;&#32;_M_clone();
387 
388 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
389 &#32;&#32;&#32;&#32;&#32;&#32;_RegexT&amp;&#32;&#32;_M_nfa;
390 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT&#32;_M_start;
391 &#32;&#32;&#32;&#32;&#32;&#32;_StateIdT&#32;_M_end;
392 &#32;&#32;&#32;&#32;};
393 
395 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
396 
397 _GLIBCXX_END_NAMESPACE_VERSION
398 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
399 
400 <emphasis role="preprocessor">#include&#32;&lt;bits/regex_automaton.tcc&gt;</emphasis>
</programlisting></section>
