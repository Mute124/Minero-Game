<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2pointer_8h_source" xml:lang="en-US">
<title>pointer.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pointer.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Custom&#32;pointer&#32;adapter&#32;and&#32;sample&#32;storage&#32;policies</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
36 <emphasis role="preprocessor">#ifndef&#32;_POINTER_H</emphasis>
37 <emphasis role="preprocessor">#define&#32;_POINTER_H&#32;1</emphasis>
38 
39 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
40 
41 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;ext/cast.h&gt;</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;ext/type_traits.h&gt;</emphasis>
45 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
46 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/move.h&gt;</emphasis>
47 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/ptr_traits.h&gt;</emphasis>
48 <emphasis role="preprocessor">#endif</emphasis>
49 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
50 <emphasis role="preprocessor">#&#32;include&#32;&lt;iterator&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;indirectly_readable_traits</emphasis>
51 <emphasis role="preprocessor">#endif</emphasis>
52 
53 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
54 {
55 _GLIBCXX_BEGIN_NAMESPACE_VERSION
56 
68 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Std_pointer_impl&#32;
70 &#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;type&#32;this&#32;pointer&#32;points&#32;to.</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;element_type;
74 &#32;&#32;
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;method&#32;to&#32;fetch&#32;the&#32;pointer&#32;value&#32;as&#32;a&#32;standard&#32;T*&#32;value;</emphasis>
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp*&#32;
77 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>
78 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_value;&#32;}
79 &#32;&#32;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;method&#32;to&#32;set&#32;the&#32;pointer&#32;value,&#32;from&#32;a&#32;standard&#32;T*&#32;value;</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;
82 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(element_type*&#32;__arg)&#32;
83 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_value&#32;=&#32;__arg;&#32;}
84 &#32;&#32;
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comparison&#32;of&#32;pointers</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Std_pointer_impl&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
88 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_value&#32;&lt;&#32;__rarg._M_value);&#32;}
89 &#32;&#32;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Std_pointer_impl&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
92 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_value&#32;==&#32;__rarg._M_value);&#32;}
93 
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
95 &#32;&#32;&#32;&#32;&#32;&#32;element_type*&#32;_M_value;
96 &#32;&#32;&#32;&#32;};
97 
111 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Relative_pointer_impl&#32;
113 &#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;element_type;
116 &#32;&#32;
117 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>
119 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_diff&#32;==&#32;1)
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_M_diff);
125 &#32;&#32;&#32;&#32;&#32;&#32;}
126 &#32;&#32;
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
128 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_Tp*&#32;__arg)
129 &#32;&#32;&#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__arg)
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_diff&#32;=&#32;1;
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_diff&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(__arg)&#32;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
135 &#32;&#32;&#32;&#32;&#32;&#32;}
136 &#32;&#32;
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comparison&#32;of&#32;pointers</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Relative_pointer_impl&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
140 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(__rarg.get()));&#32;}
142 
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Relative_pointer_impl&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
145 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(__rarg.get()));&#32;}
147 
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__UINTPTR_TYPE__&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>;
150 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&#32;_M_diff;
151 &#32;&#32;&#32;&#32;};
152 &#32;&#32;
157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Relative_pointer_impl&lt;const&#32;_Tp&gt;&#32;
159 &#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;element_type;
162 &#32;&#32;
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*
164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()<emphasis role="keyword">&#32;const</emphasis>
165 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_diff&#32;==&#32;1)
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)&#32;+&#32;_M_diff);
171 &#32;&#32;&#32;&#32;&#32;&#32;}
172 &#32;&#32;
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__arg)
175 &#32;&#32;&#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__arg)
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_diff&#32;=&#32;1;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_diff&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(__arg)&#32;
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
181 &#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comparison&#32;of&#32;pointers</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Relative_pointer_impl&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
186 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(__rarg.get()));&#32;}
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Relative_pointer_impl&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
191 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>())
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(__rarg.get()));&#32;}
193 &#32;&#32;
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__UINTPTR_TYPE__&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>;
196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&#32;_M_diff;
197 &#32;&#32;&#32;&#32;};
198 
204 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Invalid_type&#32;{&#32;};
205 &#32;&#32;
206 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
207 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_type&#32;
208 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;reference;&#32;};
209 
210 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_type&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;&#32;
212 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Invalid_type&amp;&#32;reference;&#32;};
213 
214 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_type&lt;const&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;&#32;
216 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Invalid_type&amp;&#32;reference;&#32;};
217 
218 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_type&lt;volatile&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;&#32;
220 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;_Invalid_type&amp;&#32;&#32;reference;&#32;};
221 
222 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_type&lt;volatile&#32;const&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;&#32;
224 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;_Invalid_type&amp;&#32;&#32;reference;&#32;};
225 
231 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Unqualified_type&#32;
233 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;&#32;};
234 &#32;&#32;&#32;&#32;
235 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;
236 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Unqualified_type&lt;const&#32;_Tp&gt;&#32;
237 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;&#32;};
238 &#32;&#32;&#32;&#32;
271 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Storage_policy&gt;
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Pointer_adapter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Storage_policy&#32;
273 &#32;&#32;&#32;&#32;{
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Storage_policy::element_type&#32;element_type;
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;are&#32;needed&#32;for&#32;iterator_traits</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::random_access_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_category;
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Unqualified_type&lt;element_type&gt;::type&#32;value_type;
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Pointer_adapter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Reference_type&lt;element_type&gt;::reference&#32;&#32;reference;
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reminder:&#32;&apos;const&apos;&#32;methods&#32;mean&#32;that&#32;the&#32;method&#32;is&#32;valid&#32;when&#32;the&#32;</emphasis>
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pointer&#32;is&#32;immutable,&#32;and&#32;has&#32;nothing&#32;to&#32;do&#32;with&#32;whether&#32;the&#32;</emphasis>
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;pointee&apos;&#32;is&#32;const.</emphasis>
287 
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default&#32;Constructor&#32;(Convert&#32;from&#32;element_type*)</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter(element_type*&#32;__arg&#32;=&#32;0)
290 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Storage_policy::set(__arg);&#32;}
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;constructor&#32;from&#32;_Pointer_adapter&#32;of&#32;same&#32;type.</emphasis>
293 &#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__arg)&#32;
294 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Storage_policy::set(__arg.get());&#32;}
295 
296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;from&#32;_Up*&#32;if&#32;conversion&#32;to&#32;element_type*&#32;is&#32;valid.</emphasis>
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter(_Up*&#32;__arg)
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Storage_policy::set(__arg);&#32;}
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conversion&#32;from&#32;another&#32;_Pointer_adapter&#32;if&#32;_Up&#32;if&#32;static&#32;cast&#32;is</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;valid.</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Up&gt;&amp;&#32;__arg)
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Storage_policy::set(__arg.get());&#32;}
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destructor</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;~_Pointer_adapter()&#32;{&#32;}
309 &#32;&#32;
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assignment&#32;operator</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter&amp;
312 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__arg)&#32;
313 &#32;&#32;&#32;&#32;&#32;&#32;{
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(__arg.get());&#32;
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;
316 &#32;&#32;&#32;&#32;&#32;&#32;}
317 
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter&amp;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Up&gt;&amp;&#32;__arg)
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(__arg.get());&#32;
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
325 
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter&amp;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(_Up*&#32;__arg)
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(__arg);&#32;
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
333 
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Operator*,&#32;returns&#32;element_type&amp;</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;reference&#32;
336 &#32;&#32;&#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const&#32;</emphasis>
337 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(_Storage_policy::get());&#32;}
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Operator-&gt;,&#32;returns&#32;element_type*</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;element_type*&#32;
341 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>
342 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Storage_policy::get();&#32;}
343 
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Operator[],&#32;returns&#32;a&#32;element_type&amp;&#32;to&#32;the&#32;item&#32;at&#32;that&#32;loc.</emphasis>
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;reference
346 &#32;&#32;&#32;&#32;&#32;&#32;operator[](std::ptrdiff_t&#32;__index)<emphasis role="keyword">&#32;const</emphasis>
347 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Storage_policy::get()[__index];&#32;}
348 
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;allow&#32;implicit&#32;conversion&#32;to&#32;&quot;bool&quot;,&#32;for&#32;&quot;if&#32;(ptr)...&quot;</emphasis>
350 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Storage_policy::get()&#32;!=&#32;0;&#32;}
352 <emphasis role="preprocessor">#else</emphasis>
353 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;element_type*(_Pointer_adapter::*__unspecified_bool_type)()&#32;<emphasis role="keyword">const</emphasis>;
355 
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__unspecified_bool_type()<emphasis role="keyword">&#32;const</emphasis>
358 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Storage_policy::get()&#32;==&#32;0&#32;?&#32;0&#32;:&#32;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;_Pointer_adapter::operator-&gt;;&#32;
361 &#32;&#32;&#32;&#32;&#32;&#32;}
362 
363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!&#32;operator&#32;(for:&#32;if&#32;(!ptr)...)</emphasis>
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
365 &#32;&#32;&#32;&#32;&#32;&#32;operator!()<emphasis role="keyword">&#32;const&#32;</emphasis>
366 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_Storage_policy::get()&#32;==&#32;0);&#32;}
367 <emphasis role="preprocessor">#endif</emphasis>
368 &#32;&#32;
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pointer&#32;differences</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ptrdiff_t&#32;
371 &#32;&#32;&#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__lhs,&#32;element_type*&#32;__rhs)&#32;
372 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__lhs.get()&#32;-&#32;__rhs);&#32;}
373 &#32;&#32;
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ptrdiff_t&#32;
375 &#32;&#32;&#32;&#32;&#32;&#32;operator-(element_type*&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__rhs)&#32;
376 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__lhs&#32;-&#32;__rhs.get());&#32;}
377 &#32;&#32;
378 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ptrdiff_t&#32;
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__lhs,&#32;_Up*&#32;__rhs)&#32;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__lhs.get()&#32;-&#32;__rhs);&#32;}
382 &#32;&#32;&#32;&#32;
383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ptrdiff_t&#32;
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator-(_Up*&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__rhs)
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__lhs&#32;-&#32;__rhs.get());&#32;}
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::ptrdiff_t&#32;
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Up&gt;&amp;&#32;__rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>
391 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_Storage_policy::get()&#32;-&#32;__rhs.get());&#32;}
392 &#32;&#32;
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pointer&#32;math</emphasis>
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note:&#32;There&#32;is&#32;a&#32;reason&#32;for&#32;all&#32;this&#32;overloading&#32;based&#32;on&#32;different</emphasis>
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer&#32;types.&#32;&#32;In&#32;some&#32;libstdc++-v3&#32;test&#32;cases,&#32;a&#32;templated</emphasis>
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operator+&#32;is&#32;declared&#32;which&#32;can&#32;match&#32;any&#32;types.&#32;&#32;This&#32;operator</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tends&#32;to&#32;&quot;steal&quot;&#32;the&#32;recognition&#32;of&#32;_Pointer_adapter&apos;s&#32;own&#32;operator+&#32;</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unless&#32;the&#32;integer&#32;type&#32;matches&#32;perfectly.</emphasis>
399 
400 <emphasis role="preprocessor">#define&#32;_CXX_POINTER_ARITH_OPERATOR_SET(INT_TYPE)&#32;\</emphasis>
401 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;friend&#32;_Pointer_adapter&#32;\</emphasis>
402 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;operator+(const&#32;_Pointer_adapter&amp;&#32;__lhs,&#32;INT_TYPE&#32;__offset)&#32;\</emphasis>
403 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;return&#32;_Pointer_adapter(__lhs.get()&#32;+&#32;__offset);&#32;}&#32;\</emphasis>
404 <emphasis role="preprocessor">\</emphasis>
405 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;friend&#32;_Pointer_adapter&#32;\</emphasis>
406 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;operator+(INT_TYPE&#32;__offset,&#32;const&#32;_Pointer_adapter&amp;&#32;__rhs)&#32;\</emphasis>
407 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;return&#32;_Pointer_adapter(__rhs.get()&#32;+&#32;__offset);&#32;}&#32;\</emphasis>
408 <emphasis role="preprocessor">\</emphasis>
409 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;friend&#32;_Pointer_adapter&#32;\</emphasis>
410 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;operator-(const&#32;_Pointer_adapter&amp;&#32;__lhs,&#32;INT_TYPE&#32;__offset)&#32;\</emphasis>
411 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;return&#32;_Pointer_adapter(__lhs.get()&#32;-&#32;__offset);&#32;}&#32;\</emphasis>
412 <emphasis role="preprocessor">\</emphasis>
413 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;_Pointer_adapter&amp;&#32;\</emphasis>
414 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;operator+=(INT_TYPE&#32;__offset)&#32;\</emphasis>
415 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
416 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(_Storage_policy::get()&#32;+&#32;__offset);&#32;\</emphasis>
417 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;*this;&#32;\</emphasis>
418 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
419 <emphasis role="preprocessor">\</emphasis>
420 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;_Pointer_adapter&amp;&#32;\</emphasis>
421 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;operator-=(INT_TYPE&#32;__offset)&#32;\</emphasis>
422 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;\</emphasis>
423 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(_Storage_policy::get()&#32;-&#32;__offset);&#32;\</emphasis>
424 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;*this;&#32;\</emphasis>
425 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}&#32;\</emphasis>
426 <emphasis role="preprocessor"></emphasis><emphasis role="comment">//&#32;END&#32;of&#32;_CXX_POINTER_ARITH_OPERATOR_SET&#32;macro</emphasis>
427 &#32;&#32;
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Expand&#32;into&#32;the&#32;various&#32;pointer&#32;arithmetic&#32;operators&#32;needed.</emphasis>
429 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">short</emphasis>);
430 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>);
431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">int</emphasis>);
432 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>);
433 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">long</emphasis>);
434 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
435 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_LONG_LONG</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a8d41d2781519e91873229221c2f5f683">_CXX_POINTER_ARITH_OPERATOR_SET</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
438 <emphasis role="preprocessor">#endif</emphasis>
439 
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mathematical&#32;Manipulators</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Pointer_adapter&amp;&#32;
442 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
443 &#32;&#32;&#32;&#32;&#32;&#32;{
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(_Storage_policy::get()&#32;+&#32;1);&#32;
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
446 &#32;&#32;&#32;&#32;&#32;&#32;}
447 &#32;&#32;
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Pointer_adapter&#32;
449 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
450 &#32;&#32;&#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(_Storage_policy::get()&#32;+&#32;1);
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
454 &#32;&#32;&#32;&#32;&#32;&#32;}
455 &#32;&#32;
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Pointer_adapter&amp;&#32;
457 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;
458 &#32;&#32;&#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(_Storage_policy::get()&#32;-&#32;1);&#32;
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
461 &#32;&#32;&#32;&#32;&#32;&#32;}
462 &#32;&#32;
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Pointer_adapter
464 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;
465 &#32;&#32;&#32;&#32;&#32;&#32;{
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer_adapter&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Storage_policy::set(_Storage_policy::get()&#32;-&#32;1);
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
469 &#32;&#32;&#32;&#32;&#32;&#32;}
470 
471 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::strong_ordering
473 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&amp;&#32;__rhs)
474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.get()&#32;&lt;=&gt;&#32;__rhs.get();&#32;}
476 <emphasis role="preprocessor">#endif</emphasis>
477 &#32;&#32;&#32;&#32;};&#32;<emphasis role="comment">//&#32;class&#32;_Pointer_adapter</emphasis>
478 
479 
480 <emphasis role="preprocessor">#define&#32;_GCC_CXX_POINTER_COMPARISON_OPERATION_SET(OPERATOR)&#32;\</emphasis>
481 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp1,&#32;typename&#32;_Tp2&gt;&#32;\</emphasis>
482 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;bool&#32;\</emphasis>
483 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;operator&#32;OPERATOR(const&#32;_Pointer_adapter&lt;_Tp1&gt;&amp;&#32;__lhs,&#32;_Tp2&#32;__rhs)&#32;\</emphasis>
484 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;return&#32;__lhs.get()&#32;OPERATOR&#32;__rhs;&#32;}&#32;\</emphasis>
485 <emphasis role="preprocessor">\</emphasis>
486 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp1,&#32;typename&#32;_Tp2&gt;&#32;\</emphasis>
487 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;bool&#32;\</emphasis>
488 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;operator&#32;OPERATOR(_Tp1&#32;__lhs,&#32;const&#32;_Pointer_adapter&lt;_Tp2&gt;&amp;&#32;__rhs)&#32;\</emphasis>
489 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;return&#32;__lhs&#32;OPERATOR&#32;__rhs.get();&#32;}&#32;\</emphasis>
490 <emphasis role="preprocessor">\</emphasis>
491 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp1,&#32;typename&#32;_Tp2&gt;&#32;\</emphasis>
492 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;bool&#32;\</emphasis>
493 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;operator&#32;OPERATOR(const&#32;_Pointer_adapter&lt;_Tp1&gt;&amp;&#32;__lhs,&#32;\</emphasis>
494 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Pointer_adapter&lt;_Tp2&gt;&amp;&#32;__rhs)&#32;\</emphasis>
495 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;return&#32;__lhs.get()&#32;OPERATOR&#32;__rhs.get();&#32;}&#32;\</emphasis>
496 <emphasis role="preprocessor">\</emphasis>
497 <emphasis role="preprocessor"></emphasis><emphasis role="comment">//&#32;End&#32;GCC_CXX_POINTER_COMPARISON_OPERATION_SET&#32;Macro</emphasis>
498 &#32;&#32;
499 &#32;&#32;<emphasis role="comment">//&#32;Expand&#32;into&#32;the&#32;various&#32;comparison&#32;operators&#32;needed.</emphasis>
500 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a1cf0d2def959ccc9d191e9cb0352f715">_GCC_CXX_POINTER_COMPARISON_OPERATION_SET</link>(==)
501 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a1cf0d2def959ccc9d191e9cb0352f715">_GCC_CXX_POINTER_COMPARISON_OPERATION_SET</link>(!=)
502 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a1cf0d2def959ccc9d191e9cb0352f715">_GCC_CXX_POINTER_COMPARISON_OPERATION_SET</link>(&lt;)
503 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a1cf0d2def959ccc9d191e9cb0352f715">_GCC_CXX_POINTER_COMPARISON_OPERATION_SET</link>(&lt;=)
504 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a1cf0d2def959ccc9d191e9cb0352f715">_GCC_CXX_POINTER_COMPARISON_OPERATION_SET</link>(&gt;)
505 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pointer_8h_1a1cf0d2def959ccc9d191e9cb0352f715">_GCC_CXX_POINTER_COMPARISON_OPERATION_SET</link>(&gt;=)
506 
507 &#32;&#32;<emphasis role="comment">//&#32;These&#32;are&#32;here&#32;for&#32;expressions&#32;like&#32;&quot;ptr&#32;==&#32;0&quot;,&#32;&quot;ptr&#32;!=&#32;0&quot;</emphasis>
508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
509 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
510 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__lhs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__rhs)
511 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.get()&#32;==&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__rhs);&#32;}&#32;
512 
513 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
514 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
515 &#32;&#32;&#32;&#32;operator==(<emphasis role="keywordtype">int</emphasis>&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__rhs)
516 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.get()&#32;==&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__lhs);&#32;}&#32;
517 
518 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
519 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
520 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__lhs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__rhs)
521 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.get()&#32;!=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__rhs);&#32;}&#32;
522 
523 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
524 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
525 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keywordtype">int</emphasis>&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__rhs)
526 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.get()&#32;!=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__lhs);&#32;}&#32;
527 
532 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
534 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__lhs,&#32;
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__rhs)
536 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._Tp::operator==(__rhs);&#32;}
537 
538 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
539 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
540 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__lhs,&#32;
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__rhs)
542 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._Tp::operator&lt;(__rhs)&#32;||&#32;__lhs._Tp::operator==(__rhs);&#32;}
543 
544 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
545 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
546 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__lhs,&#32;
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__rhs)
548 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs._Tp::operator==(__rhs));&#32;}
549 
550 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
552 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__lhs,&#32;
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__rhs)
554 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs._Tp::operator&lt;(__rhs)&#32;||&#32;__lhs._Tp::operator==(__rhs));&#32;}
555 
556 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
557 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
558 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__lhs,&#32;
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_Tp&gt;&amp;&#32;__rhs)
560 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs._Tp::operator&lt;(__rhs));&#32;}
561 
562 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_StoreT&gt;
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
564 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,&#32;
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer_adapter&lt;_StoreT&gt;&amp;&#32;__p)
566 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__os&#32;&lt;&lt;&#32;__p.get());&#32;}
567 
568 _GLIBCXX_END_NAMESPACE_VERSION
569 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
570 
571 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
572 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
573 {
574 _GLIBCXX_BEGIN_NAMESPACE_VERSION
575 
576 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Storage_policy&gt;
577 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>pointer_traits&lt;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::_Pointer_adapter&lt;_Storage_policy&gt;&gt;
578 &#32;&#32;&#32;&#32;{
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::_Pointer_adapter&lt;_Storage_policy&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;pointer::element_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element_type;
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;pointer::difference_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
585 
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::_Pointer_adapter&lt;
588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;pointer_traits&lt;_Storage_policy&gt;::template&#32;rebind&lt;_Up&gt;&gt;;
589 
590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;pointer_to(<emphasis role="keyword">typename</emphasis>&#32;pointer::reference&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
591 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>(std::addressof(__r));&#32;}
592 &#32;&#32;&#32;&#32;};
593 
594 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
595 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Policy&gt;
596 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::_Pointer_adapter&lt;_Policy&gt;&gt;
597 &#32;&#32;&#32;&#32;{
598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type
599 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::_Pointer_adapter&lt;_Policy&gt;::value_type;
600 &#32;&#32;&#32;&#32;};
601 <emphasis role="preprocessor">#endif</emphasis>
602 _GLIBCXX_END_NAMESPACE_VERSION
603 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
604 <emphasis role="preprocessor">#endif</emphasis>
605 
606 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_POINTER_H</emphasis>
</programlisting></section>
