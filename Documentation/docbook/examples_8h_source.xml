<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_examples_8h_source" xml:lang="en-US">
<title>examples.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/examples/examples.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;2019-2020&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 
6 <emphasis role="comment">//&#32;this&#32;file&#32;is&#32;for&#32;boilerplate&#32;unrelated&#32;to&#32;the&#32;toml++&#32;example&#32;learning&#32;outcomes.</emphasis>
7 
8 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
9 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;push</emphasis>
10 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Weverything&quot;</emphasis>
11 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)</emphasis>
12 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
13 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wall&quot;</emphasis>
14 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wextra&quot;</emphasis>
15 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
16 <emphasis role="preprocessor">#pragma&#32;warning(push,&#32;0)</emphasis>
17 <emphasis role="preprocessor">#endif</emphasis>
18 
19 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
24 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
25 <emphasis role="preprocessor">#include&#32;&lt;string_view&gt;</emphasis>
26 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
27 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
28 <emphasis role="preprocessor">#include&#32;&lt;chrono&gt;</emphasis>
29 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
30 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
31 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
32 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;__declspec(dllimport)&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;SetConsoleOutputCP(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>);
33 <emphasis role="preprocessor">#pragma&#32;comment(lib,&#32;&quot;Kernel32.lib&quot;)</emphasis>
34 <emphasis role="preprocessor">#else</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;Windows.h&gt;</emphasis>
36 <emphasis role="preprocessor">#endif</emphasis>
37 <emphasis role="preprocessor">#endif</emphasis>
38 
39 <emphasis role="keyword">namespace</emphasis>
40 {
41 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;initialize_environment_automagically&#32;=&#32;[]()&#32;<emphasis role="keyword">noexcept</emphasis>
42 &#32;&#32;&#32;&#32;{
43 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetConsoleOutputCP(65001);&#32;<emphasis role="comment">//&#32;CP_UTF8</emphasis>
45 <emphasis role="preprocessor">#endif</emphasis>
46 
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::sync_with_stdio(<emphasis role="keyword">false</emphasis>);
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::boolalpha;
49 
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;srand(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_structtime">time</link>(<emphasis role="keyword">nullptr</emphasis>)));
51 
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
53 &#32;&#32;&#32;&#32;}();
54 }
55 
56 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
57 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;pop</emphasis>
58 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)</emphasis>
59 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
60 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
61 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
62 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
