<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1detail_1_1serializer" xml:lang="en-US">
<title>nlohmann::detail::serializer&lt; BasicJsonType &gt; Class Template Reference</title>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1ac010525281d97867ee842da37294fe83">serializer</link> (output_adapter_t&lt; char &gt; s, const char ichar, <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler_=<link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">error_handler_t::strict</link>)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1ae3771351ec4cb892bec707edeb56dc31">serializer</link> (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1serializer_1a80d865009268108161afe318a30aff5e">operator=</link> (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1a28081304e70cca6b3042c101ee5c498c">serializer</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;&amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1serializer_1a2fb91f0b3479c5603b45e8a4c1f6673e">operator=</link> (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp;&amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1aa6c62b51cbebb185307df851dc0167f0">~serializer</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b">dump</link> (const BasicJsonType &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> pretty_print, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link>, const unsigned int indent_step, const unsigned int current_indent=0)</para>

<para>internal implementation of the serialization function </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1ab14b8ec1f8102aa4c7e3c349f317654e">for</link> (std::size_t i=0;i&lt; s.size();++i)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1a6705bbf2de3070ec50a810a32e72309f">if</link> (<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>==UTF8_ACCEPT))</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> : <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> dump_escaped(const string_t&amp; s</para>
</listitem>
            <listitem><para><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049">ensure_ascii</link></para>
</listitem>
            <listitem><para>std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link> = UTF8_ACCEPT</para>
</listitem>
            <listitem><para>std::size_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace">bytes</link> = 0</para>
</listitem>
            <listitem><para>std::size_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68">bytes_after_last_accept</link> = 0</para>
</listitem>
            <listitem><para>std::size_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1a814f27bba20f0e109d0dbcaa4a399415">undumped_chars</link> = 0</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1serializer_1ae510f640d26ce0f7d5eb8191b31591c0">else</link></para>
</listitem>
            <listitem><para>std::array&lt; char, 64 &gt; <link linkend="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1">number_buffer</link> {{}}</para>

<para>a (hopefully) large enough character buffer </para>
</listitem>
            <listitem><para>const std::lconv * <link linkend="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589">loc</link> = nullptr</para>

<para>the locale </para>
</listitem>
            <listitem><para>const char <link linkend="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14">thousands_sep</link> = &apos;\0&apos;</para>

<para>the locale&apos;s thousand separator character </para>
</listitem>
            <listitem><para>const char <link linkend="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a">decimal_point</link> = &apos;\0&apos;</para>

<para>the locale&apos;s decimal point character </para>
</listitem>
            <listitem><para>std::array&lt; char, 512 &gt; <link linkend="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f">string_buffer</link> {{}}</para>

<para>string buffer </para>
</listitem>
            <listitem><para>const char <link linkend="_classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b">indent_char</link></para>

<para>the indentation character </para>
</listitem>
            <listitem><para>string_t <link linkend="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6">indent_string</link></para>

<para>the indentation string </para>
</listitem>
            <listitem><para>const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1">error_handler</link></para>

<para>error_handler how to react on decoding errors </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ac010525281d97867ee842da37294fe83"/><section>
    <title>serializer()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::serializer (output_adapter_t&lt; char &gt; s, const char ichar, <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler_ = <computeroutput><link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">error_handler_t::strict</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>s</entry><entry>
<para>output stream to serialize to </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>ichar</entry><entry>
<para>indentation character to use </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>error_handler_</entry><entry>
<para>how to react on decoding errors </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ae3771351ec4cb892bec707edeb56dc31"/><section>
    <title>serializer()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::serializer (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a28081304e70cca6b3042c101ee5c498c"/><section>
    <title>serializer()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::serializer (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1aa6c62b51cbebb185307df851dc0167f0"/><section>
    <title>~serializer()</title>
<indexterm><primary>~serializer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>~serializer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::~<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a95460ebd1a535a543e5a0ec52e00f48b"/><section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>dump</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::dump (const BasicJsonType &amp; val, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> pretty_print, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ensure_ascii, const unsigned int indent_step, const unsigned int current_indent = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>internal implementation of the serialization function </para>
</para>

<para>This function is called by the public member function dump and organizes the serialization internally. The indentation level is propagated as additional parameter. In case of arrays and objects, the function is called recursively.</para>

<para><itemizedlist>
<listitem>
<para>strings and object keys are escaped using <computeroutput>escape_string()</computeroutput></para>
</listitem><listitem>
<para>integer numbers are converted implicitly via <computeroutput>operator&lt;&lt;</computeroutput></para>
</listitem><listitem>
<para>floating-point numbers are converted to a string using <computeroutput>&quot;%g&quot;</computeroutput> format</para>
</listitem><listitem>
<para>binary values are serialized as objects containing the subtype and the byte array</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>val</entry><entry>
<para>value to serialize </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>pretty_print</entry><entry>
<para>whether the output shall be pretty-printed </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>ensure_ascii</entry><entry>
<para>If <emphasis>ensure_ascii</emphasis> is true, all non-ASCII characters in the output are escaped with <computeroutput>\uXXXX</computeroutput> sequences, and the result consists of ASCII characters only. </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>indent_step</entry><entry>
<para>the indent level </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>current_indent</entry><entry>
<para>the current indent level (only used internally) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1serializer_a95460ebd1a535a543e5a0ec52e00f48b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1serializer_a95460ebd1a535a543e5a0ec52e00f48b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ab14b8ec1f8102aa4c7e3c349f317654e"/><section>
    <title>for()</title>
<indexterm><primary>for</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>for</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::for ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1serializer_ab14b8ec1f8102aa4c7e3c349f317654e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a6705bbf2de3070ec50a810a32e72309f"/><section>
    <title>if()</title>
<indexterm><primary>if</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>if</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::if (<link linkend="_json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0">JSON_HEDLEY_LIKELY</link>(<link linkend="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c">state</link>==UTF8_ACCEPT) )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a80d865009268108161afe318a30aff5e"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::operator= (const <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a2fb91f0b3479c5603b45e8a4c1f6673e"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::operator= (<link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link>&lt; BasicJsonType &gt; &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1af15da74dab5b01150eabfed0be7d75df"/><section>
    <title>__pad0__</title>
<indexterm><primary>__pad0__</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>__pad0__</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::__pad0__</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a4239a42672c7378a6b449ee010e6dace"/><section>
    <title>bytes</title>
<indexterm><primary>bytes</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>bytes</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::size_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::bytes = 0</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a9ae3daaea1941fd02d4c3c1b0f5fbe68"/><section>
    <title>bytes_after_last_accept</title>
<indexterm><primary>bytes_after_last_accept</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>bytes_after_last_accept</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::size_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::bytes_after_last_accept = 0</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a311e5d6f4b31d5be0eb3c0cb20b6965a"/><section>
    <title>decimal_point</title>
<indexterm><primary>decimal_point</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>decimal_point</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const char <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::decimal_point = &apos;\0&apos;</computeroutput></para><para>

<para>the locale&apos;s decimal point character </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ae510f640d26ce0f7d5eb8191b31591c0"/><section>
    <title>else</title>
<indexterm><primary>else</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>else</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::else</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ab4c340f2a5230f766a833366603a0049"/><section>
    <title>ensure_ascii</title>
<indexterm><primary>ensure_ascii</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>ensure_ascii</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::ensure_ascii</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::uint32_t&#32;codepoint{}
</programlisting></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a09d5a046fb0f7cb61977d6e5fbe8b3a1"/><section>
    <title>error_handler</title>
<indexterm><primary>error_handler</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>error_handler</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::error_handler</computeroutput></para><para>

<para>error_handler how to react on decoding errors </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a9a55e6b028d09676fe35aefa0c72ea5b"/><section>
    <title>indent_char</title>
<indexterm><primary>indent_char</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>indent_char</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const char <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::indent_char</computeroutput></para><para>

<para>the indentation character </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1ae9268a10d88a5526e32735a55a132fc6"/><section>
    <title>indent_string</title>
<indexterm><primary>indent_string</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>indent_string</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>string_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::indent_string</computeroutput></para><para>

<para>the indentation string </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a1952945b7652afb59d3903cc8457a589"/><section>
    <title>loc</title>
<indexterm><primary>loc</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>loc</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const std::lconv* <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::loc = nullptr</computeroutput></para><para>

<para>the locale </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a1a9d8b344a6cb47728a3519693ec03d1"/><section>
    <title>number_buffer</title>
<indexterm><primary>number_buffer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>number_buffer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::array&lt;char, 64&gt; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::number_buffer {{}}</computeroutput></para><para>

<para>a (hopefully) large enough character buffer </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a39b0975f219b542d7ca633652e925b4c"/><section>
    <title>state</title>
<indexterm><primary>state</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>state</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::uint8_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::state = UTF8_ACCEPT</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a9c9b7ca63a66e59e5e7ffe8a2acf5c8f"/><section>
    <title>string_buffer</title>
<indexterm><primary>string_buffer</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>string_buffer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::array&lt;char, 512&gt; <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::string_buffer {{}}</computeroutput></para><para>

<para>string buffer </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a78a6ae833bb6cf7f00cb0d51db114b14"/><section>
    <title>thousands_sep</title>
<indexterm><primary>thousands_sep</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>thousands_sep</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>const char <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::thousands_sep = &apos;\0&apos;</computeroutput></para><para>

<para>the locale&apos;s thousand separator character </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1serializer_1a814f27bba20f0e109d0dbcaa4a399415"/><section>
    <title>undumped_chars</title>
<indexterm><primary>undumped_chars</primary><secondary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::serializer&lt; BasicJsonType &gt;</primary><secondary>undumped_chars</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>std::size_t <link linkend="_classnlohmann_1_1detail_1_1serializer">nlohmann::detail::serializer</link>&lt; BasicJsonType &gt;::undumped_chars = 0</computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
