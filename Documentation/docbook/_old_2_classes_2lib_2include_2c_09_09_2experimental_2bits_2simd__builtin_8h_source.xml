<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2simd__builtin_8h_source" xml:lang="en-US">
<title>simd_builtin.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/simd_builtin.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Simd&#32;Abi&#32;specific&#32;implementations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_ABIS_H_</emphasis>
26 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_ABIS_H_</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
29 
30 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
31 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
32 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
33 
34 _GLIBCXX_SIMD_BEGIN_NAMESPACE
35 <emphasis role="comment">//&#32;_S_allbits{{{</emphasis>
36 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
37 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_V&#32;_S_allbits
38 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_V<emphasis role="keyword">&gt;</emphasis>(~__vector_type_t&lt;char,&#32;<emphasis role="keyword">sizeof</emphasis>(_V)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char</emphasis>)&gt;());
39 
40 <emphasis role="comment">//&#32;}}}</emphasis>
41 <emphasis role="comment">//&#32;_S_signmask,&#32;_S_absmask{{{</emphasis>
42 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_VectorTraits&lt;_V&gt;&gt;
43 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_V&#32;_S_signmask
44 &#32;&#32;&#32;&#32;=&#32;__xor(_V()&#32;+&#32;1,&#32;_V()&#32;-&#32;1);
45 
46 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_VectorTraits&lt;_V&gt;&gt;
47 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_V&#32;_S_absmask
48 &#32;&#32;&#32;&#32;=&#32;__andnot(_S_signmask&lt;_V&gt;,&#32;_S_allbits&lt;_V&gt;);
49 
50 <emphasis role="comment">//}}}</emphasis>
51 <emphasis role="comment">//&#32;__vector_permute&lt;Indices...&gt;{{{</emphasis>
52 <emphasis role="comment">//&#32;Index&#32;==&#32;-1&#32;requests&#32;zeroing&#32;of&#32;the&#32;output&#32;element</emphasis>
53 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>...&#32;_Indices,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;,
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
55 &#32;&#32;_Tp
56 &#32;&#32;__vector_permute(_Tp&#32;__x)
57 &#32;&#32;{
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>...(_Indices)&#32;==&#32;_TVT::_S_full_size);
59 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_vector&lt;typename&#32;_TVT::value_type&gt;(
60 &#32;&#32;&#32;&#32;&#32;&#32;(_Indices&#32;==&#32;-1&#32;?&#32;0&#32;:&#32;__x[_Indices&#32;==&#32;-1&#32;?&#32;0&#32;:&#32;_Indices])...);
61 &#32;&#32;}
62 
63 <emphasis role="comment">//&#32;}}}</emphasis>
64 <emphasis role="comment">//&#32;__vector_shuffle&lt;Indices...&gt;{{{</emphasis>
65 <emphasis role="comment">//&#32;Index&#32;==&#32;-1&#32;requests&#32;zeroing&#32;of&#32;the&#32;output&#32;element</emphasis>
66 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>...&#32;_Indices,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;,
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
68 &#32;&#32;_Tp
69 &#32;&#32;__vector_shuffle(_Tp&#32;__x,&#32;_Tp&#32;__y)
70 &#32;&#32;{
71 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp{(_Indices&#32;==&#32;-1&#32;?&#32;0
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Indices&#32;&lt;&#32;_TVT::_S_full_size
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__x[_Indices]
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__y[_Indices&#32;-&#32;_TVT::_S_full_size])...};
75 &#32;&#32;}
76 
77 <emphasis role="comment">//&#32;}}}</emphasis>
78 <emphasis role="comment">//&#32;__make_wrapper{{{</emphasis>
79 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
80 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;<emphasis role="keyword">sizeof</emphasis>...(_Args)&gt;
81 &#32;&#32;__make_wrapper(<emphasis role="keyword">const</emphasis>&#32;_Args&amp;...&#32;__args)
82 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_vector&lt;_Tp&gt;(__args...);&#32;}
83 
84 <emphasis role="comment">//&#32;}}}</emphasis>
85 <emphasis role="comment">//&#32;__wrapper_bitcast{{{</emphasis>
86 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M,
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_ToN&#32;!=&#32;0&#32;?&#32;_ToN&#32;:&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_M&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;
88 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
89 &#32;&#32;__wrapper_bitcast(_SimdWrapper&lt;_Up,&#32;_M&gt;&#32;__x)
90 &#32;&#32;{
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;&#32;1);
92 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;(__x._M_data);
93 &#32;&#32;}
94 
95 <emphasis role="comment">//&#32;}}}</emphasis>
96 <emphasis role="comment">//&#32;__shift_elements_right{{{</emphasis>
97 <emphasis role="comment">//&#32;if&#32;(__shift&#32;%&#32;2‚Åø&#32;==&#32;0)&#32;=&gt;&#32;the&#32;low&#32;n&#32;Bytes&#32;are&#32;correct</emphasis>
98 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;__shift,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
99 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_Tp
100 &#32;&#32;__shift_elements_right(_Tp&#32;__v)
101 &#32;&#32;{
102 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__iv&#32;=&#32;__to_intrin(__v);
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__shift&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__shift&#32;==&#32;0)
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__v;
106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__shift&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp))
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp();
108 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;</emphasis><emphasis role="comment">//&#32;{{{</emphasis>
109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse&#32;&amp;&amp;&#32;__shift&#32;==&#32;8
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_movehl_ps(__iv,&#32;__iv);
112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;__shift&#32;==&#32;8
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm_unpackhi_pd(__iv,&#32;__iv);
115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16)
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
117 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6184a7deed3960a115ba3b83ea370d44">_mm_srli_si128</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128i<emphasis role="keyword">&gt;</emphasis>(__iv),&#32;__shift));
118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__shift&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32)
119 &#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;<emphasis role="comment">/*if&#32;constexpr&#32;(__have_avx&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;double,&#32;4&gt;)</emphasis>
121 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_mm256_permute2f128_pd(__iv,&#32;__iv,&#32;0x81);</emphasis>
122 <emphasis role="comment">&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(__have_avx&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;float,&#32;8&gt;)</emphasis>
123 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;_mm256_permute2f128_ps(__iv,&#32;__iv,&#32;0x81);</emphasis>
124 <emphasis role="comment">&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(__have_avx)</emphasis>
125 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;reinterpret_cast&lt;typename&#32;_TVT::type&gt;(</emphasis>
126 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm256_permute2f128_si256(__iv,&#32;__iv,&#32;0x81));</emphasis>
127 <emphasis role="comment">&#32;&#32;&#32;&#32;else*/</emphasis>
128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(__hi128(__v));
129 &#32;&#32;&#32;&#32;&#32;&#32;}
130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32&#32;&amp;&amp;&#32;__shift&#32;&lt;&#32;16)
131 &#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vll&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__v);
133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
134 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx2intrin_8h_1ab91acf13e287602169b958e2f6f3b665">_mm256_alignr_epi8</link>(<link linkend="__classes_2lib_2include_2avx2intrin_8h_1aac90532d0a29c734b1b22960446dc1e0">_mm256_permute2x128_si256</link>(__vll,&#32;__vll,&#32;0x81),
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vll,&#32;__shift));
136 &#32;&#32;&#32;&#32;&#32;&#32;}
137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32&#32;&amp;&amp;&#32;__shift&#32;&lt;&#32;16)
138 &#32;&#32;&#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vll&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__v);
140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
141 &#32;&#32;&#32;&#32;&#32;&#32;__concat(<link linkend="__classes_2lib_2include_2tmmintrin_8h_1a54f1bc2fc74897cb8a1376855c296dbc">_mm_alignr_epi8</link>(__hi128(__vll),&#32;__lo128(__vll),&#32;__shift),
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6184a7deed3960a115ba3b83ea370d44">_mm_srli_si128</link>(__hi128(__vll),&#32;__shift)));
143 &#32;&#32;&#32;&#32;&#32;&#32;}
144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;32&#32;&amp;&amp;&#32;__shift&#32;&gt;&#32;16)
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(__shift_elements_right&lt;__shift&#32;-&#32;16&gt;(__hi128(__v)));
146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64&#32;&amp;&amp;&#32;__shift&#32;==&#32;32)
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(__hi256(__v));
148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64)
149 &#32;&#32;&#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__shift&#32;&gt;=&#32;48)
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shift_elements_right&lt;__shift&#32;-&#32;48&gt;(__extract&lt;3,&#32;4&gt;(__v)));
153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__shift&#32;&gt;=&#32;32)
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__zero_extend(
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shift_elements_right&lt;__shift&#32;-&#32;32&gt;(__hi256(__v)));
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__shift&#32;%&#32;8&#32;==&#32;0)
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1adc65d9d05379a529b914038d2bc01f72">_mm512_alignr_epi64</link>(__m512i(),&#32;__intrin_bitcast&lt;__m512i&gt;(__v),
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shift&#32;/&#32;8));
160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__shift&#32;%&#32;4&#32;==&#32;0)
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aed61d4878763c301f1862135d494aeb6">_mm512_alignr_epi32</link>(__m512i(),&#32;__intrin_bitcast&lt;__m512i&gt;(__v),
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shift&#32;/&#32;4));
164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;__shift&#32;&lt;&#32;16)
165 &#32;&#32;&#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vll&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__v);
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a391704538847e869749c827ad6cc1c29">_mm512_alignr_epi8</link>(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac37c62d861e2c798dc9a452d5146b891">_mm512_shuffle_i32x4</link>(__vll,&#32;__vll,&#32;0xf9),
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vll,&#32;__shift));
170 &#32;&#32;&#32;&#32;&#32;&#32;}
171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw&#32;&amp;&amp;&#32;__shift&#32;&lt;&#32;32)
172 &#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vll&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(__v);
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a391704538847e869749c827ad6cc1c29">_mm512_alignr_epi8</link>(<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac37c62d861e2c798dc9a452d5146b891">_mm512_shuffle_i32x4</link>(__vll,&#32;__m512i(),&#32;0xee),
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac37c62d861e2c798dc9a452d5146b891">_mm512_shuffle_i32x4</link>(__vll,&#32;__vll,&#32;0xf9),
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shift&#32;-&#32;16));
178 &#32;&#32;&#32;&#32;&#32;&#32;}
179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
181 &#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;<emphasis role="comment">/*</emphasis>
183 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;}&#32;else&#32;if&#32;constexpr&#32;(__shift&#32;%&#32;16&#32;==&#32;0&#32;&amp;&amp;&#32;sizeof(_Tp)&#32;==&#32;64)</emphasis>
184 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__auto_bitcast(__extract&lt;__shift&#32;/&#32;16,&#32;4&gt;(__v));</emphasis>
185 <emphasis role="comment">&#32;&#32;*/</emphasis>
186 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN&#32;}}}</emphasis>
187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__chunksize&#32;=&#32;__shift&#32;%&#32;8&#32;==&#32;0&#32;&#32;&#32;?&#32;8
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__shift&#32;%&#32;4&#32;==&#32;0&#32;?&#32;4
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__shift&#32;%&#32;2&#32;==&#32;0&#32;?&#32;2
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;1;
193 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__w&#32;=&#32;__vector_bitcast&lt;__int_with_sizeof_t&lt;__chunksize&gt;&gt;(__v);
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__w);
195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_Tp&gt;(
196 &#32;&#32;&#32;&#32;&#32;&#32;__call_with_n_evaluations&lt;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;-&#32;__shift)&#32;/&#32;__chunksize&gt;(
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__chunks)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Up{__chunks...};&#32;},
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w[__shift&#32;/&#32;__chunksize&#32;+&#32;__i];&#32;}));
199 &#32;&#32;&#32;&#32;&#32;&#32;}
200 &#32;&#32;}
201 
202 <emphasis role="comment">//&#32;}}}</emphasis>
203 <emphasis role="comment">//&#32;__extract_part(_SimdWrapper&lt;_Tp,&#32;_Np&gt;)&#32;{{{</emphasis>
204 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Index,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Total,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Combine,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
205 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>
206 &#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&#32;/&#32;_Total&#32;*&#32;_Combine&gt;
207 &#32;&#32;__extract_part(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
208 &#32;&#32;{
209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Index&#32;%&#32;2&#32;==&#32;0&#32;&amp;&amp;&#32;_Total&#32;%&#32;2&#32;==&#32;0&#32;&amp;&amp;&#32;_Combine&#32;%&#32;2&#32;==&#32;0)
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract_part&lt;_Index&#32;/&#32;2,&#32;_Total&#32;/&#32;2,&#32;_Combine&#32;/&#32;2&gt;(__x);
211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__values_per_part&#32;=&#32;_Np&#32;/&#32;_Total;
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__values_to_skip&#32;=&#32;_Index&#32;*&#32;__values_per_part;
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__return_size&#32;=&#32;__values_per_part&#32;*&#32;_Combine;
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_R&#32;=&#32;__vector_type_t&lt;_Tp,&#32;__return_size&gt;;
217 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((_Index&#32;+&#32;_Combine)&#32;*&#32;__values_per_part&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(__x),
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;out&#32;of&#32;bounds&#32;__extract_part&quot;</emphasis>);
220 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;following&#32;assertion&#32;would&#32;ensure&#32;no&#32;&quot;padding&quot;&#32;to&#32;be&#32;read</emphasis>
221 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;static_assert(_Total&#32;&gt;=&#32;_Index&#32;+&#32;_Combine,&#32;&quot;_Total&#32;must&#32;be&#32;greater</emphasis>
222 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;than&#32;_Index&quot;);</emphasis>
223 
224 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;static_assert(__return_size&#32;*&#32;_Total&#32;==&#32;_Np,&#32;&quot;_Np&#32;must&#32;be&#32;divisible</emphasis>
225 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;by&#32;_Total&quot;);</emphasis>
226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_is_constprop())
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;__return_size,&#32;_R&gt;(
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__values_to_skip&#32;+&#32;__i];&#32;});
229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Index&#32;==&#32;0&#32;&amp;&amp;&#32;_Total&#32;==&#32;1)
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Index&#32;==&#32;0)
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_R&gt;(__as_vector(__x));
233 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;</emphasis><emphasis role="comment">//&#32;{{{</emphasis>
234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__return_size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;16)
236 &#32;&#32;&#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes_to_skip&#32;=&#32;__values_to_skip&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__bytes_to_skip&#32;==&#32;16)
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp,&#32;__return_size&gt;(
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi128(__as_vector(__x)));
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp,&#32;__return_size&gt;(
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tmmintrin_8h_1a54f1bc2fc74897cb8a1376855c296dbc">_mm_alignr_epi8</link>(__hi128(__vector_bitcast&lt;_LLong&gt;(__x)),
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(__vector_bitcast&lt;_LLong&gt;(__x)),
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bytes_to_skip));
246 &#32;&#32;&#32;&#32;&#32;&#32;}
247 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN&#32;}}}</emphasis>
248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Index&#32;&gt;&#32;0
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(__values_to_skip&#32;%&#32;__return_size&#32;!=&#32;0
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keyword">sizeof</emphasis>(_R)&#32;&gt;=&#32;8)
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(__values_to_skip&#32;+&#32;__return_size)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;=&#32;64
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;=&#32;16)
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_R&gt;(
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shift_elements_right&lt;__values_to_skip&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as_vector(__x)));
257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
258 &#32;&#32;&#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_R&#32;__r&#32;=&#32;{};
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__x)
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__values_to_skip,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__return_size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
265 &#32;&#32;&#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;&#32;&#32;}
267 &#32;&#32;}
268 
269 <emphasis role="comment">//&#32;}}}</emphasis>
270 <emphasis role="comment">//&#32;__extract_part(_SimdWrapper&lt;bool,&#32;_Np&gt;)&#32;{{{</emphasis>
271 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Index,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Total,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Combine&#32;=&#32;1,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
272 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>,&#32;_Np&#32;/&#32;_Total&#32;*&#32;_Combine&gt;
273 &#32;&#32;__extract_part(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;bool,&#32;_Np&gt;&#32;__x)
274 &#32;&#32;{
275 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Combine&#32;==&#32;1,&#32;<emphasis role="stringliteral">&quot;_Combine&#32;!=&#32;1&#32;not&#32;implemented&quot;</emphasis>);
276 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__have_avx512f&#32;&amp;&amp;&#32;_Np&#32;==&#32;_Np);
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Total&#32;&gt;=&#32;2&#32;&amp;&amp;&#32;_Index&#32;+&#32;_Combine&#32;&lt;=&#32;_Total&#32;&amp;&amp;&#32;_Index&#32;&gt;=&#32;0);
278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&gt;&gt;&#32;(_Index&#32;*&#32;_Np&#32;/&#32;_Total);
279 &#32;&#32;}
280 
281 <emphasis role="comment">//&#32;}}}</emphasis>
282 
283 <emphasis role="comment">//&#32;__vector_convert&#32;{{{</emphasis>
284 <emphasis role="comment">//&#32;implementation&#32;requires&#32;an&#32;index&#32;sequence</emphasis>
285 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
286 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
287 &#32;&#32;__vector_convert(_From&#32;__a,&#32;index_sequence&lt;_I...&gt;)
288 &#32;&#32;{
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...};
291 &#32;&#32;}
292 
293 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
294 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
295 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;index_sequence&lt;_I...&gt;)
296 &#32;&#32;{
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...};
299 &#32;&#32;}
300 
301 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
302 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
303 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;index_sequence&lt;_I...&gt;)
304 &#32;&#32;{
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...};
308 &#32;&#32;}
309 
310 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
311 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
312 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_sequence&lt;_I...&gt;)
314 &#32;&#32;{
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...};
318 &#32;&#32;}
319 
320 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
321 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
322 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_sequence&lt;_I...&gt;)
324 &#32;&#32;{
325 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
326 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...};
329 &#32;&#32;}
330 
331 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
332 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
333 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;index_sequence&lt;_I...&gt;)
335 &#32;&#32;{
336 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...};
340 &#32;&#32;}
341 
342 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
343 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
344 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;index_sequence&lt;_I...&gt;)
346 &#32;&#32;{
347 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...};
352 &#32;&#32;}
353 
354 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
355 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
356 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;index_sequence&lt;_I...&gt;)
358 &#32;&#32;{
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...};
364 &#32;&#32;}
365 
366 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
367 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
368 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_sequence&lt;_I...&gt;)
371 &#32;&#32;{
372 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...};
378 &#32;&#32;}
379 
380 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
381 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
382 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,&#32;_From&#32;__j,
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_sequence&lt;_I...&gt;)
385 &#32;&#32;{
386 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__j[_I])...};
392 &#32;&#32;}
393 
394 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
395 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
396 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,&#32;_From&#32;__j,
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__k,&#32;index_sequence&lt;_I...&gt;)
399 &#32;&#32;{
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
401 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__j[_I])...,
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__k[_I])...};
407 &#32;&#32;}
408 
409 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
410 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
411 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,&#32;_From&#32;__j,
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__k,&#32;_From&#32;__l,&#32;index_sequence&lt;_I...&gt;)
414 &#32;&#32;{
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
416 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__j[_I])...,
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__k[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__l[_I])...};
422 &#32;&#32;}
423 
424 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
425 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
426 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,&#32;_From&#32;__j,
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__k,&#32;_From&#32;__l,&#32;_From&#32;__m,&#32;index_sequence&lt;_I...&gt;)
429 &#32;&#32;{
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
431 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__j[_I])...,
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__k[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__l[_I])...,
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__m[_I])...};
438 &#32;&#32;}
439 
440 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
441 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
442 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,&#32;_From&#32;__j,
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__k,&#32;_From&#32;__l,&#32;_From&#32;__m,&#32;_From&#32;__n,
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_sequence&lt;_I...&gt;)
446 &#32;&#32;{
447 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__j[_I])...,
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__k[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__l[_I])...,
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__m[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__n[_I])...};
455 &#32;&#32;}
456 
457 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
458 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
459 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,&#32;_From&#32;__j,
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__k,&#32;_From&#32;__l,&#32;_From&#32;__m,&#32;_From&#32;__n,&#32;_From&#32;__o,
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_sequence&lt;_I...&gt;)
463 &#32;&#32;{
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__j[_I])...,
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__k[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__l[_I])...,
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__m[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__n[_I])...,
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__o[_I])...};
473 &#32;&#32;}
474 
475 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
476 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
477 &#32;&#32;__vector_convert(_From&#32;__a,&#32;_From&#32;__b,&#32;_From&#32;__c,&#32;_From&#32;__d,&#32;_From&#32;__e,
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__f,&#32;_From&#32;__g,&#32;_From&#32;__h,&#32;_From&#32;__i,&#32;_From&#32;__j,
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__k,&#32;_From&#32;__l,&#32;_From&#32;__m,&#32;_From&#32;__n,&#32;_From&#32;__o,
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_From&#32;__p,&#32;index_sequence&lt;_I...&gt;)
481 &#32;&#32;{
482 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__a[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__b[_I])...,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__c[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__d[_I])...,
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__e[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__f[_I])...,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__g[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__h[_I])...,
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__j[_I])...,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__k[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__l[_I])...,
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__m[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__n[_I])...,
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__o[_I])...,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__p[_I])...};
491 &#32;&#32;}
492 
493 <emphasis role="comment">//&#32;Defer&#32;actual&#32;conversion&#32;to&#32;the&#32;overload&#32;that&#32;takes&#32;an&#32;index&#32;sequence.&#32;Note</emphasis>
494 <emphasis role="comment">//&#32;that&#32;this&#32;function&#32;adds&#32;zeros&#32;or&#32;drops&#32;values&#32;off&#32;the&#32;end&#32;if&#32;you&#32;don&apos;t&#32;ensure</emphasis>
495 <emphasis role="comment">//&#32;matching&#32;width.</emphasis>
496 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_From,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_FromSize&gt;
497 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
498 &#32;&#32;__vector_convert(_SimdWrapper&lt;_From,&#32;_FromSize&gt;...&#32;__xs)
499 &#32;&#32;{
500 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_PR85048</emphasis>
501 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_From0&#32;=&#32;__first_of_pack_t&lt;_From...&gt;;
502 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FW&#32;=&#32;_SimdWrapper&lt;_From0,&#32;_FromSize&gt;;
503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_FW::_S_is_partial&#32;&amp;&amp;&#32;!(...&#32;&amp;&amp;&#32;__xs._M_is_constprop()))
504 &#32;&#32;&#32;&#32;&#32;&#32;{
505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((<emphasis role="keyword">sizeof</emphasis>...(_From)&#32;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>...(_From)&#32;-&#32;1))
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;power-of-two&#32;number&#32;of&#32;arguments</emphasis>
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_x86&lt;_To&gt;(__as_vector(__xs)...);
508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;append&#32;zeros&#32;and&#32;recurse&#32;until&#32;the&#32;above&#32;branch&#32;is&#32;taken</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(__xs...,&#32;_FW{});
510 &#32;&#32;&#32;&#32;&#32;&#32;}
511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
512 <emphasis role="preprocessor">#endif</emphasis>
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(
514 &#32;&#32;&#32;&#32;__as_vector(__xs)...,
515 &#32;&#32;&#32;&#32;make_index_sequence&lt;(<emphasis role="keyword">sizeof</emphasis>...(__xs)&#32;==&#32;1&#32;?&#32;std::min(
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VectorTraits&lt;_To&gt;::_S_full_size,&#32;<emphasis role="keywordtype">int</emphasis>(_FromSize))
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_FromSize)&gt;());
518 &#32;&#32;}
519 
520 <emphasis role="comment">//&#32;}}}</emphasis>
521 <emphasis role="comment">//&#32;__convert&#32;function{{{</emphasis>
522 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
523 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
524 &#32;&#32;__convert(_From&#32;__v0,&#32;_More...&#32;__vs)
525 &#32;&#32;{
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((<emphasis role="keyword">true</emphasis>&#32;&amp;&amp;&#32;...&#32;&amp;&amp;&#32;is_same_v&lt;_From,&#32;_More&gt;)&#32;);
527 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vectorizable_v&lt;_From&gt;)
528 &#32;&#32;&#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::type;
530 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_To&gt;::value_type;
531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__v0),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__vs)...};
532 &#32;&#32;&#32;&#32;&#32;&#32;}
533 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_From&gt;)
534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert&lt;_To&gt;(__as_wrapper(__v0),&#32;__as_wrapper(__vs)...);
535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;_SimdWrapper&#32;arguments</emphasis>
536 &#32;&#32;&#32;&#32;&#32;&#32;{
537 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__input_size&#32;=&#32;_From::_S_size&#32;*&#32;(1&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>...(_More));
538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vectorizable_v&lt;_To&gt;)
539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert&lt;__vector_type_t&lt;_To,&#32;__input_size&gt;&gt;(__v0,&#32;__vs...);
540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__is_vector_type_v&lt;_To&gt;)
541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_To(__convert&lt;typename&#32;_To::_BuiltinType&gt;(__v0,&#32;__vs...));
542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
543 &#32;&#32;&#32;&#32;&#32;&#32;{
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>...(_More)&#32;==&#32;0
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_VectorTraits&lt;_To&gt;::_S_full_size&#32;&gt;=&#32;__input_size,
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__convert(...)&#32;requires&#32;the&#32;input&#32;to&#32;fit&#32;into&#32;the&#32;output&quot;</emphasis>);
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(__v0,&#32;__vs...);
549 &#32;&#32;&#32;&#32;&#32;&#32;}
550 &#32;&#32;&#32;&#32;&#32;&#32;}
551 &#32;&#32;}
552 
553 <emphasis role="comment">//&#32;}}}</emphasis>
554 <emphasis role="comment">//&#32;__convert_all{{{</emphasis>
555 <emphasis role="comment">//&#32;Converts&#32;__v&#32;into&#32;array&lt;_To,&#32;N&gt;,&#32;where&#32;N&#32;is&#32;_NParts&#32;if&#32;non-zero&#32;or</emphasis>
556 <emphasis role="comment">//&#32;otherwise&#32;deduced&#32;from&#32;_To&#32;such&#32;that&#32;N&#32;*&#32;#elements(_To)&#32;&lt;=&#32;#elements(__v).</emphasis>
557 <emphasis role="comment">//&#32;Note:&#32;this&#32;function&#32;may&#32;return&#32;less&#32;than&#32;all&#32;converted&#32;elements</emphasis>
558 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,
559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NParts&#32;=&#32;0,&#32;<emphasis role="comment">//&#32;allows&#32;to&#32;convert&#32;fewer&#32;or&#32;more&#32;(only&#32;last</emphasis>
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_To,&#32;to&#32;be&#32;partially&#32;filled)&#32;than&#32;all</emphasis>
561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="comment">//&#32;where&#32;to&#32;start,&#32;#&#32;of&#32;elements&#32;(not&#32;Bytes&#32;or</emphasis>
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parts)</emphasis>
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FromVT&#32;=&#32;_VectorTraits&lt;_From&gt;&gt;
564 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
565 &#32;&#32;__convert_all(_From&#32;__v)
566 &#32;&#32;{
567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_arithmetic_v&lt;_To&gt;&#32;&amp;&amp;&#32;_NParts&#32;!=&#32;1)
568 &#32;&#32;&#32;&#32;&#32;&#32;{
569 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Offset&#32;&lt;&#32;_FromVT::_S_full_size);
570 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_Np
571 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_NParts&#32;==&#32;0&#32;?&#32;_FromVT::_S_partial_width&#32;-&#32;_Offset&#32;:&#32;_NParts;
572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;array&lt;_To,&#32;_Np&gt;&gt;(
573 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__v[__i&#32;+&#32;_Offset]);&#32;});
574 &#32;&#32;&#32;&#32;&#32;&#32;}
575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;{
577 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vector_type_v&lt;_To&gt;);
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ToVT&#32;=&#32;_VectorTraits&lt;_To&gt;;
579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_From&gt;)
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_all&lt;_To,&#32;_NParts&gt;(__as_wrapper(__v));
581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_NParts&#32;==&#32;1)
582 &#32;&#32;&#32;&#32;&#32;&#32;{
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Offset&#32;%&#32;_ToVT::_S_full_size&#32;==&#32;0);
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray">array&lt;_To, 1&gt;</link>{__vector_convert&lt;_To&gt;(
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract_part&lt;_Offset&#32;/&#32;_ToVT::_S_full_size,
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__div_roundup(_FromVT::_S_partial_width,
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ToVT::_S_full_size)&gt;(__v))};
588 &#32;&#32;&#32;&#32;&#32;&#32;}
589 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;</emphasis><emphasis role="comment">//&#32;{{{</emphasis>
590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__have_sse4_1&#32;&amp;&amp;&#32;_Offset&#32;==&#32;0
591 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;typename&#32;_FromVT::value_type&gt;
592 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;_FromVT::value_type)
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;_ToVT::value_type)
594 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;_FromVT::value_type)&#32;==&#32;4
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;typename&#32;_ToVT::value_type,&#32;double&gt;))
596 &#32;&#32;&#32;&#32;&#32;&#32;{
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ToT&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToVT::value_type;
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FromT&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_FromVT::value_type;
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_NParts&#32;!=&#32;0
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_NParts
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(_FromVT::_S_partial_width&#32;/&#32;_ToVT::_S_full_size);
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_R&#32;=&#32;<link linkend="_classarray">array&lt;_To, _Np&gt;</link>;
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__adjust&#32;modifies&#32;its&#32;input&#32;to&#32;have&#32;_Np&#32;(use&#32;_SizeConstant)</emphasis>
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;entries&#32;so&#32;that&#32;no&#32;unnecessary&#32;intermediate&#32;conversions&#32;are</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requested&#32;and,&#32;more&#32;importantly,&#32;no&#32;intermediate&#32;conversions&#32;are</emphasis>
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;missing</emphasis>
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">auto</emphasis>&#32;__adjust
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__n,
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__vv)&#32;-&gt;&#32;_SimdWrapper&lt;_FromT,&#32;<emphasis role="keyword">decltype</emphasis>(__n)<link linkend="_classvalue">::value</link>&gt;&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_FromT,&#32;decltype(__n)::value&gt;(__vv);
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vi&#32;=&#32;__to_intrin(__v);
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__make_array&#32;=&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__x0,&#32;[[maybe_unused]]&#32;<emphasis role="keyword">auto</emphasis>&#32;__x1)&#32;{
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_To&gt;(__x0)};
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_To&gt;(__x0),
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;_To&gt;(__x1)};
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
621 
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;0)
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{};
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;2)
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral_v&lt;_FromT&gt;);
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral_v&lt;_ToT&gt;);
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_FromT&gt;)
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(_mm_unpacklo_epi8(__vi,&#32;__m128i()),
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi8(__vi,&#32;__m128i()));
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi16(_mm_unpacklo_epi8(__vi,&#32;__vi),&#32;8),
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi16(_mm_unpackhi_epi8(__vi,&#32;__vi),&#32;8));
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;4)
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral_v&lt;_FromT&gt;);
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_ToT&gt;)
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ints
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__convert_all&lt;__vector_type16_t&lt;int&gt;,&#32;_Np&gt;(
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__adjust(_SizeConstant&lt;_Np&#32;*&#32;4&gt;(),&#32;__v));
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;(
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(__as_wrapper(__ints[__i]));
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_FromT&gt;)
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(_mm_unpacklo_epi16(__vi,&#32;__m128i()),
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi16(__vi,&#32;__m128i()));
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(_mm_unpacklo_epi16(__vi,&#32;__vi),&#32;16),
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(_mm_unpackhi_epi16(__vi,&#32;__vi),&#32;16));
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;8
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_FromT&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_ToT&gt;)
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_FromT&gt;)
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(_mm_unpacklo_epi32(__vi,&#32;__m128i()),
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__vi,&#32;__m128i()));
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(__vi,&#32;_mm_srai_epi32(__vi,&#32;31)),
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__vi,&#32;_mm_srai_epi32(__vi,&#32;31)));
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;==&#32;4&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;8
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_integral_v&lt;_FromT&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_ToT&gt;)
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_unsigned_v&lt;_FromT&gt;)
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(_mm_unpacklo_epi32(__vi,&#32;__m128i()),
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__vi,&#32;__m128i()));
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_array(
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(__vi,&#32;_mm_srai_epi32(__vi,&#32;31)),
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(__vi,&#32;_mm_srai_epi32(__vi,&#32;31)));
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;&gt;=&#32;4
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_signed_v&lt;_FromT&gt;)
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;__vv[2]&#32;=&#32;{_mm_unpacklo_epi8(__vi,&#32;__vi),
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi8(__vi,&#32;__vi)};
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__vector_type_t&lt;int,&#32;4&gt;&#32;__vvvv[4]&#32;=&#32;{
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(_mm_unpacklo_epi16(__vv[0],&#32;__vv[0])),
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(_mm_unpackhi_epi16(__vv[0],&#32;__vv[0])),
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(_mm_unpacklo_epi16(__vv[1],&#32;__vv[1])),
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(_mm_unpackhi_epi16(__vv[1],&#32;__vv[1]))};
689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;4)
690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;int,&#32;4&gt;(__vvvv[__i]&#32;&gt;&gt;&#32;24));
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_ToT&gt;)
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__signbits&#32;=&#32;__to_intrin(__vvvv[__i&#32;/&#32;2]&#32;&gt;&gt;&#32;31);
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__sx32&#32;=&#32;__to_intrin(__vvvv[__i&#32;/&#32;2]&#32;&gt;&gt;&#32;24);
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_ToT&gt;(
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;%&#32;2&#32;==&#32;0&#32;?&#32;_mm_unpacklo_epi32(__sx32,&#32;__signbits)
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_mm_unpackhi_epi32(__sx32,&#32;__signbits));
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;int,&#32;4&gt;&#32;__int4&#32;=&#32;__vvvv[__i&#32;/&#32;2]&#32;&gt;&gt;&#32;24;
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;%&#32;2&#32;==&#32;0&#32;?&#32;__int4
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_SimdWrapper&lt;int,&#32;4&gt;(
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi64(__to_intrin(__int4),
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__int4))));
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;==&#32;1&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;4)
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__shorts&#32;=&#32;__convert_all&lt;__vector_type16_t&lt;
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;is_signed_v&lt;_FromT&gt;,&#32;short,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&gt;&gt;&gt;(
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__adjust(_SizeConstant&lt;(_Np&#32;+&#32;1)&#32;/&#32;2&#32;*&#32;8&gt;(),&#32;__v));
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_all&lt;_To&gt;(__shorts[__i&#32;/&#32;2])[__i&#32;%&#32;2];
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;8
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_signed_v&lt;_FromT&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_ToT&gt;)
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;__vv[2]&#32;=&#32;{_mm_unpacklo_epi16(__vi,&#32;__vi),
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi16(__vi,&#32;__vi)};
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__vector_type16_t&lt;int&gt;&#32;__vvvv[4]
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{__vector_bitcast&lt;int&gt;(
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(_mm_srai_epi32(__vv[0],&#32;16),
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(__vv[0],&#32;31))),
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(_mm_srai_epi32(__vv[0],&#32;16),
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(__vv[0],&#32;31))),
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpacklo_epi32(_mm_srai_epi32(__vv[1],&#32;16),
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(__vv[1],&#32;31))),
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;int&gt;(
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_unpackhi_epi32(_mm_srai_epi32(__vv[1],&#32;16),
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_srai_epi32(__vv[1],&#32;31)))};
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_ToT&gt;(__vvvv[__i]);
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_FromT)&#32;&lt;=&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_ToT)&#32;==&#32;8)
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ints
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__convert_all&lt;__vector_type16_t&lt;conditional_t&lt;
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_signed_v&lt;_FromT&gt;&#32;||&#32;is_floating_point_v&lt;_ToT&gt;,&#32;int,
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&gt;&gt;&gt;(
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__adjust(_SizeConstant&lt;(_Np&#32;+&#32;1)&#32;/&#32;2&#32;*&#32;4&gt;(),&#32;__v));
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert_all&lt;_To&gt;(__ints[__i&#32;/&#32;2])[__i&#32;%&#32;2];
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_To&gt;();
756 &#32;&#32;&#32;&#32;&#32;&#32;}
757 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN&#32;}}}</emphasis>
758 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((_FromVT::_S_partial_width&#32;-&#32;_Offset)
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&#32;_ToVT::_S_full_size)
760 &#32;&#32;&#32;&#32;&#32;&#32;{
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
762 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(</emphasis>
763 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_FromVT::_S_partial_width&#32;&amp;&#32;(_FromVT::_S_partial_width&#32;-&#32;1))&#32;==</emphasis>
764 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,</emphasis>
765 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;__convert_all&#32;only&#32;supports&#32;power-of-2&#32;number&#32;of&#32;elements.</emphasis>
766 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Otherwise&#32;&quot;&#32;&quot;the&#32;return&#32;type&#32;cannot&#32;be&#32;array&lt;_To,&#32;N&gt;.&quot;);</emphasis>
767 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NTotal
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(_FromVT::_S_partial_width&#32;-&#32;_Offset)&#32;/&#32;_ToVT::_S_full_size;
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_NParts&#32;==&#32;0&#32;?&#32;_NTotal&#32;:&#32;_NParts;
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Np&#32;&lt;=&#32;_NTotal
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(_Np&#32;==&#32;_NTotal&#32;+&#32;1
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_FromVT::_S_partial_width&#32;-&#32;_Offset)&#32;%&#32;_ToVT::_S_full_size
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&#32;0));
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_R&#32;=&#32;<link linkend="_classarray">array&lt;_To, _Np&gt;</link>;
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__vector_convert&lt;_To&gt;(
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract_part&lt;_Offset,&#32;_FromVT::_S_partial_width,
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ToVT::_S_full_size&gt;(__v))};
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_R&gt;([&amp;](
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__part
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__extract_part&lt;__i&#32;*&#32;_ToVT::_S_full_size&#32;+&#32;_Offset,
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FromVT::_S_partial_width,
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ToVT::_S_full_size&gt;(__v);
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_convert&lt;_To&gt;(__part);
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
790 &#32;&#32;&#32;&#32;&#32;&#32;}
791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;==&#32;0)
792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray">array&lt;_To, 1&gt;</link>{__vector_convert&lt;_To&gt;(__v)};
793 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray">array&lt;_To, 1&gt;</link>{__vector_convert&lt;_To&gt;(
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract_part&lt;_Offset,&#32;_FromVT::_S_partial_width,
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FromVT::_S_partial_width&#32;-&#32;_Offset&gt;(__v))};
797 &#32;&#32;&#32;&#32;&#32;&#32;}
798 &#32;&#32;}
799 
800 <emphasis role="comment">//&#32;}}}</emphasis>
801 
802 <emphasis role="comment">//&#32;_GnuTraits&#32;{{{</emphasis>
803 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Mp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
804 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_GnuTraits
805 &#32;&#32;{
806 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IsValid&#32;=&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>;
807 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_SimdImpl;
808 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_MaskImpl;
809 
810 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd&#32;and&#32;simd_mask&#32;member&#32;types&#32;{{{</emphasis>
811 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdMember&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;;
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;_SimdWrapper&lt;_Mp,&#32;_Np&gt;;
813 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_simd_align&#32;=&#32;<emphasis role="keyword">alignof</emphasis>(_SimdMember);
814 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_mask_align&#32;=&#32;<emphasis role="keyword">alignof</emphasis>(_MaskMember);
815 
816 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
817 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;metadata&#32;{{{</emphasis>
818 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;_SimdMember::_S_full_size;
819 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_partial&#32;=&#32;_SimdMember::_S_is_partial;
820 
821 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
822 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_SimdBase&#32;/&#32;base&#32;class&#32;for&#32;simd,&#32;providing&#32;extra&#32;conversions&#32;{{{</emphasis>
823 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdBase2
824 &#32;&#32;&#32;&#32;{
825 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;()<emphasis role="keyword">&#32;const</emphasis>
827 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_intrin(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>simd&lt;_Tp,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;_M_data);
829 &#32;&#32;&#32;&#32;&#32;&#32;}
830 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;()<emphasis role="keyword">&#32;const</emphasis>
832 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>simd&lt;_Tp,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;_M_data.__builtin();
834 &#32;&#32;&#32;&#32;&#32;&#32;}
835 &#32;&#32;&#32;&#32;};
836 
837 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdBase1
838 &#32;&#32;&#32;&#32;{
839 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;()<emphasis role="keyword">&#32;const</emphasis>
841 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(*<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>simd&lt;_Tp,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>));&#32;}
842 &#32;&#32;&#32;&#32;};
843 
844 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdBase&#32;=&#32;conditional_t&lt;
845 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;,&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;<link linkend="_classvalue">::value</link>,
846 &#32;&#32;&#32;&#32;&#32;&#32;_SimdBase1,&#32;_SimdBase2&gt;;
847 
848 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
849 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_MaskBase&#32;{{{</emphasis>
850 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskBase2
851 &#32;&#32;&#32;&#32;{
852 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;()<emphasis role="keyword">&#32;const</emphasis>
854 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>simd_mask&lt;_Tp,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)
856 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;_M_data.__intrin();
857 &#32;&#32;&#32;&#32;&#32;&#32;}
858 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;()<emphasis role="keyword">&#32;const</emphasis>
860 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
861 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>simd_mask&lt;_Tp,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;_M_data._M_data;
862 &#32;&#32;&#32;&#32;&#32;&#32;}
863 &#32;&#32;&#32;&#32;};
864 
865 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskBase1
866 &#32;&#32;&#32;&#32;{
867 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;()<emphasis role="keyword">&#32;const</emphasis>
869 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(*<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>simd_mask&lt;_Tp,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>));&#32;}
870 &#32;&#32;&#32;&#32;};
871 
872 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskBase&#32;=&#32;conditional_t&lt;
873 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;,&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;<link linkend="_classvalue">::value</link>,
874 &#32;&#32;&#32;&#32;&#32;&#32;_MaskBase1,&#32;_MaskBase2&gt;;
875 
876 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
877 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_MaskCastType&#32;{{{</emphasis>
878 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parameter&#32;type&#32;of&#32;one&#32;explicit&#32;simd_mask&#32;constructor</emphasis>
879 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_MaskCastType
880 &#32;&#32;&#32;&#32;{
881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;;
882 &#32;&#32;&#32;&#32;&#32;&#32;_Up&#32;_M_data;
883 
884 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
885 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
886 &#32;&#32;&#32;&#32;&#32;&#32;_MaskCastType(_Up&#32;__x)&#32;:&#32;_M_data(__x)&#32;{}
887 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_MaskMember()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
889 &#32;&#32;&#32;&#32;};
890 
891 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
892 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_SimdCastType&#32;{{{</emphasis>
893 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parameter&#32;type&#32;of&#32;one&#32;explicit&#32;simd&#32;constructor</emphasis>
894 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_SimdCastType1
895 &#32;&#32;&#32;&#32;{
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ap&#32;=&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;;
897 &#32;&#32;&#32;&#32;&#32;&#32;_SimdMember&#32;_M_data;
898 
899 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
900 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
901 &#32;&#32;&#32;&#32;&#32;&#32;_SimdCastType1(_Ap&#32;__a)&#32;:&#32;_M_data(__vector_bitcast&lt;_Tp&gt;(__a))&#32;{}
902 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_SimdMember()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
904 &#32;&#32;&#32;&#32;};
905 
906 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_SimdCastType2
907 &#32;&#32;&#32;&#32;{
908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ap&#32;=&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;;
909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Bp&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;;
910 &#32;&#32;&#32;&#32;&#32;&#32;_SimdMember&#32;_M_data;
911 
912 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
913 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
914 &#32;&#32;&#32;&#32;&#32;&#32;_SimdCastType2(_Ap&#32;__a)&#32;:&#32;_M_data(__vector_bitcast&lt;_Tp&gt;(__a))&#32;{}
915 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
916 &#32;&#32;&#32;&#32;&#32;&#32;_SimdCastType2(_Bp&#32;__b)&#32;:&#32;_M_data(__b)&#32;{}
917 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_SimdMember()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
919 &#32;&#32;&#32;&#32;};
920 
921 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdCastType&#32;=&#32;conditional_t&lt;
922 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;,&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;<link linkend="_classvalue">::value</link>,
923 &#32;&#32;&#32;&#32;&#32;&#32;_SimdCastType1,&#32;_SimdCastType2&gt;;
924 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
925 &#32;&#32;};
926 
927 <emphasis role="comment">//&#32;}}}</emphasis>
928 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplX86;
929 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplNeon;
930 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplBuiltin;
931 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplBuiltin;
932 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplBuiltin;
933 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplX86;
934 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplX86;
935 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplNeon;
936 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplNeon;
937 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplPpc;
938 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplPpc;
939 
940 <emphasis role="comment">//&#32;simd_abi::_VecBuiltin&#32;{{{</emphasis>
941 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_UsedBytes&gt;
942 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>simd_abi::_VecBuiltin
943 &#32;&#32;{
944 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
945 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size&#32;=&#32;_UsedBytes&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
946 
947 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;validity&#32;traits&#32;{{{</emphasis>
948 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IsValidAbiTag&#32;:&#32;__bool_constant&lt;(_UsedBytes&#32;&gt;&#32;1)&gt;&#32;{};
949 
950 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
951 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IsValidSizeFor
952 &#32;&#32;&#32;&#32;:&#32;__bool_constant&lt;(_UsedBytes&#32;/&#32;sizeof(_Tp)&#32;&gt;&#32;1
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_UsedBytes&#32;%&#32;sizeof(_Tp)&#32;==&#32;0
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_UsedBytes&#32;&lt;=&#32;__vectorized_sizeof&lt;_Tp&gt;()
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!__have_avx512f&#32;||&#32;_UsedBytes&#32;&lt;=&#32;32))&gt;&#32;{};
956 
957 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
958 &#32;&#32;&#32;&#32;&#32;&#32;struct&#32;_IsValid&#32;:&#32;conjunction&lt;_IsValidAbiTag,&#32;__is_vectorizable&lt;_Tp&gt;,
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsValidSizeFor&lt;_Tp&gt;&gt;&#32;{};
960 
961 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
962 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;constexpr&#32;bool&#32;_S_is_valid_v&#32;=&#32;_IsValid&lt;_Tp&gt;::value;
963 
964 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
965 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_SimdImpl/_MaskImpl&#32;{{{</emphasis>
966 #if&#32;_GLIBCXX_SIMD_X86INTRIN
967 &#32;&#32;&#32;&#32;using&#32;_CommonImpl&#32;=&#32;_CommonImplX86;
968 &#32;&#32;&#32;&#32;using&#32;_SimdImpl&#32;=&#32;_SimdImplX86&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
969 &#32;&#32;&#32;&#32;using&#32;_MaskImpl&#32;=&#32;_MaskImplX86&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
970 #elif&#32;_GLIBCXX_SIMD_HAVE_NEON
971 &#32;&#32;&#32;&#32;using&#32;_CommonImpl&#32;=&#32;_CommonImplNeon;
972 &#32;&#32;&#32;&#32;using&#32;_SimdImpl&#32;=&#32;_SimdImplNeon&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
973 &#32;&#32;&#32;&#32;using&#32;_MaskImpl&#32;=&#32;_MaskImplNeon&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
974 #else
975 &#32;&#32;&#32;&#32;using&#32;_CommonImpl&#32;=&#32;_CommonImplBuiltin;
976 #ifdef&#32;__ALTIVEC__
977 &#32;&#32;&#32;&#32;using&#32;_SimdImpl&#32;=&#32;_SimdImplPpc&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
978 &#32;&#32;&#32;&#32;using&#32;_MaskImpl&#32;=&#32;_MaskImplPpc&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
979 #else
980 &#32;&#32;&#32;&#32;using&#32;_SimdImpl&#32;=&#32;_SimdImplBuiltin&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
981 &#32;&#32;&#32;&#32;using&#32;_MaskImpl&#32;=&#32;_MaskImplBuiltin&lt;_VecBuiltin&lt;_UsedBytes&gt;&gt;;
982 #endif
983 #endif
984 
985 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
986 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__traits&#32;{{{</emphasis>
987 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
988 &#32;&#32;&#32;&#32;&#32;&#32;using&#32;_MaskValueType&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
989 
990 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
991 &#32;&#32;&#32;&#32;&#32;&#32;using&#32;__traits
992 &#32;&#32;&#32;&#32;=&#32;conditional_t&lt;_S_is_valid_v&lt;_Tp&gt;,
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GnuTraits&lt;_Tp,&#32;_MaskValueType&lt;_Tp&gt;,
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VecBuiltin&lt;_UsedBytes&gt;,&#32;_S_size&lt;_Tp&gt;&gt;,
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InvalidTraits&gt;;
996 
997 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
998 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;metadata&#32;{{{</emphasis>
999 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1000 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;constexpr&#32;size_t&#32;_S_full_size&#32;=&#32;__traits&lt;_Tp&gt;::_S_full_size;
1001 
1002 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1003 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;constexpr&#32;bool&#32;_S_is_partial&#32;=&#32;__traits&lt;_Tp&gt;::_S_is_partial;
1004 
1005 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1006 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicit&#32;masks&#32;{{{</emphasis>
1007 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1008 &#32;&#32;&#32;&#32;&#32;&#32;using&#32;_MaskMember&#32;=&#32;_SimdWrapper&lt;_MaskValueType&lt;_Tp&gt;,&#32;_S_size&lt;_Tp&gt;&gt;;
1009 
1010 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1011 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;static&#32;constexpr&#32;_MaskMember&lt;_Tp&gt;
1012 &#32;&#32;&#32;&#32;&#32;&#32;_S_implicit_mask()
1013 &#32;&#32;&#32;&#32;&#32;&#32;{
1014 &#32;&#32;&#32;&#32;using&#32;_UV&#32;=&#32;typename&#32;_MaskMember&lt;_Tp&gt;::_BuiltinType;
1015 &#32;&#32;&#32;&#32;if&#32;constexpr&#32;(!_MaskMember&lt;_Tp&gt;::_S_is_partial)
1016 &#32;&#32;&#32;&#32;&#32;&#32;return&#32;~_UV();
1017 &#32;&#32;&#32;&#32;else
1018 &#32;&#32;&#32;&#32;&#32;&#32;{
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;auto&#32;__size&#32;=&#32;_S_size&lt;_Tp&gt;;
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;auto&#32;__r&#32;=&#32;__generate_vector&lt;_UV&gt;(
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](auto&#32;__i)&#32;constexpr&#32;{&#32;return&#32;__i&#32;&lt;&#32;__size&#32;?&#32;-1&#32;:&#32;0;&#32;});
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__r;
1023 &#32;&#32;&#32;&#32;&#32;&#32;}
1024 &#32;&#32;&#32;&#32;&#32;&#32;}
1025 
1026 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1027 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;static&#32;constexpr&#32;__intrinsic_type_t&lt;_Tp,
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_size&lt;_Tp&gt;&gt;
1029 &#32;&#32;&#32;&#32;&#32;&#32;_S_implicit_mask_intrin()
1030 &#32;&#32;&#32;&#32;&#32;&#32;{
1031 &#32;&#32;&#32;&#32;return&#32;__to_intrin(
1032 &#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp&gt;(_S_implicit_mask&lt;_Tp&gt;()._M_data));
1033 &#32;&#32;&#32;&#32;&#32;&#32;}
1034 
1035 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_TW,&#32;typename&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TW&gt;&gt;
1036 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;static&#32;constexpr&#32;_TW&#32;_S_masked(_TW&#32;__x)
1037 &#32;&#32;&#32;&#32;&#32;&#32;{
1038 &#32;&#32;&#32;&#32;using&#32;_Tp&#32;=&#32;typename&#32;_TVT::value_type;
1039 &#32;&#32;&#32;&#32;if&#32;constexpr&#32;(!_MaskMember&lt;_Tp&gt;::_S_is_partial)
1040 &#32;&#32;&#32;&#32;&#32;&#32;return&#32;__x;
1041 &#32;&#32;&#32;&#32;else
1042 &#32;&#32;&#32;&#32;&#32;&#32;return&#32;__and(__as_vector(__x),
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp&gt;(_S_implicit_mask&lt;_Tp&gt;()));
1044 &#32;&#32;&#32;&#32;&#32;&#32;}
1045 
1046 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_TW,&#32;typename&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TW&gt;&gt;
1047 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;static&#32;constexpr&#32;auto
1048 &#32;&#32;&#32;&#32;&#32;&#32;__make_padding_nonzero(_TW&#32;__x)
1049 &#32;&#32;&#32;&#32;&#32;&#32;{
1050 &#32;&#32;&#32;&#32;using&#32;_Tp&#32;=&#32;typename&#32;_TVT::value_type;
1051 &#32;&#32;&#32;&#32;if&#32;constexpr&#32;(!_S_is_partial&lt;_Tp&gt;)
1052 &#32;&#32;&#32;&#32;&#32;&#32;return&#32;__x;
1053 &#32;&#32;&#32;&#32;else
1054 &#32;&#32;&#32;&#32;&#32;&#32;{
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;auto&#32;__implicit_mask
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Tp&gt;(_S_implicit_mask&lt;_Tp&gt;());
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(is_integral_v&lt;_Tp&gt;)
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__or(__x,&#32;~__implicit_mask);
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;auto&#32;__one
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__andnot(__implicit_mask,
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_broadcast&lt;_S_full_size&lt;_Tp&gt;&gt;(_Tp(1)));
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&apos;s&#32;not&#32;enough&#32;to&#32;return&#32;`x&#32;|&#32;1_in_padding`&#32;because&#32;the</emphasis>
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;padding&#32;in&#32;x&#32;might&#32;be&#32;inf&#32;or&#32;nan&#32;(independent&#32;of</emphasis>
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__FINITE_MATH_ONLY__,&#32;because&#32;it&apos;s&#32;about&#32;padding&#32;bits)</emphasis>
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__or(__and(__x,&#32;__implicit_mask),&#32;__one);
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1069 &#32;&#32;&#32;&#32;&#32;&#32;}
1070 &#32;&#32;&#32;&#32;&#32;&#32;}
1071 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1072 &#32;&#32;};
1073 
1074 <emphasis role="comment">//&#32;}}}</emphasis>
1075 <emphasis role="comment">//&#32;simd_abi::_VecBltnBtmsk&#32;{{{</emphasis>
1076 template&#32;&lt;int&#32;_UsedBytes&gt;
1077 &#32;&#32;struct&#32;simd_abi::_VecBltnBtmsk
1078 &#32;&#32;{
1079 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1080 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;constexpr&#32;size_t&#32;_S_size&#32;=&#32;_UsedBytes&#32;/&#32;sizeof(_Tp);
1081 
1082 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;validity&#32;traits&#32;{{{</emphasis>
1083 &#32;&#32;&#32;&#32;struct&#32;_IsValidAbiTag&#32;:&#32;__bool_constant&lt;(_UsedBytes&#32;&gt;&#32;1)&gt;&#32;{};
1084 
1085 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1086 &#32;&#32;&#32;&#32;&#32;&#32;struct&#32;_IsValidSizeFor
1087 &#32;&#32;&#32;&#32;:&#32;__bool_constant&lt;(_UsedBytes&#32;/&#32;sizeof(_Tp)&#32;&gt;&#32;1
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_UsedBytes&#32;%&#32;sizeof(_Tp)&#32;==&#32;0&#32;&amp;&amp;&#32;_UsedBytes&#32;&lt;=&#32;64
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(_UsedBytes&#32;&gt;&#32;32&#32;||&#32;__have_avx512vl))&gt;&#32;{};
1090 
1091 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bitmasks&#32;require&#32;at&#32;least&#32;AVX512F.&#32;If&#32;sizeof(_Tp)&#32;&lt;&#32;4&#32;the&#32;AVX512BW&#32;is&#32;also</emphasis>
1092 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;required.</emphasis>
1093 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IsValid
1095 &#32;&#32;&#32;&#32;:&#32;conjunction&lt;
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsValidAbiTag,&#32;__bool_constant&lt;__have_avx512f&gt;,
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bool_constant&lt;__have_avx512bw&#32;||&#32;(sizeof(_Tp)&#32;&gt;=&#32;4)&gt;,
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bool_constant&lt;(__vectorized_sizeof&lt;_Tp&gt;()&#32;&gt;&#32;sizeof(_Tp))&gt;,
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsValidSizeFor&lt;_Tp&gt;&gt;&#32;{};
1100 
1101 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_valid_v&#32;=&#32;_IsValid&lt;_Tp&gt;::value;
1103 
1104 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd/_MaskImpl&#32;{{{</emphasis>
1106 <emphasis role="preprocessor">&#32;&#32;#if&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
1107 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CommonImpl&#32;=&#32;_CommonImplX86;
1108 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdImpl&#32;=&#32;_SimdImplX86&lt;_VecBltnBtmsk&lt;_UsedBytes&gt;&gt;;
1109 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImpl&#32;=&#32;_MaskImplX86&lt;_VecBltnBtmsk&lt;_UsedBytes&gt;&gt;;
1110 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
1111 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&gt;
1112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MissingImpl;
1113 
1114 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CommonImpl&#32;=&#32;_MissingImpl&lt;_UsedBytes&gt;;
1115 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdImpl&#32;=&#32;_MissingImpl&lt;_UsedBytes&gt;;
1116 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImpl&#32;=&#32;_MissingImpl&lt;_UsedBytes&gt;;
1117 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
1118 
1119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1120 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__traits&#32;{{{</emphasis>
1121 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;_SimdWrapper&lt;bool,&#32;_S_size&lt;_Tp&gt;&gt;;
1123 
1124 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__traits&#32;=&#32;conditional_t&lt;
1126 &#32;&#32;&#32;&#32;_S_is_valid_v&lt;_Tp&gt;,
1127 &#32;&#32;&#32;&#32;_GnuTraits&lt;_Tp,&#32;bool,&#32;_VecBltnBtmsk&lt;_UsedBytes&gt;,&#32;_S_size&lt;_Tp&gt;&gt;,
1128 &#32;&#32;&#32;&#32;_InvalidTraits&gt;;
1129 
1130 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
1131 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;metadata&#32;{{{</emphasis>
1132 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;__traits&lt;_Tp&gt;::_S_full_size;
1134 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_partial&#32;=&#32;__traits&lt;_Tp&gt;::_S_is_partial;
1136 
1137 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1138 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicit&#32;mask&#32;{{{</emphasis>
1139 &#32;&#32;<emphasis role="keyword">private</emphasis>:
1140 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ImplicitMask&#32;=&#32;_SimdWrapper&lt;bool,&#32;_S_size&lt;_Tp&gt;&gt;;
1142 
1143 &#32;&#32;<emphasis role="keyword">public</emphasis>:
1144 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1145 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__bool_storage_member_type_t&lt;_Np&gt;
1146 &#32;&#32;&#32;&#32;&#32;&#32;__implicit_mask_n()
1147 &#32;&#32;&#32;&#32;&#32;&#32;{
1148 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;__bool_storage_member_type_t&lt;_Np&gt;;
1149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Np&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__&#32;?&#32;_Tp((1ULL&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1)&#32;:&#32;~_Tp();
1150 &#32;&#32;&#32;&#32;&#32;&#32;}
1151 
1152 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1153 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ImplicitMask&lt;_Tp&gt;
1154 &#32;&#32;&#32;&#32;&#32;&#32;_S_implicit_mask()
1155 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__implicit_mask_n&lt;_S_size&lt;_Tp&gt;&gt;();&#32;}
1156 
1157 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1158 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__bool_storage_member_type_t&lt;
1159 &#32;&#32;&#32;&#32;_S_size&lt;_Tp&gt;&gt;
1160 &#32;&#32;&#32;&#32;&#32;&#32;_S_implicit_mask_intrin()
1161 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__implicit_mask_n&lt;_S_size&lt;_Tp&gt;&gt;();&#32;}
1162 
1163 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1164 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1165 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
1166 &#32;&#32;&#32;&#32;&#32;&#32;{
1167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
1168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&lt;&#32;8&#32;||&#32;(_Np&#32;&amp;&#32;(_Np&#32;-&#32;1))&#32;!=&#32;0)
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskImpl::_S_bit_and(
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;(
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bool_storage_member_type_t&lt;_Np&gt;((1ULL&#32;&lt;&lt;&#32;_Np)&#32;-&#32;1)));
1172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
1174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_masked(__x._M_data);
1176 &#32;&#32;&#32;&#32;&#32;&#32;}
1177 
1178 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TV&gt;
1179 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_TV
1180 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked(_TV&#32;__x)
1181 &#32;&#32;&#32;&#32;&#32;&#32;{
1182 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_TV&gt;::value_type;
1183 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
1184 &#32;&#32;&#32;&#32;&#32;&#32;!__is_bitmask_v&lt;_TV&gt;,
1185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_VecBltnBtmsk::_S_masked&#32;cannot&#32;work&#32;on&#32;bitmasks,&#32;since&#32;it&#32;doesn&apos;t&#32;&quot;</emphasis>
1186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;know&#32;the&#32;number&#32;of&#32;elements.&#32;Use&#32;_SimdWrapper&lt;bool,&#32;N&gt;&#32;instead.&quot;</emphasis>);
1187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_is_partial&lt;_Tp&gt;)
1188 &#32;&#32;&#32;&#32;&#32;&#32;{
1189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_S_size&lt;_Tp&gt;;
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_dependent_t&lt;_TV,&#32;_CommonImpl&gt;::_S_blend(
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_implicit_mask&lt;_Tp&gt;(),&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;(),
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;(__x));
1193 &#32;&#32;&#32;&#32;&#32;&#32;}
1194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
1196 &#32;&#32;&#32;&#32;&#32;&#32;}
1197 
1198 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TV,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TV&gt;&gt;
1199 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1200 &#32;&#32;&#32;&#32;&#32;&#32;__make_padding_nonzero(_TV&#32;__x)
1201 &#32;&#32;&#32;&#32;&#32;&#32;{
1202 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
1203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_S_is_partial&lt;_Tp&gt;)
1204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
1205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1206 &#32;&#32;&#32;&#32;&#32;&#32;{
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_S_size&lt;_Tp&gt;;
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;typename&#32;_TVT::value_type&gt;)
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;__generate_vector&lt;_Tp,&#32;_S_full_size&lt;_Tp&gt;&gt;(
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;-&gt;&#32;_Tp&#32;{
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;&lt;&#32;_Np)
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_dependent_t&lt;_TV,&#32;_CommonImpl&gt;::_S_blend(
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_implicit_mask&lt;_Tp&gt;(),
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;(
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_broadcast&lt;_S_full_size&lt;_Tp&gt;&gt;(_Tp(1))),
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;(__x))
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_data;
1224 &#32;&#32;&#32;&#32;&#32;&#32;}
1225 &#32;&#32;&#32;&#32;&#32;&#32;}
1226 
1227 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1228 &#32;&#32;};
1229 
1230 <emphasis role="comment">//}}}</emphasis>
1231 <emphasis role="comment">//&#32;_CommonImplBuiltin&#32;{{{</emphasis>
1232 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplBuiltin
1233 {
1234 &#32;&#32;<emphasis role="comment">//&#32;_S_converts_via_decomposition{{{</emphasis>
1235 &#32;&#32;<emphasis role="comment">//&#32;This&#32;lists&#32;all&#32;cases&#32;where&#32;a&#32;__vector_convert&#32;needs&#32;to&#32;fall&#32;back&#32;to</emphasis>
1236 &#32;&#32;<emphasis role="comment">//&#32;conversion&#32;of&#32;individual&#32;scalars&#32;(i.e.&#32;decompose&#32;the&#32;input&#32;vector&#32;into</emphasis>
1237 &#32;&#32;<emphasis role="comment">//&#32;scalars,&#32;convert,&#32;compose&#32;output&#32;vector).&#32;In&#32;those&#32;cases,&#32;_S_masked_load&#32;&amp;</emphasis>
1238 &#32;&#32;<emphasis role="comment">//&#32;_S_masked_store&#32;prefer&#32;to&#32;use&#32;the&#32;_S_bit_iteration&#32;implementation.</emphasis>
1239 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToSize&gt;
1240 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__converts_via_decomposition_v
1241 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>(_To);
1242 
1243 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1244 &#32;&#32;<emphasis role="comment">//&#32;_S_load{{{</emphasis>
1245 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&#32;=&#32;_Np&#32;*&#32;sizeof(_Tp)&gt;
1246 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;
1247 &#32;&#32;&#32;&#32;_S_load(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__p)
1248 &#32;&#32;&#32;&#32;{
1249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;&#32;1);
1250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Bytes&#32;%&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;0);
1251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Rp&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;;
1252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Rp)&#32;==&#32;_Bytes)
1253 &#32;&#32;&#32;&#32;{
1254 &#32;&#32;&#32;&#32;&#32;&#32;_Rp&#32;__r;
1255 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;__p,&#32;_Bytes);
1256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1257 &#32;&#32;&#32;&#32;}
1258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1259 &#32;&#32;&#32;&#32;{
1260 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_PR90424</emphasis>
1261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;conditional_t&lt;
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_integral_v&lt;_Tp&gt;,
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;_Bytes&#32;%&#32;4&#32;==&#32;0,
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;_Bytes&#32;%&#32;8&#32;==&#32;0,&#32;long&#32;long,&#32;int&gt;,
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;_Bytes&#32;%&#32;2&#32;==&#32;0,&#32;short,&#32;signed&#32;char&gt;&gt;,
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;(_Bytes&#32;&lt;&#32;8&#32;||&#32;_Np&#32;%&#32;2&#32;==&#32;1&#32;||&#32;_Np&#32;==&#32;2),&#32;_Tp,
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&gt;&gt;;
1268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_Up,&#32;_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&gt;;
1269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_V)&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>(_Rp))
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;on&#32;i386&#32;with&#32;4&#32;&lt;&#32;_Bytes&#32;&lt;=&#32;8</emphasis>
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rp&#32;__r{};
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;__p,&#32;_Bytes);
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1276 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_WORKAROUND_PR90424</emphasis>
1277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;_Rp;
1278 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_WORKAROUND_PR90424</emphasis>
1279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__r{};
1281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Bytes&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_V));
1282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;__p,&#32;_Bytes);
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Rp<emphasis role="keyword">&gt;</emphasis>(__r);
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1285 &#32;&#32;&#32;&#32;}
1286 &#32;&#32;&#32;&#32;}
1287 
1288 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1289 &#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{</emphasis>
1290 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_ReqBytes&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TV&gt;
1291 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_store(_TV&#32;__x,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__addr)
1292 &#32;&#32;&#32;&#32;{
1293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&#32;=&#32;_ReqBytes&#32;==&#32;0&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(__x)&#32;:&#32;_ReqBytes;
1294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;=&#32;_Bytes);
1295 
1296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TV&gt;)
1297 &#32;&#32;&#32;&#32;{
1298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_TV&gt;::value_type;
1299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Bytes&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
1300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;_Bytes);
1301 
1302 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_PR90424</emphasis>
1303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;conditional_t&lt;
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(is_integral_v&lt;_Tp&gt;&#32;||&#32;_Bytes&#32;&lt;&#32;4),
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;long)),&#32;<emphasis role="keywordtype">long</emphasis>&#32;long,&#32;_Tp&gt;,
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&gt;;
1307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__v&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__x);
1308 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_WORKAROUND_PR90424</emphasis>
1309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;&#32;__v&#32;=&#32;__x;
1310 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_WORKAROUND_PR90424</emphasis>
1311 
1312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((_Bytes&#32;&amp;&#32;(_Bytes&#32;-&#32;1))&#32;!=&#32;0)
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_MoreBytes&#32;=&#32;std::__bit_ceil(_Bytes);
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(<emphasis role="keyword">decltype</emphasis>(__v))&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[_MoreBytes];
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;&amp;__v,&#32;_MoreBytes);
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__addr,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;_Bytes);
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__addr,&#32;&amp;__v,&#32;_Bytes);
1321 &#32;&#32;&#32;&#32;}
1322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1323 &#32;&#32;&#32;&#32;__builtin_memcpy(__addr,&#32;&amp;__x,&#32;_Bytes);
1324 &#32;&#32;&#32;&#32;}
1325 
1326 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1327 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_store(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__addr)
1329 &#32;&#32;&#32;&#32;{&#32;_S_store&lt;_Np&#32;*&#32;sizeof(_Tp)&gt;(__x._M_data,&#32;__addr);&#32;}
1330 
1331 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1332 &#32;&#32;<emphasis role="comment">//&#32;_S_store_bool_array(_BitMask)&#32;{{{</emphasis>
1333 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
1334 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1335 &#32;&#32;&#32;&#32;_S_store_bool_array(_BitMask&lt;_Np,&#32;_Sanitized&gt;&#32;__x,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)
1336 &#32;&#32;&#32;&#32;{
1337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1338 &#32;&#32;&#32;&#32;__mem[0]&#32;=&#32;__x[0];
1339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;2)
1340 &#32;&#32;&#32;&#32;{
1341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;__bool2&#32;=&#32;(__x._M_to_bits()&#32;*&#32;0x81)&#32;&amp;&#32;0x0101;
1342 &#32;&#32;&#32;&#32;&#32;&#32;_S_store&lt;_Np&gt;(__bool2,&#32;__mem);
1343 &#32;&#32;&#32;&#32;}
1344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;3)
1345 &#32;&#32;&#32;&#32;{
1346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bool3&#32;=&#32;(__x._M_to_bits()&#32;*&#32;0x4081)&#32;&amp;&#32;0x010101;
1347 &#32;&#32;&#32;&#32;&#32;&#32;_S_store&lt;_Np&gt;(__bool3,&#32;__mem);
1348 &#32;&#32;&#32;&#32;}
1349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1350 &#32;&#32;&#32;&#32;{
1351 &#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;__div_roundup(_Np,&#32;4)&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__offset&#32;=&#32;__i&#32;*&#32;4;
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__remaining&#32;=&#32;_Np&#32;-&#32;__offset;
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__remaining&#32;&gt;&#32;4&#32;&amp;&amp;&#32;__remaining&#32;&lt;=&#32;7)
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ULLong&#32;__bool7
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(__x.template&#32;_M_extract&lt;__offset&gt;()._M_to_bits()
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;0x40810204081ULL)
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;0x0101010101010101ULL;
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_store&lt;__remaining&gt;(__bool7,&#32;__mem&#32;+&#32;__offset);
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__remaining&#32;&gt;=&#32;4)
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bits&#32;=&#32;__x.template&#32;_M_extract&lt;__offset&gt;()._M_to_bits();
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__remaining&#32;&gt;&#32;7)
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bits&#32;&amp;=&#32;0xf;
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bool4&#32;=&#32;(__bits&#32;*&#32;0x204081)&#32;&amp;&#32;0x01010101;
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_store&lt;4&gt;(__bool4,&#32;__mem&#32;+&#32;__offset);
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1370 &#32;&#32;&#32;&#32;&#32;&#32;});
1371 &#32;&#32;&#32;&#32;}
1372 &#32;&#32;&#32;&#32;}
1373 
1374 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1375 &#32;&#32;<emphasis role="comment">//&#32;_S_blend{{{</emphasis>
1376 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1377 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1378 &#32;&#32;&#32;&#32;_S_blend(_SimdWrapper&lt;__int_for_sizeof_t&lt;_Tp&gt;,&#32;_Np&gt;&#32;__k,
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__at0,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__at1)
1380 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k._M_data&#32;?&#32;__at1._M_data&#32;:&#32;__at0._M_data;&#32;}
1381 
1382 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1383 };
1384 
1385 <emphasis role="comment">//&#32;}}}</emphasis>
1386 <emphasis role="comment">//&#32;_SimdImplBuiltin&#32;{{{1</emphasis>
1387 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1388 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplBuiltin
1389 &#32;&#32;{
1390 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;member&#32;types&#32;{{{2</emphasis>
1391 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_max_store_size&#32;=&#32;16;
1393 
1394 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>abi_type&#32;=&#32;_Abi;
1395 
1396 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TypeTag&#32;=&#32;_Tp*;
1398 
1399 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::template&#32;__traits&lt;_Tp&gt;::_SimdMember;
1401 
1402 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::template&#32;_MaskMember&lt;_Tp&gt;;
1404 
1405 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size&#32;=&#32;_Abi::template&#32;_S_size&lt;_Tp&gt;;
1407 
1408 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;_Abi::template&#32;_S_full_size&lt;_Tp&gt;;
1410 
1411 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CommonImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_CommonImpl;
1412 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SuperImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_SimdImpl;
1413 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_MaskImpl;
1414 
1415 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_make_simd(_SimdWrapper/__intrinsic_type_t)&#32;{{{2</emphasis>
1416 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1417 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;
1418 &#32;&#32;&#32;&#32;&#32;&#32;_M_make_simd(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
1419 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__x};&#32;}
1420 
1421 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1422 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;
1423 &#32;&#32;&#32;&#32;&#32;&#32;_M_make_simd(__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;&#32;__x)
1424 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__vector_bitcast&lt;_Tp&gt;(__x)};&#32;}
1425 
1426 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_broadcast&#32;{{{2</emphasis>
1427 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1428 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdMember&lt;_Tp&gt;
1429 &#32;&#32;&#32;&#32;&#32;&#32;_S_broadcast(_Tp&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1430 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_broadcast&lt;_S_full_size&lt;_Tp&gt;&gt;(__x);&#32;}
1431 
1432 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_generator&#32;{{{2</emphasis>
1433 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdMember&lt;_Tp&gt;&#32;_S_generator(_Fp&amp;&amp;&#32;__gen,
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TypeTag&lt;_Tp&gt;)
1436 &#32;&#32;&#32;&#32;&#32;&#32;{
1437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector&lt;_Tp,&#32;_S_full_size&lt;_Tp&gt;&gt;([&amp;](
1438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i&#32;&lt;&#32;_S_size&lt;_Tp&gt;)
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gen(__i);
1441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1443 &#32;&#32;&#32;&#32;});
1444 &#32;&#32;&#32;&#32;&#32;&#32;}
1445 
1446 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_load&#32;{{{2</emphasis>
1447 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1448 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdMember&lt;_Tp&gt;
1449 &#32;&#32;&#32;&#32;&#32;&#32;_S_load(<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__mem,&#32;_TypeTag&lt;_Tp&gt;)&#32;<emphasis role="keyword">noexcept</emphasis>
1450 &#32;&#32;&#32;&#32;&#32;&#32;{
1451 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_S_size&lt;_Tp&gt;;
1452 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__max_load_size
1453 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;=&#32;4&#32;&amp;&amp;&#32;__have_avx512f)&#32;||&#32;__have_avx512bw&#32;&#32;&#32;?&#32;64
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(is_floating_point_v&lt;_Up&gt;&#32;&amp;&amp;&#32;__have_avx)&#32;||&#32;__have_avx2&#32;?&#32;32
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;16;
1456 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes_to_load&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Np;
1457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;&#32;8)
1458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector&lt;_Tp,&#32;_SimdMember&lt;_Tp&gt;::_S_full_size&gt;([&amp;](
1459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__i&#32;&lt;&#32;_Np&#32;?&#32;__mem[__i]&#32;:&#32;0);
1461 &#32;&#32;&#32;&#32;&#32;&#32;});
1462 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Up,&#32;_Tp&gt;)
1463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_CommonImpl::template&#32;_S_load&lt;_Tp,&#32;_S_full_size&lt;_Tp&gt;,
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;(__mem);
1465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__bytes_to_load&#32;&lt;=&#32;__max_load_size)
1466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert&lt;_SimdMember&lt;_Tp&gt;&gt;(
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImpl::template&#32;_S_load&lt;_Up,&#32;_Np&gt;(__mem));
1468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__bytes_to_load&#32;%&#32;__max_load_size&#32;==&#32;0)
1469 &#32;&#32;&#32;&#32;&#32;&#32;{
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n_loads&#32;=&#32;__bytes_to_load&#32;/&#32;__max_load_size;
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__elements_per_load&#32;=&#32;_Np&#32;/&#32;__n_loads;
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_n_evaluations&lt;__n_loads&gt;(
1473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__uncvted)&#32;{
1474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert&lt;_SimdMember&lt;_Tp&gt;&gt;(__uncvted...);
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_CommonImpl::template&#32;_S_load&lt;_Up,&#32;__elements_per_load&gt;(
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem&#32;+&#32;__i&#32;*&#32;__elements_per_load);
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1480 &#32;&#32;&#32;&#32;&#32;&#32;}
1481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__bytes_to_load&#32;%&#32;(__max_load_size&#32;/&#32;2)&#32;==&#32;0
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__max_load_size&#32;&gt;&#32;16)
1483 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;e.g.&#32;int[]&#32;-&gt;&#32;&lt;char,&#32;12&gt;&#32;with&#32;AVX2</emphasis>
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n_loads
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__bytes_to_load&#32;/&#32;(__max_load_size&#32;/&#32;2);
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__elements_per_load&#32;=&#32;_Np&#32;/&#32;__n_loads;
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_n_evaluations&lt;__n_loads&gt;(
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__uncvted)&#32;{
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__convert&lt;_SimdMember&lt;_Tp&gt;&gt;(__uncvted...);
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_CommonImpl::template&#32;_S_load&lt;_Up,&#32;__elements_per_load&gt;(
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem&#32;+&#32;__i&#32;*&#32;__elements_per_load);
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1495 &#32;&#32;&#32;&#32;&#32;&#32;}
1496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;e.g.&#32;int[]&#32;-&gt;&#32;&lt;char,&#32;9&gt;</emphasis>
1497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts(
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem,&#32;make_index_sequence&lt;_Np&gt;(),&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__args)&#32;{
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_S_full_size&lt;_Tp&gt;&gt;{
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__args)...};
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1502 &#32;&#32;&#32;&#32;&#32;&#32;}
1503 
1504 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_load&#32;{{{2</emphasis>
1505 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1507 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_load(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__merge,&#32;_MaskMember&lt;_Tp&gt;&#32;__k,
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
1509 &#32;&#32;&#32;&#32;&#32;&#32;{
1510 &#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(_MaskImpl::_S_to_bits(__k),&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1511 &#32;&#32;&#32;&#32;&#32;&#32;__merge._M_set(__i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__mem[__i]));
1512 &#32;&#32;&#32;&#32;});
1513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
1514 &#32;&#32;&#32;&#32;&#32;&#32;}
1515 
1516 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{2</emphasis>
1517 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1518 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1519 &#32;&#32;&#32;&#32;&#32;&#32;_S_store(_SimdMember&lt;_Tp&gt;&#32;__v,&#32;_Up*&#32;__mem,&#32;_TypeTag&lt;_Tp&gt;)&#32;<emphasis role="keyword">noexcept</emphasis>
1520 &#32;&#32;&#32;&#32;&#32;&#32;{
1521 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;converting&#32;int&#32;-&gt;&#32;&quot;smaller&#32;int&quot;&#32;can&#32;be&#32;optimized&#32;with&#32;AVX512</emphasis>
1522 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_S_size&lt;_Tp&gt;;
1523 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__max_store_size
1524 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_SuperImpl::template&#32;_S_max_store_size&lt;_Up&gt;;
1525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;&gt;&#32;8)
1526 &#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_Np&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[__i]&#32;=&#32;__v[__i];
1528 &#32;&#32;&#32;&#32;&#32;&#32;});
1529 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Up,&#32;_Tp&gt;)
1530 &#32;&#32;&#32;&#32;&#32;&#32;_CommonImpl::_S_store(__v,&#32;__mem);
1531 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Np&#32;&lt;=&#32;__max_store_size)
1532 &#32;&#32;&#32;&#32;&#32;&#32;_CommonImpl::_S_store(_SimdWrapper&lt;_Up,&#32;_Np&gt;(__convert&lt;_Up&gt;(__v)),
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem);
1534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1535 &#32;&#32;&#32;&#32;&#32;&#32;{
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__vsize&#32;=&#32;__max_store_size&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up);
1537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;round&#32;up&#32;to&#32;convert&#32;the&#32;last&#32;partial&#32;vector&#32;as&#32;well:</emphasis>
1538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__stores&#32;=&#32;__div_roundup(_Np,&#32;__vsize);
1539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__full_stores&#32;=&#32;_Np&#32;/&#32;__vsize;
1540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_Up,&#32;__vsize&gt;;
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array&lt;_V, __stores&gt;</link>&#32;__converted
1542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__convert_all&lt;_V,&#32;__stores&gt;(__v);
1543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;__full_stores&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImpl::_S_store(__converted[__i],&#32;__mem&#32;+&#32;__i&#32;*&#32;__vsize);
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__full_stores&#32;&lt;&#32;__stores)
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CommonImpl::template&#32;_S_store&lt;(_Np&#32;-&#32;__full_stores&#32;*&#32;__vsize)
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&gt;(
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__converted[__full_stores],&#32;__mem&#32;+&#32;__full_stores&#32;*&#32;__vsize);
1550 &#32;&#32;&#32;&#32;&#32;&#32;}
1551 &#32;&#32;&#32;&#32;&#32;&#32;}
1552 
1553 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store_nocvt&#32;{{{2</emphasis>
1554 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1555 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1556 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store_nocvt(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,&#32;_Tp*&#32;__mem,
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&lt;_Tp&gt;&#32;__k)
1558 &#32;&#32;&#32;&#32;&#32;&#32;{
1559 &#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(
1560 &#32;&#32;&#32;&#32;&#32;&#32;_MaskImpl::_S_to_bits(__k),&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[__i]&#32;=&#32;__v[__i];
1562 &#32;&#32;&#32;&#32;&#32;&#32;});
1563 &#32;&#32;&#32;&#32;&#32;&#32;}
1564 
1565 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store&#32;{{{2</emphasis>
1566 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TW,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_TW&gt;,
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1569 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store(<emphasis role="keyword">const</emphasis>&#32;_TW&#32;__v,&#32;_Up*&#32;__mem,&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&lt;_Tp&gt;&#32;__k)
1570 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
1571 &#32;&#32;&#32;&#32;&#32;&#32;{
1572 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_TV_size&#32;=&#32;_S_size&lt;_Tp&gt;;
1573 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__vi&#32;=&#32;__to_intrin(__v);
1574 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__max_store_size
1575 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_SuperImpl::template&#32;_S_max_store_size&lt;_Up&gt;;
1576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(
1577 &#32;&#32;&#32;&#32;&#32;&#32;is_same_v&lt;
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Up&gt;&#32;||&#32;(is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)))
1580 &#32;&#32;&#32;&#32;&#32;&#32;{
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bitwise&#32;or&#32;no&#32;conversion,&#32;reinterpret:</emphasis>
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&lt;_Up&gt;&#32;__kk&#32;=&#32;[&amp;]()&#32;{
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_bitmask_v&lt;<emphasis role="keyword">decltype</emphasis>(__k)&gt;)
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskMember&lt;_Up&gt;(__k._M_data);
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wrapper_bitcast&lt;__int_for_sizeof_t&lt;_Up&gt;&gt;(__k);
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}();
1588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_masked_store_nocvt(__wrapper_bitcast&lt;_Up&gt;(__v),
1589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem,&#32;__kk);
1590 &#32;&#32;&#32;&#32;&#32;&#32;}
1591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__vectorized_sizeof&lt;_Up&gt;()&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_CommonImpl::
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;__converts_via_decomposition_v&lt;
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;_Up,&#32;__max_store_size&gt;)
1595 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;conversion&#32;via&#32;decomposition&#32;is&#32;better&#32;handled&#32;via&#32;the</emphasis>
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bit_iteration</emphasis>
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback&#32;below</emphasis>
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_UW_size
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::min(_TV_size,&#32;__max_store_size&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up));
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_UW_size&#32;&lt;=&#32;_TV_size);
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UW&#32;=&#32;_SimdWrapper&lt;_Up,&#32;_UW_size&gt;;
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UV&#32;=&#32;__vector_type_t&lt;_Up,&#32;_UW_size&gt;;
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UAbi&#32;=&#32;simd_abi::deduce_t&lt;_Up,&#32;_UW_size&gt;;
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_UW_size&#32;==&#32;_TV_size)&#32;<emphasis role="comment">//&#32;one&#32;convert+store</emphasis>
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_UW&#32;__converted&#32;=&#32;__convert&lt;_UW&gt;(__v);
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_masked_store_nocvt(
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__converted,&#32;__mem,
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UAbi::_MaskImpl::template&#32;_S_convert&lt;
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;(__k));
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_UW_size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;__max_store_size);
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NFullStores&#32;=&#32;_TV_size&#32;/&#32;_UW_size;
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NAllStores
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__div_roundup(_TV_size,&#32;_UW_size);
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NParts&#32;=&#32;_S_full_size&lt;_Tp&gt;&#32;/&#32;_UW_size;
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array&lt;_UV, _NAllStores&gt;</link>&#32;__converted
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__convert_all&lt;_UV,&#32;_NAllStores&gt;(__v);
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_NFullStores&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_masked_store_nocvt(
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UW(__converted[__i]),&#32;__mem&#32;+&#32;__i&#32;*&#32;_UW_size,
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UAbi::_MaskImpl::template&#32;_S_convert&lt;
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;(
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract_part&lt;__i,&#32;_NParts&gt;(__k.__as_full_vector())));
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_NAllStores
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&#32;_NFullStores)&#32;<emphasis role="comment">//&#32;one&#32;partial&#32;at&#32;the&#32;end</emphasis>
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_masked_store_nocvt(
1631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UW(__converted[_NFullStores]),
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem&#32;+&#32;_NFullStores&#32;*&#32;_UW_size,
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UAbi::_MaskImpl::template&#32;_S_convert&lt;
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;(
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract_part&lt;_NFullStores,&#32;_NParts&gt;(
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k.__as_full_vector())));
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1638 &#32;&#32;&#32;&#32;&#32;&#32;}
1639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1640 &#32;&#32;&#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskImpl::_S_to_bits(__k),&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[__i]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up<emphasis role="keyword">&gt;</emphasis>(__v[__i]);
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1644 &#32;&#32;&#32;&#32;&#32;&#32;}
1645 
1646 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_complement&#32;{{{2</emphasis>
1647 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1648 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1649 &#32;&#32;&#32;&#32;&#32;&#32;_S_complement(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1650 &#32;&#32;&#32;&#32;&#32;&#32;{
1651 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
1652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(~__vector_bitcast&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;(__x));
1653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~__x._M_data;
1655 &#32;&#32;&#32;&#32;&#32;&#32;}
1656 
1657 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_unary_minus&#32;{{{2</emphasis>
1658 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1659 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1660 &#32;&#32;&#32;&#32;&#32;&#32;_S_unary_minus(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1661 &#32;&#32;&#32;&#32;&#32;&#32;{
1662 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;GCC&#32;doesn&apos;t&#32;use&#32;the&#32;psign&#32;instructions,&#32;but&#32;pxor&#32;&amp;&#32;psub&#32;seem&#32;to&#32;be</emphasis>
1663 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;just&#32;as&#32;good&#32;a&#32;choice&#32;as&#32;pcmpeqd&#32;&amp;&#32;psign.&#32;So&#32;meh.</emphasis>
1664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-__x._M_data;
1665 &#32;&#32;&#32;&#32;&#32;&#32;}
1666 
1667 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arithmetic&#32;operators&#32;{{{2</emphasis>
1668 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1669 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1670 &#32;&#32;&#32;&#32;&#32;&#32;_S_plus(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1671 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;+&#32;__y._M_data;&#32;}
1672 
1673 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1674 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1675 &#32;&#32;&#32;&#32;&#32;&#32;_S_minus(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1676 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;-&#32;__y._M_data;&#32;}
1677 
1678 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1679 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1680 &#32;&#32;&#32;&#32;&#32;&#32;_S_multiplies(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1681 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;*&#32;__y._M_data;&#32;}
1682 
1683 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1684 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1685 &#32;&#32;&#32;&#32;&#32;&#32;_S_divides(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1686 &#32;&#32;&#32;&#32;&#32;&#32;{
1687 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;division&#32;by&#32;0&#32;is&#32;always&#32;UB,&#32;so&#32;we&#32;must&#32;ensure&#32;we&#32;avoid&#32;the</emphasis>
1688 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;case&#32;for&#32;partial&#32;registers</emphasis>
1689 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_Abi::template&#32;_S_is_partial&lt;_Tp&gt;)
1690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;/&#32;__y._M_data;
1691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;/&#32;_Abi::__make_padding_nonzero(__y._M_data);
1693 &#32;&#32;&#32;&#32;&#32;&#32;}
1694 
1695 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1696 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1697 &#32;&#32;&#32;&#32;&#32;&#32;_S_modulus(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1698 &#32;&#32;&#32;&#32;&#32;&#32;{
1699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_Abi::template&#32;_S_is_partial&lt;_Tp&gt;)
1700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;%&#32;__y._M_data;
1701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__as_vector(__x)
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;%&#32;_Abi::__make_padding_nonzero(__as_vector(__y));
1704 &#32;&#32;&#32;&#32;&#32;&#32;}
1705 
1706 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1707 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1708 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_and(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1709 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and(__x,&#32;__y);&#32;}
1710 
1711 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1712 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1713 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_or(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1714 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(__x,&#32;__y);&#32;}
1715 
1716 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1717 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1718 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_xor(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1719 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__xor(__x,&#32;__y);&#32;}
1720 
1721 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1722 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1723 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_left(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1724 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&lt;&lt;&#32;__y._M_data;&#32;}
1725 
1726 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1727 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1728 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_right(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1729 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&gt;&gt;&#32;__y._M_data;&#32;}
1730 
1731 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1732 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1733 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_left(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
1734 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&lt;&lt;&#32;__y;&#32;}
1735 
1736 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1737 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1738 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_right(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
1739 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&gt;&gt;&#32;__y;&#32;}
1740 
1741 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compares&#32;{{{2</emphasis>
1742 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_equal_to&#32;{{{3</emphasis>
1743 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1744 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
1745 &#32;&#32;&#32;&#32;&#32;&#32;_S_equal_to(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1746 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;==&#32;__y._M_data;&#32;}
1747 
1748 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_not_equal_to&#32;{{{3</emphasis>
1749 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1750 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
1751 &#32;&#32;&#32;&#32;&#32;&#32;_S_not_equal_to(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1752 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;!=&#32;__y._M_data;&#32;}
1753 
1754 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_less&#32;{{{3</emphasis>
1755 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1756 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
1757 &#32;&#32;&#32;&#32;&#32;&#32;_S_less(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1758 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&lt;&#32;__y._M_data;&#32;}
1759 
1760 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_less_equal&#32;{{{3</emphasis>
1761 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1762 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
1763 &#32;&#32;&#32;&#32;&#32;&#32;_S_less_equal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
1764 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&lt;=&#32;__y._M_data;&#32;}
1765 
1766 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_negate&#32;{{{2</emphasis>
1767 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1768 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
1769 &#32;&#32;&#32;&#32;&#32;&#32;_S_negate(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1770 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__x._M_data;&#32;}
1771 
1772 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_min,&#32;_S_max,&#32;_S_minmax&#32;{{{2</emphasis>
1773 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1774 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_NORMAL_MATH&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>
1775 &#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1776 &#32;&#32;&#32;&#32;&#32;&#32;_S_min(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__a,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__b)
1777 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_data&#32;&lt;&#32;__b._M_data&#32;?&#32;__a._M_data&#32;:&#32;__b._M_data;&#32;}
1778 
1779 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1780 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_NORMAL_MATH&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>
1781 &#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
1782 &#32;&#32;&#32;&#32;&#32;&#32;_S_max(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__a,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__b)
1783 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_data&#32;&gt;&#32;__b._M_data&#32;?&#32;__a._M_data&#32;:&#32;__b._M_data;&#32;}
1784 
1785 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1786 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_NORMAL_MATH&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>
1787 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;_SimdWrapper&lt;_Tp,&#32;_Np&gt;,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&gt;
1788 &#32;&#32;&#32;&#32;&#32;&#32;_S_minmax(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__a,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__b)
1789 &#32;&#32;&#32;&#32;&#32;&#32;{
1790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__a._M_data&#32;&lt;&#32;__b._M_data&#32;?&#32;__a._M_data&#32;:&#32;__b._M_data,
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a._M_data&#32;&lt;&#32;__b._M_data&#32;?&#32;__b._M_data&#32;:&#32;__a._M_data};
1792 &#32;&#32;&#32;&#32;&#32;&#32;}
1793 
1794 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reductions&#32;{{{2</emphasis>
1795 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Is,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Zeros,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
1797 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp
1798 &#32;&#32;&#32;&#32;&#32;&#32;_S_reduce_partial(index_sequence&lt;_Is...&gt;,&#32;index_sequence&lt;_Zeros...&gt;,
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Abi&gt;&#32;__x,&#32;_BinaryOperation&amp;&amp;&#32;__binary_op)
1800 &#32;&#32;&#32;&#32;&#32;&#32;{
1801 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&#32;/&#32;2&gt;;
1802 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_V)&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(__x));
1803 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_full_size&#32;is&#32;the&#32;size&#32;of&#32;the&#32;smallest&#32;native&#32;SIMD&#32;register&#32;that</emphasis>
1804 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;store&#32;_Np/2&#32;elements:</emphasis>
1805 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FullSimd&#32;=&#32;__deduced_simd&lt;_Tp,&#32;_VectorTraits&lt;_V&gt;::_S_full_size&gt;;
1806 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_HalfSimd&#32;=&#32;__deduced_simd&lt;_Tp,&#32;_Np&#32;/&#32;2&gt;;
1807 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xx&#32;=&#32;__as_vector(__x);
1808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_HalfSimd::abi_type::_SimdImpl::_S_reduce(
1809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_HalfSimd<emphasis role="keyword">&gt;</emphasis>(__as_vector(__binary_op(
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_FullSimd<emphasis role="keyword">&gt;</emphasis>(__intrin_bitcast&lt;_V&gt;(__xx)),
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_FullSimd<emphasis role="keyword">&gt;</emphasis>(__intrin_bitcast&lt;_V&gt;(
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;(_Np&#32;/&#32;2&#32;+&#32;_Is)...,&#32;(<emphasis role="keywordtype">int</emphasis>(_Zeros&#32;*&#32;0)&#32;-&#32;1)...&gt;(
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xx)))))),
1814 &#32;&#32;&#32;&#32;&#32;&#32;__binary_op);
1815 &#32;&#32;&#32;&#32;&#32;&#32;}
1816 
1817 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
1818 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
1819 &#32;&#32;&#32;&#32;&#32;&#32;_S_reduce(simd&lt;_Tp,&#32;_Abi&gt;&#32;__x,&#32;_BinaryOperation&amp;&amp;&#32;__binary_op)
1820 &#32;&#32;&#32;&#32;&#32;&#32;{
1821 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
1822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0];
1824 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;2)
1825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op(simd&lt;_Tp,&#32;simd_abi::scalar&gt;(__x[0]),
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;(__x[1]))[0];
1827 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Abi::template&#32;_S_is_partial&lt;_Tp&gt;)&#32;<emphasis role="comment">//{{{</emphasis>
1828 &#32;&#32;&#32;&#32;&#32;&#32;{
1829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__full_size
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_S_full_size&lt;_Tp&gt;;
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;3)
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op(
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op(simd&lt;_Tp,&#32;simd_abi::scalar&gt;(__x[0]),
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;(__x[1])),
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;(__x[2]))[0];
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;__remove_cvref_t&lt;_BinaryOperation&gt;,
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;plus&lt;&gt;&gt;)
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ap&#32;=&#32;simd_abi::deduce_t&lt;_Tp,&#32;__full_size&gt;;
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ap::_SimdImpl::_S_reduce(
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Ap&gt;(__private_init,
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::_S_masked(__as_vector(__x))),
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op);
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;__remove_cvref_t&lt;_BinaryOperation&gt;,
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;multiplies&lt;&gt;&gt;)
1847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ap&#32;=&#32;simd_abi::deduce_t&lt;_Tp,&#32;__full_size&gt;;
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TW&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;__full_size&gt;;
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__implicit_mask_full
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;().__as_full_vector();
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_TW&#32;__one
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_broadcast&lt;__full_size&gt;(_Tp(1));
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TW&#32;__x_full&#32;=&#32;__data(__x).__as_full_vector();
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TW&#32;__x_padded_with_ones
1856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Ap::_CommonImpl::_S_blend(__implicit_mask_full,&#32;__one,
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x_full);
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ap::_SimdImpl::_S_reduce(
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Ap&gt;(__private_init,&#32;__x_padded_with_ones),
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op);
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&amp;&#32;1)
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ap&#32;=&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Np&#32;-&#32;1&gt;;
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op(
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;(_Ap::_SimdImpl::_S_reduce(
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Ap&gt;(
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__intrin_bitcast&lt;__vector_type_t&lt;_Tp,&#32;_Np&#32;-&#32;1&gt;&gt;(
1869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__as_vector(__x))),
1870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op)),
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;(__x[_Np&#32;-&#32;1]))[0];
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_reduce_partial&lt;_Np&gt;(
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_Np&#32;/&#32;2&gt;(),
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;__full_size&#32;-&#32;_Np&#32;/&#32;2&gt;(),&#32;__x,&#32;__binary_op);
1877 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}}}</emphasis>
1878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;16)&#32;<emphasis role="comment">//{{{</emphasis>
1879 &#32;&#32;&#32;&#32;&#32;&#32;{
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;16)
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__data(__x);
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;0,&#32;0,&#32;1,&#32;1,&#32;2,&#32;2,&#32;3,&#32;3,&#32;4,&#32;4,&#32;5,&#32;5,&#32;6,&#32;6,
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;7&gt;(__y)),
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;8,&#32;8,&#32;9,&#32;9,&#32;10,&#32;10,&#32;11,&#32;11,&#32;12,&#32;12,&#32;13,&#32;13,
1889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;14,&#32;14,&#32;15,&#32;15&gt;(__y)));
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;=&#32;8)
1892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;short&gt;(__data(__x));
1894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(
1895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(__vector_bitcast&lt;_Tp&gt;(
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;0,&#32;0,&#32;1,&#32;1,&#32;2,&#32;2,&#32;3,&#32;3&gt;(__y))),
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(__vector_bitcast&lt;_Tp&gt;(
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;4,&#32;4,&#32;5,&#32;5,&#32;6,&#32;6,&#32;7,&#32;7&gt;(__y))));
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;&gt;=&#32;4)
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;conditional_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;float,&#32;<emphasis role="keywordtype">int</emphasis>&gt;;
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__data(__x));
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(__x,
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(__vector_bitcast&lt;_Tp&gt;(
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;3,&#32;2,&#32;1,&#32;0&gt;(__y))));
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;conditional_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;double,&#32;_LLong&gt;;
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__data(__x));
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__binary_op(__x,&#32;_M_make_simd&lt;_Tp,&#32;_Np&gt;(__vector_bitcast&lt;_Tp&gt;(
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_permute&lt;1,&#32;1&gt;(__y))));
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0];
1913 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//}}}</emphasis>
1914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1915 &#32;&#32;&#32;&#32;&#32;&#32;{
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;&#32;__min_vector_size&lt;_Tp&gt;);
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((_Np&#32;&amp;&#32;(_Np&#32;-&#32;1))&#32;==&#32;0);&#32;<emphasis role="comment">//&#32;_Np&#32;must&#32;be&#32;a&#32;power&#32;of&#32;2</emphasis>
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ap&#32;=&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Np&#32;/&#32;2&gt;;
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;simd&lt;_Tp,&#32;_Ap&gt;;
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ap::_SimdImpl::_S_reduce(
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op(_V(__private_init,&#32;__extract&lt;0,&#32;2&gt;(__as_vector(__x))),
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V(__private_init,
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract&lt;1,&#32;2&gt;(__as_vector(__x)))),
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_BinaryOperation&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__binary_op));
1925 &#32;&#32;&#32;&#32;&#32;&#32;}
1926 &#32;&#32;&#32;&#32;&#32;&#32;}
1927 
1928 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;math&#32;{{{2</emphasis>
1929 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;frexp,&#32;modf&#32;and&#32;copysign&#32;implemented&#32;in&#32;simd_math.h</emphasis>
1930 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_MATH_FALLBACK(__name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1931 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;typename...&#32;_More&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1932 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;static&#32;_Tp&#32;_S_##__name(const&#32;_Tp&amp;&#32;__x,&#32;const&#32;_More&amp;...&#32;__more)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1933 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1934 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;__generate_vector&lt;_Tp&gt;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1935 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](auto&#32;__i)&#32;{&#32;return&#32;__name(__x[__i],&#32;__more[__i]...);&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1936 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1937 
1938 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_MATH_FALLBACK_MASKRET(__name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1939 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;typename...&#32;_More&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1940 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;static&#32;typename&#32;_Tp::mask_type&#32;_S_##__name(const&#32;_Tp&amp;&#32;__x,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1941 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_More&amp;...&#32;__more)&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1942 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1943 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;__generate_vector&lt;_Tp&gt;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1944 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](auto&#32;__i)&#32;{&#32;return&#32;__name(__x[__i],&#32;__more[__i]...);&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1945 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1946 
1947 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_MATH_FALLBACK_FIXEDRET(_RetTp,&#32;__name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1948 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;typename...&#32;_More&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1949 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;static&#32;auto&#32;_S_##__name(const&#32;_Tp&amp;&#32;__x,&#32;const&#32;_More&amp;...&#32;__more)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1950 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1951 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;__fixed_size_storage_t&lt;_RetTp,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1952 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VectorTraits&lt;_Tp&gt;::_S_partial_width&gt;::&#32;&#32;\</emphasis>
1953 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_S_generate([&amp;](auto&#32;__meta)&#32;constexpr&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1954 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__meta._S_generator(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1955 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](auto&#32;__i)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1956 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__name(__x[__meta._S_offset&#32;+&#32;__i],&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1957 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__more[__meta._S_offset&#32;+&#32;__i]...);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1958 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1959 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;_RetTp*&gt;(nullptr));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1960 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1961 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1962 
1963 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a6826a8b8db695e1c1cddea666254e56f">acos</link>)
1964 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1aa2375efebaed504113d91f1822bafa38">asin</link>)
1965 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>)
1966 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a525d483aa59186e25ad8a1b5b8428536">atan2</link>)
1967 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>)
1968 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>)
1969 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a58fbdc949853bd2d1f0a8dbf9f89fe32">tan</link>)
1970 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a9f39bf49b902489c4e2a12973645c325">acosh</link>)
1971 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a043f706d7beb6980b1b5ca2bcb665475">asinh</link>)
1972 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4cc4b9783a42af3a24583515a7ac0c1d">atanh</link>)
1973 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1ac2ac5e2dccf59bf3393c5e24b168f3c6">cosh</link>)
1974 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a2579de64a076b1183bbf48cbed658d12">sinh</link>)
1975 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4a926ffaf78a83aca2ae45be46fa7571">tanh</link>)
1976 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>)
1977 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a81df8f8ac36a83137eb6e6451c55f1ab">exp2</link>)
1978 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1aaefafe3f57183bef8acd2b49c680ea12">expm1</link>)
1979 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1ac39e838c245bd16537685b14924d7a6d">ldexp</link>)
1980 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK_FIXEDRET(<emphasis role="keywordtype">int</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a56d9ee07e4d286eb2faac2e2336a0dce">ilogb</link>)
1981 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>)
1982 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1af26c25cec2b892904654e4068b199882">log10</link>)
1983 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1aef0f23babcbccbb1e66cd549a64f72c9">log1p</link>)
1984 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a18af743c2cec4baeee9ffb27999ddaad">log2</link>)
1985 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a438bad4f46b608b173f382b5bc36edae">logb</link>)
1986 
1987 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modf&#32;implemented&#32;in&#32;simd_math.h</emphasis>
1988 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1ab9cb73896372f1d851b1dd69abed17ae">scalbn</link>)
1989 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a17d09c2fa2ec2c6ae91caf76e5d0a8c9">scalbln</link>)
1990 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1ab95ebf7d48afa4fe99e6f59163a6ddbb">cbrt</link>)
1991 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>)
1992 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>)
1993 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>)
1994 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a4165b919297d605e13a90107432f82bc">erf</link>)
1995 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a6055417e172fa9376e96426c8fb4ffbb">erfc</link>)
1996 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1abb805ac761f948a92378a8e615f381a4">lgamma</link>)
1997 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1ade3a678daf949cf694c82981b5359c6c">tgamma</link>)
1998 
1999 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK_FIXEDRET(<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a14657bf794350193b021ea8a968129b6">lrint</link>)
2000 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK_FIXEDRET(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a220c7fd7006446ff6f373833bdc847ba">llrint</link>)
2001 
2002 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK_FIXEDRET(<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a9e8c2b3b0cb90c46e6a5ac345322282c">lround</link>)
2003 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK_FIXEDRET(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af7f976f7b98d000fef56b6be1550b31b">llround</link>)
2004 
2005 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a2947d0248e7d12258dba930ed0a52678">fmod</link>)
2006 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a6580b4a83cd7c960cda8c6ce1df26871">remainder</link>)
2007 
2008 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp
2010 &#32;&#32;&#32;&#32;&#32;&#32;_S_remquo(<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__y,
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fixed_size_storage_t&lt;int,&#32;_TVT::_S_partial_width&gt;*&#32;__z)
2012 &#32;&#32;&#32;&#32;&#32;&#32;{
2013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector&lt;_Tp&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
2014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
2015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af26447dd9f60e7a68d2a35895efb1c56">remquo</link>(__x[__i],&#32;__y[__i],&#32;&amp;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2016 &#32;&#32;&#32;&#32;&#32;&#32;__z-&gt;_M_set(__i,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2017 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2018 &#32;&#32;&#32;&#32;});
2019 &#32;&#32;&#32;&#32;&#32;&#32;}
2020 
2021 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copysign&#32;in&#32;simd_math.h</emphasis>
2022 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a1b027edfeb81f764c9e07df1452652a8">nextafter</link>)
2023 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a7ef36eaba7ad1b1fbd09698d7c7befa8">fdim</link>)
2024 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a1c3600f02664f2255b85d9d85d3cf418">fmax</link>)
2025 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a731ba685a68fdea7f9545398055e8bb7">fmin</link>)
2026 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_MATH_FALLBACK(<link linkend="__classes_2lib_2include_2tgmath_8h_1a601e3e26bceb442ef97674f161dee8f3">fma</link>)
2027 
2028 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2030 &#32;&#32;&#32;&#32;&#32;&#32;_S_isgreater(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
2032 &#32;&#32;&#32;&#32;&#32;&#32;{
2033 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2034 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__x);
2035 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__y);
2036 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__xn;
2037 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__yn;
2038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__andnot(_SuperImpl::_S_isunordered(__x,&#32;__y)._M_data,
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xp&#32;&gt;&#32;__yp);
2040 &#32;&#32;&#32;&#32;&#32;&#32;}
2041 
2042 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2044 &#32;&#32;&#32;&#32;&#32;&#32;_S_isgreaterequal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
2045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
2046 &#32;&#32;&#32;&#32;&#32;&#32;{
2047 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2048 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__x);
2049 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__y);
2050 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__xn;
2051 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__yn;
2052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__andnot(_SuperImpl::_S_isunordered(__x,&#32;__y)._M_data,
2053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xp&#32;&gt;=&#32;__yp);
2054 &#32;&#32;&#32;&#32;&#32;&#32;}
2055 
2056 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2058 &#32;&#32;&#32;&#32;&#32;&#32;_S_isless(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
2059 &#32;&#32;&#32;&#32;&#32;&#32;{
2060 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2061 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__x);
2062 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__y);
2063 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__xn;
2064 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__yn;
2065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__andnot(_SuperImpl::_S_isunordered(__x,&#32;__y)._M_data,
2066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xp&#32;&lt;&#32;__yp);
2067 &#32;&#32;&#32;&#32;&#32;&#32;}
2068 
2069 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2071 &#32;&#32;&#32;&#32;&#32;&#32;_S_islessequal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
2072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
2073 &#32;&#32;&#32;&#32;&#32;&#32;{
2074 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2075 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__x);
2076 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__y);
2077 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xp&#32;=&#32;__xn&#32;&lt;&#32;0&#32;?&#32;-(__xn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__xn;
2078 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yp&#32;=&#32;__yn&#32;&lt;&#32;0&#32;?&#32;-(__yn&#32;&amp;&#32;__finite_max_v&lt;_Ip&gt;)&#32;:&#32;__yn;
2079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__andnot(_SuperImpl::_S_isunordered(__x,&#32;__y)._M_data,
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__xp&#32;&lt;=&#32;__yp);
2081 &#32;&#32;&#32;&#32;&#32;&#32;}
2082 
2083 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2085 &#32;&#32;&#32;&#32;&#32;&#32;_S_islessgreater(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
2087 &#32;&#32;&#32;&#32;&#32;&#32;{
2088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__andnot(_SuperImpl::_S_isunordered(__x,&#32;__y),
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_not_equal_to(__x,&#32;__y));
2090 &#32;&#32;&#32;&#32;&#32;&#32;}
2091 
2092 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_MATH_FALLBACK</emphasis>
2093 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_MATH_FALLBACK_MASKRET</emphasis>
2094 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_MATH_FALLBACK_FIXEDRET</emphasis>
2095 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_abs&#32;{{{3</emphasis>
2096 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2097 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2098 &#32;&#32;&#32;&#32;_S_abs(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
2099 &#32;&#32;&#32;&#32;{
2100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;(__builtin_is_constant_evaluated())</emphasis>
2101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;{</emphasis>
2102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;return&#32;__x._M_data&#32;&lt;&#32;0&#32;?&#32;-__x._M_data&#32;:&#32;__x._M_data;</emphasis>
2103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;}</emphasis>
2104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
2105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;`v&#32;&lt;&#32;0&#32;?&#32;-v&#32;:&#32;v`&#32;cannot&#32;compile&#32;to&#32;the&#32;efficient&#32;implementation&#32;of</emphasis>
2106 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;masking&#32;the&#32;signbit&#32;off&#32;because&#32;it&#32;must&#32;consider&#32;v&#32;==&#32;-0</emphasis>
2107 
2108 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;~(-0.)&#32;&amp;&#32;v&#32;would&#32;be&#32;easy,&#32;but&#32;breaks&#32;with&#32;fno-signed-zeros</emphasis>
2109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and(_S_absmask&lt;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;,&#32;__x._M_data);
2110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data&#32;&lt;&#32;0&#32;?&#32;-__x._M_data&#32;:&#32;__x._M_data;
2112 &#32;&#32;&#32;&#32;}
2113 
2114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}3</emphasis>
2115 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_plus_minus&#32;{{{</emphasis>
2116 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;__x&#32;+&#32;__y&#32;-&#32;__y&#32;without&#32;-fassociative-math&#32;optimizing&#32;to&#32;__x.</emphasis>
2117 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;_TV&#32;must&#32;be&#32;__vector_type_t&lt;floating-point&#32;type,&#32;N&gt;.</emphasis>
2118 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;_UV&#32;must&#32;be&#32;_TV&#32;or&#32;floating-point&#32;type.</emphasis>
2119 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TV,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UV&gt;
2120 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_TV&#32;_S_plus_minus(_TV&#32;__x,
2121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UV&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
2122 &#32;&#32;&#32;&#32;{
2123 <emphasis role="preprocessor">&#32;&#32;#if&#32;defined&#32;__i386__&#32;&amp;&amp;&#32;!defined&#32;__SSE_MATH__</emphasis>
2124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;8)
2125 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;operations&#32;on&#32;__x&#32;would&#32;use&#32;the&#32;FPU</emphasis>
2126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_TV,&#32;__vector_type_t&lt;float,&#32;2&gt;&gt;);
2127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x4&#32;=&#32;__vector_bitcast&lt;float,&#32;4&gt;(__x);
2128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_TV,&#32;_UV&gt;)
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;float,&#32;2&gt;(
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_plus_minus(__x4,&#32;__vector_bitcast&lt;float,&#32;4&gt;(__y)));
2131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;float,&#32;2&gt;(_S_plus_minus(__x4,&#32;__y));
2133 &#32;&#32;&#32;&#32;}
2134 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2135 <emphasis role="preprocessor">&#32;&#32;#if&#32;!defined&#32;__clang__&#32;&amp;&amp;&#32;__GCC_IEC_559&#32;==&#32;0</emphasis>
2136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()
2137 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__builtin_constant_p(__x)&#32;&amp;&amp;&#32;__builtin_constant_p(__y)))
2138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x&#32;+&#32;__y)&#32;-&#32;__y;
2139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[&amp;]&#32;{
2141 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;+=&#32;__y;
2142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>(__have_sse)
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&gt;=&#32;16)
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;+x&quot;</emphasis>(__x));
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;__vector_type_t&lt;float,&#32;2&gt;,&#32;_TV&gt;)
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;+x&quot;</emphasis>(__x[0]),&#32;<emphasis role="stringliteral">&quot;+x&quot;</emphasis>(__x[1]));
2148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_TV&gt;();
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>(__have_neon)
2152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;+w&quot;</emphasis>(__x));
2153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_power_vmx)
2154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;__vector_type_t&lt;float,&#32;2&gt;,&#32;_TV&gt;)
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;+fgr&quot;</emphasis>(__x[0]),&#32;<emphasis role="stringliteral">&quot;+fgr&quot;</emphasis>(__x[1]));
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;+v&quot;</emphasis>(__x));
2159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">asm</emphasis>(<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;+g&quot;</emphasis>(__x));
2162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;-&#32;__y;
2163 &#32;&#32;&#32;&#32;}();
2164 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
2165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__x&#32;+&#32;__y)&#32;-&#32;__y;
2166 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2167 &#32;&#32;&#32;&#32;}
2168 
2169 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2170 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_nearbyint&#32;{{{3</emphasis>
2171 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2172 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_nearbyint(_Tp&#32;__x_)&#32;<emphasis role="keyword">noexcept</emphasis>
2173 &#32;&#32;&#32;&#32;{
2174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
2175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::type;
2176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__x&#32;=&#32;__x_;
2177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__absx&#32;=&#32;__and(__x,&#32;_S_absmask&lt;_V&gt;);
2178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(1ull)&#32;&gt;=&#32;__digits_v&lt;value_type&gt;);
2179 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_V&#32;__shifter_abs
2180 &#32;&#32;&#32;&#32;=&#32;_V()&#32;+&#32;(1ull&#32;&lt;&lt;&#32;(__digits_v&lt;value_type&gt;&#32;-&#32;1));
2181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__shifter&#32;=&#32;__or(__and(_S_signmask&lt;_V&gt;,&#32;__x),&#32;__shifter_abs);
2182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__shifted&#32;=&#32;_S_plus_minus(__x,&#32;__shifter);
2183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__absx&#32;&lt;&#32;__shifter_abs&#32;?&#32;__shifted&#32;:&#32;__x;
2184 &#32;&#32;&#32;&#32;}
2185 
2186 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_rint&#32;{{{3</emphasis>
2187 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2188 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;_S_rint(_Tp&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
2189 &#32;&#32;&#32;&#32;{
2190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SuperImpl::_S_nearbyint(__x);
2191 &#32;&#32;&#32;&#32;}
2192 
2193 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_trunc&#32;{{{3</emphasis>
2194 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2195 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2196 &#32;&#32;&#32;&#32;_S_trunc(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2197 &#32;&#32;&#32;&#32;{
2198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;;
2199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_V&#32;__absx&#32;=&#32;__and(__x._M_data,&#32;_S_absmask&lt;_V&gt;);
2200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(1ull)&#32;&gt;=&#32;__digits_v&lt;_Tp&gt;);
2201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__shifter&#32;=&#32;1ull&#32;&lt;&lt;&#32;(__digits_v&lt;_Tp&gt;&#32;-&#32;1);
2202 &#32;&#32;&#32;&#32;&#32;&#32;_V&#32;__truncated&#32;=&#32;_S_plus_minus(__absx,&#32;__shifter);
2203 &#32;&#32;&#32;&#32;&#32;&#32;__truncated&#32;-=&#32;__truncated&#32;&gt;&#32;__absx&#32;?&#32;_V()&#32;+&#32;1&#32;:&#32;_V();
2204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__absx&#32;&lt;&#32;__shifter&#32;?&#32;__or(__xor(__absx,&#32;__x._M_data),&#32;__truncated)
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__x._M_data;
2206 &#32;&#32;&#32;&#32;}
2207 
2208 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_round&#32;{{{3</emphasis>
2209 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2210 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2211 &#32;&#32;&#32;&#32;_S_round(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2212 &#32;&#32;&#32;&#32;{
2213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__abs_x&#32;=&#32;_SuperImpl::_S_abs(__x);
2214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__t_abs&#32;=&#32;_SuperImpl::_S_trunc(__abs_x)._M_data;
2215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r_abs&#32;<emphasis role="comment">//&#32;round(abs(x))&#32;=</emphasis>
2216 &#32;&#32;&#32;&#32;=&#32;__t_abs&#32;+&#32;(__abs_x._M_data&#32;-&#32;__t_abs&#32;&gt;=&#32;_Tp(.5)&#32;?&#32;_Tp(1)&#32;:&#32;0);
2217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(__xor(__abs_x._M_data,&#32;__x._M_data),&#32;__r_abs);
2218 &#32;&#32;&#32;&#32;}
2219 
2220 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_floor&#32;{{{3</emphasis>
2221 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2222 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2223 &#32;&#32;&#32;&#32;_S_floor(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2224 &#32;&#32;&#32;&#32;{
2225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;_SuperImpl::_S_trunc(__x)._M_data;
2226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__negative_input
2227 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Tp&gt;(__x._M_data&#32;&lt;&#32;__vector_broadcast&lt;_Np,&#32;_Tp&gt;(0));
2228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask
2229 &#32;&#32;&#32;&#32;=&#32;__andnot(__vector_bitcast&lt;_Tp&gt;(__y&#32;==&#32;__x._M_data),&#32;__negative_input);
2230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(__andnot(__mask,&#32;__y),
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and(__mask,&#32;__y&#32;-&#32;__vector_broadcast&lt;_Np,&#32;_Tp&gt;(1)));
2232 &#32;&#32;&#32;&#32;}
2233 
2234 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_ceil&#32;{{{3</emphasis>
2235 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2236 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2237 &#32;&#32;&#32;&#32;_S_ceil(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2238 &#32;&#32;&#32;&#32;{
2239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;_SuperImpl::_S_trunc(__x)._M_data;
2240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__negative_input
2241 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Tp&gt;(__x._M_data&#32;&lt;&#32;__vector_broadcast&lt;_Np,&#32;_Tp&gt;(0));
2242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__inv_mask
2243 &#32;&#32;&#32;&#32;=&#32;__or(__vector_bitcast&lt;_Tp&gt;(__y&#32;==&#32;__x._M_data),&#32;__negative_input);
2244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(__and(__inv_mask,&#32;__y),
2245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__andnot(__inv_mask,&#32;__y&#32;+&#32;__vector_broadcast&lt;_Np,&#32;_Tp&gt;(1)));
2246 &#32;&#32;&#32;&#32;}
2247 
2248 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isnan&#32;{{{3</emphasis>
2249 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2250 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2251 &#32;&#32;&#32;&#32;_S_isnan([[maybe_unused]]&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2252 &#32;&#32;&#32;&#32;{
2253 <emphasis role="preprocessor">&#32;&#32;#if&#32;__FINITE_MATH_ONLY__</emphasis>
2254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;<emphasis role="comment">//&#32;false</emphasis>
2255 <emphasis role="preprocessor">&#32;&#32;#elif&#32;!defined&#32;__SUPPORT_SNAN__</emphasis>
2256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~(__x._M_data&#32;==&#32;__x._M_data);
2257 <emphasis role="preprocessor">&#32;&#32;#elif&#32;defined&#32;__STDC_IEC_559__</emphasis>
2258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__absn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(_SuperImpl::_S_abs(__x));
2260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__infn
2261 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__vector_broadcast&lt;_Np&gt;(__infinity_v&lt;_Tp&gt;));
2262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__infn&#32;&lt;&#32;__absn;
2263 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
2264 <emphasis role="preprocessor">&#32;&#32;#error&#32;&quot;Not&#32;implemented:&#32;how&#32;to&#32;support&#32;SNaN&#32;but&#32;non-IEC559&#32;floating-point?&quot;</emphasis>
2265 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2266 &#32;&#32;&#32;&#32;}
2267 
2268 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isfinite&#32;{{{3</emphasis>
2269 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2270 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2271 &#32;&#32;&#32;&#32;_S_isfinite([[maybe_unused]]&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2272 &#32;&#32;&#32;&#32;{
2273 <emphasis role="preprocessor">&#32;&#32;#if&#32;__FINITE_MATH_ONLY__</emphasis>
2274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UV&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_MaskMember&lt;_Tp&gt;::_BuiltinType;
2275 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;_UV&#32;__alltrue&#32;=&#32;~_UV();
2276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__alltrue;
2277 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
2278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;all&#32;exponent&#32;bits&#32;are&#32;set,&#32;__x&#32;is&#32;either&#32;inf&#32;or&#32;NaN</emphasis>
2279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__absn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(_SuperImpl::_S_abs(__x));
2281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__maxn
2282 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__vector_broadcast&lt;_Np&gt;(__finite_max_v&lt;_Tp&gt;));
2283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__absn&#32;&lt;=&#32;__maxn;
2284 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2285 &#32;&#32;&#32;&#32;}
2286 
2287 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isunordered&#32;{{{3</emphasis>
2288 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2289 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2290 &#32;&#32;&#32;&#32;_S_isunordered(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__y)
2291 &#32;&#32;&#32;&#32;{
2292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(_S_isnan(__x),&#32;_S_isnan(__y));
2293 &#32;&#32;&#32;&#32;}
2294 
2295 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_signbit&#32;{{{3</emphasis>
2296 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2297 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2298 &#32;&#32;&#32;&#32;_S_signbit(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2299 &#32;&#32;&#32;&#32;{
2300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Ip&gt;(__x)&#32;&lt;&#32;0;
2302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Arithmetic&#32;right&#32;shift&#32;(SRA)&#32;would&#32;also&#32;work&#32;(instead&#32;of&#32;compare),&#32;but</emphasis>
2303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;64-bit&#32;SRA&#32;isn&apos;t&#32;available&#32;on&#32;x86&#32;before&#32;AVX512.&#32;And&#32;in&#32;general,</emphasis>
2304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compares&#32;are&#32;more&#32;likely&#32;to&#32;be&#32;efficient&#32;than&#32;SRA.</emphasis>
2305 &#32;&#32;&#32;&#32;}
2306 
2307 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isinf&#32;{{{3</emphasis>
2308 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2309 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2310 &#32;&#32;&#32;&#32;_S_isinf([[maybe_unused]]&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2311 &#32;&#32;&#32;&#32;{
2312 <emphasis role="preprocessor">&#32;&#32;#if&#32;__FINITE_MATH_ONLY__</emphasis>
2313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;<emphasis role="comment">//&#32;false</emphasis>
2314 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
2315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SuperImpl::template&#32;_S_equal_to&lt;_Tp,&#32;_Np&gt;(_SuperImpl::_S_abs(__x),
2316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_broadcast&lt;_Np&gt;(
2317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__infinity_v&lt;_Tp&gt;));
2318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;alternative:</emphasis>
2319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compare&#32;to&#32;inf&#32;using&#32;the&#32;corresponding&#32;integer&#32;type</emphasis>
2320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
2321 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;return</emphasis>
2322 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;_Tp&gt;(__vector_bitcast&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;(</emphasis>
2323 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_abs(__x)._M_data)</emphasis>
2324 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;==</emphasis>
2325 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;(__vector_broadcast&lt;_Np&gt;(</emphasis>
2326 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;__infinity_v&lt;_Tp&gt;)));</emphasis>
2327 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
2328 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2329 &#32;&#32;&#32;&#32;}
2330 
2331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_isnormal&#32;{{{3</emphasis>
2332 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2333 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2334 &#32;&#32;&#32;&#32;_S_isnormal(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2335 &#32;&#32;&#32;&#32;{
2336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__absn&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(_SuperImpl::_S_abs(__x));
2338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__minn
2339 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__vector_broadcast&lt;_Np&gt;(__norm_min_v&lt;_Tp&gt;));
2340 <emphasis role="preprocessor">&#32;&#32;#if&#32;__FINITE_MATH_ONLY__</emphasis>
2341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__absn&#32;&gt;=&#32;__minn;
2342 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
2343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__maxn
2344 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(__vector_broadcast&lt;_Np&gt;(__finite_max_v&lt;_Tp&gt;));
2345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__minn&#32;&lt;=&#32;__absn&#32;&amp;&amp;&#32;__absn&#32;&lt;=&#32;__maxn;
2346 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2347 &#32;&#32;&#32;&#32;}
2348 
2349 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_fpclassify&#32;{{{3</emphasis>
2350 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2351 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;__fixed_size_storage_t&lt;int,&#32;_Np&gt;
2352 &#32;&#32;&#32;&#32;_S_fpclassify(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2353 &#32;&#32;&#32;&#32;{
2354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xn
2356 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_I&gt;(__to_intrin(_SuperImpl::_S_abs(__x)));
2357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NI&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(__xn)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_I);
2358 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__minn
2359 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_I&gt;(__vector_broadcast&lt;_NI&gt;(__norm_min_v&lt;_Tp&gt;));
2360 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__infn
2361 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_I&gt;(__vector_broadcast&lt;_NI&gt;(__infinity_v&lt;_Tp&gt;));
2362 
2363 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__fp_normal
2364 &#32;&#32;&#32;&#32;=&#32;__vector_broadcast&lt;_NI,&#32;_I&gt;(FP_NORMAL);
2365 <emphasis role="preprocessor">&#32;&#32;#if&#32;!__FINITE_MATH_ONLY__</emphasis>
2366 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__fp_nan
2367 &#32;&#32;&#32;&#32;=&#32;__vector_broadcast&lt;_NI,&#32;_I&gt;(FP_NAN);
2368 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__fp_infinite
2369 &#32;&#32;&#32;&#32;=&#32;__vector_broadcast&lt;_NI,&#32;_I&gt;(FP_INFINITE);
2370 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2371 <emphasis role="preprocessor">&#32;&#32;#ifndef&#32;__FAST_MATH__</emphasis>
2372 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__fp_subnormal
2373 &#32;&#32;&#32;&#32;=&#32;__vector_broadcast&lt;_NI,&#32;_I&gt;(FP_SUBNORMAL);
2374 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2375 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>&#32;__fp_zero
2376 &#32;&#32;&#32;&#32;=&#32;__vector_broadcast&lt;_NI,&#32;_I&gt;(FP_ZERO);
2377 
2378 &#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_I,&#32;_NI&gt;
2379 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__xn&#32;&lt;&#32;__minn
2380 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;__FAST_MATH__</emphasis>
2381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__fp_zero
2382 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(__xn&#32;==&#32;0&#32;?&#32;__fp_zero&#32;:&#32;__fp_subnormal)
2384 &#32;&#32;#endif
2385 &#32;&#32;#<emphasis role="keywordflow">if</emphasis>&#32;__FINITE_MATH_ONLY__
2386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__fp_normal;
2387 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
2388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(__xn&#32;&lt;&#32;__infn&#32;?&#32;__fp_normal
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(__xn&#32;==&#32;__infn&#32;?&#32;__fp_infinite&#32;:&#32;__fp_nan));
2390 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
2391 
2392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_I)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>))
2393 &#32;&#32;&#32;&#32;{
2394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FixedInt&#32;=&#32;__fixed_size_storage_t&lt;int,&#32;_Np&gt;;
2395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__as_int&#32;=&#32;__vector_bitcast&lt;int,&#32;_Np&gt;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FixedInt::_S_tuple_size&#32;==&#32;1)
2397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__as_int};
2398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FixedInt::_S_tuple_size&#32;==&#32;2
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;
2400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_FixedInt::_SecondType::_FirstAbi,
2401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::scalar&gt;)
2402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__extract&lt;0,&#32;2&gt;(__as_int),&#32;__as_int[_Np&#32;-&#32;1]};
2403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_FixedInt::_S_tuple_size&#32;==&#32;2)
2404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__extract&lt;0,&#32;2&gt;(__as_int),
2405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__auto_bitcast(__extract&lt;1,&#32;2&gt;(__as_int))};
2406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2408 &#32;&#32;&#32;&#32;}
2409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;2&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_I)&#32;==&#32;8
2410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__fixed_size_storage_t&lt;int,&#32;_Np&gt;::_S_tuple_size&#32;==&#32;2)
2411 &#32;&#32;&#32;&#32;{
2412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__aslong&#32;=&#32;__vector_bitcast&lt;_LLong&gt;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{int(__aslong[0]),&#32;{int(__aslong[1])}};
2414 &#32;&#32;&#32;&#32;}
2415 <emphasis role="preprocessor">&#32;&#32;#if&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
2416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)&#32;==&#32;32
2417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__fixed_size_storage_t&lt;int,&#32;_Np&gt;::_S_tuple_size&#32;==&#32;1)
2418 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_mm_packs_epi32(__to_intrin(__lo128(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)),
2419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_intrin(__hi128(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)))};
2420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)&#32;==&#32;64
2421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__fixed_size_storage_t&lt;int,&#32;_Np&gt;::_S_tuple_size&#32;==&#32;1)
2422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_mm512_cvtepi64_epi32(__to_intrin(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>))};
2423 <emphasis role="preprocessor">&#32;&#32;#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
2424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__fixed_size_storage_t&lt;int,&#32;_Np&gt;::_S_tuple_size&#32;==&#32;1)
2425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__call_with_subscripts&lt;_Np&gt;(__vector_bitcast&lt;_LLong&gt;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__l)&#32;{
2427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_wrapper&lt;int&gt;(__l...);
2428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;})};
2429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2430 &#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2431 &#32;&#32;&#32;&#32;}
2432 
2433 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_increment&#32;&amp;&#32;_S_decrement{{{2</emphasis>
2434 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2435 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2436 &#32;&#32;&#32;&#32;&#32;&#32;_S_increment(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
2437 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__x&#32;=&#32;__x._M_data&#32;+&#32;1;&#32;}
2438 
2439 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2440 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2441 &#32;&#32;&#32;&#32;&#32;&#32;_S_decrement(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
2442 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__x&#32;=&#32;__x._M_data&#32;-&#32;1;&#32;}
2443 
2444 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;smart_reference&#32;access&#32;{{{2</emphasis>
2445 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
2446 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2447 &#32;&#32;&#32;&#32;&#32;&#32;_S_set(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__i,&#32;_Up&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
2448 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__v._M_set(__i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x));&#32;}
2449 
2450 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_assign{{{2</emphasis>
2451 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_K,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2452 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2453 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(_SimdWrapper&lt;_K,&#32;_Np&gt;&#32;__k,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__lhs,
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__type_identity_t&lt;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&gt;&#32;__rhs)
2455 &#32;&#32;&#32;&#32;&#32;&#32;{
2456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_none_of())
2457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_all_of())
2459 &#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;__rhs;
2460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2461 &#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;_CommonImpl::_S_blend(__k,&#32;__lhs,&#32;__rhs);
2462 &#32;&#32;&#32;&#32;&#32;&#32;}
2463 
2464 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_K,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2465 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2466 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(_SimdWrapper&lt;_K,&#32;_Np&gt;&#32;__k,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__lhs,
2467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__type_identity_t&lt;_Tp&gt;&#32;__rhs)
2468 &#32;&#32;&#32;&#32;&#32;&#32;{
2469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_none_of())
2470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_all_of())
2472 &#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;__vector_broadcast&lt;_Np&gt;(__rhs);
2473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(__rhs)&#32;&amp;&amp;&#32;__rhs&#32;==&#32;0)
2474 &#32;&#32;&#32;&#32;&#32;&#32;{
2475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!is_same_v&lt;bool,&#32;_K&gt;)
2476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;__andnot&#32;optimization&#32;only&#32;makes&#32;sense&#32;if&#32;__k._M_data&#32;is&#32;a</emphasis>
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;vector&#32;register</emphasis>
2478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lhs._M_data
2479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__andnot(__vector_bitcast&lt;_Tp&gt;(__k),&#32;__lhs._M_data);
2480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;AVX512/__mmask,&#32;a&#32;_mm512_maskz_mov&#32;is&#32;best</emphasis>
2482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lhs
2483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_CommonImpl::_S_blend(__k,&#32;__lhs,&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;());
2484 &#32;&#32;&#32;&#32;&#32;&#32;}
2485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2486 &#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;_CommonImpl::_S_blend(__k,&#32;__lhs,
2487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;(
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_broadcast&lt;_Np&gt;(__rhs)));
2489 &#32;&#32;&#32;&#32;&#32;&#32;}
2490 
2491 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_cassign&#32;{{{2</emphasis>
2492 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_K,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2493 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2494 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_cassign(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_K,&#32;_Np&gt;&#32;__k,
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__lhs,
2496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&gt;&#32;__rhs,
2497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Op&#32;__op)
2498 &#32;&#32;&#32;&#32;&#32;&#32;{
2499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_none_of())
2500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_all_of())
2502 &#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;__op(_SuperImpl{},&#32;__lhs,&#32;__rhs);
2503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2504 &#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;_CommonImpl::_S_blend(__k,&#32;__lhs,
2505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__op(_SuperImpl{},&#32;__lhs,&#32;__rhs));
2506 &#32;&#32;&#32;&#32;&#32;&#32;}
2507 
2508 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_K,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2509 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2510 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_cassign(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_K,&#32;_Np&gt;&#32;__k,
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__lhs,
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;_Tp&gt;&#32;__rhs,&#32;_Op&#32;__op)
2513 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_masked_cassign(__k,&#32;__lhs,&#32;__vector_broadcast&lt;_Np&gt;(__rhs),&#32;__op);&#32;}
2514 
2515 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_unary&#32;{{{2</emphasis>
2516 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Op,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_K,
2517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2518 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2519 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_unary(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_K,&#32;_Np&gt;&#32;__k,
2520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v)
2521 &#32;&#32;&#32;&#32;&#32;&#32;{
2522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_none_of())
2523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__v;
2524 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__vv&#32;=&#32;_M_make_simd(__v);
2525 &#32;&#32;&#32;&#32;_Op&lt;<emphasis role="keyword">decltype</emphasis>(__vv)&gt;&#32;__op;
2526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k._M_is_constprop_all_of())
2527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__op(__vv));
2528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_CommonImpl::_S_blend(__k,&#32;__v,&#32;__data(__op(__vv)));
2530 &#32;&#32;&#32;&#32;&#32;&#32;}
2531 
2532 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}2</emphasis>
2533 &#32;&#32;};
2534 
2535 <emphasis role="comment">//&#32;_MaskImplBuiltinMixin&#32;{{{1</emphasis>
2536 <emphasis role="keyword">struct&#32;</emphasis>_MaskImplBuiltinMixin
2537 {
2538 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2539 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TypeTag&#32;=&#32;_Tp*;
2540 
2541 &#32;&#32;<emphasis role="comment">//&#32;_S_to_maskvector&#32;{{{</emphasis>
2542 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;1&gt;
2543 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;
2544 &#32;&#32;&#32;&#32;_S_to_maskvector(<emphasis role="keywordtype">bool</emphasis>&#32;__x)
2545 &#32;&#32;&#32;&#32;{
2546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Up,&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;);
2547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;?&#32;__vector_type_t&lt;_Up,&#32;_ToN&gt;{~_Up()}
2548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__vector_type_t&lt;_Up,&#32;_ToN&gt;{};
2549 &#32;&#32;&#32;&#32;}
2550 
2551 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_UpN&#32;=&#32;0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized,
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;_UpN&#32;==&#32;0&#32;?&#32;_Np&#32;:&#32;_UpN&gt;
2553 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;
2554 &#32;&#32;&#32;&#32;_S_to_maskvector(_BitMask&lt;_Np,&#32;_Sanitized&gt;&#32;__x)
2555 &#32;&#32;&#32;&#32;{
2556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Up,&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;);
2557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector&lt;__vector_type_t&lt;_Up,&#32;_ToN&gt;&gt;([&amp;](
2558 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
2559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i&#32;&lt;&#32;_Np)
2560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i]&#32;?&#32;~_Up()&#32;:&#32;_Up();
2561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Up();
2563 &#32;&#32;&#32;&#32;&#32;&#32;});
2564 &#32;&#32;&#32;&#32;}
2565 
2566 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_UpN&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,
2567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;_UpN&#32;==&#32;0&#32;?&#32;_Np&#32;:&#32;_UpN&gt;
2568 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;
2569 &#32;&#32;&#32;&#32;_S_to_maskvector(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2570 &#32;&#32;&#32;&#32;{
2571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Up,&#32;__int_for_sizeof_t&lt;_Up&gt;&gt;);
2572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TW&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;;
2573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UW&#32;=&#32;_SimdWrapper&lt;_Up,&#32;_ToN&gt;;
2574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_TW)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_UW))
2575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__wrapper_bitcast&lt;_Up,&#32;_ToN&gt;(__x);
2576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)&#32;<emphasis role="comment">//&#32;bits&#32;-&gt;&#32;vector</emphasis>
2577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_to_maskvector&lt;_Up,&#32;_ToN&gt;(_BitMask&lt;_Np&gt;(__x._M_data));
2578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2579 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;vector&#32;-&gt;&#32;vector</emphasis>
2580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
2581 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;const&#32;auto&#32;__y&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__x._M_data);</emphasis>
2582 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(sizeof(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;sizeof(_Up)&#32;==&#32;4&#32;&amp;&amp;&#32;sizeof(__y)&#32;==</emphasis>
2583 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;16)&#32;return&#32;__vector_permute&lt;1,&#32;3,&#32;-1,&#32;-1&gt;(__y);&#32;else&#32;if&#32;constexpr</emphasis>
2584 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;(sizeof(_Tp)&#32;==&#32;4&#32;&amp;&amp;&#32;sizeof(_Up)&#32;==&#32;2</emphasis>
2585 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sizeof(__y)&#32;==&#32;16)</emphasis>
2586 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_permute&lt;1,&#32;3,&#32;5,&#32;7,&#32;-1,&#32;-1,&#32;-1,&#32;-1&gt;(__y);</emphasis>
2587 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(sizeof(_Tp)&#32;==&#32;8&#32;&amp;&amp;&#32;sizeof(_Up)&#32;==&#32;2</emphasis>
2588 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sizeof(__y)&#32;==&#32;16)</emphasis>
2589 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_permute&lt;3,&#32;7,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1&gt;(__y);</emphasis>
2590 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(sizeof(_Tp)&#32;==&#32;2&#32;&amp;&amp;&#32;sizeof(_Up)&#32;==&#32;1</emphasis>
2591 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sizeof(__y)&#32;==&#32;16)</emphasis>
2592 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_permute&lt;1,&#32;3,&#32;5,&#32;7,&#32;9,&#32;11,&#32;13,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,</emphasis>
2593 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1&gt;(__y);&#32;else&#32;if&#32;constexpr&#32;(sizeof(_Tp)&#32;==&#32;4&#32;&amp;&amp;</emphasis>
2594 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;sizeof(_Up)&#32;==&#32;1</emphasis>
2595 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sizeof(__y)&#32;==&#32;16)</emphasis>
2596 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_permute&lt;3,&#32;7,&#32;11,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,</emphasis>
2597 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1&gt;(__y);&#32;else&#32;if&#32;constexpr&#32;(sizeof(_Tp)&#32;==&#32;8&#32;&amp;&amp;</emphasis>
2598 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;sizeof(_Up)&#32;==&#32;1</emphasis>
2599 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sizeof(__y)&#32;==&#32;16)</emphasis>
2600 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__vector_permute&lt;7,&#32;15,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1,</emphasis>
2601 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;-1,&#32;-1,&#32;-1,&#32;-1,&#32;-1&gt;(__y);&#32;else</emphasis>
2602 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
2603 &#32;&#32;&#32;&#32;&#32;&#32;{
2604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector&lt;__vector_type_t&lt;_Up,&#32;_ToN&gt;&gt;([&amp;](
2605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
2606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__i&#32;&lt;&#32;_Np)
2607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Up(__x[__i.value]);
2608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Up();
2610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2611 &#32;&#32;&#32;&#32;&#32;&#32;}
2612 &#32;&#32;&#32;&#32;}
2613 &#32;&#32;&#32;&#32;}
2614 
2615 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2616 &#32;&#32;<emphasis role="comment">//&#32;_S_to_bits&#32;{{{</emphasis>
2617 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2618 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SanitizedBitMask&lt;_Np&gt;
2619 &#32;&#32;&#32;&#32;_S_to_bits(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
2620 &#32;&#32;&#32;&#32;{
2621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_same_v&lt;_Tp,&#32;bool&gt;);
2622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&lt;=&#32;__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_ULLong));
2623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;make_unsigned_t&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;;
2624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bools
2625 &#32;&#32;&#32;&#32;=&#32;__vector_bitcast&lt;_Up&gt;(__x)&#32;&gt;&gt;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;__CHAR_BIT__&#32;-&#32;1);
2626 &#32;&#32;&#32;&#32;&#32;&#32;_ULLong&#32;__r&#32;=&#32;0;
2627 &#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_Np&gt;(
2628 &#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;__r&#32;|=&#32;_ULLong(__bools[__i.value])&#32;&lt;&lt;&#32;__i;&#32;});
2629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2630 &#32;&#32;&#32;&#32;}
2631 
2632 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2633 };
2634 
2635 <emphasis role="comment">//&#32;_MaskImplBuiltin&#32;{{{1</emphasis>
2636 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&gt;
2637 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplBuiltin&#32;:&#32;_MaskImplBuiltinMixin
2638 &#32;&#32;{
2639 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplBuiltinMixin::_S_to_bits;
2640 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImplBuiltinMixin::_S_to_maskvector;
2641 
2642 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;member&#32;types&#32;{{{</emphasis>
2643 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::template&#32;__traits&lt;_Tp&gt;::_SimdMember;
2645 
2646 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::template&#32;_MaskMember&lt;_Tp&gt;;
2648 
2649 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SuperImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_MaskImpl;
2650 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CommonImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_CommonImpl;
2651 
2652 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
2654 
2655 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2656 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_broadcast&#32;{{{</emphasis>
2657 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2658 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2659 &#32;&#32;&#32;&#32;&#32;&#32;_S_broadcast(<emphasis role="keywordtype">bool</emphasis>&#32;__x)
2660 &#32;&#32;&#32;&#32;&#32;&#32;{
2661 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;?&#32;_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;()
2662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_MaskMember&lt;_Tp&gt;();
2663 &#32;&#32;&#32;&#32;&#32;&#32;}
2664 
2665 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2666 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_load&#32;{{{</emphasis>
2667 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2668 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2669 &#32;&#32;&#32;&#32;&#32;&#32;_S_load(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)
2670 &#32;&#32;&#32;&#32;&#32;&#32;{
2671 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2672 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">bool</emphasis>))
2673 &#32;&#32;&#32;&#32;&#32;&#32;{
2674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bools
2675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_CommonImpl::template&#32;_S_load&lt;_I,&#32;_S_size&lt;_Tp&gt;&gt;(__mem);
2676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;is&#32;{0,&#32;1},&#32;everything&#32;else&#32;is&#32;UB</emphasis>
2677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bools&#32;&gt;&#32;0;
2678 &#32;&#32;&#32;&#32;&#32;&#32;}
2679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector&lt;_I,&#32;_S_size&lt;_Tp&gt;&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
2681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mem[__i]&#32;?&#32;~_I()&#32;:&#32;_I();
2682 &#32;&#32;&#32;&#32;&#32;&#32;});
2683 &#32;&#32;&#32;&#32;&#32;&#32;}
2684 
2685 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2686 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_convert&#32;{{{</emphasis>
2687 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
2688 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2689 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(_BitMask&lt;_Np,&#32;_Sanitized&gt;&#32;__x)
2690 &#32;&#32;&#32;&#32;&#32;&#32;{
2691 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_builtin_bitmask_abi&lt;_Abi&gt;())
2692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdWrapper&lt;<emphasis role="keywordtype">bool</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;(__x._M_to_bits());
2693 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SuperImpl::template&#32;_S_to_maskvector&lt;__int_for_sizeof_t&lt;_Tp&gt;,
2695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_size&lt;_Tp&gt;&gt;(
2696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_sanitized());
2697 &#32;&#32;&#32;&#32;&#32;&#32;}
2698 
2699 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2700 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2701 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(_SimdWrapper&lt;bool,&#32;_Np&gt;&#32;__x)
2702 &#32;&#32;&#32;&#32;&#32;&#32;{
2703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_builtin_bitmask_abi&lt;_Abi&gt;())
2704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdWrapper&lt;<emphasis role="keywordtype">bool</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;(__x._M_data);
2705 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SuperImpl::template&#32;_S_to_maskvector&lt;__int_for_sizeof_t&lt;_Tp&gt;,
2707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_size&lt;_Tp&gt;&gt;(
2708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitMask&lt;_Np&gt;(__x._M_data)._M_sanitized());
2709 &#32;&#32;&#32;&#32;&#32;&#32;}
2710 
2711 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2712 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2713 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(_SimdWrapper&lt;_Up,&#32;_Np&gt;&#32;__x)
2714 &#32;&#32;&#32;&#32;&#32;&#32;{
2715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_builtin_bitmask_abi&lt;_Abi&gt;())
2716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdWrapper&lt;<emphasis role="keywordtype">bool</emphasis>,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;(
2717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_to_bits(__x));
2718 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SuperImpl::template&#32;_S_to_maskvector&lt;__int_for_sizeof_t&lt;_Tp&gt;,
2720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_size&lt;_Tp&gt;&gt;(__x);
2721 &#32;&#32;&#32;&#32;&#32;&#32;}
2722 
2723 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UAbi&gt;
2724 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2725 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(simd_mask&lt;_Up,&#32;_UAbi&gt;&#32;__x)
2726 &#32;&#32;&#32;&#32;&#32;&#32;{
2727 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_builtin_bitmask_abi&lt;_Abi&gt;())
2728 &#32;&#32;&#32;&#32;&#32;&#32;{
2729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_R&#32;=&#32;_SimdWrapper&lt;bool,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;;
2730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_builtin_bitmask_abi&lt;_UAbi&gt;())&#32;<emphasis role="comment">//&#32;bits&#32;-&gt;&#32;bits</emphasis>
2731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R(__data(__x));
2732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_UAbi&gt;())&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;bits</emphasis>
2733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R(__data(__x));
2734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_fixed_size_abi_v&lt;_UAbi&gt;)&#32;<emphasis role="comment">//&#32;bitset&#32;-&gt;&#32;bits</emphasis>
2735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R(__data(__x)._M_to_bits());
2736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;vector&#32;-&gt;&#32;bits</emphasis>
2737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R(_UAbi::_MaskImpl::_S_to_bits(__data(__x))._M_to_bits());
2738 &#32;&#32;&#32;&#32;&#32;&#32;}
2739 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SuperImpl::template&#32;_S_to_maskvector&lt;__int_for_sizeof_t&lt;_Tp&gt;,
2741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_size&lt;_Tp&gt;&gt;(
2742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(__x));
2743 &#32;&#32;&#32;&#32;&#32;&#32;}
2744 
2745 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2746 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_load&#32;{{{2</emphasis>
2747 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2749 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_load(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__merge,
2750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__mask,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
2751 &#32;&#32;&#32;&#32;&#32;&#32;{
2752 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AVX(2)&#32;has&#32;32/64&#32;bit&#32;maskload,&#32;but&#32;nothing&#32;at&#32;8&#32;bit&#32;granularity</emphasis>
2753 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__wrapper_bitcast&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;(__merge);
2754 &#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(_SuperImpl::_S_to_bits(__mask),
2755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
2756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>._M_set(__i,&#32;-__mem[__i]);
2757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2758 &#32;&#32;&#32;&#32;__merge&#32;=&#32;__wrapper_bitcast&lt;_Tp&gt;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2759 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
2760 &#32;&#32;&#32;&#32;&#32;&#32;}
2761 
2762 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{2</emphasis>
2763 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2764 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_store(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,
2765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
2766 &#32;&#32;&#32;&#32;&#32;&#32;{
2767 &#32;&#32;&#32;&#32;__execute_n_times&lt;_Np&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
2768 &#32;&#32;&#32;&#32;&#32;&#32;__mem[__i]&#32;=&#32;__v[__i];
2769 &#32;&#32;&#32;&#32;});
2770 &#32;&#32;&#32;&#32;&#32;&#32;}
2771 
2772 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store&#32;{{{2</emphasis>
2773 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2775 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_store(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__v,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem,
2776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
2777 &#32;&#32;&#32;&#32;&#32;&#32;{
2778 &#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(
2779 &#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_to_bits(__k),&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
2780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem[__i]&#32;=&#32;__v[__i];
2781 &#32;&#32;&#32;&#32;&#32;&#32;});
2782 &#32;&#32;&#32;&#32;&#32;&#32;}
2783 
2784 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_from_bitmask{{{2</emphasis>
2785 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2786 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember&lt;_Tp&gt;
2787 &#32;&#32;&#32;&#32;&#32;&#32;_S_from_bitmask(_SanitizedBitMask&lt;_Np&gt;&#32;__bits,&#32;_TypeTag&lt;_Tp&gt;)
2788 &#32;&#32;&#32;&#32;&#32;&#32;{
2789 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SuperImpl::template&#32;_S_to_maskvector&lt;_Tp,&#32;_S_size&lt;_Tp&gt;&gt;(__bits);
2790 &#32;&#32;&#32;&#32;&#32;&#32;}
2791 
2792 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;logical&#32;and&#32;bitwise&#32;operators&#32;{{{2</emphasis>
2793 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2794 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2795 &#32;&#32;&#32;&#32;&#32;&#32;_S_logical_and(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
2796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
2797 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and(__x._M_data,&#32;__y._M_data);&#32;}
2798 
2799 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2800 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2801 &#32;&#32;&#32;&#32;&#32;&#32;_S_logical_or(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
2802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
2803 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(__x._M_data,&#32;__y._M_data);&#32;}
2804 
2805 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2806 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2807 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_not(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
2808 &#32;&#32;&#32;&#32;&#32;&#32;{
2809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Abi::template&#32;_S_is_partial&lt;_Tp&gt;)
2810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__andnot(__x,&#32;__wrapper_bitcast&lt;_Tp&gt;(
2811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi::template&#32;_S_implicit_mask&lt;_Tp&gt;()));
2812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__not(__x._M_data);
2814 &#32;&#32;&#32;&#32;&#32;&#32;}
2815 
2816 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2817 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2818 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_and(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
2819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
2820 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and(__x._M_data,&#32;__y._M_data);&#32;}
2821 
2822 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2823 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2824 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_or(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
2825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
2826 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__or(__x._M_data,&#32;__y._M_data);&#32;}
2827 
2828 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2829 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;
2830 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_xor(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x,
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__y)
2832 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__xor(__x._M_data,&#32;__y._M_data);&#32;}
2833 
2834 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;smart_reference&#32;access&#32;{{{2</emphasis>
2835 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2836 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_set(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__k,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__i,
2837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
2838 &#32;&#32;&#32;&#32;&#32;&#32;{
2839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;bool&gt;)
2840 &#32;&#32;&#32;&#32;&#32;&#32;__k._M_set(__i,&#32;__x);
2841 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2842 &#32;&#32;&#32;&#32;&#32;&#32;{
2843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Tp,&#32;__int_for_sizeof_t&lt;_Tp&gt;&gt;);
2844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
2845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;__generate_from_n_evaluations&lt;_Np,
2847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;(
2848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;{
2849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__j)
2850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tp(-__x);
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k[+__j];
2853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k._M_data[__i]&#32;=&#32;-__x;
2857 &#32;&#32;&#32;&#32;&#32;&#32;}
2858 &#32;&#32;&#32;&#32;&#32;&#32;}
2859 
2860 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_assign{{{2</emphasis>
2861 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2862 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2863 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__k,
2864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__lhs,
2865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__type_identity_t&lt;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&gt;&#32;__rhs)
2866 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__lhs&#32;=&#32;_CommonImpl::_S_blend(__k,&#32;__lhs,&#32;__rhs);&#32;}
2867 
2868 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2869 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2870 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__k,
2871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__lhs,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__rhs)
2872 &#32;&#32;&#32;&#32;&#32;&#32;{
2873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(__rhs))
2874 &#32;&#32;&#32;&#32;&#32;&#32;{
2875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rhs&#32;==&#32;<emphasis role="keyword">false</emphasis>)
2876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;__andnot(__k,&#32;__lhs);
2877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lhs&#32;=&#32;__or(__k,&#32;__lhs);
2879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2880 &#32;&#32;&#32;&#32;&#32;&#32;}
2881 &#32;&#32;&#32;&#32;__lhs&#32;=&#32;_CommonImpl::_S_blend(__k,&#32;__lhs,
2882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(simd_mask&lt;_Tp,&#32;_Abi&gt;(__rhs)));
2883 &#32;&#32;&#32;&#32;&#32;&#32;}
2884 
2885 &#32;&#32;&#32;&#32;<emphasis role="comment">//}}}2</emphasis>
2886 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_all_of&#32;{{{</emphasis>
2887 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2888 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2889 &#32;&#32;&#32;&#32;&#32;&#32;_S_all_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2890 &#32;&#32;&#32;&#32;&#32;&#32;{
2891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts(
2892 &#32;&#32;&#32;&#32;&#32;&#32;__data(__k),&#32;make_index_sequence&lt;_S_size&lt;_Tp&gt;&gt;(),
2893 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>...&#32;__ent)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(...&#32;&amp;&amp;&#32;!(__ent&#32;==&#32;0));&#32;});
2894 &#32;&#32;&#32;&#32;&#32;&#32;}
2895 
2896 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2897 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_any_of&#32;{{{</emphasis>
2898 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2899 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2900 &#32;&#32;&#32;&#32;&#32;&#32;_S_any_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2901 &#32;&#32;&#32;&#32;&#32;&#32;{
2902 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts(
2903 &#32;&#32;&#32;&#32;&#32;&#32;__data(__k),&#32;make_index_sequence&lt;_S_size&lt;_Tp&gt;&gt;(),
2904 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>...&#32;__ent)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(...&#32;||&#32;!(__ent&#32;==&#32;0));&#32;});
2905 &#32;&#32;&#32;&#32;&#32;&#32;}
2906 
2907 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2908 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_none_of&#32;{{{</emphasis>
2909 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2910 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2911 &#32;&#32;&#32;&#32;&#32;&#32;_S_none_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2912 &#32;&#32;&#32;&#32;&#32;&#32;{
2913 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts(
2914 &#32;&#32;&#32;&#32;&#32;&#32;__data(__k),&#32;make_index_sequence&lt;_S_size&lt;_Tp&gt;&gt;(),
2915 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>...&#32;__ent)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(...&#32;&amp;&amp;&#32;(__ent&#32;==&#32;0));&#32;});
2916 &#32;&#32;&#32;&#32;&#32;&#32;}
2917 
2918 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2919 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_some_of&#32;{{{</emphasis>
2920 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2921 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2922 &#32;&#32;&#32;&#32;&#32;&#32;_S_some_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2923 &#32;&#32;&#32;&#32;&#32;&#32;{
2924 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__n_true&#32;=&#32;_SuperImpl::_S_popcount(__k);
2925 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n_true&#32;&gt;&#32;0&#32;&amp;&amp;&#32;__n_true&#32;&lt;&#32;int(_S_size&lt;_Tp&gt;);
2926 &#32;&#32;&#32;&#32;&#32;&#32;}
2927 
2928 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2929 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_popcount&#32;{{{</emphasis>
2930 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2931 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
2932 &#32;&#32;&#32;&#32;&#32;&#32;_S_popcount(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2933 &#32;&#32;&#32;&#32;&#32;&#32;{
2934 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_I&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2935 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_default_constructible_v&lt;simd&lt;_I,&#32;_Abi&gt;&gt;)
2936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(
2937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_I,&#32;_Abi&gt;(__private_init,&#32;__wrapper_bitcast&lt;_I&gt;(__data(__k))));
2938 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2939 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__bit_cast&lt;rebind_simd_t&lt;_I,&#32;simd&lt;_Tp,&#32;_Abi&gt;&gt;&gt;(
2940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Abi&gt;(__private_init,&#32;__data(__k))));
2941 &#32;&#32;&#32;&#32;&#32;&#32;}
2942 
2943 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2944 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_first_set&#32;{{{</emphasis>
2945 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2946 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
2947 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_first_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2948 &#32;&#32;&#32;&#32;&#32;&#32;{
2949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__countr_zero(
2950 &#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_to_bits(__data(__k))._M_to_bits());
2951 &#32;&#32;&#32;&#32;&#32;&#32;}
2952 
2953 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2954 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_last_set&#32;{{{</emphasis>
2955 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2956 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
2957 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_last_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2958 &#32;&#32;&#32;&#32;&#32;&#32;{
2959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__bit_width(
2960 &#32;&#32;&#32;&#32;&#32;&#32;_SuperImpl::_S_to_bits(__data(__k))._M_to_bits())&#32;-&#32;1;
2961 &#32;&#32;&#32;&#32;&#32;&#32;}
2962 
2963 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2964 &#32;&#32;};
2965 
2966 <emphasis role="comment">//}}}1</emphasis>
2967 _GLIBCXX_SIMD_END_NAMESPACE
2968 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2969 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_ABIS_H_</emphasis>
2970 
2971 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker&#32;foldmarker={{{,}}}&#32;sw=2&#32;noet&#32;ts=8&#32;sts=2&#32;tw=100</emphasis>
</programlisting></section>
