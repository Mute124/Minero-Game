<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classpath" xml:lang="en-US">
<title>path Class Reference</title>
<indexterm><primary>path</primary></indexterm>
<para>

<para>A TOML path. </para>
 
</para>
<para>
<computeroutput>#include &lt;path.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> = std::vector&lt; <link linkend="_classpath__component">path_component</link> &gt;::iterator</para>
</listitem>
            <listitem><para>using <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> = std::vector&lt; <link linkend="_classpath__component">path_component</link> &gt;::const_iterator</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link> () noexcept=default</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath_1a1bf04b347a30f2f430916a8e98582450">path</link> (std::string_view)</para>

<para>Construct a path by parsing from a string. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath_1ac1544ecdc18c0dcddbe2b246e44b33f7">path</link> (std::wstring_view)</para>

<para>Construct a path by parsing from a string. </para>
</listitem>
            <listitem><para><link linkend="_classpath_1af8cb55c04bfdcdfb2aa066cdaacc6ea6">~path</link> () noexcept=default</para>

<para>Default destructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classpath_1aec3aa11bf1f8d657d16c4ded23cae7cc">path</link> (const <link linkend="_classpath">path</link> &amp;)=default</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classpath_1aa710ca220b83a61f5be61178699eb26c">path</link> (<link linkend="_classpath">path</link> &amp;&amp;) noexcept=default</para>

<para>Move constructor. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691">size</link> () const noexcept</para>

<para>Returns the number of components in the path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1aaea06d1801de5c9949608ecc846fd3fc">operator bool</link> () const noexcept</para>

<para>Returns true if the path has one or more components. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link> () const noexcept</para>

<para>Whether (true) or not (false) the path is empty. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath__component">path_component</link> &amp; <link linkend="_classpath_1a9cdc930401b6c973dd9c7d91b649f87e">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>

<para>Fetch a path component by index. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_classpath__component">path_component</link> &amp; <link linkend="_classpath_1a1a6eaebc56ebf6dfcb3bccd110f2f46a">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>

<para>Fetch a path component by index (const overload). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link> () noexcept=default</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath_1a1bf04b347a30f2f430916a8e98582450">path</link> (std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_classpath_1af8cb55c04bfdcdfb2aa066cdaacc6ea6">~path</link> () noexcept=default</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classpath_1aec3aa11bf1f8d657d16c4ded23cae7cc">path</link> (const <link linkend="_classpath">path</link> &amp;)=default</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_classpath_1aa710ca220b83a61f5be61178699eb26c">path</link> (<link linkend="_classpath">path</link> &amp;&amp;) noexcept=default</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691">size</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1aaea06d1801de5c9949608ecc846fd3fc">operator bool</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath__component">path_component</link> &amp; <link linkend="_classpath_1a9cdc930401b6c973dd9c7d91b649f87e">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_classpath__component">path_component</link> &amp; <link linkend="_classpath_1a1a6eaebc56ebf6dfcb3bccd110f2f46a">operator[]</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>) const noexcept</para>
</listitem>
            <listitem><para><link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">operator=</link> (const <link linkend="_classpath">path</link> &amp;)=default</para>
</listitem>
            <listitem><para><link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a96333863378c9acd152057c39432e5eb">operator=</link> (<link linkend="_classpath">path</link> &amp;&amp;) noexcept=default</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a09b032262927c74fdda6558473fba5f5">operator=</link> (std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">assign</link> (const <link linkend="_classpath">path</link> &amp;p)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ae054c9202b32da787732c0e117453786">assign</link> (<link linkend="_classpath">path</link> &amp;&amp;p) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1af4e4141b488a07eca915e66025e58f56">assign</link> (std::string_view <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">operator+=</link> (const <link linkend="_classpath">path</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a64495dea1b6bd512bb83b3c09f1179b7">operator+=</link> (<link linkend="_classpath">path</link> &amp;&amp;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ada94a75d67f40659f162087348d795e6">operator+=</link> (std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1aa1716177c19817218cc4f98768932487">append</link> (const <link linkend="_classpath">path</link> &amp;p)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ae0bb96cdbc740ecab6c9d6f4992b479d">append</link> (<link linkend="_classpath">path</link> &amp;&amp;p)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a36b760eeb46ab56800b6d5d16a156cf7">append</link> (std::string_view <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link> (const <link linkend="_classpath">path</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a41b121bfb894bf24fbba2524efd0e1ac">prepend</link> (<link linkend="_classpath">path</link> &amp;&amp;)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1aa15d82e160b9efe3bfa888b4bfb79b81">prepend</link> (std::string_view)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> std::string <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link> () const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba">operator std::string</link> () const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> <link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> <link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">end</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1a88f7b0b2f6b6b37e1920ec6f749fb12f">begin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1ab572386110f4f6c174fc982857e0a9a3">end</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1ac30c763b4f07605d526d8e1f9725e38c">cbegin</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1ad2bb6cbe2c811a1d66ea528e5fdf8732">cend</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a167b26b6e68446fd12e06a6f64dad850">truncate</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba">truncated</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n) const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1a0e6eb582abfb5ecbc3378f18a581e2a0">parent</link> () const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1acba8ae5b25b11f25ffcc6a30226f98e9">leaf</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n=1) const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link> (<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>, <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>) const</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1ab968d69ab16d3edce0005630be2bd913">subpath</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3c8469415bbc83dd1341af15c67f1cef">length</link>) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Assignment</title>
        <itemizedlist>
            <listitem><para><link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">operator=</link> (const <link linkend="_classpath">path</link> &amp;)=default</para>

<para>Copy-assignment operator. </para>
</listitem>
            <listitem><para><link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a96333863378c9acd152057c39432e5eb">operator=</link> (<link linkend="_classpath">path</link> &amp;&amp;) noexcept=default</para>

<para>Move-assignment operator. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a09b032262927c74fdda6558473fba5f5">operator=</link> (std::string_view)</para>

<para>Replaces the contents of the path by parsing from a string. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1abaf28303481a19dc0f69f5c4da1b198e">operator=</link> (std::wstring_view)</para>

<para>Replaces the contents of the path by parsing from a string. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">assign</link> (const <link linkend="_classpath">path</link> &amp;p)</para>

<para>Replaces the contents of the path with that of another. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ae054c9202b32da787732c0e117453786">assign</link> (<link linkend="_classpath">path</link> &amp;&amp;p) noexcept</para>

<para>Replaces the contents of the path with that of another. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1af4e4141b488a07eca915e66025e58f56">assign</link> (std::string_view <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>)</para>

<para>Replaces the contents of the path object by a new path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a84913bb098d95f2320e1c0e9799be040">assign</link> (std::wstring_view <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>)</para>

<para>Replaces the contents of the path object by a new path. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Appending</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">operator+=</link> (const <link linkend="_classpath">path</link> &amp;)</para>

<para>Appends another path onto the end of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a64495dea1b6bd512bb83b3c09f1179b7">operator+=</link> (<link linkend="_classpath">path</link> &amp;&amp;)</para>

<para>Appends another path onto the end of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ada94a75d67f40659f162087348d795e6">operator+=</link> (std::string_view)</para>

<para>Parses a path and appends it onto the end of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a892d2e6a87e16e3fb689b0f31d9ac98b">operator+=</link> (std::wstring_view)</para>

<para>Parses a path and appends it onto the end of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1aa1716177c19817218cc4f98768932487">append</link> (const <link linkend="_classpath">path</link> &amp;p)</para>

<para>Appends another path onto the end of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1ae0bb96cdbc740ecab6c9d6f4992b479d">append</link> (<link linkend="_classpath">path</link> &amp;&amp;p)</para>

<para>Appends another path onto the end of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a36b760eeb46ab56800b6d5d16a156cf7">append</link> (std::string_view <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>)</para>

<para>Parses a path and appends it onto the end of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a75518096712de0092ef2722e923db9e5">append</link> (std::wstring_view <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>)</para>

<para>Parses a path and appends it onto the end of this one. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Prepending</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link> (const <link linkend="_classpath">path</link> &amp;)</para>

<para>Prepends another path onto the beginning of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a41b121bfb894bf24fbba2524efd0e1ac">prepend</link> (<link linkend="_classpath">path</link> &amp;&amp;)</para>

<para>Prepends another path onto the beginning of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1aa15d82e160b9efe3bfa888b4bfb79b81">prepend</link> (std::string_view)</para>

<para>Parses a path and prepends it onto the beginning of this one. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a8a60a6799ef2f3dfe7d95ace89f9bbc9">prepend</link> (std::wstring_view)</para>

<para>Parses a path and prepends it onto the beginning of this one. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Subpaths and Truncation</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link> () noexcept</para>

<para>Erases the contents of the path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; <link linkend="_classpath_1a167b26b6e68446fd12e06a6f64dad850">truncate</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n)</para>

<para>Removes the number of terminal path components specified by n. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba">truncated</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n) const</para>

<para>Returns a toml::path object which has had n terminal path components removed. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1a0e6eb582abfb5ecbc3378f18a581e2a0">parent</link> () const</para>

<para>Returns a toml::path object representing the path of the parent node. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1acba8ae5b25b11f25ffcc6a30226f98e9">leaf</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n=1) const</para>

<para>Returns a toml::path object representing terminal n-parts of a TOML path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link> (<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>, <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>) const</para>

<para>Returns a toml::path object that is a specified subpath of the current path, representing the range of path components from [start, end). </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> <link linkend="_classpath_1ab968d69ab16d3edce0005630be2bd913">subpath</link> (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3c8469415bbc83dd1341af15c67f1cef">length</link>) const</para>

<para>Returns a toml::path object that is a specified subpath of the current path, representing the range of path components with indexes from [start, start + length]. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1ad5e5060120620271acb20e8a74f2021f">operator+</link> (const <link linkend="_classpath">path</link> &amp;lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1a48d54d0f3eb9f644a45102ee73f1cff5">operator+</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::string_view rhs)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1a512781b98cad27ab8c8a59b110485fee">operator+</link> (std::string_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend std::ostream &amp; <link linkend="_classpath_1a20e0b1c8c31800bc968cc1f67bc51556">operator&lt;&lt;</link> (std::ostream &amp;os, const <link linkend="_classpath">path</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a1a468cbd804317b18eafbaa91c06baf8">operator==</link> (const <link linkend="_classpath">path</link> &amp;lhs, const <link linkend="_classpath">path</link> &amp;rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a1733dc9036ef632af15486e604c4b477">operator!=</link> (const <link linkend="_classpath">path</link> &amp;lhs, const <link linkend="_classpath">path</link> &amp;rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1af5859e43bd1db2967505992d3087a193">operator==</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::string_view rhs)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1ab673764882b72f84b82f34f51beeea6f">operator==</link> (std::string_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a17adb560b17accb885ba871f492e45f2">operator!=</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::string_view rhs)</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a0577876d473c22d81b5e3f6e519af57c">operator!=</link> (std::string_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Concatenation</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1ad5e5060120620271acb20e8a74f2021f">operator+</link> (const <link linkend="_classpath">path</link> &amp;lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Concatenates two paths. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1a48d54d0f3eb9f644a45102ee73f1cff5">operator+</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::string_view rhs)</para>

<para>Concatenates two paths. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1a512781b98cad27ab8c8a59b110485fee">operator+</link> (std::string_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Concatenates two paths. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1a991f68ea1c70885c029a64bfbf445d69">operator+</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::wstring_view rhs)</para>

<para>Concatenates two paths. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> <link linkend="_classpath_1a06a9534d3f26fbcd1b563c5e90b34819">operator+</link> (std::wstring_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Concatenates two paths. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Equality</title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a1a468cbd804317b18eafbaa91c06baf8">operator==</link> (const <link linkend="_classpath">path</link> &amp;lhs, const <link linkend="_classpath">path</link> &amp;rhs) noexcept</para>

<para>Returns whether two paths are the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a1733dc9036ef632af15486e604c4b477">operator!=</link> (const <link linkend="_classpath">path</link> &amp;lhs, const <link linkend="_classpath">path</link> &amp;rhs) noexcept</para>

<para>Returns whether two paths are not the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1af5859e43bd1db2967505992d3087a193">operator==</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::string_view rhs)</para>

<para>Returns whether two paths are the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1ab673764882b72f84b82f34f51beeea6f">operator==</link> (std::string_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Returns whether two paths are the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a17adb560b17accb885ba871f492e45f2">operator!=</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::string_view rhs)</para>

<para>Returns whether two paths are not the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a0577876d473c22d81b5e3f6e519af57c">operator!=</link> (std::string_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Returns whether two paths are not the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1adb6aa7f1b9da69aac8853c17568130dd">operator==</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::wstring_view rhs)</para>

<para>Returns whether two paths are the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1aee32429464d115ed5e67d0332ddb8fc6">operator==</link> (std::wstring_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Returns whether two paths are the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1ac3a98d28d7b1e94834ac73759a7789ec">operator!=</link> (const <link linkend="_classpath">path</link> &amp;lhs, std::wstring_view rhs)</para>

<para>Returns whether two paths are not the same. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classpath_1a5b024dec835f174a68a456a2da2f8d6d">operator!=</link> (std::wstring_view lhs, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Returns whether two paths are not the same. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Iteration    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> = std::vector&lt; <link linkend="_classpath__component">path_component</link> &gt;::iterator</para>
</listitem>
            <listitem><para>using <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> = std::vector&lt; <link linkend="_classpath__component">path_component</link> &gt;::const_iterator</para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> <link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link> () noexcept</para>

<para>Returns an iterator to the first component in the path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> <link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">end</link> () noexcept</para>

<para>Returns an iterator to one-past-the-last component in the path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1a88f7b0b2f6b6b37e1920ec6f749fb12f">begin</link> () const noexcept</para>

<para>Returns a const iterator to the first component in the path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1ab572386110f4f6c174fc982857e0a9a3">end</link> () const noexcept</para>

<para>Returns a const iterator to one-past-the-last component in the path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1ac30c763b4f07605d526d8e1f9725e38c">cbegin</link> () const noexcept</para>

<para>Returns a const iterator to the first component in the path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> <link linkend="_classpath_1ad2bb6cbe2c811a1d66ea528e5fdf8732">cend</link> () const noexcept</para>

<para>Returns a const iterator to one-past-the-last component in the path. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>String conversion    </title>
        <itemizedlist>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> std::string <link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link> () const</para>

<para>Returns a string representation of this path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba">operator std::string</link> () const</para>

<para>Returns a string representation of this path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> std::wstring <link linkend="_classpath_1a0927a2cb65d7b1ef4305898276b2ca4a">wide_str</link> () const</para>

<para>Returns a string representation of this path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath_1a7d86e6cb5f7e5bbd02c5e402f498120e">operator std::wstring</link> () const</para>

<para>Returns a string representation of this path. </para>
</listitem>
            <listitem><para><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend std::ostream &amp; <link linkend="_classpath_1a20e0b1c8c31800bc968cc1f67bc51556">operator&lt;&lt;</link> (std::ostream &amp;os, const <link linkend="_classpath">path</link> &amp;rhs)</para>

<para>Prints the string representation of a #toml::path out to a stream. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A TOML path. </para>



<para>\detail This type parses and represents a path to a TOML node. It validates the syntax of the path but does not ensure that the path refers to a valid node in any particular TOML document. If parsing fails, the object will evaluate as &apos;falsy&apos;, and will be empty.</para>

<para>\cpp toml::path the_path(&quot;animals.cats[1]&quot;);</para>

<para>// can use with tbl.at_path or operator[] std::cout &lt;&lt; &quot;second cat: &quot; &lt;&lt; tbl[the_path] &lt;&lt; &quot;\n&quot;; std::cout &lt;&lt; &quot;cats: &quot; &lt;&lt; tbl.at_path(the_path.parent_path()) &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out second cat: lion cats: [&apos;tiger&apos;, &apos;lion&apos;, &apos;puma&apos;] \eout </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59"/><section>
    <title>const_iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">path::const_iterator</link> =  std::vector&lt;<link linkend="_classpath__component">path_component</link>&gt;::const_iterator</computeroutput></para>
<para>A const iterator for iterating over the components in the path. <formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59"/><section>
    <title>const_iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>const_iterator</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>const_iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">path::const_iterator</link> =  std::vector&lt;<link linkend="_classpath__component">path_component</link>&gt;::const_iterator</computeroutput></para></section>
<anchor xml:id="_classpath_1a43033074faacf0d7081045d7fbc97c32"/><section>
    <title>iterator<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link> =  std::vector&lt;<link linkend="_classpath__component">path_component</link>&gt;::iterator</computeroutput></para>
<para>An iterator for iterating over the components in the path. <formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1a43033074faacf0d7081045d7fbc97c32"/><section>
    <title>iterator<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>iterator</secondary></indexterm>
<para><computeroutput>using <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">path::iterator</link> =  std::vector&lt;<link linkend="_classpath__component">path_component</link>&gt;::iterator</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classpath_1a67032008d5e8b7d05a67eb20688ec27c"/><section>
    <title>path()<computeroutput>[1/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> path::path ( )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
</section>
<anchor xml:id="_classpath_1a1bf04b347a30f2f430916a8e98582450"/><section>
    <title>path()<computeroutput>[2/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> path::path (std::string_view )<computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Construct a path by parsing from a string. </para>
</para>
</section>
<anchor xml:id="_classpath_1ac1544ecdc18c0dcddbe2b246e44b33f7"/><section>
    <title>path()<computeroutput>[3/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> path::path (std::wstring_view )<computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Construct a path by parsing from a string. </para>
</para>

<para>\availability This constructor is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1af8cb55c04bfdcdfb2aa066cdaacc6ea6"/><section>
    <title>~path()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>~path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>~path</secondary></indexterm>
<para><computeroutput>path::~path ( )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Default destructor. </para>
</para>
</section>
<anchor xml:id="_classpath_1aec3aa11bf1f8d657d16c4ded23cae7cc"/><section>
    <title>path()<computeroutput>[4/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> path::path (const <link linkend="_classpath">path</link> &amp; )<computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>Copy constructor. </para>
</para>
</section>
<anchor xml:id="_classpath_1aa710ca220b83a61f5be61178699eb26c"/><section>
    <title>path()<computeroutput>[5/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> path::path (<link linkend="_classpath">path</link> &amp;&amp; )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move constructor. </para>
</para>
</section>
<anchor xml:id="_classpath_1a67032008d5e8b7d05a67eb20688ec27c"/><section>
    <title>path()<computeroutput>[6/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> path::path ( )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a1bf04b347a30f2f430916a8e98582450"/><section>
    <title>path()<computeroutput>[7/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> path::path (std::string_view )<computeroutput>[explicit]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1af8cb55c04bfdcdfb2aa066cdaacc6ea6"/><section>
    <title>~path()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>~path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>~path</secondary></indexterm>
<para><computeroutput>path::~path ( )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1aec3aa11bf1f8d657d16c4ded23cae7cc"/><section>
    <title>path()<computeroutput>[8/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> path::path (const <link linkend="_classpath">path</link> &amp; )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1aa710ca220b83a61f5be61178699eb26c"/><section>
    <title>path()<computeroutput>[9/9]</computeroutput></title>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>path</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link> path::path (<link linkend="_classpath">path</link> &amp;&amp; )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classpath_1aa1716177c19817218cc4f98768932487"/><section>
    <title>append()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>append</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>append</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::append (const <link linkend="_classpath">path</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Appends another path onto the end of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1aa1716177c19817218cc4f98768932487"/><section>
    <title>append()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>append</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>append</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::append (const <link linkend="_classpath">path</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1ae0bb96cdbc740ecab6c9d6f4992b479d"/><section>
    <title>append()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>append</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>append</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::append (<link linkend="_classpath">path</link> &amp;&amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Appends another path onto the end of this one. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_ae0bb96cdbc740ecab6c9d6f4992b479d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classpath_1ae0bb96cdbc740ecab6c9d6f4992b479d"/><section>
    <title>append()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>append</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>append</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::append (<link linkend="_classpath">path</link> &amp;&amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_ae0bb96cdbc740ecab6c9d6f4992b479d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classpath_1a36b760eeb46ab56800b6d5d16a156cf7"/><section>
    <title>append()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>append</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>append</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::append (std::string_view str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parses a path and appends it onto the end of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1a36b760eeb46ab56800b6d5d16a156cf7"/><section>
    <title>append()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>append</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>append</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::append (std::string_view str)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a75518096712de0092ef2722e923db9e5"/><section>
    <title>append()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>append</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>append</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::append (std::wstring_view str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parses a path and appends it onto the end of this one. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1ace78199ce6abac6d6476bfb5e09de398"/><section>
    <title>assign()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>assign</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::assign (const <link linkend="_classpath">path</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Replaces the contents of the path with that of another. </para>
</para>
</section>
<anchor xml:id="_classpath_1ace78199ce6abac6d6476bfb5e09de398"/><section>
    <title>assign()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>assign</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::assign (const <link linkend="_classpath">path</link> &amp; p)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1ae054c9202b32da787732c0e117453786"/><section>
    <title>assign()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>assign</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::assign (<link linkend="_classpath">path</link> &amp;&amp; p)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Replaces the contents of the path with that of another. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_ae054c9202b32da787732c0e117453786_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classpath_1ae054c9202b32da787732c0e117453786"/><section>
    <title>assign()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>assign</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::assign (<link linkend="_classpath">path</link> &amp;&amp; p)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_ae054c9202b32da787732c0e117453786_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classpath_1af4e4141b488a07eca915e66025e58f56"/><section>
    <title>assign()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>assign</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::assign (std::string_view str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Replaces the contents of the path object by a new path. </para>
</para>
</section>
<anchor xml:id="_classpath_1af4e4141b488a07eca915e66025e58f56"/><section>
    <title>assign()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>assign</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::assign (std::string_view str)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a84913bb098d95f2320e1c0e9799be040"/><section>
    <title>assign()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>assign</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>assign</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> <link linkend="_classpath">path</link> &amp; path::assign (std::wstring_view str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Replaces the contents of the path object by a new path. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1a88f7b0b2f6b6b37e1920ec6f749fb12f"/><section>
    <title>begin()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const iterator to the first component in the path. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1a88f7b0b2f6b6b37e1920ec6f749fb12f"/><section>
    <title>begin()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a82d976c5118224f5c69f543a4f32af38"/><section>
    <title>begin()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> path::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to the first component in the path. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1a82d976c5118224f5c69f543a4f32af38"/><section>
    <title>begin()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> path::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1ac30c763b4f07605d526d8e1f9725e38c"/><section>
    <title>cbegin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const iterator to the first component in the path. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1ac30c763b4f07605d526d8e1f9725e38c"/><section>
    <title>cbegin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cbegin</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>cbegin</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1ad2bb6cbe2c811a1d66ea528e5fdf8732"/><section>
    <title>cend()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const iterator to one-past-the-last component in the path. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1ad2bb6cbe2c811a1d66ea528e5fdf8732"/><section>
    <title>cend()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>cend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a0aba473e525c6bd36f429c34eb105de3"/><section>
    <title>clear()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>clear</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>clear</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> path::clear ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Erases the contents of the path. </para>
</para>
</section>
<anchor xml:id="_classpath_1a0aba473e525c6bd36f429c34eb105de3"/><section>
    <title>clear()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>clear</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>clear</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> path::clear ( )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1acab74ce9c17856e48dfaa538d69d5d00"/><section>
    <title>empty()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>empty</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>empty</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> path::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Whether (true) or not (false) the path is empty. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_acab74ce9c17856e48dfaa538d69d5d00_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classpath_1acab74ce9c17856e48dfaa538d69d5d00"/><section>
    <title>empty()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>empty</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>empty</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> path::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1ab572386110f4f6c174fc982857e0a9a3"/><section>
    <title>end()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns a const iterator to one-past-the-last component in the path. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1ab572386110f4f6c174fc982857e0a9a3"/><section>
    <title>end()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> path::end ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14"/><section>
    <title>end()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> path::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns an iterator to one-past-the-last component in the path. </para>
</para>

<para><formalpara><title>See also</title>

<para>#toml::path_component </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14"/><section>
    <title>end()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>end</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>end</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link> path::end ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1acba8ae5b25b11f25ffcc6a30226f98e9"/><section>
    <title>leaf()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>leaf</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>leaf</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::leaf (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n = <computeroutput>1</computeroutput>
) const</computeroutput></para><para>

<para>Returns a toml::path object representing terminal n-parts of a TOML path. </para>
</para>
</section>
<anchor xml:id="_classpath_1acba8ae5b25b11f25ffcc6a30226f98e9"/><section>
    <title>leaf()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>leaf</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>leaf</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::leaf (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n = <computeroutput>1</computeroutput>
) const</computeroutput></para></section>
<anchor xml:id="_classpath_1aaea06d1801de5c9949608ecc846fd3fc"/><section>
    <title>operator bool()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> path::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns true if the path has one or more components. </para>
</para>
</section>
<anchor xml:id="_classpath_1aaea06d1801de5c9949608ecc846fd3fc"/><section>
    <title>operator bool()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> path::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba"/><section>
    <title>operator std::string()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator std::string</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator std::string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> path::operator std::string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Returns a string representation of this path. </para>
</para>
</section>
<anchor xml:id="_classpath_1a63e1c848a446e106f3f288dd2ec7a5ba"/><section>
    <title>operator std::string()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator std::string</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator std::string</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> path::operator std::string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a7d86e6cb5f7e5bbd02c5e402f498120e"/><section>
    <title>operator std::wstring()</title>
<indexterm><primary>operator std::wstring</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator std::wstring</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> path::operator std::wstring ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Returns a string representation of this path. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1ac4088e42d302fc936f17befaf31b13cd"/><section>
    <title>operator+=()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator+= (const <link linkend="_classpath">path</link> &amp; )</computeroutput></para><para>

<para>Appends another path onto the end of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1ac4088e42d302fc936f17befaf31b13cd"/><section>
    <title>operator+=()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator+= (const <link linkend="_classpath">path</link> &amp; )</computeroutput></para></section>
<anchor xml:id="_classpath_1a64495dea1b6bd512bb83b3c09f1179b7"/><section>
    <title>operator+=()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator+= (<link linkend="_classpath">path</link> &amp;&amp; )</computeroutput></para><para>

<para>Appends another path onto the end of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1a64495dea1b6bd512bb83b3c09f1179b7"/><section>
    <title>operator+=()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator+= (<link linkend="_classpath">path</link> &amp;&amp; )</computeroutput></para></section>
<anchor xml:id="_classpath_1ada94a75d67f40659f162087348d795e6"/><section>
    <title>operator+=()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator+= (std::string_view )</computeroutput></para><para>

<para>Parses a path and appends it onto the end of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1ada94a75d67f40659f162087348d795e6"/><section>
    <title>operator+=()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator+= (std::string_view )</computeroutput></para></section>
<anchor xml:id="_classpath_1a892d2e6a87e16e3fb689b0f31d9ac98b"/><section>
    <title>operator+=()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator+= (std::wstring_view )</computeroutput></para><para>

<para>Parses a path and appends it onto the end of this one. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1ae994d06e46e0f0fa99dd861af3695ded"/><section>
    <title>operator=()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classpath">path</link> &amp; path::operator= (const <link linkend="_classpath">path</link> &amp; )<computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>Copy-assignment operator. </para>
</para>
</section>
<anchor xml:id="_classpath_1ae994d06e46e0f0fa99dd861af3695ded"/><section>
    <title>operator=()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classpath">path</link> &amp; path::operator= (const <link linkend="_classpath">path</link> &amp; )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a96333863378c9acd152057c39432e5eb"/><section>
    <title>operator=()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classpath">path</link> &amp; path::operator= (<link linkend="_classpath">path</link> &amp;&amp; )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move-assignment operator. </para>
</para>
</section>
<anchor xml:id="_classpath_1a96333863378c9acd152057c39432e5eb"/><section>
    <title>operator=()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classpath">path</link> &amp; path::operator= (<link linkend="_classpath">path</link> &amp;&amp; )<computeroutput>[default]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a09b032262927c74fdda6558473fba5f5"/><section>
    <title>operator=()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator= (std::string_view )</computeroutput></para><para>

<para>Replaces the contents of the path by parsing from a string. </para>
</para>
</section>
<anchor xml:id="_classpath_1a09b032262927c74fdda6558473fba5f5"/><section>
    <title>operator=()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator= (std::string_view )</computeroutput></para></section>
<anchor xml:id="_classpath_1abaf28303481a19dc0f69f5c4da1b198e"/><section>
    <title>operator=()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::operator= (std::wstring_view )</computeroutput></para><para>

<para>Replaces the contents of the path by parsing from a string. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1a1a6eaebc56ebf6dfcb3bccd110f2f46a"/><section>
    <title>operator[]()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_classpath__component">path_component</link> &amp; path::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Fetch a path component by index (const overload). </para>
</para>
</section>
<anchor xml:id="_classpath_1a1a6eaebc56ebf6dfcb3bccd110f2f46a"/><section>
    <title>operator[]()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> const <link linkend="_classpath__component">path_component</link> &amp; path::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a9cdc930401b6c973dd9c7d91b649f87e"/><section>
    <title>operator[]()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath__component">path_component</link> &amp; path::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Fetch a path component by index. </para>
</para>
</section>
<anchor xml:id="_classpath_1a9cdc930401b6c973dd9c7d91b649f87e"/><section>
    <title>operator[]()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator[]</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="_classpath__component">path_component</link> &amp; path::operator[] (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a0e6eb582abfb5ecbc3378f18a581e2a0"/><section>
    <title>parent()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>parent</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>parent</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::parent ( ) const</computeroutput></para><para>

<para>Returns a toml::path object representing the path of the parent node. </para>
</para>
</section>
<anchor xml:id="_classpath_1a0e6eb582abfb5ecbc3378f18a581e2a0"/><section>
    <title>parent()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>parent</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>parent</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::parent ( ) const</computeroutput></para></section>
<anchor xml:id="_classpath_1aa660d65893eeb1a91dada668633bc6fd"/><section>
    <title>prepend()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>prepend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>prepend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::prepend (const <link linkend="_classpath">path</link> &amp; )</computeroutput></para><para>

<para>Prepends another path onto the beginning of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1aa660d65893eeb1a91dada668633bc6fd"/><section>
    <title>prepend()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>prepend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>prepend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::prepend (const <link linkend="_classpath">path</link> &amp; )</computeroutput></para></section>
<anchor xml:id="_classpath_1a41b121bfb894bf24fbba2524efd0e1ac"/><section>
    <title>prepend()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>prepend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>prepend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::prepend (<link linkend="_classpath">path</link> &amp;&amp; )</computeroutput></para><para>

<para>Prepends another path onto the beginning of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1a41b121bfb894bf24fbba2524efd0e1ac"/><section>
    <title>prepend()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>prepend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>prepend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::prepend (<link linkend="_classpath">path</link> &amp;&amp; )</computeroutput></para></section>
<anchor xml:id="_classpath_1aa15d82e160b9efe3bfa888b4bfb79b81"/><section>
    <title>prepend()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>prepend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>prepend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::prepend (std::string_view )</computeroutput></para><para>

<para>Parses a path and prepends it onto the beginning of this one. </para>
</para>
</section>
<anchor xml:id="_classpath_1aa15d82e160b9efe3bfa888b4bfb79b81"/><section>
    <title>prepend()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>prepend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>prepend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::prepend (std::string_view )</computeroutput></para></section>
<anchor xml:id="_classpath_1a8a60a6799ef2f3dfe7d95ace89f9bbc9"/><section>
    <title>prepend()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>prepend</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>prepend</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::prepend (std::wstring_view )</computeroutput></para><para>

<para>Parses a path and prepends it onto the beginning of this one. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691"/><section>
    <title>size()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> path::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Returns the number of components in the path. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_a4c5fe971603ea9fd3107ca14e9c60691_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_a4c5fe971603ea9fd3107ca14e9c60691_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691"/><section>
    <title>size()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>size</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>size</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> path::size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classpath_a4c5fe971603ea9fd3107ca14e9c60691_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7"/><section>
    <title>str()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>str</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>str</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> std::string path::str ( ) const</computeroutput></para><para>

<para>Returns a string representation of this path. </para>
</para>
</section>
<anchor xml:id="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7"/><section>
    <title>str()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>str</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>str</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> std::string path::str ( ) const</computeroutput></para></section>
<anchor xml:id="_classpath_1af550d277cd6628ce830315fd95c2ee18"/><section>
    <title>subpath()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>subpath</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>subpath</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::subpath (<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> start, <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> end) const</computeroutput></para><para>

<para>Returns a toml::path object that is a specified subpath of the current path, representing the range of path components from [start, end). </para>
</para>
</section>
<anchor xml:id="_classpath_1af550d277cd6628ce830315fd95c2ee18"/><section>
    <title>subpath()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>subpath</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>subpath</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::subpath (<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> start, <link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link> end) const</computeroutput></para></section>
<anchor xml:id="_classpath_1ab968d69ab16d3edce0005630be2bd913"/><section>
    <title>subpath()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>subpath</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>subpath</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::subpath (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> start, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> length) const</computeroutput></para><para>

<para>Returns a toml::path object that is a specified subpath of the current path, representing the range of path components with indexes from [start, start + length]. </para>
</para>
</section>
<anchor xml:id="_classpath_1ab968d69ab16d3edce0005630be2bd913"/><section>
    <title>subpath()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>subpath</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>subpath</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::subpath (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> start, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> length) const</computeroutput></para></section>
<anchor xml:id="_classpath_1a167b26b6e68446fd12e06a6f64dad850"/><section>
    <title>truncate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>truncate</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>truncate</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::truncate (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n)</computeroutput></para><para>

<para>Removes the number of terminal path components specified by n. </para>
</para>
</section>
<anchor xml:id="_classpath_1a167b26b6e68446fd12e06a6f64dad850"/><section>
    <title>truncate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>truncate</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>truncate</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> &amp; path::truncate (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n)</computeroutput></para></section>
<anchor xml:id="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba"/><section>
    <title>truncated()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>truncated</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>truncated</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::truncated (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n) const</computeroutput></para><para>

<para>Returns a toml::path object which has had n terminal path components removed. </para>
</para>
</section>
<anchor xml:id="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba"/><section>
    <title>truncated()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>truncated</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>truncated</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> <link linkend="_classpath">path</link> path::truncated (<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> n) const</computeroutput></para></section>
<anchor xml:id="_classpath_1a0927a2cb65d7b1ef4305898276b2ca4a"/><section>
    <title>wide_str()</title>
<indexterm><primary>wide_str</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>wide_str</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1adf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link> std::wstring path::wide_str ( ) const</computeroutput></para><para>

<para>Returns a string representation of this path. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_classpath_1a1733dc9036ef632af15486e604c4b477"/><section>
    <title>operator!=<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classpath">path</link> &amp; lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are not the same. </para>
</para>
</section>
<anchor xml:id="_classpath_1a1733dc9036ef632af15486e604c4b477"/><section>
    <title>operator!=<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classpath">path</link> &amp; lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a17adb560b17accb885ba871f492e45f2"/><section>
    <title>operator!=<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classpath">path</link> &amp; lhs, std::string_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are not the same. </para>
</para>
</section>
<anchor xml:id="_classpath_1a17adb560b17accb885ba871f492e45f2"/><section>
    <title>operator!=<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classpath">path</link> &amp; lhs, std::string_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1ac3a98d28d7b1e94834ac73759a7789ec"/><section>
    <title>operator!=<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_classpath">path</link> &amp; lhs, std::wstring_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are not the same. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1a0577876d473c22d81b5e3f6e519af57c"/><section>
    <title>operator!=<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (std::string_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are not the same. </para>
</para>
</section>
<anchor xml:id="_classpath_1a0577876d473c22d81b5e3f6e519af57c"/><section>
    <title>operator!=<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (std::string_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a5b024dec835f174a68a456a2da2f8d6d"/><section>
    <title>operator!=<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (std::wstring_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are not the same. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1ad5e5060120620271acb20e8a74f2021f"/><section>
    <title>operator+<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (const <link linkend="_classpath">path</link> &amp; lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Concatenates two paths. </para>
</para>
</section>
<anchor xml:id="_classpath_1ad5e5060120620271acb20e8a74f2021f"/><section>
    <title>operator+<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (const <link linkend="_classpath">path</link> &amp; lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a48d54d0f3eb9f644a45102ee73f1cff5"/><section>
    <title>operator+<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (const <link linkend="_classpath">path</link> &amp; lhs, std::string_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Concatenates two paths. </para>
</para>
</section>
<anchor xml:id="_classpath_1a48d54d0f3eb9f644a45102ee73f1cff5"/><section>
    <title>operator+<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (const <link linkend="_classpath">path</link> &amp; lhs, std::string_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a991f68ea1c70885c029a64bfbf445d69"/><section>
    <title>operator+<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (const <link linkend="_classpath">path</link> &amp; lhs, std::wstring_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Concatenates two paths. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1a512781b98cad27ab8c8a59b110485fee"/><section>
    <title>operator+<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (std::string_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Concatenates two paths. </para>
</para>
</section>
<anchor xml:id="_classpath_1a512781b98cad27ab8c8a59b110485fee"/><section>
    <title>operator+<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (std::string_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a06a9534d3f26fbcd1b563c5e90b34819"/><section>
    <title>operator+<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> friend <link linkend="_classpath">path</link> operator+ (std::wstring_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Concatenates two paths. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1a20e0b1c8c31800bc968cc1f67bc51556"/><section>
    <title>operator&lt;&lt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Prints the string representation of a #toml::path out to a stream. </para>
</para>
</section>
<anchor xml:id="_classpath_1a20e0b1c8c31800bc968cc1f67bc51556"/><section>
    <title>operator&lt;&lt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend std::ostream &amp; operator&lt;&lt; (std::ostream &amp; os, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1a1a468cbd804317b18eafbaa91c06baf8"/><section>
    <title>operator==<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classpath">path</link> &amp; lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are the same. </para>
</para>
</section>
<anchor xml:id="_classpath_1a1a468cbd804317b18eafbaa91c06baf8"/><section>
    <title>operator==<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classpath">path</link> &amp; lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1af5859e43bd1db2967505992d3087a193"/><section>
    <title>operator==<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classpath">path</link> &amp; lhs, std::string_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are the same. </para>
</para>
</section>
<anchor xml:id="_classpath_1af5859e43bd1db2967505992d3087a193"/><section>
    <title>operator==<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classpath">path</link> &amp; lhs, std::string_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1adb6aa7f1b9da69aac8853c17568130dd"/><section>
    <title>operator==<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_classpath">path</link> &amp; lhs, std::wstring_view rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are the same. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<anchor xml:id="_classpath_1ab673764882b72f84b82f34f51beeea6f"/><section>
    <title>operator==<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (std::string_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are the same. </para>
</para>
</section>
<anchor xml:id="_classpath_1ab673764882b72f84b82f34f51beeea6f"/><section>
    <title>operator==<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (std::string_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classpath_1aee32429464d115ed5e67d0332ddb8fc6"/><section>
    <title>operator==<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>path</secondary></indexterm>
<indexterm><primary>path</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput><link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link> <link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (std::wstring_view lhs, const <link linkend="_classpath">path</link> &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Returns whether two paths are the same. </para>
</para>

<para>\availability This overload is only available when <link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link> is enabled. </para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/<link linkend="_path_8h">path.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/<link linkend="_toml_8hpp">toml.hpp</link></section>
</section>
