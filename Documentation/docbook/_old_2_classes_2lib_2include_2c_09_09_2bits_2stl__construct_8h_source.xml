<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__construct_8h_source" xml:lang="en-US">
<title>stl_construct.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_construct.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;nonstandard&#32;construct&#32;and&#32;destroy&#32;functions&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_CONSTRUCT_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_CONSTRUCT_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;iterator_traits</emphasis>
62 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_funcs.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;advance</emphasis>
63 
64 <emphasis role="comment">/*&#32;This&#32;file&#32;provides&#32;the&#32;C++17&#32;functions&#32;std::destroy_at,&#32;std::destroy,&#32;and</emphasis>
65 <emphasis role="comment">&#32;*&#32;std::destroy_n,&#32;and&#32;the&#32;C++20&#32;function&#32;std::construct_at.</emphasis>
66 <emphasis role="comment">&#32;*&#32;It&#32;also&#32;provides&#32;std::_Construct,&#32;std::_Destroy,and&#32;std::_Destroy_n&#32;functions</emphasis>
67 <emphasis role="comment">&#32;*&#32;which&#32;are&#32;defined&#32;in&#32;all&#32;standard&#32;modes&#32;and&#32;so&#32;can&#32;be&#32;used&#32;in&#32;C++98-14&#32;code.</emphasis>
68 <emphasis role="comment">&#32;*&#32;The&#32;_Destroy&#32;functions&#32;will&#32;dispatch&#32;to&#32;destroy_at&#32;during&#32;constant</emphasis>
69 <emphasis role="comment">&#32;*&#32;evaluation,&#32;because&#32;calls&#32;to&#32;that&#32;function&#32;are&#32;intercepted&#32;by&#32;the&#32;compiler</emphasis>
70 <emphasis role="comment">&#32;*&#32;to&#32;allow&#32;use&#32;in&#32;constant&#32;expressions.</emphasis>
71 <emphasis role="comment">&#32;*/</emphasis>
72 
73 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
74 {
75 _GLIBCXX_BEGIN_NAMESPACE_VERSION
76 
77 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
78 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
79 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
80 &#32;&#32;&#32;&#32;destroy_at(_Tp*&#32;__location)
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;is_array_v&lt;_Tp&gt;)
83 &#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;__x&#32;:&#32;*__location)
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::destroy_at(std::__addressof(__x));
86 &#32;&#32;&#32;&#32;}
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
88 &#32;&#32;&#32;&#32;__location-&gt;~_Tp();
89 &#32;&#32;&#32;&#32;}
90 
91 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
92 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
94 &#32;&#32;&#32;&#32;construct_at(_Tp*&#32;__location,&#32;_Args&amp;&amp;...&#32;__args)
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(::new((<emphasis role="keywordtype">void</emphasis>*)0)&#32;_Tp(std::declval&lt;_Args&gt;()...)))
96 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(::new((<emphasis role="keywordtype">void</emphasis>*)0)&#32;_Tp(std::declval&lt;_Args&gt;()...))
97 &#32;&#32;&#32;&#32;{&#32;return&#32;::new((<emphasis role="keywordtype">void</emphasis>*)__location)&#32;_Tp(std::forward&lt;_Args&gt;(__args)...);&#32;}
98 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
99 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
100 
105 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
106 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
107 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
109 &#32;&#32;&#32;&#32;_Construct(_Tp*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
110 &#32;&#32;&#32;&#32;{
111 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
113 &#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::_Construct&#32;to&#32;be&#32;used&#32;in&#32;constant&#32;expressions.</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__p,&#32;std::forward&lt;_Args&gt;(__args)...);
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
117 &#32;&#32;&#32;&#32;}
118 <emphasis role="preprocessor">#endif</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;::new((<emphasis role="keywordtype">void</emphasis>*)__p)&#32;_Tp(std::forward&lt;_Args&gt;(__args)...);
120 &#32;&#32;&#32;&#32;}
121 <emphasis role="preprocessor">#else</emphasis>
122 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
124 &#32;&#32;&#32;&#32;_Construct(_T1*&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__value)
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;402.&#32;wrong&#32;new&#32;expression&#32;in&#32;[some_]allocator::construct</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;::new(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__p))&#32;_T1(__value);
129 &#32;&#32;&#32;&#32;}
130 <emphasis role="preprocessor">#endif</emphasis>
131 
132 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1&gt;
133 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
134 &#32;&#32;&#32;&#32;_Construct_novalue(_T1*&#32;__p)
135 &#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>*)__p)&#32;_T1;&#32;}
136 
137 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
138 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
139 &#32;&#32;&#32;&#32;_Destroy(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last);
140 
144 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
145 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
146 &#32;&#32;&#32;&#32;_Destroy(_Tp*&#32;__pointer)
147 &#32;&#32;&#32;&#32;{
148 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;std::destroy_at(__pointer);
150 <emphasis role="preprocessor">#else</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;__pointer-&gt;~_Tp();
152 <emphasis role="preprocessor">#endif</emphasis>
153 &#32;&#32;&#32;&#32;}
154 
155 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Destroy_aux
157 &#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
160 &#32;&#32;&#32;&#32;__destroy(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(std::__addressof(*__first));
164 &#32;&#32;&#32;&#32;}
165 &#32;&#32;&#32;&#32;};
166 
167 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Destroy_aux&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
169 &#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__destroy(_ForwardIterator,&#32;_ForwardIterator)&#32;{&#32;}
173 &#32;&#32;&#32;&#32;};
174 
180 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
181 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
182 &#32;&#32;&#32;&#32;_Destroy(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
183 &#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Value_type;
186 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;deleted&#32;destructor&#32;is&#32;trivial,&#32;this&#32;ensures&#32;we&#32;reject&#32;such&#32;types:</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_destructible&lt;_Value_type&gt;::value,
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;value&#32;type&#32;is&#32;destructible&quot;</emphasis>);
190 <emphasis role="preprocessor">#endif</emphasis>
191 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Destroy_aux&lt;false&gt;::__destroy(__first,&#32;__last);
194 <emphasis role="preprocessor">#endif</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy_aux&lt;__has_trivial_destructor(_Value_type)&gt;::
196 &#32;&#32;&#32;&#32;__destroy(__first,&#32;__last);
197 &#32;&#32;&#32;&#32;}
198 
199 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
200 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Destroy_n_aux
201 &#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;_ForwardIterator
204 &#32;&#32;&#32;&#32;__destroy_n(_ForwardIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
205 &#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;&gt;&#32;0;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first,&#32;--<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(std::__addressof(*__first));
208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
209 &#32;&#32;&#32;&#32;}
210 &#32;&#32;&#32;&#32;};
211 
212 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Destroy_n_aux&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
214 &#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_ForwardIterator
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__destroy_n(_ForwardIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
218 &#32;&#32;&#32;&#32;{
219 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
221 &#32;&#32;&#32;&#32;}
222 &#32;&#32;&#32;&#32;};
223 
229 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
230 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
231 &#32;&#32;&#32;&#32;_Destroy_n(_ForwardIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
232 &#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Value_type;
235 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;deleted&#32;destructor&#32;is&#32;trivial,&#32;this&#32;ensures&#32;we&#32;reject&#32;such&#32;types:</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_destructible&lt;_Value_type&gt;::value,
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;value&#32;type&#32;is&#32;destructible&quot;</emphasis>);
239 <emphasis role="preprocessor">#endif</emphasis>
240 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Destroy_n_aux&lt;false&gt;::__destroy_n(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
243 <emphasis role="preprocessor">#endif</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Destroy_n_aux&lt;__has_trivial_destructor(_Value_type)&gt;::
245 &#32;&#32;&#32;&#32;__destroy_n(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
246 &#32;&#32;&#32;&#32;}
247 
248 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
249 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
250 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
251 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
252 &#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;&#32;&#32;std::_Destroy(__first,&#32;__last);
254 &#32;&#32;&#32;&#32;}
255 
256 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
257 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
258 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a8f834ac1395ecb3ee484e6dcdbd8998c">destroy_n</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
259 &#32;&#32;&#32;&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Destroy_n(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
261 &#32;&#32;&#32;&#32;}
262 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
263 
264 _GLIBCXX_END_NAMESPACE_VERSION
265 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
266 
267 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_CONSTRUCT_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
