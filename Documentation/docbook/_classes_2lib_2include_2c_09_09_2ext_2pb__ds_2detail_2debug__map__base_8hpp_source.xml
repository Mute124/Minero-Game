<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2debug__map__base_8hpp_source" xml:lang="en-US">
<title>debug_map_base.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/debug_map_base.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifndef&#32;PB_DS_DEBUG_MAP_BASE_HPP</emphasis>
42 <emphasis role="preprocessor">#define&#32;PB_DS_DEBUG_MAP_BASE_HPP</emphasis>
43 
44 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
45 
46 <emphasis role="preprocessor">#include&#32;&lt;list&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
48 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
49 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
50 <emphasis role="preprocessor">#include&#32;&lt;ext/throw_allocator.h&gt;</emphasis>
51 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
52 
53 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__pbds">__gnu_pbds</link>
54 {
55 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>detail
56 &#32;&#32;{
57 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Need&#32;std::pair&#32;ostream&#32;extractor.</emphasis>
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
60 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__out,
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&#32;p)
62 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__out&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;(&apos;</emphasis>&#32;&lt;&lt;&#32;p.first&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>&#32;&lt;&lt;&#32;p.second&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;)&apos;</emphasis>);&#32;}
63 
64 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_T_DEC&#32;\</emphasis>
65 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;typename&#32;Key,&#32;typename&#32;Eq_Fn,&#32;typename&#32;Const_Key_Reference&gt;</emphasis>
66 
67 <emphasis role="preprocessor">#define&#32;PB_DS_CLASS_C_DEC&#32;\</emphasis>
68 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;debug_map_base&lt;Key,&#32;Eq_Fn,&#32;Const_Key_Reference&gt;</emphasis>
69 
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;Eq_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;Const_Key_Reference&gt;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>debug_map_base
73 &#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Const_Key_Reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_const_reference;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::_GLIBCXX_STD_C::list&lt;Key&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_repository;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;key_repository::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;key_repository::iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;key_repository::const_iterator&#32;&#32;&#32;const_iterator;
80 
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
82 &#32;&#32;&#32;&#32;&#32;&#32;debug_map_base();
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;debug_map_base(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;);
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;~debug_map_base();
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;insert_new(key_const_reference);
90 
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;erase_existing(key_const_reference);
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;clear();
96 
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;check_key_exists(key_const_reference,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;check_key_does_not_exist(key_const_reference,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;check_size(size_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;);
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Cmp_Fn&gt;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;split(key_const_reference,&#32;Cmp_Fn,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;);
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;join(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;with_cleanup&#32;=&#32;<emphasis role="keyword">true</emphasis>);
115 
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;assert_valid(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
121 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(key_const_reference)&#32;<emphasis role="keyword">const</emphasis>;
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;iterator
124 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(key_const_reference);
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;key_repository&#32;&#32;&#32;&#32;m_keys;
127 &#32;&#32;&#32;&#32;&#32;&#32;Eq_Fn&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_eq;
128 &#32;&#32;&#32;&#32;};
129 
130 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
131 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
132 &#32;&#32;&#32;&#32;debug_map_base()
133 &#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))&#32;}
134 
135 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
136 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
137 &#32;&#32;&#32;&#32;debug_map_base(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
138 &#32;&#32;&#32;&#32;:&#32;m_keys(other.m_keys),&#32;m_eq(other.m_eq)
139 &#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))&#32;}
140 
141 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
142 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
143 &#32;&#32;&#32;&#32;~debug_map_base()
144 &#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))&#32;}
145 
146 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
148 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
149 &#32;&#32;&#32;&#32;insert_new(key_const_reference&#32;r_key)
150 &#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(r_key)&#32;!=&#32;m_keys.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;insert_new&#32;key&#32;already&#32;present&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r_key&#32;&lt;&lt;&#32;std::endl;
156 &#32;&#32;&#32;&#32;&#32;&#32;std::abort();
157 &#32;&#32;&#32;&#32;}
158 
159 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
160 &#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;m_keys.push_back(r_key);
162 &#32;&#32;&#32;&#32;}
163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
164 &#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;insert_new&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;r_key&#32;&lt;&lt;&#32;std::endl;
166 &#32;&#32;&#32;&#32;&#32;&#32;std::abort();
167 &#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
170 &#32;&#32;&#32;&#32;}
171 
172 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
174 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
175 &#32;&#32;&#32;&#32;erase_existing(key_const_reference&#32;r_key)
176 &#32;&#32;&#32;&#32;{
177 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
178 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it&#32;=&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(r_key);
179 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(it&#32;==&#32;m_keys.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
180 &#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;erase_existing&quot;</emphasis>&#32;&lt;&lt;&#32;r_key&#32;&lt;&lt;&#32;std::endl;
182 &#32;&#32;&#32;&#32;&#32;&#32;std::abort();
183 &#32;&#32;&#32;&#32;}
184 &#32;&#32;&#32;&#32;&#32;&#32;m_keys.erase(it);
185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
186 &#32;&#32;&#32;&#32;}
187 
188 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
190 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
191 &#32;&#32;&#32;&#32;clear()
192 &#32;&#32;&#32;&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
194 &#32;&#32;&#32;&#32;&#32;&#32;m_keys.clear();
195 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
196 &#32;&#32;&#32;&#32;}
197 
198 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
199 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
200 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
201 &#32;&#32;&#32;&#32;check_key_exists(key_const_reference&#32;r_key,
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
203 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
204 &#32;&#32;&#32;&#32;&#32;&#32;assert_valid(__file,&#32;__line);
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(r_key)&#32;==&#32;m_keys.end())
206 &#32;&#32;&#32;&#32;{
207 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;__file&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>&#32;&lt;&lt;&#32;__line&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;check_key_exists&#32;&quot;</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;r_key&#32;&lt;&lt;&#32;std::endl;
209 &#32;&#32;&#32;&#32;&#32;&#32;std::abort();
210 &#32;&#32;&#32;&#32;}
211 &#32;&#32;&#32;&#32;}
212 
213 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
215 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
216 &#32;&#32;&#32;&#32;check_key_does_not_exist(key_const_reference&#32;r_key,
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
218 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
219 &#32;&#32;&#32;&#32;&#32;&#32;assert_valid(__file,&#32;__line);
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(r_key)&#32;!=&#32;m_keys.end())
221 &#32;&#32;&#32;&#32;{
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::cerr;
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::endl;
224 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a54c1ce08041448d684ae8edc14162cd2">cerr</link>&#32;&lt;&lt;&#32;__file&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>&#32;&lt;&lt;&#32;__line&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;check_key_does_not_exist&#32;&quot;</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;r_key&#32;&lt;&lt;&#32;<link linkend="_namespacem_i_n_i_1_1_i_n_i_string_util_1aa858bebf97541c7693112af6eb7ef5b4">endl</link>;
226 &#32;&#32;&#32;&#32;&#32;&#32;std::abort();
227 &#32;&#32;&#32;&#32;}
228 &#32;&#32;&#32;&#32;}
229 
230 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
231 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
232 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
233 &#32;&#32;&#32;&#32;check_size(size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
234 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
235 &#32;&#32;&#32;&#32;&#32;&#32;assert_valid(__file,&#32;__line);
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;keys_size&#32;=&#32;m_keys.size();
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;!=&#32;keys_size)
238 &#32;&#32;&#32;&#32;{
239 &#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;__file&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>&#32;&lt;&lt;&#32;__line&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;check_size&#32;&quot;</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;!=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;keys_size&#32;&lt;&lt;&#32;std::endl;
241 &#32;&#32;&#32;&#32;&#32;&#32;std::abort();
242 &#32;&#32;&#32;&#32;}
243 &#32;&#32;&#32;&#32;&#32;}
244 
245 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
246 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
247 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
248 &#32;&#32;&#32;&#32;swap(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
249 &#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
251 &#32;&#32;&#32;&#32;&#32;&#32;m_keys.swap(other.m_keys);
252 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::swap(m_eq,&#32;other.m_eq);
253 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
254 &#32;&#32;&#32;&#32;}
255 
256 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
257 &#32;&#32;&#32;&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::const_iterator
258 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
259 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(key_const_reference&#32;r_key)<emphasis role="keyword">&#32;const</emphasis>
260 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
261 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
262 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;const_iterator&#32;iterator_type;
263 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(iterator_type&#32;it&#32;=&#32;m_keys.begin();&#32;it&#32;!=&#32;m_keys.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
264 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(m_eq(*it,&#32;r_key))
265 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;it;
266 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;m_keys.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
267 &#32;&#32;&#32;&#32;}
268 
269 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
270 &#32;&#32;&#32;&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::iterator
271 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
272 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(key_const_reference&#32;r_key)
273 &#32;&#32;&#32;&#32;{
274 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
275 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it&#32;=&#32;m_keys.begin();
276 &#32;&#32;&#32;&#32;&#32;&#32;while&#32;(it&#32;!=&#32;m_keys.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
277 &#32;&#32;&#32;&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_eq(*it,&#32;r_key))
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it;
280 &#32;&#32;&#32;&#32;&#32;&#32;++it;
281 &#32;&#32;&#32;&#32;}
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it;
283 &#32;&#32;&#32;&#32;&#32;}
284 
285 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
286 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
287 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
288 &#32;&#32;&#32;&#32;assert_valid(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
289 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
290 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;prime_it&#32;=&#32;m_keys.begin();
291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(prime_it&#32;!=&#32;m_keys.end())
292 &#32;&#32;&#32;&#32;{
293 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;sec_it&#32;=&#32;prime_it;
294 &#32;&#32;&#32;&#32;&#32;&#32;++sec_it;
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(sec_it&#32;!=&#32;m_keys.end())
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(!m_eq(*sec_it,&#32;*prime_it));
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(!m_eq(*prime_it,&#32;*sec_it));
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++sec_it;
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
301 &#32;&#32;&#32;&#32;&#32;&#32;++prime_it;
302 &#32;&#32;&#32;&#32;}
303 &#32;&#32;&#32;&#32;}
304 
305 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Cmp_Fn&gt;
307 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
308 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
309 &#32;&#32;&#32;&#32;split(key_const_reference&#32;r_key,&#32;Cmp_Fn&#32;cmp_fn,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
310 &#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;other.clear();
312 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it&#32;=&#32;m_keys.begin();
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(it&#32;!=&#32;m_keys.end())
314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cmp_fn(r_key,&#32;*it))
315 &#32;&#32;&#32;&#32;&#32;&#32;{
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.insert_new(*it);
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;m_keys.erase(it);
318 &#32;&#32;&#32;&#32;&#32;&#32;}
319 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
320 &#32;&#32;&#32;&#32;&#32;&#32;++it;
321 &#32;&#32;&#32;&#32;}
322 
323 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
324 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
325 &#32;&#32;&#32;&#32;PB_DS_CLASS_C_DEC::
326 &#32;&#32;&#32;&#32;join(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;with_cleanup)
327 &#32;&#32;&#32;&#32;{
328 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;it&#32;=&#32;other.m_keys.begin();
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(it&#32;!=&#32;other.m_keys.end())
330 &#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;&#32;&#32;insert_new(*it);
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(with_cleanup)
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;other.m_keys.erase(it);
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++it;
336 &#32;&#32;&#32;&#32;}
337 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(!with_cleanup&#32;||&#32;other.m_keys.empty());
338 &#32;&#32;&#32;&#32;}
339 
340 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_T_DEC</emphasis>
341 <emphasis role="preprocessor">#undef&#32;PB_DS_CLASS_C_DEC</emphasis>
342 
343 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
344 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_pbds</emphasis>
345 
346 
347 <emphasis role="preprocessor">#endif</emphasis>
348 
349 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
