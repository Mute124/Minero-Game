<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2tr1_2hashtable__policy_8h_source" xml:lang="en-US">
<title>hashtable_policy.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/tr1/hashtable_policy.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Internal&#32;policy&#32;header&#32;for&#32;TR1&#32;unordered_set&#32;and&#32;unordered_map&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2010-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
32 {&#32;
33 _GLIBCXX_BEGIN_NAMESPACE_VERSION
34 
35 <emphasis role="keyword">namespace&#32;</emphasis>tr1
36 {
37 <emphasis role="keyword">namespace&#32;</emphasis>__detail
38 {
39 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;function:&#32;return&#32;distance(first,&#32;last)&#32;for&#32;forward</emphasis>
40 &#32;&#32;<emphasis role="comment">//&#32;iterators,&#32;or&#32;0&#32;for&#32;input&#32;iterators.</emphasis>
41 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Iterator&gt;
42 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::difference_type
43 &#32;&#32;&#32;&#32;__distance_fw(_Iterator&#32;__first,&#32;_Iterator&#32;__last,
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
45 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
46 
47 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Iterator&gt;
48 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::difference_type
49 &#32;&#32;&#32;&#32;__distance_fw(_Iterator&#32;__first,&#32;_Iterator&#32;__last,
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
51 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::distance(__first,&#32;__last);&#32;}
52 
53 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Iterator&gt;
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::difference_type
55 &#32;&#32;&#32;&#32;__distance_fw(_Iterator&#32;__first,&#32;_Iterator&#32;__last)
56 &#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::iterator_category&#32;_Tag;
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__distance_fw(__first,&#32;__last,&#32;_Tag());
59 &#32;&#32;&#32;&#32;}
60 
61 &#32;&#32;<emphasis role="comment">//&#32;Auxiliary&#32;types&#32;used&#32;for&#32;all&#32;instantiations&#32;of&#32;_Hashtable:&#32;nodes</emphasis>
62 &#32;&#32;<emphasis role="comment">//&#32;and&#32;iterators.</emphasis>
63 &#32;&#32;
64 &#32;&#32;<emphasis role="comment">//&#32;Nodes,&#32;used&#32;to&#32;wrap&#32;elements&#32;stored&#32;in&#32;the&#32;hash&#32;table.&#32;&#32;A&#32;policy</emphasis>
65 &#32;&#32;<emphasis role="comment">//&#32;template&#32;parameter&#32;of&#32;class&#32;template&#32;_Hashtable&#32;controls&#32;whether</emphasis>
66 &#32;&#32;<emphasis role="comment">//&#32;nodes&#32;also&#32;store&#32;a&#32;hash&#32;code.&#32;In&#32;some&#32;cases&#32;(e.g.&#32;strings)&#32;this</emphasis>
67 &#32;&#32;<emphasis role="comment">//&#32;may&#32;be&#32;a&#32;performance&#32;win.</emphasis>
68 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache_hash_code&gt;
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_node;
70 
71 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_node&lt;_Value,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
73 &#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;_Value&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_v;
75 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;&#32;_M_hash_code;
76 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_node*&#32;&#32;_M_next;
77 &#32;&#32;&#32;&#32;};
78 
79 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value&gt;
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_node&lt;_Value,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;_Value&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_v;
83 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_node*&#32;&#32;_M_next;
84 &#32;&#32;&#32;&#32;};
85 
86 &#32;&#32;<emphasis role="comment">//&#32;Local&#32;iterators,&#32;used&#32;to&#32;iterate&#32;within&#32;a&#32;bucket&#32;but&#32;not&#32;between</emphasis>
87 &#32;&#32;<emphasis role="comment">//&#32;buckets.</emphasis>
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Node_iterator_base
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;_Node_iterator_base(_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;__p)
92 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__p)&#32;{&#32;}
93 &#32;&#32;&#32;&#32;&#32;&#32;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;_M_incr()
96 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_cur&#32;=&#32;_M_cur-&gt;_M_next;&#32;}
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;&#32;_M_cur;
99 &#32;&#32;&#32;&#32;};
100 
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
103 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__x,
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__y)
105 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_cur&#32;==&#32;__y._M_cur;&#32;}
106 
107 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
109 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__x,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__y)
111 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_cur&#32;!=&#32;__y._M_cur;&#32;}
112 
113 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant_iterators,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Node_iterator
115 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Value&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__conditional_type&lt;__constant_iterators,
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Value*,&#32;_Value*&gt;::__type
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__conditional_type&lt;__constant_iterators,
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&amp;,&#32;_Value&amp;&gt;::__type
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_category;
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;_Node_iterator()
130 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;(0)&#32;{&#32;}
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;_Node_iterator(_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;__p)
134 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;(__p)&#32;{&#32;}
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;reference
137 &#32;&#32;&#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
138 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_cur-&gt;_M_v;&#32;}
139 &#32;&#32;
140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
141 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
142 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(this-&gt;_M_cur-&gt;_M_v);&#32;}
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;_Node_iterator&amp;
145 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
146 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
147 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;
149 &#32;&#32;&#32;&#32;&#32;&#32;}
150 &#32;&#32;
151 &#32;&#32;&#32;&#32;&#32;&#32;_Node_iterator
152 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
153 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
154 &#32;&#32;&#32;&#32;_Node_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
155 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
157 &#32;&#32;&#32;&#32;&#32;&#32;}
158 &#32;&#32;&#32;&#32;};
159 
160 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant_iterators,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Node_const_iterator
162 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Value&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Value*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_category;
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;_Node_const_iterator()
171 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;(0)&#32;{&#32;}
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;_Node_const_iterator(_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;__p)
175 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;(__p)&#32;{&#32;}
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;_Node_const_iterator(<emphasis role="keyword">const</emphasis>&#32;_Node_iterator&lt;_Value,&#32;__constant_iterators,
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cache&gt;&amp;&#32;__x)
179 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_iterator_base&lt;_Value,&#32;__cache&gt;(__x._M_cur)&#32;{&#32;}
180 
181 &#32;&#32;&#32;&#32;&#32;&#32;reference
182 &#32;&#32;&#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
183 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_cur-&gt;_M_v;&#32;}
184 &#32;&#32;
185 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
186 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
187 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(this-&gt;_M_cur-&gt;_M_v);&#32;}
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;_Node_const_iterator&amp;
190 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
191 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
192 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;
194 &#32;&#32;&#32;&#32;&#32;&#32;}
195 &#32;&#32;
196 &#32;&#32;&#32;&#32;&#32;&#32;_Node_const_iterator
197 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
198 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
199 &#32;&#32;&#32;&#32;_Node_const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
200 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
202 &#32;&#32;&#32;&#32;&#32;&#32;}
203 &#32;&#32;&#32;&#32;};
204 
205 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_iterator_base
207 &#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator_base(_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;__node,
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;__cache&gt;**&#32;__bucket)
210 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur_node(__node),&#32;_M_cur_bucket(__bucket)&#32;{&#32;}
211 
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;_M_incr()
214 &#32;&#32;&#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;_M_cur_node&#32;=&#32;_M_cur_node-&gt;_M_next;
216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_cur_node)
217 &#32;&#32;&#32;&#32;&#32;&#32;_M_incr_bucket();
218 &#32;&#32;&#32;&#32;&#32;&#32;}
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
221 &#32;&#32;&#32;&#32;&#32;&#32;_M_incr_bucket();
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;&#32;&#32;_M_cur_node;
224 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;__cache&gt;**&#32;&#32;_M_cur_bucket;
225 &#32;&#32;&#32;&#32;};
226 
227 &#32;&#32;<emphasis role="comment">//&#32;Global&#32;iterators,&#32;used&#32;for&#32;arbitrary&#32;iteration&#32;within&#32;a&#32;hash</emphasis>
228 &#32;&#32;<emphasis role="comment">//&#32;table.&#32;&#32;Larger&#32;and&#32;more&#32;expensive&#32;than&#32;local&#32;iterators.</emphasis>
229 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
230 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
231 &#32;&#32;&#32;&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;::
232 &#32;&#32;&#32;&#32;_M_incr_bucket()
233 &#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;&#32;&#32;++_M_cur_bucket;
235 
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;loop&#32;requires&#32;the&#32;bucket&#32;array&#32;to&#32;have&#32;a&#32;non-null&#32;sentinel.</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!*_M_cur_bucket)
238 &#32;&#32;&#32;&#32;++_M_cur_bucket;
239 &#32;&#32;&#32;&#32;&#32;&#32;_M_cur_node&#32;=&#32;*_M_cur_bucket;
240 &#32;&#32;&#32;&#32;}
241 
242 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
243 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
244 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__x,
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__y)
246 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_cur_node&#32;==&#32;__y._M_cur_node;&#32;}
247 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
250 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__x,
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;&amp;&#32;__y)
252 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_cur_node&#32;!=&#32;__y._M_cur_node;&#32;}
253 
254 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant_iterators,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
255 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_iterator
256 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;
257 &#32;&#32;&#32;&#32;{
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Value&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__conditional_type&lt;__constant_iterators,
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Value*,&#32;_Value*&gt;::__type
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__conditional_type&lt;__constant_iterators,
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&amp;,&#32;_Value&amp;&gt;::__type
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_category;
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator()
271 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;(0,&#32;0)&#32;{&#32;}
272 
273 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator(_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;__p,
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;__cache&gt;**&#32;__b)
275 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;(__p,&#32;__b)&#32;{&#32;}
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator(_Hash_node&lt;_Value,&#32;__cache&gt;**&#32;__b)
279 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;(*__b,&#32;__b)&#32;{&#32;}
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;reference
282 &#32;&#32;&#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
283 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_cur_node-&gt;_M_v;&#32;}
284 &#32;&#32;
285 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
286 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
287 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(this-&gt;_M_cur_node-&gt;_M_v);&#32;}
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator&amp;
290 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
291 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
292 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
294 &#32;&#32;&#32;&#32;&#32;&#32;}
295 &#32;&#32;
296 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator
297 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
298 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
299 &#32;&#32;&#32;&#32;_Hashtable_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
300 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
302 &#32;&#32;&#32;&#32;&#32;&#32;}
303 &#32;&#32;&#32;&#32;};
304 
305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant_iterators,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache&gt;
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_const_iterator
307 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;
308 &#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Value&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Value*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Value&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_category;
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator()
316 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;(0,&#32;0)&#32;{&#32;}
317 
318 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator(_Hash_node&lt;_Value,&#32;__cache&gt;*&#32;__p,
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;__cache&gt;**&#32;__b)
320 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;(__p,&#32;__b)&#32;{&#32;}
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
323 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator(_Hash_node&lt;_Value,&#32;__cache&gt;**&#32;__b)
324 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;(*__b,&#32;__b)&#32;{&#32;}
325 
326 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator(<emphasis role="keyword">const</emphasis>&#32;_Hashtable_iterator&lt;_Value,
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__constant_iterators,&#32;__cache&gt;&amp;&#32;__x)
328 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Hashtable_iterator_base&lt;_Value,&#32;__cache&gt;(__x._M_cur_node,
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_cur_bucket)&#32;{&#32;}
330 
331 &#32;&#32;&#32;&#32;&#32;&#32;reference
332 &#32;&#32;&#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
333 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_cur_node-&gt;_M_v;&#32;}
334 &#32;&#32;
335 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
336 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
337 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(this-&gt;_M_cur_node-&gt;_M_v);&#32;}
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator&amp;
340 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
341 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
342 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
344 &#32;&#32;&#32;&#32;&#32;&#32;}
345 &#32;&#32;
346 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator
347 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
348 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
349 &#32;&#32;&#32;&#32;_Hashtable_const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
350 &#32;&#32;&#32;&#32;this-&gt;_M_incr();
351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
352 &#32;&#32;&#32;&#32;&#32;&#32;}
353 &#32;&#32;&#32;&#32;};
354 
355 
356 &#32;&#32;<emphasis role="comment">//&#32;Many&#32;of&#32;class&#32;template&#32;_Hashtable&apos;s&#32;template&#32;parameters&#32;are&#32;policy</emphasis>
357 &#32;&#32;<emphasis role="comment">//&#32;classes.&#32;&#32;These&#32;are&#32;defaults&#32;for&#32;the&#32;policies.</emphasis>
358 
359 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;range&#32;hashing&#32;function:&#32;use&#32;division&#32;to&#32;fold&#32;a&#32;large&#32;number</emphasis>
360 &#32;&#32;<emphasis role="comment">//&#32;into&#32;the&#32;range&#32;[0,&#32;N).</emphasis>
361 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mod_range_hashing
362 &#32;&#32;{
363 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;first_argument_type;
364 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;second_argument_type;
365 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;result_type;
366 
367 &#32;&#32;&#32;&#32;result_type
368 &#32;&#32;&#32;&#32;operator()(first_argument_type&#32;__num,&#32;second_argument_type&#32;__den)<emphasis role="keyword">&#32;const</emphasis>
369 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__num&#32;%&#32;__den;&#32;}
370 &#32;&#32;};
371 
372 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;ranged&#32;hash&#32;function&#32;H.&#32;&#32;In&#32;principle&#32;it&#32;should&#32;be&#32;a</emphasis>
373 &#32;&#32;<emphasis role="comment">//&#32;function&#32;object&#32;composed&#32;from&#32;objects&#32;of&#32;type&#32;H1&#32;and&#32;H2&#32;such&#32;that</emphasis>
374 &#32;&#32;<emphasis role="comment">//&#32;h(k,&#32;N)&#32;=&#32;h2(h1(k),&#32;N),&#32;but&#32;that&#32;would&#32;mean&#32;making&#32;extra&#32;copies&#32;of</emphasis>
375 &#32;&#32;<emphasis role="comment">//&#32;h1&#32;and&#32;h2.&#32;&#32;So&#32;instead&#32;we&apos;ll&#32;just&#32;use&#32;a&#32;tag&#32;to&#32;tell&#32;class&#32;template</emphasis>
376 &#32;&#32;<emphasis role="comment">//&#32;hashtable&#32;to&#32;do&#32;that&#32;composition.</emphasis>
377 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Default_ranged_hash&#32;{&#32;};
378 
379 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;value&#32;for&#32;rehash&#32;policy.&#32;&#32;Bucket&#32;size&#32;is&#32;(usually)&#32;the</emphasis>
380 &#32;&#32;<emphasis role="comment">//&#32;smallest&#32;prime&#32;that&#32;keeps&#32;the&#32;load&#32;factor&#32;small&#32;enough.</emphasis>
381 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Prime_rehash_policy
382 &#32;&#32;{
383 &#32;&#32;&#32;&#32;_Prime_rehash_policy(<emphasis role="keywordtype">float</emphasis>&#32;__z&#32;=&#32;1.0)
384 &#32;&#32;&#32;&#32;:&#32;_M_max_load_factor(__z),&#32;_M_growth_factor(2.f),&#32;_M_next_resize(0)&#32;{&#32;}
385 
386 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
387 &#32;&#32;&#32;&#32;max_load_factor()<emphasis role="keyword">&#32;const</emphasis>
388 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_max_load_factor;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;
389 
390 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;a&#32;bucket&#32;size&#32;no&#32;smaller&#32;than&#32;n.</emphasis>
391 &#32;&#32;&#32;&#32;std::size_t
392 &#32;&#32;&#32;&#32;_M_next_bkt(std::size_t&#32;__n)&#32;<emphasis role="keyword">const</emphasis>;
393 &#32;&#32;&#32;&#32;
394 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;a&#32;bucket&#32;count&#32;appropriate&#32;for&#32;n&#32;elements</emphasis>
395 &#32;&#32;&#32;&#32;std::size_t
396 &#32;&#32;&#32;&#32;_M_bkt_for_elements(std::size_t&#32;__n)&#32;<emphasis role="keyword">const</emphasis>;
397 &#32;&#32;&#32;&#32;
398 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__n_bkt&#32;is&#32;current&#32;bucket&#32;count,&#32;__n_elt&#32;is&#32;current&#32;element&#32;count,</emphasis>
399 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;__n_ins&#32;is&#32;number&#32;of&#32;elements&#32;to&#32;be&#32;inserted.&#32;&#32;Do&#32;we&#32;need&#32;to</emphasis>
400 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;increase&#32;bucket&#32;count?&#32;&#32;If&#32;so,&#32;return&#32;make_pair(true,&#32;n),&#32;where&#32;n</emphasis>
401 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;the&#32;new&#32;bucket&#32;count.&#32;&#32;If&#32;not,&#32;return&#32;make_pair(false,&#32;0).</emphasis>
402 &#32;&#32;&#32;&#32;std::pair&lt;bool,&#32;std::size_t&gt;
403 &#32;&#32;&#32;&#32;_M_need_rehash(std::size_t&#32;__n_bkt,&#32;std::size_t&#32;__n_elt,
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n_ins)&#32;<emphasis role="keyword">const</emphasis>;
405 
406 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_n_primes&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;long)&#32;!=&#32;8&#32;?&#32;256&#32;:&#32;256&#32;+&#32;48&#32;};
407 
408 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_max_load_factor;
409 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_growth_factor;
410 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;std::size_t&#32;&#32;_M_next_resize;
411 &#32;&#32;};
412 
413 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__prime_list[];
414 
415 &#32;&#32;<emphasis role="comment">//&#32;XXX&#32;This&#32;is&#32;a&#32;hack.&#32;&#32;There&apos;s&#32;no&#32;good&#32;reason&#32;for&#32;any&#32;of</emphasis>
416 &#32;&#32;<emphasis role="comment">//&#32;_Prime_rehash_policy&apos;s&#32;member&#32;functions&#32;to&#32;be&#32;inline.&#32;&#32;</emphasis>
417 
418 &#32;&#32;<emphasis role="comment">//&#32;Return&#32;a&#32;prime&#32;no&#32;smaller&#32;than&#32;n.</emphasis>
419 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::size_t
420 &#32;&#32;_Prime_rehash_policy::
421 &#32;&#32;_M_next_bkt(std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
422 <emphasis role="keyword">&#32;&#32;</emphasis>{
423 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;include&#32;the&#32;last&#32;prime&#32;in&#32;the&#32;search,&#32;so&#32;that&#32;anything</emphasis>
424 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;higher&#32;than&#32;the&#32;second-to-last&#32;prime&#32;returns&#32;a&#32;past-the-end</emphasis>
425 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterator&#32;that&#32;can&#32;be&#32;dereferenced&#32;to&#32;get&#32;the&#32;last&#32;prime.</emphasis>
426 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*&#32;__p
427 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::lower_bound(__prime_list,&#32;__prime_list&#32;+&#32;_S_n_primes&#32;-&#32;1,&#32;__n);
428 &#32;&#32;&#32;&#32;_M_next_resize&#32;=&#32;
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(__builtin_ceil(*__p&#32;*&#32;_M_max_load_factor));
430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__p;
431 &#32;&#32;}
432 
433 &#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;smallest&#32;prime&#32;p&#32;such&#32;that&#32;alpha&#32;p&#32;&gt;=&#32;n,&#32;where&#32;alpha</emphasis>
434 &#32;&#32;<emphasis role="comment">//&#32;is&#32;the&#32;load&#32;factor.</emphasis>
435 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::size_t
436 &#32;&#32;_Prime_rehash_policy::
437 &#32;&#32;_M_bkt_for_elements(std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
438 <emphasis role="keyword">&#32;&#32;</emphasis>{
439 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;__min_bkts&#32;=&#32;__n&#32;/&#32;_M_max_load_factor;
440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_next_bkt(__builtin_ceil(__min_bkts));
441 &#32;&#32;}
442 
443 &#32;&#32;<emphasis role="comment">//&#32;Finds&#32;the&#32;smallest&#32;prime&#32;p&#32;such&#32;that&#32;alpha&#32;p&#32;&gt;&#32;__n_elt&#32;+&#32;__n_ins.</emphasis>
444 &#32;&#32;<emphasis role="comment">//&#32;If&#32;p&#32;&gt;&#32;__n_bkt,&#32;return&#32;make_pair(true,&#32;p);&#32;otherwise&#32;return</emphasis>
445 &#32;&#32;<emphasis role="comment">//&#32;make_pair(false,&#32;0).&#32;&#32;In&#32;principle&#32;this&#32;isn&apos;t&#32;very&#32;different&#32;from&#32;</emphasis>
446 &#32;&#32;<emphasis role="comment">//&#32;_M_bkt_for_elements.</emphasis>
447 
448 &#32;&#32;<emphasis role="comment">//&#32;The&#32;only&#32;tricky&#32;part&#32;is&#32;that&#32;we&apos;re&#32;caching&#32;the&#32;element&#32;count&#32;at</emphasis>
449 &#32;&#32;<emphasis role="comment">//&#32;which&#32;we&#32;need&#32;to&#32;rehash,&#32;so&#32;we&#32;don&apos;t&#32;have&#32;to&#32;do&#32;a&#32;floating-point</emphasis>
450 &#32;&#32;<emphasis role="comment">//&#32;multiply&#32;for&#32;every&#32;insertion.</emphasis>
451 
452 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::pair&lt;bool,&#32;std::size_t&gt;
453 &#32;&#32;_Prime_rehash_policy::
454 &#32;&#32;_M_need_rehash(std::size_t&#32;__n_bkt,&#32;std::size_t&#32;__n_elt,
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n_ins)<emphasis role="keyword">&#32;const</emphasis>
456 <emphasis role="keyword">&#32;&#32;</emphasis>{
457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n_elt&#32;+&#32;__n_ins&#32;&gt;&#32;_M_next_resize)
458 &#32;&#32;&#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;__min_bkts&#32;=&#32;((float(__n_ins)&#32;+&#32;float(__n_elt))
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;_M_max_load_factor);
461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__min_bkts&#32;&gt;&#32;__n_bkt)
462 &#32;&#32;&#32;&#32;&#32;&#32;{
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__min_bkts&#32;=&#32;std::max(__min_bkts,&#32;_M_growth_factor&#32;*&#32;__n_bkt);
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">true</emphasis>,
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_next_bkt(__builtin_ceil(__min_bkts)));
466 &#32;&#32;&#32;&#32;&#32;&#32;}
467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;
468 &#32;&#32;&#32;&#32;&#32;&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_next_resize&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__builtin_ceil(__n_bkt&#32;*&#32;_M_max_load_factor));
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">false</emphasis>,&#32;0);
472 &#32;&#32;&#32;&#32;&#32;&#32;}
473 &#32;&#32;&#32;&#32;&#32;&#32;}
474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(<emphasis role="keyword">false</emphasis>,&#32;0);
476 &#32;&#32;}
477 
478 &#32;&#32;<emphasis role="comment">//&#32;Base&#32;classes&#32;for&#32;std::tr1::_Hashtable.&#32;&#32;We&#32;define&#32;these&#32;base</emphasis>
479 &#32;&#32;<emphasis role="comment">//&#32;classes&#32;because&#32;in&#32;some&#32;cases&#32;we&#32;want&#32;to&#32;do&#32;different&#32;things</emphasis>
480 &#32;&#32;<emphasis role="comment">//&#32;depending&#32;on&#32;the&#32;value&#32;of&#32;a&#32;policy&#32;class.&#32;&#32;In&#32;some&#32;cases&#32;the</emphasis>
481 &#32;&#32;<emphasis role="comment">//&#32;policy&#32;class&#32;affects&#32;which&#32;member&#32;functions&#32;and&#32;nested&#32;typedefs</emphasis>
482 &#32;&#32;<emphasis role="comment">//&#32;are&#32;defined;&#32;we&#32;handle&#32;that&#32;by&#32;specializing&#32;base&#32;class&#32;templates.</emphasis>
483 &#32;&#32;<emphasis role="comment">//&#32;Several&#32;of&#32;the&#32;base&#32;class&#32;templates&#32;need&#32;to&#32;access&#32;other&#32;members</emphasis>
484 &#32;&#32;<emphasis role="comment">//&#32;of&#32;class&#32;template&#32;_Hashtable,&#32;so&#32;we&#32;use&#32;the&#32;&quot;curiously&#32;recurring</emphasis>
485 &#32;&#32;<emphasis role="comment">//&#32;template&#32;pattern&quot;&#32;for&#32;them.</emphasis>
486 
487 &#32;&#32;<emphasis role="comment">//&#32;class&#32;template&#32;_Map_base.&#32;&#32;If&#32;the&#32;hashtable&#32;has&#32;a&#32;value&#32;type&#32;of&#32;the</emphasis>
488 &#32;&#32;<emphasis role="comment">//&#32;form&#32;pair&lt;T1,&#32;T2&gt;&#32;and&#32;a&#32;key&#32;extraction&#32;policy&#32;that&#32;returns&#32;the</emphasis>
489 &#32;&#32;<emphasis role="comment">//&#32;first&#32;part&#32;of&#32;the&#32;pair,&#32;the&#32;hashtable&#32;gets&#32;a&#32;mapped_type&#32;typedef.</emphasis>
490 &#32;&#32;<emphasis role="comment">//&#32;If&#32;it&#32;satisfies&#32;those&#32;criteria&#32;and&#32;also&#32;has&#32;unique&#32;keys,&#32;then&#32;it</emphasis>
491 &#32;&#32;<emphasis role="comment">//&#32;also&#32;gets&#32;an&#32;operator[].&#32;&#32;</emphasis>
492 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ex,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__unique,
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable&gt;
494 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Map_base&#32;{&#32;};
495 &#32;&#32;&#32;&#32;&#32;&#32;
496 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable&gt;
497 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Map_base&lt;_Key,&#32;_Pair,&#32;<link linkend="_namespacestd">std</link>::_Select1st&lt;_Pair&gt;,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_Hashtable&gt;
498 &#32;&#32;&#32;&#32;{
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair::second_type&#32;mapped_type;
500 &#32;&#32;&#32;&#32;};
501 
502 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable&gt;
503 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Map_base&lt;_Key,&#32;_Pair,&#32;<link linkend="_namespacestd">std</link>::_Select1st&lt;_Pair&gt;,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;_Hashtable&gt;
504 &#32;&#32;&#32;&#32;{
505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair::second_type&#32;mapped_type;
506 &#32;&#32;&#32;&#32;&#32;&#32;
507 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
508 &#32;&#32;&#32;&#32;&#32;&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k);
509 &#32;&#32;&#32;&#32;};
510 
511 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable&gt;
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Map_base&lt;_Key,&#32;_Pair,&#32;std::_Select1st&lt;_Pair&gt;,
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>,&#32;_Hashtable&gt;::mapped_type&amp;
514 &#32;&#32;&#32;&#32;_Map_base&lt;_Key,&#32;_Pair,&#32;std::_Select1st&lt;_Pair&gt;,&#32;<emphasis role="keyword">true</emphasis>,&#32;_Hashtable&gt;::
515 &#32;&#32;&#32;&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)
516 &#32;&#32;&#32;&#32;{
517 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable*&#32;__h&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Hashtable*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::_Hash_code_type&#32;__code&#32;=&#32;__h-&gt;_M_hash_code(__k);
519 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n&#32;=&#32;__h-&gt;_M_bucket_index(__k,&#32;__code,
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__h-&gt;_M_bucket_count);
521 
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::_Node*&#32;__p&#32;=
523 &#32;&#32;&#32;&#32;__h-&gt;_M_find_node(__h-&gt;_M_buckets[__n],&#32;__k,&#32;__code);
524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__p)
525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__h-&gt;_M_insert_bucket(std::make_pair(__k,&#32;mapped_type()),
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;__code)-&gt;second;
527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p-&gt;_M_v).second;
528 &#32;&#32;&#32;&#32;}
529 
530 &#32;&#32;<emphasis role="comment">//&#32;class&#32;template&#32;_Rehash_base.&#32;&#32;Give&#32;hashtable&#32;the&#32;max_load_factor</emphasis>
531 &#32;&#32;<emphasis role="comment">//&#32;functions&#32;iff&#32;the&#32;rehash&#32;policy&#32;is&#32;_Prime_rehash_policy.</emphasis>
532 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RehashPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable&gt;
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rehash_base&#32;{&#32;};
534 
535 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable&gt;
536 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rehash_base&lt;_Prime_rehash_policy,&#32;_Hashtable&gt;
537 &#32;&#32;&#32;&#32;{
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor()<emphasis role="keyword">&#32;const</emphasis>
540 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
541 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Hashtable*&#32;__this&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_Hashtable*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__this-&gt;__rehash_policy().max_load_factor();
543 &#32;&#32;&#32;&#32;&#32;&#32;}
544 
545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
546 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor(<emphasis role="keywordtype">float</emphasis>&#32;__z)
547 &#32;&#32;&#32;&#32;&#32;&#32;{
548 &#32;&#32;&#32;&#32;_Hashtable*&#32;__this&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Hashtable*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
549 &#32;&#32;&#32;&#32;__this-&gt;__rehash_policy(_Prime_rehash_policy(__z));
550 &#32;&#32;&#32;&#32;&#32;&#32;}
551 &#32;&#32;&#32;&#32;};
552 
553 &#32;&#32;<emphasis role="comment">//&#32;Class&#32;template&#32;_Hash_code_base.&#32;&#32;Encapsulates&#32;two&#32;policy&#32;issues&#32;that</emphasis>
554 &#32;&#32;<emphasis role="comment">//&#32;aren&apos;t&#32;quite&#32;orthogonal.</emphasis>
555 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;(1)&#32;the&#32;difference&#32;between&#32;using&#32;a&#32;ranged&#32;hash&#32;function&#32;and&#32;using</emphasis>
556 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;combination&#32;of&#32;a&#32;hash&#32;function&#32;and&#32;a&#32;range-hashing&#32;function.</emphasis>
557 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;In&#32;the&#32;former&#32;case&#32;we&#32;don&apos;t&#32;have&#32;such&#32;things&#32;as&#32;hash&#32;codes,&#32;so</emphasis>
558 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;we&#32;have&#32;a&#32;dummy&#32;type&#32;as&#32;placeholder.</emphasis>
559 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;(2)&#32;Whether&#32;or&#32;not&#32;we&#32;cache&#32;hash&#32;codes.&#32;&#32;Caching&#32;hash&#32;codes&#32;is</emphasis>
560 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;meaningless&#32;if&#32;we&#32;have&#32;a&#32;ranged&#32;hash&#32;function.</emphasis>
561 &#32;&#32;<emphasis role="comment">//&#32;We&#32;also&#32;put&#32;the&#32;key&#32;extraction&#32;and&#32;equality&#32;comparison&#32;function&#32;</emphasis>
562 &#32;&#32;<emphasis role="comment">//&#32;objects&#32;here,&#32;for&#32;convenience.</emphasis>
563 &#32;&#32;
564 &#32;&#32;<emphasis role="comment">//&#32;Primary&#32;template:&#32;unused&#32;except&#32;as&#32;a&#32;hook&#32;for&#32;specializations.&#32;&#32;</emphasis>
565 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value,
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Equal,
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_H1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache_hash_code&gt;
569 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_code_base;
570 
571 &#32;&#32;<emphasis role="comment">//&#32;Specialization:&#32;ranged&#32;hash&#32;function,&#32;no&#32;caching&#32;hash&#32;codes.&#32;&#32;H1</emphasis>
572 &#32;&#32;<emphasis role="comment">//&#32;and&#32;H2&#32;are&#32;provided&#32;but&#32;ignored.&#32;&#32;We&#32;define&#32;a&#32;dummy&#32;hash&#32;code&#32;type.</emphasis>
573 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value,
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Equal,
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_H1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&gt;
576 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_code_base&lt;_Key,&#32;_Value,&#32;_ExtractKey,&#32;_Equal,&#32;_H1,&#32;_H2,
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
578 &#32;&#32;&#32;&#32;{
579 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
580 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_code_base(<emphasis role="keyword">const</emphasis>&#32;_ExtractKey&amp;&#32;__ex,&#32;<emphasis role="keyword">const</emphasis>&#32;_Equal&amp;&#32;__eq,
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_H1&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_H2&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Hash&amp;&#32;__h)
582 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_extract(__ex),&#32;_M_eq(__eq),&#32;_M_ranged_hash(__h)&#32;{&#32;}
583 
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;_Hash_code_type;
585 &#32;&#32;
586 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_code_type
587 &#32;&#32;&#32;&#32;&#32;&#32;_M_hash_code(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
588 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
589 &#32;&#32;
590 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t
591 &#32;&#32;&#32;&#32;&#32;&#32;_M_bucket_index(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k,&#32;_Hash_code_type,
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
593 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ranged_hash(__k,&#32;__n);&#32;}
594 
595 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t
596 &#32;&#32;&#32;&#32;&#32;&#32;_M_bucket_index(<emphasis role="keyword">const</emphasis>&#32;_Hash_node&lt;_Value,&#32;false&gt;*&#32;__p,
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
598 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ranged_hash(_M_extract(__p-&gt;_M_v),&#32;__n);&#32;}
599 &#32;&#32;
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
601 &#32;&#32;&#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k,&#32;_Hash_code_type,
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;false&gt;*&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
603 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_eq(__k,&#32;_M_extract(__n-&gt;_M_v));&#32;}
604 
605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;_M_store_code(_Hash_node&lt;_Value,&#32;false&gt;*,&#32;_Hash_code_type)<emphasis role="keyword">&#32;const</emphasis>
607 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;}
608 
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
610 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy_code(_Hash_node&lt;_Value,&#32;false&gt;*,
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Hash_node&lt;_Value,&#32;false&gt;*)<emphasis role="keyword">&#32;const</emphasis>
612 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;}
613 &#32;&#32;&#32;&#32;&#32;&#32;
614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
615 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(_Hash_code_base&amp;&#32;__x)
616 &#32;&#32;&#32;&#32;&#32;&#32;{
617 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_extract,&#32;__x._M_extract);
618 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_eq,&#32;__x._M_eq);
619 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_ranged_hash,&#32;__x._M_ranged_hash);
620 &#32;&#32;&#32;&#32;&#32;&#32;}
621 
622 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
623 &#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey&#32;&#32;_M_extract;
624 &#32;&#32;&#32;&#32;&#32;&#32;_Equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_eq;
625 &#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ranged_hash;
626 &#32;&#32;&#32;&#32;};
627 
628 
629 &#32;&#32;<emphasis role="comment">//&#32;No&#32;specialization&#32;for&#32;ranged&#32;hash&#32;function&#32;while&#32;caching&#32;hash&#32;codes.</emphasis>
630 &#32;&#32;<emphasis role="comment">//&#32;That&#32;combination&#32;is&#32;meaningless,&#32;and&#32;trying&#32;to&#32;do&#32;it&#32;is&#32;an&#32;error.</emphasis>
631 &#32;&#32;
632 &#32;&#32;
633 &#32;&#32;<emphasis role="comment">//&#32;Specialization:&#32;ranged&#32;hash&#32;function,&#32;cache&#32;hash&#32;codes.&#32;&#32;This</emphasis>
634 &#32;&#32;<emphasis role="comment">//&#32;combination&#32;is&#32;meaningless,&#32;so&#32;we&#32;provide&#32;only&#32;a&#32;declaration</emphasis>
635 &#32;&#32;<emphasis role="comment">//&#32;and&#32;no&#32;definition.&#32;&#32;</emphasis>
636 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value,
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Equal,
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_H1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&gt;
639 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_code_base&lt;_Key,&#32;_Value,&#32;_ExtractKey,&#32;_Equal,&#32;_H1,&#32;_H2,
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;;
641 
642 &#32;&#32;<emphasis role="comment">//&#32;Specialization:&#32;hash&#32;function&#32;and&#32;range-hashing&#32;function,&#32;no</emphasis>
643 &#32;&#32;<emphasis role="comment">//&#32;caching&#32;of&#32;hash&#32;codes.&#32;&#32;H&#32;is&#32;provided&#32;but&#32;ignored.&#32;&#32;Provides</emphasis>
644 &#32;&#32;<emphasis role="comment">//&#32;typedef&#32;and&#32;accessor&#32;required&#32;by&#32;TR1.&#32;&#32;</emphasis>
645 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value,
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Equal,
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_H1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_H2&gt;
648 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_code_base&lt;_Key,&#32;_Value,&#32;_ExtractKey,&#32;_Equal,&#32;_H1,&#32;_H2,
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Default_ranged_hash,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
650 &#32;&#32;&#32;&#32;{
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_H1&#32;hasher;
652 
653 &#32;&#32;&#32;&#32;&#32;&#32;hasher
654 &#32;&#32;&#32;&#32;&#32;&#32;hash_function()<emphasis role="keyword">&#32;const</emphasis>
655 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h1;&#32;}
656 
657 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
658 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_code_base(<emphasis role="keyword">const</emphasis>&#32;_ExtractKey&amp;&#32;__ex,&#32;<emphasis role="keyword">const</emphasis>&#32;_Equal&amp;&#32;__eq,
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_H1&amp;&#32;__h1,&#32;<emphasis role="keyword">const</emphasis>&#32;_H2&amp;&#32;__h2,
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Default_ranged_hash&amp;)
661 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_extract(__ex),&#32;_M_eq(__eq),&#32;_M_h1(__h1),&#32;_M_h2(__h2)&#32;{&#32;}
662 
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;_Hash_code_type;
664 
665 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_code_type
666 &#32;&#32;&#32;&#32;&#32;&#32;_M_hash_code(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
667 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h1(__k);&#32;}
668 &#32;&#32;&#32;&#32;&#32;&#32;
669 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t
670 &#32;&#32;&#32;&#32;&#32;&#32;_M_bucket_index(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;,&#32;_Hash_code_type&#32;__c,
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
672 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h2(__c,&#32;__n);&#32;}
673 
674 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t
675 &#32;&#32;&#32;&#32;&#32;&#32;_M_bucket_index(<emphasis role="keyword">const</emphasis>&#32;_Hash_node&lt;_Value,&#32;false&gt;*&#32;__p,
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
677 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h2(_M_h1(_M_extract(__p-&gt;_M_v)),&#32;__n);&#32;}
678 
679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
680 &#32;&#32;&#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k,&#32;_Hash_code_type,
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;false&gt;*&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
682 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_eq(__k,&#32;_M_extract(__n-&gt;_M_v));&#32;}
683 
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
685 &#32;&#32;&#32;&#32;&#32;&#32;_M_store_code(_Hash_node&lt;_Value,&#32;false&gt;*,&#32;_Hash_code_type)<emphasis role="keyword">&#32;const</emphasis>
686 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;}
687 
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy_code(_Hash_node&lt;_Value,&#32;false&gt;*,
690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Hash_node&lt;_Value,&#32;false&gt;*)<emphasis role="keyword">&#32;const</emphasis>
691 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;}
692 
693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
694 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(_Hash_code_base&amp;&#32;__x)
695 &#32;&#32;&#32;&#32;&#32;&#32;{
696 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_extract,&#32;__x._M_extract);
697 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_eq,&#32;__x._M_eq);
698 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_h1,&#32;__x._M_h1);
699 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_h2,&#32;__x._M_h2);
700 &#32;&#32;&#32;&#32;&#32;&#32;}
701 
702 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
703 &#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey&#32;&#32;_M_extract;
704 &#32;&#32;&#32;&#32;&#32;&#32;_Equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_eq;
705 &#32;&#32;&#32;&#32;&#32;&#32;_H1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_h1;
706 &#32;&#32;&#32;&#32;&#32;&#32;_H2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_h2;
707 &#32;&#32;&#32;&#32;};
708 
709 &#32;&#32;<emphasis role="comment">//&#32;Specialization:&#32;hash&#32;function&#32;and&#32;range-hashing&#32;function,&#32;</emphasis>
710 &#32;&#32;<emphasis role="comment">//&#32;caching&#32;hash&#32;codes.&#32;&#32;H&#32;is&#32;provided&#32;but&#32;ignored.&#32;&#32;Provides</emphasis>
711 &#32;&#32;<emphasis role="comment">//&#32;typedef&#32;and&#32;accessor&#32;required&#32;by&#32;TR1.</emphasis>
712 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value,
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Equal,
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_H1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_H2&gt;
715 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_code_base&lt;_Key,&#32;_Value,&#32;_ExtractKey,&#32;_Equal,&#32;_H1,&#32;_H2,
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Default_ranged_hash,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
717 &#32;&#32;&#32;&#32;{
718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_H1&#32;hasher;
719 &#32;&#32;&#32;&#32;&#32;&#32;
720 &#32;&#32;&#32;&#32;&#32;&#32;hasher
721 &#32;&#32;&#32;&#32;&#32;&#32;hash_function()<emphasis role="keyword">&#32;const</emphasis>
722 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h1;&#32;}
723 
724 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
725 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_code_base(<emphasis role="keyword">const</emphasis>&#32;_ExtractKey&amp;&#32;__ex,&#32;<emphasis role="keyword">const</emphasis>&#32;_Equal&amp;&#32;__eq,
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_H1&amp;&#32;__h1,&#32;<emphasis role="keyword">const</emphasis>&#32;_H2&amp;&#32;__h2,
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Default_ranged_hash&amp;)
728 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_extract(__ex),&#32;_M_eq(__eq),&#32;_M_h1(__h1),&#32;_M_h2(__h2)&#32;{&#32;}
729 
730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;_Hash_code_type;
731 &#32;&#32;
732 &#32;&#32;&#32;&#32;&#32;&#32;_Hash_code_type
733 &#32;&#32;&#32;&#32;&#32;&#32;_M_hash_code(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
734 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h1(__k);&#32;}
735 &#32;&#32;
736 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t
737 &#32;&#32;&#32;&#32;&#32;&#32;_M_bucket_index(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;,&#32;_Hash_code_type&#32;__c,
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
739 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h2(__c,&#32;__n);&#32;}
740 
741 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t
742 &#32;&#32;&#32;&#32;&#32;&#32;_M_bucket_index(<emphasis role="keyword">const</emphasis>&#32;_Hash_node&lt;_Value,&#32;true&gt;*&#32;__p,
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
744 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h2(__p-&gt;_M_hash_code,&#32;__n);&#32;}
745 
746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
747 &#32;&#32;&#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;_Key&amp;&#32;__k,&#32;_Hash_code_type&#32;__c,
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash_node&lt;_Value,&#32;true&gt;*&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
749 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c&#32;==&#32;__n-&gt;_M_hash_code&#32;&amp;&amp;&#32;_M_eq(__k,&#32;_M_extract(__n-&gt;_M_v));&#32;}
750 
751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;_M_store_code(_Hash_node&lt;_Value,&#32;true&gt;*&#32;__n,&#32;_Hash_code_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
753 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;__n-&gt;_M_hash_code&#32;=&#32;__c;&#32;}
754 
755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
756 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy_code(_Hash_node&lt;_Value,&#32;true&gt;*&#32;__to,
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Hash_node&lt;_Value,&#32;true&gt;*&#32;__from)<emphasis role="keyword">&#32;const</emphasis>
758 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;__to-&gt;_M_hash_code&#32;=&#32;__from-&gt;_M_hash_code;&#32;}
759 
760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
761 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(_Hash_code_base&amp;&#32;__x)
762 &#32;&#32;&#32;&#32;&#32;&#32;{
763 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_extract,&#32;__x._M_extract);
764 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_eq,&#32;__x._M_eq);
765 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_h1,&#32;__x._M_h1);
766 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_h2,&#32;__x._M_h2);
767 &#32;&#32;&#32;&#32;&#32;&#32;}
768 &#32;&#32;&#32;&#32;&#32;&#32;
769 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
770 &#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey&#32;&#32;_M_extract;
771 &#32;&#32;&#32;&#32;&#32;&#32;_Equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_eq;
772 &#32;&#32;&#32;&#32;&#32;&#32;_H1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_h1;
773 &#32;&#32;&#32;&#32;&#32;&#32;_H2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_h2;
774 &#32;&#32;&#32;&#32;};
775 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
776 }
777 
778 _GLIBCXX_END_NAMESPACE_VERSION
779 }
</programlisting></section>
