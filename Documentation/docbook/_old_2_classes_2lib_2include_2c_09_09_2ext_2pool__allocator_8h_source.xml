<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2pool__allocator_8h_source" xml:lang="en-US">
<title>pool_allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pool_allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Allocators&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1997</emphasis>
27 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
28 <emphasis role="comment">&#32;*</emphasis>
29 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
30 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
31 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
32 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
33 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
34 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
35 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
36 <emphasis role="comment">&#32;*/</emphasis>
37 
42 <emphasis role="preprocessor">#ifndef&#32;_POOL_ALLOCATOR_H</emphasis>
43 <emphasis role="preprocessor">#define&#32;_POOL_ALLOCATOR_H&#32;1</emphasis>
44 
45 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
48 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
49 <emphasis role="preprocessor">#include&#32;&lt;ext/atomicity.h&gt;</emphasis>
50 <emphasis role="preprocessor">#include&#32;&lt;ext/concurrence.h&gt;</emphasis>
51 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
52 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
53 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
54 <emphasis role="preprocessor">#endif</emphasis>
55 
56 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
57 {
58 _GLIBCXX_BEGIN_NAMESPACE_VERSION
59 
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__pool_alloc_base
76 &#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_align&#32;=&#32;8&#32;};
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_max_bytes&#32;=&#32;128&#32;};
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_free_list_size&#32;=&#32;(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>)_S_max_bytes&#32;/&#32;(<emphasis role="keywordtype">size_t</emphasis>)_S_align&#32;};
83 &#32;&#32;&#32;&#32;&#32;&#32;
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>_Obj
85 &#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>_Obj*&#32;_M_free_list_link;
87 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_client_data[1];&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;client&#32;sees&#32;this.</emphasis>
88 &#32;&#32;&#32;&#32;&#32;&#32;};
89 &#32;&#32;&#32;&#32;&#32;&#32;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Obj*&#32;<emphasis role="keyword">volatile</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_free_list[_S_free_list_size];
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Chunk&#32;allocation&#32;state.</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_start_free;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_end_free;
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_heap_size;&#32;&#32;&#32;&#32;&#32;
96 &#32;&#32;&#32;&#32;&#32;&#32;
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;_M_round_up(<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes)
99 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;((__bytes&#32;+&#32;(<emphasis role="keywordtype">size_t</emphasis>)_S_align&#32;-&#32;1)&#32;&amp;&#32;~((<emphasis role="keywordtype">size_t</emphasis>)_S_align&#32;-&#32;1));&#32;}
100 &#32;&#32;&#32;&#32;&#32;&#32;
101 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;_Obj*&#32;<emphasis role="keyword">volatile</emphasis>*
102 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_free_list(<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
103 &#32;&#32;&#32;&#32;
104 &#32;&#32;&#32;&#32;&#32;&#32;__mutex&amp;
105 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_mutex()&#32;throw&#32;();
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;an&#32;object&#32;of&#32;size&#32;__n,&#32;and&#32;optionally&#32;adds&#32;to&#32;size&#32;__n</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;free&#32;list.</emphasis>
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
110 &#32;&#32;&#32;&#32;&#32;&#32;_M_refill(<emphasis role="keywordtype">size_t</emphasis>&#32;__n);
111 &#32;&#32;&#32;&#32;&#32;&#32;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocates&#32;a&#32;chunk&#32;for&#32;nobjs&#32;of&#32;size&#32;size.&#32;&#32;nobjs&#32;may&#32;be&#32;reduced</emphasis>
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;it&#32;is&#32;inconvenient&#32;to&#32;allocate&#32;the&#32;requested&#32;number.</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*
115 &#32;&#32;&#32;&#32;&#32;&#32;_M_allocate_chunk(<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;__nobjs);
116 &#32;&#32;&#32;&#32;};
117 
118 
123 &#32;&#32;template&lt;typename&#32;_Tp&gt;
124 &#32;&#32;&#32;&#32;class&#32;__pool_alloc&#32;:&#32;private&#32;__pool_alloc_base
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_force_new;
128 
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;size_type;
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;difference_type;
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;const_pointer;
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;const_reference;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;__pool_alloc&lt;_Tp1&gt;&#32;other;&#32;};
141 
142 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2103.&#32;propagate_on_container_move_assignment</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;propagate_on_container_move_assignment;
146 <emphasis role="preprocessor">#endif</emphasis>
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;__pool_alloc()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
149 
150 &#32;&#32;&#32;&#32;&#32;&#32;__pool_alloc(<emphasis role="keyword">const</emphasis>&#32;__pool_alloc&amp;)&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
151 
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pool_alloc(<emphasis role="keyword">const</emphasis>&#32;__pool_alloc&lt;_Tp1&gt;&amp;)&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
154 
155 &#32;&#32;&#32;&#32;&#32;&#32;~__pool_alloc()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
158 &#32;&#32;&#32;&#32;&#32;&#32;address(reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
159 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
160 
161 &#32;&#32;&#32;&#32;&#32;&#32;const_pointer
162 &#32;&#32;&#32;&#32;&#32;&#32;address(const_reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
163 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;size_type
166 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT&#32;
167 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::size_t(-1)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);&#32;}
168 
169 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;construct(_Up*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
173 &#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>&#32;*)__p)&#32;_Up(std::forward&lt;_Args&gt;(__args)...);&#32;}
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_Up*&#32;__p)&#32;{&#32;__p-&gt;~_Up();&#32;}
178 <emphasis role="preprocessor">#else</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;402.&#32;wrong&#32;new&#32;expression&#32;in&#32;[some_]&#32;allocator::construct</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
182 &#32;&#32;&#32;&#32;&#32;&#32;construct(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;
183 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>&#32;*)__p)&#32;_Tp(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
184 
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
186 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)&#32;{&#32;__p-&gt;~_Tp();&#32;}
187 <emphasis role="preprocessor">#endif</emphasis>
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
190 &#32;&#32;&#32;&#32;&#32;&#32;allocate(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;=&#32;0);
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n);&#32;&#32;&#32;&#32;&#32;&#32;
194 &#32;&#32;&#32;&#32;};
195 
196 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
198 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__pool_alloc&lt;_Tp&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;__pool_alloc&lt;_Tp&gt;&amp;)
199 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
200 
201 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
202 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
204 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;__pool_alloc&lt;_Tp&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;__pool_alloc&lt;_Tp&gt;&amp;)
205 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
206 <emphasis role="preprocessor">#endif</emphasis>
207 
208 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
209 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>
210 &#32;&#32;&#32;&#32;__pool_alloc&lt;_Tp&gt;::_S_force_new;
211 
212 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
213 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_Tp*
214 &#32;&#32;&#32;&#32;__pool_alloc&lt;_Tp&gt;::allocate(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::size_t;
217 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__ret&#32;=&#32;0;
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__n&#32;!=&#32;0,&#32;<emphasis role="keyword">true</emphasis>))
219 &#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;this-&gt;max_size())
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_alloc();
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes&#32;=&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
224 
225 <emphasis role="preprocessor">#if&#32;__cpp_aligned_new</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">alignof</emphasis>(_Tp)&#32;&gt;&#32;__STDCPP_DEFAULT_NEW_ALIGNMENT__)
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::align_val_t&#32;__al&#32;=&#32;std::align_val_t(<emphasis role="keyword">alignof</emphasis>(_Tp));
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(__bytes,&#32;__al));
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
231 <emphasis role="preprocessor">#endif</emphasis>
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;there&#32;is&#32;a&#32;race&#32;through&#32;here,&#32;assume&#32;answer&#32;from&#32;getenv</emphasis>
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;will&#32;resolve&#32;in&#32;same&#32;direction.&#32;&#32;Inspired&#32;by&#32;techniques</emphasis>
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;efficiently&#32;support&#32;threading&#32;found&#32;in&#32;basic_string.h.</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_S_force_new&#32;==&#32;0)
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::getenv(<emphasis role="stringliteral">&quot;GLIBCXX_FORCE_NEW&quot;</emphasis>))
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_add_dispatch(&amp;_S_force_new,&#32;1);
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_add_dispatch(&amp;_S_force_new,&#32;-1);
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
243 
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__bytes&#32;&gt;&#32;<emphasis role="keywordtype">size_t</emphasis>(_S_max_bytes)&#32;||&#32;_S_force_new&#32;&gt;&#32;0)
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(__bytes));
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Obj*&#32;<emphasis role="keyword">volatile</emphasis>*&#32;__free_list&#32;=&#32;_M_get_free_list(__bytes);
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scoped_lock&#32;sentry(_M_get_mutex());
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Obj*&#32;__restrict__&#32;__result&#32;=&#32;*__free_list;
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__result&#32;==&#32;0,&#32;0))
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(_M_refill(_M_round_up(__bytes)));
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__free_list&#32;=&#32;__result-&gt;_M_free_list_link;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(__result);
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ret&#32;==&#32;0)
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_alloc();
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
262 &#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
264 &#32;&#32;&#32;&#32;}
265 
266 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
268 &#32;&#32;&#32;&#32;__pool_alloc&lt;_Tp&gt;::deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
269 &#32;&#32;&#32;&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::size_t;
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__n&#32;!=&#32;0&#32;&amp;&amp;&#32;__p&#32;!=&#32;0,&#32;<emphasis role="keyword">true</emphasis>))
272 &#32;&#32;&#32;&#32;{
273 <emphasis role="preprocessor">#if&#32;__cpp_aligned_new</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">alignof</emphasis>(_Tp)&#32;&gt;&#32;__STDCPP_DEFAULT_NEW_ALIGNMENT__)
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p,&#32;std::align_val_t(<emphasis role="keyword">alignof</emphasis>(_Tp)));
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
279 <emphasis role="preprocessor">#endif</emphasis>
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes&#32;=&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__bytes&#32;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(_S_max_bytes)&#32;||&#32;_S_force_new&#32;&gt;&#32;0)
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p);
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Obj*&#32;<emphasis role="keyword">volatile</emphasis>*&#32;__free_list&#32;=&#32;_M_get_free_list(__bytes);
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Obj*&#32;__q&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Obj*<emphasis role="keyword">&gt;</emphasis>(__p);
287 
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scoped_lock&#32;sentry(_M_get_mutex());
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__q&#32;-&gt;_M_free_list_link&#32;=&#32;*__free_list;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__free_list&#32;=&#32;__q;
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 &#32;&#32;&#32;&#32;}
293 &#32;&#32;&#32;&#32;}
294 
295 _GLIBCXX_END_NAMESPACE_VERSION
296 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
297 
298 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
