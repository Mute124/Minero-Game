<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2splay__tree___2splay__fn__imps_8hpp_source" xml:lang="en-US">
<title>splay_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keywordtype">void</emphasis>
45 PB_DS_CLASS_C_DEC::
46 splay(node_pointer&#32;p_nd)
47 {
48 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_nd-&gt;m_p_parent&#32;!=&#32;base_type::m_p_head)
49 &#32;&#32;&#32;&#32;{
50 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
51 &#32;&#32;&#32;&#32;&#32;&#32;{
52 &#32;&#32;&#32;&#32;node_pointer&#32;p_head&#32;=&#32;base_type::m_p_head;
53 &#32;&#32;&#32;&#32;assert_special_imp(p_head,&#32;__FILE__,&#32;__LINE__);
54 &#32;&#32;&#32;&#32;&#32;&#32;}
55 <emphasis role="preprocessor">#endif</emphasis>
56 
57 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a5e93595ce71fff38d3f1732cd9fce201">PB_DS_ASSERT_BASE_NODE_CONSISTENT</link>(p_nd)
58 
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_parent-&gt;m_p_parent&#32;==&#32;base_type::m_p_head)
60 &#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;base_type::rotate_parent(p_nd);
62 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;==&#32;this-&gt;m_p_head-&gt;m_p_parent);
63 &#32;&#32;&#32;&#32;}
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
65 &#32;&#32;&#32;&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_parent&#32;=&#32;p_nd-&gt;m_p_parent;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_grandparent&#32;=&#32;p_parent-&gt;m_p_parent;
68 
69 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;total&#32;=
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::recursive_count(p_grandparent);
72 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(total&#32;&gt;=&#32;3);
73 <emphasis role="preprocessor">#endif</emphasis>
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent-&gt;m_p_left&#32;==&#32;p_nd&#32;&amp;&amp;
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_grandparent-&gt;m_p_right&#32;==&#32;p_parent)
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splay_zig_zag_left(p_nd,&#32;p_parent,&#32;p_grandparent);
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent-&gt;m_p_right&#32;==&#32;p_nd&#32;&amp;&amp;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_grandparent-&gt;m_p_left&#32;==&#32;p_parent)
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splay_zig_zag_right(p_nd,&#32;p_parent,&#32;p_grandparent);
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent-&gt;m_p_left&#32;==&#32;p_nd&#32;&amp;&amp;
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_grandparent-&gt;m_p_left&#32;==&#32;p_parent)
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splay_zig_zig_left(p_nd,&#32;p_parent,&#32;p_grandparent);
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splay_zig_zig_right(p_nd,&#32;p_parent,&#32;p_grandparent);
86 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(total&#32;==this-&gt;recursive_count(p_nd));
87 &#32;&#32;&#32;&#32;}
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a5e93595ce71fff38d3f1732cd9fce201">PB_DS_ASSERT_BASE_NODE_CONSISTENT</link>(p_nd)
90 &#32;&#32;&#32;&#32;}
91 }
92 
93 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
94 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
95 PB_DS_CLASS_C_DEC::
96 splay_zig_zag_left(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_parent,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_grandparent)
98 {
99 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent&#32;==&#32;p_nd-&gt;m_p_parent);
100 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_grandparent&#32;==&#32;p_parent-&gt;m_p_parent);
101 
102 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a5e93595ce71fff38d3f1732cd9fce201">PB_DS_ASSERT_BASE_NODE_CONSISTENT</link>(p_grandparent)
103 
104 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_p_left&#32;==&#32;p_nd&#32;&amp;&amp;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_grandparent-&gt;m_p_right&#32;==&#32;p_parent);
106 
107 &#32;&#32;splay_zz_start(p_nd,&#32;p_parent,&#32;p_grandparent);
108 
109 &#32;&#32;node_pointer&#32;p_b&#32;=&#32;p_nd-&gt;m_p_right;
110 &#32;&#32;node_pointer&#32;p_c&#32;=&#32;p_nd-&gt;m_p_left;
111 
112 &#32;&#32;p_nd-&gt;m_p_right&#32;=&#32;p_parent;
113 &#32;&#32;p_parent-&gt;m_p_parent&#32;=&#32;p_nd;
114 
115 &#32;&#32;p_nd-&gt;m_p_left&#32;=&#32;p_grandparent;
116 &#32;&#32;p_grandparent-&gt;m_p_parent&#32;=&#32;p_nd;
117 
118 &#32;&#32;p_parent-&gt;m_p_left&#32;=&#32;p_b;
119 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_b&#32;!=&#32;0)
120 &#32;&#32;&#32;&#32;p_b-&gt;m_p_parent&#32;=&#32;p_parent;
121 
122 &#32;&#32;p_grandparent-&gt;m_p_right&#32;=&#32;p_c;
123 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_c&#32;!=&#32;0)
124 &#32;&#32;&#32;&#32;p_c-&gt;m_p_parent&#32;=&#32;p_grandparent;
125 
126 &#32;&#32;splay_zz_end(p_nd,&#32;p_parent,&#32;p_grandparent);
127 }
128 
129 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
130 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
131 PB_DS_CLASS_C_DEC::
132 splay_zig_zag_right(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_parent,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_grandparent)
134 {
135 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent&#32;==&#32;p_nd-&gt;m_p_parent);
136 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_grandparent&#32;==&#32;p_parent-&gt;m_p_parent);
137 
138 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a5e93595ce71fff38d3f1732cd9fce201">PB_DS_ASSERT_BASE_NODE_CONSISTENT</link>(p_grandparent)
139 
140 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_p_right&#32;==&#32;p_nd&#32;&amp;&amp;
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_grandparent-&gt;m_p_left&#32;==&#32;p_parent);
142 
143 &#32;&#32;splay_zz_start(p_nd,&#32;p_parent,&#32;p_grandparent);
144 
145 &#32;&#32;node_pointer&#32;p_b&#32;=&#32;p_nd-&gt;m_p_left;
146 &#32;&#32;node_pointer&#32;p_c&#32;=&#32;p_nd-&gt;m_p_right;
147 
148 &#32;&#32;p_nd-&gt;m_p_left&#32;=&#32;p_parent;
149 &#32;&#32;p_parent-&gt;m_p_parent&#32;=&#32;p_nd;
150 
151 &#32;&#32;p_nd-&gt;m_p_right&#32;=&#32;p_grandparent;
152 &#32;&#32;p_grandparent-&gt;m_p_parent&#32;=&#32;p_nd;
153 
154 &#32;&#32;p_parent-&gt;m_p_right&#32;=&#32;p_b;
155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_b&#32;!=&#32;0)
156 &#32;&#32;&#32;&#32;p_b-&gt;m_p_parent&#32;=&#32;p_parent;
157 
158 &#32;&#32;p_grandparent-&gt;m_p_left&#32;=&#32;p_c;
159 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_c&#32;!=&#32;0)
160 &#32;&#32;&#32;&#32;p_c-&gt;m_p_parent&#32;=&#32;p_grandparent;
161 
162 &#32;&#32;splay_zz_end(p_nd,&#32;p_parent,&#32;p_grandparent);
163 }
164 
165 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
166 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
167 PB_DS_CLASS_C_DEC::
168 splay_zig_zig_left(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_parent,
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_grandparent)
170 {
171 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent&#32;==&#32;p_nd-&gt;m_p_parent);
172 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_grandparent&#32;==&#32;p_parent-&gt;m_p_parent);
173 
174 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a5e93595ce71fff38d3f1732cd9fce201">PB_DS_ASSERT_BASE_NODE_CONSISTENT</link>(p_grandparent)
175 
176 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_p_left&#32;==&#32;p_nd&#32;&amp;&amp;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_parent-&gt;m_p_parent-&gt;m_p_left&#32;==&#32;p_nd-&gt;m_p_parent);
178 
179 &#32;&#32;splay_zz_start(p_nd,&#32;p_parent,&#32;p_grandparent);
180 
181 &#32;&#32;node_pointer&#32;p_b&#32;=&#32;p_nd-&gt;m_p_right;
182 &#32;&#32;node_pointer&#32;p_c&#32;=&#32;p_parent-&gt;m_p_right;
183 
184 &#32;&#32;p_nd-&gt;m_p_right&#32;=&#32;p_parent;
185 &#32;&#32;p_parent-&gt;m_p_parent&#32;=&#32;p_nd;
186 
187 &#32;&#32;p_parent-&gt;m_p_right&#32;=&#32;p_grandparent;
188 &#32;&#32;p_grandparent-&gt;m_p_parent&#32;=&#32;p_parent;
189 
190 &#32;&#32;p_parent-&gt;m_p_left&#32;=&#32;p_b;
191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_b&#32;!=&#32;0)
192 &#32;&#32;&#32;&#32;p_b-&gt;m_p_parent&#32;=&#32;p_parent;
193 
194 &#32;&#32;p_grandparent-&gt;m_p_left&#32;=&#32;p_c;
195 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_c&#32;!=&#32;0)
196 &#32;&#32;&#32;&#32;p_c-&gt;m_p_parent&#32;=&#32;p_grandparent;
197 
198 &#32;&#32;splay_zz_end(p_nd,&#32;p_parent,&#32;p_grandparent);
199 }
200 
201 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
202 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
203 PB_DS_CLASS_C_DEC::
204 splay_zig_zig_right(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_parent,
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_grandparent)
206 {
207 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent&#32;==&#32;p_nd-&gt;m_p_parent);
208 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_grandparent&#32;==&#32;p_parent-&gt;m_p_parent);
209 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a5e93595ce71fff38d3f1732cd9fce201">PB_DS_ASSERT_BASE_NODE_CONSISTENT</link>(p_grandparent)
210 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent-&gt;m_p_right&#32;==&#32;p_nd&#32;&amp;&amp;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_parent-&gt;m_p_parent-&gt;m_p_right&#32;==&#32;p_nd-&gt;m_p_parent);
212 
213 &#32;&#32;splay_zz_start(p_nd,&#32;p_parent,&#32;p_grandparent);
214 
215 &#32;&#32;node_pointer&#32;p_b&#32;=&#32;p_nd-&gt;m_p_left;
216 &#32;&#32;node_pointer&#32;p_c&#32;=&#32;p_parent-&gt;m_p_left;
217 
218 &#32;&#32;p_nd-&gt;m_p_left&#32;=&#32;p_parent;
219 &#32;&#32;p_parent-&gt;m_p_parent&#32;=&#32;p_nd;
220 
221 &#32;&#32;p_parent-&gt;m_p_left&#32;=&#32;p_grandparent;
222 &#32;&#32;p_grandparent-&gt;m_p_parent&#32;=&#32;p_parent;
223 
224 &#32;&#32;p_parent-&gt;m_p_right&#32;=&#32;p_b;
225 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_b&#32;!=&#32;0)
226 &#32;&#32;&#32;&#32;p_b-&gt;m_p_parent&#32;=&#32;p_parent;
227 
228 &#32;&#32;p_grandparent-&gt;m_p_right&#32;=&#32;p_c;
229 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_c&#32;!=&#32;0)
230 &#32;&#32;&#32;&#32;p_c-&gt;m_p_parent&#32;=&#32;p_grandparent;
231 
232 &#32;&#32;base_type::update_to_top(p_grandparent,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
233 &#32;&#32;splay_zz_end(p_nd,&#32;p_parent,&#32;p_grandparent);
234 }
235 
236 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
237 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
238 PB_DS_CLASS_C_DEC::
239 splay_zz_start(node_pointer&#32;p_nd,
240 #ifdef&#32;_GLIBCXX_DEBUG
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_parent,
242 #<emphasis role="keywordflow">else</emphasis>
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;<emphasis role="comment">/*p_parent*/</emphasis>,
244 #endif
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_grandparent)
246 {
247 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;!=&#32;0);
248 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_parent&#32;!=&#32;0);
249 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_grandparent&#32;!=&#32;0);
250 
251 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;grandparent_head&#32;=&#32;p_grandparent-&gt;m_p_parent&#32;==&#32;base_type::m_p_head;
252 
253 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(grandparent_head)
254 &#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;base_type::m_p_head-&gt;m_p_parent&#32;=&#32;base_type::m_p_head-&gt;m_p_parent;
256 &#32;&#32;&#32;&#32;&#32;&#32;p_nd-&gt;m_p_parent&#32;=&#32;base_type::m_p_head;
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
258 &#32;&#32;&#32;&#32;}
259 
260 &#32;&#32;node_pointer&#32;p_greatgrandparent&#32;=&#32;p_grandparent-&gt;m_p_parent;
261 
262 &#32;&#32;p_nd-&gt;m_p_parent&#32;=&#32;p_greatgrandparent;
263 
264 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_grandparent&#32;==&#32;p_greatgrandparent-&gt;m_p_left)
265 &#32;&#32;&#32;&#32;p_greatgrandparent-&gt;m_p_left&#32;=&#32;p_nd;
266 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
267 &#32;&#32;&#32;&#32;p_greatgrandparent-&gt;m_p_right&#32;=&#32;p_nd;
268 }
269 
270 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
271 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
272 PB_DS_CLASS_C_DEC::
273 splay_zz_end(node_pointer&#32;p_nd,&#32;node_pointer&#32;p_parent,
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_grandparent)
275 {
276 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_parent&#32;==&#32;base_type::m_p_head)
277 &#32;&#32;&#32;&#32;base_type::m_p_head-&gt;m_p_parent&#32;=&#32;p_nd;
278 
279 &#32;&#32;this-&gt;apply_update(p_grandparent,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
280 &#32;&#32;this-&gt;apply_update(p_parent,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
281 &#32;&#32;this-&gt;apply_update(p_nd,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
282 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a5e93595ce71fff38d3f1732cd9fce201">PB_DS_ASSERT_BASE_NODE_CONSISTENT</link>(p_nd)
283 }
284 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
