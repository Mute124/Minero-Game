<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2algorithmfwd_8h_source" xml:lang="en-US">
<title>algorithmfwd.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/algorithmfwd.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;&lt;algorithm&gt;&#32;Forward&#32;declarations&#32;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_ALGORITHMFWD_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ALGORITHMFWD_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
38 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
40 <emphasis role="preprocessor">#endif</emphasis>
41 
42 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
43 {
44 _GLIBCXX_BEGIN_NAMESPACE_VERSION
45 
46 &#32;&#32;<emphasis role="comment">/*</emphasis>
47 <emphasis role="comment">&#32;&#32;&#32;&#32;adjacent_find</emphasis>
48 <emphasis role="comment">&#32;&#32;&#32;&#32;all_of&#32;(C++11)</emphasis>
49 <emphasis role="comment">&#32;&#32;&#32;&#32;any_of&#32;(C++11)</emphasis>
50 <emphasis role="comment">&#32;&#32;&#32;&#32;binary_search</emphasis>
51 <emphasis role="comment">&#32;&#32;&#32;&#32;clamp&#32;(C++17)</emphasis>
52 <emphasis role="comment">&#32;&#32;&#32;&#32;copy</emphasis>
53 <emphasis role="comment">&#32;&#32;&#32;&#32;copy_backward</emphasis>
54 <emphasis role="comment">&#32;&#32;&#32;&#32;copy_if&#32;(C++11)</emphasis>
55 <emphasis role="comment">&#32;&#32;&#32;&#32;copy_n&#32;(C++11)</emphasis>
56 <emphasis role="comment">&#32;&#32;&#32;&#32;count</emphasis>
57 <emphasis role="comment">&#32;&#32;&#32;&#32;count_if</emphasis>
58 <emphasis role="comment">&#32;&#32;&#32;&#32;equal</emphasis>
59 <emphasis role="comment">&#32;&#32;&#32;&#32;equal_range</emphasis>
60 <emphasis role="comment">&#32;&#32;&#32;&#32;fill</emphasis>
61 <emphasis role="comment">&#32;&#32;&#32;&#32;fill_n</emphasis>
62 <emphasis role="comment">&#32;&#32;&#32;&#32;find</emphasis>
63 <emphasis role="comment">&#32;&#32;&#32;&#32;find_end</emphasis>
64 <emphasis role="comment">&#32;&#32;&#32;&#32;find_first_of</emphasis>
65 <emphasis role="comment">&#32;&#32;&#32;&#32;find_if</emphasis>
66 <emphasis role="comment">&#32;&#32;&#32;&#32;find_if_not&#32;(C++11)</emphasis>
67 <emphasis role="comment">&#32;&#32;&#32;&#32;for_each</emphasis>
68 <emphasis role="comment">&#32;&#32;&#32;&#32;generate</emphasis>
69 <emphasis role="comment">&#32;&#32;&#32;&#32;generate_n</emphasis>
70 <emphasis role="comment">&#32;&#32;&#32;&#32;includes</emphasis>
71 <emphasis role="comment">&#32;&#32;&#32;&#32;inplace_merge</emphasis>
72 <emphasis role="comment">&#32;&#32;&#32;&#32;is_heap&#32;(C++11)</emphasis>
73 <emphasis role="comment">&#32;&#32;&#32;&#32;is_heap_until&#32;(C++11)</emphasis>
74 <emphasis role="comment">&#32;&#32;&#32;&#32;is_partitioned&#32;(C++11)</emphasis>
75 <emphasis role="comment">&#32;&#32;&#32;&#32;is_sorted&#32;(C++11)</emphasis>
76 <emphasis role="comment">&#32;&#32;&#32;&#32;is_sorted_until&#32;(C++11)</emphasis>
77 <emphasis role="comment">&#32;&#32;&#32;&#32;iter_swap</emphasis>
78 <emphasis role="comment">&#32;&#32;&#32;&#32;lexicographical_compare</emphasis>
79 <emphasis role="comment">&#32;&#32;&#32;&#32;lower_bound</emphasis>
80 <emphasis role="comment">&#32;&#32;&#32;&#32;make_heap</emphasis>
81 <emphasis role="comment">&#32;&#32;&#32;&#32;max</emphasis>
82 <emphasis role="comment">&#32;&#32;&#32;&#32;max_element</emphasis>
83 <emphasis role="comment">&#32;&#32;&#32;&#32;merge</emphasis>
84 <emphasis role="comment">&#32;&#32;&#32;&#32;min</emphasis>
85 <emphasis role="comment">&#32;&#32;&#32;&#32;min_element</emphasis>
86 <emphasis role="comment">&#32;&#32;&#32;&#32;minmax&#32;(C++11)</emphasis>
87 <emphasis role="comment">&#32;&#32;&#32;&#32;minmax_element&#32;(C++11)</emphasis>
88 <emphasis role="comment">&#32;&#32;&#32;&#32;mismatch</emphasis>
89 <emphasis role="comment">&#32;&#32;&#32;&#32;next_permutation</emphasis>
90 <emphasis role="comment">&#32;&#32;&#32;&#32;none_of&#32;(C++11)</emphasis>
91 <emphasis role="comment">&#32;&#32;&#32;&#32;nth_element</emphasis>
92 <emphasis role="comment">&#32;&#32;&#32;&#32;partial_sort</emphasis>
93 <emphasis role="comment">&#32;&#32;&#32;&#32;partial_sort_copy</emphasis>
94 <emphasis role="comment">&#32;&#32;&#32;&#32;partition</emphasis>
95 <emphasis role="comment">&#32;&#32;&#32;&#32;partition_copy&#32;(C++11)</emphasis>
96 <emphasis role="comment">&#32;&#32;&#32;&#32;partition_point&#32;(C++11)</emphasis>
97 <emphasis role="comment">&#32;&#32;&#32;&#32;pop_heap</emphasis>
98 <emphasis role="comment">&#32;&#32;&#32;&#32;prev_permutation</emphasis>
99 <emphasis role="comment">&#32;&#32;&#32;&#32;push_heap</emphasis>
100 <emphasis role="comment">&#32;&#32;&#32;&#32;random_shuffle</emphasis>
101 <emphasis role="comment">&#32;&#32;&#32;&#32;remove</emphasis>
102 <emphasis role="comment">&#32;&#32;&#32;&#32;remove_copy</emphasis>
103 <emphasis role="comment">&#32;&#32;&#32;&#32;remove_copy_if</emphasis>
104 <emphasis role="comment">&#32;&#32;&#32;&#32;remove_if</emphasis>
105 <emphasis role="comment">&#32;&#32;&#32;&#32;replace</emphasis>
106 <emphasis role="comment">&#32;&#32;&#32;&#32;replace_copy</emphasis>
107 <emphasis role="comment">&#32;&#32;&#32;&#32;replace_copy_if</emphasis>
108 <emphasis role="comment">&#32;&#32;&#32;&#32;replace_if</emphasis>
109 <emphasis role="comment">&#32;&#32;&#32;&#32;reverse</emphasis>
110 <emphasis role="comment">&#32;&#32;&#32;&#32;reverse_copy</emphasis>
111 <emphasis role="comment">&#32;&#32;&#32;&#32;rotate</emphasis>
112 <emphasis role="comment">&#32;&#32;&#32;&#32;rotate_copy</emphasis>
113 <emphasis role="comment">&#32;&#32;&#32;&#32;search</emphasis>
114 <emphasis role="comment">&#32;&#32;&#32;&#32;search_n</emphasis>
115 <emphasis role="comment">&#32;&#32;&#32;&#32;set_difference</emphasis>
116 <emphasis role="comment">&#32;&#32;&#32;&#32;set_intersection</emphasis>
117 <emphasis role="comment">&#32;&#32;&#32;&#32;set_symmetric_difference</emphasis>
118 <emphasis role="comment">&#32;&#32;&#32;&#32;set_union</emphasis>
119 <emphasis role="comment">&#32;&#32;&#32;&#32;shuffle&#32;(C++11)</emphasis>
120 <emphasis role="comment">&#32;&#32;&#32;&#32;sort</emphasis>
121 <emphasis role="comment">&#32;&#32;&#32;&#32;sort_heap</emphasis>
122 <emphasis role="comment">&#32;&#32;&#32;&#32;stable_partition</emphasis>
123 <emphasis role="comment">&#32;&#32;&#32;&#32;stable_sort</emphasis>
124 <emphasis role="comment">&#32;&#32;&#32;&#32;swap</emphasis>
125 <emphasis role="comment">&#32;&#32;&#32;&#32;swap_ranges</emphasis>
126 <emphasis role="comment">&#32;&#32;&#32;&#32;transform</emphasis>
127 <emphasis role="comment">&#32;&#32;&#32;&#32;unique</emphasis>
128 <emphasis role="comment">&#32;&#32;&#32;&#32;unique_copy</emphasis>
129 <emphasis role="comment">&#32;&#32;&#32;&#32;upper_bound</emphasis>
130 <emphasis role="comment">&#32;&#32;*/</emphasis>
131 
192 &#32;&#32;<emphasis role="comment">//&#32;adjacent_find</emphasis>
193 
194 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
195 <emphasis role="preprocessor">#&#32;&#32;define&#32;__cpp_lib_constexpr_algorithms&#32;201806L</emphasis>
196 <emphasis role="preprocessor">#endif</emphasis>
197 
198 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
199 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
200 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
202 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(_IIter,&#32;_IIter,&#32;_Predicate);
203 
204 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
205 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
207 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link>(_IIter,&#32;_IIter,&#32;_Predicate);
208 <emphasis role="preprocessor">#endif</emphasis>
209 
210 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
211 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
213 &#32;&#32;&#32;&#32;binary_search(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
214 
215 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
216 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
217 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
218 &#32;&#32;&#32;&#32;binary_search(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
219 
220 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
221 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
222 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
224 &#32;&#32;&#32;&#32;<link linkend="_namespaceclamp">clamp</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
225 
226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
227 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
228 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
229 &#32;&#32;&#32;&#32;<link linkend="_namespaceclamp">clamp</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
230 <emphasis role="preprocessor">#endif</emphasis>
231 
232 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
233 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
234 &#32;&#32;&#32;&#32;_OIter
235 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(_IIter,&#32;_IIter,&#32;_OIter);
236 
237 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BIter2&gt;
238 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
239 &#32;&#32;&#32;&#32;_BIter2
240 &#32;&#32;&#32;&#32;copy_backward(_BIter1,&#32;_BIter1,&#32;_BIter2);
241 
242 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
243 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
244 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
245 &#32;&#32;&#32;&#32;_OIter
246 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1">copy_if</link>(_IIter,&#32;_IIter,&#32;_OIter,&#32;_Predicate);
247 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
249 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
250 &#32;&#32;&#32;&#32;_OIter
251 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad65e2656aa6e6ce70150b2dfa9669cde">copy_n</link>(_IIter,&#32;_Size,&#32;_OIter);
252 <emphasis role="preprocessor">#endif</emphasis>
253 
254 &#32;&#32;<emphasis role="comment">//&#32;count</emphasis>
255 &#32;&#32;<emphasis role="comment">//&#32;count_if</emphasis>
256 
257 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
258 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
259 &#32;&#32;&#32;&#32;pair&lt;_FIter,&#32;_FIter&gt;
260 &#32;&#32;&#32;&#32;equal_range(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
261 
262 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
263 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
264 &#32;&#32;&#32;&#32;pair&lt;_FIter,&#32;_FIter&gt;
265 &#32;&#32;&#32;&#32;equal_range(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
266 
267 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
268 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
269 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
270 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">fill</link>(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
271 
272 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
273 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
274 &#32;&#32;&#32;&#32;_OIter
275 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">fill_n</link>(_OIter,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
276 
277 &#32;&#32;<emphasis role="comment">//&#32;find</emphasis>
278 
279 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2&gt;
280 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
281 &#32;&#32;&#32;&#32;_FIter1
282 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">find_end</link>(_FIter1,&#32;_FIter1,&#32;_FIter2,&#32;_FIter2);
283 
284 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
285 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
286 &#32;&#32;&#32;&#32;_FIter1
287 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">find_end</link>(_FIter1,&#32;_FIter1,&#32;_FIter2,&#32;_FIter2,&#32;_BinaryPredicate);
288 
289 &#32;&#32;<emphasis role="comment">//&#32;find_first_of</emphasis>
290 &#32;&#32;<emphasis role="comment">//&#32;find_if</emphasis>
291 
292 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
293 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
294 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
295 &#32;&#32;&#32;&#32;_IIter
296 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79">find_if_not</link>(_IIter,&#32;_IIter,&#32;_Predicate);
297 <emphasis role="preprocessor">#endif</emphasis>
298 
299 &#32;&#32;<emphasis role="comment">//&#32;for_each</emphasis>
300 &#32;&#32;<emphasis role="comment">//&#32;generate</emphasis>
301 &#32;&#32;<emphasis role="comment">//&#32;generate_n</emphasis>
302 
303 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
304 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
305 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
306 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">includes</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2);
307 
308 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
309 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
310 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
311 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">includes</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_Compare);
312 
313 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter&gt;
314 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
315 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">inplace_merge</link>(_BIter,&#32;_BIter,&#32;_BIter);
316 
317 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
318 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
319 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">inplace_merge</link>(_BIter,&#32;_BIter,&#32;_BIter,&#32;_Compare);
320 
321 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
322 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
323 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
324 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
325 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d">is_heap</link>(_RAIter,&#32;_RAIter);
326 
327 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
328 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
329 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
330 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d">is_heap</link>(_RAIter,&#32;_RAIter,&#32;_Compare);
331 
332 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
333 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
334 &#32;&#32;&#32;&#32;_RAIter
335 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">is_heap_until</link>(_RAIter,&#32;_RAIter);
336 
337 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
338 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
339 &#32;&#32;&#32;&#32;_RAIter
340 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">is_heap_until</link>(_RAIter,&#32;_RAIter,&#32;_Compare);
341 
342 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
343 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
344 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
345 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1437bae2cd332f755a3e88e264a04525">is_partitioned</link>(_IIter,&#32;_IIter,&#32;_Predicate);
346 
347 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2&gt;
348 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
349 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
350 &#32;&#32;&#32;&#32;is_permutation(_FIter1,&#32;_FIter1,&#32;_FIter2);
351 
352 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
354 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
355 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
356 &#32;&#32;&#32;&#32;is_permutation(_FIter1,&#32;_FIter1,&#32;_FIter2,&#32;_BinaryPredicate);
357 
358 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
359 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
360 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
361 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">is_sorted</link>(_FIter,&#32;_FIter);
362 
363 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
364 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
365 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
366 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">is_sorted</link>(_FIter,&#32;_FIter,&#32;_Compare);
367 
368 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
369 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
370 &#32;&#32;&#32;&#32;_FIter
371 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">is_sorted_until</link>(_FIter,&#32;_FIter);
372 
373 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
374 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
375 &#32;&#32;&#32;&#32;_FIter
376 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">is_sorted_until</link>(_FIter,&#32;_FIter,&#32;_Compare);
377 <emphasis role="preprocessor">#endif</emphasis>
378 
379 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2&gt;
380 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
381 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
382 &#32;&#32;&#32;&#32;iter_swap(_FIter1,&#32;_FIter2);
383 
384 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
385 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
386 &#32;&#32;&#32;&#32;_FIter
387 &#32;&#32;&#32;&#32;lower_bound(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
388 
389 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
390 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
391 &#32;&#32;&#32;&#32;_FIter
392 &#32;&#32;&#32;&#32;lower_bound(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
393 
394 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
395 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
396 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
397 &#32;&#32;&#32;&#32;make_heap(_RAIter,&#32;_RAIter);
398 
399 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
400 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
401 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
402 &#32;&#32;&#32;&#32;make_heap(_RAIter,&#32;_RAIter,&#32;_Compare);
403 
404 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
405 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
406 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
407 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
408 
409 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
410 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
411 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
412 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
413 
414 &#32;&#32;<emphasis role="comment">//&#32;max_element</emphasis>
415 &#32;&#32;<emphasis role="comment">//&#32;merge</emphasis>
416 
417 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
418 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
420 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
421 
422 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
423 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
425 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
426 
427 &#32;&#32;<emphasis role="comment">//&#32;min_element</emphasis>
428 
429 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
430 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
431 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
432 &#32;&#32;&#32;&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;
433 &#32;&#32;&#32;&#32;minmax(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
434 
435 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
436 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
437 &#32;&#32;&#32;&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;
438 &#32;&#32;&#32;&#32;minmax(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
439 
440 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
441 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
442 &#32;&#32;&#32;&#32;pair&lt;_FIter,&#32;_FIter&gt;
443 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">minmax_element</link>(_FIter,&#32;_FIter);
444 
445 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
446 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
447 &#32;&#32;&#32;&#32;pair&lt;_FIter,&#32;_FIter&gt;
448 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">minmax_element</link>(_FIter,&#32;_FIter,&#32;_Compare);
449 
450 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
451 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
452 &#32;&#32;&#32;&#32;_Tp
453 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(initializer_list&lt;_Tp&gt;);
454 
455 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
456 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
457 &#32;&#32;&#32;&#32;_Tp
458 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(initializer_list&lt;_Tp&gt;,&#32;_Compare);
459 
460 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
461 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
462 &#32;&#32;&#32;&#32;_Tp
463 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(initializer_list&lt;_Tp&gt;);
464 
465 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
466 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
467 &#32;&#32;&#32;&#32;_Tp
468 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(initializer_list&lt;_Tp&gt;,&#32;_Compare);
469 
470 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
471 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
472 &#32;&#32;&#32;&#32;pair&lt;_Tp,&#32;_Tp&gt;
473 &#32;&#32;&#32;&#32;minmax(initializer_list&lt;_Tp&gt;);
474 
475 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
476 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
477 &#32;&#32;&#32;&#32;pair&lt;_Tp,&#32;_Tp&gt;
478 &#32;&#32;&#32;&#32;minmax(initializer_list&lt;_Tp&gt;,&#32;_Compare);
479 <emphasis role="preprocessor">#endif</emphasis>
480 
481 &#32;&#32;<emphasis role="comment">//&#32;mismatch</emphasis>
482 
483 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter&gt;
484 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
485 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
486 &#32;&#32;&#32;&#32;next_permutation(_BIter,&#32;_BIter);
487 
488 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
489 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
490 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
491 &#32;&#32;&#32;&#32;next_permutation(_BIter,&#32;_BIter,&#32;_Compare);
492 
493 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
494 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
495 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
496 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
497 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>(_IIter,&#32;_IIter,&#32;_Predicate);
498 <emphasis role="preprocessor">#endif</emphasis>
499 
500 &#32;&#32;<emphasis role="comment">//&#32;nth_element</emphasis>
501 &#32;&#32;<emphasis role="comment">//&#32;partial_sort</emphasis>
502 
503 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
504 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
505 &#32;&#32;&#32;&#32;_RAIter
506 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aede1625926fee2cb08e34aed9a057213">partial_sort_copy</link>(_IIter,&#32;_IIter,&#32;_RAIter,&#32;_RAIter);
507 
508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
509 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
510 &#32;&#32;&#32;&#32;_RAIter
511 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aede1625926fee2cb08e34aed9a057213">partial_sort_copy</link>(_IIter,&#32;_IIter,&#32;_RAIter,&#32;_RAIter,&#32;_Compare);
512 
513 &#32;&#32;<emphasis role="comment">//&#32;partition</emphasis>
514 
515 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
516 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter1,
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
518 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
519 &#32;&#32;&#32;&#32;pair&lt;_OIter1,&#32;_OIter2&gt;
520 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b">partition_copy</link>(_IIter,&#32;_IIter,&#32;_OIter1,&#32;_OIter2,&#32;_Predicate);
521 
522 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
523 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
524 &#32;&#32;&#32;&#32;_FIter
525 &#32;&#32;&#32;&#32;partition_point(_FIter,&#32;_FIter,&#32;_Predicate);
526 <emphasis role="preprocessor">#endif</emphasis>
527 
528 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
529 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
530 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
531 &#32;&#32;&#32;&#32;pop_heap(_RAIter,&#32;_RAIter);
532 
533 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
534 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
536 &#32;&#32;&#32;&#32;pop_heap(_RAIter,&#32;_RAIter,&#32;_Compare);
537 
538 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter&gt;
539 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
540 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
541 &#32;&#32;&#32;&#32;prev_permutation(_BIter,&#32;_BIter);
542 
543 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
544 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
545 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
546 &#32;&#32;&#32;&#32;prev_permutation(_BIter,&#32;_BIter,&#32;_Compare);
547 
548 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
549 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
550 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
551 &#32;&#32;&#32;&#32;push_heap(_RAIter,&#32;_RAIter);
552 
553 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
554 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
555 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
556 &#32;&#32;&#32;&#32;push_heap(_RAIter,&#32;_RAIter,&#32;_Compare);
557 
558 &#32;&#32;<emphasis role="comment">//&#32;random_shuffle</emphasis>
559 
560 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
561 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
562 &#32;&#32;&#32;&#32;_FIter
563 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
564 
565 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
566 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
567 &#32;&#32;&#32;&#32;_FIter
568 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908">remove_if</link>(_FIter,&#32;_FIter,&#32;_Predicate);
569 
570 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
571 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
572 &#32;&#32;&#32;&#32;_OIter
573 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a6b787bee96a52b5b62d7fe8aa6f15fd8">remove_copy</link>(_IIter,&#32;_IIter,&#32;_OIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
574 
575 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
576 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
577 &#32;&#32;&#32;&#32;_OIter
578 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a11eaff910d723a0ea9707f30aead68c4">remove_copy_if</link>(_IIter,&#32;_IIter,&#32;_OIter,&#32;_Predicate);
579 
580 &#32;&#32;<emphasis role="comment">//&#32;replace</emphasis>
581 
582 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
583 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
584 &#32;&#32;&#32;&#32;_OIter
585 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa606c48e16f23e6c4f613d187cc3675c">replace_copy</link>(_IIter,&#32;_IIter,&#32;_OIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
586 
587 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
588 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
589 &#32;&#32;&#32;&#32;_OIter
590 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a2923a872c909e0531e5db0309ad30a95">replace_copy_if</link>(_Iter,&#32;_Iter,&#32;_OIter,&#32;_Predicate,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
591 
592 &#32;&#32;<emphasis role="comment">//&#32;replace_if</emphasis>
593 
594 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter&gt;
595 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
596 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
597 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719">reverse</link>(_BIter,&#32;_BIter);
598 
599 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
600 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
601 &#32;&#32;&#32;&#32;_OIter
602 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa750b5b7ee58a0ba12515997f5066c49">reverse_copy</link>(_BIter,&#32;_BIter,&#32;_OIter);
603 
604 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>_V2
605 &#32;&#32;{
606 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
607 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
608 &#32;&#32;&#32;&#32;&#32;&#32;_FIter
609 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__ext__matrix__transform_1ga42613eb0c7deb5f5188fc159df6c8950">rotate</link>(_FIter,&#32;_FIter,&#32;_FIter);
610 &#32;&#32;}
611 
612 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
613 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
614 &#32;&#32;&#32;&#32;_OIter
615 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a6a632f2677de3977838e216e3a33338c">rotate_copy</link>(_FIter,&#32;_FIter,&#32;_FIter,&#32;_OIter);
616 
617 &#32;&#32;<emphasis role="comment">//&#32;search</emphasis>
618 &#32;&#32;<emphasis role="comment">//&#32;search_n</emphasis>
619 &#32;&#32;<emphasis role="comment">//&#32;set_difference</emphasis>
620 &#32;&#32;<emphasis role="comment">//&#32;set_intersection</emphasis>
621 &#32;&#32;<emphasis role="comment">//&#32;set_symmetric_difference</emphasis>
622 &#32;&#32;<emphasis role="comment">//&#32;set_union</emphasis>
623 
624 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&gt;=&#32;201103L)&#32;&amp;&amp;&#32;defined(_GLIBCXX_USE_C99_STDINT_TR1)</emphasis>
625 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UGenerator&gt;
626 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
627 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1abc0275611237ee9364ae8d16e82cb83b">shuffle</link>(_RAIter,&#32;_RAIter,&#32;_UGenerator&amp;&amp;);
628 <emphasis role="preprocessor">#endif</emphasis>
629 
630 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
631 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
632 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
633 &#32;&#32;&#32;&#32;sort_heap(_RAIter,&#32;_RAIter);
634 
635 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
636 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
637 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
638 &#32;&#32;&#32;&#32;sort_heap(_RAIter,&#32;_RAIter,&#32;_Compare);
639 
640 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
641 &#32;&#32;&#32;&#32;_BIter
642 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">stable_partition</link>(_BIter,&#32;_BIter,&#32;_Predicate);
643 
644 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
645 &#32;&#32;<emphasis role="comment">//&#32;For&#32;C++11&#32;swap()&#32;is&#32;declared&#32;in&#32;&lt;type_traits&gt;.</emphasis>
646 
647 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
648 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
649 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
650 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Tp&amp;&#32;__a,&#32;_Tp&amp;&#32;__b);
651 
652 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
653 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
654 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
655 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Tp&#32;(&amp;__a)[_Nm],&#32;_Tp&#32;(&amp;__b)[_Nm]);
656 <emphasis role="preprocessor">#endif</emphasis>
657 
658 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2&gt;
659 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
660 &#32;&#32;&#32;&#32;_FIter2
661 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200">swap_ranges</link>(_FIter1,&#32;_FIter1,&#32;_FIter2);
662 
663 &#32;&#32;<emphasis role="comment">//&#32;transform</emphasis>
664 
665 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
666 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
667 &#32;&#32;&#32;&#32;_FIter
668 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link>(_FIter,&#32;_FIter);
669 
670 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
671 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
672 &#32;&#32;&#32;&#32;_FIter
673 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link>(_FIter,&#32;_FIter,&#32;_BinaryPredicate);
674 
675 &#32;&#32;<emphasis role="comment">//&#32;unique_copy</emphasis>
676 
677 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
678 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
679 &#32;&#32;&#32;&#32;_FIter
680 &#32;&#32;&#32;&#32;upper_bound(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
681 
682 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
683 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
684 &#32;&#32;&#32;&#32;_FIter
685 &#32;&#32;&#32;&#32;upper_bound(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Compare);
686 
687 _GLIBCXX_BEGIN_NAMESPACE_ALGO
688 
689 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
690 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
691 &#32;&#32;&#32;&#32;_FIter
692 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(_FIter,&#32;_FIter);
693 
694 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
695 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
696 &#32;&#32;&#32;&#32;_FIter
697 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(_FIter,&#32;_FIter,&#32;_BinaryPredicate);
698 
699 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
700 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
701 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
702 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(_IIter,&#32;_IIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
703 
704 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
705 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
706 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
707 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link>(_IIter,&#32;_IIter,&#32;_Predicate);
708 
709 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
710 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
711 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
712 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1,&#32;_IIter1,&#32;_IIter2);
713 
714 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
715 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
716 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
717 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_BinaryPredicate);
718 
719 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
720 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
721 &#32;&#32;&#32;&#32;_IIter
722 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">find</link>(_IIter,&#32;_IIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
723 
724 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2&gt;
725 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
726 &#32;&#32;&#32;&#32;_FIter1
727 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_FIter1,&#32;_FIter1,&#32;_FIter2,&#32;_FIter2);
728 
729 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
730 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
731 &#32;&#32;&#32;&#32;_FIter1
732 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_FIter1,&#32;_FIter1,&#32;_FIter2,&#32;_FIter2,&#32;_BinaryPredicate);
733 
734 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
735 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
736 &#32;&#32;&#32;&#32;_IIter
737 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">find_if</link>(_IIter,&#32;_IIter,&#32;_Predicate);
738 
739 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Funct&gt;
740 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
741 &#32;&#32;&#32;&#32;_Funct
742 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>(_IIter,&#32;_IIter,&#32;_Funct);
743 
744 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
745 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
746 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
747 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">generate</link>(_FIter,&#32;_FIter,&#32;_Generator);
748 
749 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
750 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
751 &#32;&#32;&#32;&#32;_OIter
752 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link>(_OIter,&#32;_Size,&#32;_Generator);
753 
754 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
755 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
756 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
757 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2);
758 
759 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
760 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
761 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
762 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_Compare);
763 
764 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
765 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
766 &#32;&#32;&#32;&#32;_FIter
767 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIter,&#32;_FIter);
768 
769 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
770 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
771 &#32;&#32;&#32;&#32;_FIter
772 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIter,&#32;_FIter,&#32;_Compare);
773 
774 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
775 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
776 &#32;&#32;&#32;&#32;_OIter
777 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter);
778 
779 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
781 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
782 &#32;&#32;&#32;&#32;_OIter
783 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter,&#32;_Compare);
784 
785 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter&gt;
786 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
787 &#32;&#32;&#32;&#32;_FIter
788 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIter,&#32;_FIter);
789 
790 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
791 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
792 &#32;&#32;&#32;&#32;_FIter
793 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIter,&#32;_FIter,&#32;_Compare);
794 
795 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2&gt;
796 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
797 &#32;&#32;&#32;&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
798 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_IIter1,&#32;_IIter1,&#32;_IIter2);
799 
800 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
801 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
802 &#32;&#32;&#32;&#32;pair&lt;_IIter1,&#32;_IIter2&gt;
803 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_BinaryPredicate);
804 
805 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
806 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
807 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
808 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>(_RAIter,&#32;_RAIter,&#32;_RAIter);
809 
810 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
811 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
812 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
813 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>(_RAIter,&#32;_RAIter,&#32;_RAIter,&#32;_Compare);
814 
815 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
816 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
817 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
818 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>(_RAIter,&#32;_RAIter,&#32;_RAIter);
819 
820 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
821 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
822 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
823 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>(_RAIter,&#32;_RAIter,&#32;_RAIter,&#32;_Compare);
824 
825 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
826 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
827 &#32;&#32;&#32;&#32;_BIter
828 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link>(_BIter,&#32;_BIter,&#32;_Predicate);
829 
830 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
831 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
832 &#32;&#32;&#32;&#32;random_shuffle(_RAIter,&#32;_RAIter);
833 
834 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
835 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
836 &#32;&#32;&#32;&#32;random_shuffle(_RAIter,&#32;_RAIter,
837 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&gt;=&#32;201103L
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Generator&amp;&amp;);
839 <emphasis role="preprocessor">#else</emphasis>
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Generator&amp;);
841 <emphasis role="preprocessor">#endif</emphasis>
842 
843 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
844 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
845 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
846 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(_FIter,&#32;_FIter,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
847 
848 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
849 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
850 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
851 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link>(_FIter,&#32;_FIter,&#32;_Predicate,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
852 
853 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2&gt;
854 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
855 &#32;&#32;&#32;&#32;_FIter1
856 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_FIter1,&#32;_FIter1,&#32;_FIter2,&#32;_FIter2);
857 
858 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
859 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
860 &#32;&#32;&#32;&#32;_FIter1
861 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_FIter1,&#32;_FIter1,&#32;_FIter2,&#32;_FIter2,&#32;_BinaryPredicate);
862 
863 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
864 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
865 &#32;&#32;&#32;&#32;_FIter
866 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link>(_FIter,&#32;_FIter,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
867 
868 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
870 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
871 &#32;&#32;&#32;&#32;_FIter
872 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link>(_FIter,&#32;_FIter,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_BinaryPredicate);
873 
874 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
875 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
876 &#32;&#32;&#32;&#32;_OIter
877 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter);
878 
879 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
881 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
882 &#32;&#32;&#32;&#32;_OIter
883 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter,&#32;_Compare);
884 
885 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
886 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
887 &#32;&#32;&#32;&#32;_OIter
888 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter);
889 
890 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
892 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
893 &#32;&#32;&#32;&#32;_OIter
894 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter,&#32;_Compare);
895 
896 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
897 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
898 &#32;&#32;&#32;&#32;_OIter
899 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter);
900 
901 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
903 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
904 &#32;&#32;&#32;&#32;_OIter
905 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OIter,&#32;_Compare);
907 
908 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
909 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
910 &#32;&#32;&#32;&#32;_OIter
911 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter);
912 
913 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
915 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
916 &#32;&#32;&#32;&#32;_OIter
917 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_IIter2,&#32;_OIter,&#32;_Compare);
918 
919 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
920 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
921 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
922 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter,&#32;_RAIter);
923 
924 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
925 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
926 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
927 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter,&#32;_RAIter,&#32;_Compare);
928 
929 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
930 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
931 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter,&#32;_RAIter);
932 
933 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
934 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
935 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter,&#32;_RAIter,&#32;_Compare);
936 
937 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryOperation&gt;
938 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
939 &#32;&#32;&#32;&#32;_OIter
940 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter,&#32;_IIter,&#32;_OIter,&#32;_UnaryOperation);
941 
942 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
944 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
945 &#32;&#32;&#32;&#32;_OIter
946 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter1,&#32;_IIter1,&#32;_IIter2,&#32;_OIter,&#32;_BinaryOperation);
947 
948 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter&gt;
949 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
950 &#32;&#32;&#32;&#32;_OIter
951 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link>(_IIter,&#32;_IIter,&#32;_OIter);
952 
953 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
954 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
955 &#32;&#32;&#32;&#32;_OIter
956 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link>(_IIter,&#32;_IIter,&#32;_OIter,&#32;_BinaryPredicate);
957 
958 _GLIBCXX_END_NAMESPACE_ALGO
959 _GLIBCXX_END_NAMESPACE_VERSION
960 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
961 
962 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_PARALLEL</emphasis>
963 <emphasis role="preprocessor">#&#32;include&#32;&lt;parallel/algorithmfwd.h&gt;</emphasis>
964 <emphasis role="preprocessor">#endif</emphasis>
965 
966 <emphasis role="preprocessor">#endif</emphasis>
967 
</programlisting></section>
