<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__iterator_8h_source" xml:lang="en-US">
<title>stl_iterator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_iterator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Iterators&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1998</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
60 <emphasis role="preprocessor">#ifndef&#32;_STL_ITERATOR_H</emphasis>
61 <emphasis role="preprocessor">#define&#32;_STL_ITERATOR_H&#32;1</emphasis>
62 
63 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;ext/type_traits.h&gt;</emphasis>
66 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
67 <emphasis role="preprocessor">#include&#32;&lt;bits/ptr_traits.h&gt;</emphasis>
68 
69 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
70 <emphasis role="preprocessor">#&#32;include&#32;&lt;type_traits&gt;</emphasis>
71 <emphasis role="preprocessor">#endif</emphasis>
72 
73 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
74 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_array_constexpr&#32;201811L</emphasis>
75 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_iterator&#32;201811L</emphasis>
76 <emphasis role="preprocessor">#elif&#32;__cplusplus&#32;==&#32;201703L</emphasis>
77 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_array_constexpr&#32;201803L</emphasis>
78 <emphasis role="preprocessor">#endif</emphasis>
79 
80 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
81 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
82 <emphasis role="preprocessor">#&#32;include&#32;&lt;new&gt;</emphasis>
83 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/exception_defines.h&gt;</emphasis>
84 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/iterator_concepts.h&gt;</emphasis>
85 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/stl_construct.h&gt;</emphasis>
86 <emphasis role="preprocessor">#endif</emphasis>
87 
88 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
89 {
90 _GLIBCXX_BEGIN_NAMESPACE_VERSION
91 
97 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
98 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
99 &#32;&#32;{
100 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Weaken&#32;iterator_category&#32;_Cat&#32;to&#32;_Limit&#32;if&#32;it&#32;is&#32;derived&#32;from&#32;that,</emphasis>
101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;use&#32;_Otherwise.</emphasis>
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cat,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Limit,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Otherwise&#32;=&#32;_Cat&gt;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__clamp_iter_cat
104 &#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;derived_from&lt;_Cat,&#32;_Limit&gt;,&#32;_Limit,&#32;_Otherwise&gt;;
105 &#32;&#32;}
106 <emphasis role="preprocessor">#endif</emphasis>
107 
108 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;std::iterator.</emphasis>
109 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
110 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
111 
112 &#32;&#32;<emphasis role="comment">//&#32;24.4.1&#32;Reverse&#32;iterators</emphasis>
131 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>reverse_iterator
133 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;typename&#32;iterator_traits&lt;_Iterator&gt;::iterator_category,
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_Iterator&gt;::value_type,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_Iterator&gt;::difference_type,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_Iterator&gt;::pointer,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_Iterator&gt;::reference&gt;
138 &#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>reverse_iterator;
141 
142 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3435.&#32;three_way_comparable_with&lt;reverse_iterator&lt;int*&gt;,&#32;[...]&gt;</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__convertible&#32;=&#32;!is_same_v&lt;_Iter,&#32;_Iterator&gt;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Iter&amp;,&#32;_Iterator&gt;;
148 <emphasis role="preprocessor">#endif</emphasis>
149 
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
151 &#32;&#32;&#32;&#32;&#32;&#32;_Iterator&#32;current;
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_Iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__traits_type;
154 
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_type;
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
158 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_lib_concepts</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::difference_type&#32;&#32;&#32;difference_type;
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::reference&#32;&#32;&#32;&#32;&#32;reference;
161 <emphasis role="preprocessor">#else</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_concept
163 &#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;random_access_iterator&lt;_Iterator&gt;,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator_tag&gt;;
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category
167 &#32;&#32;&#32;&#32;=&#32;__detail::__clamp_iter_cat&lt;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::iterator_category,
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag&gt;;
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;iter_value_t&lt;_Iterator&gt;;
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;iter_difference_t&lt;_Iterator&gt;;
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;iter_reference_t&lt;_Iterator&gt;;
172 <emphasis role="preprocessor">#endif</emphasis>
173 
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;235&#32;No&#32;specification&#32;of&#32;default&#32;ctor&#32;for&#32;reverse_iterator</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1012.&#32;reverse_iterator&#32;default&#32;ctor&#32;should&#32;value&#32;initialize</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
182 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator()
183 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator()))
184 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;current()
185 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
186 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX17_CONSTEXPR
191 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator(iterator_type&#32;__x)
192 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(_Iterator(__x)))
193 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;current(__x)
194 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
195 
199 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
200 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&amp;&#32;__x)
201 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(_Iterator(__x.current)))
202 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;current(__x.current)
203 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
204 
205 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
206 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
207 <emphasis role="preprocessor">#endif</emphasis>
208 
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
214 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__convertible&lt;_Iter&gt;
216 <emphasis role="preprocessor">#endif</emphasis>
217 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iter&gt;&amp;&#32;__x)
219 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(_Iterator(__x.current)))
220 &#32;&#32;&#32;&#32;:&#32;current(__x.current)
221 &#32;&#32;&#32;&#32;{&#32;}
222 
223 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
225 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__convertible&lt;_Iter&gt;
227 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;assignable_from&lt;_Iterator&amp;,&#32;const&#32;_Iter&amp;&gt;
228 <emphasis role="preprocessor">#endif</emphasis>
229 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
230 &#32;&#32;&#32;&#32;reverse_iterator&amp;
231 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iter&gt;&amp;&#32;__x)
232 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(current&#32;=&#32;__x.current))
233 &#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;__x.current;
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
236 &#32;&#32;&#32;&#32;}
237 <emphasis role="preprocessor">#endif</emphasis>
238 
242 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
243 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;iterator_type
244 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;const
245 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(current)))
246 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;current;&#32;}
247 
258 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
259 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reference
260 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
261 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
262 &#32;&#32;&#32;&#32;_Iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;current;
263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*--<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
264 &#32;&#32;&#32;&#32;&#32;&#32;}
265 
271 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
272 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
273 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const
274 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_concepts&#32;&gt;=&#32;201907L</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_pointer_v&lt;_Iterator&gt;
276 &#32;&#32;&#32;&#32;||&#32;<emphasis role="keyword">requires</emphasis>(<emphasis role="keyword">const</emphasis>&#32;_Iterator&#32;__i)&#32;{&#32;__i.operator-&gt;();&#32;}
277 <emphasis role="preprocessor">#endif</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;{
279 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
280 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1052.&#32;operator-&gt;&#32;should&#32;also&#32;support&#32;smart&#32;pointers</emphasis>
281 &#32;&#32;&#32;&#32;_Iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;current;
282 &#32;&#32;&#32;&#32;--<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
283 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_to_pointer(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
284 &#32;&#32;&#32;&#32;&#32;&#32;}
285 
291 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator&amp;
292 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
293 &#32;&#32;&#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;--current;
295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
296 &#32;&#32;&#32;&#32;&#32;&#32;}
297 
303 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator
304 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
305 &#32;&#32;&#32;&#32;&#32;&#32;{
306 &#32;&#32;&#32;&#32;reverse_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
307 &#32;&#32;&#32;&#32;--current;
308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
309 &#32;&#32;&#32;&#32;&#32;&#32;}
310 
316 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator&amp;
317 &#32;&#32;&#32;&#32;&#32;&#32;operator--()
318 &#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;++current;
320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
321 &#32;&#32;&#32;&#32;&#32;&#32;}
322 
328 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator
329 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)
330 &#32;&#32;&#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;reverse_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
332 &#32;&#32;&#32;&#32;++current;
333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
334 &#32;&#32;&#32;&#32;&#32;&#32;}
335 
341 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
342 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator
343 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(difference_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
344 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(current&#32;-&#32;__n);&#32;}
345 
352 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator&amp;
353 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(difference_type&#32;__n)
354 &#32;&#32;&#32;&#32;&#32;&#32;{
355 &#32;&#32;&#32;&#32;current&#32;-=&#32;__n;
356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
357 &#32;&#32;&#32;&#32;&#32;&#32;}
358 
364 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
365 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator
366 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(difference_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
367 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(current&#32;+&#32;__n);&#32;}
368 
375 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator&amp;
376 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(difference_type&#32;__n)
377 &#32;&#32;&#32;&#32;&#32;&#32;{
378 &#32;&#32;&#32;&#32;current&#32;+=&#32;__n;
379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
380 &#32;&#32;&#32;&#32;&#32;&#32;}
381 
387 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
388 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reference
389 &#32;&#32;&#32;&#32;&#32;&#32;operator[](difference_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
390 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(*<emphasis role="keyword">this</emphasis>&#32;+&#32;__n);&#32;}
391 
392 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_rvalue_reference_t&lt;_Iterator&gt;
395 &#32;&#32;&#32;&#32;&#32;&#32;iter_move(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&amp;&#32;__i)
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_constructible_v&lt;_Iterator&gt;
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(ranges::iter_move(--std::declval&lt;_Iterator&amp;&gt;())))
398 &#32;&#32;&#32;&#32;&#32;&#32;{
399 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__i.base();
400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_move(--<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
401 &#32;&#32;&#32;&#32;&#32;&#32;}
402 
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;indirectly_swappable&lt;_Iterator&gt;&#32;_Iter2&gt;
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
405 &#32;&#32;&#32;&#32;iter_swap(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&amp;&#32;__x,
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iter2&gt;&amp;&#32;__y)
407 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_constructible_v&lt;_Iterator&gt;
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_copy_constructible_v&lt;_Iter2&gt;
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(ranges::iter_swap(--std::declval&lt;_Iterator&amp;&gt;(),
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--std::declval&lt;_Iter2&amp;&gt;())))
411 &#32;&#32;&#32;&#32;{
412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__xtmp&#32;=&#32;__x.base();
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ytmp&#32;=&#32;__y.base();
414 &#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(--__xtmp,&#32;--__ytmp);
415 &#32;&#32;&#32;&#32;}
416 <emphasis role="preprocessor">#endif</emphasis>
417 
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
420 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;_Tp*
421 &#32;&#32;&#32;&#32;_S_to_pointer(_Tp*&#32;__p)
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;&#32;}
423 
424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
425 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
426 &#32;&#32;&#32;&#32;_S_to_pointer(_Tp&#32;__t)
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t.operator-&gt;();&#32;}
428 &#32;&#32;&#32;&#32;};
429 
431 
440 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L&#32;||&#32;!&#32;defined&#32;__cpp_lib_concepts</emphasis>
441 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
442 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
443 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
444 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
446 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;==&#32;__y.base();&#32;}
447 
448 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
449 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
450 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
451 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
453 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y.base()&#32;&lt;&#32;__x.base();&#32;}
454 
455 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
456 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
458 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
460 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
461 
462 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
463 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
465 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
467 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
468 
469 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
470 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
471 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
472 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
474 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
475 
476 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
477 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
478 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
479 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
481 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
482 
483 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
484 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;280.&#32;Comparison&#32;of&#32;reverse_iterator&#32;to&#32;const&#32;reverse_iterator.</emphasis>
485 
486 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
487 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
489 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
491 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;==&#32;__y.base();&#32;}
492 
493 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
494 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
495 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
496 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
498 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&gt;&#32;__y.base();&#32;}
499 
500 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
501 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
502 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
503 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
505 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;!=&#32;__y.base();&#32;}
506 
507 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
508 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
509 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
510 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
512 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;&#32;__y.base();&#32;}
513 
514 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
515 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
516 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
518 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&gt;=&#32;__y.base();&#32;}
519 
520 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
521 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
522 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
523 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
525 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;=&#32;__y.base();&#32;}
526 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
527 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
528 &#32;&#32;&#32;&#32;[[nodiscard]]
529 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
530 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
532 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;==&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
533 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;==&#32;__y.base();&#32;}
534 
535 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
536 &#32;&#32;&#32;&#32;[[nodiscard]]
537 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
538 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
540 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;!=&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
541 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;!=&#32;__y.base();&#32;}
542 
543 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
544 &#32;&#32;&#32;&#32;[[nodiscard]]
545 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
546 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
548 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;&gt;&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
549 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&gt;&#32;__y.base();&#32;}
550 
551 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
552 &#32;&#32;&#32;&#32;[[nodiscard]]
553 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
554 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
556 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;&lt;&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
557 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;&#32;__y.base();&#32;}
558 
559 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
560 &#32;&#32;&#32;&#32;[[nodiscard]]
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
562 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
564 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;&gt;=&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
565 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&gt;=&#32;__y.base();&#32;}
566 
567 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
568 &#32;&#32;&#32;&#32;[[nodiscard]]
569 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
570 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
572 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;&lt;=&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
573 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;=&#32;__y.base();&#32;}
574 
575 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;three_way_comparable_with&lt;_IteratorL&gt;&#32;_IteratorR&gt;
577 &#32;&#32;&#32;&#32;[[nodiscard]]
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;compare_three_way_result_t&lt;_IteratorL,&#32;_IteratorR&gt;
579 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
581 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y.base()&#32;&lt;=&gt;&#32;__x.base();&#32;}
582 
583 &#32;&#32;<emphasis role="comment">//&#32;Additional,&#32;non-standard&#32;overloads&#32;to&#32;avoid&#32;ambiguities&#32;with&#32;greedy,</emphasis>
584 &#32;&#32;<emphasis role="comment">//&#32;unconstrained&#32;overloads&#32;in&#32;associated&#32;namespaces.</emphasis>
585 
586 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
587 &#32;&#32;&#32;&#32;[[nodiscard]]
588 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
589 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
591 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;==&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
592 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;==&#32;__y.base();&#32;}
593 
594 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;three_way_comparable&#32;_Iterator&gt;
595 &#32;&#32;&#32;&#32;[[nodiscard]]
596 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;compare_three_way_result_t&lt;_Iterator,&#32;_Iterator&gt;
597 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
599 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y.base()&#32;&lt;=&gt;&#32;__x.base();&#32;}
600 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
602 
603 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
604 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
605 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;::difference_type
606 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x,
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__y)
608 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y.base()&#32;-&#32;__x.base();&#32;}
609 
610 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
611 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;::difference_type
612 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
614 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y.base()&#32;-&#32;__x.base();&#32;}
615 <emphasis role="preprocessor">#else</emphasis>
616 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
617 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;685.&#32;reverse_iterator/move_iterator&#32;difference&#32;has&#32;invalid&#32;signatures</emphasis>
618 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
619 &#32;&#32;&#32;&#32;[[__nodiscard__]]
620 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>
621 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
623 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__y.base()&#32;-&#32;__x.base())
624 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y.base()&#32;-&#32;__x.base();&#32;}
625 <emphasis role="preprocessor">#endif</emphasis>
626 
627 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
628 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
629 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator&lt;_Iterator&gt;
630 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">typename</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;::difference_type&#32;__n,
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;&amp;&#32;__x)
632 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;(__x.base()&#32;-&#32;__n);&#32;}
633 
634 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
635 &#32;&#32;<emphasis role="comment">//&#32;Same&#32;as&#32;C++14&#32;make_reverse_iterator&#32;but&#32;used&#32;in&#32;C++11&#32;mode&#32;too.</emphasis>
636 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
637 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator&lt;_Iterator&gt;
638 &#32;&#32;&#32;&#32;__make_reverse_iterator(_Iterator&#32;__i)
639 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;(__i);&#32;}
640 
641 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
642 <emphasis role="preprocessor">#&#32;&#32;define&#32;__cpp_lib_make_reverse_iterator&#32;201402L</emphasis>
643 
644 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
645 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;2285.&#32;make_reverse_iterator</emphasis>
647 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
648 &#32;&#32;&#32;&#32;[[__nodiscard__]]
649 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;reverse_iterator&lt;_Iterator&gt;
650 &#32;&#32;&#32;&#32;make_reverse_iterator(_Iterator&#32;__i)
651 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator&lt;_Iterator&gt;(__i);&#32;}
652 
653 <emphasis role="preprocessor">#&#32;&#32;if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;defined&#32;__cpp_lib_concepts</emphasis>
654 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator2&gt;
655 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!sized_sentinel_for&lt;_Iterator1,&#32;_Iterator2&gt;)
656 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
657 &#32;&#32;&#32;&#32;disable_sized_sentinel_for&lt;reverse_iterator&lt;_Iterator1&gt;,
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator&lt;_Iterator2&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
659 <emphasis role="preprocessor">#&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
660 <emphasis role="preprocessor">#&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
661 
662 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
663 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
664 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
665 &#32;&#32;&#32;&#32;__niter_base(reverse_iterator&lt;_Iterator&gt;&#32;__it)
666 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__make_reverse_iterator(__niter_base(__it.base())))
667 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_reverse_iterator(__niter_base(__it.base()));&#32;}
668 
669 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
670 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_move_iterator&lt;reverse_iterator&lt;_Iterator&gt;&#32;&gt;
671 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__is_move_iterator&lt;_Iterator&gt;
672 &#32;&#32;&#32;&#32;{&#32;};
673 
674 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
675 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
676 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
677 &#32;&#32;&#32;&#32;__miter_base(reverse_iterator&lt;_Iterator&gt;&#32;__it)
678 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__make_reverse_iterator(__miter_base(__it.base())))
679 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_reverse_iterator(__miter_base(__it.base()));&#32;}
680 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
681 
682 &#32;&#32;<emphasis role="comment">//&#32;24.4.2.2.1&#32;back_insert_iterator</emphasis>
693 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
694 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>back_insert_iterator
695 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;output_iterator_tag,&#32;void,&#32;void,&#32;void,&#32;void&gt;
696 &#32;&#32;&#32;&#32;{
697 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
698 &#32;&#32;&#32;&#32;&#32;&#32;_Container*&#32;container;
699 
700 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Container&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;container_type;
703 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
705 <emphasis role="preprocessor">#endif</emphasis>
706 
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX20_CONSTEXPR
709 &#32;&#32;&#32;&#32;&#32;&#32;back_insert_iterator(_Container&amp;&#32;__x)
710 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;container(<link linkend="_namespacestd">std</link>::__addressof(__x))&#32;{&#32;}
711 
723 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
724 &#32;&#32;&#32;&#32;&#32;&#32;back_insert_iterator&amp;
725 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">typename</emphasis>&#32;_Container::const_reference&#32;__value)
726 &#32;&#32;&#32;&#32;&#32;&#32;{
727 &#32;&#32;&#32;&#32;container-&gt;push_back(__value);
728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
729 &#32;&#32;&#32;&#32;&#32;&#32;}
730 <emphasis role="preprocessor">#else</emphasis>
731 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
732 &#32;&#32;&#32;&#32;&#32;&#32;back_insert_iterator&amp;
733 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&amp;&#32;__value)
734 &#32;&#32;&#32;&#32;&#32;&#32;{
735 &#32;&#32;&#32;&#32;container-&gt;push_back(__value);
736 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
737 &#32;&#32;&#32;&#32;&#32;&#32;}
738 
739 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
740 &#32;&#32;&#32;&#32;&#32;&#32;back_insert_iterator&amp;
741 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&amp;&amp;&#32;__value)
742 &#32;&#32;&#32;&#32;&#32;&#32;{
743 &#32;&#32;&#32;&#32;container-&gt;push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__value));
744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
745 &#32;&#32;&#32;&#32;&#32;&#32;}
746 <emphasis role="preprocessor">#endif</emphasis>
747 
749 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
750 &#32;&#32;&#32;&#32;&#32;&#32;back_insert_iterator&amp;
751 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()
752 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
753 
755 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
756 &#32;&#32;&#32;&#32;&#32;&#32;back_insert_iterator&amp;
757 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
758 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
759 
761 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
762 &#32;&#32;&#32;&#32;&#32;&#32;back_insert_iterator
763 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
764 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
765 &#32;&#32;&#32;&#32;};
766 
778 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
779 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
780 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;back_insert_iterator&lt;_Container&gt;
781 &#32;&#32;&#32;&#32;back_inserter(_Container&amp;&#32;__x)
782 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;back_insert_iterator&lt;_Container&gt;(__x);&#32;}
783 
794 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
795 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>front_insert_iterator
796 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;output_iterator_tag,&#32;void,&#32;void,&#32;void,&#32;void&gt;
797 &#32;&#32;&#32;&#32;{
798 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
799 &#32;&#32;&#32;&#32;&#32;&#32;_Container*&#32;container;
800 
801 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Container&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;container_type;
804 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
806 <emphasis role="preprocessor">#endif</emphasis>
807 
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX20_CONSTEXPR
810 &#32;&#32;&#32;&#32;&#32;&#32;front_insert_iterator(_Container&amp;&#32;__x)
811 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;container(<link linkend="_namespacestd">std</link>::__addressof(__x))&#32;{&#32;}
812 
824 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
825 &#32;&#32;&#32;&#32;&#32;&#32;front_insert_iterator&amp;
826 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">typename</emphasis>&#32;_Container::const_reference&#32;__value)
827 &#32;&#32;&#32;&#32;&#32;&#32;{
828 &#32;&#32;&#32;&#32;container-&gt;push_front(__value);
829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
830 &#32;&#32;&#32;&#32;&#32;&#32;}
831 <emphasis role="preprocessor">#else</emphasis>
832 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
833 &#32;&#32;&#32;&#32;&#32;&#32;front_insert_iterator&amp;
834 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&amp;&#32;__value)
835 &#32;&#32;&#32;&#32;&#32;&#32;{
836 &#32;&#32;&#32;&#32;container-&gt;push_front(__value);
837 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
838 &#32;&#32;&#32;&#32;&#32;&#32;}
839 
840 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
841 &#32;&#32;&#32;&#32;&#32;&#32;front_insert_iterator&amp;
842 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&amp;&amp;&#32;__value)
843 &#32;&#32;&#32;&#32;&#32;&#32;{
844 &#32;&#32;&#32;&#32;container-&gt;push_front(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__value));
845 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
846 &#32;&#32;&#32;&#32;&#32;&#32;}
847 <emphasis role="preprocessor">#endif</emphasis>
848 
850 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
851 &#32;&#32;&#32;&#32;&#32;&#32;front_insert_iterator&amp;
852 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()
853 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
854 
856 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
857 &#32;&#32;&#32;&#32;&#32;&#32;front_insert_iterator&amp;
858 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
859 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
860 
862 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
863 &#32;&#32;&#32;&#32;&#32;&#32;front_insert_iterator
864 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
865 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
866 &#32;&#32;&#32;&#32;};
867 
879 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
880 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
881 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;front_insert_iterator&lt;_Container&gt;
882 &#32;&#32;&#32;&#32;front_inserter(_Container&amp;&#32;__x)
883 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;front_insert_iterator&lt;_Container&gt;(__x);&#32;}
884 
899 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
900 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>insert_iterator
901 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;output_iterator_tag,&#32;void,&#32;void,&#32;void,&#32;void&gt;
902 &#32;&#32;&#32;&#32;{
903 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;defined&#32;__cpp_lib_concepts</emphasis>
904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Iter&#32;=&#32;std::__detail::__range_iter_t&lt;_Container&gt;;
905 <emphasis role="preprocessor">#else</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::iterator&#32;&#32;&#32;&#32;&#32;_Iter;
907 <emphasis role="preprocessor">#endif</emphasis>
908 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
909 &#32;&#32;&#32;&#32;&#32;&#32;_Container*&#32;container;
910 &#32;&#32;&#32;&#32;&#32;&#32;_Iter&#32;iter;
911 
912 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
914 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Container&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;container_type;
915 
916 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;defined&#32;__cpp_lib_concepts</emphasis>
917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
918 <emphasis role="preprocessor">#endif</emphasis>
919 
924 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
925 &#32;&#32;&#32;&#32;&#32;&#32;insert_iterator(_Container&amp;&#32;__x,&#32;_Iter&#32;__i)
926 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;container(<link linkend="_namespacestd">std</link>::__addressof(__x)),&#32;iter(__i)&#32;{}
927 
951 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
952 &#32;&#32;&#32;&#32;&#32;&#32;insert_iterator&amp;
953 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">typename</emphasis>&#32;_Container::const_reference&#32;__value)
954 &#32;&#32;&#32;&#32;&#32;&#32;{
955 &#32;&#32;&#32;&#32;iter&#32;=&#32;container-&gt;insert(iter,&#32;__value);
956 &#32;&#32;&#32;&#32;++iter;
957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
958 &#32;&#32;&#32;&#32;&#32;&#32;}
959 <emphasis role="preprocessor">#else</emphasis>
960 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
961 &#32;&#32;&#32;&#32;&#32;&#32;insert_iterator&amp;
962 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&amp;&#32;__value)
963 &#32;&#32;&#32;&#32;&#32;&#32;{
964 &#32;&#32;&#32;&#32;iter&#32;=&#32;container-&gt;insert(iter,&#32;__value);
965 &#32;&#32;&#32;&#32;++iter;
966 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
967 &#32;&#32;&#32;&#32;&#32;&#32;}
968 
969 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
970 &#32;&#32;&#32;&#32;&#32;&#32;insert_iterator&amp;
971 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">typename</emphasis>&#32;_Container::value_type&amp;&amp;&#32;__value)
972 &#32;&#32;&#32;&#32;&#32;&#32;{
973 &#32;&#32;&#32;&#32;iter&#32;=&#32;container-&gt;insert(iter,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__value));
974 &#32;&#32;&#32;&#32;++iter;
975 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
976 &#32;&#32;&#32;&#32;&#32;&#32;}
977 <emphasis role="preprocessor">#endif</emphasis>
978 
980 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
981 &#32;&#32;&#32;&#32;&#32;&#32;insert_iterator&amp;
982 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()
983 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
984 
986 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
987 &#32;&#32;&#32;&#32;&#32;&#32;insert_iterator&amp;
988 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
989 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
990 
992 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
993 &#32;&#32;&#32;&#32;&#32;&#32;insert_iterator&amp;
994 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
995 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
996 &#32;&#32;&#32;&#32;};
997 
998 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
999 
1012 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;defined&#32;__cpp_lib_concepts</emphasis>
1013 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1014 &#32;&#32;&#32;&#32;[[nodiscard]]
1015 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;insert_iterator&lt;_Container&gt;
1016 &#32;&#32;&#32;&#32;<link linkend="_structinserter">inserter</link>(_Container&amp;&#32;__x,&#32;std::__detail::__range_iter_t&lt;_Container&gt;&#32;__i)
1017 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_iterator&lt;_Container&gt;(__x,&#32;__i);&#32;}
1018 <emphasis role="preprocessor">#else</emphasis>
1019 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1020 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1021 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;insert_iterator&lt;_Container&gt;
1022 &#32;&#32;&#32;&#32;<link linkend="_structinserter">inserter</link>(_Container&amp;&#32;__x,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container::iterator&#32;__i)
1023 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_iterator&lt;_Container&gt;(__x,&#32;__i);&#32;}
1024 <emphasis role="preprocessor">#endif</emphasis>
1025 
1027 
1028 _GLIBCXX_END_NAMESPACE_VERSION
1029 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1030 
1031 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
1032 {
1033 _GLIBCXX_BEGIN_NAMESPACE_VERSION
1034 
1035 &#32;&#32;<emphasis role="comment">//&#32;This&#32;iterator&#32;adapter&#32;is&#32;@a&#32;normal&#32;in&#32;the&#32;sense&#32;that&#32;it&#32;does&#32;not</emphasis>
1036 &#32;&#32;<emphasis role="comment">//&#32;change&#32;the&#32;semantics&#32;of&#32;any&#32;of&#32;the&#32;operators&#32;of&#32;its&#32;iterator</emphasis>
1037 &#32;&#32;<emphasis role="comment">//&#32;parameter.&#32;&#32;Its&#32;primary&#32;purpose&#32;is&#32;to&#32;convert&#32;an&#32;iterator&#32;that&#32;is</emphasis>
1038 &#32;&#32;<emphasis role="comment">//&#32;not&#32;a&#32;class,&#32;e.g.&#32;a&#32;pointer,&#32;into&#32;an&#32;iterator&#32;that&#32;is&#32;a&#32;class.</emphasis>
1039 &#32;&#32;<emphasis role="comment">//&#32;The&#32;_Container&#32;parameter&#32;exists&#32;solely&#32;so&#32;that&#32;different&#32;containers</emphasis>
1040 &#32;&#32;<emphasis role="comment">//&#32;using&#32;this&#32;template&#32;can&#32;instantiate&#32;different&#32;types,&#32;even&#32;if&#32;the</emphasis>
1041 &#32;&#32;<emphasis role="comment">//&#32;_Iterator&#32;parameter&#32;is&#32;the&#32;same.</emphasis>
1042 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1043 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__normal_iterator
1044 &#32;&#32;&#32;&#32;{
1045 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1046 &#32;&#32;&#32;&#32;&#32;&#32;_Iterator&#32;_M_current;
1047 
1048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__traits_type;
1049 
1050 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
1052 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__convertible_from
1053 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__enable_if_t&lt;std::is_convertible&lt;_Iter,&#32;_Iterator&gt;::value&gt;;
1054 <emphasis role="preprocessor">#endif</emphasis>
1055 
1056 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator_type;
1058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::iterator_category&#32;iterator_category;
1059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::value_type&#32;&#32;&#32;&#32;value_type;
1060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::difference_type&#32;&#32;&#32;difference_type;
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::reference&#32;&#32;&#32;&#32;&#32;reference;
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
1063 
1064 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_concept&#32;=&#32;std::__detail::__iter_concept&lt;_Iterator&gt;;
1066 <emphasis role="preprocessor">#endif</emphasis>
1067 
1068 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR&#32;__normal_iterator()&#32;_GLIBCXX_NOEXCEPT
1069 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_current(_Iterator())&#32;{&#32;}
1070 
1071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX20_CONSTEXPR
1072 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator(<emphasis role="keyword">const</emphasis>&#32;_Iterator&amp;&#32;__i)&#32;_GLIBCXX_NOEXCEPT
1073 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_current(__i)&#32;{&#32;}
1074 
1075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;iterator&#32;to&#32;const_iterator&#32;conversion</emphasis>
1076 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__convertible_from&lt;_Iter&gt;&gt;
1078 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1079 &#32;&#32;&#32;&#32;__normal_iterator(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iter,&#32;_Container&gt;&amp;&#32;__i)
1080 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
1081 <emphasis role="preprocessor">#else</emphasis>
1082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;N.B.&#32;_Container::pointer&#32;is&#32;not&#32;actually&#32;in&#32;container&#32;requirements,</emphasis>
1083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;is&#32;present&#32;in&#32;std::vector&#32;and&#32;std::basic_string.</emphasis>
1084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iter,
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__enable_if&lt;
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::__are_same&lt;_Iter,&#32;typename&#32;_Container::pointer&gt;::__value),
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Container&gt;::__type&gt;&amp;&#32;__i)
1089 <emphasis role="preprocessor">#endif</emphasis>
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_current(__i.base())&#32;{&#32;}
1091 
1092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Forward&#32;iterator&#32;requirements</emphasis>
1093 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1094 &#32;&#32;&#32;&#32;&#32;&#32;reference
1095 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1096 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_current;&#32;}
1097 
1098 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1099 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
1100 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1101 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current;&#32;}
1102 
1103 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1104 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator&amp;
1105 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;_GLIBCXX_NOEXCEPT
1106 &#32;&#32;&#32;&#32;&#32;&#32;{
1107 &#32;&#32;&#32;&#32;++_M_current;
1108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1109 &#32;&#32;&#32;&#32;&#32;&#32;}
1110 
1111 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1112 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator
1113 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
1114 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__normal_iterator(_M_current++);&#32;}
1115 
1116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bidirectional&#32;iterator&#32;requirements</emphasis>
1117 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1118 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator&amp;
1119 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;_GLIBCXX_NOEXCEPT
1120 &#32;&#32;&#32;&#32;&#32;&#32;{
1121 &#32;&#32;&#32;&#32;--_M_current;
1122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1123 &#32;&#32;&#32;&#32;&#32;&#32;}
1124 
1125 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1126 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator
1127 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
1128 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__normal_iterator(_M_current--);&#32;}
1129 
1130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Random&#32;access&#32;iterator&#32;requirements</emphasis>
1131 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1132 &#32;&#32;&#32;&#32;&#32;&#32;reference
1133 &#32;&#32;&#32;&#32;&#32;&#32;operator[](difference_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1134 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current[__n];&#32;}
1135 
1136 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1137 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator&amp;
1138 &#32;&#32;&#32;&#32;&#32;&#32;operator+=(difference_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
1139 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_current&#32;+=&#32;__n;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
1140 
1141 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1142 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator
1143 &#32;&#32;&#32;&#32;&#32;&#32;operator+(difference_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1144 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__normal_iterator(_M_current&#32;+&#32;__n);&#32;}
1145 
1146 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1147 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator&amp;
1148 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(difference_type&#32;__n)&#32;_GLIBCXX_NOEXCEPT
1149 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_current&#32;-=&#32;__n;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
1150 
1151 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1152 &#32;&#32;&#32;&#32;&#32;&#32;__normal_iterator
1153 &#32;&#32;&#32;&#32;&#32;&#32;operator-(difference_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1154 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__normal_iterator(_M_current&#32;-&#32;__n);&#32;}
1155 
1156 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Iterator&amp;
1158 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1159 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current;&#32;}
1160 &#32;&#32;&#32;&#32;};
1161 
1162 &#32;&#32;<emphasis role="comment">//&#32;Note:&#32;In&#32;what&#32;follows,&#32;the&#32;left-&#32;and&#32;right-hand-side&#32;iterators&#32;are</emphasis>
1163 &#32;&#32;<emphasis role="comment">//&#32;allowed&#32;to&#32;vary&#32;in&#32;types&#32;(conceptually&#32;in&#32;cv-qualification)&#32;so&#32;that</emphasis>
1164 &#32;&#32;<emphasis role="comment">//&#32;comparison&#32;between&#32;cv-qualified&#32;and&#32;non-cv-qualified&#32;iterators&#32;be</emphasis>
1165 &#32;&#32;<emphasis role="comment">//&#32;valid.&#32;&#32;However,&#32;the&#32;greedy&#32;and&#32;unfriendly&#32;operators&#32;in&#32;std::rel_ops</emphasis>
1166 &#32;&#32;<emphasis role="comment">//&#32;will&#32;make&#32;overload&#32;resolution&#32;ambiguous&#32;(when&#32;in&#32;scope)&#32;if&#32;we&#32;don&apos;t</emphasis>
1167 &#32;&#32;<emphasis role="comment">//&#32;provide&#32;overloads&#32;whose&#32;operands&#32;are&#32;of&#32;the&#32;same&#32;type.&#32;&#32;Can&#32;someone</emphasis>
1168 &#32;&#32;<emphasis role="comment">//&#32;remind&#32;me&#32;what&#32;generic&#32;programming&#32;is&#32;about?&#32;--&#32;Gaby</emphasis>
1169 
1170 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1171 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1172 &#32;&#32;&#32;&#32;[[nodiscard]]
1173 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1174 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1176 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__lhs.base()&#32;==&#32;__rhs.base()))
1177 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{
1178 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__lhs.base()&#32;==&#32;__rhs.base()&#32;}&#32;-&gt;&#32;std::convertible_to&lt;bool&gt;;
1179 &#32;&#32;&#32;&#32;}
1180 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;==&#32;__rhs.base();&#32;}
1181 
1182 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1183 &#32;&#32;&#32;&#32;[[nodiscard]]
1184 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::__detail::__synth3way_t&lt;_IteratorR,&#32;_IteratorL&gt;
1185 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1187 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::__detail::__synth3way(__lhs.base(),&#32;__rhs.base())))
1188 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__detail::__synth3way(__lhs.base(),&#32;__rhs.base());&#32;}
1189 
1190 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1191 &#32;&#32;&#32;&#32;[[nodiscard]]
1192 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1193 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1195 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__lhs.base()&#32;==&#32;__rhs.base()))
1196 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{
1197 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__lhs.base()&#32;==&#32;__rhs.base()&#32;}&#32;-&gt;&#32;std::convertible_to&lt;bool&gt;;
1198 &#32;&#32;&#32;&#32;}
1199 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;==&#32;__rhs.base();&#32;}
1200 
1201 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1202 &#32;&#32;&#32;&#32;[[nodiscard]]
1203 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::__detail::__synth3way_t&lt;_Iterator&gt;
1204 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1206 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::__detail::__synth3way(__lhs.base(),&#32;__rhs.base())))
1207 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__detail::__synth3way(__lhs.base(),&#32;__rhs.base());&#32;}
1208 <emphasis role="preprocessor">#else</emphasis>
1209 &#32;&#32;&#32;<emphasis role="comment">//&#32;Forward&#32;iterator&#32;requirements</emphasis>
1210 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1211 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1212 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1213 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1215 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1216 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;==&#32;__rhs.base();&#32;}
1217 
1218 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1219 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1220 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1221 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1223 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1224 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;==&#32;__rhs.base();&#32;}
1225 
1226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1227 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1228 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1229 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1231 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1232 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;!=&#32;__rhs.base();&#32;}
1233 
1234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1235 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1236 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1237 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1239 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1240 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;!=&#32;__rhs.base();&#32;}
1241 
1242 &#32;&#32;<emphasis role="comment">//&#32;Random&#32;access&#32;iterator&#32;requirements</emphasis>
1243 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1244 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1245 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1246 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1248 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1249 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&lt;&#32;__rhs.base();&#32;}
1250 
1251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1252 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1253 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1254 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1256 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1257 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&lt;&#32;__rhs.base();&#32;}
1258 
1259 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1260 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1261 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1262 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1264 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1265 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&gt;&#32;__rhs.base();&#32;}
1266 
1267 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1268 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1269 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1270 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1272 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1273 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&gt;&#32;__rhs.base();&#32;}
1274 
1275 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1276 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1277 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1278 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1280 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1281 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&lt;=&#32;__rhs.base();&#32;}
1282 
1283 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1284 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1285 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1286 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1288 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1289 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&lt;=&#32;__rhs.base();&#32;}
1290 
1291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1292 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1293 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1294 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1296 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1297 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&gt;=&#32;__rhs.base();&#32;}
1298 
1299 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1300 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1301 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1302 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1304 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1305 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;&gt;=&#32;__rhs.base();&#32;}
1306 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1307 
1308 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1309 &#32;&#32;<emphasis role="comment">//&#32;According&#32;to&#32;the&#32;resolution&#32;of&#32;DR179&#32;not&#32;only&#32;the&#32;various&#32;comparison</emphasis>
1310 &#32;&#32;<emphasis role="comment">//&#32;operators&#32;but&#32;also&#32;operator-&#32;must&#32;accept&#32;mixed&#32;iterator/const_iterator</emphasis>
1311 &#32;&#32;<emphasis role="comment">//&#32;parameters.</emphasis>
1312 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1313 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1314 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;685.</emphasis>
1315 &#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
1316 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1317 &#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
1319 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__lhs.base()&#32;-&#32;__rhs.base())
1320 #<emphasis role="keywordflow">else</emphasis>
1321 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;::difference_type
1322 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>-(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorL,&#32;_Container&gt;&amp;&#32;__lhs,
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_IteratorR,&#32;_Container&gt;&amp;&#32;__rhs)
1324 <emphasis role="preprocessor">#endif</emphasis>
1325 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;-&#32;__rhs.base();&#32;}
1326 
1327 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1328 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1329 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;::difference_type
1330 &#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__lhs,
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__rhs)
1332 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1333 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;-&#32;__rhs.base();&#32;}
1334 
1335 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1336 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1337 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;
1338 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">typename</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;::difference_type
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;&amp;&#32;__i)
1340 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
1341 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__normal_iterator&lt;_Iterator,&#32;_Container&gt;(__i.base()&#32;+&#32;__n);&#32;}
1342 
1343 _GLIBCXX_END_NAMESPACE_VERSION
1344 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1345 
1346 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
1347 {
1348 _GLIBCXX_BEGIN_NAMESPACE_VERSION
1349 
1350 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1351 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1352 &#32;&#32;&#32;&#32;_Iterator
1353 &#32;&#32;&#32;&#32;__niter_base(__gnu_cxx::__normal_iterator&lt;_Iterator,&#32;_Container&gt;&#32;__it)
1354 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible&lt;_Iterator&gt;::value)
1355 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it.base();&#32;}
1356 
1357 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1358 
1359 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
1360 &#32;&#32;<emphasis role="comment">//&#32;Need&#32;to&#32;overload&#32;__to_address&#32;because&#32;the&#32;pointer_traits&#32;primary&#32;template</emphasis>
1361 &#32;&#32;<emphasis role="comment">//&#32;will&#32;deduce&#32;element_type&#32;of&#32;__normal_iterator&lt;T*,&#32;C&gt;&#32;as&#32;T*&#32;rather&#32;than&#32;T.</emphasis>
1362 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
1363 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1364 &#32;&#32;&#32;&#32;__to_address(<emphasis role="keyword">const</emphasis>&#32;__gnu_cxx::__normal_iterator&lt;_Iterator,
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Container&gt;&amp;&#32;__it)&#32;<emphasis role="keyword">noexcept</emphasis>
1366 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::__to_address(__it.base()))
1367 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(__it.base());&#32;}
1368 <emphasis role="preprocessor">#endif</emphasis>
1369 
1375 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1376 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;semiregular&#32;_Sent&gt;
1377 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>move_sentinel
1378 &#32;&#32;&#32;&#32;{
1379 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1381 &#32;&#32;&#32;&#32;&#32;&#32;move_sentinel()
1382 &#32;&#32;&#32;&#32;&#32;&#32;noexcept(is_nothrow_default_constructible_v&lt;_Sent&gt;)
1383 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_last()&#32;{&#32;}
1384 
1385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>
1386 &#32;&#32;&#32;&#32;&#32;&#32;move_sentinel(_Sent&#32;__s)
1387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_move_constructible_v&lt;_Sent&gt;)
1388 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_last(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__s))&#32;{&#32;}
1389 
1390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_S2&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_S2&amp;,&#32;_Sent&gt;
1391 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1392 &#32;&#32;&#32;&#32;move_sentinel(<emphasis role="keyword">const</emphasis>&#32;move_sentinel&lt;_S2&gt;&amp;&#32;__s)
1393 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_constructible_v&lt;_Sent,&#32;const&#32;_S2&amp;&gt;)
1394 &#32;&#32;&#32;&#32;:&#32;_M_last(__s.base())
1395 &#32;&#32;&#32;&#32;{&#32;}
1396 
1397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_S2&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;assignable_from&lt;_Sent&amp;,&#32;const&#32;_S2&amp;&gt;
1398 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;move_sentinel&amp;
1399 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;move_sentinel&lt;_S2&gt;&amp;&#32;__s)
1400 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_assignable_v&lt;_Sent,&#32;const&#32;_S2&amp;&gt;)
1401 &#32;&#32;&#32;&#32;{
1402 &#32;&#32;&#32;&#32;&#32;&#32;_M_last&#32;=&#32;__s.base();
1403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1404 &#32;&#32;&#32;&#32;}
1405 
1406 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
1407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Sent
1408 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;const
1409 &#32;&#32;&#32;&#32;&#32;&#32;noexcept(is_nothrow_copy_constructible_v&lt;_Sent&gt;)
1410 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_last;&#32;}
1411 
1412 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1413 &#32;&#32;&#32;&#32;&#32;&#32;_Sent&#32;_M_last;
1414 &#32;&#32;&#32;&#32;};
1415 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
1416 
1417 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
1418 &#32;&#32;{
1419 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1420 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_iter_cat
1422 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
1423 
1424 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Iterator&gt;::iterator_category;&#32;}
1426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_iter_cat&lt;_Iterator&gt;
1427 &#32;&#32;&#32;&#32;&#32;&#32;{
1428 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category
1429 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__clamp_iter_cat&lt;typename&#32;iterator_traits&lt;_Iterator&gt;::iterator_category,
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag&gt;;
1431 &#32;&#32;&#32;&#32;&#32;&#32;};
1432 <emphasis role="preprocessor">#endif</emphasis>
1433 &#32;&#32;}
1434 
1435 &#32;&#32;<emphasis role="comment">//&#32;24.4.3&#32;&#32;Move&#32;iterators</emphasis>
1444 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1445 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>move_iterator
1446 #<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;__cplusplus&#32;&gt;&#32;201703<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>&#32;&amp;&amp;&#32;__cpp_lib_concepts
1447 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__detail::__move_iter_cat&lt;_Iterator&gt;
1448 <emphasis role="preprocessor">#endif</emphasis>
1449 &#32;&#32;&#32;&#32;{
1450 &#32;&#32;&#32;&#32;&#32;&#32;_Iterator&#32;_M_current;
1451 
1452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__traits_type&#32;=&#32;iterator_traits&lt;_Iterator&gt;;
1453 <emphasis role="preprocessor">#if&#32;!&#32;(__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts)</emphasis>
1454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__base_ref&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::reference;
1455 <emphasis role="preprocessor">#endif</emphasis>
1456 
1457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
1458 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>move_iterator;
1459 
1460 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
1461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3435.&#32;three_way_comparable_with&lt;reverse_iterator&lt;int*&gt;,&#32;[...]&gt;</emphasis>
1463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
1464 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__convertible&#32;=&#32;!is_same_v&lt;_Iter2,&#32;_Iterator&gt;
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Iter2&amp;,&#32;_Iterator&gt;;
1466 <emphasis role="preprocessor">#endif</emphasis>
1467 
1468 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_type&#32;=&#32;_Iterator;
1470 
1471 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_concept&#32;=&#32;input_iterator_tag;
1473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterator_category&#32;defined&#32;in&#32;__move_iter_cat</emphasis>
1474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;iter_value_t&lt;_Iterator&gt;;
1475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;iter_difference_t&lt;_Iterator&gt;;
1476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;_Iterator;
1477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;iter_rvalue_reference_t&lt;_Iterator&gt;;
1478 <emphasis role="preprocessor">#else</emphasis>
1479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::iterator_category&#32;iterator_category;
1480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::value_type&#32;&#32;&#32;&#32;value_type;
1481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits_type::difference_type&#32;&#32;&#32;difference_type;
1482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;DR&#32;680.</emphasis>
1483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
1484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2106.&#32;move_iterator&#32;wrapping&#32;iterators&#32;returning&#32;prvalues</emphasis>
1486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference
1487 &#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;is_reference&lt;__base_ref&gt;::value,
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_reference&lt;__base_ref&gt;::type&amp;&amp;,
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__base_ref&gt;;
1490 <emphasis role="preprocessor">#endif</emphasis>
1491 
1492 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
1493 &#32;&#32;&#32;&#32;&#32;&#32;move_iterator()
1494 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_current()&#32;{&#32;}
1495 
1496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX17_CONSTEXPR
1497 &#32;&#32;&#32;&#32;&#32;&#32;move_iterator(iterator_type&#32;__i)
1498 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_current(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__i))&#32;{&#32;}
1499 
1500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
1501 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
1502 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__convertible&lt;_Iter&gt;
1503 <emphasis role="preprocessor">#endif</emphasis>
1504 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
1505 &#32;&#32;&#32;&#32;move_iterator(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iter&gt;&amp;&#32;__i)
1506 &#32;&#32;&#32;&#32;:&#32;_M_current(__i._M_current)&#32;{&#32;}
1507 
1508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
1509 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
1510 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__convertible&lt;_Iter&gt;
1511 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;assignable_from&lt;_Iterator&amp;,&#32;const&#32;_Iter&amp;&gt;
1512 <emphasis role="preprocessor">#endif</emphasis>
1513 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
1514 &#32;&#32;&#32;&#32;move_iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iter&gt;&amp;&#32;__i)
1515 &#32;&#32;&#32;&#32;{
1516 &#32;&#32;&#32;&#32;&#32;&#32;_M_current&#32;=&#32;__i._M_current;
1517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1518 &#32;&#32;&#32;&#32;}
1519 
1520 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
1521 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1522 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;iterator_type
1523 &#32;&#32;&#32;&#32;&#32;&#32;base()<emphasis role="keyword">&#32;const</emphasis>
1524 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current;&#32;}
1525 <emphasis role="preprocessor">#else</emphasis>
1526 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
1527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;iterator_type&amp;
1528 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;const&#32;&amp;&#32;noexcept
1529 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current;&#32;}
1530 
1531 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
1532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iterator_type
1533 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;&amp;&amp;
1534 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_current);&#32;}
1535 <emphasis role="preprocessor">#endif</emphasis>
1536 
1537 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1538 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reference
1539 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const
1540 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1541 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_move(_M_current);&#32;}
1542 <emphasis role="preprocessor">#else</emphasis>
1543 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>reference<emphasis role="keyword">&gt;</emphasis>(*_M_current);&#32;}
1544 <emphasis role="preprocessor">#endif</emphasis>
1545 
1546 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1547 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
1548 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
1549 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current;&#32;}
1550 
1551 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator&amp;
1552 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
1553 &#32;&#32;&#32;&#32;&#32;&#32;{
1554 &#32;&#32;&#32;&#32;++_M_current;
1555 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1556 &#32;&#32;&#32;&#32;&#32;&#32;}
1557 
1558 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator
1559 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
1560 &#32;&#32;&#32;&#32;&#32;&#32;{
1561 &#32;&#32;&#32;&#32;move_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1562 &#32;&#32;&#32;&#32;++_M_current;
1563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1564 &#32;&#32;&#32;&#32;&#32;&#32;}
1565 
1566 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
1567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1568 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">requires</emphasis>&#32;(!forward_iterator&lt;_Iterator&gt;)
1569 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;++_M_current;&#32;}
1570 <emphasis role="preprocessor">#endif</emphasis>
1571 
1572 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator&amp;
1573 &#32;&#32;&#32;&#32;&#32;&#32;operator--()
1574 &#32;&#32;&#32;&#32;&#32;&#32;{
1575 &#32;&#32;&#32;&#32;--_M_current;
1576 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1577 &#32;&#32;&#32;&#32;&#32;&#32;}
1578 
1579 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator
1580 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)
1581 &#32;&#32;&#32;&#32;&#32;&#32;{
1582 &#32;&#32;&#32;&#32;move_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
1583 &#32;&#32;&#32;&#32;--_M_current;
1584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1585 &#32;&#32;&#32;&#32;&#32;&#32;}
1586 
1587 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1588 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator
1589 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(difference_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1590 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;move_iterator(_M_current&#32;+&#32;__n);&#32;}
1591 
1592 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator&amp;
1593 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(difference_type&#32;__n)
1594 &#32;&#32;&#32;&#32;&#32;&#32;{
1595 &#32;&#32;&#32;&#32;_M_current&#32;+=&#32;__n;
1596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1597 &#32;&#32;&#32;&#32;&#32;&#32;}
1598 
1599 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1600 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator
1601 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(difference_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1602 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;move_iterator(_M_current&#32;-&#32;__n);&#32;}
1603 &#32;&#32;&#32;&#32;
1604 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator&amp;
1605 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(difference_type&#32;__n)
1606 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
1607 &#32;&#32;&#32;&#32;_M_current&#32;-=&#32;__n;
1608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1609 &#32;&#32;&#32;&#32;&#32;&#32;}
1610 
1611 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1612 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;reference
1613 &#32;&#32;&#32;&#32;&#32;&#32;operator[](difference_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
1614 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1615 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_move(_M_current&#32;+&#32;__n);&#32;}
1616 <emphasis role="preprocessor">#else</emphasis>
1617 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_current[__n]);&#32;}
1618 <emphasis role="preprocessor">#endif</emphasis>
1619 
1620 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;sentinel_for&lt;_Iterator&gt;&#32;_Sent&gt;
1622 &#32;&#32;&#32;&#32;[[nodiscard]]
1623 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1624 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;move_sentinel&lt;_Sent&gt;&amp;&#32;__y)
1625 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;==&#32;__y.base();&#32;}
1626 
1627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;sized_sentinel_for&lt;_Iterator&gt;&#32;_Sent&gt;
1628 &#32;&#32;&#32;&#32;[[nodiscard]]
1629 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_Iterator&gt;
1630 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;move_sentinel&lt;_Sent&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&amp;&#32;__y)
1631 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;-&#32;__y.base();&#32;}
1632 
1633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;sized_sentinel_for&lt;_Iterator&gt;&#32;_Sent&gt;
1634 &#32;&#32;&#32;&#32;[[nodiscard]]
1635 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_Iterator&gt;
1636 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;move_sentinel&lt;_Sent&gt;&amp;&#32;__y)
1637 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;-&#32;__y.base();&#32;}
1638 
1639 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
1640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_rvalue_reference_t&lt;_Iterator&gt;
1641 &#32;&#32;&#32;&#32;&#32;&#32;iter_move(<emphasis role="keyword">const</emphasis>&#32;move_iterator&amp;&#32;__i)
1642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(ranges::iter_move(__i._M_current)))
1643 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_move(__i._M_current);&#32;}
1644 
1645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;indirectly_swappable&lt;_Iterator&gt;&#32;_Iter2&gt;
1646 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1647 &#32;&#32;&#32;&#32;iter_swap(<emphasis role="keyword">const</emphasis>&#32;move_iterator&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iter2&gt;&amp;&#32;__y)
1648 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(ranges::iter_swap(__x._M_current,&#32;__y._M_current)))
1649 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_swap(__x._M_current,&#32;__y._M_current);&#32;}
1650 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
1651 &#32;&#32;&#32;&#32;};
1652 
1653 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
1654 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1655 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1656 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1658 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1659 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;==&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
1660 <emphasis role="preprocessor">#endif</emphasis>
1661 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;==&#32;__y.base();&#32;}
1662 
1663 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1664 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,
1665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;three_way_comparable_with&lt;_IteratorL&gt;&#32;_IteratorR&gt;
1666 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1667 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;compare_three_way_result_t&lt;_IteratorL,&#32;_IteratorR&gt;
1668 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1670 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;=&gt;&#32;__y.base();&#32;}
1671 <emphasis role="preprocessor">#else</emphasis>
1672 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
1673 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1674 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1675 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1677 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1678 <emphasis role="preprocessor">#endif</emphasis>
1679 
1680 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
1681 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1682 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1683 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1685 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1686 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;&lt;&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
1687 <emphasis role="preprocessor">#endif</emphasis>
1688 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;&#32;__y.base();&#32;}
1689 
1690 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
1691 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1692 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1693 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1695 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1696 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__y.base()&#32;&lt;&#32;__x.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
1697 <emphasis role="preprocessor">#endif</emphasis>
1698 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
1699 
1700 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
1701 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1702 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1703 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1705 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1706 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__y.base()&#32;&lt;&#32;__x.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
1707 <emphasis role="preprocessor">#endif</emphasis>
1708 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
1709 
1710 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
1711 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1712 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1713 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1715 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1716 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;{&#32;__x.base()&#32;&lt;&#32;__y.base()&#32;}&#32;-&gt;&#32;convertible_to&lt;bool&gt;;&#32;}
1717 <emphasis role="preprocessor">#endif</emphasis>
1718 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
1719 
1720 &#32;&#32;<emphasis role="comment">//&#32;Note:&#32;See&#32;__normal_iterator&#32;operators&#32;note&#32;from&#32;Gaby&#32;to&#32;understand</emphasis>
1721 &#32;&#32;<emphasis role="comment">//&#32;why&#32;we&#32;have&#32;these&#32;extra&#32;overloads&#32;for&#32;some&#32;move_iterator&#32;operators.</emphasis>
1722 
1723 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1724 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1725 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1726 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x,
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__y)
1728 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;==&#32;__y.base();&#32;}
1729 
1730 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1731 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;three_way_comparable&#32;_Iterator&gt;
1732 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1733 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;compare_three_way_result_t&lt;_Iterator&gt;
1734 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x,
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__y)
1736 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;=&gt;&#32;__y.base();&#32;}
1737 <emphasis role="preprocessor">#else</emphasis>
1738 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1739 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1740 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1741 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x,
1742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__y)
1743 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
1744 
1745 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1746 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1747 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1748 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x,
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__y)
1750 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;&lt;&#32;__y.base();&#32;}
1751 
1752 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1753 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1754 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1755 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x,
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__y)
1757 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
1758 
1759 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1760 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1761 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1762 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x,
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__y)
1764 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
1765 
1766 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1767 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1768 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1769 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x,
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__y)
1771 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
1772 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;C++20</emphasis>
1773 
1774 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;685.</emphasis>
1775 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IteratorL,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorR&gt;
1776 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1777 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>
1778 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorL&gt;&amp;&#32;__x,
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_IteratorR&gt;&amp;&#32;__y)
1780 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__x.base()&#32;-&#32;__y.base())
1781 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.base()&#32;-&#32;__y.base();&#32;}
1782 
1783 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1784 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1785 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator&lt;_Iterator&gt;
1786 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">typename</emphasis>&#32;move_iterator&lt;_Iterator&gt;::difference_type&#32;__n,
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;move_iterator&lt;_Iterator&gt;&amp;&#32;__x)
1788 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__n;&#32;}
1789 
1790 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
1791 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1792 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;move_iterator&lt;_Iterator&gt;
1793 &#32;&#32;&#32;&#32;make_move_iterator(_Iterator&#32;__i)
1794 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;move_iterator&lt;_Iterator&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__i));&#32;}
1795 
1796 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ReturnType
1797 &#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;__move_if_noexcept_cond
1798 &#32;&#32;&#32;&#32;&#32;&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Iterator&gt;::value_type&gt;<link linkend="_classvalue">::value</link>,
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iterator,&#32;move_iterator&lt;_Iterator&gt;&gt;&gt;
1800 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;_ReturnType
1801 &#32;&#32;&#32;&#32;__make_move_if_noexcept_iterator(_Iterator&#32;__i)
1802 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_ReturnType(__i);&#32;}
1803 
1804 &#32;&#32;<emphasis role="comment">//&#32;Overload&#32;for&#32;pointers&#32;that&#32;matches&#32;std::move_if_noexcept&#32;more&#32;closely,</emphasis>
1805 &#32;&#32;<emphasis role="comment">//&#32;returning&#32;a&#32;constant&#32;iterator&#32;when&#32;we&#32;don&apos;t&#32;want&#32;to&#32;move.</emphasis>
1806 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ReturnType
1807 &#32;&#32;&#32;&#32;=&#32;__conditional_t&lt;__move_if_noexcept_cond&lt;_Tp&gt;::value,
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*,&#32;move_iterator&lt;_Tp*&gt;&gt;&gt;
1809 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;_ReturnType
1810 &#32;&#32;&#32;&#32;__make_move_if_noexcept_iterator(_Tp*&#32;__i)
1811 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_ReturnType(__i);&#32;}
1812 
1813 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1814 &#32;&#32;<emphasis role="comment">//&#32;[iterators.common]&#32;Common&#32;iterators</emphasis>
1815 
1816 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
1817 &#32;&#32;{
1818 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
1819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__common_iter_has_arrow&#32;=&#32;indirectly_readable&lt;const&#32;_It&gt;
1820 &#32;&#32;&#32;&#32;&amp;&amp;&#32;(<emphasis role="keyword">requires</emphasis>(<emphasis role="keyword">const</emphasis>&#32;_It&amp;&#32;__it)&#32;{&#32;__it.operator-&gt;();&#32;}
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_reference_v&lt;iter_reference_t&lt;_It&gt;&gt;
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;constructible_from&lt;iter_value_t&lt;_It&gt;,&#32;iter_reference_t&lt;_It&gt;&gt;);
1823 
1824 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
1825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__common_iter_use_postfix_proxy
1826 &#32;&#32;&#32;&#32;=&#32;(!<emphasis role="keyword">requires</emphasis>&#32;(_It&amp;&#32;__i)&#32;{&#32;{&#32;*__i++&#32;}&#32;-&gt;&#32;__can_reference;&#32;})
1827 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;constructible_from&lt;iter_value_t&lt;_It&gt;,&#32;iter_reference_t&lt;_It&gt;&gt;
1828 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;move_constructible&lt;iter_value_t&lt;_It&gt;&gt;;
1829 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
1830 
1832 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_It,&#32;sentinel_for&lt;_It&gt;&#32;_Sent&gt;
1833 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!same_as&lt;_It,&#32;_Sent&gt;)&#32;&amp;&amp;&#32;copyable&lt;_It&gt;
1834 &#32;&#32;<emphasis role="keyword">class</emphasis>&#32;common_iterator
1835 &#32;&#32;{
1836 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1838 &#32;&#32;&#32;&#32;&#32;&#32;_S_noexcept1()
1839 &#32;&#32;&#32;&#32;&#32;&#32;{
1840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_trivially_default_constructible_v&lt;_Tp&gt;)
1841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_nothrow_assignable_v&lt;_Tp&amp;,&#32;_Up&gt;;
1842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1843 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_nothrow_constructible_v&lt;_Tp,&#32;_Up&gt;;
1844 &#32;&#32;&#32;&#32;&#32;&#32;}
1845 
1846 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent2&gt;
1847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1848 &#32;&#32;&#32;&#32;&#32;&#32;_S_noexcept()
1849 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_noexcept1&lt;_It,&#32;_It2&gt;()&#32;&amp;&amp;&#32;_S_noexcept1&lt;_Sent,&#32;_Sent2&gt;();&#32;}
1850 
1851 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__arrow_proxy
1852 &#32;&#32;&#32;&#32;{
1853 &#32;&#32;&#32;&#32;&#32;&#32;iter_value_t&lt;_It&gt;&#32;_M_keep;
1854 
1855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1856 &#32;&#32;&#32;&#32;&#32;&#32;__arrow_proxy(iter_reference_t&lt;_It&gt;&amp;&amp;&#32;__x)
1857 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_keep(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__x))&#32;{&#32;}
1858 
1859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>common_iterator;
1860 
1861 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;iter_value_t&lt;_It&gt;*
1863 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept
1864 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(_M_keep);&#32;}
1865 &#32;&#32;&#32;&#32;};
1866 
1867 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__postfix_proxy
1868 &#32;&#32;&#32;&#32;{
1869 &#32;&#32;&#32;&#32;&#32;&#32;iter_value_t&lt;_It&gt;&#32;_M_keep;
1870 
1871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1872 &#32;&#32;&#32;&#32;&#32;&#32;__postfix_proxy(iter_reference_t&lt;_It&gt;&amp;&amp;&#32;__x)
1873 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_keep(<link linkend="_namespacestd">std</link>::forward&lt;iter_reference_t&lt;_It&gt;&gt;(__x))&#32;{&#32;}
1874 
1875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>common_iterator;
1876 
1877 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;iter_value_t&lt;_It&gt;&amp;
1879 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept
1880 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_keep;&#32;}
1881 &#32;&#32;&#32;&#32;};
1882 
1883 &#32;&#32;<emphasis role="keyword">public</emphasis>:
1884 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1885 &#32;&#32;&#32;&#32;common_iterator()
1886 &#32;&#32;&#32;&#32;noexcept(is_nothrow_default_constructible_v&lt;_It&gt;)
1887 &#32;&#32;&#32;&#32;requires&#32;default_initializable&lt;_It&gt;
1888 &#32;&#32;&#32;&#32;:&#32;_M_it(),&#32;_M_index(0)
1889 &#32;&#32;&#32;&#32;{&#32;}
1890 
1891 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1892 &#32;&#32;&#32;&#32;common_iterator(_It&#32;__i)
1893 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_move_constructible_v&lt;_It&gt;)
1894 &#32;&#32;&#32;&#32;:&#32;_M_it(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__i)),&#32;_M_index(0)
1895 &#32;&#32;&#32;&#32;{&#32;}
1896 
1897 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1898 &#32;&#32;&#32;&#32;common_iterator(_Sent&#32;__s)
1899 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_move_constructible_v&lt;_Sent&gt;)
1900 &#32;&#32;&#32;&#32;:&#32;_M_sent(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__s)),&#32;_M_index(1)
1901 &#32;&#32;&#32;&#32;{&#32;}
1902 
1903 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent2&gt;
1904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_It2&amp;,&#32;_It&gt;
1905 &#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Sent2&amp;,&#32;_Sent&gt;
1906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1907 &#32;&#32;&#32;&#32;&#32;&#32;common_iterator(<emphasis role="keyword">const</emphasis>&#32;common_iterator&lt;_It2,&#32;_Sent2&gt;&amp;&#32;__x)
1908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_noexcept&lt;const&#32;_It2&amp;,&#32;const&#32;_Sent2&amp;&gt;())
1909 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_valueless(),&#32;_M_index(__x._M_index)
1910 &#32;&#32;&#32;&#32;&#32;&#32;{
1911 &#32;&#32;&#32;&#32;__glibcxx_assert(__x._M_has_value());
1912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;0)
1913 &#32;&#32;&#32;&#32;&#32;&#32;{
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_trivially_default_constructible_v&lt;_It&gt;)
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_it&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_it);
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_it),&#32;__x._M_it);
1918 &#32;&#32;&#32;&#32;&#32;&#32;}
1919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;1)
1920 &#32;&#32;&#32;&#32;&#32;&#32;{
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_trivially_default_constructible_v&lt;_Sent&gt;)
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_sent&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_sent);
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_sent),&#32;__x._M_sent);
1925 &#32;&#32;&#32;&#32;&#32;&#32;}
1926 &#32;&#32;&#32;&#32;&#32;&#32;}
1927 
1928 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1929 &#32;&#32;&#32;&#32;common_iterator(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;&#32;__x)
1930 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_noexcept&lt;const&#32;_It&amp;,&#32;const&#32;_Sent&amp;&gt;())
1931 &#32;&#32;&#32;&#32;:&#32;_M_valueless(),&#32;_M_index(__x._M_index)
1932 &#32;&#32;&#32;&#32;{
1933 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;0)
1934 &#32;&#32;&#32;&#32;{
1935 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_trivially_default_constructible_v&lt;_It&gt;)
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_it&#32;=&#32;__x._M_it;
1937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_it),&#32;__x._M_it);
1939 &#32;&#32;&#32;&#32;}
1940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;1)
1941 &#32;&#32;&#32;&#32;{
1942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_trivially_default_constructible_v&lt;_Sent&gt;)
1943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_sent&#32;=&#32;__x._M_sent;
1944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_sent),&#32;__x._M_sent);
1946 &#32;&#32;&#32;&#32;}
1947 &#32;&#32;&#32;&#32;}
1948 
1949 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
1950 &#32;&#32;&#32;&#32;common_iterator(common_iterator&amp;&amp;&#32;__x)
1951 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_noexcept&lt;_It,&#32;_Sent&gt;())
1952 &#32;&#32;&#32;&#32;:&#32;_M_valueless(),&#32;_M_index(__x._M_index)
1953 &#32;&#32;&#32;&#32;{
1954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;0)
1955 &#32;&#32;&#32;&#32;{
1956 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_trivially_default_constructible_v&lt;_It&gt;)
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_it&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_it);
1958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_it),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_it));
1960 &#32;&#32;&#32;&#32;}
1961 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;1)
1962 &#32;&#32;&#32;&#32;{
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_trivially_default_constructible_v&lt;_Sent&gt;)
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_sent&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_sent);
1965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_sent),
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_sent));
1968 &#32;&#32;&#32;&#32;}
1969 &#32;&#32;&#32;&#32;}
1970 
1971 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;common_iterator&amp;
1972 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1973 
1974 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;common_iterator&amp;
1975 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;&#32;__x)
1976 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_copy_assignable_v&lt;_It&gt;
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_copy_assignable_v&lt;_Sent&gt;
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_copy_constructible_v&lt;_It&gt;
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_copy_constructible_v&lt;_Sent&gt;)
1980 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!is_trivially_copy_assignable_v&lt;_It&gt;
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!is_trivially_copy_assignable_v&lt;_Sent&gt;)
1982 &#32;&#32;&#32;&#32;{
1983 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(__x);
1984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1985 &#32;&#32;&#32;&#32;}
1986 
1987 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;common_iterator&amp;
1988 &#32;&#32;&#32;&#32;operator=(common_iterator&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1989 
1990 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;common_iterator&amp;
1991 &#32;&#32;&#32;&#32;operator=(common_iterator&amp;&amp;&#32;__x)
1992 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_move_assignable_v&lt;_It&gt;
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_move_assignable_v&lt;_Sent&gt;
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_move_constructible_v&lt;_It&gt;
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_move_constructible_v&lt;_Sent&gt;)
1996 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!is_trivially_move_assignable_v&lt;_It&gt;
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!is_trivially_move_assignable_v&lt;_Sent&gt;)
1998 &#32;&#32;&#32;&#32;{
1999 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
2000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2001 &#32;&#32;&#32;&#32;}
2002 
2003 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent2&gt;
2004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_It2&amp;,&#32;_It&gt;
2005 &#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Sent2&amp;,&#32;_Sent&gt;
2006 &#32;&#32;&#32;&#32;&amp;&amp;&#32;assignable_from&lt;_It&amp;,&#32;const&#32;_It2&amp;&gt;
2007 &#32;&#32;&#32;&#32;&amp;&amp;&#32;assignable_from&lt;_Sent&amp;,&#32;const&#32;_Sent2&amp;&gt;
2008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;common_iterator&amp;
2009 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;common_iterator&lt;_It2,&#32;_Sent2&gt;&amp;&#32;__x)
2010 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_constructible_v&lt;_It,&#32;const&#32;_It2&amp;&gt;
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_constructible_v&lt;_Sent,&#32;const&#32;_Sent2&amp;&gt;
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_assignable_v&lt;_It&amp;,&#32;const&#32;_It2&amp;&gt;
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_assignable_v&lt;_Sent&amp;,&#32;const&#32;_Sent2&amp;&gt;)
2014 &#32;&#32;&#32;&#32;&#32;&#32;{
2015 &#32;&#32;&#32;&#32;__glibcxx_assert(__x._M_has_value());
2016 &#32;&#32;&#32;&#32;_M_assign(__x);
2017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2018 &#32;&#32;&#32;&#32;&#32;&#32;}
2019 
2020 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
2021 &#32;&#32;&#32;&#32;~common_iterator()
2022 &#32;&#32;&#32;&#32;{
2023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;0)
2024 &#32;&#32;&#32;&#32;_M_it.~_It();
2025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;1)
2026 &#32;&#32;&#32;&#32;_M_sent.~_Sent();
2027 &#32;&#32;&#32;&#32;}
2028 
2029 &#32;&#32;&#32;&#32;[[nodiscard]]
2030 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
2031 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>*()
2032 &#32;&#32;&#32;&#32;{
2033 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_index&#32;==&#32;0);
2034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_it;
2035 &#32;&#32;&#32;&#32;}
2036 
2037 &#32;&#32;&#32;&#32;[[nodiscard]]
2038 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
2039 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>*()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__dereferenceable&lt;const&#32;_It&gt;
2040 &#32;&#32;&#32;&#32;{
2041 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_index&#32;==&#32;0);
2042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_it;
2043 &#32;&#32;&#32;&#32;}
2044 
2045 &#32;&#32;&#32;&#32;[[nodiscard]]
2046 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2047 &#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;requires&#32;__detail::__common_iter_has_arrow&lt;_It&gt;
2048 &#32;&#32;&#32;&#32;{
2049 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_index&#32;==&#32;0);
2050 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_pointer_v&lt;_It&gt;&#32;||&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;_M_it.operator-&gt;();&#32;})
2051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_it;
2052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_reference_v&lt;iter_reference_t&lt;_It&gt;&gt;)
2053 &#32;&#32;&#32;&#32;{
2054 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*_M_it;
2055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2056 &#32;&#32;&#32;&#32;}
2057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__arrow_proxy{*_M_it};
2059 &#32;&#32;&#32;&#32;}
2060 
2061 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;common_iterator&amp;
2062 &#32;&#32;&#32;&#32;operator++()
2063 &#32;&#32;&#32;&#32;{
2064 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_index&#32;==&#32;0);
2065 &#32;&#32;&#32;&#32;&#32;&#32;++_M_it;
2066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2067 &#32;&#32;&#32;&#32;}
2068 
2069 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
2070 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>++(<emphasis role="keywordtype">int</emphasis>)
2071 &#32;&#32;&#32;&#32;{
2072 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_index&#32;==&#32;0);
2073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(forward_iterator&lt;_It&gt;)
2074 &#32;&#32;&#32;&#32;{
2075 &#32;&#32;&#32;&#32;&#32;&#32;common_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
2076 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
2077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
2078 &#32;&#32;&#32;&#32;}
2079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__detail::__common_iter_use_postfix_proxy&lt;_It&gt;)
2080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_it++;
2081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2082 &#32;&#32;&#32;&#32;{
2083 &#32;&#32;&#32;&#32;&#32;&#32;__postfix_proxy&#32;__p(**<emphasis role="keyword">this</emphasis>);
2084 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
2085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
2086 &#32;&#32;&#32;&#32;}
2087 &#32;&#32;&#32;&#32;}
2088 
2089 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It2,&#32;sentinel_for&lt;_It&gt;&#32;_Sent2&gt;
2090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sentinel_for&lt;_Sent,&#32;_It2&gt;
2091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>==&#32;[[nodiscard]]&#32;(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;&#32;__x,
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;common_iterator&lt;_It2,&#32;_Sent2&gt;&amp;&#32;__y)
2094 &#32;&#32;&#32;&#32;&#32;&#32;{
2095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(__x._M_index&#32;&lt;&lt;&#32;2&#32;|&#32;__y._M_index)
2096 &#32;&#32;&#32;&#32;&#32;&#32;{
2097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0000:
2098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0101:
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0001:
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_it&#32;==&#32;__y._M_sent;
2102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0100:
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_sent&#32;==&#32;__y._M_it;
2104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__x._M_has_value());
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__y._M_has_value());
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_unreachable();
2108 &#32;&#32;&#32;&#32;&#32;&#32;}
2109 &#32;&#32;&#32;&#32;&#32;&#32;}
2110 
2111 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It2,&#32;sentinel_for&lt;_It&gt;&#32;_Sent2&gt;
2112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sentinel_for&lt;_Sent,&#32;_It2&gt;&#32;&amp;&amp;&#32;equality_comparable_with&lt;_It,&#32;_It2&gt;
2113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>==&#32;[[nodiscard]]&#32;(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;&#32;__x,
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;common_iterator&lt;_It2,&#32;_Sent2&gt;&amp;&#32;__y)
2116 &#32;&#32;&#32;&#32;&#32;&#32;{
2117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(__x._M_index&#32;&lt;&lt;&#32;2&#32;|&#32;__y._M_index)
2118 &#32;&#32;&#32;&#32;&#32;&#32;{
2119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0101:
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0000:
2122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_it&#32;==&#32;__y._M_it;
2123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0001:
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_it&#32;==&#32;__y._M_sent;
2125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0100:
2126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_sent&#32;==&#32;__y._M_it;
2127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
2128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__x._M_has_value());
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__y._M_has_value());
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_unreachable();
2131 &#32;&#32;&#32;&#32;&#32;&#32;}
2132 &#32;&#32;&#32;&#32;&#32;&#32;}
2133 
2134 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;sized_sentinel_for&lt;_It&gt;&#32;_It2,&#32;sized_sentinel_for&lt;_It&gt;&#32;_Sent2&gt;
2135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sized_sentinel_for&lt;_Sent,&#32;_It2&gt;
2136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_It2&gt;
2137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>-&#32;[[nodiscard]]&#32;(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;&#32;__x,
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;common_iterator&lt;_It2,&#32;_Sent2&gt;&amp;&#32;__y)
2139 &#32;&#32;&#32;&#32;&#32;&#32;{
2140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(__x._M_index&#32;&lt;&lt;&#32;2&#32;|&#32;__y._M_index)
2141 &#32;&#32;&#32;&#32;&#32;&#32;{
2142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0101:
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0000:
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_it&#32;-&#32;__y._M_it;
2146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0001:
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_it&#32;-&#32;__y._M_sent;
2148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0b0100:
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_sent&#32;-&#32;__y._M_it;
2150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__x._M_has_value());
2152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__y._M_has_value());
2153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_unreachable();
2154 &#32;&#32;&#32;&#32;&#32;&#32;}
2155 &#32;&#32;&#32;&#32;&#32;&#32;}
2156 
2157 &#32;&#32;&#32;&#32;[[nodiscard]]
2158 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_rvalue_reference_t&lt;_It&gt;
2159 &#32;&#32;&#32;&#32;iter_move(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;&#32;__i)
2160 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(ranges::iter_move(std::declval&lt;const&#32;_It&amp;&gt;())))
2161 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;input_iterator&lt;_It&gt;
2162 &#32;&#32;&#32;&#32;{
2163 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__i._M_index&#32;==&#32;0);
2164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_move(__i._M_it);
2165 &#32;&#32;&#32;&#32;}
2166 
2167 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;indirectly_swappable&lt;_It&gt;&#32;_It2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent2&gt;
2168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2169 &#32;&#32;&#32;&#32;&#32;&#32;iter_swap(<emphasis role="keyword">const</emphasis>&#32;common_iterator&amp;&#32;__x,
2170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;common_iterator&lt;_It2,&#32;_Sent2&gt;&amp;&#32;__y)
2171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(ranges::iter_swap(std::declval&lt;const&#32;_It&amp;&gt;(),
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;const&#32;_It2&amp;&gt;())))
2173 &#32;&#32;&#32;&#32;&#32;&#32;{
2174 &#32;&#32;&#32;&#32;__glibcxx_assert(__x._M_index&#32;==&#32;0);
2175 &#32;&#32;&#32;&#32;__glibcxx_assert(__y._M_index&#32;==&#32;0);
2176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_swap(__x._M_it,&#32;__y._M_it);
2177 &#32;&#32;&#32;&#32;&#32;&#32;}
2178 
2179 &#32;&#32;<emphasis role="keyword">private</emphasis>:
2180 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_It2,&#32;sentinel_for&lt;_It2&gt;&#32;_Sent2&gt;
2181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!same_as&lt;_It2,&#32;_Sent2&gt;)&#32;&amp;&amp;&#32;copyable&lt;_It2&gt;
2182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class</emphasis>&#32;common_iterator;
2183 
2184 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2185 &#32;&#32;&#32;&#32;_M_has_value()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_index&#32;!=&#32;_S_valueless;&#32;}
2186 
2187 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CIt&gt;
2188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2189 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(_CIt&amp;&amp;&#32;__x)
2190 &#32;&#32;&#32;&#32;&#32;&#32;{
2191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;__x._M_index)
2192 &#32;&#32;&#32;&#32;&#32;&#32;{
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;0)
2194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_it&#32;=&#32;std::forward&lt;_CIt&gt;(__x)._M_it;
2195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;1)
2196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_sent&#32;=&#32;std::forward&lt;_CIt&gt;(__x)._M_sent;
2197 &#32;&#32;&#32;&#32;&#32;&#32;}
2198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2199 &#32;&#32;&#32;&#32;&#32;&#32;{
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;0)
2201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_it.~_It();
2202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_index&#32;==&#32;1)
2203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_sent.~_Sent();
2204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_index&#32;=&#32;_S_valueless;
2205 
2206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_index&#32;==&#32;0)
2207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_it),
2208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_CIt&gt;(__x)._M_it);
2209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_index&#32;==&#32;1)
2210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(std::__addressof(_M_sent),
2211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_CIt&gt;(__x)._M_sent);
2212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_index&#32;=&#32;__x._M_index;
2213 &#32;&#32;&#32;&#32;&#32;&#32;}
2214 &#32;&#32;&#32;&#32;&#32;&#32;}
2215 
2216 &#32;&#32;&#32;&#32;<emphasis role="keyword">union</emphasis>
2217 &#32;&#32;&#32;&#32;{
2218 &#32;&#32;&#32;&#32;&#32;&#32;_It&#32;_M_it;
2219 &#32;&#32;&#32;&#32;&#32;&#32;_Sent&#32;_M_sent;
2220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_valueless;
2221 &#32;&#32;&#32;&#32;};
2222 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_index;&#32;<emphasis role="comment">//&#32;0&#32;==&#32;_M_it,&#32;1&#32;==&#32;_M_sent,&#32;2&#32;==&#32;valueless</emphasis>
2223 
2224 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_S_valueless{2};
2225 &#32;&#32;};
2226 
2227 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent&gt;
2228 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&lt;common_iterator&lt;_It,&#32;_Sent&gt;&gt;
2229 &#32;&#32;&#32;&#32;{
2230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;iter_difference_t&lt;_It&gt;;
2231 &#32;&#32;&#32;&#32;};
2232 
2233 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sent&gt;
2234 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits&lt;common_iterator&lt;_It,&#32;_Sent&gt;&gt;
2235 &#32;&#32;&#32;&#32;{
2236 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
2238 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr
2239 &#32;&#32;&#32;&#32;{
2240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
2241 &#32;&#32;&#32;&#32;};
2242 
2243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
2244 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__common_iter_has_arrow&lt;_Iter&gt;
2245 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr&lt;_Iter&gt;
2246 &#32;&#32;&#32;&#32;{
2247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CIter&#32;=&#32;common_iterator&lt;_Iter,&#32;_Sent&gt;;
2248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;const&#32;_CIter&amp;&gt;().operator-&gt;());
2249 &#32;&#32;&#32;&#32;};
2250 
2251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2252 &#32;&#32;&#32;&#32;&#32;&#32;_S_iter_cat()
2253 &#32;&#32;&#32;&#32;&#32;&#32;{
2254 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Traits&#32;=&#32;iterator_traits&lt;_It&gt;;
2255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">requires</emphasis>&#32;derived_from&lt;<emphasis role="keyword">typename</emphasis>&#32;_Traits::iterator_category,
2256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag&gt;;&#32;})
2257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;forward_iterator_tag{};
2258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;input_iterator_tag{};
2260 &#32;&#32;&#32;&#32;&#32;&#32;}
2261 
2262 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_concept&#32;=&#32;__conditional_t&lt;forward_iterator&lt;_It&gt;,
2264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag,
2265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag&gt;;
2266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(_S_iter_cat());
2267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;iter_value_t&lt;_It&gt;;
2268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;iter_difference_t&lt;_It&gt;;
2269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__ptr&lt;_It&gt;::type;
2270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;iter_reference_t&lt;_It&gt;;
2271 &#32;&#32;&#32;&#32;};
2272 
2273 &#32;&#32;<emphasis role="comment">//&#32;[iterators.counted]&#32;Counted&#32;iterators</emphasis>
2274 
2275 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
2276 &#32;&#32;{
2277 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
2278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__counted_iter_value_type
2279 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
2280 
2281 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;indirectly_readable&#32;_It&gt;
2282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__counted_iter_value_type&lt;_It&gt;
2283 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;iter_value_t&lt;_It&gt;;&#32;};
2284 
2285 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
2286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__counted_iter_concept
2287 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
2288 
2289 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
2290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_It::iterator_concept;&#32;}
2291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__counted_iter_concept&lt;_It&gt;
2292 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_concept&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_It::iterator_concept;&#32;};
2293 
2294 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
2295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__counted_iter_cat
2296 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
2297 
2298 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It&gt;
2299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_It::iterator_category;&#32;}
2300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__counted_iter_cat&lt;_It&gt;
2301 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_It::iterator_category;&#32;};
2302 &#32;&#32;}
2303 
2305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_It&gt;
2306 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>counted_iterator
2307 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__detail::__counted_iter_value_type&lt;_It&gt;,
2308 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;__detail::__counted_iter_concept&lt;_It&gt;,
2309 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;__detail::__counted_iter_cat&lt;_It&gt;
2310 &#32;&#32;&#32;&#32;{
2311 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_type&#32;=&#32;_It;
2313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value_type&#32;defined&#32;in&#32;__counted_iter_value_type</emphasis>
2314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;iter_difference_t&lt;_It&gt;;
2315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterator_concept&#32;defined&#32;in&#32;__counted_iter_concept</emphasis>
2316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterator_category&#32;defined&#32;in&#32;__counted_iter_cat</emphasis>
2317 
2318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator()&#32;<emphasis role="keyword">requires</emphasis>&#32;default_initializable&lt;_It&gt;&#32;=&#32;default;
2319 
2320 &#32;&#32;&#32;&#32;&#32;&#32;constexpr
2321 &#32;&#32;&#32;&#32;&#32;&#32;counted_iterator(_It&#32;__i,&#32;iter_difference_t&lt;_It&gt;&#32;__n)
2322 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_current(<link linkend="_namespacestd">std</link>::move(__i)),&#32;_M_length(__n)
2323 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__glibcxx_assert(__n&#32;&gt;=&#32;0);&#32;}
2324 
2325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It2&gt;
2326 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_It2&amp;,&#32;_It&gt;
2327 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
2328 &#32;&#32;&#32;&#32;counted_iterator(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&lt;_It2&gt;&amp;&#32;__x)
2329 &#32;&#32;&#32;&#32;:&#32;_M_current(__x._M_current),&#32;_M_length(__x._M_length)
2330 &#32;&#32;&#32;&#32;{&#32;}
2331 
2332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It2&gt;
2333 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;assignable_from&lt;_It&amp;,&#32;const&#32;_It2&amp;&gt;
2334 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator&amp;
2335 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&lt;_It2&gt;&amp;&#32;__x)
2336 &#32;&#32;&#32;&#32;{
2337 &#32;&#32;&#32;&#32;&#32;&#32;_M_current&#32;=&#32;__x._M_current;
2338 &#32;&#32;&#32;&#32;&#32;&#32;_M_length&#32;=&#32;__x._M_length;
2339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2340 &#32;&#32;&#32;&#32;}
2341 
2342 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_It&amp;
2344 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;const&#32;&amp;&#32;noexcept
2345 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current;&#32;}
2346 
2347 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_It
2349 &#32;&#32;&#32;&#32;&#32;&#32;base()&#32;&amp;&amp;
2350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_move_constructible_v&lt;_It&gt;)
2351 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_current);&#32;}
2352 
2353 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_It&gt;
2355 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_length;&#32;}
2356 
2357 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
2359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>*()
2360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(*_M_current))
2361 &#32;&#32;&#32;&#32;&#32;&#32;{
2362 &#32;&#32;&#32;&#32;__glibcxx_assert(&#32;_M_length&#32;&gt;&#32;0&#32;);
2363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_current;
2364 &#32;&#32;&#32;&#32;&#32;&#32;}
2365 
2366 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
2368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>*()&#32;<emphasis role="keyword">const</emphasis>
2369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(*_M_current))
2370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__dereferenceable&lt;const&#32;_It&gt;
2371 &#32;&#32;&#32;&#32;&#32;&#32;{
2372 &#32;&#32;&#32;&#32;__glibcxx_assert(&#32;_M_length&#32;&gt;&#32;0&#32;);
2373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_current;
2374 &#32;&#32;&#32;&#32;&#32;&#32;}
2375 
2376 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2378 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept
2379 &#32;&#32;&#32;&#32;&#32;&#32;requires&#32;contiguous_iterator&lt;_It&gt;
2380 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::to_address(_M_current);&#32;}
2381 
2382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator&amp;
2383 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
2384 &#32;&#32;&#32;&#32;&#32;&#32;{
2385 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_length&#32;&gt;&#32;0);
2386 &#32;&#32;&#32;&#32;++_M_current;
2387 &#32;&#32;&#32;&#32;--_M_length;
2388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2389 &#32;&#32;&#32;&#32;&#32;&#32;}
2390 
2391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
2392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>++(<emphasis role="keywordtype">int</emphasis>)
2393 &#32;&#32;&#32;&#32;&#32;&#32;{
2394 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_length&#32;&gt;&#32;0);
2395 &#32;&#32;&#32;&#32;--_M_length;
2396 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
2397 &#32;&#32;&#32;&#32;&#32;&#32;{
2398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current++;
2399 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)&#32;{
2400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++_M_length;
2401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
2402 &#32;&#32;&#32;&#32;&#32;&#32;}
2403 &#32;&#32;&#32;&#32;&#32;&#32;}
2404 
2405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator
2406 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">requires</emphasis>&#32;forward_iterator&lt;_It&gt;
2407 &#32;&#32;&#32;&#32;&#32;&#32;{
2408 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
2409 &#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
2410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
2411 &#32;&#32;&#32;&#32;&#32;&#32;}
2412 
2413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator&amp;
2414 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;<emphasis role="keyword">requires</emphasis>&#32;bidirectional_iterator&lt;_It&gt;
2415 &#32;&#32;&#32;&#32;&#32;&#32;{
2416 &#32;&#32;&#32;&#32;--_M_current;
2417 &#32;&#32;&#32;&#32;++_M_length;
2418 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2419 &#32;&#32;&#32;&#32;&#32;&#32;}
2420 
2421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator
2422 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">requires</emphasis>&#32;bidirectional_iterator&lt;_It&gt;
2423 &#32;&#32;&#32;&#32;&#32;&#32;{
2424 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
2425 &#32;&#32;&#32;&#32;--*<emphasis role="keyword">this</emphasis>;
2426 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
2427 &#32;&#32;&#32;&#32;&#32;&#32;}
2428 
2429 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator
2431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(iter_difference_t&lt;_It&gt;&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2432 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;random_access_iterator&lt;_It&gt;
2433 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;counted_iterator(_M_current&#32;+&#32;__n,&#32;_M_length&#32;-&#32;__n);&#32;}
2434 
2435 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator
2437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(iter_difference_t&lt;_It&gt;&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__x)
2438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;random_access_iterator&lt;_It&gt;
2439 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__n;&#32;}
2440 
2441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator&amp;
2442 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(iter_difference_t&lt;_It&gt;&#32;__n)
2443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;random_access_iterator&lt;_It&gt;
2444 &#32;&#32;&#32;&#32;&#32;&#32;{
2445 &#32;&#32;&#32;&#32;__glibcxx_assert(__n&#32;&lt;=&#32;_M_length);
2446 &#32;&#32;&#32;&#32;_M_current&#32;+=&#32;__n;
2447 &#32;&#32;&#32;&#32;_M_length&#32;-=&#32;__n;
2448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2449 &#32;&#32;&#32;&#32;&#32;&#32;}
2450 
2451 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator
2453 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(iter_difference_t&lt;_It&gt;&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;random_access_iterator&lt;_It&gt;
2455 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;counted_iterator(_M_current&#32;-&#32;__n,&#32;_M_length&#32;+&#32;__n);&#32;}
2456 
2457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;common_with&lt;_It&gt;&#32;_It2&gt;
2458 &#32;&#32;&#32;&#32;[[nodiscard]]
2459 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_It2&gt;
2460 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__x,
2461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;counted_iterator&lt;_It2&gt;&amp;&#32;__y)
2462 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y._M_length&#32;-&#32;__x._M_length;&#32;}
2463 
2464 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_It&gt;
2466 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__x,&#32;default_sentinel_t)
2467 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;-__x._M_length;&#32;}
2468 
2469 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_It&gt;
2471 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(default_sentinel_t,&#32;<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__y)
2472 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y._M_length;&#32;}
2473 
2474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;counted_iterator&amp;
2475 &#32;&#32;&#32;&#32;&#32;&#32;operator-=(iter_difference_t&lt;_It&gt;&#32;__n)
2476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;random_access_iterator&lt;_It&gt;
2477 &#32;&#32;&#32;&#32;&#32;&#32;{
2478 &#32;&#32;&#32;&#32;__glibcxx_assert(-__n&#32;&lt;=&#32;_M_length);
2479 &#32;&#32;&#32;&#32;_M_current&#32;-=&#32;__n;
2480 &#32;&#32;&#32;&#32;_M_length&#32;+=&#32;__n;
2481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2482 &#32;&#32;&#32;&#32;&#32;&#32;}
2483 
2484 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
2486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>[](iter_difference_t&lt;_It&gt;&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(_M_current[__n]))
2488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;random_access_iterator&lt;_It&gt;
2489 &#32;&#32;&#32;&#32;&#32;&#32;{
2490 &#32;&#32;&#32;&#32;__glibcxx_assert(__n&#32;&lt;&#32;_M_length);
2491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_current[__n];
2492 &#32;&#32;&#32;&#32;&#32;&#32;}
2493 
2494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;common_with&lt;_It&gt;&#32;_It2&gt;
2495 &#32;&#32;&#32;&#32;[[nodiscard]]
2496 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2497 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__x,
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;counted_iterator&lt;_It2&gt;&amp;&#32;__y)
2499 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_length&#32;==&#32;__y._M_length;&#32;}
2500 
2501 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2503 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__x,&#32;default_sentinel_t)
2504 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_length&#32;==&#32;0;&#32;}
2505 
2506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;common_with&lt;_It&gt;&#32;_It2&gt;
2507 &#32;&#32;&#32;&#32;[[nodiscard]]
2508 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;strong_ordering
2509 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__x,
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;counted_iterator&lt;_It2&gt;&amp;&#32;__y)
2511 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y._M_length&#32;&lt;=&gt;&#32;__x._M_length;&#32;}
2512 
2513 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
2514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_rvalue_reference_t&lt;_It&gt;
2515 &#32;&#32;&#32;&#32;&#32;&#32;iter_move(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__i)
2516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(ranges::iter_move(__i._M_current)))
2517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;input_iterator&lt;_It&gt;
2518 &#32;&#32;&#32;&#32;&#32;&#32;{
2519 &#32;&#32;&#32;&#32;__glibcxx_assert(&#32;__i._M_length&#32;&gt;&#32;0&#32;);
2520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::iter_move(__i._M_current);
2521 &#32;&#32;&#32;&#32;&#32;&#32;}
2522 
2523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;indirectly_swappable&lt;_It&gt;&#32;_It2&gt;
2524 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2525 &#32;&#32;&#32;&#32;iter_swap(<emphasis role="keyword">const</emphasis>&#32;counted_iterator&amp;&#32;__x,
2526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;counted_iterator&lt;_It2&gt;&amp;&#32;__y)
2527 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(ranges::iter_swap(__x._M_current,&#32;__y._M_current)))
2528 &#32;&#32;&#32;&#32;{
2529 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(&#32;__x._M_length&#32;&gt;&#32;0&#32;&amp;&amp;&#32;__y._M_length&#32;&gt;&#32;0&#32;);
2530 &#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__x._M_current,&#32;__y._M_current);
2531 &#32;&#32;&#32;&#32;}
2532 
2533 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_It2&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>counted_iterator;
2535 
2536 &#32;&#32;&#32;&#32;&#32;&#32;_It&#32;_M_current&#32;=&#32;_It();
2537 &#32;&#32;&#32;&#32;&#32;&#32;iter_difference_t&lt;_It&gt;&#32;_M_length&#32;=&#32;0;
2538 &#32;&#32;&#32;&#32;};
2539 
2540 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_It&gt;
2541 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;same_as&lt;__detail::__iter_traits&lt;_It&gt;,&#32;iterator_traits&lt;_It&gt;&gt;
2542 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits&lt;counted_iterator&lt;_It&gt;&gt;&#32;:&#32;iterator_traits&lt;_It&gt;
2543 &#32;&#32;&#32;&#32;{
2544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;__conditional_t&lt;contiguous_iterator&lt;_It&gt;,
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_pointer_t&lt;iter_reference_t&lt;_It&gt;&gt;,
2546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&gt;;
2547 &#32;&#32;&#32;&#32;};
2548 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
2549 
2551 
2552 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
2553 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2554 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2555 &#32;&#32;&#32;&#32;__niter_base(move_iterator&lt;_Iterator&gt;&#32;__it)
2556 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(make_move_iterator(__niter_base(__it.base())))
2557 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;make_move_iterator(__niter_base(__it.base()));&#32;}
2558 
2559 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
2560 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_move_iterator&lt;move_iterator&lt;_Iterator&gt;&#32;&gt;
2561 &#32;&#32;&#32;&#32;{
2562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
2563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
2564 &#32;&#32;&#32;&#32;};
2565 
2566 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
2567 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2568 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2569 &#32;&#32;&#32;&#32;__miter_base(move_iterator&lt;_Iterator&gt;&#32;__it)
2570 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__miter_base(__it.base()))
2571 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__miter_base(__it.base());&#32;}
2572 
2573 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)&#32;std::make_move_iterator(_Iter)</emphasis>
2574 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)&#32;\</emphasis>
2575 <emphasis role="preprocessor">&#32;&#32;std::__make_move_if_noexcept_iterator(_Iter)</emphasis>
2576 <emphasis role="preprocessor">#else</emphasis>
2577 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MAKE_MOVE_ITERATOR(_Iter)&#32;(_Iter)</emphasis>
2578 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter)&#32;(_Iter)</emphasis>
2579 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
2580 
2581 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
2582 &#32;&#32;<emphasis role="comment">//&#32;These&#32;helper&#32;traits&#32;are&#32;used&#32;for&#32;deduction&#32;guides</emphasis>
2583 &#32;&#32;<emphasis role="comment">//&#32;of&#32;associative&#32;containers.</emphasis>
2584 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
2585 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter_key_t&#32;=&#32;remove_const_t&lt;
2586 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type::first_type&gt;;
2587 
2588 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
2589 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter_val_t&#32;=
2590 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type::second_type;
2591 
2592 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
2593 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>pair;
2594 
2595 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
2596 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter_to_alloc_t&#32;=
2597 &#32;&#32;&#32;&#32;pair&lt;add_const_t&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
2598 &#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;&gt;;
2599 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_deduction_guides</emphasis>
2600 
2601 _GLIBCXX_END_NAMESPACE_VERSION
2602 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
2603 
2604 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
2605 <emphasis role="preprocessor">#&#32;include&#32;&lt;debug/stl_iterator.h&gt;</emphasis>
2606 <emphasis role="preprocessor">#endif</emphasis>
2607 
2608 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
