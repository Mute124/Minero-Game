<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2invoke_8h_source" xml:lang="en-US">
<title>invoke.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/invoke.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Implementation&#32;of&#32;INVOKE&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2016-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_INVOKE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_INVOKE_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
37 <emphasis role="preprocessor">#else</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;forward</emphasis>
41 
42 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
43 {
44 _GLIBCXX_BEGIN_NAMESPACE_VERSION
45 
51 &#32;&#32;<emphasis role="comment">//&#32;Used&#32;by&#32;__invoke_impl&#32;instead&#32;of&#32;std::forward&lt;_Tp&gt;&#32;so&#32;that&#32;a</emphasis>
52 &#32;&#32;<emphasis role="comment">//&#32;reference_wrapper&#32;is&#32;converted&#32;to&#32;an&#32;lvalue-reference.</emphasis>
53 &#32;&#32;template&lt;typename&#32;_Tp,&#32;typename&#32;_Up&#32;=&#32;typename&#32;__inv_unwrap&lt;_Tp&gt;::type&gt;
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Up&amp;&amp;
55 &#32;&#32;&#32;&#32;__invfwd(<emphasis role="keyword">typename</emphasis>&#32;remove_reference&lt;_Tp&gt;::type&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
56 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__t);&#32;}
57 
58 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Res
60 &#32;&#32;&#32;&#32;__invoke_impl(__invoke_other,&#32;_Fn&amp;&amp;&#32;__f,&#32;_Args&amp;&amp;...&#32;__args)
61 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Fn&gt;(__f)(std::forward&lt;_Args&gt;(__args)...);&#32;}
62 
63 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_MemFun,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Res
65 &#32;&#32;&#32;&#32;__invoke_impl(__invoke_memfun_ref,&#32;_MemFun&amp;&amp;&#32;__f,&#32;_Tp&amp;&amp;&#32;__t,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
67 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__invfwd&lt;_Tp&gt;(__t).*__f)(std::forward&lt;_Args&gt;(__args)...);&#32;}
68 
69 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_MemFun,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Res
71 &#32;&#32;&#32;&#32;__invoke_impl(__invoke_memfun_deref,&#32;_MemFun&amp;&amp;&#32;__f,&#32;_Tp&amp;&amp;&#32;__t,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
73 &#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((*std::forward&lt;_Tp&gt;(__t)).*__f)(std::forward&lt;_Args&gt;(__args)...);
75 &#32;&#32;&#32;&#32;}
76 
77 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_MemPtr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Res
79 &#32;&#32;&#32;&#32;__invoke_impl(__invoke_memobj_ref,&#32;_MemPtr&amp;&amp;&#32;__f,&#32;_Tp&amp;&amp;&#32;__t)
80 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__invfwd&lt;_Tp&gt;(__t).*__f;&#32;}
81 
82 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_MemPtr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Res
84 &#32;&#32;&#32;&#32;__invoke_impl(__invoke_memobj_deref,&#32;_MemPtr&amp;&amp;&#32;__f,&#32;_Tp&amp;&amp;&#32;__t)
85 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*std::forward&lt;_Tp&gt;(__t)).*__f;&#32;}
86 
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Callable,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__invoke_result&lt;_Callable,&#32;_Args...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
90 &#32;&#32;&#32;&#32;__invoke(_Callable&amp;&amp;&#32;__fn,&#32;_Args&amp;&amp;...&#32;__args)
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__is_nothrow_invocable&lt;_Callable,&#32;_Args...&gt;<link linkend="_classvalue">::value</link>)
92 &#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__result&#32;=&#32;__invoke_result&lt;_Callable,&#32;_Args...&gt;;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::type;
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__tag&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::__invoke_type;
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke_impl&lt;__type&gt;(__tag{},&#32;std::forward&lt;_Callable&gt;(__fn),
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
98 &#32;&#32;&#32;&#32;}
99 
100 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
101 &#32;&#32;<emphasis role="comment">//&#32;INVOKE&lt;R&gt;:&#32;Invoke&#32;a&#32;callable&#32;object&#32;and&#32;convert&#32;the&#32;result&#32;to&#32;R.</emphasis>
102 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Callable,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;is_invocable_r_v&lt;_Res,&#32;_Callable,&#32;_Args...&gt;,&#32;_Res&gt;
104 &#32;&#32;&#32;&#32;__invoke_r(_Callable&amp;&amp;&#32;__fn,&#32;_Args&amp;&amp;...&#32;__args)
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_invocable_r_v&lt;_Res,&#32;_Callable,&#32;_Args...&gt;)
106 &#32;&#32;&#32;&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__result&#32;=&#32;__invoke_result&lt;_Callable,&#32;_Args...&gt;;
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::type;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__tag&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::__invoke_type;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_void_v&lt;_Res&gt;)
111 &#32;&#32;&#32;&#32;std::__invoke_impl&lt;__type&gt;(__tag{},&#32;std::forward&lt;_Callable&gt;(__fn),
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke_impl&lt;__type&gt;(__tag{},
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Callable&gt;(__fn),
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
117 &#32;&#32;&#32;&#32;}
118 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
119 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Callable,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__can_invoke_as_void&#32;=&#32;__enable_if_t&lt;
121 &#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;is_void&lt;_Res&gt;,&#32;__is_invocable&lt;_Callable,&#32;_Args...&gt;&gt;<link linkend="_classvalue">::value</link>,
122 &#32;&#32;&#32;&#32;&#32;&#32;_Res
123 &#32;&#32;&#32;&#32;&gt;;
124 
125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Callable,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__can_invoke_as_nonvoid&#32;=&#32;__enable_if_t&lt;
127 &#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;__not_&lt;is_void&lt;_Res&gt;&gt;,
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;<emphasis role="keyword">typename</emphasis>&#32;__invoke_result&lt;_Callable,&#32;_Args...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Res&gt;
130 &#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>,
131 &#32;&#32;&#32;&#32;&#32;&#32;_Res
132 &#32;&#32;&#32;&#32;&gt;;
133 
134 &#32;&#32;<emphasis role="comment">//&#32;INVOKE&lt;R&gt;:&#32;Invoke&#32;a&#32;callable&#32;object&#32;and&#32;convert&#32;the&#32;result&#32;to&#32;R.</emphasis>
135 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Callable,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
136 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__can_invoke_as_nonvoid&lt;_Res,&#32;_Callable,&#32;_Args...&gt;
137 &#32;&#32;&#32;&#32;__invoke_r(_Callable&amp;&amp;&#32;__fn,&#32;_Args&amp;&amp;...&#32;__args)
138 &#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__result&#32;=&#32;__invoke_result&lt;_Callable,&#32;_Args...&gt;;
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::type;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__tag&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::__invoke_type;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke_impl&lt;__type&gt;(__tag{},&#32;std::forward&lt;_Callable&gt;(__fn),
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
144 &#32;&#32;&#32;&#32;}
145 
146 &#32;&#32;<emphasis role="comment">//&#32;INVOKE&lt;R&gt;&#32;when&#32;R&#32;is&#32;cv&#32;void</emphasis>
147 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Callable,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
148 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;__can_invoke_as_void&lt;_Res,&#32;_Callable,&#32;_Args...&gt;
149 &#32;&#32;&#32;&#32;__invoke_r(_Callable&amp;&amp;&#32;__fn,&#32;_Args&amp;&amp;...&#32;__args)
150 &#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__result&#32;=&#32;__invoke_result&lt;_Callable,&#32;_Args...&gt;;
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::type;
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__tag&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result::__invoke_type;
154 &#32;&#32;&#32;&#32;&#32;&#32;std::__invoke_impl&lt;__type&gt;(__tag{},&#32;std::forward&lt;_Callable&gt;(__fn),
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
156 &#32;&#32;&#32;&#32;}
157 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
158 
159 _GLIBCXX_END_NAMESPACE_VERSION
160 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
161 
162 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
163 
164 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_INVOKE_H</emphasis>
</programlisting></section>
