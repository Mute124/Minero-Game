<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2semaphore__base_8h_source" xml:lang="en-US">
<title>semaphore_base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/semaphore_base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-&#32;header.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_SEMAPHORE_BASE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SEMAPHORE_BASE_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/atomic_base.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/chrono.h&gt;</emphasis>
37 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/atomic_timed_wait.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;ext/numeric_traits.h&gt;</emphasis>
40 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
41 
42 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAVE_POSIX_SEMAPHORE</emphasis>
43 <emphasis role="preprocessor">#&#32;include&#32;&lt;cerrno&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;errno,&#32;EINTR,&#32;EAGAIN&#32;etc.</emphasis>
44 <emphasis role="preprocessor">#&#32;include&#32;&lt;limits.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SEM_VALUE_MAX</emphasis>
45 <emphasis role="preprocessor">#&#32;include&#32;&lt;semaphore.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;sem_t,&#32;sem_init,&#32;sem_wait,&#32;sem_post&#32;etc.</emphasis>
46 <emphasis role="preprocessor">#endif</emphasis>
47 
48 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
49 {
50 _GLIBCXX_BEGIN_NAMESPACE_VERSION
51 
52 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAVE_POSIX_SEMAPHORE</emphasis>
53 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__platform_semaphore
54 &#32;&#32;{
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__clock_t&#32;=&#32;chrono::system_clock;
56 <emphasis role="preprocessor">#ifdef&#32;SEM_VALUE_MAX</emphasis>
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;_S_max&#32;=&#32;SEM_VALUE_MAX;
58 <emphasis role="preprocessor">#else</emphasis>
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;_S_max&#32;=&#32;_POSIX_SEM_VALUE_MAX;
60 <emphasis role="preprocessor">#endif</emphasis>
61 
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;__platform_semaphore(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
63 &#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;sem_init(&amp;_M_semaphore,&#32;0,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
65 &#32;&#32;&#32;&#32;}
66 
67 &#32;&#32;&#32;&#32;__platform_semaphore(<emphasis role="keyword">const</emphasis>&#32;__platform_semaphore&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
68 &#32;&#32;&#32;&#32;__platform_semaphore&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__platform_semaphore&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
69 
70 &#32;&#32;&#32;&#32;~__platform_semaphore()
71 &#32;&#32;&#32;&#32;{&#32;sem_destroy(&amp;_M_semaphore);&#32;}
72 
73 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
74 &#32;&#32;&#32;&#32;_M_acquire()&#32;<emphasis role="keyword">noexcept</emphasis>
75 &#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
77 &#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__err&#32;=&#32;sem_wait(&amp;_M_semaphore);
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__err&#32;&amp;&amp;&#32;(errno&#32;==&#32;EINTR))
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__err)
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__terminate();
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
85 &#32;&#32;&#32;&#32;}
86 &#32;&#32;&#32;&#32;}
87 
88 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
89 &#32;&#32;&#32;&#32;_M_try_acquire()&#32;<emphasis role="keyword">noexcept</emphasis>
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
92 &#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__err&#32;=&#32;sem_trywait(&amp;_M_semaphore);
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__err&#32;&amp;&amp;&#32;(errno&#32;==&#32;EINTR))
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__err&#32;&amp;&amp;&#32;(errno&#32;==&#32;EAGAIN))
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__err)
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__terminate();
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
102 &#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
104 &#32;&#32;&#32;&#32;}
105 
106 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
107 &#32;&#32;&#32;&#32;_M_release(std::ptrdiff_t&#32;__update)&#32;<emphasis role="keyword">noexcept</emphasis>
108 &#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;&#32;__update&#32;!=&#32;0;&#32;--__update)
110 &#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__err&#32;=&#32;sem_post(&amp;_M_semaphore);
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__err)
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__terminate();
114 &#32;&#32;&#32;&#32;}
115 &#32;&#32;&#32;&#32;}
116 
117 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
118 &#32;&#32;&#32;&#32;_M_try_acquire_until_impl(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;__clock_t&gt;&amp;&#32;__atime)
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
120 &#32;&#32;&#32;&#32;{
121 
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;chrono::time_point_cast&lt;chrono::seconds&gt;(__atime);
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ns&#32;=&#32;chrono::duration_cast&lt;chrono::nanoseconds&gt;(__atime&#32;-&#32;__s);
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timespec&#32;__ts&#32;=
126 &#32;&#32;&#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::time_t<emphasis role="keyword">&gt;</emphasis>(__s.time_since_epoch().count()),
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(__ns.count())
129 &#32;&#32;&#32;&#32;&#32;&#32;};
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
132 &#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__err&#32;=&#32;sem_timedwait(&amp;_M_semaphore,&#32;&amp;__ts))
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errno&#32;==&#32;EINTR)
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errno&#32;==&#32;<link linkend="__classes_2lib_2pthread_8h_1a597718e59a8fc9c4d4ab63f5a34e28b1">ETIMEDOUT</link>&#32;||&#32;errno&#32;==&#32;EINVAL)
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__terminate();
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
144 &#32;&#32;&#32;&#32;}
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
146 &#32;&#32;&#32;&#32;}
147 
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;_M_try_acquire_until(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Duration&gt;&amp;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;__clock_t,&#32;_Clock&gt;)
154 &#32;&#32;&#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_try_acquire_until_impl(__atime);
156 &#32;&#32;&#32;&#32;&#32;&#32;}
157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock::time_point&#32;__c_entry&#32;=&#32;_Clock::now();
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__s_entry&#32;=&#32;__clock_t::now();
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__delta&#32;=&#32;__atime&#32;-&#32;__c_entry;
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__s_atime&#32;=&#32;__s_entry&#32;+&#32;__delta;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_try_acquire_until_impl(__s_atime))
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;got&#32;a&#32;timeout&#32;when&#32;measured&#32;against&#32;__clock_t&#32;but</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;need&#32;to&#32;check&#32;against&#32;the&#32;caller-supplied&#32;clock</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;tell&#32;whether&#32;we&#32;should&#32;return&#32;a&#32;timeout.</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_Clock::now()&#32;&lt;&#32;__atime);
170 &#32;&#32;&#32;&#32;&#32;&#32;}
171 &#32;&#32;&#32;&#32;&#32;&#32;}
172 
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;_M_try_acquire_for(<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_try_acquire_until(__clock_t::now()&#32;+&#32;__rtime);&#32;}
178 
179 &#32;&#32;<emphasis role="keyword">private</emphasis>:
180 &#32;&#32;&#32;&#32;sem_t&#32;_M_semaphore;
181 &#32;&#32;};
182 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_HAVE_POSIX_SEMAPHORE</emphasis>
183 
184 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
185 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__atomic_semaphore
186 &#32;&#32;{
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;_S_max&#32;=&#32;__gnu_cxx::__int_traits&lt;int&gt;::__max;
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;__atomic_semaphore(__detail::__platform_wait_t&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)&#32;noexcept
189 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_counter(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
190 &#32;&#32;&#32;&#32;{
191 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;&lt;=&#32;_S_max);
192 &#32;&#32;&#32;&#32;}
193 
194 &#32;&#32;&#32;&#32;__atomic_semaphore(<emphasis role="keyword">const</emphasis>&#32;__atomic_semaphore&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
195 &#32;&#32;&#32;&#32;__atomic_semaphore&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__atomic_semaphore&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
196 
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
198 &#32;&#32;&#32;&#32;_S_do_try_acquire(__detail::__platform_wait_t*&#32;__counter)&#32;<emphasis role="keyword">noexcept</emphasis>
199 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__old&#32;=&#32;__atomic_impl::load(__counter,&#32;memory_order::acquire);
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__old&#32;==&#32;0)
202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
203 
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_impl::compare_exchange_strong(__counter,
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__old,&#32;__old&#32;-&#32;1,
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memory_order::acquire,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memory_order::relaxed);
208 &#32;&#32;&#32;&#32;}
209 
210 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
211 &#32;&#32;&#32;&#32;_M_acquire()&#32;<emphasis role="keyword">noexcept</emphasis>
212 &#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__pred&#32;=
214 &#32;&#32;&#32;&#32;[<emphasis role="keyword">this</emphasis>]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_do_try_acquire(&amp;this-&gt;_M_counter);&#32;};
215 &#32;&#32;&#32;&#32;&#32;&#32;std::__atomic_wait_address_bare(&amp;_M_counter,&#32;__pred);
216 &#32;&#32;&#32;&#32;}
217 
218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
219 &#32;&#32;&#32;&#32;_M_try_acquire()&#32;<emphasis role="keyword">noexcept</emphasis>
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__pred&#32;=
222 &#32;&#32;&#32;&#32;[<emphasis role="keyword">this</emphasis>]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_do_try_acquire(&amp;this-&gt;_M_counter);&#32;};
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__detail::__atomic_spin(__pred);
224 &#32;&#32;&#32;&#32;}
225 
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
227 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
228 &#32;&#32;&#32;&#32;&#32;&#32;_M_try_acquire_until(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Duration&gt;&amp;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;{
231 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__pred&#32;=
232 &#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="keyword">this</emphasis>]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_do_try_acquire(&amp;this-&gt;_M_counter);&#32;};
233 
234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_wait_address_until_bare(&amp;_M_counter,&#32;__pred,&#32;__atime);
235 &#32;&#32;&#32;&#32;&#32;&#32;}
236 
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
238 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">bool</emphasis>
239 &#32;&#32;&#32;&#32;&#32;&#32;_M_try_acquire_for(<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;{
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__pred&#32;=
243 &#32;&#32;&#32;&#32;&#32;&#32;[<emphasis role="keyword">this</emphasis>]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_do_try_acquire(&amp;this-&gt;_M_counter);&#32;};
244 
245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_wait_address_for_bare(&amp;_M_counter,&#32;__pred,&#32;__rtime);
246 &#32;&#32;&#32;&#32;&#32;&#32;}
247 
248 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2atomic__base_8h_1a18755778007fe831d100a2355bd3a653">_GLIBCXX_ALWAYS_INLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>
249 &#32;&#32;&#32;&#32;_M_release(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__update)&#32;<emphasis role="keyword">noexcept</emphasis>
250 &#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;&lt;&#32;__atomic_impl::fetch_add(&amp;_M_counter,&#32;__update,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a17c2de5ae768960284c047a320f17d1ba685a90c8fc516895354973c3918a5f7b">memory_order_release</link>))
252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__update&#32;&gt;&#32;1)
254 &#32;&#32;&#32;&#32;__atomic_notify_address_bare(&amp;_M_counter,&#32;<emphasis role="keyword">true</emphasis>);
255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
256 &#32;&#32;&#32;&#32;__atomic_notify_address_bare(&amp;_M_counter,&#32;<emphasis role="keyword">true</emphasis>);
257 <emphasis role="comment">//&#32;FIXME&#32;-&#32;Figure&#32;out&#32;why&#32;this&#32;does&#32;not&#32;wake&#32;a&#32;waiting&#32;thread</emphasis>
258 <emphasis role="comment">//&#32;&#32;__atomic_notify_address_bare(&amp;_M_counter,&#32;false);</emphasis>
259 &#32;&#32;&#32;&#32;}
260 
261 &#32;&#32;<emphasis role="keyword">private</emphasis>:
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(__detail::__platform_wait_alignment)
263 &#32;&#32;&#32;&#32;__detail::__platform_wait_t&#32;_M_counter;
264 &#32;&#32;};
265 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
266 
267 <emphasis role="comment">//&#32;Note:&#32;the&#32;_GLIBCXX_USE_POSIX_SEMAPHORE&#32;macro&#32;can&#32;be&#32;used&#32;to&#32;force&#32;the</emphasis>
268 <emphasis role="comment">//&#32;use&#32;of&#32;Posix&#32;semaphores&#32;(sem_t).&#32;Doing&#32;so&#32;however,&#32;alters&#32;the&#32;ABI.</emphasis>
269 <emphasis role="preprocessor">#if&#32;defined&#32;__cpp_lib_atomic_wait&#32;&amp;&amp;&#32;!_GLIBCXX_USE_POSIX_SEMAPHORE</emphasis>
270 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__semaphore_impl&#32;=&#32;__atomic_semaphore;
271 <emphasis role="preprocessor">#elif&#32;_GLIBCXX_HAVE_POSIX_SEMAPHORE</emphasis>
272 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__semaphore_impl&#32;=&#32;__platform_semaphore;
273 <emphasis role="preprocessor">#endif</emphasis>
274 
275 _GLIBCXX_END_NAMESPACE_VERSION
276 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
277 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SEMAPHORE_BASE_H</emphasis>
</programlisting></section>
