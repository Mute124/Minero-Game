<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_forward__declarations_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/forward_declarations.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/forward_declarations.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;std_string.h&quot;<?linebreak?>#include &quot;std_new.h&quot;<?linebreak?>#include &lt;cstdint&gt;<?linebreak?>#include &lt;cstddef&gt;<?linebreak?>#include &lt;cstring&gt;<?linebreak?>#include &lt;cfloat&gt;<?linebreak?>#include &lt;climits&gt;<?linebreak?>#include &lt;cmath&gt;<?linebreak?>#include &lt;limits&gt;<?linebreak?>#include &lt;memory&gt;<?linebreak?>#include &lt;iosfwd&gt;<?linebreak?>#include &lt;type_traits&gt;<?linebreak?>#include &quot;header_start.h&quot;<?linebreak?>#include &quot;header_end.h&quot;<?linebreak?></programlisting>Include dependency graph for forward_declarations.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="forward__declarations_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="forward__declarations_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structinserter">inserter&lt; T &gt;</link></para>

<para>Helper class for suppressing move-construction in single-argument array constructors. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacetoml">toml</link></para>

<para>The root namespace for all toml++ functions and types. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_forward__declarations_8h_1a081dc6ee550d344af321209d765fbe45">default_formatter</link> = toml_formatter</para>

<para>The &apos;default&apos; formatter used by TOML objects when they are printed to a stream. \detail This is an alias for #toml::toml_formatter. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename Char &gt; </para><para>std::basic_ostream&lt; Char &gt; &amp; <link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link> (std::basic_ostream&lt; Char &gt; &amp;lhs, node_type rhs)</para>

<para>Pretty-prints the value of a node_type to a stream. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1aaeb44bbc848e4243aa7e9011e9bac7f9">TOML_MAKE_FLAGS</link> (<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>)</para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1aad7dd1560f9bfe1d669259312e826819">TOML_MAKE_FLAGS</link> (<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_forward__declarations_8h_1af24ac0c604986a79a31a916332dba0a6">inserter</link> (T &amp;&amp;) -&gt; <link linkend="_structinserter">inserter</link>&lt; T &amp;&amp; &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_forward__declarations_8h_1ad2df9a648d8aed8ba9ba54524ef050c8">inserter</link> (T &amp;) -&gt; <link linkend="_structinserter">inserter</link>&lt; T &amp; &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><link linkend="_forward__declarations_8h_1a6c2a5b158c0a6d208edd992229d91d78">TOML_DISABLE_WARNINGS</link></para>
</listitem>
            <listitem><para><link linkend="_forward__declarations_8h_1a4e1f9eaceb60becba33cd64d3a85e3ed">TOML_ENABLE_WARNINGS</link></para>
</listitem>
            <listitem><para><link linkend="_forward__declarations_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link></para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link></para>

<para>Metadata associated with TOML values. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1ab82bdeb4dd19cff4de2266a27d3dda18">format_as_binary</link> = 1</para>

<para>Format integer values as binary. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a23ea604a4d31b811ee1dcf554577c906">format_as_octal</link> = 2</para>

<para>Format integer values as octal. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a00083906b4f76536fcccf16aa0fe3c94">format_as_hexadecimal</link> = 3</para>

<para>Format integer values as hexadecimal. </para>
</listitem>
            <listitem><para>constexpr <link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> <link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link></para>

<para>Special #toml::value_flags constant used for array + table insert functions to specify that any value nodes being copied should not have their flags property overridden by the inserting function&apos;s <computeroutput>flags</computeroutput> argument. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link></para>

<para>Format flags for modifying how TOML data is printed to streams. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a2545d18c6766d54922be39e868fe4bf6">quote_dates_and_times</link> = (1ull &lt;&lt; 0)</para>

<para>Dates and times will be emitted as quoted strings. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a7ae1c6e457ad741d30ce82ed08c78ab1">quote_infinities_and_nans</link> = (1ull &lt;&lt; 1)</para>

<para>Infinities and NaNs will be emitted as quoted strings. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a8aed9fba74baf504c741d36149cb46a3">allow_literal_strings</link> = (1ull &lt;&lt; 2)</para>

<para>Strings will be emitted as single-quoted literal strings where possible. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a24920e85768d19625e1084e3ca601620">allow_multi_line_strings</link> = (1ull &lt;&lt; 3)</para>

<para>Strings containing newlines will be emitted as triple-quoted &apos;multi-line&apos; strings where possible. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a3e541c3ac7db3737fe85987dcdcf7dd8">allow_real_tabs_in_strings</link> = (1ull &lt;&lt; 4)</para>

<para>Allow real tab characters in string literals (as opposed to the escaped form <computeroutput>\t</computeroutput>). </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a300010e368604efe47dbcae9fd8554fe">allow_unicode_strings</link> = (1ull &lt;&lt; 5)</para>

<para>Allow non-ASCII characters in strings (as opposed to their escaped form, e.g. <computeroutput>\u00DA</computeroutput>). </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a5c5bd51ada006fec47f0a14d90f6ac41">allow_binary_integers</link> = (1ull &lt;&lt; 6)</para>

<para>Allow integers with #value_flags::format_as_binary to be emitted as binary. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a48afee63c154da708ccdf978957db363">allow_octal_integers</link> = (1ull &lt;&lt; 7)</para>

<para>Allow integers with #value_flags::format_as_octal to be emitted as octal. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a8002cf32a7117fe62831fa23aa75cc84">allow_hexadecimal_integers</link> = (1ull &lt;&lt; 8)</para>

<para>Allow integers with #value_flags::format_as_hexadecimal to be emitted as hexadecimal. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link> = (1ull &lt;&lt; 9)</para>

<para>Apply indentation to tables nested within other tables/arrays. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link> = (1ull &lt;&lt; 10)</para>

<para>Apply indentation to array elements when the array is forced to wrap over multiple lines. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1aeff1bb793cb4a2cf6c9be1b90fa0ec7d">indentation</link> = <link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link> | <link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link></para>

<para>Combination mask of all indentation-enabling flags. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1ab6c9a08132134d6f8fb431cf7e71c022">relaxed_float_precision</link> = (1ull &lt;&lt; 11)</para>

<para>Emit floating-point values with relaxed (human-friendly) precision. </para>
</listitem>
            <listitem><para>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> <link linkend="_forward__declarations_8h_1a9349d47dff26b543042f8d1ffb50e28c">terse_key_value_pairs</link> = (1ull &lt;&lt; 12)</para>

<para>Avoids the use of whitespace around key-value pairs. </para>
</listitem>
            <listitem><para><link linkend="_forward__declarations_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link></para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link> = std::is_same_v&lt;impl::remove_cvref&lt;T&gt;, <link linkend="_classarray">array</link>&gt;</para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::array. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1aa34941ab50c25915afb9afe528fea814">is_container</link> = is_table&lt;T&gt; || <link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>&lt;T&gt;</para>

<para>Metafunction for determining if a type satisfies either toml::is_table or toml::is_array. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a std::string or toml::value&lt;std::string&gt;. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a int64_t or toml::value&lt;int64_t&gt;. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a double or toml::value&lt;double&gt;. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link> = <link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>&lt;T&gt;</para>

<para>Metafunction for determining if a type satisfies either toml::is_integer or toml::is_floating_point. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a bool or toml::value&lt;bool&gt;. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::date or toml::value&lt;date&gt;. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::time or toml::value&lt;time&gt;. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::date_time or toml::value&lt;date_time&gt;. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1a7ecc8ff96d2556cce78ebef9c0433601">is_chronological</link> = <link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>&lt;T&gt;</para>

<para>Metafunction for determining if a type satisfies any of toml::is_date, toml::is_time or toml::is_date_time. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1afced5bc5ef559606e3d75268ca601709">is_value</link> = <link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a7ecc8ff96d2556cce78ebef9c0433601">is_chronological</link>&lt;T&gt;</para>

<para>Metafunction for determining if a type is, or is a reference to, any of the toml value types. Excludes tables and arrays. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1adab17769fd14cb533f58e9600c31701c">is_node</link></para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::node (or one of its subclasses). </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_forward__declarations_8h_1ac0b3c59d6626e469f1a2d97359ac0892">is_node_view</link> = <link linkend="_toml_8hpp_1a815e932c93486480761ca77d94447901">impl::is_one_of</link>&lt;impl::remove_cvref&lt;T&gt;, <link linkend="_classnode__view">node_view</link>&lt;node&gt;, <link linkend="_classnode__view">node_view</link>&lt;const node&gt;&gt;</para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::node_view. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_forward__declarations_8h_1a081dc6ee550d344af321209d765fbe45"/><section>
    <title>default_formatter</title>
<indexterm><primary>default_formatter</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>default_formatter</secondary></indexterm>
<para><computeroutput>using <link linkend="_forward__declarations_8h_1a081dc6ee550d344af321209d765fbe45">default_formatter</link> =  toml_formatter</computeroutput></para><para>

<para>The &apos;default&apos; formatter used by TOML objects when they are printed to a stream. \detail This is an alias for #toml::toml_formatter. </para>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_forward__declarations_8h_1af24ac0c604986a79a31a916332dba0a6"/><section>
    <title>inserter()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>inserter</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>inserter</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_structinserter">inserter</link> (T &amp;&amp; ) -&gt;  <link linkend="_structinserter">inserter</link>&lt; T &amp;&amp; &gt;</computeroutput></para></section>
<anchor xml:id="_forward__declarations_8h_1ad2df9a648d8aed8ba9ba54524ef050c8"/><section>
    <title>inserter()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>inserter</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>inserter</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_structinserter">inserter</link> (T &amp; ) -&gt;  <link linkend="_structinserter">inserter</link>&lt; T &amp; &gt;</computeroutput></para></section>
<anchor xml:id="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c"/><section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename Char &gt; </computeroutput><para><computeroutput>std::basic_ostream&lt; Char &gt; &amp; operator&lt;&lt; (std::basic_ostream&lt; Char &gt; &amp; lhs, node_type rhs)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Pretty-prints the value of a node_type to a stream. </para>
</para>

<para>\detail \cpp auto arr = toml::array{ 1, 2.0, &quot;3&quot;, false }; for (size_t i = 0; i &lt; arr.size() i++) std::cout &lt;&lt; &quot;Element [&quot;sv &lt;&lt; i &lt;&lt; &quot;] is: &quot;sv &lt;&lt; arr[i].<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type()</link> &lt;&lt; &quot;\n&quot;; \ecpp</para>

<para>\out Element [0] is: integer Element [1] is: floating-point Element [2] is: string Element [3] is: boolean \eout </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="forward__declarations_8h_ade7e3bc03b39cb3b5684a4c302832e3c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="forward__declarations_8h_ade7e3bc03b39cb3b5684a4c302832e3c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1aad7dd1560f9bfe1d669259312e826819"/><section>
    <title>TOML_MAKE_FLAGS()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>TOML_MAKE_FLAGS</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>TOML_MAKE_FLAGS</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> TOML_MAKE_FLAGS (<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link> )</computeroutput></para></section>
<anchor xml:id="_forward__declarations_8h_1aaeb44bbc848e4243aa7e9011e9bac7f9"/><section>
    <title>TOML_MAKE_FLAGS()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>TOML_MAKE_FLAGS</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>TOML_MAKE_FLAGS</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> TOML_MAKE_FLAGS (<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> )</computeroutput></para></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_forward__declarations_8h_1a5c5bd51ada006fec47f0a14d90f6ac41"/><section>
    <title>allow_binary_integers</title>
<indexterm><primary>allow_binary_integers</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>allow_binary_integers</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> allow_binary_integers = (1ull &lt;&lt; 6)</computeroutput></para><para>

<para>Allow integers with #value_flags::format_as_binary to be emitted as binary. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a8002cf32a7117fe62831fa23aa75cc84"/><section>
    <title>allow_hexadecimal_integers</title>
<indexterm><primary>allow_hexadecimal_integers</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>allow_hexadecimal_integers</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> allow_hexadecimal_integers = (1ull &lt;&lt; 8)</computeroutput></para><para>

<para>Allow integers with #value_flags::format_as_hexadecimal to be emitted as hexadecimal. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a8aed9fba74baf504c741d36149cb46a3"/><section>
    <title>allow_literal_strings</title>
<indexterm><primary>allow_literal_strings</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>allow_literal_strings</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> allow_literal_strings = (1ull &lt;&lt; 2)</computeroutput></para><para>

<para>Strings will be emitted as single-quoted literal strings where possible. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a24920e85768d19625e1084e3ca601620"/><section>
    <title>allow_multi_line_strings</title>
<indexterm><primary>allow_multi_line_strings</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>allow_multi_line_strings</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> allow_multi_line_strings = (1ull &lt;&lt; 3)</computeroutput></para><para>

<para>Strings containing newlines will be emitted as triple-quoted &apos;multi-line&apos; strings where possible. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a48afee63c154da708ccdf978957db363"/><section>
    <title>allow_octal_integers</title>
<indexterm><primary>allow_octal_integers</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>allow_octal_integers</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> allow_octal_integers = (1ull &lt;&lt; 7)</computeroutput></para><para>

<para>Allow integers with #value_flags::format_as_octal to be emitted as octal. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a3e541c3ac7db3737fe85987dcdcf7dd8"/><section>
    <title>allow_real_tabs_in_strings</title>
<indexterm><primary>allow_real_tabs_in_strings</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>allow_real_tabs_in_strings</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> allow_real_tabs_in_strings = (1ull &lt;&lt; 4)</computeroutput></para><para>

<para>Allow real tab characters in string literals (as opposed to the escaped form <computeroutput>\t</computeroutput>). </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a300010e368604efe47dbcae9fd8554fe"/><section>
    <title>allow_unicode_strings</title>
<indexterm><primary>allow_unicode_strings</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>allow_unicode_strings</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> allow_unicode_strings = (1ull &lt;&lt; 5)</computeroutput></para><para>

<para>Allow non-ASCII characters in strings (as opposed to their escaped form, e.g. <computeroutput>\u00DA</computeroutput>). </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1ab82bdeb4dd19cff4de2266a27d3dda18"/><section>
    <title>format_as_binary</title>
<indexterm><primary>format_as_binary</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>format_as_binary</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> format_as_binary = 1</computeroutput></para><para>

<para>Format integer values as binary. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a00083906b4f76536fcccf16aa0fe3c94"/><section>
    <title>format_as_hexadecimal</title>
<indexterm><primary>format_as_hexadecimal</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>format_as_hexadecimal</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> format_as_hexadecimal = 3</computeroutput></para><para>

<para>Format integer values as hexadecimal. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a23ea604a4d31b811ee1dcf554577c906"/><section>
    <title>format_as_octal</title>
<indexterm><primary>format_as_octal</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>format_as_octal</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> format_as_octal = 2</computeroutput></para><para>

<para>Format integer values as octal. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4"/><section>
    <title>format_flags</title>
<indexterm><primary>format_flags</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>format_flags</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> format_flags<computeroutput>[strong]</computeroutput></computeroutput></para><para>

<para>Format flags for modifying how TOML data is printed to streams. </para>
</para>

<para><note><title>Note</title>

<para>Formatters may disregard/override any of these flags according to the requirements of their output target (e.g. #toml::json_formatter will always apply quotes to dates and times). </para>
</note>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35"/><section>
    <title>indent_array_elements</title>
<indexterm><primary>indent_array_elements</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>indent_array_elements</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> indent_array_elements = (1ull &lt;&lt; 10)</computeroutput></para><para>

<para>Apply indentation to array elements when the array is forced to wrap over multiple lines. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea"/><section>
    <title>indent_sub_tables</title>
<indexterm><primary>indent_sub_tables</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>indent_sub_tables</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> indent_sub_tables = (1ull &lt;&lt; 9)</computeroutput></para><para>

<para>Apply indentation to tables nested within other tables/arrays. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1aeff1bb793cb4a2cf6c9be1b90fa0ec7d"/><section>
    <title>indentation</title>
<indexterm><primary>indentation</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>indentation</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> indentation = <link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link> | <link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link></computeroutput></para><para>

<para>Combination mask of all indentation-enabling flags. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f"/><section>
    <title>is_array</title>
<indexterm><primary>is_array</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_array</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_array = std::is_same_v&lt;impl::remove_cvref&lt;T&gt;, <link linkend="_classarray">array</link>&gt;<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::array. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b"/><section>
    <title>is_boolean</title>
<indexterm><primary>is_boolean</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_boolean</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_boolean<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a bool or toml::value&lt;bool&gt;. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a7ecc8ff96d2556cce78ebef9c0433601"/><section>
    <title>is_chronological</title>
<indexterm><primary>is_chronological</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_chronological</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_chronological = <link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>&lt;T&gt;<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Metafunction for determining if a type satisfies any of toml::is_date, toml::is_time or toml::is_date_time. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1aa34941ab50c25915afb9afe528fea814"/><section>
    <title>is_container</title>
<indexterm><primary>is_container</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_container</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_container = is_table&lt;T&gt; || <link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>&lt;T&gt;<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Metafunction for determining if a type satisfies either toml::is_table or toml::is_array. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4"/><section>
    <title>is_date</title>
<indexterm><primary>is_date</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_date</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_date<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date&gt;</link>&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::date or toml::value&lt;date&gt;. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b"/><section>
    <title>is_date_time</title>
<indexterm><primary>is_date_time</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_date_time</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_date_time<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::date_time or toml::value&lt;date_time&gt;. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de"/><section>
    <title>is_floating_point</title>
<indexterm><primary>is_floating_point</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_floating_point</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_floating_point<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;double&gt;</link>&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a double or toml::value&lt;double&gt;. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c"/><section>
    <title>is_integer</title>
<indexterm><primary>is_integer</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_integer</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_integer<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a int64_t or toml::value&lt;int64_t&gt;. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1adab17769fd14cb533f58e9600c31701c"/><section>
    <title>is_node</title>
<indexterm><primary>is_node</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_node</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_node<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;toml::node,&#32;impl::remove_cvref&lt;T&gt;&gt;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_base_of_v&lt;toml::node,&#32;impl::remove_cvref&lt;T&gt;&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::node (or one of its subclasses). </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1ac0b3c59d6626e469f1a2d97359ac0892"/><section>
    <title>is_node_view</title>
<indexterm><primary>is_node_view</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_node_view</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_node_view = <link linkend="_toml_8hpp_1a815e932c93486480761ca77d94447901">impl::is_one_of</link>&lt;impl::remove_cvref&lt;T&gt;, <link linkend="_classnode__view">node_view</link>&lt;node&gt;, <link linkend="_classnode__view">node_view</link>&lt;const node&gt;&gt;<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::node_view. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d"/><section>
    <title>is_number</title>
<indexterm><primary>is_number</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_number</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_number = <link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>&lt;T&gt;<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Metafunction for determining if a type satisfies either toml::is_integer or toml::is_floating_point. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6"/><section>
    <title>is_string</title>
<indexterm><primary>is_string</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_string</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_string<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a std::string or toml::value&lt;std::string&gt;. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f"/><section>
    <title>is_time</title>
<indexterm><primary>is_time</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_time</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_time<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;time&gt;</link>&gt;
</programlisting><para>

<para>Metafunction for determining if a type is, or is a reference to, a toml::time or toml::value&lt;time&gt;. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1afced5bc5ef559606e3d75268ca601709"/><section>
    <title>is_value</title>
<indexterm><primary>is_value</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>is_value</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> is_value = <link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>&lt;T&gt; || <link linkend="_forward__declarations_8h_1a7ecc8ff96d2556cce78ebef9c0433601">is_chronological</link>&lt;T&gt;<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Metafunction for determining if a type is, or is a reference to, any of the toml value types. Excludes tables and arrays. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5"/><section>
    <title>preserve_source_value_flags</title>
<indexterm><primary>preserve_source_value_flags</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>preserve_source_value_flags</secondary></indexterm>
<para><computeroutput>constexpr <link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link> preserve_source_value_flags<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type_t&lt;value_flags&gt;<emphasis role="keyword">&gt;</emphasis>(-1)&#32;})
</programlisting><para>

<para>Special #toml::value_flags constant used for array + table insert functions to specify that any value nodes being copied should not have their flags property overridden by the inserting function&apos;s <computeroutput>flags</computeroutput> argument. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a2545d18c6766d54922be39e868fe4bf6"/><section>
    <title>quote_dates_and_times</title>
<indexterm><primary>quote_dates_and_times</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>quote_dates_and_times</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> quote_dates_and_times = (1ull &lt;&lt; 0)</computeroutput></para><para>

<para>Dates and times will be emitted as quoted strings. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a7ae1c6e457ad741d30ce82ed08c78ab1"/><section>
    <title>quote_infinities_and_nans</title>
<indexterm><primary>quote_infinities_and_nans</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>quote_infinities_and_nans</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> quote_infinities_and_nans = (1ull &lt;&lt; 1)</computeroutput></para><para>

<para>Infinities and NaNs will be emitted as quoted strings. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1ab6c9a08132134d6f8fb431cf7e71c022"/><section>
    <title>relaxed_float_precision</title>
<indexterm><primary>relaxed_float_precision</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>relaxed_float_precision</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> relaxed_float_precision = (1ull &lt;&lt; 11)</computeroutput></para><para>

<para>Emit floating-point values with relaxed (human-friendly) precision. </para>
</para>

<para><warning><title>Warning</title>

<para>Setting this flag may cause serialized documents to no longer round-trip correctly since floats might have a less precise value upon being written out than they did when being read in. Use this flag at your own risk. </para>
</warning>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a9349d47dff26b543042f8d1ffb50e28c"/><section>
    <title>terse_key_value_pairs</title>
<indexterm><primary>terse_key_value_pairs</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>terse_key_value_pairs</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link> terse_key_value_pairs = (1ull &lt;&lt; 12)</computeroutput></para><para>

<para>Avoids the use of whitespace around key-value pairs. </para>
</para>
</section>
<anchor xml:id="_forward__declarations_8h_1a6c2a5b158c0a6d208edd992229d91d78"/><section>
    <title>TOML_DISABLE_WARNINGS</title>
<indexterm><primary>TOML_DISABLE_WARNINGS</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>TOML_DISABLE_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_DISABLE_WARNINGS</computeroutput></para></section>
<anchor xml:id="_forward__declarations_8h_1a4e1f9eaceb60becba33cd64d3a85e3ed"/><section>
    <title>TOML_ENABLE_WARNINGS</title>
<indexterm><primary>TOML_ENABLE_WARNINGS</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>TOML_ENABLE_WARNINGS</secondary></indexterm>
<para><computeroutput>TOML_ENABLE_WARNINGS</computeroutput></para></section>
<anchor xml:id="_forward__declarations_8h_1afa65688cac47ce86021fef8d739f9fd8"/><section>
    <title>TOML_NAMESPACE_END</title>
<indexterm><primary>TOML_NAMESPACE_END</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>TOML_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_END</computeroutput></para></section>
<anchor xml:id="_forward__declarations_8h_1a24e5c42f7e94b0b0f3212744874731e6"/><section>
    <title>TOML_NAMESPACE_START</title>
<indexterm><primary>TOML_NAMESPACE_START</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>TOML_NAMESPACE_START</secondary></indexterm>
<para><computeroutput>TOML_NAMESPACE_START</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceliterals">literals</link>
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;}

&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;node_type&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;integer,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;floating_point,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boolean,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;date,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdate__time">date_time</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;}
</programlisting></section>
<anchor xml:id="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86"/><section>
    <title>value_flags</title>
<indexterm><primary>value_flags</primary><secondary>forward_declarations.h</secondary></indexterm>
<indexterm><primary>forward_declarations.h</primary><secondary>value_flags</secondary></indexterm>
<para><computeroutput>enum <link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link> value_flags<computeroutput>[strong]</computeroutput></computeroutput></para><para>

<para>Metadata associated with TOML values. </para>
</para>
</section>
</section>
</section>
