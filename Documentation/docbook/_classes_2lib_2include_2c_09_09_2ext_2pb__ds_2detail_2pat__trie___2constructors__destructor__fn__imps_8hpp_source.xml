<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2constructors__destructor__fn__imps_8hpp_source" xml:lang="en-US">
<title>constructors_destructor_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 &#32;<emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::head_allocator
45 PB_DS_CLASS_C_DEC::s_head_allocator;
46 
47 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
48 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::inode_allocator
49 PB_DS_CLASS_C_DEC::s_inode_allocator;
50 
51 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
52 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::leaf_allocator
53 PB_DS_CLASS_C_DEC::s_leaf_allocator;
54 
55 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
56 PB_DS_CLASS_C_DEC::
57 PB_DS_PAT_TRIE_NAME()&#32;:
58 &#32;&#32;m_p_head(s_head_allocator.allocate(1)),
59 &#32;&#32;m_size(0)
60 {
61 &#32;&#32;initialize();
62 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
63 }
64 
65 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
66 PB_DS_CLASS_C_DEC::
67 PB_DS_PAT_TRIE_NAME(<emphasis role="keyword">const</emphasis>&#32;access_traits&amp;&#32;r_access_traits)&#32;:
68 &#32;&#32;synth_access_traits(r_access_traits),
69 &#32;&#32;m_p_head(s_head_allocator.allocate(1)),
70 &#32;&#32;m_size(0)
71 {
72 &#32;&#32;initialize();
73 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
74 }
75 
76 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
77 PB_DS_CLASS_C_DEC::
78 PB_DS_PAT_TRIE_NAME(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)&#32;:
79 #ifdef&#32;_GLIBCXX_DEBUG
80 &#32;&#32;debug_base(other),
81 #endif
82 &#32;&#32;synth_access_traits(other),
83 &#32;&#32;node_update(other),
84 &#32;&#32;m_p_head(s_head_allocator.allocate(1)),
85 &#32;&#32;m_size(0)
86 {
87 &#32;&#32;initialize();
88 &#32;&#32;m_size&#32;=&#32;other.m_size;
89 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
90 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(other.m_p_head-&gt;m_p_parent&#32;==&#32;0)
91 &#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
93 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
94 &#32;&#32;&#32;&#32;&#32;&#32;}
95 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
96 &#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;recursive_copy_node(other.m_p_head-&gt;m_p_parent);
98 &#32;&#32;&#32;&#32;}
99 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;s_head_allocator.deallocate(m_p_head,&#32;1);
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
103 &#32;&#32;&#32;&#32;}
104 
105 &#32;&#32;m_p_head-&gt;m_p_min&#32;=&#32;leftmost_descendant(m_p_head-&gt;m_p_parent);
106 &#32;&#32;m_p_head-&gt;m_p_max&#32;=&#32;rightmost_descendant(m_p_head-&gt;m_p_parent);
107 &#32;&#32;m_p_head-&gt;m_p_parent-&gt;m_p_parent&#32;=&#32;m_p_head;
108 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
109 }
110 
111 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
112 <emphasis role="keywordtype">void</emphasis>
113 PB_DS_CLASS_C_DEC::
114 swap(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
115 {
116 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
117 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
118 &#32;&#32;value_swap(other);
119 &#32;&#32;<link linkend="_namespacestd">std</link>::swap((access_traits&amp;&#32;)(*this),&#32;(access_traits&amp;&#32;)other);
120 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
121 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
122 }
123 
124 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
125 <emphasis role="keywordtype">void</emphasis>
126 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
127 value_swap(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
128 {
129 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::swap(other);)
130 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_p_head,&#32;other.m_p_head);
131 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_size,&#32;other.m_size);
132 }
133 
134 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
135 PB_DS_CLASS_C_DEC::
136 ~PB_DS_PAT_TRIE_NAME()
137 {
138 &#32;&#32;clear();
139 &#32;&#32;s_head_allocator.deallocate(m_p_head,&#32;1);
140 }
141 
142 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
143 <emphasis role="keywordtype">void</emphasis>
144 PB_DS_CLASS_C_DEC::
145 initialize()
146 {
147 &#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(m_p_head)&#32;head();
148 &#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;0;
149 &#32;&#32;m_p_head-&gt;m_p_min&#32;=&#32;m_p_head;
150 &#32;&#32;m_p_head-&gt;m_p_max&#32;=&#32;m_p_head;
151 &#32;&#32;m_size&#32;=&#32;0;
152 }
153 
154 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
155 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;It&gt;
156 <emphasis role="keywordtype">void</emphasis>
157 PB_DS_CLASS_C_DEC::
158 copy_from_range(It&#32;first_it,&#32;It&#32;last_it)
159 {
160 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(first_it&#32;!=&#32;last_it)
161 &#32;&#32;&#32;&#32;insert(*(first_it++));
162 }
163 
164 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
165 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
166 PB_DS_CLASS_C_DEC::
167 recursive_copy_node(node_const_pointer&#32;p_ncp)
168 {
169 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_ncp&#32;!=&#32;0);
170 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_ncp-&gt;m_type&#32;==&#32;leaf_node)
171 &#32;&#32;&#32;&#32;{
172 &#32;&#32;&#32;&#32;&#32;&#32;leaf_const_pointer&#32;p_other_lf&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_ncp);
173 &#32;&#32;&#32;&#32;&#32;&#32;leaf_pointer&#32;p_new_lf&#32;=&#32;s_leaf_allocator.allocate(1);
174 &#32;&#32;&#32;&#32;&#32;&#32;cond_dealtor&#32;cond(p_new_lf);
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(p_new_lf)&#32;leaf(p_other_lf-&gt;value());
176 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_new_lf,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
177 &#32;&#32;&#32;&#32;&#32;&#32;cond.set_no_action_dtor();
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(p_new_lf);
179 &#32;&#32;&#32;&#32;}
180 
181 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_ncp-&gt;m_type&#32;==&#32;i_node);
182 &#32;&#32;node_pointer&#32;a_p_children[inode::arr_size];
183 &#32;&#32;size_type&#32;child_i&#32;=&#32;0;
184 &#32;&#32;inode_const_pointer&#32;p_icp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_ncp);
185 
186 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;inode::const_iterator&#32;child_it&#32;=&#32;p_icp-&gt;begin();
187 
188 &#32;&#32;inode_pointer&#32;p_ret;
189 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
190 &#32;&#32;&#32;&#32;{
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(child_it&#32;!=&#32;p_icp-&gt;end())
192 &#32;&#32;&#32;&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;a_p_children[child_i]&#32;=&#32;recursive_copy_node(*(child_it));
194 &#32;&#32;&#32;&#32;&#32;&#32;child_i++;
195 &#32;&#32;&#32;&#32;&#32;&#32;child_it++;
196 &#32;&#32;&#32;&#32;}
197 &#32;&#32;&#32;&#32;&#32;&#32;p_ret&#32;=&#32;s_inode_allocator.allocate(1);
198 &#32;&#32;&#32;&#32;}
199 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
200 &#32;&#32;&#32;&#32;{
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(child_i--&#32;&gt;&#32;0)
202 &#32;&#32;&#32;&#32;clear_imp(a_p_children[child_i]);
203 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
204 &#32;&#32;&#32;&#32;}
205 
206 &#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(p_ret)&#32;inode(p_icp-&gt;get_e_ind(),&#32;pref_begin(a_p_children[0]));
207 
208 &#32;&#32;--child_i;
209 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(child_i&#32;&gt;=&#32;1);
210 &#32;&#32;<emphasis role="keywordflow">do</emphasis>
211 &#32;&#32;&#32;&#32;p_ret-&gt;add_child(a_p_children[child_i],&#32;pref_begin(a_p_children[child_i]),
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(a_p_children[child_i]),&#32;<emphasis role="keyword">this</emphasis>);
213 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(child_i--&#32;&gt;&#32;0);
214 &#32;&#32;apply_update(p_ret,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
215 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
216 }
217 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
