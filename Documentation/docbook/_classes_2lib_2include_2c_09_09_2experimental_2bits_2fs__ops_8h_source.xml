<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2experimental_2bits_2fs__ops_8h_source" xml:lang="en-US">
<title>fs_ops.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/experimental/bits/fs_ops.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Filesystem&#32;operational&#32;functions&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;__option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_FS_OPS_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_FS_OPS_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
35 <emphasis role="preprocessor">#else</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 
43 <emphasis role="keyword">namespace&#32;</emphasis>experimental
44 {
45 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
46 {
47 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>
48 {
54 &#32;&#32;[[__nodiscard__]]
55 &#32;&#32;<link linkend="_classpath">path</link>&#32;absolute(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base&#32;=&#32;current_path());
56 
57 &#32;&#32;[[__nodiscard__]]
58 &#32;&#32;<link linkend="_classpath">path</link>&#32;canonical(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base&#32;=&#32;current_path());
59 
60 &#32;&#32;[[__nodiscard__]]
61 &#32;&#32;<link linkend="_classpath">path</link>&#32;canonical(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
62 
63 &#32;&#32;[[__nodiscard__]]
64 &#32;&#32;<link linkend="_classpath">path</link>&#32;canonical(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base,&#32;error_code&amp;&#32;__ec);
65 
66 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
67 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to)
68 &#32;&#32;{&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(__from,&#32;__to,&#32;copy_options::none);&#32;}
69 
70 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
71 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
72 &#32;&#32;{&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(__from,&#32;__to,&#32;copy_options::none,&#32;__ec);&#32;}
73 
74 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options);
75 
76 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
78 
79 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
80 &#32;&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to)
81 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;copy_file(__from,&#32;__to,&#32;copy_options::none);&#32;}
82 
83 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
84 &#32;&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;error_code&amp;&#32;__ec)
85 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;copy_file(__from,&#32;__to,&#32;copy_options::none,&#32;__ec);&#32;}
86 
87 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option);
88 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec);
90 
91 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;copy_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__existing_symlink,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink);
92 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;copy_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__existing_symlink,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
94 
95 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directories(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
96 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directories(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
97 
98 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
99 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
100 
101 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;attributes);
102 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;attributes,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
104 
105 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_directory_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink);
106 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_directory_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink,
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
108 
109 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_hard_link(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_hard_link);
110 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_hard_link(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_hard_link,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
112 
113 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink);
114 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
116 
117 &#32;&#32;[[__nodiscard__]]
118 &#32;&#32;<link linkend="_classpath">path</link>&#32;current_path();
119 
120 &#32;&#32;[[__nodiscard__]]
121 &#32;&#32;<link linkend="_classpath">path</link>&#32;current_path(error_code&amp;&#32;__ec);
122 
123 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;current_path(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
124 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;current_path(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
125 
126 &#32;&#32;[[__nodiscard__]]
127 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>
128 &#32;&#32;equivalent(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p2);
129 
130 &#32;&#32;[[__nodiscard__]]
131 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>
132 &#32;&#32;equivalent(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p2,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
133 
134 &#32;&#32;[[__nodiscard__]]
135 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
136 &#32;&#32;exists(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
137 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;status_known(__s)&#32;&amp;&amp;&#32;__s.type()&#32;!=&#32;file_type::not_found;&#32;}
138 
139 &#32;&#32;[[__nodiscard__]]
140 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
141 &#32;&#32;exists(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
142 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;exists(status(__p));&#32;}
143 
144 &#32;&#32;[[__nodiscard__]]
145 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
146 &#32;&#32;exists(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
147 &#32;&#32;{
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;status(__p,&#32;__ec);
149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status_known(__s))
150 &#32;&#32;&#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;__ec.clear();
152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;!=&#32;file_type::not_found;
153 &#32;&#32;&#32;&#32;&#32;&#32;}
154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
155 &#32;&#32;}
156 
157 &#32;&#32;[[__nodiscard__]]
158 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;file_size(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
159 
160 &#32;&#32;[[__nodiscard__]]
161 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;file_size(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
162 
163 &#32;&#32;[[__nodiscard__]]
164 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;hard_link_count(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
165 
166 &#32;&#32;[[__nodiscard__]]
167 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;hard_link_count(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
168 
169 &#32;&#32;[[__nodiscard__]]
170 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
171 &#32;&#32;is_block_file(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
172 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::block;&#32;}
173 
174 &#32;&#32;[[__nodiscard__]]
175 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
176 &#32;&#32;is_block_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
177 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_block_file(status(__p));&#32;}
178 
179 &#32;&#32;[[__nodiscard__]]
180 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
181 &#32;&#32;is_block_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
182 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_block_file(status(__p,&#32;__ec));&#32;}
183 
184 &#32;&#32;[[__nodiscard__]]
185 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
186 &#32;&#32;is_character_file(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
187 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::character;&#32;}
188 
189 &#32;&#32;[[__nodiscard__]]
190 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
191 &#32;&#32;is_character_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
192 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_character_file(status(__p));&#32;}
193 
194 &#32;&#32;[[__nodiscard__]]
195 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
196 &#32;&#32;is_character_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
197 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_character_file(status(__p,&#32;__ec));&#32;}
198 
199 &#32;&#32;[[__nodiscard__]]
200 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
201 &#32;&#32;is_directory(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
202 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::directory;&#32;}
203 
204 &#32;&#32;[[__nodiscard__]]
205 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
206 &#32;&#32;is_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
207 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_directory(status(__p));&#32;}
208 
209 &#32;&#32;[[__nodiscard__]]
210 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
211 &#32;&#32;is_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
212 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_directory(status(__p,&#32;__ec));&#32;}
213 
214 &#32;&#32;[[__nodiscard__]]
215 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_empty(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
216 &#32;&#32;[[__nodiscard__]]
217 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_empty(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
218 
219 &#32;&#32;[[__nodiscard__]]
220 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
221 &#32;&#32;is_fifo(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
222 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::fifo;&#32;}
223 
224 &#32;&#32;[[__nodiscard__]]
225 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
226 &#32;&#32;is_fifo(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
227 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_fifo(status(__p));&#32;}
228 
229 &#32;&#32;[[__nodiscard__]]
230 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
231 &#32;&#32;is_fifo(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
232 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_fifo(status(__p,&#32;__ec));&#32;}
233 
234 &#32;&#32;[[__nodiscard__]]
235 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
236 &#32;&#32;is_other(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
237 &#32;&#32;{
238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;exists(__s)&#32;&amp;&amp;&#32;!is_regular_file(__s)&#32;&amp;&amp;&#32;!is_directory(__s)
239 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_symlink(__s);
240 &#32;&#32;}
241 
242 &#32;&#32;[[__nodiscard__]]
243 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
244 &#32;&#32;is_other(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
245 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_other(status(__p));&#32;}
246 
247 &#32;&#32;[[__nodiscard__]]
248 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
249 &#32;&#32;is_other(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
250 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_other(status(__p,&#32;__ec));&#32;}
251 
252 &#32;&#32;[[__nodiscard__]]
253 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
254 &#32;&#32;is_regular_file(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
255 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::regular;&#32;}
256 
257 &#32;&#32;[[__nodiscard__]]
258 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
259 &#32;&#32;is_regular_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
260 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_regular_file(status(__p));&#32;}
261 
262 &#32;&#32;[[__nodiscard__]]
263 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
264 &#32;&#32;is_regular_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
265 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_regular_file(status(__p,&#32;__ec));&#32;}
266 
267 &#32;&#32;[[__nodiscard__]]
268 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
269 &#32;&#32;is_socket(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
270 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::socket;&#32;}
271 
272 &#32;&#32;[[__nodiscard__]]
273 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
274 &#32;&#32;is_socket(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
275 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_socket(status(__p));&#32;}
276 
277 &#32;&#32;[[__nodiscard__]]
278 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
279 &#32;&#32;is_socket(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
280 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_socket(status(__p,&#32;__ec));&#32;}
281 
282 &#32;&#32;[[__nodiscard__]]
283 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
284 &#32;&#32;is_symlink(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
285 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::symlink;&#32;}
286 
287 &#32;&#32;[[__nodiscard__]]
288 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
289 &#32;&#32;is_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
290 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_symlink(symlink_status(__p));&#32;}
291 
292 &#32;&#32;[[__nodiscard__]]
293 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
294 &#32;&#32;is_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
295 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_symlink(symlink_status(__p,&#32;__ec));&#32;}
296 
297 &#32;&#32;[[__nodiscard__]]
298 &#32;&#32;file_time_type&#32;&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
299 
300 &#32;&#32;[[__nodiscard__]]
301 &#32;&#32;file_time_type&#32;&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
302 
303 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;file_time_type&#32;__new_time);
304 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;file_time_type&#32;__new_time,
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
306 
307 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;permissions(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;perms&#32;__prms);
308 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;permissions(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;perms&#32;__prms,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
309 
310 &#32;&#32;[[__nodiscard__]]
311 &#32;&#32;<link linkend="_classpath">path</link>&#32;read_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
312 
313 &#32;&#32;[[__nodiscard__]]
314 &#32;&#32;<link linkend="_classpath">path</link>&#32;read_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
315 
316 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
317 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
318 
319 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
320 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
321 
322 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;rename(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to);
323 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;rename(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
324 
325 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resize_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;__size);
326 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resize_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;__size,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
327 
328 &#32;&#32;[[__nodiscard__]]
329 &#32;&#32;space_info&#32;space(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
330 
331 &#32;&#32;[[__nodiscard__]]
332 &#32;&#32;space_info&#32;space(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
333 
334 &#32;&#32;[[__nodiscard__]]
335 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
336 
337 &#32;&#32;[[__nodiscard__]]
338 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
339 
340 &#32;&#32;[[__nodiscard__]]
341 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status_known(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
342 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;!=&#32;file_type::none;&#32;}
343 
344 &#32;&#32;[[__nodiscard__]]
345 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
346 
347 &#32;&#32;[[__nodiscard__]]
348 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
349 
350 &#32;&#32;[[__nodiscard__]]
351 &#32;&#32;<link linkend="_classpath">path</link>&#32;system_complete(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
352 
353 &#32;&#32;[[__nodiscard__]]
354 &#32;&#32;<link linkend="_classpath">path</link>&#32;system_complete(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
355 
356 &#32;&#32;[[__nodiscard__]]
357 &#32;&#32;<link linkend="_classpath">path</link>&#32;temp_directory_path();
358 
359 &#32;&#32;[[__nodiscard__]]
360 &#32;&#32;<link linkend="_classpath">path</link>&#32;temp_directory_path(error_code&amp;&#32;__ec);
361 
363 }&#32;<emphasis role="comment">//&#32;namespace&#32;v1</emphasis>
364 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
365 }&#32;<emphasis role="comment">//&#32;namespace&#32;experimental</emphasis>
366 
367 _GLIBCXX_END_NAMESPACE_VERSION
368 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
369 
370 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
371 
372 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_FS_OPS_H</emphasis>
</programlisting></section>
