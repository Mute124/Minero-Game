<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2glm_2glm_2detail_2func__integer_8inl_source" xml:lang="en-US">
<title>func_integer.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/glm/glm/detail/func_integer.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
2 
3 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2glm_2glm_2detail_2__vectorize_8hpp">_vectorize.hpp</link>&quot;</emphasis>
4 <emphasis role="preprocessor">#if(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_X86&#32;&amp;&amp;&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)</emphasis>
5 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&lt;intrin.h&gt;</emphasis>
6 <emphasis role="preprocessor">#&#32;&#32;&#32;pragma&#32;intrinsic(_BitScanReverse)</emphasis>
7 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">//(GLM_ARCH&#32;&amp;&#32;GLM_ARCH_X86&#32;&amp;&amp;&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)</emphasis>
8 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
9 
10 <emphasis role="preprocessor">#if&#32;!GLM_HAS_EXTENDED_INTEGER_TYPE</emphasis>
11 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_GCC</emphasis>
12 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wlong-long&quot;</emphasis>
13 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
14 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;(GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_CLANG)</emphasis>
15 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wc++11-long-long&quot;</emphasis>
16 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis>
17 <emphasis role="preprocessor">#endif</emphasis>
18 
19 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
20 <emphasis role="keyword">namespace&#32;</emphasis>detail
21 {
22 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
23 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;T&#32;<link linkend="_namespacemask">mask</link>(T&#32;Bits)
24 &#32;&#32;&#32;&#32;{
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Bits&#32;&gt;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8)&#32;?&#32;~static_cast&lt;T&gt;(0)&#32;:&#32;(static_cast&lt;T&gt;(1)&#32;&lt;&lt;&#32;Bits)&#32;-&#32;static_cast&lt;T&gt;(1);
26 &#32;&#32;&#32;&#32;}
27 
28 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Aligned,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;EXEC&gt;
29 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_bitfieldReverseStep
30 &#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__bitfield_reverse_step_1af79cf2500bbf26d11bab38e353b84966">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;T,&#32;T)
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>;
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
35 &#32;&#32;&#32;&#32;};
36 
37 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Aligned&gt;
38 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_bitfieldReverseStep&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;Aligned,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
39 &#32;&#32;&#32;&#32;{
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__bitfield_reverse_step_3_01_l_00_01_t_00_01_q_00_01_aligned_00_01true_01_4_1a83454af2159d752f442877d56300e2ae">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;T&#32;Mask,&#32;T&#32;Shift)
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&amp;&#32;Mask)&#32;&lt;&lt;&#32;Shift&#32;|&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&amp;&#32;(~Mask))&#32;&gt;&gt;&#32;Shift;
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
44 &#32;&#32;&#32;&#32;};
45 
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Aligned,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;EXEC&gt;
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_bitfieldBitCountStep
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__bitfield_bit_count_step_1a28ed640fb4617ba5f9d16704b939faad">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;T,&#32;T)
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
53 &#32;&#32;&#32;&#32;};
54 
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Aligned&gt;
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_bitfieldBitCountStep&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;Aligned,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__bitfield_bit_count_step_3_01_l_00_01_t_00_01_q_00_01_aligned_00_01true_01_4_1a094830638b07fe4d84a99d40faa469af">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;T&#32;Mask,&#32;T&#32;Shift)
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&amp;&#32;Mask)&#32;+&#32;((<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&gt;&gt;&#32;Shift)&#32;&amp;&#32;Mask);
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;};
63 
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Bits&gt;
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findLSB
66 &#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1compute__find_l_s_b_1a1c0ec72e2bcf35a3109e85cfc536400b">call</link>(genIUType&#32;Value)
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(Value&#32;==&#32;0)
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceglm_1a5e87ca2e2bc7f836767efecc0a1b0cdb">glm::bitCount</link>(~Value&#32;&amp;&#32;(Value&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis>genIUType<emphasis role="keyword">&gt;</emphasis>(1)));
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
74 &#32;&#32;&#32;&#32;};
75 
76 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_HAS_BITSCAN_WINDOWS</emphasis>
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findLSB&lt;genIUType,&#32;32&gt;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1compute__find_l_s_b_1a1c0ec72e2bcf35a3109e85cfc536400b">call</link>(genIUType&#32;Value)
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Result(0);
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;IsNotNull&#32;=&#32;_BitScanForward(&amp;Result,&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Value));
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsNotNull&#32;?&#32;int(Result)&#32;:&#32;-1;
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
87 
88 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;!((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32))</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findLSB&lt;genIUType,&#32;64&gt;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structglm_1_1detail_1_1compute__find_l_s_b_1a1c0ec72e2bcf35a3109e85cfc536400b">call</link>(genIUType&#32;Value)
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Result(0);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;IsNotNull&#32;=&#32;_BitScanForward64(&amp;Result,&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;__int64*<emphasis role="keyword">&gt;</emphasis>(&amp;Value));
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsNotNull&#32;?&#32;int(Result)&#32;:&#32;-1;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
99 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
100 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_HAS_BITSCAN_WINDOWS</emphasis>
101 
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;EXEC&#32;=&#32;true&gt;
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findMSB_step_vec
104 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec_1a66cee4db10c674b098f862b3c68c30df">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;T&#32;Shift)
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;|&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;&gt;&#32;Shift);
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
109 &#32;&#32;&#32;&#32;};
110 
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findMSB_step_vec&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
113 &#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec_3_01_l_00_01_t_00_01_q_00_01false_01_4_1a24cf1e86ec6834c2f2e8ee82c15fb2b6">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;T)
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
118 &#32;&#32;&#32;&#32;};
119 
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q,&#32;<emphasis role="keywordtype">int</emphasis>&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findMSB_vec
122 &#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, int, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec">compute_findMSB_step_vec</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&#32;&gt;=&#32;&#32;8&gt;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">::call</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;1));
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec">compute_findMSB_step_vec</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&#32;&gt;=&#32;&#32;8&gt;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">::call</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;2));
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec">compute_findMSB_step_vec</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&#32;&gt;=&#32;&#32;8&gt;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">::call</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;4));
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec">compute_findMSB_step_vec</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&#32;&gt;=&#32;16&gt;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">::call</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;8));
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec">compute_findMSB_step_vec</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&#32;&gt;=&#32;32&gt;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">::call</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(16));
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__step__vec">compute_findMSB_step_vec</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&#32;&gt;=&#32;64&gt;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">::call</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(32));
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, int, Q&gt;</link>(<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&#32;-&#32;1)&#32;-&#32;<link linkend="_namespaceglm_1a5e87ca2e2bc7f836767efecc0a1b0cdb">glm::bitCount</link>(~<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
134 &#32;&#32;&#32;&#32;};
135 
136 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_HAS_BITSCAN_WINDOWS</emphasis>
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;compute_findMSB_32(genIUType&#32;Value)
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Result(0);
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;IsNotNull&#32;=&#32;_BitScanReverse(&amp;Result,&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Value));
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsNotNull&#32;?&#32;int(Result)&#32;:&#32;-1;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
144 
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findMSB_vec&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;32&gt;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;vec&lt;L,&#32;int,&#32;Q&gt;&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">call</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor1&lt;vec,&#32;L,&#32;int,&#32;T,&#32;Q&gt;::call(compute_findMSB_32,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
153 
154 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;!((GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC)&#32;&amp;&amp;&#32;(GLM_MODEL&#32;==&#32;GLM_MODEL_32))</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;compute_findMSB_64(genIUType&#32;Value)
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;Result(0);
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;IsNotNull&#32;=&#32;_BitScanReverse64(&amp;Result,&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;__int64*<emphasis role="keyword">&gt;</emphasis>(&amp;Value));
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsNotNull&#32;?&#32;int(Result)&#32;:&#32;-1;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
162 
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_findMSB_vec&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;64&gt;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;vec&lt;L,&#32;int,&#32;Q&gt;&#32;<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec_1a25442d64e72a6854b705e62c5cb59bad">call</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor1&lt;vec,&#32;L,&#32;int,&#32;T,&#32;Q&gt;::call(compute_findMSB_64,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
171 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
172 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_HAS_BITSCAN_WINDOWS</emphasis>
173 }<emphasis role="comment">//namespace&#32;detail</emphasis>
174 
175 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uaddCarry</emphasis>
176 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<link linkend="_namespaceuadd_carry">uaddCarry</link>(<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;&amp;&#32;Carry)
177 &#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link>&#32;<emphasis role="keyword">const</emphasis>&#32;Value64(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>));
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link>&#32;<emphasis role="keyword">const</emphasis>&#32;Max32((<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(32))&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(1));
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Carry&#32;=&#32;Value64&#32;&gt;&#32;Max32&#32;?&#32;1u&#32;:&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link><emphasis role="keyword">&gt;</emphasis>(Value64&#32;%&#32;(Max32&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(1)));
182 &#32;&#32;&#32;&#32;}
183 
184 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;qualifier&#32;Q&gt;
185 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<link linkend="_namespaceuadd_carry">uaddCarry</link>(vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&amp;&#32;Carry)
186 &#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;detail::uint64,&#32;Q&gt;&#32;Value64(vec&lt;L,&#32;detail::uint64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;+&#32;vec&lt;L,&#32;detail::uint64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>));
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;detail::uint64,&#32;Q&gt;&#32;Max32((<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(32))&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(1));
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Carry&#32;=&#32;<link linkend="_group__core__func__common_1ga8e93f374aae27d1a88b921860351f8d4">mix</link>(vec&lt;L,&#32;uint,&#32;Q&gt;(0),&#32;vec&lt;L,&#32;uint,&#32;Q&gt;(1),&#32;<link linkend="_group__core__func__vector__relational_1ga9987ddebd3528e92f84e23d995320861">greaterThan</link>(Value64,&#32;Max32));
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vec&lt;L,&#32;uint,&#32;Q&gt;(Value64&#32;%&#32;(Max32&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(1)));
191 &#32;&#32;&#32;&#32;}
192 
193 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;usubBorrow</emphasis>
194 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<link linkend="_namespaceusub_borrow">usubBorrow</link>(<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;&amp;&#32;Borrow)
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Borrow&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;?&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link><emphasis role="keyword">&gt;</emphasis>(0)&#32;:&#32;static_cast&lt;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&gt;(1);
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link><emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(32))&#32;+&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)));
201 &#32;&#32;&#32;&#32;}
202 
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;qualifier&#32;Q&gt;
204 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<link linkend="_namespaceusub_borrow">usubBorrow</link>(vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&amp;&#32;Borrow)
205 &#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Borrow&#32;=&#32;<link linkend="_group__core__func__common_1ga8e93f374aae27d1a88b921860351f8d4">mix</link>(vec&lt;L,&#32;uint,&#32;Q&gt;(1),&#32;vec&lt;L,&#32;uint,&#32;Q&gt;(0),&#32;<link linkend="_group__core__func__vector__relational_1ga932c94a34799d65dfe36762158a58d90">greaterThanEqual</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>));
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;YgeX(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;XgeY(vec&lt;L,&#32;uint,&#32;Q&gt;((<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(32))&#32;+&#32;(vec&lt;L,&#32;detail::int64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)&#32;-&#32;vec&lt;L,&#32;detail::int64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>))));
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__core__func__common_1ga8e93f374aae27d1a88b921860351f8d4">mix</link>(XgeY,&#32;YgeX,&#32;<link linkend="_group__core__func__vector__relational_1ga932c94a34799d65dfe36762158a58d90">greaterThanEqual</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>));
210 &#32;&#32;&#32;&#32;}
211 
212 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;umulExtended</emphasis>
213 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceumul_extended">umulExtended</link>(<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;&amp;&#32;msb,&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;&amp;&#32;lsb)
214 &#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link>&#32;Value64&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>);
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msb&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link><emphasis role="keyword">&gt;</emphasis>(Value64&#32;&gt;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(32));
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lsb&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link><emphasis role="keyword">&gt;</emphasis>(Value64);
218 &#32;&#32;&#32;&#32;}
219 
220 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;qualifier&#32;Q&gt;
221 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceumul_extended">umulExtended</link>(vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&amp;&#32;msb,&#32;vec&lt;L,&#32;uint,&#32;Q&gt;&amp;&#32;lsb)
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;detail::uint64,&#32;Q&gt;&#32;Value64(vec&lt;L,&#32;detail::uint64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;*&#32;vec&lt;L,&#32;detail::uint64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>));
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msb&#32;=&#32;vec&lt;L,&#32;uint,&#32;Q&gt;(Value64&#32;&gt;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1ae110ab7b33b51165e9b99e03abe3947e">detail::uint64</link><emphasis role="keyword">&gt;</emphasis>(32));
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lsb&#32;=&#32;vec&lt;L,&#32;uint,&#32;Q&gt;(Value64);
226 &#32;&#32;&#32;&#32;}
227 
228 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;imulExtended</emphasis>
229 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceimul_extended">imulExtended</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;msb,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;lsb)
230 &#32;&#32;&#32;&#32;{
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link>&#32;Value64&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>);
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msb&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(Value64&#32;&gt;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(32));
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lsb&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(Value64);
234 &#32;&#32;&#32;&#32;}
235 
236 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;qualifier&#32;Q&gt;
237 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespaceimul_extended">imulExtended</link>(vec&lt;L,&#32;int,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;vec&lt;L,&#32;int,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;vec&lt;L,&#32;int,&#32;Q&gt;&amp;&#32;msb,&#32;vec&lt;L,&#32;int,&#32;Q&gt;&amp;&#32;lsb)
238 &#32;&#32;&#32;&#32;{
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;detail::int64,&#32;Q&gt;&#32;Value64(vec&lt;L,&#32;detail::int64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;*&#32;vec&lt;L,&#32;detail::int64,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>));
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lsb&#32;=&#32;vec&lt;L,&#32;int,&#32;Q&gt;(Value64&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(0xFFFFFFFF));
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msb&#32;=&#32;vec&lt;L,&#32;int,&#32;Q&gt;((Value64&#32;&gt;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(32))&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1_1detail_1a427e1ba144685539c0efb4c89e97a277">detail::int64</link><emphasis role="keyword">&gt;</emphasis>(0xFFFFFFFF));
242 &#32;&#32;&#32;&#32;}
243 
244 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bitfieldExtract</emphasis>
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
246 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genIUType&#32;<link linkend="_namespacebitfield_extract">bitfieldExtract</link>(genIUType&#32;Value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Offset,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Bits)
247 &#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacebitfield_extract">bitfieldExtract</link>(vec&lt;1,&#32;genIUType&gt;(Value),&#32;Offset,&#32;Bits).x;
249 &#32;&#32;&#32;&#32;}
250 
251 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
252 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespacebitfield_extract">bitfieldExtract</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Offset,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Bits)
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;bitfieldExtract&apos;&#32;only&#32;accept&#32;integer&#32;inputs&quot;</emphasis>);
255 
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Value&#32;&gt;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(Offset))&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespaceglm_1_1detail_1a048ad00e8777f9f3ebe185ed48857df0">detail::mask</link>(Bits));
257 &#32;&#32;&#32;&#32;}
258 
259 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bitfieldInsert</emphasis>
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
261 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genIUType&#32;<link linkend="_namespacebitfield_insert">bitfieldInsert</link>(genIUType&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Base,&#32;genIUType&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Insert,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Offset,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Bits)
262 &#32;&#32;&#32;&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;genIUType&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;bitfieldInsert&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacebitfield_insert">bitfieldInsert</link>(vec&lt;1,&#32;genIUType&gt;(Base),&#32;vec&lt;1,&#32;genIUType&gt;(Insert),&#32;Offset,&#32;Bits).x;
266 &#32;&#32;&#32;&#32;}
267 
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
269 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespacebitfield_insert">bitfieldInsert</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Base,&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Insert,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Offset,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Bits)
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;bitfieldInsert&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
272 
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;Mask&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespaceglm_1_1detail_1a048ad00e8777f9f3ebe185ed48857df0">detail::mask</link>(Bits)&#32;&lt;&lt;&#32;Offset);
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(Base&#32;&amp;&#32;~Mask)&#32;|&#32;((Insert&#32;&lt;&lt;&#32;static_cast&lt;T&gt;(Offset))&#32;&amp;&#32;Mask);
275 &#32;&#32;&#32;&#32;}
276 
277 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bitfieldReverse</emphasis>
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
279 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genIUType&#32;<link linkend="_namespacebitfield_reverse">bitfieldReverse</link>(genIUType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
280 &#32;&#32;&#32;&#32;{
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;genIUType&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;bitfieldReverse&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacebitfield_reverse">bitfieldReverse</link>(<link linkend="_structglm_1_1vec">glm::vec&lt;1, genIUType, glm::defaultp&gt;</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)).x;
284 &#32;&#32;&#32;&#32;}
285 
286 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
287 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespacebitfield_reverse">bitfieldReverse</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
288 &#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;bitfieldReverse&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
290 
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldReverseStep&lt;L,&#32;T,&#32;Q,&#32;detail::is_aligned&lt;Q&gt;::value,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;&#32;2&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0x5555555555555555ull),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;1));
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldReverseStep&lt;L,&#32;T,&#32;Q,&#32;detail::is_aligned&lt;Q&gt;::value,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;&#32;4&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0x3333333333333333ull),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;2));
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldReverseStep&lt;L,&#32;T,&#32;Q,&#32;detail::is_aligned&lt;Q&gt;::value,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;&#32;8&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0x0F0F0F0F0F0F0F0Full),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;4));
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldReverseStep&lt;L,&#32;T,&#32;Q,&#32;detail::is_aligned&lt;Q&gt;::value,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;16&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0x00FF00FF00FF00FFull),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(&#32;8));
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldReverseStep&lt;L,&#32;T,&#32;Q,&#32;detail::is_aligned&lt;Q&gt;::value,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;32&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0x0000FFFF0000FFFFull),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(16));
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldReverseStep&lt;L,&#32;T,&#32;Q,&#32;detail::is_aligned&lt;Q&gt;::value,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;64&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0x00000000FFFFFFFFull),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(32));
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>;
299 &#32;&#32;&#32;&#32;}
300 
301 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bitCount</emphasis>
302 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
303 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacebit_count">bitCount</link>(genIUType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
304 &#32;&#32;&#32;&#32;{
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;genIUType&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;bitCount&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacebit_count">bitCount</link>(<link linkend="_structglm_1_1vec">glm::vec&lt;1, genIUType, glm::defaultp&gt;</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)).x;
308 &#32;&#32;&#32;&#32;}
309 
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
311 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;int,&#32;Q&gt;&#32;<link linkend="_namespacebit_count">bitCount</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
312 &#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;bitCount&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
314 
315 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC</emphasis>
316 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(push)</emphasis>
317 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(disable&#32;:&#32;4310)&#32;</emphasis><emphasis role="comment">//cast&#32;truncates&#32;constant&#32;value</emphasis>
318 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
319 
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>vec&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q<emphasis role="keyword">&gt;</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*&gt;(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldBitCountStep&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q,&#32;<link linkend="_structglm_1_1detail_1_1is__aligned_1a50a4715cd385591476c2c7fe84d6c58c">detail::is_aligned&lt;Q&gt;::value</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;&#32;2&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(0x5555555555555555ull),&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(&#32;1));
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldBitCountStep&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q,&#32;<link linkend="_structglm_1_1detail_1_1is__aligned_1a50a4715cd385591476c2c7fe84d6c58c">detail::is_aligned&lt;Q&gt;::value</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;&#32;4&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(0x3333333333333333ull),&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(&#32;2));
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldBitCountStep&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q,&#32;<link linkend="_structglm_1_1detail_1_1is__aligned_1a50a4715cd385591476c2c7fe84d6c58c">detail::is_aligned&lt;Q&gt;::value</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;&#32;8&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(0x0F0F0F0F0F0F0F0Full),&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(&#32;4));
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldBitCountStep&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q,&#32;<link linkend="_structglm_1_1detail_1_1is__aligned_1a50a4715cd385591476c2c7fe84d6c58c">detail::is_aligned&lt;Q&gt;::value</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;16&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(0x00FF00FF00FF00FFull),&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(&#32;8));
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldBitCountStep&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q,&#32;<link linkend="_structglm_1_1detail_1_1is__aligned_1a50a4715cd385591476c2c7fe84d6c58c">detail::is_aligned&lt;Q&gt;::value</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;32&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(0x0000FFFF0000FFFFull),&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(16));
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;detail::compute_bitfieldBitCountStep&lt;L,&#32;typename&#32;detail::make_unsigned&lt;T&gt;::type,&#32;Q,&#32;<link linkend="_structglm_1_1detail_1_1is__aligned_1a50a4715cd385591476c2c7fe84d6c58c">detail::is_aligned&lt;Q&gt;::value</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;=&#32;64&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(0x00000000FFFFFFFFull),&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::make_unsigned&lt;T&gt;::type(32));
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vec&lt;L,&#32;int,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
328 
329 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_COMPILER&#32;&amp;&#32;GLM_COMPILER_VC</emphasis>
330 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;warning(pop)</emphasis>
331 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
332 &#32;&#32;&#32;&#32;}
333 
334 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;findLSB</emphasis>
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
336 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacefind_l_s_b">findLSB</link>(genIUType&#32;Value)
337 &#32;&#32;&#32;&#32;{
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;genIUType&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;findLSB&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
339 
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_findLSB&lt;genIUType,&#32;<emphasis role="keyword">sizeof</emphasis>(genIUType)&#32;*&#32;8&gt;::call(Value);
341 &#32;&#32;&#32;&#32;}
342 
343 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
344 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;int,&#32;Q&gt;&#32;<link linkend="_namespacefind_l_s_b">findLSB</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
345 &#32;&#32;&#32;&#32;{
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;findLSB&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
347 
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor1&lt;vec,&#32;L,&#32;int,&#32;T,&#32;Q&gt;::call(<link linkend="_namespacefind_l_s_b">findLSB</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
349 &#32;&#32;&#32;&#32;}
350 
351 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;findMSB</emphasis>
352 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
353 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacefind_m_s_b">findMSB</link>(genIUType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
354 &#32;&#32;&#32;&#32;{
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;genIUType&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;findMSB&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
356 
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacefind_m_s_b">findMSB</link>(vec&lt;1,&#32;genIUType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)).x;
358 &#32;&#32;&#32;&#32;}
359 
360 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
361 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;int,&#32;Q&gt;&#32;<link linkend="_namespacefind_m_s_b">findMSB</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
362 &#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_integer,&#32;<emphasis role="stringliteral">&quot;&apos;findMSB&apos;&#32;only&#32;accept&#32;integer&#32;values&quot;</emphasis>);
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_findMSB_vec&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
366 &#32;&#32;&#32;&#32;}
367 }<emphasis role="comment">//namespace&#32;glm</emphasis>
368 
369 <emphasis role="preprocessor">#if&#32;GLM_CONFIG_SIMD&#32;==&#32;GLM_ENABLE</emphasis>
370 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&quot;<link linkend="__old_2_classes_2lib_2glm_2glm_2detail_2func__integer__simd_8inl">func_integer_simd.inl</link>&quot;</emphasis>
371 <emphasis role="preprocessor">#endif</emphasis>
372 
</programlisting></section>
