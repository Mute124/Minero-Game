<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_toml_8hpp_source" xml:lang="en-US">
<title>toml.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/toml.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//----------------------------------------------------------------------------------------------------------------------</emphasis>
2 <emphasis role="comment">//</emphasis>
3 <emphasis role="comment">//&#32;toml++&#32;v3.3.0</emphasis>
4 <emphasis role="comment">//&#32;https://github.com/marzer/tomlplusplus</emphasis>
5 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
6 <emphasis role="comment">//</emphasis>
7 <emphasis role="comment">//----------------------------------------------------------------------------------------------------------------------</emphasis>
8 <emphasis role="comment">//</emphasis>
9 <emphasis role="comment">//&#32;-&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;THIS&#32;FILE&#32;WAS&#32;ASSEMBLED&#32;FROM&#32;MULTIPLE&#32;HEADER&#32;FILES&#32;BY&#32;A&#32;SCRIPT&#32;-&#32;PLEASE&#32;DON&apos;T&#32;EDIT&#32;IT&#32;DIRECTLY&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-</emphasis>
10 <emphasis role="comment">//</emphasis>
11 <emphasis role="comment">//&#32;If&#32;you&#32;wish&#32;to&#32;submit&#32;a&#32;contribution&#32;to&#32;toml++,&#32;hooray&#32;and&#32;thanks!&#32;Before&#32;you&#32;crack&#32;on,&#32;please&#32;be&#32;aware&#32;that&#32;this</emphasis>
12 <emphasis role="comment">//&#32;file&#32;was&#32;assembled&#32;from&#32;a&#32;number&#32;of&#32;smaller&#32;files&#32;by&#32;a&#32;python&#32;script,&#32;and&#32;code&#32;contributions&#32;should&#32;not&#32;be&#32;made</emphasis>
13 <emphasis role="comment">//&#32;against&#32;it&#32;directly.&#32;You&#32;should&#32;instead&#32;make&#32;your&#32;changes&#32;in&#32;the&#32;relevant&#32;source&#32;file(s).&#32;The&#32;file&#32;names&#32;of&#32;the&#32;files</emphasis>
14 <emphasis role="comment">//&#32;that&#32;contributed&#32;to&#32;this&#32;header&#32;can&#32;be&#32;found&#32;at&#32;the&#32;beginnings&#32;and&#32;ends&#32;of&#32;the&#32;corresponding&#32;sections&#32;of&#32;this&#32;file.</emphasis>
15 <emphasis role="comment">//</emphasis>
16 <emphasis role="comment">//----------------------------------------------------------------------------------------------------------------------</emphasis>
17 <emphasis role="comment">//</emphasis>
18 <emphasis role="comment">//&#32;TOML&#32;Language&#32;Specifications:</emphasis>
19 <emphasis role="comment">//&#32;latest:&#32;&#32;&#32;&#32;&#32;&#32;https://github.com/toml-lang/toml/blob/master/README.md</emphasis>
20 <emphasis role="comment">//&#32;v1.0.0:&#32;&#32;&#32;&#32;&#32;&#32;https://toml.io/en/v1.0.0</emphasis>
21 <emphasis role="comment">//&#32;v0.5.0:&#32;&#32;&#32;&#32;&#32;&#32;https://toml.io/en/v0.5.0</emphasis>
22 <emphasis role="comment">//&#32;changelog:&#32;&#32;&#32;https://github.com/toml-lang/toml/blob/master/CHANGELOG.md</emphasis>
23 <emphasis role="comment">//</emphasis>
24 <emphasis role="comment">//----------------------------------------------------------------------------------------------------------------------</emphasis>
25 <emphasis role="comment">//</emphasis>
26 <emphasis role="comment">//&#32;MIT&#32;License</emphasis>
27 <emphasis role="comment">//</emphasis>
28 <emphasis role="comment">//&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
29 <emphasis role="comment">//</emphasis>
30 <emphasis role="comment">//&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy&#32;of&#32;this&#32;software&#32;and&#32;associated</emphasis>
31 <emphasis role="comment">//&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the</emphasis>
32 <emphasis role="comment">//&#32;rights&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to</emphasis>
33 <emphasis role="comment">//&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
34 <emphasis role="comment">//</emphasis>
35 <emphasis role="comment">//&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the</emphasis>
36 <emphasis role="comment">//&#32;Software.</emphasis>
37 <emphasis role="comment">//</emphasis>
38 <emphasis role="comment">//&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE</emphasis>
39 <emphasis role="comment">//&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE&#32;AUTHORS&#32;OR</emphasis>
40 <emphasis role="comment">//&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR</emphasis>
41 <emphasis role="comment">//&#32;OTHERWISE,&#32;ARISING&#32;FROM,&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN&#32;THE&#32;SOFTWARE.</emphasis>
42 <emphasis role="comment">//</emphasis>
43 <emphasis role="comment">//----------------------------------------------------------------------------------------------------------------------</emphasis>
44 <emphasis role="preprocessor">#ifndef&#32;TOMLPLUSPLUS_H</emphasis>
45 <emphasis role="preprocessor">#define&#32;TOMLPLUSPLUS_H</emphasis>
46 
47 <emphasis role="preprocessor">#define&#32;INCLUDE_TOMLPLUSPLUS_H&#32;</emphasis><emphasis role="comment">//&#32;old&#32;guard&#32;name&#32;used&#32;pre-v3</emphasis>
48 
49 <emphasis role="comment">//********&#32;&#32;impl/preprocessor.h&#32;&#32;***************************************************************************************</emphasis>
50 
51 <emphasis role="preprocessor">#ifndef&#32;__cplusplus</emphasis>
52 <emphasis role="preprocessor">#error&#32;toml++&#32;is&#32;a&#32;C++&#32;library.</emphasis>
53 <emphasis role="preprocessor">#endif</emphasis>
54 <emphasis role="preprocessor">#ifdef&#32;_MSVC_LANG</emphasis>
55 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;_MSVC_LANG</emphasis>
56 <emphasis role="preprocessor">#else</emphasis>
57 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;__cplusplus</emphasis>
58 <emphasis role="preprocessor">#endif</emphasis>
59 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;202002L</emphasis>
60 <emphasis role="preprocessor">#undef&#32;TOML_CPP</emphasis>
61 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;20</emphasis>
62 <emphasis role="preprocessor">#elif&#32;TOML_CPP&#32;&gt;=&#32;201703L</emphasis>
63 <emphasis role="preprocessor">#undef&#32;TOML_CPP</emphasis>
64 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;17</emphasis>
65 <emphasis role="preprocessor">#else</emphasis>
66 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&lt;&#32;201103L</emphasis>
67 <emphasis role="preprocessor">#error&#32;toml++&#32;requires&#32;C++17&#32;or&#32;higher.&#32;For&#32;a&#32;pre-C++11&#32;TOML&#32;library&#32;see&#32;https:</emphasis><emphasis role="comment">//github.com/ToruNiina/Boost.toml</emphasis>
68 <emphasis role="preprocessor">#elif&#32;TOML_CPP&#32;&lt;&#32;201703L</emphasis>
69 <emphasis role="preprocessor">#error&#32;toml++&#32;requires&#32;C++17&#32;or&#32;higher.&#32;For&#32;a&#32;C++11&#32;TOML&#32;library&#32;see&#32;https:</emphasis><emphasis role="comment">//github.com/ToruNiina/toml11</emphasis>
70 <emphasis role="preprocessor">#endif</emphasis>
71 <emphasis role="preprocessor">#endif</emphasis>
72 
73 <emphasis role="preprocessor">#define&#32;TOML_MAKE_VERSION(major,&#32;minor,&#32;patch)&#32;(((major)*10000)&#32;+&#32;((minor)*100)&#32;+&#32;((patch)))</emphasis>
74 
75 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
76 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__clang_major__</emphasis>
77 <emphasis role="preprocessor">#define&#32;TOML_CLANG_VERSION&#32;TOML_MAKE_VERSION(__clang_major__,&#32;__clang_minor__,&#32;__clang_patchlevel__)</emphasis>
78 <emphasis role="preprocessor">#else</emphasis>
79 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;0</emphasis>
80 <emphasis role="preprocessor">#endif</emphasis>
81 <emphasis role="preprocessor">#ifdef&#32;__INTEL_COMPILER</emphasis>
82 <emphasis role="preprocessor">#define&#32;TOML_ICC&#32;__INTEL_COMPILER</emphasis>
83 <emphasis role="preprocessor">#ifdef&#32;__ICL</emphasis>
84 <emphasis role="preprocessor">#define&#32;TOML_ICC_CL&#32;TOML_ICC</emphasis>
85 <emphasis role="preprocessor">#else</emphasis>
86 <emphasis role="preprocessor">#define&#32;TOML_ICC_CL&#32;0</emphasis>
87 <emphasis role="preprocessor">#endif</emphasis>
88 <emphasis role="preprocessor">#else</emphasis>
89 <emphasis role="preprocessor">#define&#32;TOML_ICC&#32;&#32;&#32;&#32;0</emphasis>
90 <emphasis role="preprocessor">#define&#32;TOML_ICC_CL&#32;0</emphasis>
91 <emphasis role="preprocessor">#endif</emphasis>
92 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;!TOML_CLANG&#32;&amp;&amp;&#32;!TOML_ICC</emphasis>
93 <emphasis role="preprocessor">#define&#32;TOML_MSVC&#32;_MSC_VER</emphasis>
94 <emphasis role="preprocessor">#else</emphasis>
95 <emphasis role="preprocessor">#define&#32;TOML_MSVC&#32;0</emphasis>
96 <emphasis role="preprocessor">#endif</emphasis>
97 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!TOML_CLANG&#32;&amp;&amp;&#32;!TOML_ICC</emphasis>
98 <emphasis role="preprocessor">#define&#32;TOML_GCC&#32;__GNUC__</emphasis>
99 <emphasis role="preprocessor">#else</emphasis>
100 <emphasis role="preprocessor">#define&#32;TOML_GCC&#32;0</emphasis>
101 <emphasis role="preprocessor">#endif</emphasis>
102 <emphasis role="preprocessor">#if&#32;defined(WIN32)&#32;||&#32;defined(_WIN32)&#32;||&#32;defined(__WIN32__)&#32;||&#32;defined(__NT__)&#32;||&#32;defined(__CYGWIN__)</emphasis>
103 <emphasis role="preprocessor">#define&#32;TOML_WINDOWS&#32;1</emphasis>
104 <emphasis role="preprocessor">#else</emphasis>
105 <emphasis role="preprocessor">#define&#32;TOML_WINDOWS&#32;0</emphasis>
106 <emphasis role="preprocessor">#endif</emphasis>
107 <emphasis role="preprocessor">#if&#32;defined(DOXYGEN)&#32;||&#32;defined(__DOXYGEN__)&#32;||&#32;defined(__POXY__)&#32;||&#32;defined(__poxy__)</emphasis>
108 <emphasis role="preprocessor">#define&#32;TOML_DOXYGEN&#32;1</emphasis>
109 <emphasis role="preprocessor">#else</emphasis>
110 <emphasis role="preprocessor">#define&#32;TOML_DOXYGEN&#32;0</emphasis>
111 <emphasis role="preprocessor">#endif</emphasis>
112 <emphasis role="preprocessor">#ifdef&#32;__INTELLISENSE__</emphasis>
113 <emphasis role="preprocessor">#define&#32;TOML_INTELLISENSE&#32;1</emphasis>
114 <emphasis role="preprocessor">#else</emphasis>
115 <emphasis role="preprocessor">#define&#32;TOML_INTELLISENSE&#32;0</emphasis>
116 <emphasis role="preprocessor">#endif</emphasis>
117 
118 <emphasis role="comment">//&#32;special&#32;handling&#32;for&#32;apple&#32;clang;&#32;see:</emphasis>
119 <emphasis role="comment">//&#32;-&#32;https://github.com/marzer/tomlplusplus/issues/189</emphasis>
120 <emphasis role="comment">//&#32;-&#32;https://en.wikipedia.org/wiki/Xcode</emphasis>
121 <emphasis role="comment">//&#32;-&#32;https://stackoverflow.com/questions/19387043/how-can-i-reliably-detect-the-version-of-clang-at-preprocessing-time</emphasis>
122 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&amp;&amp;&#32;defined(__apple_build_version__)</emphasis>
123 <emphasis role="preprocessor">#undef&#32;TOML_CLANG</emphasis>
124 <emphasis role="preprocessor">#if&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(14,&#32;0,&#32;0)</emphasis>
125 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;14</emphasis>
126 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(13,&#32;1,&#32;6)</emphasis>
127 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;13</emphasis>
128 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(13,&#32;0,&#32;0)</emphasis>
129 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;12</emphasis>
130 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(12,&#32;0,&#32;5)</emphasis>
131 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;11</emphasis>
132 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(12,&#32;0,&#32;0)</emphasis>
133 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;10</emphasis>
134 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(11,&#32;0,&#32;3)</emphasis>
135 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;9</emphasis>
136 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(11,&#32;0,&#32;0)</emphasis>
137 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;8</emphasis>
138 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(10,&#32;0,&#32;1)</emphasis>
139 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;7</emphasis>
140 <emphasis role="preprocessor">#else</emphasis>
141 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;6&#32;</emphasis><emphasis role="comment">//&#32;not&#32;strictly&#32;correct&#32;but&#32;doesn&apos;t&#32;matter&#32;below&#32;this</emphasis>
142 <emphasis role="preprocessor">#endif</emphasis>
143 <emphasis role="preprocessor">#endif</emphasis>
144 
145 <emphasis role="comment">//&#32;IA64</emphasis>
146 <emphasis role="preprocessor">#if&#32;defined(__ia64__)&#32;||&#32;defined(__ia64)&#32;||&#32;defined(_IA64)&#32;||&#32;defined(__IA64__)&#32;||&#32;defined(_M_IA64)</emphasis>
147 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ITANIUM&#32;1</emphasis>
148 <emphasis role="preprocessor">#else</emphasis>
149 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ITANIUM&#32;0</emphasis>
150 <emphasis role="preprocessor">#endif</emphasis>
151 
152 <emphasis role="comment">//&#32;AMD64</emphasis>
153 <emphasis role="preprocessor">#if&#32;defined(__amd64__)&#32;||&#32;defined(__amd64)&#32;||&#32;defined(__x86_64__)&#32;||&#32;defined(__x86_64)&#32;||&#32;defined(_M_AMD64)</emphasis>
154 <emphasis role="preprocessor">#define&#32;TOML_ARCH_AMD64&#32;1</emphasis>
155 <emphasis role="preprocessor">#else</emphasis>
156 <emphasis role="preprocessor">#define&#32;TOML_ARCH_AMD64&#32;0</emphasis>
157 <emphasis role="preprocessor">#endif</emphasis>
158 
159 <emphasis role="comment">//&#32;32-bit&#32;x86</emphasis>
160 <emphasis role="preprocessor">#if&#32;defined(__i386__)&#32;||&#32;defined(_M_IX86)</emphasis>
161 <emphasis role="preprocessor">#define&#32;TOML_ARCH_X86&#32;1</emphasis>
162 <emphasis role="preprocessor">#else</emphasis>
163 <emphasis role="preprocessor">#define&#32;TOML_ARCH_X86&#32;0</emphasis>
164 <emphasis role="preprocessor">#endif</emphasis>
165 
166 <emphasis role="comment">//&#32;ARM</emphasis>
167 <emphasis role="preprocessor">#if&#32;defined(__aarch64__)&#32;||&#32;defined(__ARM_ARCH_ISA_A64)&#32;||&#32;defined(_M_ARM64)&#32;||&#32;defined(__ARM_64BIT_STATE)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;defined(_M_ARM64EC)</emphasis>
169 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM32&#32;0</emphasis>
170 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM64&#32;1</emphasis>
171 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM&#32;&#32;&#32;1</emphasis>
172 <emphasis role="preprocessor">#elif&#32;defined(__arm__)&#32;||&#32;defined(_M_ARM)&#32;||&#32;defined(__ARM_32BIT_STATE)</emphasis>
173 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM32&#32;1</emphasis>
174 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM64&#32;0</emphasis>
175 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM&#32;&#32;&#32;1</emphasis>
176 <emphasis role="preprocessor">#else</emphasis>
177 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM32&#32;0</emphasis>
178 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM64&#32;0</emphasis>
179 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM&#32;&#32;&#32;0</emphasis>
180 <emphasis role="preprocessor">#endif</emphasis>
181 
182 <emphasis role="comment">//&#32;TOML_HAS_INCLUDE</emphasis>
183 <emphasis role="preprocessor">#ifdef&#32;__has_include</emphasis>
184 <emphasis role="preprocessor">#define&#32;TOML_HAS_INCLUDE(header)&#32;__has_include(header)</emphasis>
185 <emphasis role="preprocessor">#else</emphasis>
186 <emphasis role="preprocessor">#define&#32;TOML_HAS_INCLUDE(header)&#32;0</emphasis>
187 <emphasis role="preprocessor">#endif</emphasis>
188 
189 <emphasis role="preprocessor">#ifdef&#32;__has_builtin</emphasis>
190 <emphasis role="preprocessor">#define&#32;TOML_HAS_BUILTIN(name)&#32;__has_builtin(name)</emphasis>
191 <emphasis role="preprocessor">#else</emphasis>
192 <emphasis role="preprocessor">#define&#32;TOML_HAS_BUILTIN(name)&#32;0</emphasis>
193 <emphasis role="preprocessor">#endif</emphasis>
194 
195 <emphasis role="comment">//&#32;TOML_HAS_FEATURE</emphasis>
196 <emphasis role="preprocessor">#ifdef&#32;__has_feature</emphasis>
197 <emphasis role="preprocessor">#define&#32;TOML_HAS_FEATURE(name)&#32;__has_feature(name)</emphasis>
198 <emphasis role="preprocessor">#else</emphasis>
199 <emphasis role="preprocessor">#define&#32;TOML_HAS_FEATURE(name)&#32;0</emphasis>
200 <emphasis role="preprocessor">#endif</emphasis>
201 
202 <emphasis role="comment">//&#32;TOML_HAS_ATTR</emphasis>
203 <emphasis role="preprocessor">#ifdef&#32;__has_attribute</emphasis>
204 <emphasis role="preprocessor">#define&#32;TOML_HAS_ATTR(attr)&#32;__has_attribute(attr)</emphasis>
205 <emphasis role="preprocessor">#else</emphasis>
206 <emphasis role="preprocessor">#define&#32;TOML_HAS_ATTR(attr)&#32;0</emphasis>
207 <emphasis role="preprocessor">#endif</emphasis>
208 
209 <emphasis role="comment">//&#32;TOML_HAS_CPP_ATTR</emphasis>
210 <emphasis role="preprocessor">#ifdef&#32;__has_cpp_attribute</emphasis>
211 <emphasis role="preprocessor">#define&#32;TOML_HAS_CPP_ATTR(attr)&#32;__has_cpp_attribute(attr)</emphasis>
212 <emphasis role="preprocessor">#else</emphasis>
213 <emphasis role="preprocessor">#define&#32;TOML_HAS_CPP_ATTR(attr)&#32;0</emphasis>
214 <emphasis role="preprocessor">#endif</emphasis>
215 
216 <emphasis role="comment">//&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
217 <emphasis role="preprocessor">#if&#32;defined(__EXCEPTIONS)&#32;||&#32;defined(_CPPUNWIND)&#32;||&#32;defined(__cpp_exceptions)</emphasis>
218 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;1</emphasis>
219 <emphasis role="preprocessor">#else</emphasis>
220 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;0</emphasis>
221 <emphasis role="preprocessor">#endif</emphasis>
222 
223 <emphasis role="comment">//&#32;TOML_COMPILER_HAS_RTTI</emphasis>
224 <emphasis role="preprocessor">#if&#32;defined(_CPPRTTI)&#32;||&#32;defined(__GXX_RTTI)&#32;||&#32;TOML_HAS_FEATURE(cxx_rtti)</emphasis>
225 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_RTTI&#32;1</emphasis>
226 <emphasis role="preprocessor">#else</emphasis>
227 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_RTTI&#32;0</emphasis>
228 <emphasis role="preprocessor">#endif</emphasis>
229 
230 <emphasis role="comment">//&#32;TOML_ATTR&#32;(gnu&#32;attributes)</emphasis>
231 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_GCC&#32;||&#32;defined(__GNUC__)</emphasis>
232 <emphasis role="preprocessor">#define&#32;TOML_ATTR(...)&#32;__attribute__((__VA_ARGS__))</emphasis>
233 <emphasis role="preprocessor">#else</emphasis>
234 <emphasis role="preprocessor">#define&#32;TOML_ATTR(...)</emphasis>
235 <emphasis role="preprocessor">#endif</emphasis>
236 
237 <emphasis role="comment">//&#32;TOML_DECLSPEC&#32;(msvc&#32;attributes)</emphasis>
238 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
239 <emphasis role="preprocessor">#define&#32;TOML_DECLSPEC(...)&#32;__declspec(__VA_ARGS__)</emphasis>
240 <emphasis role="preprocessor">#else</emphasis>
241 <emphasis role="preprocessor">#define&#32;TOML_DECLSPEC(...)</emphasis>
242 <emphasis role="preprocessor">#endif</emphasis>
243 
244 <emphasis role="comment">//&#32;TOML_CONCAT</emphasis>
245 <emphasis role="preprocessor">#define&#32;TOML_CONCAT_1(x,&#32;y)&#32;x##y</emphasis>
246 <emphasis role="preprocessor">#define&#32;TOML_CONCAT(x,&#32;y)&#32;&#32;&#32;TOML_CONCAT_1(x,&#32;y)</emphasis>
247 
248 <emphasis role="comment">//&#32;TOML_MAKE_STRING</emphasis>
249 <emphasis role="preprocessor">#define&#32;TOML_MAKE_STRING_1(s)&#32;#s</emphasis>
250 <emphasis role="preprocessor">#define&#32;TOML_MAKE_STRING(s)&#32;&#32;&#32;TOML_MAKE_STRING_1(s)</emphasis>
251 
252 <emphasis role="comment">//&#32;TOML_PRAGMA_XXXX&#32;(compiler-specific&#32;pragmas)</emphasis>
253 <emphasis role="preprocessor">#if&#32;TOML_CLANG</emphasis>
254 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG(decl)&#32;_Pragma(TOML_MAKE_STRING(clang&#32;decl))</emphasis>
255 <emphasis role="preprocessor">#else</emphasis>
256 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
257 <emphasis role="preprocessor">#endif</emphasis>
258 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&gt;=&#32;9</emphasis>
259 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_9(decl)&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
260 <emphasis role="preprocessor">#else</emphasis>
261 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_9(decl)</emphasis>
262 <emphasis role="preprocessor">#endif</emphasis>
263 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&gt;=&#32;10</emphasis>
264 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_10(decl)&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
265 <emphasis role="preprocessor">#else</emphasis>
266 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_10(decl)</emphasis>
267 <emphasis role="preprocessor">#endif</emphasis>
268 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&gt;=&#32;11</emphasis>
269 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_11(decl)&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
270 <emphasis role="preprocessor">#else</emphasis>
271 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_11(decl)</emphasis>
272 <emphasis role="preprocessor">#endif</emphasis>
273 <emphasis role="preprocessor">#if&#32;TOML_GCC</emphasis>
274 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_GCC(decl)&#32;_Pragma(TOML_MAKE_STRING(GCC&#32;decl))</emphasis>
275 <emphasis role="preprocessor">#else</emphasis>
276 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_GCC(decl)</emphasis>
277 <emphasis role="preprocessor">#endif</emphasis>
278 <emphasis role="preprocessor">#if&#32;TOML_MSVC</emphasis>
279 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_MSVC(...)&#32;__pragma(__VA_ARGS__)</emphasis>
280 <emphasis role="preprocessor">#else</emphasis>
281 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_MSVC(...)</emphasis>
282 <emphasis role="preprocessor">#endif</emphasis>
283 <emphasis role="preprocessor">#if&#32;TOML_ICC</emphasis>
284 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_ICC(...)&#32;__pragma(__VA_ARGS__)</emphasis>
285 <emphasis role="preprocessor">#else</emphasis>
286 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_ICC(...)</emphasis>
287 <emphasis role="preprocessor">#endif</emphasis>
288 
289 <emphasis role="comment">//&#32;TOML_ALWAYS_INLINE</emphasis>
290 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
291 <emphasis role="preprocessor">#define&#32;TOML_ALWAYS_INLINE&#32;__forceinline</emphasis>
292 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(__always_inline__)</emphasis>
293 <emphasis role="preprocessor">#define&#32;TOML_ALWAYS_INLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
294 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_ATTR(__always_inline__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
295 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline</emphasis>
296 <emphasis role="preprocessor">#else</emphasis>
297 <emphasis role="preprocessor">#define&#32;TOML_ALWAYS_INLINE&#32;inline</emphasis>
298 <emphasis role="preprocessor">#endif</emphasis>
299 
300 <emphasis role="comment">//&#32;TOML_NEVER_INLINE</emphasis>
301 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
302 <emphasis role="preprocessor">#define&#32;TOML_NEVER_INLINE&#32;TOML_DECLSPEC(noinline)</emphasis>
303 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(__noinline__)</emphasis>
304 <emphasis role="preprocessor">#define&#32;TOML_NEVER_INLINE&#32;TOML_ATTR(__noinline__)</emphasis>
305 <emphasis role="preprocessor">#else</emphasis>
306 <emphasis role="preprocessor">#define&#32;TOML_NEVER_INLINE</emphasis>
307 <emphasis role="preprocessor">#endif</emphasis>
308 
309 <emphasis role="comment">//&#32;MSVC&#32;attributes</emphasis>
310 <emphasis role="preprocessor">#define&#32;TOML_ABSTRACT_INTERFACE&#32;TOML_DECLSPEC(novtable)</emphasis>
311 <emphasis role="preprocessor">#define&#32;TOML_EMPTY_BASES&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_DECLSPEC(empty_bases)</emphasis>
312 
313 <emphasis role="comment">//&#32;TOML_TRIVIAL_ABI</emphasis>
314 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(__trivial_abi__)</emphasis>
315 <emphasis role="preprocessor">#define&#32;TOML_TRIVIAL_ABI&#32;TOML_ATTR(__trivial_abi__)</emphasis>
316 <emphasis role="preprocessor">#else</emphasis>
317 <emphasis role="preprocessor">#define&#32;TOML_TRIVIAL_ABI</emphasis>
318 <emphasis role="preprocessor">#endif</emphasis>
319 
320 <emphasis role="comment">//&#32;TOML_NODISCARD</emphasis>
321 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;17&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(nodiscard)&#32;&gt;=&#32;201603</emphasis>
322 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD&#32;[[nodiscard]]</emphasis>
323 <emphasis role="preprocessor">#elif&#32;TOML_CLANG&#32;||&#32;TOML_GCC&#32;||&#32;TOML_HAS_ATTR(__warn_unused_result__)</emphasis>
324 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD&#32;TOML_ATTR(__warn_unused_result__)</emphasis>
325 <emphasis role="preprocessor">#else</emphasis>
326 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD</emphasis>
327 <emphasis role="preprocessor">#endif</emphasis>
328 
329 <emphasis role="comment">//&#32;TOML_NODISCARD_CTOR</emphasis>
330 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;17&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(nodiscard)&#32;&gt;=&#32;201907</emphasis>
331 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD_CTOR&#32;[[nodiscard]]</emphasis>
332 <emphasis role="preprocessor">#else</emphasis>
333 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD_CTOR</emphasis>
334 <emphasis role="preprocessor">#endif</emphasis>
335 
336 <emphasis role="comment">//&#32;pure&#32;+&#32;const</emphasis>
337 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
338 <emphasis role="preprocessor">#ifdef&#32;NDEBUG</emphasis>
339 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_DECLSPEC(noalias)&#32;&#32;TOML_ATTR(__pure__)</emphasis>
340 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_DECLSPEC(noalias)&#32;&#32;TOML_ATTR(__const__)</emphasis>
341 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_PURE</emphasis>
342 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_CONST</emphasis>
343 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_INLINE_GETTER&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE&#32;&#32;TOML_PURE</emphasis>
344 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_INLINE_GETTER&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE&#32;&#32;TOML_CONST</emphasis>
345 <emphasis role="preprocessor">#else</emphasis>
346 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE</emphasis>
347 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST</emphasis>
348 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD</emphasis>
349 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD</emphasis>
350 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_INLINE_GETTER&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE</emphasis>
351 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_INLINE_GETTER&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE</emphasis>
352 <emphasis role="preprocessor">#endif</emphasis>
353 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
354 
355 <emphasis role="comment">//&#32;TOML_ASSUME</emphasis>
356 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
357 <emphasis role="preprocessor">#define&#32;TOML_ASSUME(...)&#32;__assume(__VA_ARGS__)</emphasis>
358 <emphasis role="preprocessor">#elif&#32;TOML_ICC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_BUILTIN(__builtin_assume)</emphasis>
359 <emphasis role="preprocessor">#define&#32;TOML_ASSUME(...)&#32;__builtin_assume(__VA_ARGS__)</emphasis>
360 <emphasis role="preprocessor">#else</emphasis>
361 <emphasis role="preprocessor">#define&#32;TOML_ASSUME(...)&#32;static_assert(true)</emphasis>
362 <emphasis role="preprocessor">#endif</emphasis>
363 
364 <emphasis role="comment">//&#32;TOML_UNREACHABLE</emphasis>
365 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
366 <emphasis role="preprocessor">#define&#32;TOML_UNREACHABLE&#32;__assume(0)</emphasis>
367 <emphasis role="preprocessor">#elif&#32;TOML_ICC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_GCC&#32;||&#32;TOML_HAS_BUILTIN(__builtin_unreachable)</emphasis>
368 <emphasis role="preprocessor">#define&#32;TOML_UNREACHABLE&#32;__builtin_unreachable()</emphasis>
369 <emphasis role="preprocessor">#else</emphasis>
370 <emphasis role="preprocessor">#define&#32;TOML_UNREACHABLE&#32;static_assert(true)</emphasis>
371 <emphasis role="preprocessor">#endif</emphasis>
372 
373 <emphasis role="comment">//&#32;TOML_LIKELY</emphasis>
374 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;20&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(likely)&#32;&gt;=&#32;201803</emphasis>
375 <emphasis role="preprocessor">#define&#32;TOML_LIKELY(...)&#32;(__VA_ARGS__)&#32;[[likely]]</emphasis>
376 <emphasis role="preprocessor">#define&#32;TOML_LIKELY_CASE&#32;[[likely]]</emphasis>
377 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_BUILTIN(__builtin_expect)</emphasis>
378 <emphasis role="preprocessor">#define&#32;TOML_LIKELY(...)&#32;(__builtin_expect(!!(__VA_ARGS__),&#32;1))</emphasis>
379 <emphasis role="preprocessor">#else</emphasis>
380 <emphasis role="preprocessor">#define&#32;TOML_LIKELY(...)&#32;(__VA_ARGS__)</emphasis>
381 <emphasis role="preprocessor">#endif</emphasis>
382 <emphasis role="preprocessor">#ifndef&#32;TOML_LIKELY_CASE</emphasis>
383 <emphasis role="preprocessor">#define&#32;TOML_LIKELY_CASE</emphasis>
384 <emphasis role="preprocessor">#endif</emphasis>
385 
386 <emphasis role="comment">//&#32;TOML_UNLIKELY</emphasis>
387 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;20&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(unlikely)&#32;&gt;=&#32;201803</emphasis>
388 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY(...)&#32;(__VA_ARGS__)&#32;[[unlikely]]</emphasis>
389 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY_CASE&#32;[[unlikely]]</emphasis>
390 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_BUILTIN(__builtin_expect)</emphasis>
391 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY(...)&#32;(__builtin_expect(!!(__VA_ARGS__),&#32;0))</emphasis>
392 <emphasis role="preprocessor">#else</emphasis>
393 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY(...)&#32;(__VA_ARGS__)</emphasis>
394 <emphasis role="preprocessor">#endif</emphasis>
395 <emphasis role="preprocessor">#ifndef&#32;TOML_UNLIKELY_CASE</emphasis>
396 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY_CASE</emphasis>
397 <emphasis role="preprocessor">#endif</emphasis>
398 
399 <emphasis role="comment">//&#32;TOML_FLAGS_ENUM</emphasis>
400 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(flag_enum)</emphasis>
401 <emphasis role="preprocessor">#define&#32;TOML_FLAGS_ENUM&#32;__attribute__((flag_enum))</emphasis>
402 <emphasis role="preprocessor">#else</emphasis>
403 <emphasis role="preprocessor">#define&#32;TOML_FLAGS_ENUM</emphasis>
404 <emphasis role="preprocessor">#endif</emphasis>
405 
406 <emphasis role="comment">//&#32;TOML_OPEN_ENUM&#32;+&#32;TOML_CLOSED_ENUM</emphasis>
407 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(enum_extensibility)</emphasis>
408 <emphasis role="preprocessor">#define&#32;TOML_OPEN_ENUM&#32;&#32;&#32;__attribute__((enum_extensibility(open)))</emphasis>
409 <emphasis role="preprocessor">#define&#32;TOML_CLOSED_ENUM&#32;__attribute__((enum_extensibility(closed)))</emphasis>
410 <emphasis role="preprocessor">#else</emphasis>
411 <emphasis role="preprocessor">#define&#32;TOML_OPEN_ENUM</emphasis>
412 <emphasis role="preprocessor">#define&#32;TOML_CLOSED_ENUM</emphasis>
413 <emphasis role="preprocessor">#endif</emphasis>
414 
415 <emphasis role="comment">//&#32;TOML_OPEN_FLAGS_ENUM&#32;+&#32;TOML_CLOSED_FLAGS_ENUM</emphasis>
416 <emphasis role="preprocessor">#define&#32;TOML_OPEN_FLAGS_ENUM&#32;&#32;&#32;TOML_OPEN_ENUM&#32;TOML_FLAGS_ENUM</emphasis>
417 <emphasis role="preprocessor">#define&#32;TOML_CLOSED_FLAGS_ENUM&#32;TOML_CLOSED_ENUM&#32;TOML_FLAGS_ENUM</emphasis>
418 
419 <emphasis role="comment">//&#32;TOML_MAKE_FLAGS</emphasis>
420 <emphasis role="preprocessor">#define&#32;TOML_MAKE_FLAGS_2(T,&#32;op,&#32;linkage)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
421 <emphasis role="preprocessoremphasis>
422 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;T&#32;operator&#32;op(T&#32;lhs,&#32;T&#32;rhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
423 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
424 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;under&#32;=&#32;std::underlying_type_t&lt;T&gt;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
425 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;static_cast&lt;T&gt;(static_cast&lt;under&gt;(lhs)&#32;op&#32;static_cast&lt;under&gt;(rhs));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
426 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
427 <emphasis role="preprocessoremphasis>
428 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;T&amp;&#32;operator&#32;TOML_CONCAT(op,&#32;=)(T&#32;&amp;&#32;lhs,&#32;T&#32;rhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
429 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
430 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;lhs&#32;=&#32;(lhs&#32;op&#32;rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
431 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
432 <emphasis role="preprocessoremphasis>
433 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
434 <emphasis role="preprocessor">#define&#32;TOML_MAKE_FLAGS_1(T,&#32;linkage)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
435 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(std::is_enum_v&lt;T&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
436 <emphasis role="preprocessoremphasis>
437 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_MAKE_FLAGS_2(T,&#32;&amp;,&#32;linkage);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
438 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_MAKE_FLAGS_2(T,&#32;|,&#32;linkage);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
439 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_MAKE_FLAGS_2(T,&#32;^,&#32;linkage);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
440 <emphasis role="preprocessoremphasis>
441 <emphasis role="preprocessoremphasis>
442 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;T&#32;operator~(T&#32;val)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
443 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
444 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;under&#32;=&#32;std::underlying_type_t&lt;T&gt;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
445 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;static_cast&lt;T&gt;(~static_cast&lt;under&gt;(val));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
446 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
447 <emphasis role="preprocessoremphasis>
448 <emphasis role="preprocessoremphasis>
449 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;bool&#32;operator!(T&#32;val)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
450 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
451 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;under&#32;=&#32;std::underlying_type_t&lt;T&gt;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
452 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;!static_cast&lt;under&gt;(val);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
453 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
454 <emphasis role="preprocessoremphasis>
455 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
456 <emphasis role="preprocessor">#define&#32;TOML_MAKE_FLAGS(T)&#32;TOML_MAKE_FLAGS_1(T,&#32;)</emphasis>
457 
458 <emphasis role="preprocessor">#define&#32;TOML_UNUSED(...)&#32;static_cast&lt;void&gt;(__VA_ARGS__)</emphasis>
459 
460 <emphasis role="preprocessor">#define&#32;TOML_DELETE_DEFAULTS(T)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
461 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T(const&#32;T&amp;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;delete;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
462 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T(T&amp;&amp;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;delete;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
463 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T&amp;&#32;operator=(const&#32;T&amp;)&#32;=&#32;delete;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
464 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T&amp;&#32;operator=(T&amp;&amp;)&#32;&#32;&#32;&#32;&#32;&#32;=&#32;delete</emphasis>
465 
466 <emphasis role="preprocessor">#define&#32;TOML_ASYMMETRICAL_EQUALITY_OPS(LHS,&#32;RHS,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
467 <emphasis role="preprocessoremphasis>
468 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;bool&#32;operator==(RHS&#32;rhs,&#32;LHS&#32;lhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
469 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
470 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;lhs&#32;==&#32;rhs;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
471 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
472 <emphasis role="preprocessoremphasis>
473 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;bool&#32;operator!=(LHS&#32;lhs,&#32;RHS&#32;rhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
474 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
475 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;!(lhs&#32;==&#32;rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
476 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
477 <emphasis role="preprocessoremphasis>
478 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;bool&#32;operator!=(RHS&#32;rhs,&#32;LHS&#32;lhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
479 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
480 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;!(lhs&#32;==&#32;rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
481 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
482 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
483 
484 <emphasis role="preprocessor">#define&#32;TOML_EVAL_BOOL_1(T,&#32;F)&#32;T</emphasis>
485 <emphasis role="preprocessor">#define&#32;TOML_EVAL_BOOL_0(T,&#32;F)&#32;F</emphasis>
486 
487 <emphasis role="preprocessor">#if&#32;!defined(__POXY__)&#32;&amp;&amp;&#32;!defined(POXY_IMPLEMENTATION_DETAIL)</emphasis>
488 <emphasis role="preprocessor">#define&#32;POXY_IMPLEMENTATION_DETAIL(...)&#32;__VA_ARGS__</emphasis>
489 <emphasis role="preprocessor">#endif</emphasis>
490 
491 <emphasis role="comment">//&#32;COMPILER-SPECIFIC&#32;WARNING&#32;MANAGEMENT</emphasis>
492 
493 <emphasis role="preprocessor">#if&#32;TOML_CLANG</emphasis>
494 
495 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
496 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
497 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wunknown-warning-option&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
498 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
499 
500 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
501 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wswitch&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
502 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
503 
504 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
505 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wfloat-equal&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
506 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wdouble-promotion&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
507 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
508 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wshift-sign-overflow&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
509 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
510 
511 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
512 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG_GE_9(diagnostic&#32;ignored&#32;&quot;-Wctad-maybe-unsupported&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
513 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG_GE_10(diagnostic&#32;ignored&#32;&quot;-Wzero-as-null-pointer-constant&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
514 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG_GE_11(diagnostic&#32;ignored&#32;&quot;-Wsuggest-destructor-override&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
515 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wweak-vtables&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
516 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wweak-template-vtables&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
517 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wdouble-promotion&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
518 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
519 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wmissing-field-initializers&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
520 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
521 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
522 
523 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
524 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
525 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
526 
527 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
528 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
529 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Weverything&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
530 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true,&#32;&quot;&quot;)</emphasis>
531 
532 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
533 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
534 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
535 
536 <emphasis role="preprocessor">#define&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES&#32;1</emphasis>
537 
538 <emphasis role="preprocessor">#elif&#32;TOML_MSVC</emphasis>
539 
540 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
541 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
542 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
543 
544 <emphasis role="preprocessor">#if&#32;TOML_HAS_INCLUDE(&lt;CodeAnalysis/Warnings.h&gt;)</emphasis>
545 <emphasis role="preprocessor">#pragma&#32;warning(push,&#32;0)</emphasis>
546 <emphasis role="preprocessor">#include&#32;&lt;CodeAnalysis/Warnings.h&gt;</emphasis>
547 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
548 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
549 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;ALL_CODE_ANALYSIS_WARNINGS))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
550 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
551 <emphasis role="preprocessor">#else</emphasis>
552 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS&#32;static_assert(true)</emphasis>
553 <emphasis role="preprocessor">#endif</emphasis>
554 
555 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
556 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4061))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4062))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
558 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4063))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5262))&#32;&#32;</emphasis><emphasis role="comment">/*&#32;switch-case&#32;implicit&#32;fallthrough&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
560 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26819))&#32;</emphasis><emphasis role="comment">/*&#32;cg:&#32;unannotated&#32;fallthrough&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
561 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
562 
563 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
564 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4127))&#32;</emphasis><emphasis role="comment">/*&#32;conditional&#32;expr&#32;is&#32;constant&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
565 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4324))&#32;</emphasis><emphasis role="comment">/*&#32;structure&#32;was&#32;padded&#32;due&#32;to&#32;alignment&#32;specifier&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
566 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4348))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
567 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4464))&#32;</emphasis><emphasis role="comment">/*&#32;relative&#32;include&#32;path&#32;contains&#32;&apos;..&apos;&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4505))&#32;</emphasis><emphasis role="comment">/*&#32;unreferenced&#32;local&#32;function&#32;removed&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
569 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4514))&#32;</emphasis><emphasis role="comment">/*&#32;unreferenced&#32;inline&#32;function&#32;has&#32;been&#32;removed&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
570 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4582))&#32;</emphasis><emphasis role="comment">/*&#32;constructor&#32;is&#32;not&#32;implicitly&#32;called&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
571 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4619))&#32;</emphasis><emphasis role="comment">/*&#32;&#32;there&#32;is&#32;no&#32;warning&#32;number&#32;&apos;XXXX&apos;&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4623))&#32;</emphasis><emphasis role="comment">/*&#32;default&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
573 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4625))&#32;</emphasis><emphasis role="comment">/*&#32;copy&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
574 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4626))&#32;</emphasis><emphasis role="comment">/*&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
575 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4710))&#32;</emphasis><emphasis role="comment">/*&#32;function&#32;not&#32;inlined&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
576 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4711))&#32;</emphasis><emphasis role="comment">/*&#32;function&#32;selected&#32;for&#32;automatic&#32;expansion&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
577 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4820))&#32;</emphasis><emphasis role="comment">/*&#32;N&#32;bytes&#32;padding&#32;added&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
578 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4946))&#32;</emphasis><emphasis role="comment">/*&#32;reinterpret_cast&#32;used&#32;between&#32;related&#32;classes&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
579 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5026))&#32;</emphasis><emphasis role="comment">/*&#32;move&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
580 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5027))&#32;</emphasis><emphasis role="comment">/*&#32;move&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
581 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5039))&#32;</emphasis><emphasis role="comment">/*&#32;potentially&#32;throwing&#32;function&#32;passed&#32;to&#32;&apos;extern&#32;&quot;C&quot;&apos;&#32;function&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
582 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5045))&#32;</emphasis><emphasis role="comment">/*&#32;Compiler&#32;will&#32;insert&#32;Spectre&#32;mitigation&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
583 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5264))&#32;</emphasis><emphasis role="comment">/*&#32;const&#32;variable&#32;is&#32;not&#32;used&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
584 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26451))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
585 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26490))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
586 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26495))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
587 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26812))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
588 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26819))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
589 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
590 
591 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
592 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4365))&#32;</emphasis><emphasis role="comment">/*&#32;argument&#32;signed/unsigned&#32;mismatch&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
593 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4738))&#32;</emphasis><emphasis role="comment">/*&#32;storing&#32;32-bit&#32;float&#32;result&#32;in&#32;memory&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
594 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5219))&#32;</emphasis><emphasis role="comment">/*&#32;implicit&#32;conversion&#32;from&#32;integral&#32;to&#32;float&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
595 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
596 
597 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
598 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(pop))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
599 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
600 
601 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
602 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push,&#32;0))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
603 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4348))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
604 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4668))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
605 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5105))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
606 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5264))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
607 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
608 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SWITCH_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
609 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SPAM_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
610 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_ARITHMETIC_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
611 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
612 
613 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;TOML_POP_WARNINGS</emphasis>
614 
615 <emphasis role="preprocessor">#elif&#32;TOML_ICC</emphasis>
616 
617 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
618 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
619 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
620 
621 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
622 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;82))&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;storage&#32;class&#32;is&#32;not&#32;first&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
623 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;111))&#32;&#32;</emphasis><emphasis role="comment">/*&#32;statement&#32;unreachable&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
624 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;869))&#32;&#32;</emphasis><emphasis role="comment">/*&#32;unreferenced&#32;parameter&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
625 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;1011))&#32;</emphasis><emphasis role="comment">/*&#32;missing&#32;return&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
626 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;2261))&#32;</emphasis><emphasis role="comment">/*&#32;assume&#32;expr&#32;side-effects&#32;discarded&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
627 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
628 
629 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
630 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(pop))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
631 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
632 
633 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
634 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push,&#32;0))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
635 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SPAM_WARNINGS</emphasis>
636 
637 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
638 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(pop))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
639 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
640 
641 <emphasis role="preprocessor">#elif&#32;TOML_GCC</emphasis>
642 
643 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
644 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
645 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
646 
647 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
648 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wswitch&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
649 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wswitch-enum&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
650 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wswitch-default&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
651 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
652 
653 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
654 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wfloat-equal&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
655 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsign-conversion&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
656 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
657 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
658 
659 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
660 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsuggest-attribute=const&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
661 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsuggest-attribute=pure&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
662 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
663 
664 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
665 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
666 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wcast-align&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
667 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wcomment&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
668 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wtype-limits&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
669 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wuseless-cast&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
670 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
671 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsubobject-linkage&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
672 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wmissing-field-initializers&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
673 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wmaybe-uninitialized&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
674 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wnoexcept&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
675 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wnull-dereference&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
676 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wduplicated-branches&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
677 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
678 
679 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
680 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
681 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
682 
683 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
684 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
685 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wall&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
686 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wextra&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
687 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wpedantic&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
688 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SWITCH_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
689 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_ARITHMETIC_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
690 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
691 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SPAM_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
692 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
693 
694 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
695 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
696 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
697 
698 <emphasis role="preprocessor">#endif</emphasis>
699 
700 <emphasis role="preprocessor">#ifndef&#32;TOML_PUSH_WARNINGS</emphasis>
701 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;static_assert(true)</emphasis>
702 <emphasis role="preprocessor">#endif</emphasis>
703 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS</emphasis>
704 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS&#32;static_assert(true)</emphasis>
705 <emphasis role="preprocessor">#endif</emphasis>
706 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_SWITCH_WARNINGS</emphasis>
707 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;static_assert(true)</emphasis>
708 <emphasis role="preprocessor">#endif</emphasis>
709 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS</emphasis>
710 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS&#32;static_assert(true)</emphasis>
711 <emphasis role="preprocessor">#endif</emphasis>
712 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_SPAM_WARNINGS</emphasis>
713 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;static_assert(true)</emphasis>
714 <emphasis role="preprocessor">#endif</emphasis>
715 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_ARITHMETIC_WARNINGS</emphasis>
716 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;static_assert(true)</emphasis>
717 <emphasis role="preprocessor">#endif</emphasis>
718 <emphasis role="preprocessor">#ifndef&#32;TOML_POP_WARNINGS</emphasis>
719 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;static_assert(true)</emphasis>
720 <emphasis role="preprocessor">#endif</emphasis>
721 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_WARNINGS</emphasis>
722 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;static_assert(true)</emphasis>
723 <emphasis role="preprocessor">#endif</emphasis>
724 <emphasis role="preprocessor">#ifndef&#32;TOML_ENABLE_WARNINGS</emphasis>
725 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;static_assert(true)</emphasis>
726 <emphasis role="preprocessor">#endif</emphasis>
727 <emphasis role="preprocessor">#ifndef&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES</emphasis>
728 <emphasis role="preprocessor">#define&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES&#32;0</emphasis>
729 <emphasis role="preprocessor">#endif</emphasis>
730 
731 <emphasis role="preprocessor">#ifdef&#32;TOML_CONFIG_HEADER</emphasis>
732 <emphasis role="preprocessor">#include&#32;TOML_CONFIG_HEADER</emphasis>
733 <emphasis role="preprocessor">#endif</emphasis>
734 
735 <emphasis role="comment">//&#32;is&#32;the&#32;library&#32;being&#32;built&#32;as&#32;a&#32;shared&#32;lib/dll&#32;using&#32;meson&#32;and&#32;friends?</emphasis>
736 <emphasis role="preprocessor">#ifndef&#32;TOML_SHARED_LIB</emphasis>
737 <emphasis role="preprocessor">#define&#32;TOML_SHARED_LIB&#32;0</emphasis>
738 <emphasis role="preprocessor">#endif</emphasis>
739 
740 <emphasis role="comment">//&#32;header-only&#32;mode</emphasis>
741 <emphasis role="preprocessor">#if&#32;!defined(TOML_HEADER_ONLY)&#32;&amp;&amp;&#32;defined(TOML_ALL_INLINE)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_ALL_INLINE&#32;pre-2.0</emphasis>
742 <emphasis role="preprocessor">#define&#32;TOML_HEADER_ONLY&#32;TOML_ALL_INLINE</emphasis>
743 <emphasis role="preprocessor">#endif</emphasis>
744 <emphasis role="preprocessor">#if&#32;!defined(TOML_HEADER_ONLY)&#32;||&#32;(defined(TOML_HEADER_ONLY)&#32;&amp;&amp;&#32;TOML_HEADER_ONLY)&#32;||&#32;TOML_INTELLISENSE</emphasis>
745 <emphasis role="preprocessor">#undef&#32;TOML_HEADER_ONLY</emphasis>
746 <emphasis role="preprocessor">#define&#32;TOML_HEADER_ONLY&#32;1</emphasis>
747 <emphasis role="preprocessor">#endif</emphasis>
748 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;TOML_SHARED_LIB</emphasis>
749 <emphasis role="preprocessor">#undef&#32;TOML_HEADER_ONLY</emphasis>
750 <emphasis role="preprocessor">#define&#32;TOML_HEADER_ONLY&#32;0</emphasis>
751 <emphasis role="preprocessor">#endif</emphasis>
752 
753 <emphasis role="comment">//&#32;internal&#32;implementation&#32;switch</emphasis>
754 <emphasis role="preprocessor">#if&#32;defined(TOML_IMPLEMENTATION)&#32;||&#32;TOML_HEADER_ONLY</emphasis>
755 <emphasis role="preprocessor">#undef&#32;TOML_IMPLEMENTATION</emphasis>
756 <emphasis role="preprocessor">#define&#32;TOML_IMPLEMENTATION&#32;1</emphasis>
757 <emphasis role="preprocessor">#else</emphasis>
758 <emphasis role="preprocessor">#define&#32;TOML_IMPLEMENTATION&#32;0</emphasis>
759 <emphasis role="preprocessor">#endif</emphasis>
760 
761 <emphasis role="comment">//&#32;dll/shared&#32;lib&#32;function&#32;exports&#32;(legacy&#32;-&#32;TOML_API&#32;was&#32;the&#32;old&#32;name&#32;for&#32;this&#32;setting)</emphasis>
762 <emphasis role="preprocessor">#if&#32;!defined(TOML_EXPORTED_MEMBER_FUNCTION)&#32;&amp;&amp;&#32;!defined(TOML_EXPORTED_STATIC_FUNCTION)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
763 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(TOML_EXPORTED_FREE_FUNCTION)&#32;&amp;&amp;&#32;!defined(TOML_EXPORTED_CLASS)&#32;&amp;&amp;&#32;defined(TOML_API)</emphasis>
764 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_MEMBER_FUNCTION&#32;TOML_API</emphasis>
765 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_STATIC_FUNCTION&#32;TOML_API</emphasis>
766 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;&#32;&#32;TOML_API</emphasis>
767 <emphasis role="preprocessor">#endif</emphasis>
768 
769 <emphasis role="comment">//&#32;dll/shared&#32;lib&#32;exports</emphasis>
770 <emphasis role="preprocessor">#if&#32;TOML_SHARED_LIB</emphasis>
771 <emphasis role="preprocessor">#undef&#32;TOML_API</emphasis>
772 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_CLASS</emphasis>
773 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_MEMBER_FUNCTION</emphasis>
774 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_STATIC_FUNCTION</emphasis>
775 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_FREE_FUNCTION</emphasis>
776 <emphasis role="preprocessor">#if&#32;TOML_WINDOWS</emphasis>
777 <emphasis role="preprocessor">#if&#32;TOML_IMPLEMENTATION</emphasis>
778 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__declspec(dllexport)</emphasis>
779 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;__declspec(dllexport)</emphasis>
780 <emphasis role="preprocessor">#else</emphasis>
781 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__declspec(dllimport)</emphasis>
782 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;__declspec(dllimport)</emphasis>
783 <emphasis role="preprocessor">#endif</emphasis>
784 <emphasis role="preprocessor">#ifndef&#32;TOML_CALLCONV</emphasis>
785 <emphasis role="preprocessor">#define&#32;TOML_CALLCONV&#32;__cdecl</emphasis>
786 <emphasis role="preprocessor">#endif</emphasis>
787 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;__GNUC__&#32;&gt;=&#32;4</emphasis>
788 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
789 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_MEMBER_FUNCTION&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
790 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_STATIC_FUNCTION&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
791 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;&#32;&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
792 <emphasis role="preprocessor">#endif</emphasis>
793 <emphasis role="preprocessor">#endif</emphasis>
794 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_CLASS</emphasis>
795 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS</emphasis>
796 <emphasis role="preprocessor">#endif</emphasis>
797 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_MEMBER_FUNCTION</emphasis>
798 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_MEMBER_FUNCTION</emphasis>
799 <emphasis role="preprocessor">#endif</emphasis>
800 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_STATIC_FUNCTION</emphasis>
801 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_STATIC_FUNCTION</emphasis>
802 <emphasis role="preprocessor">#endif</emphasis>
803 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_FREE_FUNCTION</emphasis>
804 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION</emphasis>
805 <emphasis role="preprocessor">#endif</emphasis>
806 
807 <emphasis role="comment">//&#32;experimental&#32;language&#32;features</emphasis>
808 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_UNRELEASED_FEATURES)&#32;&amp;&amp;&#32;defined(TOML_UNRELEASED_FEATURES)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_UNRELEASED_FEATURES</emphasis>
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pre-3.0</emphasis>
810 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_UNRELEASED_FEATURES&#32;TOML_UNRELEASED_FEATURES</emphasis>
811 <emphasis role="preprocessor">#endif</emphasis>
812 <emphasis role="preprocessor">#if&#32;(defined(TOML_ENABLE_UNRELEASED_FEATURES)&#32;&amp;&amp;&#32;TOML_ENABLE_UNRELEASED_FEATURES)&#32;||&#32;TOML_INTELLISENSE</emphasis>
813 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_UNRELEASED_FEATURES</emphasis>
814 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_UNRELEASED_FEATURES&#32;1</emphasis>
815 <emphasis role="preprocessor">#endif</emphasis>
816 <emphasis role="preprocessor">#ifndef&#32;TOML_ENABLE_UNRELEASED_FEATURES</emphasis>
817 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_UNRELEASED_FEATURES&#32;0</emphasis>
818 <emphasis role="preprocessor">#endif</emphasis>
819 
820 <emphasis role="comment">//&#32;parser</emphasis>
821 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_PARSER)&#32;&amp;&amp;&#32;defined(TOML_PARSER)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_PARSER&#32;pre-3.0</emphasis>
822 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_PARSER&#32;TOML_PARSER</emphasis>
823 <emphasis role="preprocessor">#endif</emphasis>
824 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_PARSER)&#32;||&#32;(defined(TOML_ENABLE_PARSER)&#32;&amp;&amp;&#32;TOML_ENABLE_PARSER)&#32;||&#32;TOML_INTELLISENSE</emphasis>
825 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_PARSER</emphasis>
826 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_PARSER&#32;1</emphasis>
827 <emphasis role="preprocessor">#endif</emphasis>
828 
829 <emphasis role="comment">//&#32;formatters</emphasis>
830 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_FORMATTERS)&#32;||&#32;(defined(TOML_ENABLE_FORMATTERS)&#32;&amp;&amp;&#32;TOML_ENABLE_FORMATTERS)&#32;||&#32;TOML_INTELLISENSE</emphasis>
831 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_FORMATTERS</emphasis>
832 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_FORMATTERS&#32;1</emphasis>
833 <emphasis role="preprocessor">#endif</emphasis>
834 
835 <emphasis role="comment">//&#32;SIMD</emphasis>
836 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_SIMD)&#32;||&#32;(defined(TOML_ENABLE_SIMD)&#32;&amp;&amp;&#32;TOML_ENABLE_SIMD)&#32;||&#32;TOML_INTELLISENSE</emphasis>
837 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_SIMD</emphasis>
838 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_SIMD&#32;1</emphasis>
839 <emphasis role="preprocessor">#endif</emphasis>
840 
841 <emphasis role="comment">//&#32;windows&#32;compat</emphasis>
842 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_WINDOWS_COMPAT)&#32;&amp;&amp;&#32;defined(TOML_WINDOWS_COMPAT)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_WINDOWS_COMPAT&#32;pre-3.0</emphasis>
843 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;TOML_WINDOWS_COMPAT</emphasis>
844 <emphasis role="preprocessor">#endif</emphasis>
845 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_WINDOWS_COMPAT)&#32;||&#32;(defined(TOML_ENABLE_WINDOWS_COMPAT)&#32;&amp;&amp;&#32;TOML_ENABLE_WINDOWS_COMPAT)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
846 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;TOML_INTELLISENSE</emphasis>
847 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
848 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;1</emphasis>
849 <emphasis role="preprocessor">#endif</emphasis>
850 
851 <emphasis role="preprocessor">#if&#32;!TOML_WINDOWS</emphasis>
852 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
853 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;0</emphasis>
854 <emphasis role="preprocessor">#endif</emphasis>
855 
856 <emphasis role="preprocessor">#ifndef&#32;TOML_INCLUDE_WINDOWS_H</emphasis>
857 <emphasis role="preprocessor">#define&#32;TOML_INCLUDE_WINDOWS_H&#32;0</emphasis>
858 <emphasis role="preprocessor">#endif</emphasis>
859 
860 <emphasis role="comment">//&#32;custom&#32;optional</emphasis>
861 <emphasis role="preprocessor">#ifdef&#32;TOML_OPTIONAL_TYPE</emphasis>
862 <emphasis role="preprocessor">#define&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE&#32;1</emphasis>
863 <emphasis role="preprocessor">#else</emphasis>
864 <emphasis role="preprocessor">#define&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE&#32;0</emphasis>
865 <emphasis role="preprocessor">#endif</emphasis>
866 
867 <emphasis role="comment">//&#32;exceptions&#32;(library&#32;use)</emphasis>
868 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
869 <emphasis role="preprocessor">#if&#32;!defined(TOML_EXCEPTIONS)&#32;||&#32;(defined(TOML_EXCEPTIONS)&#32;&amp;&amp;&#32;TOML_EXCEPTIONS)</emphasis>
870 <emphasis role="preprocessor">#undef&#32;TOML_EXCEPTIONS</emphasis>
871 <emphasis role="preprocessor">#define&#32;TOML_EXCEPTIONS&#32;1</emphasis>
872 <emphasis role="preprocessor">#endif</emphasis>
873 <emphasis role="preprocessor">#else</emphasis>
874 <emphasis role="preprocessor">#if&#32;defined(TOML_EXCEPTIONS)&#32;&amp;&amp;&#32;TOML_EXCEPTIONS</emphasis>
875 <emphasis role="preprocessor">#error&#32;TOML_EXCEPTIONS&#32;was&#32;explicitly&#32;enabled&#32;but&#32;exceptions&#32;are&#32;disabled/unsupported&#32;by&#32;the&#32;compiler.</emphasis>
876 <emphasis role="preprocessor">#endif</emphasis>
877 <emphasis role="preprocessor">#undef&#32;TOML_EXCEPTIONS</emphasis>
878 <emphasis role="preprocessor">#define&#32;TOML_EXCEPTIONS&#32;0</emphasis>
879 <emphasis role="preprocessor">#endif</emphasis>
880 
881 <emphasis role="comment">//&#32;calling&#32;convention&#32;for&#32;static/free/friend&#32;functions</emphasis>
882 <emphasis role="preprocessor">#ifndef&#32;TOML_CALLCONV</emphasis>
883 <emphasis role="preprocessor">#define&#32;TOML_CALLCONV</emphasis>
884 <emphasis role="preprocessor">#endif</emphasis>
885 
886 <emphasis role="preprocessor">#ifndef&#32;TOML_UNDEF_MACROS</emphasis>
887 <emphasis role="preprocessor">#define&#32;TOML_UNDEF_MACROS&#32;1</emphasis>
888 <emphasis role="preprocessor">#endif</emphasis>
889 
890 <emphasis role="preprocessor">#ifndef&#32;TOML_MAX_NESTED_VALUES</emphasis>
891 <emphasis role="preprocessor">#define&#32;TOML_MAX_NESTED_VALUES&#32;256</emphasis>
892 <emphasis role="comment">//&#32;this&#32;refers&#32;to&#32;the&#32;depth&#32;of&#32;nested&#32;values,&#32;e.g.&#32;inline&#32;tables&#32;and&#32;arrays.</emphasis>
893 <emphasis role="comment">//&#32;256&#32;is&#32;crazy&#32;high!&#32;if&#32;you&apos;re&#32;hitting&#32;this&#32;limit&#32;with&#32;real&#32;input,&#32;TOML&#32;is&#32;probably&#32;the&#32;wrong&#32;tool&#32;for&#32;the&#32;job...</emphasis>
894 <emphasis role="preprocessor">#endif</emphasis>
895 
896 <emphasis role="preprocessor">#ifdef&#32;TOML_CHAR_8_STRINGS</emphasis>
897 <emphasis role="preprocessor">#if&#32;TOML_CHAR_8_STRINGS</emphasis>
898 <emphasis role="preprocessor">#error&#32;TOML_CHAR_8_STRINGS&#32;was&#32;removed&#32;in&#32;toml++&#32;2.0.0;&#32;all&#32;value&#32;setters&#32;and&#32;getters&#32;now&#32;work&#32;with&#32;char8_t&#32;strings&#32;implicitly.</emphasis>
899 <emphasis role="preprocessor">#endif</emphasis>
900 <emphasis role="preprocessor">#endif</emphasis>
901 
902 <emphasis role="preprocessor">#ifdef&#32;TOML_LARGE_FILES</emphasis>
903 <emphasis role="preprocessor">#if&#32;!TOML_LARGE_FILES</emphasis>
904 <emphasis role="preprocessor">#error&#32;Support&#32;for&#32;!TOML_LARGE_FILES&#32;(i.e.&#32;&apos;small&#32;files&apos;)&#32;was&#32;removed&#32;in&#32;toml++&#32;3.0.0.</emphasis>
905 <emphasis role="preprocessor">#endif</emphasis>
906 <emphasis role="preprocessor">#endif</emphasis>
907 
908 <emphasis role="preprocessor">#ifndef&#32;TOML_LIFETIME_HOOKS</emphasis>
909 <emphasis role="preprocessor">#define&#32;TOML_LIFETIME_HOOKS&#32;0</emphasis>
910 <emphasis role="preprocessor">#endif</emphasis>
911 
912 <emphasis role="preprocessor">#ifdef&#32;NDEBUG</emphasis>
913 <emphasis role="preprocessor">#undef&#32;TOML_ASSERT</emphasis>
914 <emphasis role="preprocessor">#define&#32;TOML_ASSERT(expr)&#32;static_assert(true)</emphasis>
915 <emphasis role="preprocessor">#endif</emphasis>
916 <emphasis role="preprocessor">#ifndef&#32;TOML_ASSERT</emphasis>
917 <emphasis role="preprocessor">#ifndef&#32;assert</emphasis>
918 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
919 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
920 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
921 <emphasis role="preprocessor">#endif</emphasis>
922 <emphasis role="preprocessor">#define&#32;TOML_ASSERT(expr)&#32;assert(expr)</emphasis>
923 <emphasis role="preprocessor">#endif</emphasis>
924 <emphasis role="preprocessor">#ifdef&#32;NDEBUG</emphasis>
925 <emphasis role="preprocessor">#define&#32;TOML_ASSERT_ASSUME(expr)&#32;TOML_ASSUME(expr)</emphasis>
926 <emphasis role="preprocessor">#else</emphasis>
927 <emphasis role="preprocessor">#define&#32;TOML_ASSERT_ASSUME(expr)&#32;TOML_ASSERT(expr)</emphasis>
928 <emphasis role="preprocessor">#endif</emphasis>
929 
930 <emphasis role="preprocessor">#ifndef&#32;TOML_ENABLE_FLOAT16</emphasis>
931 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_FLOAT16&#32;0</emphasis>
932 <emphasis role="preprocessor">#endif</emphasis>
933 
934 <emphasis role="preprocessor">#if&#32;!defined(TOML_FLOAT_CHARCONV)&#32;&amp;&amp;&#32;(TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;(TOML_ICC&#32;&amp;&amp;&#32;!TOML_ICC_CL))</emphasis>
935 <emphasis role="comment">//&#32;not&#32;supported&#32;by&#32;any&#32;version&#32;of&#32;GCC&#32;or&#32;Clang&#32;as&#32;of&#32;26/11/2020</emphasis>
936 <emphasis role="comment">//&#32;not&#32;supported&#32;by&#32;any&#32;version&#32;of&#32;ICC&#32;on&#32;Linux&#32;as&#32;of&#32;11/01/2021</emphasis>
937 <emphasis role="preprocessor">#define&#32;TOML_FLOAT_CHARCONV&#32;0</emphasis>
938 <emphasis role="preprocessor">#endif</emphasis>
939 <emphasis role="preprocessor">#if&#32;!defined(TOML_INT_CHARCONV)&#32;&amp;&amp;&#32;(defined(__EMSCRIPTEN__)&#32;||&#32;defined(__APPLE__))</emphasis>
940 <emphasis role="comment">//&#32;causes&#32;link&#32;errors&#32;on&#32;emscripten</emphasis>
941 <emphasis role="comment">//&#32;causes&#32;Mac&#32;OS&#32;SDK&#32;version&#32;errors&#32;on&#32;some&#32;versions&#32;of&#32;Apple&#32;Clang</emphasis>
942 <emphasis role="preprocessor">#define&#32;TOML_INT_CHARCONV&#32;0</emphasis>
943 <emphasis role="preprocessor">#endif</emphasis>
944 <emphasis role="preprocessor">#ifndef&#32;TOML_INT_CHARCONV</emphasis>
945 <emphasis role="preprocessor">#define&#32;TOML_INT_CHARCONV&#32;1</emphasis>
946 <emphasis role="preprocessor">#endif</emphasis>
947 <emphasis role="preprocessor">#ifndef&#32;TOML_FLOAT_CHARCONV</emphasis>
948 <emphasis role="preprocessor">#define&#32;TOML_FLOAT_CHARCONV&#32;1</emphasis>
949 <emphasis role="preprocessor">#endif</emphasis>
950 <emphasis role="preprocessor">#if&#32;(TOML_INT_CHARCONV&#32;||&#32;TOML_FLOAT_CHARCONV)&#32;&amp;&amp;&#32;!TOML_HAS_INCLUDE(&lt;charconv&gt;)</emphasis>
951 <emphasis role="preprocessor">#undef&#32;TOML_INT_CHARCONV</emphasis>
952 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT_CHARCONV</emphasis>
953 <emphasis role="preprocessor">#define&#32;TOML_INT_CHARCONV&#32;&#32;&#32;0</emphasis>
954 <emphasis role="preprocessor">#define&#32;TOML_FLOAT_CHARCONV&#32;0</emphasis>
955 <emphasis role="preprocessor">#endif</emphasis>
956 
957 <emphasis role="preprocessor">#if&#32;defined(__cpp_concepts)&#32;&amp;&amp;&#32;__cpp_concepts&#32;&gt;=&#32;201907</emphasis>
958 <emphasis role="preprocessor">#define&#32;TOML_REQUIRES(...)&#32;requires(__VA_ARGS__)</emphasis>
959 <emphasis role="preprocessor">#else</emphasis>
960 <emphasis role="preprocessor">#define&#32;TOML_REQUIRES(...)</emphasis>
961 <emphasis role="preprocessor">#endif</emphasis>
962 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_IF(...)&#32;,&#32;typename&#32;std::enable_if&lt;(__VA_ARGS__),&#32;int&gt;::type&#32;=&#32;0</emphasis>
963 <emphasis role="preprocessor">#define&#32;TOML_CONSTRAINED_TEMPLATE(condition,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
964 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;__VA_ARGS__&#32;TOML_ENABLE_IF(condition)&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
965 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_REQUIRES(condition)</emphasis>
966 <emphasis role="preprocessor">#define&#32;TOML_HIDDEN_CONSTRAINT(condition,&#32;...)&#32;TOML_CONSTRAINED_TEMPLATE(condition,&#32;__VA_ARGS__)</emphasis>
967 
968 <emphasis role="preprocessor">#if&#32;defined(__SIZEOF_FLOAT128__)&#32;&amp;&amp;&#32;defined(__FLT128_MANT_DIG__)&#32;&amp;&amp;&#32;defined(__LDBL_MANT_DIG__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
969 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;__FLT128_MANT_DIG__&#32;&gt;&#32;__LDBL_MANT_DIG__</emphasis>
970 <emphasis role="preprocessor">#define&#32;TOML_FLOAT128&#32;__float128</emphasis>
971 <emphasis role="preprocessor">#endif</emphasis>
972 
973 <emphasis role="preprocessor">#ifdef&#32;__SIZEOF_INT128__</emphasis>
974 <emphasis role="preprocessor">#define&#32;TOML_INT128&#32;&#32;__int128_t</emphasis>
975 <emphasis role="preprocessor">#define&#32;TOML_UINT128&#32;__uint128_t</emphasis>
976 <emphasis role="preprocessor">#endif</emphasis>
977 
978 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
979 
980 <emphasis role="comment">//********&#32;&#32;impl/version.h&#32;&#32;********************************************************************************************</emphasis>
981 
982 <emphasis role="preprocessor">#define&#32;TOML_LIB_MAJOR&#32;3</emphasis>
983 <emphasis role="preprocessor">#define&#32;TOML_LIB_MINOR&#32;3</emphasis>
984 <emphasis role="preprocessor">#define&#32;TOML_LIB_PATCH&#32;0</emphasis>
985 
986 <emphasis role="preprocessor">#define&#32;TOML_LANG_MAJOR&#32;1</emphasis>
987 <emphasis role="preprocessor">#define&#32;TOML_LANG_MINOR&#32;0</emphasis>
988 <emphasis role="preprocessor">#define&#32;TOML_LANG_PATCH&#32;0</emphasis>
989 
990 <emphasis role="comment">//********&#32;&#32;impl/preprocessor.h&#32;&#32;***************************************************************************************</emphasis>
991 
992 <emphasis role="preprocessor">#define&#32;TOML_LIB_SINGLE_HEADER&#32;1</emphasis>
993 
994 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_UNRELEASED_FEATURES</emphasis>
995 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_LANG_EFFECTIVE_VERSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
996 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_MAKE_VERSION(TOML_LANG_MAJOR,&#32;TOML_LANG_MINOR,&#32;TOML_LANG_PATCH+1)</emphasis>
997 <emphasis role="preprocessor">#else</emphasis>
998 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_LANG_EFFECTIVE_VERSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
999 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_MAKE_VERSION(TOML_LANG_MAJOR,&#32;TOML_LANG_MINOR,&#32;TOML_LANG_PATCH)</emphasis>
1000 <emphasis role="preprocessor">#endif</emphasis>
1001 
1002 <emphasis role="preprocessor">#define&#32;TOML_LANG_HIGHER_THAN(major,&#32;minor,&#32;patch)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1003 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(TOML_LANG_EFFECTIVE_VERSION&#32;&gt;&#32;TOML_MAKE_VERSION(major,&#32;minor,&#32;patch))</emphasis>
1004 
1005 <emphasis role="preprocessor">#define&#32;TOML_LANG_AT_LEAST(major,&#32;minor,&#32;patch)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1006 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(TOML_LANG_EFFECTIVE_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(major,&#32;minor,&#32;patch))</emphasis>
1007 
1008 <emphasis role="preprocessor">#define&#32;TOML_LANG_UNRELEASED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1009 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_LANG_HIGHER_THAN(TOML_LANG_MAJOR,&#32;TOML_LANG_MINOR,&#32;TOML_LANG_PATCH)</emphasis>
1010 
1011 <emphasis role="preprocessor">#ifndef&#32;TOML_ABI_NAMESPACES</emphasis>
1012 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;TOML_DOXYGEN</emphasis>
1013 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACES&#32;0</emphasis>
1014 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1015 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACES&#32;1</emphasis>
1016 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1017 <emphasis role="preprocessor">#endif</emphasis>
1018 <emphasis role="preprocessor">#if&#32;TOML_ABI_NAMESPACES</emphasis>
1019 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;toml&#32;{&#32;inline&#32;namespace&#32;TOML_CONCAT(v,&#32;TOML_LIB_MAJOR)</emphasis>
1020 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;static_assert(true)</emphasis>
1021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::toml::TOML_CONCAT(v,&#32;TOML_LIB_MAJOR)</emphasis>
1022 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_START(name)&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;namespace&#32;name&#32;{&#32;static_assert(true)</emphasis>
1023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_BOOL(cond,&#32;T,&#32;F)&#32;TOML_ABI_NAMESPACE_START(TOML_CONCAT(TOML_EVAL_BOOL_,&#32;cond)(T,&#32;F))</emphasis>
1024 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;static_assert(true)</emphasis>
1025 <emphasis role="preprocessor">#else</emphasis>
1026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;toml</emphasis>
1027 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1028 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml</emphasis>
1029 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_START(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1030 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_BOOL(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1031 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1032 <emphasis role="preprocessor">#endif</emphasis>
1033 <emphasis role="preprocessor">#define&#32;TOML_IMPL_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NAMESPACE_START&#32;{&#32;namespace&#32;impl</emphasis>
1034 <emphasis role="preprocessor">#define&#32;TOML_IMPL_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;TOML_NAMESPACE_END</emphasis>
1035 <emphasis role="preprocessor">#if&#32;TOML_HEADER_ONLY</emphasis>
1036 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(TOML_IMPLEMENTATION);&#32;TOML_IMPL_NAMESPACE_START</emphasis>
1037 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_IMPL_NAMESPACE_END</emphasis>
1038 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NAMESPACE::impl</emphasis>
1039 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_EXTERNAL_LINKAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline</emphasis>
1040 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_INTERNAL_LINKAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline</emphasis>
1041 <emphasis role="preprocessor">#else</emphasis>
1042 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(TOML_IMPLEMENTATION);&#32;\</emphasis>
1043 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;namespace&#32;toml;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1044 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace</emphasis>
1045 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1046 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE</emphasis>
1047 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_EXTERNAL_LINKAGE</emphasis>
1048 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_INTERNAL_LINKAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static</emphasis>
1049 <emphasis role="preprocessor">#endif</emphasis>
1050 
1051 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1052 
1053 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1054 
1055 <emphasis role="preprocessor">#if&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES</emphasis>
1056 
1057 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_NEWLINE&#32;&#32;&#32;&#32;&#32;&quot;&#32;&quot;</emphasis>
1058 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;,&#32;&quot;</emphasis>
1059 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&quot;&#32;(&quot;</emphasis>
1060 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&quot;)&quot;</emphasis>
1061 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NEW&#32;&#32;&#32;&#32;&quot;&#32;&quot;</emphasis>
1062 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NXT&#32;&#32;&#32;&#32;&quot;,&#32;&quot;</emphasis>
1063 
1064 <emphasis role="preprocessor">#else</emphasis>
1065 
1066 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_NEWLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;\n|&#32;&quot;</emphasis>
1067 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_NEWLINE&#32;&quot;&#32;&#32;-&#32;&quot;</emphasis>
1068 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP</emphasis>
1069 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_END</emphasis>
1070 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NEW&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_NEWLINE&#32;TOML_SA_NEWLINE</emphasis>
1071 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NXT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW</emphasis>
1072 
1073 <emphasis role="preprocessor">#endif</emphasis>
1074 
1075 <emphasis role="preprocessor">#define&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1076 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&quot;std::string&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1077 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;int64_t&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1078 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;double&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1079 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;bool&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1080 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::date&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1081 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::time&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1082 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::date_time&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1083 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
1084 
1085 <emphasis role="preprocessor">#define&#32;TOML_SA_NODE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1086 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&quot;toml::table&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1087 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::array&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1088 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;std::string&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1089 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;int64_t&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1090 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;double&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1091 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;bool&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1092 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;toml::date&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1093 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;toml::time&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1094 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;toml::date_time&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
1096 
1097 <emphasis role="preprocessor">#define&#32;TOML_SA_UNWRAPPED_NODE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1098 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW&#32;&#32;&#32;&#32;&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1099 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&#32;&#32;&#32;&quot;A&#32;TOML&#32;node&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NODE_TYPE_LIST</emphasis>
1103 
1104 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1105 
1106 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
1107 <link linkend="_toml_8hpp_1ac2188f4d798d551a2bff3f63437b7d8f">TOML_DISABLE_SPAM_WARNINGS</link>;
1108 <link linkend="_toml_8hpp_1a515739f6ed49b05e0c9e398542e0c6f6">TOML_DISABLE_SWITCH_WARNINGS</link>;
1109 <link linkend="_toml_8hpp_1a666633ccdf7dbe23afea6c28fd1d7bd1">TOML_DISABLE_SUGGEST_ATTR_WARNINGS</link>;
1110 
1111 <emphasis role="comment">//&#32;misc&#32;warning&#32;false-positives</emphasis>
1112 <emphasis role="preprocessor">#if&#32;TOML_MSVC</emphasis>
1113 <emphasis role="preprocessor">#pragma&#32;warning(disable&#32;:&#32;5031)&#32;</emphasis><emphasis role="comment">//&#32;#pragma&#32;warning(pop):&#32;likely&#32;mismatch</emphasis>
1114 <emphasis role="preprocessor">#if&#32;TOML_SHARED_LIB</emphasis>
1115 <emphasis role="preprocessor">#pragma&#32;warning(disable&#32;:&#32;4251)&#32;</emphasis><emphasis role="comment">//&#32;dll&#32;exports&#32;for&#32;std&#32;lib&#32;types</emphasis>
1116 <emphasis role="preprocessor">#endif</emphasis>
1117 <emphasis role="preprocessor">#elif&#32;TOML_CLANG</emphasis>
1118 <link linkend="_toml_8hpp_1aa9cd0da20c04fe649ea2460248dcea23">TOML_PRAGMA_CLANG</link>(diagnostic&#32;ignored&#32;<emphasis role="stringliteral">&quot;-Wheader-hygiene&quot;</emphasis>)
1119 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&gt;=&#32;12</emphasis>
1120 <link linkend="_toml_8hpp_1aa9cd0da20c04fe649ea2460248dcea23">TOML_PRAGMA_CLANG</link>(diagnostic&#32;ignored&#32;<emphasis role="stringliteral">&quot;-Wc++20-extensions&quot;</emphasis>)
1121 <emphasis role="preprocessor">#endif</emphasis>
1122 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;==&#32;13</emphasis>
1123 <link linkend="_toml_8hpp_1aa9cd0da20c04fe649ea2460248dcea23">TOML_PRAGMA_CLANG</link>(diagnostic&#32;ignored&#32;<emphasis role="stringliteral">&quot;-Wreserved-identifier&quot;</emphasis>)
1124 <emphasis role="preprocessor">#endif</emphasis>
1125 <emphasis role="preprocessor">#endif</emphasis>
1126 
1127 <emphasis role="comment">//********&#32;&#32;impl/std_new.h&#32;&#32;********************************************************************************************</emphasis>
1128 
1129 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
1130 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
1131 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
1132 
1133 <emphasis role="preprocessor">#if&#32;(!defined(__apple_build_version__)&#32;&amp;&amp;&#32;TOML_CLANG&#32;&gt;=&#32;8)&#32;||&#32;TOML_GCC&#32;&gt;=&#32;7&#32;||&#32;TOML_ICC&#32;&gt;=&#32;1910&#32;||&#32;TOML_MSVC&#32;&gt;=&#32;1914</emphasis>
1134 <emphasis role="preprocessor">#define&#32;TOML_LAUNDER(x)&#32;__builtin_launder(x)</emphasis>
1135 <emphasis role="preprocessor">#elif&#32;defined(__cpp_lib_launder)&#32;&amp;&amp;&#32;__cpp_lib_launder&#32;&gt;=&#32;201606</emphasis>
1136 <emphasis role="preprocessor">#define&#32;TOML_LAUNDER(x)&#32;std::launder(x)</emphasis>
1137 <emphasis role="preprocessor">#else</emphasis>
1138 <emphasis role="preprocessor">#define&#32;TOML_LAUNDER(x)&#32;x</emphasis>
1139 <emphasis role="preprocessor">#endif</emphasis>
1140 
1141 <emphasis role="comment">//********&#32;&#32;impl/std_string.h&#32;&#32;*****************************************************************************************</emphasis>
1142 
1143 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
1144 <emphasis role="preprocessor">#include&#32;&lt;string_view&gt;</emphasis>
1145 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
1146 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
1147 
1148 <emphasis role="preprocessor">#ifemphasis>
1149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;(defined(__cpp_char8_t)&#32;&amp;&amp;&#32;__cpp_char8_t&#32;&gt;=&#32;201811&#32;&amp;&amp;&#32;defined(__cpp_lib_char8_t)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__cpp_lib_char8_t&#32;&gt;=&#32;201907)</emphasis>
1151 <emphasis role="preprocessor">#define&#32;TOML_HAS_CHAR8&#32;1</emphasis>
1152 <emphasis role="preprocessor">#else</emphasis>
1153 <emphasis role="preprocessor">#define&#32;TOML_HAS_CHAR8&#32;0</emphasis>
1154 <emphasis role="preprocessor">#endif</emphasis>
1155 
1156 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacetoml">toml</link>&#32;<emphasis role="comment">//&#32;non-abi&#32;namespace;&#32;this&#32;is&#32;not&#32;an&#32;error</emphasis>
1157 {
1158 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::string_literals;
1159 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::string_view_literals;
1160 }
1161 
1162 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1163 
1164 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
1165 {
1166 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1167 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
1168 &#32;&#32;&#32;&#32;std::string&#32;narrow(std::wstring_view);
1169 
1170 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1171 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
1172 &#32;&#32;&#32;&#32;std::wstring&#32;widen(std::string_view);
1173 
1174 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
1175 
1176 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
1177 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
1178 &#32;&#32;&#32;&#32;std::wstring&#32;widen(std::u8string_view);
1179 
1180 <emphasis role="preprocessor">#endif</emphasis>
1181 }
1182 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
1183 
1184 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1185 
1186 <emphasis role="comment">//********&#32;&#32;impl/std_optional.h&#32;&#32;***************************************************************************************</emphasis>
1187 
1188 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
1189 <emphasis role="preprocessor">#if&#32;!TOML_HAS_CUSTOM_OPTIONAL_TYPE</emphasis>
1190 <emphasis role="preprocessor">#include&#32;&lt;optional&gt;</emphasis>
1191 <emphasis role="preprocessor">#endif</emphasis>
1192 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
1193 
1194 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
1195 {
1196 <emphasis role="preprocessor">#if&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE</emphasis>
1197 
1198 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1199 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>optional&#32;=&#32;TOML_OPTIONAL_TYPE&lt;T&gt;;
1200 
1201 <emphasis role="preprocessor">#else</emphasis>
1202 
1203 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1204 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>optional&#32;=&#32;std::optional&lt;T&gt;;
1205 
1206 <emphasis role="preprocessor">#endif</emphasis>
1207 }
1208 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
1209 
1210 <emphasis role="comment">//********&#32;&#32;impl/forward_declarations.h&#32;&#32;*******************************************************************************</emphasis>
1211 
1212 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
1213 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
1214 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
1215 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
1216 <emphasis role="preprocessor">#include&#32;&lt;cfloat&gt;</emphasis>
1217 <emphasis role="preprocessor">#include&#32;&lt;climits&gt;</emphasis>
1218 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
1219 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
1220 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
1221 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
1222 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
1223 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
1224 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
1225 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
1226 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
1227 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
1228 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
1229 <emphasis role="preprocessor">#undef&#32;min</emphasis>
1230 <emphasis role="preprocessor">#undef&#32;max</emphasis>
1231 <emphasis role="preprocessor">#endif</emphasis>
1232 
1233 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_ENVIRONMENT_CHECKS</emphasis>
1234 <emphasis role="preprocessor">#define&#32;TOML_ENV_MESSAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1235 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;If&#32;you&apos;re&#32;seeing&#32;this&#32;error&#32;it&apos;s&#32;because&#32;you&apos;re&#32;building&#32;toml++&#32;for&#32;an&#32;environment&#32;that&#32;doesn&apos;t&#32;conform&#32;to&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1236 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;one&#32;of&#32;the&#32;&apos;ground&#32;truths&apos;&#32;assumed&#32;by&#32;the&#32;library.&#32;Essentially&#32;this&#32;just&#32;means&#32;that&#32;I&#32;don&apos;t&#32;have&#32;the&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1237 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;resources&#32;to&#32;test&#32;on&#32;more&#32;platforms,&#32;but&#32;I&#32;wish&#32;I&#32;did!&#32;You&#32;can&#32;try&#32;disabling&#32;the&#32;checks&#32;by&#32;defining&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1238 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;TOML_DISABLE_ENVIRONMENT_CHECKS,&#32;but&#32;your&#32;mileage&#32;may&#32;vary.&#32;Please&#32;consider&#32;filing&#32;an&#32;issue&#32;at&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1239 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;https://github.com/marzer/tomlplusplus/issues&#32;to&#32;help&#32;me&#32;improve&#32;support&#32;for&#32;your&#32;target&#32;environment.&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1240 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;Thanks!&quot;</emphasis>
1241 
1242 <emphasis role="keyword">static_assert</emphasis>(CHAR_BIT&#32;==&#32;8,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
1243 <emphasis role="keyword">static_assert</emphasis>(<link linkend="__classes_2lib_2include_2float_8h_1a566d8859d1a43f73f0e76619833d4d98">FLT_RADIX</link>&#32;==&#32;2,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
1244 <emphasis role="keyword">static_assert</emphasis>(<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;==&#32;65,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
1245 <emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(double)&#32;==&#32;8,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
1246 <emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;double&gt;::is_iec559,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
1247 <emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;double&gt;::digits&#32;==&#32;53,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
1248 <emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;double&gt;::digits10&#32;==&#32;15,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
1249 
1250 <emphasis role="preprocessor">#undef&#32;TOML_ENV_MESSAGE</emphasis>
1251 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!TOML_DISABLE_ENVIRONMENT_CHECKS</emphasis>
1252 
1253 <emphasis role="comment">//&#32;undocumented&#32;forward&#32;declarations&#32;are&#32;hidden&#32;from&#32;doxygen&#32;because&#32;they&#32;fuck&#32;it&#32;up&#32;=/</emphasis>
1254 
1255 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacetoml">toml</link>&#32;<emphasis role="comment">//&#32;non-abi&#32;namespace;&#32;this&#32;is&#32;not&#32;an&#32;error</emphasis>
1256 {
1257 &#32;&#32;&#32;&#32;using&#32;::std::size_t;
1258 &#32;&#32;&#32;&#32;using&#32;::std::intptr_t;
1259 &#32;&#32;&#32;&#32;using&#32;::std::uintptr_t;
1260 &#32;&#32;&#32;&#32;using&#32;::std::ptrdiff_t;
1261 &#32;&#32;&#32;&#32;using&#32;::std::nullptr_t;
1262 &#32;&#32;&#32;&#32;using&#32;::std::int8_t;
1263 &#32;&#32;&#32;&#32;using&#32;::std::int16_t;
1264 &#32;&#32;&#32;&#32;using&#32;::std::int32_t;
1265 &#32;&#32;&#32;&#32;using&#32;::std::int64_t;
1266 &#32;&#32;&#32;&#32;using&#32;::std::uint8_t;
1267 &#32;&#32;&#32;&#32;using&#32;::std::uint16_t;
1268 &#32;&#32;&#32;&#32;using&#32;::std::uint32_t;
1269 &#32;&#32;&#32;&#32;using&#32;::std::uint64_t;
1270 &#32;&#32;&#32;&#32;using&#32;::std::uint_least32_t;
1271 &#32;&#32;&#32;&#32;using&#32;::std::uint_least64_t;
1272 }
1273 
1274 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
1275 {
1276 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>date;
1277 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtime">time</link>;
1278 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtime__offset">time_offset</link>;
1279 
1280 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a0f6a688021ea2fc13e1c76acd64e4bbc">TOML_HAS_CUSTOM_OPTIONAL_TYPE</link>,&#32;custopt,&#32;stdopt);
1281 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdate__time">date_time</link>;
1282 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;
1283 
1284 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsource__position">source_position</link>;
1285 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsource__region">source_region</link>;
1286 
1287 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>node;
1288 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;
1289 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classnode__view">node_view</link>;
1290 
1291 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>key;
1292 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classarray">array</link>;
1293 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classtable">table</link>;
1294 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;
1295 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classvalue">value</link>;
1296 
1297 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>;
1298 
1299 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>toml_formatter;
1300 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>json_formatter;
1301 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>yaml_formatter;
1302 
1303 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex);
1304 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
1305 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classparse__result">parse_result</link>&#32;=&#32;<link linkend="_classtable">table</link>;
1306 <emphasis role="preprocessor">#else</emphasis>
1307 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classparse__result">parse_result</link>;
1308 <emphasis role="preprocessor">#endif</emphasis>
1309 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
1310 }
1311 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
1312 
1313 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
1314 {
1315 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_ptr&#32;=&#32;std::unique_ptr&lt;node&gt;;
1316 
1317 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;impl_ex,&#32;impl_noex);
1318 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classparser">parser</link>;
1319 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
1320 
1321 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1322 
1323 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::string_view&#32;<link linkend="_toml_8hpp_1a6b12f27cd2f2075ecfa8109f2149ebdf">control_char_escapes</link>[]&#32;=
1324 &#32;&#32;&#32;&#32;{
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0000&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0001&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0002&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0003&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0004&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0005&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0006&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0007&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\b&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\t&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\n&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u000B&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\f&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\r&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u000E&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u000F&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0010&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0011&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0012&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0013&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0014&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0015&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0016&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0017&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0018&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0019&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001A&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001B&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001C&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001D&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001E&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001F&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1357 &#32;&#32;&#32;&#32;};
1358 
1359 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::string_view&#32;<link linkend="_toml_8hpp_1af493727019d023763b73c4ee58a1e327">node_type_friendly_names</link>[]&#32;=
1360 &#32;&#32;&#32;&#32;{
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;none&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;array&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integer&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;floating-point&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;boolean&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;date&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;time&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;date-time&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
1371 &#32;&#32;&#32;&#32;};
1372 
1373 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1374 }
1375 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
1376 
1377 <emphasis role="preprocessor">#if&#32;TOML_ABI_NAMESPACES</emphasis>
1378 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
1379 <emphasis role="preprocessor">#define&#32;TOML_PARSER_TYPENAME&#32;TOML_NAMESPACE::impl::impl_ex::parser</emphasis>
1380 <emphasis role="preprocessor">#else</emphasis>
1381 <emphasis role="preprocessor">#define&#32;TOML_PARSER_TYPENAME&#32;TOML_NAMESPACE::impl::impl_noex::parser</emphasis>
1382 <emphasis role="preprocessor">#endif</emphasis>
1383 <emphasis role="preprocessor">#else</emphasis>
1384 <emphasis role="preprocessor">#define&#32;TOML_PARSER_TYPENAME&#32;TOML_NAMESPACE::impl::parser</emphasis>
1385 <emphasis role="preprocessor">#endif</emphasis>
1386 
1387 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacetoml">toml</link>
1388 {
1389 }
1390 
1391 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>&#32;<emphasis role="comment">//&#32;abi&#32;namespace</emphasis>
1392 {
1393 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceliterals">literals</link>
1394 &#32;&#32;&#32;&#32;{
1395 &#32;&#32;&#32;&#32;}
1396 
1397 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;node_type&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>
1398 &#32;&#32;&#32;&#32;{
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>,
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>,
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;integer,
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;floating_point,
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boolean,
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;date,
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>,
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdate__time">date_time</link>
1409 &#32;&#32;&#32;&#32;};
1410 
1411 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Char&gt;
1412 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_ostream&lt;Char&gt;&amp;&#32;<link linkend="_toml_8hpp_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;Char&gt;&amp;&#32;lhs,&#32;node_type&#32;rhs)
1413 &#32;&#32;&#32;&#32;{
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;str&#32;&#32;&#32;=&#32;impl::node_type_friendly_names[<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type_t&lt;node_type&gt;<emphasis role="keyword">&gt;</emphasis>(rhs)];
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>str_char_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(str)::value_type;
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;Char,&#32;str_char_t&gt;)
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;str;
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(Char)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(str_char_t))
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;std::basic_string_view&lt;Char&gt;{&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>Char*<emphasis role="keyword">&gt;</emphasis>(str.data()),&#32;str.length()&#32;};
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;str.data();
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1425 &#32;&#32;&#32;&#32;}
1426 
1427 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link>&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<emphasis role="comment">//&#32;being&#32;an&#32;&quot;OPEN&quot;&#32;flags&#32;enum&#32;is&#32;not&#32;an&#32;error</emphasis>
1428 &#32;&#32;&#32;&#32;{
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab82bdeb4dd19cff4de2266a27d3dda18">format_as_binary</link>&#32;=&#32;1,
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a23ea604a4d31b811ee1dcf554577c906">format_as_octal</link>&#32;=&#32;2,
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a00083906b4f76536fcccf16aa0fe3c94">format_as_hexadecimal</link>&#32;=&#32;3,
1433 &#32;&#32;&#32;&#32;};
1434 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af3268f6dd1413971826ff207adc92d49">TOML_MAKE_FLAGS</link>(<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>);
1435 
1436 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>&#32;=
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type_t&lt;value_flags&gt;<emphasis role="keyword">&gt;</emphasis>(-1)&#32;});
1438 
1439 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link>&#32;<link linkend="_toml_8hpp_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>
1440 &#32;&#32;&#32;&#32;{
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2545d18c6766d54922be39e868fe4bf6">quote_dates_and_times</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;0),
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7ae1c6e457ad741d30ce82ed08c78ab1">quote_infinities_and_nans</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;1),
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8aed9fba74baf504c741d36149cb46a3">allow_literal_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;2),
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a24920e85768d19625e1084e3ca601620">allow_multi_line_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;3),
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3e541c3ac7db3737fe85987dcdcf7dd8">allow_real_tabs_in_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;4),
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a300010e368604efe47dbcae9fd8554fe">allow_unicode_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;5),
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a5c5bd51ada006fec47f0a14d90f6ac41">allow_binary_integers</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;6),
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a48afee63c154da708ccdf978957db363">allow_octal_integers</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;7),
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8002cf32a7117fe62831fa23aa75cc84">allow_hexadecimal_integers</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;8),
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;9),
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af3a33663e90d253686912eba69982c35">indent_array_elements</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;10),
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aeff1bb793cb4a2cf6c9be1b90fa0ec7d">indentation</link>&#32;=&#32;<link linkend="_toml_8hpp_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link>&#32;|&#32;<link linkend="_toml_8hpp_1af3a33663e90d253686912eba69982c35">indent_array_elements</link>,
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab6c9a08132134d6f8fb431cf7e71c022">relaxed_float_precision</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;11),
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a9349d47dff26b543042f8d1ffb50e28c">terse_key_value_pairs</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;12),
1456 &#32;&#32;&#32;&#32;};
1457 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af3268f6dd1413971826ff207adc92d49">TOML_MAKE_FLAGS</link>(<link linkend="_toml_8hpp_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>);
1458 
1459 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1460 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_toml_8hpp_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_structinserter">inserter</link>
1461 &#32;&#32;&#32;&#32;{
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;T&gt;);
1463 
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="_classvalue">value</link>;
1465 &#32;&#32;&#32;&#32;};
1466 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1467 &#32;&#32;&#32;&#32;<link linkend="_structinserter">inserter</link>(T&#32;&amp;&amp;)&#32;-&gt;&#32;<link linkend="_structinserter">inserter&lt;T&amp;&amp;&gt;</link>;
1468 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1469 &#32;&#32;&#32;&#32;<link linkend="_structinserter">inserter</link>(T&amp;)&#32;-&gt;&#32;<link linkend="_structinserter">inserter&lt;T&amp;&gt;</link>;
1470 
1471 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_forward__declarations_8h_1a081dc6ee550d344af321209d765fbe45">default_formatter</link>&#32;=&#32;toml_formatter;
1472 }
1473 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
1474 
1475 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
1476 {
1477 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1478 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>remove_cvref&#32;=&#32;std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;;
1479 
1480 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
1481 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a3ad4b4468010a85a19ac9b40dab8b22a">common_signed_type</link>&#32;=&#32;std::common_type_t&lt;std::make_signed_t&lt;T&gt;...&gt;;
1482 
1483 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
1484 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a815e932c93486480761ca77d94447901">is_one_of</link>&#32;=&#32;(<emphasis role="keyword">false</emphasis>&#32;||&#32;...&#32;||&#32;std::is_same_v&lt;T,&#32;U&gt;);
1485 
1486 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
1487 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a76e834946c5dd85fc42b186f7ce325aa">all_integral</link>&#32;=&#32;(std::is_integral_v&lt;T&gt;&#32;&amp;&amp;&#32;...);
1488 
1489 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1490 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a97417fee781e1c7ba52d5c76ba4459a4">is_cvref</link>&#32;=&#32;std::is_reference_v&lt;T&gt;&#32;||&#32;std::is_const_v&lt;T&gt;&#32;||&#32;std::is_volatile_v&lt;T&gt;;
1491 
1492 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1493 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1af586d464952e4eac442a23643c69618d">is_wide_string</link>&#32;=
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_one_of&lt;std::decay_t&lt;T&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;std::wstring_view,&#32;std::wstring&gt;;
1495 
1496 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1497 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a165b6f8b86d0dd7f59d0cc6f3db5777d">value_retrieval_is_nothrow</link>&#32;=&#32;!std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;std::string&gt;
1498 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;std::u8string&gt;
1500 <emphasis role="preprocessor">#endif</emphasis>
1501 
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_wide_string&lt;T&gt;;
1503 
1504 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1505 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>;
1506 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1507 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1afe2778ba6d59f6bd36d5e426cf2b18e2">copy_ref</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structcopy__ref___1a6ad5cf45f8a2ac3ccaa2c1525f6923c9">copy_ref_&lt;Dest, Src&gt;::type</link>;
1508 
1509 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1510 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>
1511 &#32;&#32;&#32;&#32;{
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structcopy__ref___1a6ad5cf45f8a2ac3ccaa2c1525f6923c9">type</link>&#32;=&#32;Dest;
1513 &#32;&#32;&#32;&#32;};
1514 
1515 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1516 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>&lt;Dest,&#32;Src&amp;&gt;
1517 &#32;&#32;&#32;&#32;{
1518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structcopy__ref___3_01_dest_00_01_src_01_6_01_4_1a2ac6073947c6fee7e138a82c64178dcc">type</link>&#32;=&#32;std::add_lvalue_reference_t&lt;Dest&gt;;
1519 &#32;&#32;&#32;&#32;};
1520 
1521 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1522 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>&lt;Dest,&#32;Src&amp;&amp;&gt;
1523 &#32;&#32;&#32;&#32;{
1524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structcopy__ref___3_01_dest_00_01_src_01_6_6_01_4_1adff03d5a02b3d374c4dc7814a1541be7">type</link>&#32;=&#32;std::add_rvalue_reference_t&lt;Dest&gt;;
1525 &#32;&#32;&#32;&#32;};
1526 
1527 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1528 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>;
1529 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1530 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a5b72589fd4f35a9fdf114bd4dac17067">copy_cv</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structcopy__cv___1a29a7eb254004121ba4266360e4a39b9e">copy_cv_&lt;Dest, Src&gt;::type</link>;
1531 
1532 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1533 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>
1534 &#32;&#32;&#32;&#32;{
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structcopy__cv___1a29a7eb254004121ba4266360e4a39b9e">type</link>&#32;=&#32;Dest;
1536 &#32;&#32;&#32;&#32;};
1537 
1538 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1539 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>&lt;Dest,&#32;const&#32;Src&gt;
1540 &#32;&#32;&#32;&#32;{
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structcopy__cv___3_01_dest_00_01const_01_src_01_4_1a1f9a186bf528957863663f4972ffc13f">type</link>&#32;=&#32;std::add_const_t&lt;Dest&gt;;
1542 &#32;&#32;&#32;&#32;};
1543 
1544 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1545 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>&lt;Dest,&#32;volatile&#32;Src&gt;
1546 &#32;&#32;&#32;&#32;{
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structcopy__cv___3_01_dest_00_01volatile_01_src_01_4_1a4998362c3402f51005dff500d0a2c8d0">type</link>&#32;=&#32;std::add_volatile_t&lt;Dest&gt;;
1548 &#32;&#32;&#32;&#32;};
1549 
1550 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1551 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>&lt;Dest,&#32;const&#32;volatile&#32;Src&gt;
1552 &#32;&#32;&#32;&#32;{
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structcopy__cv___3_01_dest_00_01const_01volatile_01_src_01_4_1af75b6985d9f27f85c401e4c846e02d0b">type</link>&#32;=&#32;std::add_cv_t&lt;Dest&gt;;
1554 &#32;&#32;&#32;&#32;};
1555 
1556 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
1557 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a48304ccb99bc32a64f1e4bc7a3506f77">copy_cvref</link>&#32;=
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1afe2778ba6d59f6bd36d5e426cf2b18e2">copy_ref&lt;copy_ref&lt;copy_cv&lt;std::remove_reference_t&lt;Dest&gt;</link>,&#32;std::remove_reference_t&lt;Src&gt;&gt;,&#32;Dest&gt;,&#32;Src&gt;;
1559 
1560 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1561 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a10bb30a701ab034872fb59c5ef53b14d">dependent_false</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1562 
1563 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
1564 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a7097288127e91d1b819796e8e82d4768">first_is_same</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1565 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
1566 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a7097288127e91d1b819796e8e82d4768">first_is_same</link>&lt;T,&#32;T,&#32;U...&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1567 
1568 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;general&#32;value&#32;traits</emphasis>
1569 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(as&#32;they&#32;relate&#32;to&#32;their&#32;equivalent&#32;native&#32;TOML&#32;type)</emphasis>
1570 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1571 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>
1572 &#32;&#32;&#32;&#32;{
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structvalue__traits_1a1f52ae9fa00169bc44b9a9ff1269b89c">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1a21eb6591c46f1ad03fde6c023e505459">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1ac77371ee33a336f20163058f130fac36">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1ac288ebd160d91ab2d37be04c48ba41cb">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1a5ab3010c8298c454cc2747be071e52a5">can_partially_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::none;
1579 &#32;&#32;&#32;&#32;};
1580 
1581 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1582 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;T&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits</link>&lt;T&gt;
1583 &#32;&#32;&#32;&#32;{};
1584 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1585 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;volatile&#32;T&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits</link>&lt;T&gt;
1586 &#32;&#32;&#32;&#32;{};
1587 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1588 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;volatile&#32;T&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits</link>&lt;T&gt;
1589 &#32;&#32;&#32;&#32;{};
1590 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1591 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;T&amp;&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;</link>
1592 &#32;&#32;&#32;&#32;{};
1593 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1594 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;T&amp;&amp;&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;</link>
1595 &#32;&#32;&#32;&#32;{};
1596 
1597 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer&#32;value_traits&#32;specializations&#32;-&#32;standard&#32;types</emphasis>
1598 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1599 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__limits">integer_limits</link>
1600 &#32;&#32;&#32;&#32;{
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structinteger__limits_1a76a6fb2afdf3f0d854dc0419a0b77cf6">min</link>&#32;=&#32;(std::numeric_limits&lt;T&gt;::min)();
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;=&#32;(std::numeric_limits&lt;T&gt;::max)();
1603 &#32;&#32;&#32;&#32;};
1604 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1605 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__traits__base">integer_traits_base</link>&#32;:&#32;<link linkend="_structinteger__limits">integer_limits</link>&lt;T&gt;
1606 &#32;&#32;&#32;&#32;{
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structinteger__traits__base_1ac1e2ddba29af450fd6991533e88f88c7">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>;
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinteger__traits__base_1abdf523a6640d95157dcd22f7ac5c47e7">is_native</link>&#32;=&#32;std::is_same_v&lt;T,&#32;native_type&gt;;
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinteger__traits__base_1a2483663732c9967c3c5e1c50c53bc11c">is_signed</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(-1)&#32;&lt;&#32;T{};&#32;<emphasis role="comment">//&#32;for&#32;impls&#32;not&#32;specializing&#32;std::is_signed&lt;T&gt;</emphasis>
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::integer;
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinteger__traits__base_1ada5df7608f26eb97427bdc96870d40f9">can_partially_represent_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1612 &#32;&#32;&#32;&#32;};
1613 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1614 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structunsigned__integer__traits">unsigned_integer_traits</link>&#32;:&#32;<link linkend="_structinteger__traits__base">integer_traits_base</link>&lt;T&gt;
1615 &#32;&#32;&#32;&#32;{
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structunsigned__integer__traits_1a30c3ba40f0b36f795cce3bc93e9f55b3">is_losslessly_convertible_to_native</link>&#32;=&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::max</link>&#32;&lt;=&#32;9223372036854775807ULL;
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structunsigned__integer__traits_1acd06024136896aee5e96cb295a62cbcf">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1618 &#32;&#32;&#32;&#32;};
1619 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1620 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsigned__integer__traits">signed_integer_traits</link>&#32;:&#32;<link linkend="_structinteger__traits__base">integer_traits_base</link>&lt;T&gt;
1621 &#32;&#32;&#32;&#32;{
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structsigned__integer__traits_1a4dd4ecbdb678eec9b60daabf7469e264">native_type</link>&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>;
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsigned__integer__traits_1a612713b8adc366ed102d13e90c844328">is_losslessly_convertible_to_native</link>&#32;=
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::min</link>&#32;&gt;=&#32;(-9223372036854775807LL&#32;-&#32;1LL)&#32;&amp;&amp;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::max</link>&#32;&lt;=&#32;9223372036854775807LL;
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsigned__integer__traits_1a0a9cb1c7131e697ef124bba01d544998">can_represent_native</link>&#32;=
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::min</link>&#32;&lt;=&#32;(-9223372036854775807LL&#32;-&#32;1LL)&#32;&amp;&amp;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::max</link>&#32;&gt;=&#32;9223372036854775807LL;
1627 &#32;&#32;&#32;&#32;};
1628 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T,&#32;bool&#32;S&#32;=&#32;integer_traits_base&lt;T&gt;::is_signed&gt;
1629 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__traits">integer_traits</link>&#32;:&#32;<link linkend="_structsigned__integer__traits">signed_integer_traits</link>&lt;T&gt;
1630 &#32;&#32;&#32;&#32;{};
1631 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1632 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__traits">integer_traits</link>&lt;T,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;&#32;:&#32;<link linkend="_structunsigned__integer__traits">unsigned_integer_traits</link>&lt;T&gt;
1633 &#32;&#32;&#32;&#32;{};
1634 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1635 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;char&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;char&gt;
1636 &#32;&#32;&#32;&#32;{};
1637 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1638 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;char&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;char&gt;
1639 &#32;&#32;&#32;&#32;{};
1640 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1641 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;short&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;short&gt;
1642 &#32;&#32;&#32;&#32;{};
1643 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1644 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;short&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;short&gt;
1645 &#32;&#32;&#32;&#32;{};
1646 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1647 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;int&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;int&gt;
1648 &#32;&#32;&#32;&#32;{};
1649 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1650 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;int&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;int&gt;
1651 &#32;&#32;&#32;&#32;{};
1652 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1653 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;long&gt;
1654 &#32;&#32;&#32;&#32;{};
1655 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1656 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;long&gt;
1657 &#32;&#32;&#32;&#32;{};
1658 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1659 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;long&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;long&#32;long&gt;
1660 &#32;&#32;&#32;&#32;{};
1661 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1662 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;long&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;long&#32;long&gt;
1663 &#32;&#32;&#32;&#32;{};
1664 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::is_native</link>);
1665 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::is_signed</link>);
1666 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::is_losslessly_convertible_to_native</link>);
1667 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::can_represent_native</link>);
1668 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::can_partially_represent_native</link>);
1669 
1670 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer&#32;value_traits&#32;specializations&#32;-&#32;non-standard&#32;types</emphasis>
1671 <emphasis role="preprocessor">#ifdef&#32;TOML_INT128</emphasis>
1672 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1673 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__limits">integer_limits</link>&lt;TOML_INT128&gt;
1674 &#32;&#32;&#32;&#32;{
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_INT128&#32;<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;=
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>TOML_INT128<emphasis role="keyword">&gt;</emphasis>((TOML_UINT128{&#32;1u&#32;}&#32;&lt;&lt;&#32;((__SIZEOF_INT128__&#32;*&#32;CHAR_BIT)&#32;-&#32;1))&#32;-&#32;1);
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_INT128&#32;<link linkend="_structinteger__limits_1a76a6fb2afdf3f0d854dc0419a0b77cf6">min</link>&#32;=&#32;-<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;-&#32;TOML_INT128{&#32;1&#32;};
1678 &#32;&#32;&#32;&#32;};
1679 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1680 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__limits">integer_limits</link>&lt;TOML_UINT128&gt;
1681 &#32;&#32;&#32;&#32;{
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_UINT128&#32;<link linkend="_structinteger__limits_1a76a6fb2afdf3f0d854dc0419a0b77cf6">min</link>&#32;=&#32;TOML_UINT128{};
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_UINT128&#32;<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;=&#32;(2u&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis>TOML_UINT128<emphasis role="keyword">&gt;</emphasis>(<link linkend="_structinteger__limits">integer_limits&lt;TOML_INT128&gt;::max</link>))&#32;+&#32;1u;
1684 &#32;&#32;&#32;&#32;};
1685 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1686 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_INT128&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;TOML_INT128&gt;
1687 &#32;&#32;&#32;&#32;{};
1688 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1689 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_UINT128&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;TOML_UINT128&gt;
1690 &#32;&#32;&#32;&#32;{};
1691 <emphasis role="preprocessor">#endif</emphasis>
1692 <emphasis role="preprocessor">#ifdef&#32;TOML_SMALL_INT_TYPE</emphasis>
1693 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1694 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_SMALL_INT_TYPE&gt;&#32;:&#32;<link linkend="_structsigned__integer__traits">signed_integer_traits</link>&lt;TOML_SMALL_INT_TYPE&gt;
1695 &#32;&#32;&#32;&#32;{};
1696 <emphasis role="preprocessor">#endif</emphasis>
1697 
1698 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;floating-point&#32;traits&#32;base</emphasis>
1699 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">int</emphasis>&#32;MantissaDigits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;DecimalDigits&gt;
1700 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits__base">float_traits_base</link>
1701 &#32;&#32;&#32;&#32;{
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::floating_point;
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structfloat__traits__base_1a6a7083aaaa3f62b2212c8657511e7e75">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;double;
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1ad099d6e475393ed450feb7f298439bf6">is_native</link>&#32;=&#32;std::is_same_v&lt;T,&#32;native_type&gt;;
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1a911b70345331901cccc08432d0c25982">is_signed</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1706 
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structfloat__traits__base_1a34fb923e57b2764aeff3bc778d99e3ab">bits</link>&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;CHAR_BIT);
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&#32;&#32;=&#32;MantissaDigits;
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;=&#32;DecimalDigits;
1710 
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1a61910dabf251ab11bb5ebad090931b4c">is_losslessly_convertible_to_native</link>&#32;=&#32;<link linkend="_structfloat__traits__base_1a34fb923e57b2764aeff3bc778d99e3ab">bits</link>&#32;&lt;=&#32;64&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&lt;=&#32;53&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DBL_MANT_DIG</emphasis>
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;&lt;=&#32;15;&#32;<emphasis role="comment">//&#32;DBL_DIG</emphasis>
1714 
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1a6c6a275189b956e146f140326aa9b89c">can_represent_native</link>&#32;=&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&gt;=&#32;53&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DBL_MANT_DIG</emphasis>
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;&gt;=&#32;15;&#32;<emphasis role="comment">//&#32;DBL_DIG</emphasis>
1717 
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1ae9ea5d9f69ff288b5b2f73c635507dbc">can_partially_represent_native</link>&#32;=&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;&gt;&#32;0;
1719 &#32;&#32;&#32;&#32;};
1720 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1721 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits">float_traits</link>&#32;:&#32;<link linkend="_structfloat__traits__base">float_traits_base</link>&lt;T,&#32;std::numeric_limits&lt;T&gt;::digits,&#32;std::numeric_limits&lt;T&gt;::digits10&gt;
1722 &#32;&#32;&#32;&#32;{};
1723 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FLOAT16</emphasis>
1724 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1725 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits">float_traits</link>&lt;_Float16&gt;&#32;:&#32;<link linkend="_structfloat__traits__base">float_traits_base</link>&lt;_Float16,&#32;__FLT16_MANT_DIG__,&#32;__FLT16_DIG__&gt;
1726 &#32;&#32;&#32;&#32;{};
1727 <emphasis role="preprocessor">#endif</emphasis>
1728 <emphasis role="preprocessor">#ifdef&#32;TOML_FLOAT128</emphasis>
1729 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1730 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits">float_traits</link>&lt;TOML_FLOAT128&gt;&#32;:&#32;<link linkend="_structfloat__traits__base">float_traits_base</link>&lt;TOML_FLOAT128,&#32;__FLT128_MANT_DIG__,&#32;__FLT128_DIG__&gt;
1731 &#32;&#32;&#32;&#32;{};
1732 <emphasis role="preprocessor">#endif</emphasis>
1733 
1734 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;floating-point&#32;traits</emphasis>
1735 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1736 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;float&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;float&gt;
1737 &#32;&#32;&#32;&#32;{};
1738 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1739 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;double&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;double&gt;
1740 &#32;&#32;&#32;&#32;{};
1741 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1742 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;long&#32;double&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;long&#32;double&gt;
1743 &#32;&#32;&#32;&#32;{};
1744 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FLOAT16</emphasis>
1745 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1746 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;_Float16&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;_Float16&gt;
1747 &#32;&#32;&#32;&#32;{};
1748 <emphasis role="preprocessor">#endif</emphasis>
1749 <emphasis role="preprocessor">#ifdef&#32;TOML_FLOAT128</emphasis>
1750 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1751 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_FLOAT128&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;TOML_FLOAT128&gt;
1752 &#32;&#32;&#32;&#32;{};
1753 <emphasis role="preprocessor">#endif</emphasis>
1754 <emphasis role="preprocessor">#ifdef&#32;TOML_SMALL_FLOAT_TYPE</emphasis>
1755 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1756 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_SMALL_FLOAT_TYPE&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;TOML_SMALL_FLOAT_TYPE&gt;
1757 &#32;&#32;&#32;&#32;{};
1758 <emphasis role="preprocessor">#endif</emphasis>
1759 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::is_native</link>);
1760 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::is_losslessly_convertible_to_native</link>);
1761 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::can_represent_native</link>);
1762 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::can_partially_represent_native</link>);
1763 
1764 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;value_traits&#32;specializations&#32;-&#32;char-based&#32;strings</emphasis>
1765 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1766 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structstring__traits">string_traits</link>
1767 &#32;&#32;&#32;&#32;{
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structstring__traits_1acb511fff6377c844357fb14c998d4cf4">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::string;
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1a92f2ca5b8bb6e573abf39c8ce5efb292">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::is_same_v&lt;T,&#32;native_type&gt;;
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1aa142eeee0dde6e84f42a9fb90d3b9f3c">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54">can_represent_native</link>&#32;=
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_array_v&lt;T&gt;&#32;&amp;&amp;&#32;(!std::is_pointer_v&lt;T&gt;&#32;||&#32;std::is_const_v&lt;std::remove_pointer_t&lt;T&gt;&gt;);
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1ab9b6819ab5edb3cb5c8ae02589a0e762">can_partially_represent_native</link>&#32;=&#32;<link linkend="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54">can_represent_native</link>;
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::string;
1775 &#32;&#32;&#32;&#32;};
1776 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1777 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::string&gt;
1778 &#32;&#32;&#32;&#32;{};
1779 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1780 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::string_view&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::string_view&gt;
1781 &#32;&#32;&#32;&#32;{};
1782 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1783 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;const char*&gt;</link>
1784 &#32;&#32;&#32;&#32;{};
1785 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1786 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;const&#32;char[N]&gt;
1787 &#32;&#32;&#32;&#32;{};
1788 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1789 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;char*&gt;</link>
1790 &#32;&#32;&#32;&#32;{};
1791 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1792 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;char[N]&gt;
1793 &#32;&#32;&#32;&#32;{};
1794 
1795 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;value_traits&#32;specializations&#32;-&#32;char8_t-based&#32;strings</emphasis>
1796 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
1797 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1798 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::u8string&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::u8string&gt;
1799 &#32;&#32;&#32;&#32;{};
1800 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1801 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::u8string_view&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::u8string_view&gt;
1802 &#32;&#32;&#32;&#32;{};
1803 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1804 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char8_t*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;const char8_t*&gt;</link>
1805 &#32;&#32;&#32;&#32;{};
1806 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1807 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char8_t[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;const&#32;char8_t[N]&gt;
1808 &#32;&#32;&#32;&#32;{};
1809 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1810 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char8_t*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;char8_t*&gt;</link>
1811 &#32;&#32;&#32;&#32;{};
1812 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1813 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char8_t[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;char8_t[N]&gt;
1814 &#32;&#32;&#32;&#32;{};
1815 <emphasis role="preprocessor">#endif</emphasis>
1816 
1817 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;value_traits&#32;specializations&#32;-&#32;wchar_t-based&#32;strings&#32;on&#32;Windows</emphasis>
1818 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
1819 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1820 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>wstring_traits
1821 &#32;&#32;&#32;&#32;{
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::string;
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a0b9e60ca26c89aac055ec4e01170cb78">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a8d7224fe162a50f062ee1328b0968e15">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;narrow</emphasis>
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::is_same_v&lt;T,&#32;std::wstring&gt;;&#32;<emphasis role="comment">//&#32;widen</emphasis>
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a4123c1368fa8dd3bb05aff779a3afbfa">can_partially_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">can_represent_native</link>;
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::string;
1828 &#32;&#32;&#32;&#32;};
1829 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1830 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::wstring&gt;&#32;:&#32;wstring_traits&lt;std::wstring&gt;
1831 &#32;&#32;&#32;&#32;{};
1832 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1833 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::wstring_view&gt;&#32;:&#32;wstring_traits&lt;std::wstring_view&gt;
1834 &#32;&#32;&#32;&#32;{};
1835 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1836 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;wstring_traits&lt;const&#32;wchar_t*&gt;
1837 &#32;&#32;&#32;&#32;{};
1838 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1839 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>[N]&gt;&#32;:&#32;wstring_traits&lt;const&#32;wchar_t[N]&gt;
1840 &#32;&#32;&#32;&#32;{};
1841 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1842 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;wstring_traits&lt;wchar_t*&gt;
1843 &#32;&#32;&#32;&#32;{};
1844 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1845 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>[N]&gt;&#32;:&#32;wstring_traits&lt;wchar_t[N]&gt;
1846 &#32;&#32;&#32;&#32;{};
1847 <emphasis role="preprocessor">#endif</emphasis>
1848 
1849 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;other&#32;&apos;native&apos;&#32;value_traits&#32;specializations</emphasis>
1850 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;node_type&#32;NodeType&gt;
1851 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnative__value__traits">native_value_traits</link>
1852 &#32;&#32;&#32;&#32;{
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnative__value__traits_1acb9bb4c233e53efda4e52ee6b1d7c6a2">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;T;
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1a6e882a8f3b23326993e92f69aa5dca7e">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1aa085e6ea9dfd8bbe4e4bd95121b474e9">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1ae6816b96da077408cd540f9591ca2e8e">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1ab3e14472a7bcdb9a3676151edb811bfc">can_partially_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;NodeType;
1859 &#32;&#32;&#32;&#32;};
1860 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1861 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;bool,&#32;node_type::boolean&gt;
1862 &#32;&#32;&#32;&#32;{};
1863 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1864 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;date&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;date,&#32;node_type::date&gt;
1865 &#32;&#32;&#32;&#32;{};
1866 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1867 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_structtime">time</link>&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;time,&#32;node_type::time&gt;
1868 &#32;&#32;&#32;&#32;{};
1869 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1870 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_structdate__time">date_time</link>&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;date_time,&#32;node_type::date_time&gt;
1871 &#32;&#32;&#32;&#32;{};
1872 
1873 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;native&#32;value&#32;category&#32;queries</emphasis>
1874 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1875 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a360741865d63894a80dd761769957c4f">native_type_of</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structvalue__traits_1a1f52ae9fa00169bc44b9a9ff1269b89c">value_traits&lt;T&gt;::native_type</link>;
1876 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1877 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a0b9e60ca26c89aac055ec4e01170cb78">is_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::is_native</link>;
1878 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1879 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">can_represent_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::can_represent_native</link>;
1880 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1881 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a4123c1368fa8dd3bb05aff779a3afbfa">can_partially_represent_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::can_partially_represent_native</link>;
1882 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1883 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a8d7224fe162a50f062ee1328b0968e15">is_losslessly_convertible_to_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::is_losslessly_convertible_to_native</link>;
1884 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
1885 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a954dd8a60050010ad38f8e0112dc1645">is_natively_one_of</link>&#32;=&#32;is_one_of&lt;native_type_of&lt;T&gt;,&#32;U...&gt;;
1886 
1887 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;native&#32;value&#32;types&#32;=&gt;&#32;nodes</emphasis>
1888 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1889 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>
1890 &#32;&#32;&#32;&#32;{
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__wrapper_1a89443c60c6b1e6ab6af44c905bb3fdc7">type</link>&#32;=&#32;T;
1892 &#32;&#32;&#32;&#32;};
1893 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1894 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;const&#32;T&gt;
1895 &#32;&#32;&#32;&#32;{
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__wrapper_3_01const_01_t_01_4_1a179657b0738d239dd5e2a792cfa16930">type</link>&#32;=&#32;std::add_const_t&lt;typename&#32;node_wrapper&lt;T&gt;::type&gt;;
1897 &#32;&#32;&#32;&#32;};
1898 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1899 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;volatile&#32;T&gt;
1900 &#32;&#32;&#32;&#32;{
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__wrapper_3_01volatile_01_t_01_4_1a398491e1db8f6f029cc277e0a0d95245">type</link>&#32;=&#32;std::add_volatile_t&lt;typename&#32;node_wrapper&lt;T&gt;::type&gt;;
1902 &#32;&#32;&#32;&#32;};
1903 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1904 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;const&#32;volatile&#32;T&gt;
1905 &#32;&#32;&#32;&#32;{
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__wrapper_3_01const_01volatile_01_t_01_4_1a4e2bac7a7204493dbe3f242c4251bb7f">type</link>&#32;=&#32;std::add_const_t&lt;std::add_volatile_t&lt;typename&#32;node_wrapper&lt;T&gt;::type&gt;&gt;;
1907 &#32;&#32;&#32;&#32;};
1908 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1909 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>&gt;
1910 &#32;&#32;&#32;&#32;{
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classvalue">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>;
1912 &#32;&#32;&#32;&#32;};
1913 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1914 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;
1915 &#32;&#32;&#32;&#32;{
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classvalue">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>;
1917 &#32;&#32;&#32;&#32;};
1918 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1919 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;double&gt;
1920 &#32;&#32;&#32;&#32;{
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classvalue">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;double&gt;</link>;
1922 &#32;&#32;&#32;&#32;};
1923 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1924 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;
1925 &#32;&#32;&#32;&#32;{
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classvalue">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>;
1927 &#32;&#32;&#32;&#32;};
1928 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1929 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;date&gt;
1930 &#32;&#32;&#32;&#32;{
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classvalue">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;date&gt;</link>;
1932 &#32;&#32;&#32;&#32;};
1933 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1934 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="_structtime">time</link>&gt;
1935 &#32;&#32;&#32;&#32;{
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classvalue">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;time&gt;</link>;
1937 &#32;&#32;&#32;&#32;};
1938 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1939 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="_structdate__time">date_time</link>&gt;
1940 &#32;&#32;&#32;&#32;{
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classvalue">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>;
1942 &#32;&#32;&#32;&#32;};
1943 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1944 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a44f601b3d02e062b7ec543291aa84fcb">wrap_node</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnode__wrapper">node_wrapper&lt;std::remove_reference_t&lt;T&gt;</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1945 
1946 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nodes&#32;=&gt;&#32;native&#32;value&#32;types</emphasis>
1947 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1948 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>
1949 &#32;&#32;&#32;&#32;{
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__unwrapper_1a934a1e8343e2cf1df8593c25cd8e3dcc">type</link>&#32;=&#32;T;
1951 &#32;&#32;&#32;&#32;};
1952 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1953 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
1954 &#32;&#32;&#32;&#32;{
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__unwrapper_3_01value_3_01_t_01_4_01_4_1aee11bcfaf23361418a6e3c730ffb278b">type</link>&#32;=&#32;T;
1956 &#32;&#32;&#32;&#32;};
1957 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1958 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;const&#32;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
1959 &#32;&#32;&#32;&#32;{
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__unwrapper_3_01const_01value_3_01_t_01_4_01_4_1aba6aaee126f415d2df10b2d77d2fd490">type</link>&#32;=&#32;std::add_const_t&lt;T&gt;;
1961 &#32;&#32;&#32;&#32;};
1962 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1963 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;volatile&#32;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
1964 &#32;&#32;&#32;&#32;{
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__unwrapper_3_01volatile_01value_3_01_t_01_4_01_4_1a74537af5ae694e72292c4c2364f0dd5e">type</link>&#32;=&#32;std::add_volatile_t&lt;T&gt;;
1966 &#32;&#32;&#32;&#32;};
1967 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1968 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;const&#32;volatile&#32;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
1969 &#32;&#32;&#32;&#32;{
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnode__unwrapper_3_01const_01volatile_01value_3_01_t_01_4_01_4_1a1847dddc1c44c4e1977c6c3a2da1b99d">type</link>&#32;=&#32;std::add_volatile_t&lt;std::add_const_t&lt;T&gt;&gt;;
1971 &#32;&#32;&#32;&#32;};
1972 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1973 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a0f4621a6694e07daea7a5c0282138524">unwrap_node</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnode__unwrapper">node_unwrapper&lt;std::remove_reference_t&lt;T&gt;</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1974 
1975 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1976 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>
1977 &#32;&#32;&#32;&#32;{
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::type</link>;
1979 &#32;&#32;&#32;&#32;};
1980 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1981 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>&lt;<link linkend="_classtable">table</link>&gt;
1982 &#32;&#32;&#32;&#32;{
1983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;node_type::table;
1984 &#32;&#32;&#32;&#32;};
1985 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1986 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>&lt;<link linkend="_classarray">array</link>&gt;
1987 &#32;&#32;&#32;&#32;{
1988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;node_type::array;
1989 &#32;&#32;&#32;&#32;};
1990 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1991 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
1992 &#32;&#32;&#32;&#32;{
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;node_type::none;
1994 &#32;&#32;&#32;&#32;};
1995 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1996 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;node_type&#32;<link linkend="_toml_8hpp_1a2ca921a72e58d33056ffcf88b9a2ae8d">node_type_of</link>&#32;=&#32;<link linkend="_structnode__type__getter">node_type_getter&lt;unwrap_node&lt;remove_cvref&lt;T&gt;</link>&gt;&gt;<link linkend="_classvalue">::value</link>;
1997 
1998 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConvertFrom&gt;
1999 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a0b26579e78da4e151c2aaff1101d9d63">is_constructible_or_convertible</link>&#32;=&#32;std::is_constructible_v&lt;T,&#32;ConvertFrom&gt;&#32;<emphasis role="comment">//</emphasis>
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_convertible_v&lt;ConvertFrom,&#32;T&gt;;
2001 }
2002 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
2003 
2004 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
2005 {
2006 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2007 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_table&#32;=&#32;std::is_same_v&lt;impl::remove_cvref&lt;T&gt;,&#32;<link linkend="_classtable">table</link>&gt;;
2008 
2009 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2010 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>&#32;=&#32;std::is_same_v&lt;impl::remove_cvref&lt;T&gt;,&#32;<link linkend="_classarray">array</link>&gt;;
2011 
2012 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2013 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1aa34941ab50c25915afb9afe528fea814">is_container</link>&#32;=&#32;is_table&lt;T&gt;&#32;||&#32;is_array&lt;T&gt;;
2014 
2015 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2016 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a5d9214f3694adcc143822884ec06aac6">is_string</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&gt;;
2019 
2020 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2021 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a8b617e5248756c383118df7cf633176c">is_integer</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>&gt;;
2024 
2025 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2026 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;double&gt;</link>&gt;;
2029 
2030 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2031 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a1e443b4df05673f810658b66cb1f628d">is_number</link>&#32;=&#32;is_integer&lt;T&gt;&#32;||&#32;is_floating_point&lt;T&gt;;
2032 
2033 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2034 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
2036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>&gt;;
2037 
2038 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2039 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date&gt;</link>&gt;;
2042 
2043 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2044 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
2046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;time&gt;</link>&gt;;
2047 
2048 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2049 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
2051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>&gt;;
2052 
2053 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2054 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a7ecc8ff96d2556cce78ebef9c0433601">is_chronological</link>&#32;=&#32;is_date&lt;T&gt;&#32;||&#32;is_time&lt;T&gt;&#32;||&#32;is_date_time&lt;T&gt;;
2055 
2056 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2057 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1afced5bc5ef559606e3d75268ca601709">is_value</link>&#32;=&#32;is_string&lt;T&gt;&#32;||&#32;is_number&lt;T&gt;&#32;||&#32;is_boolean&lt;T&gt;&#32;||&#32;is_chronological&lt;T&gt;;
2058 
2059 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2060 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1adab17769fd14cb533f58e9600c31701c">is_node</link>&#32;=&#32;std::is_same_v&lt;toml::node,&#32;impl::remove_cvref&lt;T&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
2061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_base_of_v&lt;toml::node,&#32;impl::remove_cvref&lt;T&gt;&gt;;
2062 
2063 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2064 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1ac0b3c59d6626e469f1a2d97359ac0892">is_node_view</link>&#32;=&#32;impl::is_one_of&lt;impl::remove_cvref&lt;T&gt;,&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>,&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;;
2065 }
2066 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
2067 
2068 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
2069 {
2070 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2071 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
2072 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::underlying_type_t&lt;T&gt;&#32;unwrap_enum(T&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
2073 &#32;&#32;&#32;&#32;{
2074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type_t&lt;T&gt;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
2075 &#32;&#32;&#32;&#32;}
2076 
2077 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Q:&#32;&quot;why&#32;not&#32;use&#32;std::fpclassify?&quot;</emphasis>
2078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A:&#32;Because&#32;it&#32;gets&#32;broken&#32;by&#32;-ffast-math&#32;and&#32;friends</emphasis>
2079 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;fp_class&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>
2080 &#32;&#32;&#32;&#32;{
2081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ok,
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;neg_inf,
2083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_inf,
2084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nan
2085 &#32;&#32;&#32;&#32;};
2086 
2087 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2088 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;fp_class&#32;<link linkend="_toml_8hpp_1a2c39cdb56141a8d5637c9933c53e8bb6">fpclassify</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
2089 &#32;&#32;&#32;&#32;{
2090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>));
2091 
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_namespacesign">sign</link>&#32;&#32;&#32;&#32;&#32;=&#32;0b1000000000000000000000000000000000000000000000000000000000000000ull;
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;exponent&#32;=&#32;0b0111111111110000000000000000000000000000000000000000000000000000ull;
2094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;mantissa&#32;=&#32;0b0000000000001111111111111111111111111111111111111111111111111111ull;
2095 
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;val_bits;
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(&amp;val_bits,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((val_bits&#32;&amp;&#32;exponent)&#32;!=&#32;exponent)
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fp_class::ok;
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((val_bits&#32;&amp;&#32;mantissa))
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fp_class::nan;
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(val_bits&#32;&amp;&#32;<link linkend="_namespacesign">sign</link>)&#32;?&#32;fp_class::neg_inf&#32;:&#32;fp_class::pos_inf;
2103 &#32;&#32;&#32;&#32;}
2104 
2105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Q:&#32;&quot;why&#32;not&#32;use&#32;std::find&#32;and&#32;std::min?&quot;</emphasis>
2106 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A:&#32;Because&#32;&lt;algorithm&gt;&#32;is&#32;_huge_&#32;and&#32;these&#32;would&#32;be&#32;the&#32;only&#32;things&#32;I&#32;used&#32;from&#32;it.</emphasis>
2107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;I&#32;don&apos;t&#32;want&#32;to&#32;impose&#32;such&#32;a&#32;heavy&#32;compile-time&#32;burden&#32;on&#32;users.</emphasis>
2108 
2109 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2110 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2111 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(Iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;Iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;needle)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;decltype(&amp;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>))
2113 &#32;&#32;&#32;&#32;{
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>++)
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;==&#32;needle)
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(*start);
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
2118 &#32;&#32;&#32;&#32;}
2119 
2120 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2121 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2122 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
2123 &#32;&#32;&#32;&#32;{
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;?&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;
2125 &#32;&#32;&#32;&#32;}
2126 }
2127 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
2128 
2129 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2130 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
2131 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
2132 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
2133 <emphasis role="preprocessor">#endif</emphasis>
2134 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
2135 
2136 <emphasis role="comment">//********&#32;&#32;impl/print_to_stream.h&#32;&#32;************************************************************************************</emphasis>
2137 
2138 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
2139 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2140 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
2141 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
2142 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
2143 <emphasis role="preprocessor">#undef&#32;min</emphasis>
2144 <emphasis role="preprocessor">#undef&#32;max</emphasis>
2145 <emphasis role="preprocessor">#endif</emphasis>
2146 
2147 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
2148 {
2149 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Q:&#32;&quot;why&#32;does&#32;print_to_stream()&#32;exist?&#32;why&#32;not&#32;just&#32;use&#32;ostream::write(),&#32;ostream::put()&#32;etc?&quot;</emphasis>
2150 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A:&#32;-&#32;I&apos;m&#32;using&#32;&lt;charconv&gt;&#32;to&#32;format&#32;numerics.&#32;Faster&#32;and&#32;locale-independent.</emphasis>
2151 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;-&#32;I&#32;can&#32;(potentially)&#32;avoid&#32;forcing&#32;users&#32;to&#32;drag&#32;in&#32;&lt;sstream&gt;&#32;and&#32;&lt;iomanip&gt;.</emphasis>
2152 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;-&#32;Strings&#32;in&#32;C++.&#32;Honestly.</emphasis>
2153 
2154 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2155 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
2156 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>);
2157 
2158 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;std::string_view);
2160 
2161 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2162 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;);
2163 
2164 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2165 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">char</emphasis>);
2166 
2167 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2169 
2170 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2172 
2173 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2174 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2175 
2176 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2177 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2178 
2179 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2180 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2181 
2182 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2183 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2184 
2185 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2186 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2187 
2188 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2189 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2190 
2191 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2193 
2194 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2195 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0);
2196 
2197 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">float</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">bool</emphasis>&#32;relaxed_precision&#32;=&#32;<emphasis role="keyword">false</emphasis>);
2199 
2200 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">double</emphasis>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">bool</emphasis>&#32;relaxed_precision&#32;=&#32;<emphasis role="keyword">false</emphasis>);
2202 
2203 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keywordtype">bool</emphasis>);
2205 
2206 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::date&amp;);
2208 
2209 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2210 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time&amp;);
2211 
2212 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time_offset&amp;);
2214 
2215 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::date_time&amp;);
2217 
2218 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2219 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;);
2220 
2221 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2222 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;);
2223 
2224 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
2225 
2226 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;);
2228 
2229 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2230 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;);
2231 
2232 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2233 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&amp;);
2234 
2235 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2236 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>&amp;);
2237 
2238 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2239 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;double&gt;</link>&amp;);
2240 
2241 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2242 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>&amp;);
2243 
2244 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2245 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date&gt;</link>&amp;);
2246 
2247 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2248 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;time&gt;</link>&amp;);
2249 
2250 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2251 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>&amp;);
2252 
2253 <emphasis role="preprocessor">#endif</emphasis>
2254 
2255 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
2256 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;U&amp;&#32;bookend)
2257 &#32;&#32;&#32;&#32;{
2258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;bookend);
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
2260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;bookend);
2261 &#32;&#32;&#32;&#32;}
2262 }
2263 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
2264 
2265 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2266 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
2267 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
2268 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
2269 <emphasis role="preprocessor">#endif</emphasis>
2270 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
2271 
2272 <emphasis role="comment">//********&#32;&#32;impl/source_region.h&#32;&#32;**************************************************************************************</emphasis>
2273 
2274 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
2275 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2276 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
2277 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
2278 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
2279 <emphasis role="preprocessor">#undef&#32;min</emphasis>
2280 <emphasis role="preprocessor">#undef&#32;max</emphasis>
2281 <emphasis role="preprocessor">#endif</emphasis>
2282 
2283 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
2284 {
2285 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>source_index&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>;
2286 
2287 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_source__region_8h_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&#32;=&#32;std::shared_ptr&lt;const&#32;std::string&gt;;
2288 
2289 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_toml_8hpp_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_structsource__position">source_position</link>
2290 &#32;&#32;&#32;&#32;{
2291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_index&#32;line;
2292 
2293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_index&#32;column;
2294 
2295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
2297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;line&#32;&gt;&#32;source_index{}&#32;<emphasis role="comment">//</emphasis>
2299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;column&#32;&gt;&#32;source_index{};
2300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2301 
2302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsource__position_1a5f01f89fd02f2cd6b1e8fb7760c3a5d7">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.line&#32;==&#32;rhs.line&#32;<emphasis role="comment">//</emphasis>
2306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.column&#32;==&#32;rhs.column;
2307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2308 
2309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsource__position_1a2112294fcdbb8df8b14ded867b99ef24">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2314 
2315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2316 
2317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;pack(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
2319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(pos.line)&#32;&lt;&lt;&#32;32&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(pos.column);
2321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2322 
2323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2324 
2325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsource__position_1a844dfdf3b73149879070142eeb69712b">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;&#32;pack(rhs);
2329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2330 
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsource__position_1ac0c0e656e17c7fd26cef0170cdd41bc9">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;=&#32;pack(rhs);
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2336 
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsource__position_1a68a1326c76ec10ce456a66bd64b7cf93">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;&#32;pack(rhs);
2341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2342 
2343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsource__position_1a1b19b7e0e6f3d5d7e8f7682b7dcf2b31">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;=&#32;pack(rhs);
2347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2348 
2349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_structsource__position_1adff6ba2a042bbaa4be4eaf88c4b58062">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;rhs)
2350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
2352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
2353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2354 &#32;&#32;&#32;&#32;};
2355 
2356 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsource__region">source_region</link>
2357 &#32;&#32;&#32;&#32;{
2358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;<link linkend="_structsource__region_1af660193700792e7b770f11af7182b440">begin</link>;
2359 
2360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;<link linkend="_structsource__region_1a38f9736793a9849af4edd1326be7efdf">end</link>;
2361 
2362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_source__region_8h_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&#32;<link linkend="_structsource__region_1a0154e7dd187c9eb456c236d98a6a5451">path</link>;
2363 
2364 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
2365 
2366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;std::wstring&gt;&#32;<link linkend="_structsource__region_1a3d8e8e28645ba3d917605622e452047e">wide_path</link>()<emphasis role="keyword">&#32;const</emphasis>
2368 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classpath">path</link>&#32;||&#32;<link linkend="_classpath">path</link>-&gt;<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>())
2370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
2371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;impl::widen(*<link linkend="_classpath">path</link>)&#32;};
2372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2373 
2374 <emphasis role="preprocessor">#endif</emphasis>
2375 
2376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_structsource__region_1a0c599ab0b1f64a1ba95a0a90b95888fa">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;rhs)
2377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
2379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
2380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2381 &#32;&#32;&#32;&#32;};
2382 }
2383 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
2384 
2385 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2386 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
2387 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
2388 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
2389 <emphasis role="preprocessor">#endif</emphasis>
2390 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
2391 
2392 <emphasis role="comment">//********&#32;&#32;impl/date_time.h&#32;&#32;******************************************************************************************</emphasis>
2393 
2394 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
2395 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2396 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
2397 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
2398 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
2399 <emphasis role="preprocessor">#undef&#32;min</emphasis>
2400 <emphasis role="preprocessor">#undef&#32;max</emphasis>
2401 <emphasis role="preprocessor">#endif</emphasis>
2402 
2403 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
2404 {
2405 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_toml_8hpp_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;date
2406 &#32;&#32;&#32;&#32;{
2407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;year;
2408 
2409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;month;
2410 
2411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;day;
2412 
2413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;date()&#32;noexcept&#32;=&#32;default;
2415 
2416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((impl::<link linkend="_toml_8hpp_1a76e834946c5dd85fc42b186f7ce325aa">all_integral</link>&lt;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294a5596231eabd6cf29050967d5ac83ad84">Y</link>,&#32;M,&#32;D&gt;),&#32;typename&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294a5596231eabd6cf29050967d5ac83ad84">Y</link>,&#32;typename&#32;M,&#32;typename&#32;D)
2417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;date(<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294a5596231eabd6cf29050967d5ac83ad84">Y</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;M&#32;m,&#32;D&#32;d)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
2419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;year{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)&#32;},
2420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;month{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(m)&#32;},
2421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(d)&#32;}
2422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2423 
2424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.year&#32;==&#32;rhs.year&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.month&#32;==&#32;rhs.month&#32;<emphasis role="comment">//</emphasis>
2429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.day&#32;==&#32;rhs.day;
2430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2431 
2432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
2436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2437 
2438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2439 
2440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;pack(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;d)&#32;<emphasis role="keyword">noexcept</emphasis>
2442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(d.year)&#32;&lt;&lt;&#32;16)&#32;|&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(d.month)&#32;&lt;&lt;&#32;8)
2444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(d.day);
2445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2446 
2447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2448 
2449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;&#32;pack(rhs);
2453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2454 
2455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;=&#32;pack(rhs);
2459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2460 
2461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;&#32;pack(rhs);
2465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2466 
2467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;=&#32;pack(rhs);
2471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2472 
2473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;date&amp;&#32;rhs)
2474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
2476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2478 &#32;&#32;&#32;&#32;};
2479 
2480 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_toml_8hpp_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_structtime">time</link>
2481 &#32;&#32;&#32;&#32;{
2482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;hour;
2483 
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;minute;
2485 
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;second;
2487 
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;nanosecond;
2489 
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime_1ade0dc28bfe870c974514cdf14c203934">time</link>()&#32;noexcept&#32;=&#32;default;
2492 
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((impl::<link linkend="_toml_8hpp_1a76e834946c5dd85fc42b186f7ce325aa">all_integral</link>&lt;H,&#32;M,&#32;S,&#32;NS&gt;),
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;H,
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;M,
2496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;S&#32;&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>,
2497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;NS&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>)
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;<link linkend="_structtime">time</link>(H&#32;h,&#32;M&#32;m,&#32;S&#32;s&#32;=&#32;S{},&#32;NS&#32;ns&#32;=&#32;NS{})&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;hour{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&gt;(h)&#32;},
2501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minute{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&gt;(m)&#32;},
2502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&gt;(s)&#32;},
2503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nanosecond{&#32;static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&gt;(ns)&#32;}
2504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2505 
2506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.hour&#32;==&#32;rhs.hour&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.minute&#32;==&#32;rhs.minute&#32;<emphasis role="comment">//</emphasis>
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.second&#32;==&#32;rhs.second&#32;<emphasis role="comment">//</emphasis>
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.nanosecond&#32;==&#32;rhs.nanosecond;
2513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2514 
2515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
2519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2520 
2521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2522 
2523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;pack(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>
2525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.hour)&#32;&lt;&lt;&#32;48&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.minute)&#32;&lt;&lt;&#32;40
2527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.second)&#32;&lt;&lt;&#32;32&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(t.nanosecond);
2528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2529 
2530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2531 
2532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;&#32;pack(rhs);
2536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2537 
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&lt;=&#32;pack(rhs);
2542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2543 
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;&#32;pack(rhs);
2548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2549 
2550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pack(lhs)&#32;&gt;=&#32;pack(rhs);
2554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2555 
2556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime">time</link>&amp;&#32;rhs)
2557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
2559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
2560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2561 &#32;&#32;&#32;&#32;};
2562 
2563 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_toml_8hpp_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_structtime__offset">time_offset</link>
2564 &#32;&#32;&#32;&#32;{
2565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a269259c924dce846340ddbb810db2e3c">int16_t</link>&#32;minutes;
2566 
2567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime__offset_1ad84f7e988cbb0c27e26bfd7e52d0eac3">time_offset</link>()&#32;noexcept&#32;=&#32;default;
2569 
2570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((impl::<link linkend="_toml_8hpp_1a76e834946c5dd85fc42b186f7ce325aa">all_integral</link>&lt;H,&#32;M&gt;),&#32;typename&#32;H,&#32;typename&#32;M)
2571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;<link linkend="_structtime__offset">time_offset</link>(H&#32;h,&#32;M&#32;m)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
2573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;minutes{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a269259c924dce846340ddbb810db2e3c">int16_t</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>impl::common_signed_type&lt;H,&#32;M&gt;<emphasis role="keyword">&gt;</emphasis>(h)
2574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;impl::common_signed_type&lt;H,&#32;M&gt;{&#32;60&#32;}
2575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>impl::common_signed_type&lt;H,&#32;M&gt;<emphasis role="keyword">&gt;</emphasis>(m))&#32;}
2576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2577 
2578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a5d652a7be27663b66c56942a042fc9a9">operator==</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;==&#32;rhs.minutes;
2582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2583 
2584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1ad02db0b046f4a4e92793bad8c69b2c8e">operator!=</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;!=&#32;rhs.minutes;
2588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2589 
2590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a2377e61c0bf984d009cfd1e46bd09fdd">operator&lt;</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&lt;&#32;rhs.minutes;
2594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2595 
2596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a079097ba2d7163ea8f1f86a0c25a8663">operator&lt;=</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&lt;=&#32;rhs.minutes;
2600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2601 
2602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a1f37b2939e67b20d2f83fc4fcc27a1cd">operator&gt;</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&gt;&#32;rhs.minutes;
2606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2607 
2608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structtime__offset_1a3db9bc80d52b9f10aca43acaea3c403f">operator&gt;=</link>(<link linkend="_structtime__offset">time_offset</link>&#32;lhs,&#32;<link linkend="_structtime__offset">time_offset</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.minutes&#32;&gt;=&#32;rhs.minutes;
2612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2613 
2614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_structtime__offset_1a0f8d2f1d0d3dd81facb17ae58dd3df6d">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structtime__offset">time_offset</link>&amp;&#32;rhs)
2615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
2617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
2618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2619 &#32;&#32;&#32;&#32;};
2620 
2621 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a0f6a688021ea2fc13e1c76acd64e4bbc">TOML_HAS_CUSTOM_OPTIONAL_TYPE</link>,&#32;custopt,&#32;stdopt);
2622 
2623 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdate__time">date_time</link>
2624 &#32;&#32;&#32;&#32;{
2625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::date&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>;
2626 
2627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::time&#32;<link linkend="_structdate__time_1a41c1a6580adadd5d1bcb206cd801b42a">time</link>;
2628 
2629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;toml::time_offset&gt;&#32;<link linkend="_structdate__time_1a1402dc3f43aab1b74cec5ef4f11087fd">offset</link>;
2630 
2631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdate__time_1a79f7461304efaf559893495fb1f2ad1b">date_time</link>()&#32;noexcept&#32;=&#32;default;
2633 
2634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constexpr&#32;<link linkend="_structdate__time">date_time</link>(const&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>&amp;&#32;d,&#32;const&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_structtime">time</link>&amp;&#32;t)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
2636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{&#32;d&#32;},
2637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{&#32;t&#32;},
2638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{}&#32;<emphasis role="comment">//&#32;TINAE&#32;-&#32;icc&#32;bugfix</emphasis>
2639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2640 
2641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structdate__time_1a1e661ff41f89accf42283719880523cf">date_time</link>(<emphasis role="keyword">const</emphasis>&#32;toml::date&amp;&#32;d)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
2643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{&#32;d&#32;},
2644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{},
2645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{}&#32;<emphasis role="comment">//&#32;TINAE&#32;-&#32;icc&#32;bugfix</emphasis>
2646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2647 
2648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structdate__time_1af30b39e0cd336adc49196329f2a38ba9">date_time</link>(<emphasis role="keyword">const</emphasis>&#32;toml::time&amp;&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
2650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{},
2651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{&#32;t&#32;},
2652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{}&#32;<emphasis role="comment">//&#32;TINAE&#32;-&#32;icc&#32;bugfix</emphasis>
2653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2654 
2655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_structdate__time_1adaaa9f1ae45614a97207bf3663068240">date_time</link>(<emphasis role="keyword">const</emphasis>&#32;toml::date&amp;&#32;d,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time&amp;&#32;t,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time_offset&amp;&#32;off)&#32;noexcept
2657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdate__time_1a2060f3fbddcdf9a95d040ef847b3077b">date</link>{&#32;d&#32;},
2658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>{&#32;t&#32;},
2659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{&#32;off&#32;}
2660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2661 
2662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a9056032bb0e8f92a5009fb6e53f943e3">is_local</link>()&#32;const&#32;noexcept
2664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>.has_value();
2666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2667 
2668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a38c66565292f0caffe111a10a654690b">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.date&#32;==&#32;rhs.date&#32;<emphasis role="comment">//</emphasis>
2672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.time&#32;==&#32;rhs.time&#32;<emphasis role="comment">//</emphasis>
2673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;lhs.offset&#32;==&#32;rhs.offset;
2674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2675 
2676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a2c6be102d18ce9e09068af8dfd04ece6">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
2680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2681 
2682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a5fb1aba93d6fb3355f6993f033fa0a69">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.date&#32;!=&#32;rhs.date)
2686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.date&#32;&lt;&#32;rhs.date;
2687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.time&#32;!=&#32;rhs.time)
2688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.time&#32;&lt;&#32;rhs.time;
2689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.offset&#32;&lt;&#32;rhs.offset;
2690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2691 
2692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a66bb2da2653c1512df0a3f796326fd02">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.date&#32;!=&#32;rhs.date)
2696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.date&#32;&lt;&#32;rhs.date;
2697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.time&#32;!=&#32;rhs.time)
2698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.time&#32;&lt;&#32;rhs.time;
2699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.offset&#32;&lt;=&#32;rhs.offset;
2700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2701 
2702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1a2482fb5a2b13f18b7589a627855529af">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;&lt;=&#32;rhs);
2706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2707 
2708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdate__time_1ab7c914ad3875581f9fbe90cba68cade9">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;&lt;&#32;rhs);
2712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2713 
2714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_structdate__time_1ada883abc2927d0dc77c81e4f48e719bb">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdate__time">date_time</link>&amp;&#32;rhs)
2715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
2717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
2718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2719 &#32;&#32;&#32;&#32;};
2720 
2721 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE</emphasis>
2722 }
2723 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
2724 
2725 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2726 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
2727 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
2728 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
2729 <emphasis role="preprocessor">#endif</emphasis>
2730 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
2731 
2732 <emphasis role="comment">//********&#32;&#32;impl/at_path.h&#32;&#32;********************************************************************************************</emphasis>
2733 
2734 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
2735 {
2736 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2737 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>parse_path_callback&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>*)(<emphasis role="keywordtype">void</emphasis>*,&#32;T);
2738 
2739 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2740 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8b559ae46e60a5b64d0b3607f8d556c8">parse_path</link>(std::string_view,
2741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*,
2742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_path_callback&lt;std::string_view&gt;,
2743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_path_callback&lt;size_t&gt;);
2744 }
2745 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
2746 
2747 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
2748 {
2749 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2750 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2751 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
2752 
2753 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2754 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2755 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
2756 
2757 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
2758 
2759 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2760 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2761 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;std::wstring_view&#32;<link linkend="_classpath">path</link>);
2762 
2763 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2764 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
2765 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;std::wstring_view&#32;<link linkend="_classpath">path</link>);
2766 
2767 <emphasis role="preprocessor">#endif</emphasis>
2768 }
2769 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
2770 
2771 <emphasis role="comment">//********&#32;&#32;impl/std_vector.h&#32;&#32;*****************************************************************************************</emphasis>
2772 
2773 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
2774 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
2775 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
2776 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
2777 
2778 <emphasis role="comment">//********&#32;&#32;impl/path.h&#32;&#32;***********************************************************************************************</emphasis>
2779 
2780 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
2781 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
2782 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
2783 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
2784 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
2785 <emphasis role="preprocessor">#undef&#32;min</emphasis>
2786 <emphasis role="preprocessor">#undef&#32;max</emphasis>
2787 <emphasis role="preprocessor">#endif</emphasis>
2788 
2789 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
2790 {
2791 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;path_component_type&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>
2792 &#32;&#32;&#32;&#32;{
2793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0x1,
2794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_index&#32;=&#32;0x2
2795 &#32;&#32;&#32;&#32;};
2796 
2797 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classpath__component">path_component</link>
2798 &#32;&#32;&#32;&#32;{
2799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>storage_t
2800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=
2802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>)&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(std::string)&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(std::string)&#32;:&#32;sizeof(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>));
2803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;align&#32;=
2804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">alignof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>)&#32;&lt;&#32;<emphasis role="keyword">alignof</emphasis>(std::string)&#32;?&#32;<emphasis role="keyword">alignof</emphasis>(std::string)&#32;:&#32;<link linkend="__classes_2lib_2include_2stdalign_8h_1abb241e4f00c28465643e1010172aef04">alignof</link>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>));
2805 
2806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(align)&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;bytes[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>];
2807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(storage_t::align)&#32;<emphasis role="keyword">mutable</emphasis>&#32;storage_t&#32;value_storage_;
2809 
2810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_component_type&#32;type_;
2811 
2812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
2814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
2815 
2816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Type&gt;
2817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Type*&#32;get_as(storage_t&amp;&#32;s)&#32;<emphasis role="keyword">noexcept</emphasis>
2819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_std__new_8h_1a50ef717d8403c782d1405902faca4b80">TOML_LAUNDER</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>Type*<emphasis role="keyword">&gt;</emphasis>(s.bytes));
2821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2822 
2823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;store_key(std::string_view&#32;key,&#32;storage_t&amp;&#32;storage_)
2824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">string</emphasis>{&#32;key&#32;};
2826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2827 
2828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;store_index(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>,&#32;storage_t&amp;&#32;storage_)&#32;<emphasis role="keyword">noexcept</emphasis>
2829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">size_t</emphasis>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;};
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2832 
2833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>()&#32;noexcept
2834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::key)
2836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_as&lt;std::string&gt;(value_storage_)-&gt;~basic_string();
2837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2838 
2839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;index_ref()&#32;noexcept
2841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::array_index);
2843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;size_t&gt;(value_storage_);
2844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2845 
2846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
2847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&amp;&#32;key_ref()&#32;noexcept
2848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::key);
2850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;std::string&gt;(value_storage_);
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2852 
2853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2854 
2855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component</link>();
2858 
2859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a9c746d28c254c75d9ffcac9a64045941">path_component</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
2862 
2863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1abb61b78ec5f2ac784772ddfd573bc4db">path_component</link>(std::string_view&#32;key);
2866 
2867 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
2868 
2869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>(std::wstring_view&#32;key);
2872 
2873 <emphasis role="preprocessor">#endif</emphasis>
2874 
2875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a3e9d15285e448a235228d328a69afd48">path_component</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;pc);
2878 
2879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1acaef6dabd2dda07c4370e38df0d9f5a3">path_component</link>(<link linkend="_classpath__component">path_component</link>&amp;&amp;&#32;pc)&#32;<emphasis role="keyword">noexcept</emphasis>;
2882 
2883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs);
2885 
2886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1ae825c9771ffc7cab2a1fa740d532ddd7">operator=</link>(<link linkend="_classpath__component">path_component</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
2888 
2889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a824d910645a82cbc2ccc59e4041c9d66">operator=</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_index)&#32;<emphasis role="keyword">noexcept</emphasis>;
2891 
2892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a7311a244dd2fdfd4e76f18388b1e3f6d">operator=</link>(std::string_view&#32;new_key);
2894 
2895 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
2896 
2897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;operator=(std::wstring_view&#32;new_key);
2899 
2900 <emphasis role="preprocessor">#endif</emphasis>
2901 
2902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a579908366c69cec6136aba87aae49e30">~path_component</link>()&#32;noexcept
2903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
2905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2906 
2907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>()&#32;const&#32;noexcept
2909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::array_index);
2911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;size_t&gt;(value_storage_);
2912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2913 
2914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>()&#32;const&#32;noexcept
2916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>();
2918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2919 
2920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>()&#32;const&#32;noexcept
2922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(type_&#32;==&#32;path_component_type::key);
2924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;std::string&gt;(value_storage_);
2925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2926 
2927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key();
2931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2932 
2933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_component_type&#32;<link linkend="_classpath__component_1abdcd4310f75127c787ed709b0bb29873">type</link>()&#32;const&#32;noexcept
2935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;type_;
2937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2938 
2939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath__component_1a48922fdad9f293b0292e7af6b6ab2895">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
2943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2944 
2945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath__component_1a586e016a0434ffdcc6309ba031c29893">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
2949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2950 &#32;&#32;&#32;&#32;};
2951 
2952 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classpath">path</link>
2953 &#32;&#32;&#32;&#32;{
2954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2955 
2956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;path_component&gt;&#32;components_;
2957 
2958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_to(std::ostream&amp;)&#32;<emphasis role="keyword">const</emphasis>;
2960 
2961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
2962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
2963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
2964 
2965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2966 
2967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path</link>()&#32;noexcept&#32;=&#32;default;
2969 
2970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classpath">path</link>(<link linkend="_namespacestd">std</link>::string_view);
2973 
2974 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
2975 
2976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
2978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classpath">path</link>(std::wstring_view);
2979 
2980 <emphasis role="preprocessor">#endif</emphasis>
2981 
2982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1af8cb55c04bfdcdfb2aa066cdaacc6ea6">~path</link>()&#32;noexcept&#32;=&#32;default;
2983 
2984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(const&#32;<link linkend="_classpath">path</link>&amp;)&#32;=&#32;default;
2986 
2987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
2988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>(<link linkend="_classpath">path</link>&amp;&amp;)&#32;noexcept&#32;=&#32;default;
2989 
2990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;noexcept
2992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.<link linkend="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691">size</link>();
2994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2995 
2996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
2997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
2998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!components_.empty();
3000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3001 
3002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>()&#32;const&#32;noexcept
3004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.empty();
3006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3007 
3008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath_1a9cdc930401b6c973dd9c7d91b649f87e">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
3010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
3012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
3013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3014 
3015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath_1a1a6eaebc56ebf6dfcb3bccd110f2f46a">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
3019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
3020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3021 
3022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3023 
3024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a96333863378c9acd152057c39432e5eb">operator=</link>(<link linkend="_classpath">path</link>&amp;&amp;)&#32;noexcept&#32;=&#32;default;
3025 
3026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(<link linkend="_namespacestd">std</link>::string_view);
3028 
3029 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3030 
3031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator=(std::wstring_view);
3033 
3034 <emphasis role="preprocessor">#endif</emphasis>
3035 
3036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">assign</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)
3038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;p;
3040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3041 
3042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae054c9202b32da787732c0e117453786">assign</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;p)&#32;<emphasis role="keyword">noexcept</emphasis>
3044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(p);
3046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3047 
3048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1af4e4141b488a07eca915e66025e58f56">assign</link>(std::string_view&#32;str)
3050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;str;
3052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3053 
3054 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3055 
3056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;assign(std::wstring_view&#32;str)
3058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;str;
3060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3061 
3062 <emphasis role="preprocessor">#endif</emphasis>
3063 
3064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
3066 
3067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a64495dea1b6bd512bb83b3c09f1179b7">operator+=</link>(<link linkend="_classpath">path</link>&amp;&amp;);
3069 
3070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ada94a75d67f40659f162087348d795e6">operator+=</link>(std::string_view);
3072 
3073 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3074 
3075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;operator+=(std::wstring_view);
3077 
3078 <emphasis role="preprocessor">#endif</emphasis>
3079 
3080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa1716177c19817218cc4f98768932487">append</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)
3082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;p;
3084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3085 
3086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae0bb96cdbc740ecab6c9d6f4992b479d">append</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;p)
3088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(p);
3090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3091 
3092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a36b760eeb46ab56800b6d5d16a156cf7">append</link>(std::string_view&#32;str)
3094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;str;
3096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3097 
3098 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3099 
3100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;append(std::wstring_view&#32;str)
3102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;str;
3104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3105 
3106 <emphasis role="preprocessor">#endif</emphasis>
3107 
3108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;);
3110 
3111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a41b121bfb894bf24fbba2524efd0e1ac">prepend</link>(<link linkend="_classpath">path</link>&amp;&amp;);
3113 
3114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa15d82e160b9efe3bfa888b4bfb79b81">prepend</link>(std::string_view);
3116 
3117 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3118 
3119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;prepend(std::wstring_view);
3121 
3122 <emphasis role="preprocessor">#endif</emphasis>
3123 
3124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1ad5e5060120620271acb20e8a74f2021f">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;lhs;
3128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;rhs;
3129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
3130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3131 
3132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a48d54d0f3eb9f644a45102ee73f1cff5">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::string_view&#32;rhs)
3134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;lhs;
3136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;rhs;
3137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
3138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3139 
3140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a512781b98cad27ab8c8a59b110485fee">operator+</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;rhs;
3144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(lhs);
3145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
3146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3147 
3148 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3149 
3150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::wstring_view&#32;rhs)
3152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;lhs;
3154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;rhs;
3155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
3156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3157 
3158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(std::wstring_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;rhs;
3162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(lhs);
3163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
3164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3165 
3166 <emphasis role="preprocessor">#endif</emphasis>
3167 
3168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classpath_1a20e0b1c8c31800bc968cc1f67bc51556">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.print_to(os);
3172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
3173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3174 
3175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>()&#32;<emphasis role="keyword">const</emphasis>;
3178 
3179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;std::string()<emphasis role="keyword">&#32;const</emphasis>
3182 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
3183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str();
3184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3185 
3186 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3187 
3188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;wide_str()&#32;<emphasis role="keyword">const</emphasis>;
3191 
3192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;std::wstring()<emphasis role="keyword">&#32;const</emphasis>
3195 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
3196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wide_str();
3197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3198 
3199 <emphasis role="preprocessor">#endif</emphasis>
3200 
3201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a1a468cbd804317b18eafbaa91c06baf8">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
3203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
3205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3206 
3207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a1733dc9036ef632af15486e604c4b477">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
3209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
3211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3212 
3213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1af5859e43bd1db2967505992d3087a193">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::string_view&#32;rhs)
3216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
3218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3219 
3220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1ab673764882b72f84b82f34f51beeea6f">operator==</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;==&#32;lhs;
3225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3226 
3227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a17adb560b17accb885ba871f492e45f2">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::string_view&#32;rhs)
3230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;!=&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
3232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3233 
3234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classpath_1a0577876d473c22d81b5e3f6e519af57c">operator!=</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;!=&#32;lhs;
3239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3240 
3241 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3242 
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::wstring_view&#32;rhs)
3246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
3248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3249 
3250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(std::wstring_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;==&#32;lhs;
3255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3256 
3257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;std::wstring_view&#32;rhs)
3260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;!=&#32;<link linkend="_classpath">path</link>{&#32;rhs&#32;};
3262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3263 
3264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(std::wstring_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rhs&#32;!=&#32;lhs;
3269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3270 
3271 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3272 
3273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>&#32;=&#32;std::vector&lt;path_component&gt;::iterator;
3274 
3275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;=&#32;std::vector&lt;path_component&gt;::const_iterator;
3276 
3277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>&#32;<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>()&#32;noexcept
3279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.begin();
3281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3282 
3283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a43033074faacf0d7081045d7fbc97c32">iterator</link>&#32;<link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">end</link>()&#32;noexcept
3285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.end();
3287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3288 
3289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1a88f7b0b2f6b6b37e1920ec6f749fb12f">begin</link>()&#32;const&#32;noexcept
3291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.begin();
3293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3294 
3295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1ab572386110f4f6c174fc982857e0a9a3">end</link>()&#32;const&#32;noexcept
3297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.end();
3299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3300 
3301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1ac30c763b4f07605d526d8e1f9725e38c">cbegin</link>()&#32;const&#32;noexcept
3303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.begin();
3305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3306 
3307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="_classpath_1ad2bb6cbe2c811a1d66ea528e5fdf8732">cend</link>()&#32;const&#32;noexcept
3309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;components_.end();
3311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3312 
3313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link>()&#32;noexcept;
3315 
3316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;truncate(<emphasis role="keywordtype">size_t</emphasis>&#32;n);
3318 
3319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;truncated(<emphasis role="keywordtype">size_t</emphasis>&#32;n)&#32;const;
3322 
3323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;parent()&#32;const;
3326 
3327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;leaf(<emphasis role="keywordtype">size_t</emphasis>&#32;n&#32;=&#32;1)&#32;const;
3330 
3331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;subpath(<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<link linkend="_classpath_1a18d2cb1d269092fa67f1a5c4bf7adc59">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)&#32;const;
3334 
3335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;subpath(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>)&#32;const;
3338 &#32;&#32;&#32;&#32;};
3339 
3340 &#32;&#32;&#32;&#32;inline&#32;namespace&#32;<link linkend="_namespaceliterals">literals</link>
3341 &#32;&#32;&#32;&#32;{
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
3344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_tpath(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
3345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath">path</link>(std::string_view{&#32;str,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;});
3347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3348 &#32;&#32;&#32;&#32;}
3349 
3350 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3351 &#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
3352 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
3353 
3354 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3355 &#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
3356 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
3357 }
3358 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
3359 
3360 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
3361 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
3362 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
3363 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
3364 <emphasis role="preprocessor">#endif</emphasis>
3365 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
3366 
3367 <emphasis role="comment">//********&#32;&#32;impl/std_utility.h&#32;&#32;****************************************************************************************</emphasis>
3368 
3369 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
3370 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
3371 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
3372 
3373 <emphasis role="comment">//********&#32;&#32;impl/node.h&#32;&#32;***********************************************************************************************</emphasis>
3374 
3375 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
3376 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
3377 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
3378 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
3379 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
3380 <emphasis role="preprocessor">#undef&#32;min</emphasis>
3381 <emphasis role="preprocessor">#undef&#32;max</emphasis>
3382 <emphasis role="preprocessor">#endif</emphasis>
3383 
3384 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
3385 {
3386 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1aff57c07de29701e4a68a260317a08218">TOML_ABSTRACT_INTERFACE</link>&#32;<link linkend="_toml_8hpp_1a3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;node
3387 &#32;&#32;&#32;&#32;{
3388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3389 
3390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a05278d773b91496857f3113bdfc748d8">TOML_PARSER_TYPENAME</link>;
3391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__region">source_region</link>&#32;source_{};
3392 
3393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;get_value_exact()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;);
3396 
3397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;N&gt;
3398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ref_type_&#32;=&#32;std::conditional_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_reference_v&lt;T&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::copy_ref&lt;impl::copy_cv&lt;impl::unwrap_node&lt;T&gt;,&#32;std::remove_reference_t&lt;N&gt;&gt;,&#32;T&gt;,&#32;<emphasis role="comment">//</emphasis>
3401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::copy_cvref&lt;impl::unwrap_node&lt;T&gt;,&#32;N&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;;
3403 
3404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;N&gt;
3405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ref_type&#32;=&#32;std::conditional_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_reference_v&lt;N&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_type_&lt;T,&#32;N&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_type_&lt;T,&#32;std::add_lvalue_reference_t&lt;N&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
3409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;;
3410 
3411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;N&gt;
3412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;ref_type&lt;T,&#32;N&amp;&amp;&gt;&#32;do_ref(N&amp;&amp;&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>
3414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;impl::unwrap_node&lt;T&gt;;
3416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(toml::is_value&lt;unwrapped_type&gt;&#32;||&#32;toml::is_container&lt;unwrapped_type&gt;,
3417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;node::ref()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
3418 
3419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(
3420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n.template&#32;is&lt;unwrapped_type&gt;()
3421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;template&#32;type&#32;argument&#32;provided&#32;to&#32;toml::node::ref()&#32;didn&apos;t&#32;match&#32;the&#32;node&apos;s&#32;actual&#32;type&quot;</emphasis>);
3422 
3423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_ref&#32;=&#32;std::remove_volatile_t&lt;std::remove_reference_t&lt;N&gt;&gt;&amp;;
3424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>val_type&#32;=&#32;std::remove_volatile_t&lt;unwrapped_type&gt;;
3425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_ref&#32;&#32;=&#32;ref_type&lt;T,&#32;N&amp;&amp;&gt;;
3426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;out_ref&gt;);
3427 
3428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(toml::is_value&lt;unwrapped_type&gt;)
3429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>out_ref<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">const_cast&lt;</emphasis>node_ref<emphasis role="keyword">&gt;</emphasis>(n).template&#32;ref_cast&lt;val_type&gt;().get());
3430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>out_ref<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">const_cast&lt;</emphasis>node_ref<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;val_type&gt;());
3432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3433 
3434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
3435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node()&#32;<emphasis role="keyword">noexcept</emphasis>;
3437 
3438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node(<emphasis role="keyword">const</emphasis>&#32;node&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
3440 
3441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node(node&amp;&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
3443 
3444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;node&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
3446 
3447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;operator=(node&amp;&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
3449 
3450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;N&gt;
3451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ref_cast_type_&#32;=&#32;std::conditional_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_reference_v&lt;T&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::copy_ref&lt;impl::copy_cv&lt;impl::wrap_node&lt;T&gt;,&#32;std::remove_reference_t&lt;N&gt;&gt;,&#32;T&gt;,&#32;<emphasis role="comment">//</emphasis>
3454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::copy_cvref&lt;impl::wrap_node&lt;T&gt;,&#32;N&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;;
3456 
3457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;N&gt;
3458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>ref_cast_type&#32;=&#32;std::conditional_t&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_reference_v&lt;N&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_cast_type_&lt;T,&#32;N&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_cast_type_&lt;T,&#32;std::add_lvalue_reference_t&lt;N&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
3462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;;
3463 
3464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_cast_type&lt;T,&#32;node&amp;&gt;&#32;ref_cast()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_ref&#32;&#32;=&#32;ref_cast_type&lt;T,&#32;node&amp;&gt;;
3469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_type&#32;=&#32;std::remove_reference_t&lt;out_ref&gt;;
3470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>out_ref<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>out_type*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>));
3471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3472 
3473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_cast_type&lt;T,&#32;node&amp;&amp;&gt;&#32;ref_cast()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_ref&#32;&#32;=&#32;ref_cast_type&lt;T,&#32;node&amp;&amp;&gt;;
3478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_type&#32;=&#32;std::remove_reference_t&lt;out_ref&gt;;
3479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>out_ref<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>out_type*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>));
3480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3481 
3482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_cast_type&lt;T,&#32;const&#32;node&amp;&gt;&#32;ref_cast()&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_ref&#32;&#32;=&#32;ref_cast_type&lt;T,&#32;const&#32;node&amp;&gt;;
3487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_type&#32;=&#32;std::remove_reference_t&lt;out_ref&gt;;
3488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>out_ref<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>out_type*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>));
3489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3490 
3491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ref_cast_type&lt;T,&#32;const&#32;node&amp;&amp;&gt;&#32;ref_cast()&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_ref&#32;&#32;=&#32;ref_cast_type&lt;T,&#32;const&#32;node&amp;&amp;&gt;;
3496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>out_type&#32;=&#32;std::remove_reference_t&lt;out_ref&gt;;
3497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>out_ref<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>out_type*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>));
3498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3499 
3500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~node()&#32;<emphasis role="keyword">noexcept</emphasis>;
3503 
3504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype,&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3506 
3507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3509 
3510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3512 
3513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
3514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;ElemType&gt;&gt;;
3518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_void_v&lt;type&gt;&#32;||&#32;toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
3519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;node::is_homogeneous()&#32;must&#32;be&#32;void&#32;or&#32;one&#32;&quot;</emphasis>
3520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
3521 
3522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_homogeneous(impl::node_type_of&lt;type&gt;);
3523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3524 
3525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;node_type&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3527 
3528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_table()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3530 
3531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3533 
3534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_array_of_tables()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3536 
3537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1afced5bc5ef559606e3d75268ca601709">is_value</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3539 
3540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3542 
3543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3545 
3546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3548 
3549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3551 
3552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3554 
3555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3557 
3558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3560 
3561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3563 
3564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;T&gt;&gt;;
3569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
3570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;node::is()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
3571 
3572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;table&gt;)
3573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_table();
3574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;array&gt;)
3575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>();
3576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;std::string&gt;)
3577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>();
3578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;int64_t&gt;)
3579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>();
3580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;double&gt;)
3581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>();
3582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;bool&gt;)
3583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>();
3584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;date&gt;)
3585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>();
3586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;time&gt;)
3587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>();
3588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;type,&#32;date_time&gt;)
3589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>();
3590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3591 
3592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;as_table()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3594 
3595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;as_array()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3597 
3598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;toml::value&lt;std::string&gt;*&#32;as_string()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3600 
3601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;toml::value&lt;int64_t&gt;*&#32;as_integer()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3603 
3604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;toml::value&lt;double&gt;*&#32;as_floating_point()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3606 
3607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;toml::value&lt;bool&gt;*&#32;as_boolean()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3609 
3610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;toml::value&lt;date&gt;*&#32;as_date()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3612 
3613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;toml::value&lt;time&gt;*&#32;as_time()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3615 
3616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;toml::value&lt;date_time&gt;*&#32;as_date_time()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3618 
3619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;as_table()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3621 
3622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;as_array()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3624 
3625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;std::string&gt;*&#32;as_string()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3627 
3628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;int64_t&gt;*&#32;as_integer()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3630 
3631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;double&gt;*&#32;as_floating_point()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3633 
3634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;bool&gt;*&#32;as_boolean()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3636 
3637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date&gt;*&#32;as_date()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3639 
3640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;time&gt;*&#32;as_time()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3642 
3643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date_time&gt;*&#32;as_date_time()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
3645 
3646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::wrap_node&lt;T&gt;*&#32;as()&#32;<emphasis role="keyword">noexcept</emphasis>
3649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;impl::unwrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;;
3651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(toml::is_value&lt;unwrapped_type&gt;&#32;||&#32;toml::is_container&lt;unwrapped_type&gt;,
3652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;node::as()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
3653 
3654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;table&gt;)
3655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_table();
3656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;array&gt;)
3657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_array();
3658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;std::string&gt;)
3659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_string();
3660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;int64_t&gt;)
3661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_integer();
3662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;double&gt;)
3663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_floating_point();
3664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;bool&gt;)
3665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_boolean();
3666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;date&gt;)
3667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_date();
3668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;time&gt;)
3669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_time();
3670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;date_time&gt;)
3671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_date_time();
3672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3673 
3674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;impl::wrap_node&lt;T&gt;*&#32;as()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;impl::unwrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;;
3679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(toml::is_value&lt;unwrapped_type&gt;&#32;||&#32;toml::is_container&lt;unwrapped_type&gt;,
3680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;node::as()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
3681 
3682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;table&gt;)
3683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_table();
3684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;array&gt;)
3685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_array();
3686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;std::string&gt;)
3687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_string();
3688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;int64_t&gt;)
3689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_integer();
3690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;double&gt;)
3691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_floating_point();
3692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;bool&gt;)
3693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_boolean();
3694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;date&gt;)
3695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_date();
3696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;time&gt;)
3697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_time();
3698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;date_time&gt;)
3699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_date_time();
3700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3701 
3702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;T&gt;&#32;value_exact()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;);
3705 
3706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;T&gt;&#32;<link linkend="_classvalue">value</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;);
3709 
3710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;value_or(T&amp;&amp;&#32;default_value)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;);
3713 
3714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_ref&lt;T&gt;(*<emphasis role="keyword">this</emphasis>);
3719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3720 
3721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_ref&lt;T&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*<emphasis role="keyword">this</emphasis>));
3726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3727 
3728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>()&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_ref&lt;T&gt;(*<emphasis role="keyword">this</emphasis>);
3733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3734 
3735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>()&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
3738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_ref&lt;T&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*<emphasis role="keyword">this</emphasis>));
3740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3741 
3742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
3743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;source_;
3746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3747 
3748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
3749 
3750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_visit&#32;=&#32;std::is_invocable_v&lt;Func,&#32;ref_cast_type&lt;T,&#32;Node&gt;&gt;;
3752 
3753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_visit_nothrow&#32;=&#32;std::is_nothrow_invocable_v&lt;Func,&#32;ref_cast_type&lt;T,&#32;Node&gt;&gt;;
3755 
3756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node&gt;
3757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_visit_any&#32;=&#32;can_visit&lt;Func,&#32;Node,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
3760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_visit&lt;Func,&#32;Node,&#32;date_time&gt;;
3766 
3767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
3768 
3769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node&gt;
3770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_visit_all&#32;=&#32;can_visit&lt;Func,&#32;Node,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
3773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;can_visit&lt;Func,&#32;Node,&#32;date_time&gt;;
3779 
3780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;visit_is_nothrow_one&#32;=&#32;!can_visit&lt;Func,&#32;Node,&#32;T&gt;&#32;||&#32;can_visit_nothrow&lt;Func,&#32;Node,&#32;T&gt;;
3782 
3783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node&gt;
3784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;visit_is_nothrow&#32;=&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
3787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
3792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;visit_is_nothrow_one&lt;Func,&#32;Node,&#32;date_time&gt;;
3793 
3794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
3795 
3796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;can_visit&lt;Func,&#32;Node,&#32;T&gt;&gt;
3797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>visit_return_type_
3798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;Func&gt;()(std::declval&lt;ref_cast_type&lt;T,&#32;Node&gt;&gt;()));
3800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>visit_return_type_&lt;Func,&#32;Node,&#32;T,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
3803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
3805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
3806 
3807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
3808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>visit_return_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;visit_return_type_&lt;Func,&#32;Node,&#32;T&gt;::type;
3809 
3810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;A,&#32;<emphasis role="keyword">typename</emphasis>&#32;B&gt;
3811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>nonvoid&#32;=&#32;std::conditional_t&lt;std::is_void_v&lt;A&gt;,&#32;B,&#32;A&gt;;
3812 
3813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Node&gt;
3814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;do_visit(Func&amp;&amp;&#32;visitor,&#32;Node&amp;&amp;&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>(visit_is_nothrow&lt;Func&amp;&amp;,&#32;Node&amp;&amp;&gt;)
3815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(can_visit_any&lt;Func&amp;&amp;,&#32;Node&amp;&amp;&gt;,
3817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML&#32;node&#32;visitors&#32;must&#32;be&#32;invocable&#32;for&#32;at&#32;least&#32;one&#32;of&#32;the&#32;toml::node&#32;&quot;</emphasis>
3818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;specializations:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a28ad2f9bb777d4b3cb545bdc94b55b63">TOML_SA_NODE_TYPE_LIST</link>);
3819 
3820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(n.type())
3821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:
3823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;table&gt;)
3824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;table&gt;());
3825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3826 
3827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:
3828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;array&gt;)
3829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;array&gt;());
3830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3831 
3832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::string:
3833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;std::string&gt;)
3834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;std::string&gt;());
3835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3836 
3837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::integer:
3838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;int64_t&gt;)
3839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;int64_t&gt;());
3840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3841 
3842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::floating_point:
3843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;double&gt;)
3844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;double&gt;());
3845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3846 
3847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::boolean:
3848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;bool&gt;)
3849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;bool&gt;());
3850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3851 
3852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date:
3853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;date&gt;)
3854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;date&gt;());
3855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3856 
3857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::time:
3858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;time&gt;)
3859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;time&gt;());
3860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3861 
3862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date_time:
3863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(can_visit&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;date_time&gt;)
3864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>Node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(n).<emphasis role="keyword">template</emphasis>&#32;ref_cast&lt;date_time&gt;());
3865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3866 
3867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::none:&#32;<link linkend="_preprocessor_8h_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
3868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_preprocessor_8h_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
3869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3870 
3871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!can_visit_all&lt;Func&amp;&amp;,&#32;Node&amp;&amp;&gt;)
3872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
3874 
3875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
3876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;table&gt;,
3877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;array&gt;,
3878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;std::string&gt;,
3879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;int64_t&gt;,
3880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;double&gt;,
3881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;bool&gt;,
3882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;date&gt;,
3883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nonvoid&lt;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;time&gt;,
3884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visit_return_type&lt;Func&amp;&amp;,&#32;Node&amp;&amp;,&#32;date_time&gt;
3885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;;
3886 
3887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
3888 
3889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!std::is_void_v&lt;return_type&gt;)
3890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_default_constructible_v&lt;return_type&gt;,
3892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Non-exhaustive&#32;visitors&#32;must&#32;return&#32;a&#32;default-constructible&#32;type,&#32;or&#32;void&quot;</emphasis>);
3893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;return_type{};
3894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3897 
3898 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3899 
3900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
3901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;visit(Func&amp;&amp;&#32;visitor)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(visit_is_nothrow&lt;Func&amp;&amp;,&#32;node&amp;&gt;)
3902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_visit(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
3904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3905 
3906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
3907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;visit(Func&amp;&amp;&#32;visitor)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(visit_is_nothrow&lt;Func&amp;&amp;,&#32;node&amp;&amp;&gt;)
3908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_visit(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
3910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3911 
3912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
3913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;visit(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(visit_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;node&amp;&gt;)
3914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_visit(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
3916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3917 
3918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
3919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;visit(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(visit_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;node&amp;&amp;&gt;)
3920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;do_visit(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>node&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
3922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3923 
3924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>()&#32;<emphasis role="keyword">noexcept</emphasis>;
3926 
3927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
3929 
3930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
3933 
3934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
3937 
3938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
3941 
3942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
3945 
3946 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3947 
3948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(std::wstring_view&#32;<link linkend="_classpath">path</link>);
3951 
3952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(std::wstring_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>;
3955 
3956 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
3957 
3958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
3961 
3962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
3963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
3964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
3965 &#32;&#32;&#32;&#32;};
3966 }
3967 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
3968 
3969 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
3970 {
3971 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
3972 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
3973 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;node_deep_equality(<emphasis role="keyword">const</emphasis>&#32;node*,&#32;<emphasis role="keyword">const</emphasis>&#32;node*)&#32;<emphasis role="keyword">noexcept</emphasis>;
3974 }
3975 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
3976 
3977 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
3978 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
3979 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
3980 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
3981 <emphasis role="preprocessor">#endif</emphasis>
3982 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
3983 
3984 <emphasis role="comment">//********&#32;&#32;impl/std_initializer_list.h&#32;&#32;*******************************************************************************</emphasis>
3985 
3986 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
3987 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
3988 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
3989 
3990 <emphasis role="comment">//********&#32;&#32;impl/node_view.h&#32;&#32;******************************************************************************************</emphasis>
3991 
3992 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
3993 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
3994 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
3995 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
3996 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
3997 <emphasis role="preprocessor">#undef&#32;min</emphasis>
3998 <emphasis role="preprocessor">#undef&#32;max</emphasis>
3999 <emphasis role="preprocessor">#endif</emphasis>
4000 
4001 <link linkend="_toml_8hpp_1a0e478700173d852d6baaf3fc40d6712f">TOML_DISABLE_ARITHMETIC_WARNINGS</link>;
4002 
4003 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
4004 {
4005 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ViewedType&gt;
4006 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_classnode__view">node_view</link>
4007 &#32;&#32;&#32;&#32;{
4008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::is_one_of&lt;ViewedType,&#32;toml::node,&#32;const&#32;toml::node&gt;,
4009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;A&#32;toml::node_view&lt;&gt;&#32;must&#32;wrap&#32;toml::node&#32;or&#32;const&#32;toml::node.&quot;</emphasis>);
4010 
4011 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4012 
4013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>viewed_type&#32;=&#32;ViewedType;
4014 
4015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classnode__view">node_view</link>;
4018 
4019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;viewed_type*&#32;node_&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4020 
4021 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4022 
4023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4025 
4026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnode__view">node_view</link>(viewed_type*&#32;node)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
4028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node_{&#32;node&#32;}
4029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
4030 
4031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classnode__view">node_view</link>(viewed_type&amp;&#32;node)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
4033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node_{&#32;&amp;node&#32;}
4034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
4035 
4036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4038 
4039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>(<link linkend="_classnode__view">node_view</link>&amp;&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4041 
4042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4043 
4044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;operator=(<link linkend="_classnode__view">node_view</link>&amp;&amp;)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4045 
4046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
4047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;
4050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4051 
4052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
4053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;viewed_type*&#32;node()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_;
4056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4057 
4058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_type&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;type()&#32;:&#32;node_type::none;
4062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4063 
4064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_table()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_table();
4068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4069 
4070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_array();
4074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4075 
4076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1afced5bc5ef559606e3d75268ca601709">is_value</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_value();
4080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4081 
4082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_string();
4086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4087 
4088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_integer();
4092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4093 
4094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_floating_point();
4098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4099 
4100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_number();
4104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4105 
4106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_boolean();
4110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4111 
4112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_date();
4116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4117 
4118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_time();
4122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4123 
4124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_date_time();
4128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4129 
4130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_array_of_tables()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;&amp;&amp;&#32;node_-&gt;is_array_of_tables();
4134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4135 
4136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__monobehavior_8h_1a9870e0caa2f8e3e5700c4cbb21d73c07">is</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;template&#32;is&lt;impl::unwrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;()&#32;:&#32;<emphasis role="keyword">false</emphasis>;
4141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4142 
4143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype,&#32;viewed_type*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!node_)
4147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;{};
4149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_-&gt;is_homogeneous(ntype,&#32;first_nonmatch);
4152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4153 
4154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;is_homogeneous(ntype)&#32;:&#32;<emphasis role="keyword">false</emphasis>;
4158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4159 
4160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
4161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;template&#32;is_homogeneous&lt;impl::unwrap_node&lt;impl::remove_cvref&lt;ElemType&gt;&gt;&gt;()&#32;:&#32;<emphasis role="keyword">false</emphasis>;
4165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4166 
4167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;template&#32;as&lt;T&gt;()&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
4172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4173 
4174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_table()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;table&gt;();
4178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4179 
4180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_array()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;array&gt;();
4184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4185 
4186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_string()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;std::string&gt;();
4190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4191 
4192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_integer()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;int64_t&gt;();
4196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4197 
4198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_floating_point()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;double&gt;();
4202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4203 
4204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_boolean()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;bool&gt;();
4208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4209 
4210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_date()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;date&gt;();
4214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4215 
4216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_time()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;time&gt;();
4220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4221 
4222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;as_date_time()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as&lt;date_time&gt;();
4226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4227 
4228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;T&gt;&#32;value_exact()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
4231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(node_)
4233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_-&gt;template&#32;value_exact&lt;T&gt;();
4234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4236 
4237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;T&gt;&#32;<link linkend="_classvalue">value</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
4240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(node_)
4242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_-&gt;template&#32;<link linkend="_classvalue">value&lt;T&gt;</link>();
4243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4245 
4246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;value_or(T&amp;&amp;&#32;default_value)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
4249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>::toml::impl;
4251 
4252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
4253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Retrieving&#32;values&#32;as&#32;wide-character&#32;strings&#32;is&#32;only&#32;&quot;</emphasis>
4254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
4255 
4256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_wide_string&lt;T&gt;)
4257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4258 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4259 
4260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(node_)
4261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_-&gt;value_or(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value));
4262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::wstring{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value)&#32;};
4263 
4264 <emphasis role="preprocessor">#else</emphasis>
4265 
4266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
4267 
4268 <emphasis role="preprocessor">#endif</emphasis>
4269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=
4273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::conditional_t&lt;std::is_pointer_v&lt;std::decay_t&lt;T&gt;&gt;,
4274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::add_pointer_t&lt;std::add_const_t&lt;std::remove_pointer_t&lt;std::decay_t&lt;T&gt;&gt;&gt;&gt;,
4275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::decay_t&lt;T&gt;&gt;;
4276 
4277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(node_)
4278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_-&gt;value_or(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value));
4279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_pointer_v&lt;value_type&gt;)
4280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_type{&#32;default_value&#32;};
4281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value);
4283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4285 
4286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
4288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(node_&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;toml::node_view::ref()&#32;called&#32;on&#32;a&#32;node_view&#32;that&#32;did&#32;not&#32;reference&#32;a&#32;node&quot;</emphasis>);
4291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_-&gt;template&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref&lt;T&gt;</link>();
4292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4293 
4294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4295 
4296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
4297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;visit_is_nothrow&#32;=&#32;<emphasis role="keyword">noexcept</emphasis>(std::declval&lt;viewed_type*&gt;()-&gt;visit(std::declval&lt;Func&gt;()));
4298 
4299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4300 
4301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
4302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;visit(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(visit_is_nothrow&lt;Func&amp;&amp;&gt;)
4303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(node_-&gt;visit(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)));
4305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(node_)
4306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_-&gt;visit(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor));
4307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!std::is_void_v&lt;return_type&gt;)
4308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;return_type{};
4309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4310 
4311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4312 
4313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
4316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_deep_equality(lhs.node_,&#32;rhs.node_);
4318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4319 
4320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
4323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!impl::node_deep_equality(lhs.node_,&#32;rhs.node_);
4325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4326 
4327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
4329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.node_&#32;==&#32;&amp;rhs)
4331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;lhs.as&lt;<link linkend="_classtable">table</link>&gt;();
4333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tbl&#32;&amp;&amp;&#32;*tbl&#32;==&#32;rhs;
4334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;,&#32;);
4336 
4337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
4339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.node_&#32;==&#32;&amp;rhs)
4341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;lhs.as&lt;<link linkend="_classarray">array</link>&gt;();
4343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;arr&#32;&amp;&amp;&#32;*arr&#32;==&#32;rhs;
4344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;,&#32;);
4346 
4347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;T&gt;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
4350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.node_&#32;==&#32;&amp;rhs)
4352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;lhs.as&lt;T&gt;();
4354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&amp;&amp;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;==&#32;rhs;
4355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;T&gt;&amp;,&#32;template&#32;&lt;typename&#32;T&gt;);
4357 
4358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(impl::is_losslessly_convertible_to_native&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;T)
4359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>(!impl::is_wide_string&lt;T&gt;)
4361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
4363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Comparison&#32;with&#32;wide-character&#32;strings&#32;is&#32;only&#32;&quot;</emphasis>
4364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
4365 
4366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;T&gt;)
4367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4368 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;impl::narrow(rhs);
4370 <emphasis role="preprocessor">#else</emphasis>
4371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
4372 <emphasis role="preprocessor">#endif</emphasis>
4373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;lhs.as&lt;impl::native_type_of&lt;T&gt;&gt;();
4377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&amp;&amp;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;==&#32;rhs;
4378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;,
4381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;,
4382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(impl::is_losslessly_convertible_to_native&lt;T&gt;,
4383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;T));
4384 
4385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,
4388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::initializer_list&lt;T&gt;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>(!impl::is_wide_string&lt;T&gt;)
4389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;lhs.as&lt;<link linkend="_classarray">array</link>&gt;();
4391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;arr&#32;&amp;&amp;&#32;*arr&#32;==&#32;rhs;
4392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;std::initializer_list&lt;T&gt;&amp;,&#32;template&#32;&lt;typename&#32;T&gt;);
4394 
4395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>(!impl::is_wide_string&lt;T&gt;)
4398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;lhs.as&lt;<link linkend="_classarray">array</link>&gt;();
4400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;arr&#32;&amp;&amp;&#32;*arr&#32;==&#32;rhs;
4401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;,&#32;template&#32;&lt;typename&#32;T&gt;);
4403 
4404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&#32;operator[](std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;this-&gt;as_table())
4408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view</link>{&#32;tbl-&gt;get(key)&#32;};
4409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4411 
4412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;at_path(<link linkend="_classpath">path</link>)&#32;:&#32;<link linkend="_classnode__view">node_view</link>{};
4416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4417 
4418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;at_path(<link linkend="_classpath">path</link>)&#32;:&#32;<link linkend="_classnode__view">node_view</link>{};
4422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4423 
4424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;at_path(<link linkend="_classpath">path</link>)&#32;:&#32;<link linkend="_classnode__view">node_view</link>{};
4428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4429 
4430 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4431 
4432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&#32;operator[](std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
4434 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
4435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;this-&gt;as_table())
4436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view</link>{&#32;tbl-&gt;get(key)&#32;};
4437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4439 
4440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(std::wstring_view&#32;<link linkend="_classpath">path</link>)<emphasis role="keyword">&#32;const</emphasis>
4442 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
4443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_&#32;?&#32;node_-&gt;at_path(<link linkend="_classpath">path</link>)&#32;:&#32;<link linkend="_classnode__view">node_view</link>{};
4444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4445 
4446 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4447 
4448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;this-&gt;as_array())
4452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view</link>{&#32;arr-&gt;get(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;};
4453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4455 
4456 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
4457 
4458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view</link>&amp;&#32;nv)
4459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nv.node_)
4461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nv.node_-&gt;visit([&amp;os](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;n)&#32;{&#32;os&#32;&lt;&lt;&#32;n;&#32;});
4462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
4463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4464 
4465 <emphasis role="preprocessor">#endif</emphasis>
4466 &#32;&#32;&#32;&#32;};
4467 
4468 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4469 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;)&#32;-&gt;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>;
4470 
4471 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4472 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>(<emphasis role="keyword">const</emphasis>&#32;T*)&#32;-&gt;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>;
4473 
4474 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4475 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>(T&amp;)&#32;-&gt;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>;
4476 
4477 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4478 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view</link>(T*)&#32;-&gt;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>;
4479 }
4480 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
4481 
4482 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
4483 {
4484 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node::operator&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
4485 &#32;&#32;&#32;&#32;{
4486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{&#32;<emphasis role="keyword">this</emphasis>&#32;};
4487 &#32;&#32;&#32;&#32;}
4488 
4489 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;node::operator&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>()&#32;const&#32;noexcept
4490 &#32;&#32;&#32;&#32;{
4491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<emphasis role="keyword">this</emphasis>&#32;};
4492 &#32;&#32;&#32;&#32;}
4493 }
4494 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
4495 
4496 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
4497 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
4498 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
4499 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
4500 <emphasis role="preprocessor">#endif</emphasis>
4501 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
4502 
4503 <emphasis role="comment">//********&#32;&#32;impl/value.h&#32;&#32;**********************************************************************************************</emphasis>
4504 
4505 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
4506 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
4507 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
4508 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
4509 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
4510 <emphasis role="preprocessor">#undef&#32;min</emphasis>
4511 <emphasis role="preprocessor">#undef&#32;max</emphasis>
4512 <emphasis role="preprocessor">#endif</emphasis>
4513 
4514 <link linkend="_toml_8hpp_1a0e478700173d852d6baaf3fc40d6712f">TOML_DISABLE_ARITHMETIC_WARNINGS</link>;
4515 
4516 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
4517 
4518 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4519 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_WSTRING&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;std::wstring&quot;</emphasis>
4520 <emphasis role="preprocessor">#else</emphasis>
4521 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_WSTRING</emphasis>
4522 <emphasis role="preprocessor">#endif</emphasis>
4523 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
4524 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;std::u8string_view&quot;</emphasis>
4525 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;const&#32;char8_t*&quot;</emphasis>
4526 <emphasis role="preprocessor">#else</emphasis>
4527 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW</emphasis>
4528 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8</emphasis>
4529 <emphasis role="preprocessor">#endif</emphasis>
4530 
4531 <emphasis role="preprocessor">#define&#32;TOML_SA_VALUE_EXACT_FUNC_MESSAGE(type_arg)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4532 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;The&#32;&quot;&#32;type_arg&#32;&quot;&#32;must&#32;be&#32;one&#32;of:&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4533 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW&#32;&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4534 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4535 <emphasis role="preprocessoremphasis>
4536 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;losslessly&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4537 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4538 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_WSTRING&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4539 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;signed&#32;integer&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4540 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;floating-point&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4541 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4542 <emphasis role="preprocessoremphasis>
4543 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;An&#32;immutable&#32;view&#32;type&#32;not&#32;requiring&#32;additional&#32;temporary&#32;storage&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4544 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string_view&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4545 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4546 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;const&#32;char*&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4547 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4548 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
4549 
4550 <emphasis role="preprocessor">#define&#32;TOML_SA_VALUE_FUNC_MESSAGE(type_arg)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;The&#32;&quot;&#32;type_arg&#32;&quot;&#32;must&#32;be&#32;one&#32;of:&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW&#32;&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4554 <emphasis role="preprocessoremphasis>
4555 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;losslessly&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4556 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_WSTRING&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4558 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;signed&#32;integer&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;floating-point&#32;type&#32;&gt;=&#32;64&#32;bits&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4560 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4561 <emphasis role="preprocessoremphasis>
4562 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;(reasonably)&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4563 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;any&#32;other&#32;integer&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4564 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;any&#32;floating-point&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4565 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4566 <emphasis role="preprocessoremphasis>
4567 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&quot;An&#32;immutable&#32;view&#32;type&#32;not&#32;requiring&#32;additional&#32;temporary&#32;storage&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&quot;std::string_view&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4569 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4570 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&quot;const&#32;char*&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4571 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
4573 
4574 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
4575 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
4576 {
4577 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&gt;
4578 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker
4579 &#32;&#32;&#32;&#32;{
4580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
4581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;T&#32;make(Args&amp;&amp;...&#32;args)&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_constructible_v&lt;T,&#32;Args&amp;&amp;...&gt;)
4583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_aggregate_v&lt;T&gt;)
4585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;};
4586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
4588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4589 &#32;&#32;&#32;&#32;};
4590 
4591 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4592 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;T,&#32;T&gt;
4593 &#32;&#32;&#32;&#32;{
4594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
4595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
4597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;U&amp;&amp;&#32;<link linkend="_structnative__value__maker_3_01_t_00_01_t_01_4_1addd709c0ca543d31f4a3c9658dff3295">make</link>(U&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
4598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>U&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
4600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4601 &#32;&#32;&#32;&#32;};
4602 
4603 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8&#32;||&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4604 
4605 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>string_maker
4606 &#32;&#32;&#32;&#32;{
4607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
4609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::string&#32;make(T&amp;&amp;&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>
4610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>arg_type&#32;=&#32;std::decay_t&lt;T&gt;;
4612 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
4613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;arg_type,&#32;char8_t*,&#32;const&#32;char8_t*&gt;)
4614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(arg)));
4616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;arg_type,&#32;std::u8string,&#32;std::u8string_view&gt;)
4618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(arg.data())),
4620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arg.length());
4621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4622 <emphasis role="preprocessor">#endif</emphasis>
4623 
4624 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_wide_string&lt;arg_type&gt;)
4626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;narrow(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(arg));
4628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4629 <emphasis role="preprocessor">#endif</emphasis>
4630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4631 &#32;&#32;&#32;&#32;};
4632 
4633 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
4634 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4635 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;char8_t*&gt;&#32;:&#32;string_maker
4636 &#32;&#32;&#32;&#32;{};
4637 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4638 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;const&#32;char8_t*&gt;&#32;:&#32;string_maker
4639 &#32;&#32;&#32;&#32;{};
4640 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4641 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::u8string&gt;&#32;:&#32;string_maker
4642 &#32;&#32;&#32;&#32;{};
4643 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4644 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::u8string_view&gt;&#32;:&#32;string_maker
4645 &#32;&#32;&#32;&#32;{};
4646 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8</emphasis>
4647 
4648 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4649 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4650 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;string_maker
4651 &#32;&#32;&#32;&#32;{};
4652 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4653 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;const&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;string_maker
4654 &#32;&#32;&#32;&#32;{};
4655 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4656 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::wstring&gt;&#32;:&#32;string_maker
4657 &#32;&#32;&#32;&#32;{};
4658 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
4659 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>native_value_maker&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;std::wstring_view&gt;&#32;:&#32;string_maker
4660 &#32;&#32;&#32;&#32;{};
4661 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4662 
4663 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8&#32;||&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
4664 
4665 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4666 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
4667 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;optional&lt;T&gt;&#32;<link linkend="_toml_8hpp_1a8d0bda020a3bbeeb0ea155928f94b8da">node_integer_cast</link>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
4668 &#32;&#32;&#32;&#32;{
4669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;==&#32;node_type::integer);
4670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_cvref&lt;T&gt;);
4671 
4672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>traits&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;</link>;
4673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!traits::is_signed)
4674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;CHAR_BIT)&#32;&lt;&#32;63)&#32;<emphasis role="comment">//&#32;63&#32;bits&#32;==&#32;int64_max</emphasis>
4676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>common_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{}&#32;+&#32;T{});
4678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{}&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis>common_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;&gt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>common_t<emphasis role="keyword">&gt;</emphasis>(traits::max))
4679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{})
4684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;traits::min&#32;||&#32;val&#32;&gt;&#32;traits::max)
4690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
4691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
4693 &#32;&#32;&#32;&#32;}
4694 }
4695 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
4696 
4697 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
4698 {
4699 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType&gt;
4700 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classvalue">value</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;node
4701 &#32;&#32;&#32;&#32;{
4702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::is_native&lt;ValueType&gt;&#32;&amp;&amp;&#32;!impl::is_cvref&lt;ValueType&gt;,
4703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;A&#32;toml::value&lt;&gt;&#32;must&#32;model&#32;one&#32;of&#32;the&#32;native&#32;TOML&#32;value&#32;types:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1ae6ef2cd7e6c604e456b4b1bdf6bee613">TOML_SA_NATIVE_VALUE_TYPE_LIST</link>);
4704 
4705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4706 
4707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a05278d773b91496857f3113bdfc748d8">TOML_PARSER_TYPENAME</link>;
4708 
4709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
4710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;as_value([[maybe_unused]]&#32;U*&#32;ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
4712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
4714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr;
4715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
4717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4718 
4719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ValueType&#32;val_;
4720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;flags_&#32;=&#32;value_flags::none;
4721 
4722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4723 
4724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;ValueType;
4725 
4726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_arg&#32;=&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(
4727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::conditional_t&lt;
4728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_same_v&lt;value_type,&#32;std::string&gt;,
4729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view,
4730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::conditional_t&lt;impl::is_one_of&lt;value_type,&#32;double,&#32;int64_t,&#32;bool&gt;,&#32;value_type,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&gt;&gt;);
4731 
4732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
4733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classvalue">value</link>(Args&amp;&amp;...&#32;args)&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(value_type(
4735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::native_value_maker&lt;value_type,&#32;std::decay_t&lt;Args&gt;...&gt;::make(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...))))
4736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;val_(impl::native_value_maker&lt;value_type,&#32;std::decay_t&lt;Args&gt;...&gt;::make(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...))
4737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4738 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
4739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
4740 <emphasis role="preprocessor">#endif</emphasis>
4741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4742 
4743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
4745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(other),
4746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;other.val_&#32;},
4747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;other.flags_&#32;}
4748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4749 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
4750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
4751 <emphasis role="preprocessor">#endif</emphasis>
4752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4753 
4754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;other,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
4756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(other),
4757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;other.val_&#32;},
4758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;==&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>&#32;?&#32;other.flags_&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;}
4759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4760 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
4761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
4762 <emphasis role="preprocessor">#endif</emphasis>
4763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4764 
4765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<link linkend="_classvalue">value</link>&amp;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
4767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other)),
4768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.val_)&#32;},
4769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;other.flags_&#32;}
4770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4771 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
4772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
4773 <emphasis role="preprocessor">#endif</emphasis>
4774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4775 
4776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
4777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(<link linkend="_classvalue">value</link>&amp;&amp;&#32;other,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
4778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other)),
4779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.val_)&#32;},
4780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;==&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>&#32;?&#32;other.flags_&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;}
4781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4782 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
4783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a606a80db4a0cb366751f3592d8b21076">TOML_VALUE_CREATED</link>;
4784 <emphasis role="preprocessor">#endif</emphasis>
4785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4786 
4787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
4788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(rhs);
4790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;&#32;&#32;=&#32;rhs.val_;
4791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_&#32;=&#32;rhs.flags_;
4792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4794 
4795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(<link linkend="_classvalue">value</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
4796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
4798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs));
4800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.val_);
4801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_&#32;=&#32;rhs.flags_;
4802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4805 
4806 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
4807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">~value</link>()&#32;noexcept
4808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a10f10fe8cf37059ff8a39528c39f9063">TOML_VALUE_DESTROYED</link>;
4810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4811 <emphasis role="preprocessor">#endif</emphasis>
4812 
4813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_type&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;const&#32;noexcept&#32;final
4815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;;
4817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4818 
4819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
4821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ntype&#32;==&#32;node_type::none&#32;||&#32;ntype&#32;==&#32;impl::node_type_of&lt;value_type&gt;;
4823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4824 
4825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype,&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
4827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;!=&#32;node_type::none&#32;&amp;&amp;&#32;ntype&#32;!=&#32;impl::node_type_of&lt;value_type&gt;)
4829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;<emphasis role="keyword">this</emphasis>;
4831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4835 
4836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>
4838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;!=&#32;node_type::none&#32;&amp;&amp;&#32;ntype&#32;!=&#32;impl::node_type_of&lt;value_type&gt;)
4840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;<emphasis role="keyword">this</emphasis>;
4842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4846 
4847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
4848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
4849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_homogeneous()&#32;const&#32;noexcept
4850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;ElemType&gt;&gt;;
4852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_void_v&lt;type&gt;&#32;||&#32;toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
4853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;value::is_homogeneous()&#32;must&#32;be&#32;void&#32;or&#32;one&#32;&quot;</emphasis>
4854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
4855 
4856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_void_v&lt;type&gt;)
4857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;type&gt;&#32;==&#32;impl::node_type_of&lt;value_type&gt;;
4860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_table()&#32;const&#32;noexcept&#32;final
4863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4866 
4867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>()&#32;const&#32;noexcept&#32;final
4869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4872 
4873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_array_of_tables()&#32;const&#32;noexcept&#32;final
4875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4878 
4879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1afced5bc5ef559606e3d75268ca601709">is_value</link>()&#32;const&#32;noexcept&#32;final
4881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4884 
4885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>()&#32;const&#32;noexcept&#32;final
4887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;std::string&gt;;
4889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4890 
4891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>()&#32;const&#32;noexcept&#32;final
4893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;int64_t&gt;;
4895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4896 
4897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>()&#32;const&#32;noexcept&#32;final
4899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;double&gt;;
4901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4902 
4903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>()&#32;const&#32;noexcept&#32;final
4905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::is_one_of&lt;value_type,&#32;int64_t,&#32;double&gt;;
4907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4908 
4909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>()&#32;const&#32;noexcept&#32;final
4911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;bool&gt;;
4913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4914 
4915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>()&#32;const&#32;noexcept&#32;final
4917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;date&gt;;
4919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4920 
4921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>()&#32;const&#32;noexcept&#32;final
4923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;time&gt;;
4925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4926 
4927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>()&#32;const&#32;noexcept&#32;final
4929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::is_same_v&lt;value_type,&#32;date_time&gt;;
4931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4932 
4933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;as_table()&#32;noexcept&#32;final
4935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
4937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4938 
4939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>*&#32;as_array()&#32;noexcept&#32;final
4941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
4943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4944 
4945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>*&#32;as_string()&#32;noexcept&#32;final
4947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;std::string&gt;(<emphasis role="keyword">this</emphasis>);
4949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4950 
4951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>*&#32;as_integer()&#32;noexcept&#32;final
4953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;int64_t&gt;(<emphasis role="keyword">this</emphasis>);
4955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4956 
4957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;double&gt;</link>*&#32;as_floating_point()&#32;noexcept&#32;final
4959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;double&gt;(<emphasis role="keyword">this</emphasis>);
4961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4962 
4963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>*&#32;as_boolean()&#32;noexcept&#32;final
4965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;bool&gt;(<emphasis role="keyword">this</emphasis>);
4967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4968 
4969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date&gt;</link>*&#32;as_date()&#32;noexcept&#32;final
4971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date&gt;(<emphasis role="keyword">this</emphasis>);
4973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4974 
4975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;time&gt;</link>*&#32;as_time()&#32;noexcept&#32;final
4977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;time&gt;(<emphasis role="keyword">this</emphasis>);
4979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4980 
4981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>*&#32;as_date_time()&#32;noexcept&#32;final
4983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date_time&gt;(<emphasis role="keyword">this</emphasis>);
4985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4986 
4987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;as_table()&#32;const&#32;noexcept&#32;final
4989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
4991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4992 
4993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
4994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;as_array()&#32;const&#32;noexcept&#32;final
4995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
4997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4998 
4999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
5000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>*&#32;as_string()&#32;const&#32;noexcept&#32;final
5001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;std::string&gt;(<emphasis role="keyword">this</emphasis>);
5003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5004 
5005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
5006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>*&#32;as_integer()&#32;const&#32;noexcept&#32;final
5007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;int64_t&gt;(<emphasis role="keyword">this</emphasis>);
5009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5010 
5011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
5012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;double&gt;</link>*&#32;as_floating_point()&#32;const&#32;noexcept&#32;final
5013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;double&gt;(<emphasis role="keyword">this</emphasis>);
5015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5016 
5017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
5018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>*&#32;as_boolean()&#32;const&#32;noexcept&#32;final
5019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;bool&gt;(<emphasis role="keyword">this</emphasis>);
5021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5022 
5023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
5024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date&gt;</link>*&#32;as_date()&#32;const&#32;noexcept&#32;final
5025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date&gt;(<emphasis role="keyword">this</emphasis>);
5027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5028 
5029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
5030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;time&gt;</link>*&#32;as_time()&#32;const&#32;noexcept&#32;final
5031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;time&gt;(<emphasis role="keyword">this</emphasis>);
5033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5034 
5035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
5036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>*&#32;as_date_time()&#32;const&#32;noexcept&#32;final
5037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;as_value&lt;date_time&gt;(<emphasis role="keyword">this</emphasis>);
5039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5040 
5041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
5045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5046 
5047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
5051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5052 
5053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;const&amp;&#32;noexcept
5055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
5057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5058 
5059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;const&amp;&amp;&#32;noexcept
5061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
5063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5064 
5065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
5069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5070 
5071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
5075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5076 
5077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&amp;&#32;noexcept
5079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
5081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5082 
5083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&amp;&amp;&#32;noexcept
5085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
5087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5088 
5089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;value_type&amp;()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
5093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5094 
5095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;value_type&amp;&amp;()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
5099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5100 
5101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;()&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;val_;
5105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5106 
5107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&amp;()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
5109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>value_type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(val_);
5111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5112 
5113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab3272d559df83418b043791473ef1016">TOML_HIDDEN_CONSTRAINT</link>(std::is_class_v&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;value_type)
5114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type*&#32;operator-&gt;()&#32;noexcept
5116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;val_;
5118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5119 
5120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab3272d559df83418b043791473ef1016">TOML_HIDDEN_CONSTRAINT</link>(std::is_class_v&lt;T&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;value_type)
5121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;operator-&gt;()&#32;const&#32;noexcept
5123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;val_;
5125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5126 
5127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>()&#32;const&#32;noexcept
5129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags_;
5131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5132 
5133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>(<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;new_flags)&#32;<emphasis role="keyword">noexcept</emphasis>
5134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_&#32;=&#32;new_flags;
5136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5138 
5139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;std::string&gt;)
5142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_.assign(rhs);
5143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;=&#32;rhs;
5145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5147 
5148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((std::is_same_v&lt;T,&#32;std::string&gt;),&#32;<emphasis role="keyword">typename</emphasis>&#32;T&#32;=&#32;value_type)
5149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&amp;&#32;operator=(std::string&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs);
5152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5154 
5155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;double&gt;)
5159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_nan&#32;=&#32;impl::fpclassify(lhs.val_)&#32;==&#32;impl::fp_class::nan;
5161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_nan&#32;=&#32;impl::fpclassify(rhs)&#32;==&#32;impl::fp_class::nan;
5162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_nan&#32;!=&#32;rhs_nan)
5163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
5164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_nan)
5165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;==&#32;rhs;
5168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1acb44e833882d0c4824af69311c8505f5">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;,&#32;value_arg,&#32;);
5170 
5171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;&#32;rhs;
5175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5176 
5177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&#32;rhs.val_;
5181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5182 
5183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;=&#32;rhs;
5187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5188 
5189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;=&#32;rhs.val_;
5193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5194 
5195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;&#32;rhs;
5199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5200 
5201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;&#32;rhs.val_;
5205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5206 
5207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;value_arg&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;=&#32;rhs;
5211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5212 
5213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(value_arg&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;=&#32;rhs.val_;
5217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5218 
5219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
5224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;rhs.val_;&#32;<emphasis role="comment">//&#32;calls&#32;asymmetrical&#32;value-equality&#32;operator&#32;defined&#32;above</emphasis>
5225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
5227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5228 
5229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(lhs&#32;==&#32;rhs);
5234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5235 
5236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
5241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;&#32;rhs.val_;
5242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&lt;&#32;impl::node_type_of&lt;T&gt;;
5244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5245 
5246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
5251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&lt;=&#32;rhs.val_;
5252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&lt;=&#32;impl::node_type_of&lt;T&gt;;
5254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5255 
5256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
5261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;&#32;rhs.val_;
5262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&gt;&#32;impl::node_type_of&lt;T&gt;;
5264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5265 
5266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
5268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;T&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;T&gt;)
5271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.val_&#32;&gt;=&#32;rhs.val_;
5272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_of&lt;value_type&gt;&#32;&gt;=&#32;impl::node_type_of&lt;T&gt;;
5274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5275 
5276 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
5277 
5278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value</link>&amp;&#32;rhs)
5279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
5281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
5282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5283 
5284 <emphasis role="preprocessor">#endif</emphasis>
5285 &#32;&#32;&#32;&#32;};
5286 
5287 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5288 &#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(T)&#32;-&gt;&#32;<link linkend="_classvalue">value&lt;impl::native_type_of&lt;impl::remove_cvref&lt;T&gt;</link>&gt;&gt;;
5289 
5290 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5291 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5292 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;node::get_value_exact()&#32;const&#32;noexcept(impl::<link linkend="_toml_8hpp_1a165b6f8b86d0dd7f59d0cc6f3db5777d">value_retrieval_is_nothrow</link>&lt;T&gt;)
5293 &#32;&#32;&#32;&#32;{
5294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
5295 
5296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;!=&#32;node_type::none);
5297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;!=&#32;node_type::table);
5298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(node_type_of&lt;T&gt;&#32;!=&#32;node_type::array);
5299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;);
5300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_cvref&lt;T&gt;);
5301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(this-&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;T&gt;);
5302 
5303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(node_type_of&lt;T&gt;&#32;==&#32;node_type::string)
5304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;str&#32;=&#32;*ref_cast&lt;std::string&gt;();
5306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;std::string&gt;)
5307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
5308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;std::string_view&gt;)
5309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T{&#32;str&#32;};
5310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;const&#32;char*&gt;)
5311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.c_str();
5312 
5313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;std::wstring&gt;)
5314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5315 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
5316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;widen(str);
5317 <emphasis role="preprocessor">#else</emphasis>
5318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
5319 <emphasis role="preprocessor">#endif</emphasis>
5320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5321 
5322 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
5323 
5324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;char&#32;-&gt;&#32;char8_t&#32;(potentially&#32;unsafe&#32;-&#32;the&#32;feature&#32;is&#32;&apos;experimental&apos;!)</emphasis>
5325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;T,&#32;std::u8string,&#32;std::u8string_view&gt;)
5326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;T(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str.c_str()),&#32;str.length());
5327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;T,&#32;const&#32;char8_t*&gt;)
5328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char8_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str.c_str());
5329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
5331 
5332 <emphasis role="preprocessor">#endif</emphasis>
5333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;native_type_of&lt;T&gt;&gt;());
5336 &#32;&#32;&#32;&#32;}
5337 
5338 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5339 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5340 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;optional&lt;T&gt;&#32;node::value_exact()&#32;const&#32;noexcept(impl::<link linkend="_toml_8hpp_1a165b6f8b86d0dd7f59d0cc6f3db5777d">value_retrieval_is_nothrow</link>&lt;T&gt;)
5341 &#32;&#32;&#32;&#32;{
5342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
5343 
5344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_toml_8hpp_1a94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
5345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Retrieving&#32;values&#32;as&#32;wide-character&#32;strings&#32;with&#32;node::value_exact()&#32;is&#32;only&#32;&quot;</emphasis>
5346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
5347 
5348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)&amp;&amp;!is_cvref&lt;T&gt;,
5349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af388261a024b7ff38a50bb329d7df32c">TOML_SA_VALUE_EXACT_FUNC_MESSAGE</link>(<emphasis role="stringliteral">&quot;return&#32;type&#32;of&#32;node::value_exact()&quot;</emphasis>));
5350 
5351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prevent&#32;additional&#32;compiler&#32;error&#32;spam&#32;when&#32;the&#32;static_assert&#32;fails&#32;by&#32;gating&#32;behind&#32;if&#32;constexpr</emphasis>
5352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)&amp;&amp;!is_cvref&lt;T&gt;)
5353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;T&gt;)
5355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;this-&gt;get_value_exact&lt;T&gt;()&#32;};
5356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5359 &#32;&#32;&#32;&#32;}
5360 
5361 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5362 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5363 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;optional&lt;T&gt;&#32;node::value()&#32;const&#32;noexcept(impl::<link linkend="_toml_8hpp_1a165b6f8b86d0dd7f59d0cc6f3db5777d">value_retrieval_is_nothrow</link>&lt;T&gt;)
5364 &#32;&#32;&#32;&#32;{
5365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
5366 
5367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_toml_8hpp_1a94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
5368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Retrieving&#32;values&#32;as&#32;wide-character&#32;strings&#32;with&#32;node::value()&#32;is&#32;only&#32;&quot;</emphasis>
5369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
5370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;&#32;||&#32;can_partially_represent_native&lt;T&gt;)&amp;&amp;!is_cvref&lt;T&gt;,
5371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1acf0e577c1a22db8f0fb3f8120fa3babf">TOML_SA_VALUE_FUNC_MESSAGE</link>(<emphasis role="stringliteral">&quot;return&#32;type&#32;of&#32;node::value()&quot;</emphasis>));
5372 
5373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;when&#32;asking&#32;for&#32;strings,&#32;dates,&#32;times&#32;and&#32;date_times&#32;there&apos;s&#32;no&#32;&apos;fuzzy&apos;&#32;conversion</emphasis>
5374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;semantics&#32;to&#32;be&#32;mindful&#32;of&#32;so&#32;the&#32;exact&#32;retrieval&#32;is&#32;enough.</emphasis>
5375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;std::string,&#32;time,&#32;date,&#32;date_time&gt;)
5376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;T&gt;)
5378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;this-&gt;get_value_exact&lt;T&gt;()&#32;};
5379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5382 
5383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;everything&#32;else&#32;requires&#32;a&#32;bit&#32;of&#32;logicking.</emphasis>
5384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>())
5387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;*</emphasis>
5389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::integer:
5390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;int</emphasis>
5392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;int64_t&gt;)
5393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)
5395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;int64_t&gt;());
5396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_integer_cast&lt;T&gt;(*ref_cast&lt;int64_t&gt;());
5398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5399 
5400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;float</emphasis>
5401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;double&gt;)
5402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;*ref_cast&lt;int64_t&gt;();
5404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::numeric_limits&lt;T&gt;::digits&#32;&lt;&#32;64)
5405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;largest_whole_float&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>{&#32;1&#32;}&#32;&lt;&lt;&#32;std::numeric_limits&lt;T&gt;::digits);
5407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(val&#32;&lt;&#32;-largest_whole_float&#32;||&#32;val&#32;&gt;&#32;largest_whole_float)
5408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
5411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5412 
5413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;bool</emphasis>
5414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;bool&gt;)
5415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;int64_t&gt;());
5416 
5417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;-&gt;&#32;anything&#32;else</emphasis>
5418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5421 
5422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;*</emphasis>
5423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::floating_point:
5424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;float</emphasis>
5426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;double&gt;)
5427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_native&lt;T&gt;&#32;||&#32;can_represent_native&lt;T&gt;)
5429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;double&gt;())&#32;};
5430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;*ref_cast&lt;double&gt;();
5433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(impl::fpclassify(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;==&#32;fp_class::ok
5434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;(std::numeric_limits&lt;T&gt;::lowest)()&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&gt;&#32;(std::numeric_limits&lt;T&gt;::max)()))
5435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
5437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5439 
5440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;int</emphasis>
5441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;int64_t&gt;)
5442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;*ref_cast&lt;double&gt;();
5444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(impl::fpclassify(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;==&#32;fp_class::ok
5445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
5446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_integer_cast&lt;T&gt;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
5447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5450 
5451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;float&#32;-&gt;&#32;anything&#32;else</emphasis>
5452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5455 
5456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;*</emphasis>
5457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::boolean:
5458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;bool</emphasis>
5460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;bool&gt;)
5461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;*ref_cast&lt;bool&gt;()&#32;};
5462 
5463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;int</emphasis>
5464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_natively_one_of&lt;T,&#32;int64_t&gt;)
5465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*ref_cast&lt;bool&gt;())&#32;};
5466 
5467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;-&gt;&#32;anything&#32;else</emphasis>
5468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5472 
5473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;non-values,&#32;or&#32;&apos;exact&apos;&#32;types&#32;covered&#32;above</emphasis>
5474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
5475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5476 &#32;&#32;&#32;&#32;}
5477 
5478 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5479 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5480 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;node::value_or(T&#32;&amp;&amp;&#32;default_value)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(impl::value_retrieval_is_nothrow&lt;T&gt;)
5481 &#32;&#32;&#32;&#32;{
5482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>impl;
5483 
5484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_toml_8hpp_1a94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
5485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Retrieving&#32;values&#32;as&#32;wide-character&#32;strings&#32;with&#32;node::value_or()&#32;is&#32;only&#32;&quot;</emphasis>
5486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
5487 
5488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_wide_string&lt;T&gt;)
5489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5490 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
5491 
5492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type::string)
5493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;widen(*ref_cast&lt;std::string&gt;());
5494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::wstring{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value)&#32;};
5495 
5496 <emphasis role="preprocessor">#else</emphasis>
5497 
5498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
5499 
5500 <emphasis role="preprocessor">#endif</emphasis>
5501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=
5505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::conditional_t&lt;std::is_pointer_v&lt;std::decay_t&lt;T&gt;&gt;,
5506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::add_pointer_t&lt;std::add_const_t&lt;std::remove_pointer_t&lt;std::decay_t&lt;T&gt;&gt;&gt;&gt;,
5507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::decay_t&lt;T&gt;&gt;;
5508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>traits&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;value_type&gt;</link>;
5509 
5510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
5511 
5512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
5513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits::is_native&#32;||&#32;traits::can_represent_native&#32;||&#32;traits::can_partially_represent_native,
5514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;default&#32;value&#32;type&#32;of&#32;node::value_or()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>
5515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab05d15b88d3ba47185125777d141c8ec">TOML_SA_LIST_NEW</link>&#32;<emphasis role="stringliteral">&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;</emphasis>
5516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ae6ef2cd7e6c604e456b4b1bdf6bee613">TOML_SA_NATIVE_VALUE_TYPE_LIST</link>
5517 
5518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab07dc1dbfccd0160587c260d261092b4">TOML_SA_LIST_NXT</link>&#32;<emphasis role="stringliteral">&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;losslessly&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;</emphasis>
5519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e4bd27dcda3c068fc0426c754f0b3">TOML_SA_LIST_BEG</link>&#32;<emphasis role="stringliteral">&quot;std::string&quot;</emphasis>
5520 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
5521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;std::wstring&quot;</emphasis>
5522 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
5523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;any&#32;signed&#32;integer&#32;type&#32;&gt;=&#32;64&#32;bits&quot;</emphasis>
5524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;any&#32;floating-point&#32;type&#32;&gt;=&#32;64&#32;bits&quot;</emphasis>
5525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a64f020cb6143b9513bb7aecabcd43b39">TOML_SA_LIST_END</link>
5526 
5527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab07dc1dbfccd0160587c260d261092b4">TOML_SA_LIST_NXT</link>&#32;<emphasis role="stringliteral">&quot;A&#32;non-view&#32;type&#32;capable&#32;of&#32;(reasonably)&#32;representing&#32;a&#32;native&#32;TOML&#32;value&#32;type&quot;</emphasis>
5528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e4bd27dcda3c068fc0426c754f0b3">TOML_SA_LIST_BEG</link>&#32;<emphasis role="stringliteral">&quot;any&#32;other&#32;integer&#32;type&quot;</emphasis>
5529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;any&#32;floating-point&#32;type&quot;</emphasis>
5530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a64f020cb6143b9513bb7aecabcd43b39">TOML_SA_LIST_END</link>
5531 
5532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab07dc1dbfccd0160587c260d261092b4">TOML_SA_LIST_NXT</link>&#32;<emphasis role="stringliteral">&quot;A&#32;compatible&#32;view&#32;type&quot;</emphasis>
5533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e4bd27dcda3c068fc0426c754f0b3">TOML_SA_LIST_BEG</link>&#32;<emphasis role="stringliteral">&quot;std::string_view&quot;</emphasis>
5534 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_HAS_CHAR8</emphasis>
5535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;std::u8string_view&quot;</emphasis>
5536 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
5537 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
5538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;std::wstring_view&quot;</emphasis>
5539 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
5540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;const&#32;char*&quot;</emphasis>
5541 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_HAS_CHAR8</emphasis>
5542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;const&#32;char8_t*&quot;</emphasis>
5543 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
5544 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
5545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af44d9f3540fcda73dd543e9146633c31">TOML_SA_LIST_SEP</link>&#32;<emphasis role="stringliteral">&quot;const&#32;wchar_t*&quot;</emphasis>
5546 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endif</emphasis>
5547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a64f020cb6143b9513bb7aecabcd43b39">TOML_SA_LIST_END</link>
5548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
5549 
5550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
5551 
5552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prevent&#32;additional&#32;compiler&#32;error&#32;spam&#32;when&#32;the&#32;static_assert&#32;fails&#32;by&#32;gating&#32;behind&#32;if&#32;constexpr</emphasis>
5553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(traits::is_native&#32;||&#32;traits::can_represent_native&#32;||&#32;traits::can_partially_represent_native)
5554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(traits::is_native)
5556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;==&#32;node_type_of&lt;value_type&gt;)
5558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ref_cast&lt;typename&#32;traits::native_type&gt;();
5559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;this-&gt;<link linkend="_classvalue">value&lt;value_type&gt;</link>())
5561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
5562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_pointer_v&lt;value_type&gt;)
5563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;value_type{&#32;default_value&#32;};
5564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_value);
5566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5568 &#32;&#32;&#32;&#32;}
5569 }
5570 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
5571 
5572 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
5573 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
5574 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
5575 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
5576 <emphasis role="preprocessor">#endif</emphasis>
5577 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
5578 
5579 <emphasis role="comment">//********&#32;&#32;impl/make_node.h&#32;&#32;******************************************************************************************</emphasis>
5580 
5581 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
5582 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
5583 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
5584 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
5585 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
5586 <emphasis role="preprocessor">#undef&#32;min</emphasis>
5587 <emphasis role="preprocessor">#undef&#32;max</emphasis>
5588 <emphasis role="preprocessor">#endif</emphasis>
5589 
5590 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
5591 {
5592 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5593 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5594 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(returns_nonnull)
5595 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;make_node_impl_specialized(T&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;[[maybe_unused]]&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)
5596 &#32;&#32;&#32;&#32;{
5597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;<link linkend="_toml_8hpp_1a0f4621a6694e07daea7a5c0282138524">unwrap_node&lt;remove_cvref&lt;T&gt;</link>&gt;;
5598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_same_v&lt;unwrapped_type,&#32;node&gt;);
5599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_node_view&lt;unwrapped_type&gt;);
5600 
5601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arrays&#32;+&#32;tables&#32;-&#32;invoke&#32;copy/move&#32;ctor</emphasis>
5602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_one_of&lt;unwrapped_type,&#32;array,&#32;table&gt;)
5603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;unwrapped_type(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
5605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5606 
5607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;values</emphasis>
5608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_type&#32;=&#32;<link linkend="_toml_8hpp_1a360741865d63894a80dd761769957c4f">native_type_of&lt;unwrapped_type&gt;</link>;
5611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;=&#32;<link linkend="_classvalue">value&lt;native_type&gt;</link>;
5612 
5613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type*&#32;out;
5614 
5615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copy/move&#32;ctor</emphasis>
5616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;value_type&gt;)
5617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;value_type{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
5619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5620 
5621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;creating&#32;from&#32;raw&#32;value</emphasis>
5622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_wide_string&lt;T&gt;&#32;||&#32;<link linkend="_toml_8hpp_1a94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
5625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Instantiating&#32;values&#32;from&#32;wide-character&#32;strings&#32;is&#32;only&#32;&quot;</emphasis>
5626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;supported&#32;on&#32;Windows&#32;with&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
5627 
5628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!is_losslessly_convertible_to_native&lt;unwrapped_type&gt;)
5629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;native_type,&#32;int64_t&gt;)
5631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,
5632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Integral&#32;value&#32;initializers&#32;must&#32;be&#32;losslessly&#32;convertible&#32;to&#32;int64_t&quot;</emphasis>);
5633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;native_type,&#32;double&gt;)
5634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,
5635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Floating-point&#32;value&#32;initializers&#32;must&#32;be&#32;losslessly&#32;convertible&#32;to&#32;double&quot;</emphasis>);
5636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
5638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dependent_false&lt;T&gt;,
5639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Value&#32;initializers&#32;must&#32;be&#32;losslessly&#32;convertible&#32;to&#32;one&#32;of&#32;the&#32;TOML&#32;value&#32;types&quot;</emphasis>);
5640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5641 
5642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_wide_string&lt;T&gt;)
5643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5644 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
5645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;value_type{&#32;narrow(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))&#32;};
5646 <emphasis role="preprocessor">#else</emphasis>
5647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(dependent_false&lt;T&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
5648 <emphasis role="preprocessor">#endif</emphasis>
5649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;value_type{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;};
5652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5653 
5654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;!=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
5655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out-&gt;flags(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
5656 
5657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
5658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5659 &#32;&#32;&#32;&#32;}
5660 
5661 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5662 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5663 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;make_node_impl(T&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
5664 &#32;&#32;&#32;&#32;{
5665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;<link linkend="_toml_8hpp_1a0f4621a6694e07daea7a5c0282138524">unwrap_node&lt;remove_cvref&lt;T&gt;</link>&gt;;
5666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;unwrapped_type,&#32;node&gt;&#32;||&#32;is_node_view&lt;unwrapped_type&gt;)
5667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;unwrapped_type&gt;)
5669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
5671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::node*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>);
5672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5673 
5674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>).visit(
5675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;concrete)&#32;{
5676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::node*<emphasis role="keyword">&gt;</emphasis>(
5677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_node_impl_specialized(<emphasis role="keyword">static_cast&lt;</emphasis>decltype(concrete)&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(concrete),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
5678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
5679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;make_node_impl_specialized(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
5682 &#32;&#32;&#32;&#32;}
5683 
5684 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5685 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5686 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>*&#32;make_node_impl(<link linkend="_structinserter">inserter&lt;T&gt;</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
5687 &#32;&#32;&#32;&#32;{
5688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;make_node_impl(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.value),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
5689 &#32;&#32;&#32;&#32;}
5690 
5691 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;(is_node&lt;T&gt;&#32;||&#32;is_node_view&lt;T&gt;&#32;||&#32;is_value&lt;T&gt;&#32;||&#32;can_partially_represent_native&lt;T&gt;)&gt;
5692 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>inserted_type_of_
5693 &#32;&#32;&#32;&#32;{
5694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::remove_pointer_t&lt;decltype(make_node_impl(std::declval&lt;T&gt;()))&gt;;
5695 &#32;&#32;&#32;&#32;};
5696 
5697 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5698 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>inserted_type_of_&lt;<link linkend="_structinserter">inserter</link>&lt;T&gt;,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
5699 &#32;&#32;&#32;&#32;{
5700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structinserted__type__of___3_01inserter_3_01_t_01_4_00_01false_01_4_1aff2f8a51a7d112b073d0fcbe1033a547">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;inserted_type_of_&lt;remove_cvref&lt;T&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
5701 &#32;&#32;&#32;&#32;};
5702 
5703 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5704 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>inserted_type_of_&lt;T,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
5705 &#32;&#32;&#32;&#32;{
5706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structinserted__type__of___3_01_t_00_01false_01_4_1a7f8b2182ba45044ff2f27884dda9f5c7">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
5707 &#32;&#32;&#32;&#32;};
5708 
5709 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5710 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5711 &#32;&#32;&#32;&#32;node_ptr&#32;<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(T&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
5712 &#32;&#32;&#32;&#32;{
5713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_ptr{&#32;make_node_impl(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;};
5714 &#32;&#32;&#32;&#32;}
5715 
5716 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
5717 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structemplaced__type__of__">emplaced_type_of_</link>
5718 &#32;&#32;&#32;&#32;{
5719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structemplaced__type__of___1ab43b9e348902f52d980d680811d93036">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
5720 &#32;&#32;&#32;&#32;};
5721 
5722 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5723 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structemplaced__type__of__">emplaced_type_of_</link>&lt;T&gt;
5724 &#32;&#32;&#32;&#32;{
5725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structemplaced__type__of___3_01_t_01_4_1a6170096d1bcf6a908d15260fb170c0c7">type</link>&#32;=&#32;std::conditional_t&lt;is_one_of&lt;T,&#32;node,&#32;node_view&lt;node&gt;,&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;,
5726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
5727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;inserted_type_of_&lt;T&gt;::type&gt;;
5728 &#32;&#32;&#32;&#32;};
5729 
5730 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5731 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structemplaced__type__of__">emplaced_type_of_</link>&lt;<link linkend="_structinserter">inserter</link>&lt;T&gt;&gt;
5732 &#32;&#32;&#32;&#32;{
5733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structemplaced__type__of___3_01inserter_3_01_t_01_4_01_4_1a7e2321d5914d3bcd05089f2c38e23519">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structemplaced__type__of__">emplaced_type_of_&lt;remove_cvref&lt;T&gt;</link>&gt;<link linkend="_structemplaced__type__of___1ab43b9e348902f52d980d680811d93036">::type</link>;
5734 &#32;&#32;&#32;&#32;};
5735 
5736 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
5737 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a8340fb962cffc0c4b9f9995c0a698fd7">emplaced_type_of</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structemplaced__type__of__">emplaced_type_of_&lt;remove_cvref&lt;T&gt;</link>...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
5738 }
5739 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
5740 
5741 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
5742 {
5743 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5744 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>inserted_type_of&#32;=&#32;<link linkend="_toml_8hpp_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(<emphasis role="keyword">typename</emphasis>&#32;impl::inserted_type_of_&lt;impl::remove_cvref&lt;T&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>);
5745 }
5746 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
5747 
5748 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
5749 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
5750 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
5751 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
5752 <emphasis role="preprocessor">#endif</emphasis>
5753 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
5754 
5755 <emphasis role="comment">//********&#32;&#32;impl/array.h&#32;&#32;**********************************************************************************************</emphasis>
5756 
5757 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
5758 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
5759 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
5760 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
5761 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
5762 <emphasis role="preprocessor">#undef&#32;min</emphasis>
5763 <emphasis role="preprocessor">#undef&#32;max</emphasis>
5764 <emphasis role="preprocessor">#endif</emphasis>
5765 
5766 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
5767 {
5768 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;IsConst&gt;
5769 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;array_iterator
5770 &#32;&#32;&#32;&#32;{
5771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
5773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>array_iterator;
5774 
5775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>mutable_vector_iterator&#32;=&#32;std::vector&lt;node_ptr&gt;::iterator;
5776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_vector_iterator&#32;&#32;&#32;=&#32;std::vector&lt;node_ptr&gt;::const_iterator;
5777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>vector_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const_vector_iterator,&#32;mutable_vector_iterator&gt;;
5778 
5779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;vector_iterator&#32;iter_;
5780 
5781 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
5782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const&#32;node,&#32;node&gt;;
5783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;value_type&amp;;
5784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;value_type*;
5785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
5786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;vector_iterator&gt;::iterator_category;
5787 
5788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator()&#32;noexcept&#32;=&#32;default;
5790 
5791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;array_iterator(mutable_vector_iterator&#32;iter)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
5793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
5794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
5795 
5796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
5797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;array_iterator(const_vector_iterator&#32;iter)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
5799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
5800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
5801 
5802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
5803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator(<emphasis role="keyword">const</emphasis>&#32;array_iterator&lt;false&gt;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
5805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;other.iter_&#32;}
5806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
5807 
5808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5810 
5811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5812 
5813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator++()&#32;noexcept&#32;<emphasis role="comment">//&#32;++pre</emphasis>
5814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
5816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5818 
5819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post++</emphasis>
5820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;out{&#32;iter_&#32;};
5822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
5823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
5824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5825 
5826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator--()&#32;noexcept&#32;<emphasis role="comment">//&#32;--pre</emphasis>
5827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
5829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5831 
5832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post--</emphasis>
5833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&#32;out{&#32;iter_&#32;};
5835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
5836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
5837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5838 
5839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept
5841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*iter_-&gt;get();
5843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5844 
5845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;operator-&gt;()&#32;const&#32;noexcept
5847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_-&gt;get();
5849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5850 
5851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;vector_iterator&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
5853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
5855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5856 
5857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(!<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
5858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;const_vector_iterator()&#32;const&#32;noexcept
5860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
5862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5863 
5864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_&#32;+=&#32;rhs;
5867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5869 
5870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;array_iterator&amp;&#32;operator-=(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_&#32;-=&#32;rhs;
5873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5875 
5876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;array_iterator&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array_iterator{&#32;lhs.iter_&#32;+&#32;rhs&#32;};
5880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5881 
5882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;array_iterator&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array_iterator{&#32;rhs.iter_&#32;+&#32;lhs&#32;};
5886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5887 
5888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
5889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;array_iterator&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;array_iterator{&#32;lhs.iter_&#32;-&#32;rhs&#32;};
5892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5893 
5894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;-&#32;rhs.iter_;
5898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5899 
5900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;==&#32;rhs.iter_;
5904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5905 
5906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;!=&#32;rhs.iter_;
5910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5911 
5912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&lt;&#32;rhs.iter_;
5916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5917 
5918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&lt;=&#32;rhs.iter_;
5922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5923 
5924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&gt;&#32;rhs.iter_;
5928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5929 
5930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;array_iterator&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
5932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;&gt;=&#32;rhs.iter_;
5934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5935 
5936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
5937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;operator[](<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;idx)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
5938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(iter_&#32;+&#32;idx)-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
5940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5941 &#32;&#32;&#32;&#32;};
5942 
5943 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structarray__init__elem">array_init_elem</link>
5944 &#32;&#32;&#32;&#32;{
5945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;node_ptr&#32;<link linkend="_structarray__init__elem_1a04752d3afbcb81a792e0bfbd57003f2a">value</link>;
5946 
5947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structarray__init__elem_1aa0531a03ed70077af3e333431c99aa6b">array_init_elem</link>(T&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)&#32;<emphasis role="comment">//</emphasis>
5950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classvalue">value</link>{&#32;<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(static_cast&lt;T&amp;&amp;&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;}
5951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
5952 &#32;&#32;&#32;&#32;};
5953 }
5954 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
5955 
5956 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
5957 {
5958 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>array_iterator&#32;=&#32;<link linkend="_toml_8hpp_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::array_iterator&lt;false&gt;);
5959 
5960 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_array_8h_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link>&#32;=&#32;<link linkend="_toml_8hpp_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::array_iterator&lt;true&gt;);
5961 
5962 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classarray">array</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;node
5963 &#32;&#32;&#32;&#32;{
5964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
5965 
5966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>vector_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::vector&lt;impl::node_ptr&gt;;
5967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>vector_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;vector_type::iterator;
5968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_vector_iterator&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;vector_type::const_iterator;
5969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector_type&#32;elems_;
5970 
5971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
5973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*,&#32;<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*);
5974 
5975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
5976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(std::false_type,&#32;std::initializer_list&lt;impl::array_init_elem&gt;&#32;elems)&#32;<emphasis role="comment">//</emphasis>
5977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classarray">array</link>{&#32;elems.begin(),&#32;elems.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;}
5978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
5979 
5980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
5981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;preinsertion_resize(<emphasis role="keywordtype">size_t</emphasis>&#32;idx,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
5982 
5983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
5984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;insert_at_back(impl::node_ptr&amp;&amp;);
5985 
5986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
5987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector_iterator&#32;insert_at(const_vector_iterator,&#32;impl::node_ptr&amp;&amp;);
5988 
5989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
5990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;emplace_back_if_not_empty_view(T&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)
5991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;T&gt;)
5993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
5995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
5996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_at_back(impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>T&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
5998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5999 
6000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;total_leaf_count()&#32;const&#32;noexcept;
6003 
6004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;flatten_child(<link linkend="_classarray">array</link>&amp;&amp;&#32;child,&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;dest_index)&#32;noexcept;
6006 
6007 &#32;&#32;&#32;&#32;&#32;&#32;public:
6008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;<link linkend="_classarray_1af0e812608d7d0f58415f98a112d939cb">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node;
6009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;<link linkend="_classarray_1ab5532fb7056099ba0485affa76694cc7">size_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordtype">size_t</emphasis>;
6010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;<link linkend="_classarray_1ac6d6744974ffee1dca66ee63e6bd3139">difference_type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
6011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;<link linkend="_classarray_1a55744407041edf5e34d374ed10ca4809">reference</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node&amp;;
6012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;<link linkend="_classarray_1a0e221fb96f0fbdc07e20b811591fa686">const_reference</link>&#32;=&#32;const&#32;node&amp;;
6013 
6014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>()&#32;noexcept;
6017 
6018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~<link linkend="_classarray">array</link>()&#32;noexcept;
6020 
6021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(const&#32;<link linkend="_classarray">array</link>&amp;);
6024 
6025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>(<link linkend="_classarray">array</link>&amp;&amp;&#32;other)&#32;noexcept;
6028 
6029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((sizeof...(ElemTypes)&#32;&gt;&#32;0&#32;||&#32;!<link linkend="_namespacestd">std</link>::is_same_v&lt;impl::remove_cvref&lt;ElemType&gt;,&#32;<link linkend="_classarray">array</link>&gt;),
6030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;ElemType,
6031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename...&#32;ElemTypes)
6032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classarray">array</link>(ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;ElemTypes&amp;&amp;...&#32;vals)
6034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classarray">array</link>{&#32;std::false_type{},
6035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::initializer_list&lt;impl::array_init_elem&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),
6036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemTypes&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(vals)...&#32;}&#32;}
6037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6038 
6039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;);
6041 
6042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">operator=</link>(<link linkend="_classarray">array</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
6044 
6045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_type&#32;<link linkend="_classarray_1a9ccff2347a4e44e86ec966c0aba8aec3">type</link>()&#32;const&#32;noexcept&#32;final
6047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_type::array;
6049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6050 
6051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
6052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1ac515de2b5c9aeebd65b046191fe53c20">is_homogeneous</link>(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
6054 
6055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
6056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1add3b969719a6b19e177f3e1cb444b29a">is_homogeneous</link>(node_type&#32;ntype,&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
6058 
6059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
6060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a34a1b4f03f0deeb196920867060a1ed2">is_homogeneous</link>(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
6062 
6063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
6064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
6065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">is_homogeneous</link>()&#32;const&#32;noexcept
6066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;ElemType&gt;&gt;;
6068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_void_v&lt;type&gt;&#32;||&#32;toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
6069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;array::is_homogeneous()&#32;must&#32;be&#32;void&#32;or&#32;one&#32;&quot;</emphasis>
6070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
6071 
6072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_homogeneous(impl::node_type_of&lt;type&gt;);
6073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1af12f1f0b923817f79649514f378345b1">is_table</link>()&#32;const&#32;noexcept&#32;final
6076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6079 
6080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a15f11553a26aadc2b6035e5bebc1b82e">is_array</link>()&#32;const&#32;noexcept&#32;final
6082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6085 
6086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
6087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a6efebd20b162d0297dc45cdcb312f885">is_array_of_tables</link>()&#32;const&#32;noexcept&#32;final
6088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_homogeneous(node_type::table);
6090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6091 
6092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1aa1efcb5bf28b4d1e4f6ccd144fdcf2a1">is_value</link>()&#32;const&#32;noexcept&#32;final
6094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6097 
6098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a26e7c61caa26aceb1d680d3a166039c5">is_string</link>()&#32;const&#32;noexcept&#32;final
6100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6103 
6104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a6d29b7aa90c36ef1ed49e36f98839528">is_integer</link>()&#32;const&#32;noexcept&#32;final
6106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6109 
6110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a4fab255d87c6ae9d36e4a3c246dd5f07">is_floating_point</link>()&#32;const&#32;noexcept&#32;final
6112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6115 
6116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1adc342485eeabade65bba8e71174855a4">is_number</link>()&#32;const&#32;noexcept&#32;final
6118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6121 
6122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a1372f03a89df119b74840c3827ca9a5f">is_boolean</link>()&#32;const&#32;noexcept&#32;final
6124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6127 
6128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1af962a263286ae8226de1e21808ff0dc5">is_date</link>()&#32;const&#32;noexcept&#32;final
6130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6133 
6134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a64896e10538bbdf9580b847541ddc24a">is_time</link>()&#32;const&#32;noexcept&#32;final
6136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6139 
6140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a17bec6bcc814ae17ec6c677008d331c4">is_date_time</link>()&#32;const&#32;noexcept&#32;final
6142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6145 
6146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classarray_1a0392038ae47856939bdb69a45aa02f19">as_table</link>()&#32;noexcept&#32;final
6148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6151 
6152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link>()&#32;noexcept&#32;final
6154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
6156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6157 
6158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classarray_1a2c565b702d0e7f7d0a8b7b560d6942e7">as_string</link>()&#32;noexcept&#32;final
6160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6163 
6164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classarray_1a6eac9d65fd5fc42999c7899d1667e2e7">as_integer</link>()&#32;noexcept&#32;final
6166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6169 
6170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classarray_1a1e9d91f1eb1bffd5ccb413c5a8629a06">as_floating_point</link>()&#32;noexcept&#32;final
6172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6175 
6176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classarray_1a5201cfd7b1e4f781120c57f1bd5bd261">as_boolean</link>()&#32;noexcept&#32;final
6178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6181 
6182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classarray_1ada3cb4f3e2e02845457837b34b2f51c5">as_date</link>()&#32;noexcept&#32;final
6184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6187 
6188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classarray_1ac6177c03c1242d5e48b8c551350d9bb1">as_time</link>()&#32;noexcept&#32;final
6190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6193 
6194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classarray_1a9ca76642edccdd01cc1c03d807364afa">as_date_time</link>()&#32;noexcept&#32;final
6196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6199 
6200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classarray_1a9ebc4e46a6a25419f143fbb887ceb4ec">as_table</link>()&#32;const&#32;noexcept&#32;final
6202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6205 
6206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classarray_1a786d5d347389737ed95296f430449fe6">as_array</link>()&#32;const&#32;noexcept&#32;final
6208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
6210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6211 
6212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classarray_1ac584a174d9fe2520d4abde7d70e9a4dd">as_string</link>()&#32;const&#32;noexcept&#32;final
6214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6217 
6218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classarray_1abde810ec6aaffdf0da0b7f8392e875df">as_integer</link>()&#32;const&#32;noexcept&#32;final
6220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6223 
6224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classarray_1ab720c1761d1c4a4fc3ebba4a8ea5cde6">as_floating_point</link>()&#32;const&#32;noexcept&#32;final
6226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6229 
6230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classarray_1a1eabfb6e7690206fc06319c75f9f5ade">as_boolean</link>()&#32;const&#32;noexcept&#32;final
6232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6235 
6236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classarray_1ad7bd73a6b8abce589acab23df19d7441">as_date</link>()&#32;const&#32;noexcept&#32;final
6238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6241 
6242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classarray_1a63e8132f3b5cad45f09e8afcd4f037d1">as_time</link>()&#32;const&#32;noexcept&#32;final
6244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6247 
6248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
6249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classarray_1a6ca747ebe568724fa759593cfde35c53">as_date_time</link>()&#32;const&#32;noexcept&#32;final
6250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6253 
6254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
6256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;&lt;&#32;elems_.size()&#32;?&#32;elems_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>].get()&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
6258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6259 
6260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;<link linkend="_classarray_1a5308a8ac094c5dd4d4303f984e3c5755">get</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
6262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
6264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6265 
6266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
6267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::wrap_node&lt;ElemType&gt;*&#32;<link linkend="_classarray_1ae355770b27d72e41a7dca38378ff0c94">get_as</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
6269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>))
6271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;template&#32;as&lt;ElemType&gt;();
6272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
6273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6274 
6275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
6276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;impl::wrap_node&lt;ElemType&gt;*&#32;<link linkend="_classarray_1af2c374bb1623a733d0e5abd1a541bc16">get_as</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
6278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).template&#32;get_as&lt;ElemType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
6280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6281 
6282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node::operator[];&#32;<emphasis role="comment">//&#32;inherit&#32;operator[toml::path]</emphasis>
6283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1aae0a2380f27a021993e6e17afd8068d9">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
6285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
6287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6288 
6289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1a5c3b961db194cf3d6e693c5df831f383">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
6291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>];
6293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6294 
6295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">at</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
6298 
6299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1ac8e8f2da27ed77280b6ee02d65dd2f82">at</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)<emphasis role="keyword">&#32;const</emphasis>
6301 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
6302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">at</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
6303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6304 
6305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1acdfb2184dd4948a173bbd628f59ec2d4">front</link>()&#32;noexcept
6307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.front();
6309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6310 
6311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1ae5e63a15acd4888e0fa4e1ddb4811c01">front</link>()&#32;const&#32;noexcept
6313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.front();
6315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6316 
6317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1a379242a7c65182981d5ce24535c58296">back</link>()&#32;noexcept
6319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.back();
6321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6322 
6323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classarray_1aeb918af97cb9bd5d14b705fcef029064">back</link>()&#32;const&#32;noexcept
6325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.back();
6327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6328 
6329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;=&#32;array_iterator;
6330 
6331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;=&#32;<link linkend="_array_8h_1ae3fd8742e4c8e5256fbcdce909c40770">const_array_iterator</link>;
6332 
6333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a0215ba81d7547fcd4e81fed83140b40a">begin</link>()&#32;noexcept
6335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;};
6337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6338 
6339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a70e3c270fd06429236eca61c7925a247">begin</link>()&#32;const&#32;noexcept
6341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cbegin()&#32;};
6343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6344 
6345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a2bfcf1d4ba89ba33ced81668ead5d704">cbegin</link>()&#32;const&#32;noexcept
6347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cbegin()&#32;};
6349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6350 
6351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end</link>()&#32;noexcept
6353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.end()&#32;};
6355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6356 
6357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a743a646eff478e5095337b65eea00d16">end</link>()&#32;const&#32;noexcept
6359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cend()&#32;};
6361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6362 
6363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="_classarray_1a5d0e8fa3ed1e0d92c7c07dab08109aad">cend</link>()&#32;const&#32;noexcept
6365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>{&#32;elems_.cend()&#32;};
6367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6368 
6369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6370 
6371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
6372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>for_each_elem_ref&#32;=&#32;impl::copy_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;impl::unwrap_node&lt;T&gt;&gt;&gt;,&#32;Array&gt;;
6373 
6374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each&#32;=&#32;std::is_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;,&#32;<emphasis role="keywordtype">size_t</emphasis>&gt;&#32;<emphasis role="comment">//</emphasis>
6376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_invocable_v&lt;Func,&#32;size_t,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
6377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;;
6378 
6379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_nothrow&#32;=
6381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;,&#32;<emphasis role="keywordtype">size_t</emphasis>&gt;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_nothrow_invocable_v&lt;Func,&#32;size_t,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
6383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_nothrow_invocable_v&lt;Func,&#32;for_each_elem_ref&lt;T,&#32;Array&gt;&gt;;
6384 
6385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
6386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_any&#32;=&#32;can_for_each&lt;Func,&#32;Array,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
6389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Array,&#32;date_time&gt;;
6395 
6396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow_one&#32;=&#32;!can_for_each&lt;Func,&#32;Array,&#32;T&gt;&#32;<emphasis role="comment">//</emphasis>
6398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each_nothrow&lt;Func,&#32;Array,&#32;T&gt;;
6399 
6400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
6401 
6402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
6403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow&#32;=&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
6406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Array,&#32;date_time&gt;;
6412 
6413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
6414 
6415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Array&gt;
6416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;do_for_each(Func&amp;&amp;&#32;visitor,&#32;Array&amp;&amp;&#32;arr)&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;Array&amp;&amp;&gt;)
6417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(can_for_each_any&lt;Func&amp;&amp;,&#32;Array&amp;&amp;&gt;,
6419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML&#32;array&#32;for_each&#32;visitors&#32;must&#32;be&#32;invocable&#32;for&#32;at&#32;least&#32;one&#32;of&#32;the&#32;toml::node&#32;&quot;</emphasis>
6420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;specializations:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a28ad2f9bb777d4b3cb545bdc94b55b63">TOML_SA_NODE_TYPE_LIST</link>);
6421 
6422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.size();&#32;i++)
6423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_ref&#32;=&#32;impl::copy_cvref&lt;toml::node,&#32;Array&amp;&amp;&gt;;
6425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;node_ref&gt;);
6426 
6427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;keep_going&#32;=
6428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>node_ref<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Array&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(arr)[i])
6429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.visit(
6430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;elem)
6431 <emphasis role="preprocessor">#if&#32;!TOML_MSVC&#32;</emphasis><emphasis role="comment">//&#32;MSVC&#32;thinks&#32;this&#32;is&#32;invalid&#32;syntax&#32;O_o</emphasis>
6432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow_one&lt;Func&amp;&amp;,&#32;Array&amp;&amp;,&#32;<emphasis role="keyword">decltype</emphasis>(elem)&gt;)
6433 <emphasis role="preprocessor">#endif</emphasis>
6434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>elem_ref&#32;=&#32;for_each_elem_ref&lt;<emphasis role="keyword">decltype</emphasis>(elem),&#32;Array&amp;&amp;&gt;;
6436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;elem_ref&gt;);
6437 
6438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(elem,&#32;i)</emphasis>
6439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;elem_ref,&#32;size_t&gt;)
6440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
6442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem),&#32;i));
6443 
6444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
6445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
6447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem),&#32;i));
6448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem),&#32;i);
6452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6455 
6456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(i,&#32;elem)</emphasis>
6457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;size_t,&#32;elem_ref&gt;)
6458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
6460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
6461 
6462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
6463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
6465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
6466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem));
6470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6473 
6474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(elem)</emphasis>
6475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;elem_ref&gt;)
6476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
6478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
6479 
6480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
6481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
6483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem)));
6484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>elem_ref<emphasis role="keyword">&gt;</emphasis>(elem));
6488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6491 
6492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;visitor&#32;not&#32;compatible&#32;with&#32;this&#32;particular&#32;type</emphasis>
6493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
6496 
6497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!keep_going)
6498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
6499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6501 
6502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6503 
6504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
6505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a6dc6f1d0d32faa3cb32e7632de55cc8d">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;array&amp;&gt;)
6506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
6508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
6509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6510 
6511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
6512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1a55e1737c21aa6c44b546bce4a02792f0">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;array&amp;&amp;&gt;)
6513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
6515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
6516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6517 
6518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
6519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1aab741ce674cbf0b4975bc4fa7f2f7440">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;array&amp;&gt;)
6520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
6522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
6523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6524 
6525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
6526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1aeb60ad85d6a1704300e289ebfb6f4a97">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;array&amp;&amp;&gt;)
6527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
6529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
6530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6531 
6532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>()&#32;const&#32;noexcept
6534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.empty();
6536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6537 
6538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link>()&#32;const&#32;noexcept
6540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.size();
6542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6543 
6544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classarray_1ab4acea77b99e7840afc6d2547a2b0dc2">max_size</link>()&#32;const&#32;noexcept
6546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.max_size();
6548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6549 
6550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classarray_1a3b63fa3d1dce25204338afaa72bb9ba7">capacity</link>()&#32;const&#32;noexcept
6552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.capacity();
6554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6555 
6556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1">reserve</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_capacity);
6558 
6559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1ae420782d223545646c2f76a0f557bf1d">shrink_to_fit</link>();
6561 
6562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22">truncate</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_size);
6564 
6565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
6566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1accdc8c2b96ab9b8dc1355d06be0c268b">resize</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_size,
6567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ElemType&amp;&amp;&#32;default_init_val,
6568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;default_init_flags&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
6569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_node_view&lt;ElemType&gt;,
6571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;default&#32;element&#32;type&#32;argument&#32;to&#32;toml::array::resize&#32;may&#32;not&#32;be&#32;toml::node_view.&quot;</emphasis>);
6572 
6573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!new_size)
6574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clear();
6575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(new_size&#32;&gt;&#32;elems_.size())
6576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(cend(),&#32;new_size&#32;-&#32;elems_.size(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(default_init_val),&#32;default_init_flags);
6577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truncate(new_size);
6579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6580 
6581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">erase</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>;
6583 
6584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a84e61ee425b558cf7e6e97369afe298d">erase</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;last)&#32;<emphasis role="keyword">noexcept</emphasis>;
6586 
6587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1ad02eb6d4631b38d436733d693773eed0">flatten</link>()&#32;&amp;;
6589 
6590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1a6e0f6f40c784f569c2b9943d8764312a">flatten</link>()&#32;&amp;&amp;
6591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::array&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(this-&gt;flatten());
6593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6594 
6595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>;
6597 
6598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&amp;&#32;<link linkend="_classarray_1a3abd5f1417098187f796bb4c6717aa60">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
6599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::array&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(this-&gt;prune(recursive));
6601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6602 
6603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a6327207c728cef7a8b406684ee85b66d">pop_back</link>()&#32;noexcept;
6605 
6606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
6607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;clear()&#32;noexcept;
6608 
6609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;ElemType&gt;
6610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;insert(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
6611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ElemType&gt;)
6613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
6616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;insert_at(const_vector_iterator{&#32;pos&#32;},
6618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>))&#32;};
6619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6620 
6621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
6622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a44fd9887f4b76eacdd07ec1a5a0e57f3">insert</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,
6623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>,
6624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
6625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
6626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ElemType&gt;)
6628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
6631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>)
6633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin())&#32;};
6635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert(pos,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
6637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;start_idx&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin());
6639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preinsertion_resize(start_idx,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
6640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;start_idx;
6641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;e&#32;=&#32;start_idx&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;-&#32;1u;&#32;i&#32;&lt;&#32;e;&#32;i++)
6642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i]&#32;=&#32;impl::make_node(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6643 
6644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i]&#32;=&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(start_idx)&#32;};
6646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6649 
6650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iter&gt;
6651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1ae11cb9d4ccde0e89d73b14cd929e8449">insert</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;Iter&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;Iter&#32;last,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
6652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacedistance">distance</link>&#32;=&#32;std::distance(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;last);
6654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacedistance">distance</link>&#32;&lt;=&#32;0)
6655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin())&#32;};
6656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedistance">distance</link>;
6659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>deref_type&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(*first);
6660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;deref_type&gt;)
6661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;it&#32;!=&#32;last;&#32;it++)
6663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(*it))
6664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>--;
6665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>)
6666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin())&#32;};
6667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;start_idx&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin());
6669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preinsertion_resize(start_idx,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>));
6670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;start_idx;
6671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;it&#32;!=&#32;last;&#32;it++)
6672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;deref_type&gt;)
6674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(*it))
6676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
6677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_rvalue_reference_v&lt;deref_type&gt;)
6679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i++]&#32;=&#32;impl::make_node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*it),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[i++]&#32;=&#32;impl::make_node(*it,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;elems_.begin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(start_idx)&#32;};
6684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6686 
6687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
6688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1a7b9e455ccd8331a7205f9ce66d4593d4">insert</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,
6689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::initializer_list&lt;ElemType&gt;&#32;ilist,
6690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
6691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert(pos,&#32;ilist.begin(),&#32;ilist.end(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6694 
6695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1ae05181bf0df8b0c85da9ae13458b0a06">emplace</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;Args&amp;&amp;...&#32;args)
6697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>raw_elem_type&#32;=&#32;impl::remove_cvref&lt;ElemType&gt;;
6699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>elem_type&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;std::is_void_v&lt;raw_elem_type&gt;,&#32;<emphasis role="comment">//</emphasis>
6700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::emplaced_type_of&lt;Args&amp;&amp;...&gt;,
6701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raw_elem_type&gt;;
6702 
6703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;elem_type&gt;&gt;;
6704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::is_native&lt;type&gt;&#32;||&#32;impl::is_one_of&lt;type,&#32;table,&#32;array&gt;,
6705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Emplacement&#32;type&#32;parameter&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
6706 
6707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;insert_at(const_vector_iterator{&#32;pos&#32;},
6708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;}&#32;})&#32;};
6709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6710 
6711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
6712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>&#32;<link linkend="_classarray_1ad47525682635a4ae40f663ed52bb05e7">replace</link>(<link linkend="_classarray_1ade84b39cb55e9f1496ec98f2aac6a983">const_iterator</link>&#32;pos,&#32;ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
6713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(pos&#32;&gt;=&#32;cbegin()&#32;&amp;&amp;&#32;pos&#32;&lt;&#32;cend());
6715 
6716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ElemType&gt;)
6717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
6719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
6720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6721 
6722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;elems_.begin()&#32;+&#32;(const_vector_iterator{&#32;pos&#32;}&#32;-&#32;elems_.cbegin());
6723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*it&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">iterator</link>{&#32;it&#32;};
6725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6726 
6727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&gt;
6728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c">push_back</link>(ElemType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
6729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;emplace_back_if_not_empty_view(<emphasis role="keyword">static_cast&lt;</emphasis>ElemType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
6731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6732 
6733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;Args&gt;
6734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back</link>(Args&amp;&amp;...&#32;args)
6735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>raw_elem_type&#32;=&#32;impl::remove_cvref&lt;ElemType&gt;;
6737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>elem_type&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;std::is_void_v&lt;raw_elem_type&gt;,&#32;<emphasis role="comment">//</emphasis>
6738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::emplaced_type_of&lt;Args&amp;&amp;...&gt;,
6739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raw_elem_type&gt;;
6740 
6741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;moving_node_ptr&#32;=&#32;std::is_same_v&lt;elem_type,&#32;impl::node_ptr&gt;&#32;<emphasis role="comment">//</emphasis>
6742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>...(Args)&#32;==&#32;1u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;impl::first_is_same&lt;impl::node_ptr&amp;&amp;,&#32;Args&amp;&amp;...&gt;;
6744 
6745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unwrapped_type&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;elem_type&gt;&gt;;
6746 
6747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
6748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;moving_node_ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_native&lt;unwrapped_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
6750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_one_of&lt;unwrapped_type,&#32;table,&#32;array&gt;,&#32;<emphasis role="comment">//</emphasis>
6751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ElemType&#32;argument&#32;of&#32;array::emplace_back()&#32;must&#32;be&#32;one&#32;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
6752 
6753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(moving_node_ptr)
6754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_at_back(<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
6756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.back();
6757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ptr&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;unwrapped_type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Args&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;};
6761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_at_back(impl::node_ptr{&#32;ptr&#32;});
6762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*ptr;
6763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6765 
6766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6767 
6768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
6770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
6771 
6772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;equal_to_container(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;std::remove_const_t&lt;typename&#32;T::value_type&gt;;
6777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::is_losslessly_convertible_to_native&lt;element_type&gt;,
6778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Container&#32;element&#32;type&#32;must&#32;be&#32;losslessly&#32;convertible&#32;one&#32;of&#32;the&#32;native&#32;TOML&#32;value&#32;types&quot;</emphasis>);
6779 
6780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.size()&#32;!=&#32;rhs.size())
6781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rhs.size()&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
6783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6784 
6785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i{};
6786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;list_elem&#32;:&#32;rhs)
6787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;elem&#32;=&#32;lhs.get_as&lt;impl::native_type_of&lt;element_type&gt;&gt;(i++);
6789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!elem&#32;||&#32;*elem&#32;!=&#32;list_elem)
6790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
6791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6792 
6793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
6794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6795 
6796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6797 
6798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a9b0bbc5272ae44ea14a06ec70cfa1882">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
6802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6803 
6804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a45e3c17332ca62a1e0bff55d0808116c">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
6808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6809 
6810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a12cf27ed8dbb468cff18164aad02e289">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;std::initializer_list&lt;T&gt;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal_to_container(lhs,&#32;rhs);
6815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1a5940e61991f3006afb94e17d0b1d93ac">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;std::initializer_list&lt;T&gt;&amp;,&#32;template&#32;&lt;typename&#32;T&gt;);
6817 
6818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
6819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
6820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a1afcb945a833cd794f4696d0965bcb15">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal_to_container(lhs,&#32;rhs);
6823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray_1a54e1e8b41a7532a12d719b232f22d5f2">TOML_ASYMMETRICAL_EQUALITY_OPS</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;T&gt;&amp;,&#32;template&#32;&lt;typename&#32;T&gt;);
6825 
6826 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
6827 
6828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classarray_1ada82b30641e7546cfe89ece1db7436cc">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)
6829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
6831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
6832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6833 
6834 <emphasis role="preprocessor">#endif</emphasis>
6835 &#32;&#32;&#32;&#32;};
6836 }
6837 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
6838 
6839 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
6840 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
6841 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
6842 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
6843 <emphasis role="preprocessor">#endif</emphasis>
6844 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
6845 
6846 <emphasis role="comment">//********&#32;&#32;impl/key.h&#32;&#32;************************************************************************************************</emphasis>
6847 
6848 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
6849 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
6850 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
6851 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
6852 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
6853 <emphasis role="preprocessor">#undef&#32;min</emphasis>
6854 <emphasis role="preprocessor">#undef&#32;max</emphasis>
6855 <emphasis role="preprocessor">#endif</emphasis>
6856 
6857 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
6858 {
6859 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>key
6860 &#32;&#32;&#32;&#32;{
6861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
6862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;key_;
6863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__region">source_region</link>&#32;source_;
6864 
6865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
6866 
6867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key()&#32;noexcept&#32;=&#32;default;
6869 
6870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;key(<link linkend="_namespacestd">std</link>::string_view&#32;k,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;=&#32;{})&#32;<emphasis role="comment">//</emphasis>
6872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;k&#32;},
6873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
6874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6875 
6876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;key(std::string_view&#32;k,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="comment">//</emphasis>
6878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;k&#32;},
6879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}
6880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6881 
6882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;key(std::string&amp;&amp;&#32;k,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;=&#32;{})&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
6884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(k)&#32;},
6885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
6886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6887 
6888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;key(std::string&amp;&amp;&#32;k,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
6890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(k)&#32;},
6891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}
6892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6893 
6894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;key(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;k,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;=&#32;{})&#32;<emphasis role="comment">//</emphasis>
6896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;k&#32;},
6897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
6898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6899 
6900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;key(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;k,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="comment">//</emphasis>
6902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;k&#32;},
6903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}
6904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6905 
6906 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
6907 
6908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;key(std::wstring_view&#32;k,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;=&#32;{})&#32;<emphasis role="comment">//</emphasis>
6910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;impl::narrow(k)&#32;},
6911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
6912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6913 
6914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
6915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;key(std::wstring_view&#32;k,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="comment">//</emphasis>
6916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;key_{&#32;impl::narrow(k)&#32;},
6917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}
6918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
6919 
6920 <emphasis role="preprocessor">#endif</emphasis>
6921 
6922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;str()&#32;const&#32;noexcept
6924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string_view{&#32;key_&#32;};
6926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6927 
6928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*implicit*/</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;std::string_view()&#32;const&#32;noexcept
6930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str();
6932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6933 
6934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()&#32;const&#32;noexcept
6936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key_.empty();
6938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6939 
6940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;const&#32;noexcept
6942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key_.data();
6944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6945 
6946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>()&#32;const&#32;noexcept
6948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key_.length();
6950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6951 
6952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>()&#32;const&#32;noexcept
6954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;source_;
6956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6957 
6958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;==&#32;rhs.key_;
6962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6963 
6964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;!=&#32;rhs.key_;
6968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6969 
6970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&lt;&#32;rhs.key_;
6974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6975 
6976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&lt;=&#32;rhs.key_;
6980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6981 
6982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&gt;&#32;rhs.key_;
6986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6987 
6988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&gt;=&#32;rhs.key_;
6992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6993 
6994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
6995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;std::string_view&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
6996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;==&#32;rhs;
6998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6999 
7000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;std::string_view&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;!=&#32;rhs;
7004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7005 
7006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;std::string_view&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&lt;&#32;rhs;
7010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7011 
7012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;std::string_view&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&lt;=&#32;rhs;
7016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7017 
7018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;std::string_view&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&gt;&#32;rhs;
7022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7023 
7024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;lhs,&#32;std::string_view&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key_&#32;&gt;=&#32;rhs;
7028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7029 
7030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;==&#32;rhs.key_;
7034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7035 
7036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;!=&#32;rhs.key_;
7040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7041 
7042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&#32;rhs.key_;
7046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7047 
7048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;=(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;=&#32;rhs.key_;
7052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7053 
7054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;&#32;rhs.key_;
7058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7059 
7060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&gt;=(std::string_view&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;=&#32;rhs.key_;
7064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7065 
7066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_iterator&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*;
7067 
7068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator&#32;=&#32;const_iterator;
7069 
7070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;const&#32;noexcept
7072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key_.data();
7074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7075 
7076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;const&#32;noexcept
7078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key_.data()&#32;+&#32;key_.length();
7080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7081 
7082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;rhs)
7083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs.key_);
7085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
7086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7087 &#32;&#32;&#32;&#32;};
7088 
7089 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7090 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a4221a3b3314589bb76d18268cf2f2c4c">is_key</link>&#32;=&#32;std::is_same_v&lt;impl::remove_cvref&lt;T&gt;,&#32;toml::key&gt;;
7091 
7092 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7093 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&#32;=&#32;is_key&lt;T&gt;&#32;<emphasis role="comment">//</emphasis>
7094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_constructible_or_convertible&lt;toml::key,&#32;T&gt;;
7095 }
7096 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
7097 
7098 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
7099 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
7100 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
7101 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
7102 <emphasis role="preprocessor">#endif</emphasis>
7103 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
7104 
7105 <emphasis role="comment">//********&#32;&#32;impl/std_map.h&#32;&#32;********************************************************************************************</emphasis>
7106 
7107 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
7108 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
7109 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
7110 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
7111 
7112 <emphasis role="comment">//********&#32;&#32;impl/table.h&#32;&#32;**********************************************************************************************</emphasis>
7113 
7114 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
7115 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
7116 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
7117 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
7118 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
7119 <emphasis role="preprocessor">#undef&#32;min</emphasis>
7120 <emphasis role="preprocessor">#undef&#32;max</emphasis>
7121 <emphasis role="preprocessor">#endif</emphasis>
7122 
7123 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
7124 {
7125 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;IsConst&gt;
7126 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>table_proxy_pair
7127 &#32;&#32;&#32;&#32;{
7128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const&#32;node,&#32;node&gt;;
7129 
7130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::key&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
7131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;&#32;second;
7132 &#32;&#32;&#32;&#32;};
7133 
7134 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;IsConst&gt;
7135 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classtable__iterator">table_iterator</link>
7136 &#32;&#32;&#32;&#32;{
7137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
7139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classtable__iterator">table_iterator</link>;
7140 
7141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>proxy_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;table_proxy_pair&lt;IsConst&gt;;
7142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>mutable_map_iterator&#32;=&#32;std::map&lt;toml::key,&#32;node_ptr,&#32;std::less&lt;&gt;&gt;::iterator;
7143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_map_iterator&#32;&#32;&#32;=&#32;std::map&lt;toml::key,&#32;node_ptr,&#32;std::less&lt;&gt;&gt;::const_iterator;
7144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;IsConst,&#32;const_map_iterator,&#32;mutable_map_iterator&gt;;
7145 
7146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;map_iterator&#32;iter_;
7147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(proxy_type)&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;proxy_[<emphasis role="keyword">sizeof</emphasis>(proxy_type)];
7148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
7149 
7150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_type*&#32;get_proxy()&#32;const&#32;noexcept
7152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!proxy_instantiated_)
7154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;p&#32;=&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(proxy_))&#32;proxy_type{&#32;iter_-&gt;first,&#32;*iter_-&gt;second.get()&#32;};
7156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
7157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
7158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a50ef717d8403c782d1405902faca4b80">TOML_LAUNDER</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>proxy_type*<emphasis role="keyword">&gt;</emphasis>(proxy_));
7161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7162 
7163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1a927971b405ec32ab9ead3070834ed9d3">table_iterator</link>()&#32;noexcept&#32;=&#32;default;
7166 
7167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classtable__iterator">table_iterator</link>(mutable_map_iterator&#32;iter)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
7169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
7170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
7171 
7172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
7173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classtable__iterator_1ae1afe8ab9aacc20250e7080302214c75">table_iterator</link>(const_map_iterator&#32;iter)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
7175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;iter&#32;}
7176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
7177 
7178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
7179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1a7e36036afab6f639d48c0d2b831834b7">table_iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator&lt;false&gt;</link>&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
7181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;other.iter_&#32;}
7182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
7183 
7184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1a554876885261cac5a8c405f34d9f2f85">table_iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
7186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;iter_{&#32;other.iter_&#32;}
7187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
7188 
7189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;<link linkend="_classtable__iterator_1a0e0044f4bcc398d1d134c9cce68c7176">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;rhs.iter_;
7192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
7193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
7194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7195 
7196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1a13ef9869127c3631d01369bee0d17aa5">value_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;table_proxy_pair&lt;IsConst&gt;;
7197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1af2354635a7ee020e49582f75e8773bf0">reference</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_classtable__iterator_1a13ef9869127c3631d01369bee0d17aa5">value_type</link>&amp;;
7198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1a93d59c68765600bd4f1b4cbdc1c46d76">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_classtable__iterator_1a13ef9869127c3631d01369bee0d17aa5">value_type</link>*;
7199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1aaed33aefda45393ff595e69092eb03af">difference_type</link>&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;map_iterator&gt;::difference_type;
7200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator_1a5c833f895e194135be3b4e65dc9be255">iterator_category</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;map_iterator&gt;::iterator_category;
7201 
7202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;<link linkend="_classtable__iterator_1a61846cb70a951ad5448894bbe46b1d20">operator++</link>()&#32;noexcept&#32;<emphasis role="comment">//&#32;++pre</emphasis>
7203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
7205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
7206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
7207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7208 
7209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classtable__iterator_1a9960982cf7cc9db0d5b26a448e2d8458">operator++</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post++</emphasis>
7210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;out{&#32;iter_&#32;};
7212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++iter_;
7213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
7214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
7215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7216 
7217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;<link linkend="_classtable__iterator_1a0ec9bb4ce770f71d5c1aa2db6aa6df09">operator--</link>()&#32;noexcept&#32;<emphasis role="comment">//&#32;--pre</emphasis>
7218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
7220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
7221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
7222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7223 
7224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classtable__iterator_1abf6cbeff194b861d14288892095af43f">operator--</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;post--</emphasis>
7225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;out{&#32;iter_&#32;};
7227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--iter_;
7228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;proxy_instantiated_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
7229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
7230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7231 
7232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1af2354635a7ee020e49582f75e8773bf0">reference</link>&#32;<link linkend="_classtable__iterator_1af03e3cdfe0aff165d18bffc2c64b6888">operator*</link>()&#32;const&#32;noexcept
7234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_proxy();
7236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7237 
7238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator_1a93d59c68765600bd4f1b4cbdc1c46d76">pointer</link>&#32;<link linkend="_classtable__iterator_1ac55eab1931a333c6511ffc2650945b87">operator-&gt;</link>()&#32;const&#32;noexcept
7240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_proxy();
7242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7243 
7244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;map_iterator&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
7246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
7248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7249 
7250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>(!<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1ac4cf4b2ab929bd23951a8676eeac086b">C</link>&#32;=&#32;IsConst)
7251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;const_map_iterator()&#32;const&#32;noexcept
7253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_;
7255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7256 
7257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable__iterator_1a8f2adae1b6df957d76858c396731b00c">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;==&#32;rhs.iter_;
7261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7262 
7263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable__iterator_1aecd0f32a9d98b7c12b1428ff2350cb36">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable__iterator">table_iterator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
7265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.iter_&#32;!=&#32;rhs.iter_;
7267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7268 &#32;&#32;&#32;&#32;};
7269 
7270 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtable__init__pair">table_init_pair</link>
7271 &#32;&#32;&#32;&#32;{
7272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;toml::key&#32;<link linkend="_structtable__init__pair_1afd6800bc5a42d481ec900f722c80eba1">key</link>;
7273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;node_ptr&#32;<link linkend="_structtable__init__pair_1a8f74a66816fdf3cda8e2897a9b9f334b">value</link>;
7274 
7275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;K,&#32;<emphasis role="keyword">typename</emphasis>&#32;V&gt;
7276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtable__init__pair_1ae5d78f1e0594b5e8a4a83b2cb200abfd">table_init_pair</link>(K&amp;&amp;&#32;k,&#32;V&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_toml_8hpp_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)&#32;<emphasis role="comment">//</emphasis>
7278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structtable__init__pair_1afd6800bc5a42d481ec900f722c80eba1">key</link>{&#32;static_cast&lt;K&amp;&amp;&gt;(k)&#32;},
7279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>{&#32;<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(static_cast&lt;V&amp;&amp;&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)&#32;}
7280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
7281 &#32;&#32;&#32;&#32;};
7282 }
7283 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
7284 
7285 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
7286 {
7287 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator">table_iterator</link>&#32;=&#32;<link linkend="_toml_8hpp_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::table_iterator&lt;false&gt;);
7288 
7289 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_table_8h_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;=&#32;<link linkend="_toml_8hpp_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(impl::table_iterator&lt;true&gt;);
7290 
7291 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classtable">table</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;node
7292 &#32;&#32;&#32;&#32;{
7293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7294 
7295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::map&lt;toml::key,&#32;impl::node_ptr,&#32;std::less&lt;&gt;&gt;;
7296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_pair&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::pair&lt;const&#32;toml::key,&#32;impl::node_ptr&gt;;
7297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>map_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;map_type::iterator;
7298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_map_iterator&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;map_type::const_iterator;
7299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_type&#32;map_;
7300 
7301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
7302 
7303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>(<emphasis role="keyword">const</emphasis>&#32;impl::table_init_pair*,&#32;<emphasis role="keyword">const</emphasis>&#32;impl::table_init_pair*);
7306 
7307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7308 
7309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link>()&#32;noexcept;
7312 
7313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~<link linkend="_classtable">table</link>()&#32;noexcept;
7315 
7316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>(const&#32;<link linkend="_classtable">table</link>&amp;);
7319 
7320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>(<link linkend="_classtable">table</link>&amp;&amp;&#32;other)&#32;noexcept;
7323 
7324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
7325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;<link linkend="_classtable">table</link>(<link linkend="_namespacestd">std</link>::initializer_list&lt;impl::<link linkend="_structtable__init__pair">table_init_pair</link>&gt;&#32;kvps)&#32;<emphasis role="comment">//</emphasis>
7327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classtable">table</link>(kvps.begin(),&#32;kvps.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
7328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
7329 
7330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a6f963a302ec0f592701775c95c1df1e3">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;);
7332 
7333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a5e61dff4b1846fcddcba33e07b795a71">operator=</link>(<link linkend="_classtable">table</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
7335 
7336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_type&#32;<link linkend="_classtable_1a54c936c3aac096be1dcad45036ee6a9f">type</link>()&#32;const&#32;noexcept&#32;final
7338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_type::table;
7340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7341 
7342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a6cbade52106ece3ab27feda3f4d58110">is_homogeneous</link>(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
7345 
7346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a03a22b6b4ecd0043d8a684844741b5a6">is_homogeneous</link>(node_type&#32;ntype,&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
7349 
7350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ad24e8cb001d0c6d429caa048314fb213">is_homogeneous</link>(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">final</emphasis>;
7353 
7354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ElemType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
7355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a57a2f14d20387ea2d9abed242cd3043d">is_homogeneous</link>()&#32;const&#32;noexcept
7357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;ElemType&gt;&gt;;
7359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_void_v&lt;type&gt;&#32;||&#32;toml::is_value&lt;type&gt;&#32;||&#32;toml::is_container&lt;type&gt;,
7360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;template&#32;type&#32;argument&#32;of&#32;table::is_homogeneous()&#32;must&#32;be&#32;void&#32;or&#32;one&#32;&quot;</emphasis>
7361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
7362 
7363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_homogeneous(impl::node_type_of&lt;type&gt;);
7364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a7a29b434ebc03ec99db52ae98668d5db">is_table</link>()&#32;const&#32;noexcept&#32;final
7367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
7369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7370 
7371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a546d35293ab8c3e3850e3a712862480f">is_array</link>()&#32;const&#32;noexcept&#32;final
7373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7376 
7377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ad492ac1e45805952a3c8924583cc296e">is_array_of_tables</link>()&#32;const&#32;noexcept&#32;final
7379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7382 
7383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a7dd10d152666712ede4001059b5a6ed2">is_value</link>()&#32;const&#32;noexcept&#32;final
7385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7388 
7389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a16e1591a845aa7db95df37f8c35cb23c">is_string</link>()&#32;const&#32;noexcept&#32;final
7391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7394 
7395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ad6e253695f391c0e6edf928d77fa766d">is_integer</link>()&#32;const&#32;noexcept&#32;final
7397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7400 
7401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a951c432ffd2b0cbc06518e7897089c57">is_floating_point</link>()&#32;const&#32;noexcept&#32;final
7403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7406 
7407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a1dc76e80008b5ed5aa70a66fa3626882">is_number</link>()&#32;const&#32;noexcept&#32;final
7409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7412 
7413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a838d74631b4bfe28746757d3fb239d50">is_boolean</link>()&#32;const&#32;noexcept&#32;final
7415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7418 
7419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a9d29b05c9c0625574d78581376fc361f">is_date</link>()&#32;const&#32;noexcept&#32;final
7421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7424 
7425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ae7b07d54ee3ad3f4a245c26898700272">is_time</link>()&#32;const&#32;noexcept&#32;final
7427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7430 
7431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a07b42c6116440db38c8b518a6c685802">is_date_time</link>()&#32;const&#32;noexcept&#32;final
7433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7436 
7437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classtable_1a6e49884f9b927770890cb9fe6df61a42">as_table</link>()&#32;noexcept&#32;final
7439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
7441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7442 
7443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classtable_1a55c771fd945281328d96f978c0255059">as_array</link>()&#32;noexcept&#32;final
7445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7448 
7449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classtable_1ae90f248325e54bd99bb3a392b2751cb3">as_string</link>()&#32;noexcept&#32;final
7451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7454 
7455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classtable_1a8e4f6aed5156d9d6734f42c4bcb7b97f">as_integer</link>()&#32;noexcept&#32;final
7457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7460 
7461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classtable_1ac549da31899da9d559671d50d1f3f662">as_floating_point</link>()&#32;noexcept&#32;final
7463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7466 
7467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classtable_1a37afbd90ebbad8a41342167399be6a2d">as_boolean</link>()&#32;noexcept&#32;final
7469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7472 
7473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classtable_1aa5996cf56e0d9a88ab21d804a41f4c54">as_date</link>()&#32;noexcept&#32;final
7475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7478 
7479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classtable_1a70eeba3cc6b24d1d6f73c9448ce396dc">as_time</link>()&#32;noexcept&#32;final
7481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7484 
7485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classtable_1acb002459139377f756dd6ffb0652196d">as_date_time</link>()&#32;noexcept&#32;final
7487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7490 
7491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>*&#32;<link linkend="_classtable_1a7f9da7358d04e7e6957ac5ee52529490">as_table</link>()&#32;const&#32;noexcept&#32;final
7493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;
7495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7496 
7497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>*&#32;<link linkend="_classtable_1aacd0141b8604d4b03f05c36d2be2f7b3">as_array</link>()&#32;const&#32;noexcept&#32;final
7499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7502 
7503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;std::string&gt;*&#32;<link linkend="_classtable_1a1aa73148a1da6849216129531b6c9a80">as_string</link>()&#32;const&#32;noexcept&#32;final
7505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7508 
7509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;int64_t&gt;*&#32;<link linkend="_classtable_1a3afb4e824a39626582bf2b32775e112a">as_integer</link>()&#32;const&#32;noexcept&#32;final
7511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7514 
7515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;double&gt;*&#32;<link linkend="_classtable_1a32760109122058741e1136a660e57d94">as_floating_point</link>()&#32;const&#32;noexcept&#32;final
7517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7520 
7521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;bool&gt;*&#32;<link linkend="_classtable_1ad7bf9703dc4a476bc944e6e0b15a0f8d">as_boolean</link>()&#32;const&#32;noexcept&#32;final
7523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7526 
7527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date&gt;*&#32;<link linkend="_classtable_1abebee4e6091e103e08421d6e500f88d8">as_date</link>()&#32;const&#32;noexcept&#32;final
7529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7532 
7533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;time&gt;*&#32;<link linkend="_classtable_1a40de88e69cd2f6001f66c2afb96b3390">as_time</link>()&#32;const&#32;noexcept&#32;final
7535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7538 
7539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
7540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::value&lt;date_time&gt;*&#32;<link linkend="_classtable_1a785a4773f198d352e60ae4c0706abd7d">as_date_time</link>()&#32;const&#32;noexcept&#32;final
7541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7544 
7545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline</link>()&#32;const&#32;noexcept
7547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inline_;
7549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7550 
7551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classtable_1adb65ea92406d15cf1da9ca32d28aaf21">is_inline</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
7552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline_&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
7554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7555 
7556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>;
7559 
7560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;<link linkend="_classtable_1a1913a2d35dd5d582d729a1aa86154a4c">get</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
7562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(key);
7564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7565 
7566 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7567 
7568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(std::wstring_view&#32;key)
7570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
7572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7573 
7574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(impl::narrow(key));
7575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7576 
7577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
7579 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
7580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(key);
7581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7582 
7583 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7584 
7585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::wrap_node&lt;T&gt;*&#32;<link linkend="_classtable_1a606d8e1e91ed8cfa1225bd607cf31918">get_as</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
7588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key);
7590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n&#32;?&#32;n-&gt;template&#32;as&lt;T&gt;()&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
7591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7592 
7593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;impl::wrap_node&lt;T&gt;*&#32;<link linkend="_classtable_1aad66df14406c1ae0df702317375aeb84">get_as</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
7596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).template&#32;get_as&lt;T&gt;(key);
7598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7599 
7600 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7601 
7602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::wrap_node&lt;T&gt;*&#32;get_as(std::wstring_view&#32;key)
7605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
7607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
7608 
7609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_as&lt;T&gt;(impl::narrow(key));
7610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7611 
7612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;impl::wrap_node&lt;T&gt;*&#32;get_as(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
7615 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
7616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).template&#32;get_as&lt;T&gt;(key);
7617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7618 
7619 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7620 
7621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link>(std::string_view&#32;key);
7624 
7625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classtable_1a09b1e615db5197302db7fdf356e1886f">at</link>(std::string_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
7627 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
7628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link>(key);
7629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7630 
7631 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7632 
7633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;at(std::wstring_view&#32;key)
7635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;at(impl::narrow(key));
7637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7638 
7639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;at(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
7641 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
7642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">at</link>(key);
7643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7644 
7645 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7646 
7647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;=&#32;toml::table_iterator;
7648 
7649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;=&#32;toml::const_table_iterator;
7650 
7651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>()&#32;noexcept
7653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;map_.begin()&#32;};
7655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7656 
7657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a0035089c5cba9e55533f8d071cc92aa8">begin</link>()&#32;const&#32;noexcept
7659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cbegin()&#32;};
7661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7662 
7663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a99538d11dcdbaa6693aa17002aa40967">cbegin</link>()&#32;const&#32;noexcept
7665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cbegin()&#32;};
7667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7668 
7669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>()&#32;noexcept
7671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;map_.end()&#32;};
7673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7674 
7675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a76522d05d61fe5a153513aea06720743">end</link>()&#32;const&#32;noexcept
7677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cend()&#32;};
7679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7680 
7681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend</link>()&#32;const&#32;noexcept
7683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;map_.cend()&#32;};
7685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7686 
7687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7688 
7689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
7690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>for_each_value_ref&#32;=&#32;impl::copy_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;impl::unwrap_node&lt;T&gt;&gt;&gt;,&#32;Table&gt;;
7691 
7692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each&#32;=&#32;std::is_invocable_v&lt;Func,&#32;const&#32;key&amp;,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
7694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_invocable_v&lt;Func,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;;
7695 
7696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_nothrow&#32;=
7698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_invocable_v&lt;Func,&#32;const&#32;key&amp;,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
7699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_nothrow_invocable_v&lt;Func,&#32;for_each_value_ref&lt;T,&#32;Table&gt;&gt;;
7700 
7701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
7702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;can_for_each_any&#32;=&#32;can_for_each&lt;Func,&#32;Table,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
7705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each&lt;Func,&#32;Table,&#32;date_time&gt;;
7711 
7712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
7713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow_one&#32;=&#32;!can_for_each&lt;Func,&#32;Table,&#32;T&gt;&#32;<emphasis role="comment">//</emphasis>
7714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;can_for_each_nothrow&lt;Func,&#32;Table,&#32;T&gt;;
7715 
7716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
7717 
7718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
7719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;for_each_is_nothrow&#32;=&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;table&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;array&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;std::string&gt;&#32;<emphasis role="comment">//</emphasis>
7722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;int64_t&gt;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;date&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;time&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
7727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;for_each_is_nothrow_one&lt;Func,&#32;Table,&#32;date_time&gt;;
7728 
7729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
7730 
7731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;Table&gt;
7732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;do_for_each(Func&amp;&amp;&#32;visitor,&#32;Table&amp;&amp;&#32;tbl)&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;Table&amp;&amp;&gt;)
7733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(can_for_each_any&lt;Func&amp;&amp;,&#32;Table&amp;&amp;&gt;,
7735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML&#32;table&#32;for_each&#32;visitors&#32;must&#32;be&#32;invocable&#32;for&#32;at&#32;least&#32;one&#32;of&#32;the&#32;toml::node&#32;&quot;</emphasis>
7736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;specializations:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a28ad2f9bb777d4b3cb545bdc94b55b63">TOML_SA_NODE_TYPE_LIST</link>);
7737 
7738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>kvp_type&#32;=&#32;impl::copy_cv&lt;map_pair,&#32;std::remove_reference_t&lt;Table&gt;&gt;;
7739 
7740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(kvp_type&amp;&#32;kvp&#32;:&#32;tbl.map_)
7741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_ref&#32;=&#32;impl::copy_cvref&lt;toml::node,&#32;Table&amp;&amp;&gt;;
7743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;node_ref&gt;);
7744 
7745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;keep_going&#32;=
7746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>node_ref<emphasis role="keyword">&gt;</emphasis>(*kvp.second)
7747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.visit(
7748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
7749 <emphasis role="preprocessor">#if&#32;!TOML_MSVC&#32;</emphasis><emphasis role="comment">//&#32;MSVC&#32;thinks&#32;this&#32;is&#32;invalid&#32;syntax&#32;O_o</emphasis>
7750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow_one&lt;Func&amp;&amp;,&#32;Table&amp;&amp;,&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)&gt;)
7751 <emphasis role="preprocessor">#endif</emphasis>
7752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_ref&#32;=&#32;for_each_value_ref&lt;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;Table&amp;&amp;&gt;;
7754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;value_ref&gt;);
7755 
7756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(key,&#32;val)</emphasis>
7757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;const&#32;key&amp;,&#32;value_ref&gt;)
7758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(
7760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visitor)(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>key&amp;<emphasis role="keyword">&gt;</emphasis>(kvp.first),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
7761 
7762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
7763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(
7765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visitor)(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>key&amp;<emphasis role="keyword">&gt;</emphasis>(kvp.first),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
7766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>key&amp;<emphasis role="keyword">&gt;</emphasis>(kvp.first),
7770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
7771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
7772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7774 
7775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;func(val)</emphasis>
7776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_invocable_v&lt;Func&amp;&amp;,&#32;value_ref&gt;)
7777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>return_type&#32;=
7779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
7780 
7781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_constructible_or_convertible&lt;bool,&#32;return_type&gt;)
7782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(
7784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)));
7785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor)(<emphasis role="keyword">static_cast&lt;</emphasis>value_ref<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
7789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
7790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7792 
7793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;visitor&#32;not&#32;compatible&#32;with&#32;this&#32;particular&#32;type</emphasis>
7794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
7795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
7796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
7797 
7798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!keep_going)
7799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
7800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7802 
7803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7804 
7805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
7806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a694a4f3fd69ba434774c9dde8ffee961">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;table&amp;&gt;)
7807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
7809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
7810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7811 
7812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
7813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&amp;&#32;<link linkend="_classtable_1a0b976de00e50fa9b297e08fca9951eec">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;table&amp;&amp;&gt;)
7814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
7816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
7817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7818 
7819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
7820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a3741d808d6f5cb0a221a31caeaa24d9c">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;table&amp;&gt;)
7821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;*<emphasis role="keyword">this</emphasis>);
7823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
7824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7825 
7826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
7827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&amp;&#32;<link linkend="_classtable_1ad390a6f105a2d472951f8ec0097b69a1">for_each</link>(Func&amp;&amp;&#32;visitor)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(for_each_is_nothrow&lt;Func&amp;&amp;,&#32;const&#32;table&amp;&amp;&gt;)
7828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do_for_each(<emphasis role="keyword">static_cast&lt;</emphasis>Func&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(visitor),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>));
7830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*this);
7831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7832 
7833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a406c059cce67faebb6aa0815624b6231">empty</link>()&#32;const&#32;noexcept
7835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.empty();
7837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7838 
7839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
7840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classtable_1affa7520e779cbbfc21bbdc31c4f8f7ce">size</link>()&#32;const&#32;noexcept
7841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.size();
7843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7844 
7845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7846 
7847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;get_lower_bound(std::string_view)&#32;<emphasis role="keyword">noexcept</emphasis>;
7850 
7851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7852 
7853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
7855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;get_lower_bound(key)&#32;};
7857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7858 
7859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a6bb5569bc3e0624ad8995de1aae9eb0b">lower_bound</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
7861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).get_lower_bound(key)&#32;};
7863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7864 
7865 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7866 
7867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;lower_bound(std::wstring_view&#32;key)
7869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
7871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
7872 
7873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lower_bound(impl::narrow(key));
7874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7875 
7876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;lower_bound(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
7878 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
7879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
7880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
7881 
7882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lower_bound(impl::narrow(key));
7883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7884 
7885 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7886 
7887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8">find</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>;
7890 
7891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="_classtable_1a8607e0b0c1ba7d8e0e8cb3b3b537feae">find</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
7894 
7895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
7896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a466a42305799b16b19f3cfcf9f8dd8ac">contains</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
7897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;
7899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7900 
7901 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7902 
7903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(std::wstring_view&#32;key)
7905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
7907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
7908 
7909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(impl::narrow(key));
7910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7911 
7912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
7914 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
7915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(impl::narrow(key));
7916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7917 
7918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
7919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
7920 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
7921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(impl::narrow(key));
7922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7923 
7924 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7925 
7926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
7927 
7928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;erase(const_map_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>;
7930 
7931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;erase(const_map_iterator,&#32;const_map_iterator)&#32;<emphasis role="keyword">noexcept</emphasis>;
7933 
7934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
7935 
7936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">erase</link>(<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
7937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;erase(const_map_iterator{&#32;pos&#32;})&#32;};
7939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7940 
7941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a24fd0bfb38c97989cddf90ab2e79a4dd">erase</link>(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
7942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;erase(const_map_iterator{&#32;pos&#32;})&#32;};
7944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7945 
7946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;<link linkend="_classtable_1a564d7164aac6483181560ff43333d016">erase</link>(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;begin,&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
7947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;erase(const_map_iterator{&#32;begin&#32;},&#32;const_map_iterator{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;})&#32;};
7949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7950 
7951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classtable_1a602f8e3a30eacd78ad413c2a3cefa952">erase</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>;
7953 
7954 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7955 
7956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;erase(std::wstring_view&#32;key)
7957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
7959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
7960 
7961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;erase(impl::narrow(key));
7962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7963 
7964 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
7965 
7966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a03364a6c3763fac7c731183ae810a319">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>;
7968 
7969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&amp;&#32;<link linkend="_classtable_1a9471ac8762fdfeb8a9bbac48cb0dcc37">prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
7970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::table&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(this-&gt;prune(recursive));
7972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
7973 
7974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classtable_1a6248c10022c6cd670f045cda74cb1cbe">clear</link>()&#32;noexcept;
7976 
7977 &#32;&#32;&#32;&#32;&#32;&#32;private:
7978 
7979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
7980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;insert_with_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>,&#32;key&amp;&amp;,&#32;impl::node_ptr&amp;&amp;);
7981 
7982 &#32;&#32;&#32;&#32;&#32;&#32;public:
7983 
7984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((<link linkend="_key_8h_1af308fcd567483bdd7db051dff62e9fcb">is_key_or_convertible</link>&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::<link linkend="_toml_8hpp_1af586d464952e4eac442a23643c69618d">is_wide_string</link>&lt;KeyType&gt;),
7985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;ValueType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>,
7986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;KeyType,
7987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename...&#32;ValueArgs)
7988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>&#32;emplace_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>&#32;hint,&#32;KeyType&amp;&amp;&#32;key,&#32;ValueArgs&amp;&amp;...&#32;args)
7989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
7990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
7991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Emplacement&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
7992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
7993 
7994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&#32;=&#32;impl::remove_cvref&lt;ValueType&gt;;
7995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link>&#32;&#32;&#32;&#32;&#32;=&#32;std::
7996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;std::is_void_v&lt;raw_value_type&gt;,&#32;impl::emplaced_type_of&lt;ValueArgs&amp;&amp;...&gt;,&#32;<link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;;
7997 
7998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
7999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8000 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
8001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace_hint&lt;value_type&gt;(hint,
8002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),
8003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
8004 <emphasis role="preprocessor">#else</emphasis>
8005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
8006 <emphasis role="preprocessor">#endif</emphasis>
8007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;moving_node_ptr&#32;=&#32;std::is_same_v&lt;value_type,&#32;impl::node_ptr&gt;&#32;<emphasis role="comment">//</emphasis>
8011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>...(ValueArgs)&#32;==&#32;1u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
8012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;impl::first_is_same&lt;impl::node_ptr&amp;&amp;,&#32;ValueArgs&amp;&amp;...&gt;;
8013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">unwrapped_type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;value_type&gt;&gt;;
8014 
8015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(moving_node_ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
8016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_native&lt;unwrapped_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
8017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::is_one_of&lt;unwrapped_type,&#32;table,&#32;array&gt;,&#32;<emphasis role="comment">//</emphasis>
8018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ValueType&#32;argument&#32;of&#32;table::emplace_hint()&#32;must&#32;be&#32;one&#32;&quot;</emphasis>
8019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
8020 
8021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;ipos&#32;=&#32;insert_with_hint(hint,&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},&#32;<emphasis role="keyword">nullptr</emphasis>);
8022 
8023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;second&#32;is&#32;nullptr&#32;then&#32;we&#32;successully&#32;claimed&#32;the&#32;key&#32;and&#32;inserted&#32;the&#32;empty&#32;sentinel,</emphasis>
8024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;now&#32;we&#32;have&#32;to&#32;construct&#32;the&#32;actual&#32;value</emphasis>
8025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ipos-&gt;second)
8026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(moving_node_ptr)
8028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos-&gt;second&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
8029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8031 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
8032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
8033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8034 <emphasis role="preprocessor">#endif</emphasis>
8035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos-&gt;second.reset(
8036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;unwrapped_type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;});
8037 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
8038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)
8040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;erase(const_map_iterator{&#32;ipos&#32;});&#32;<emphasis role="comment">//&#32;strong&#32;exception&#32;guarantee</emphasis>
8042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>;
8043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8044 <emphasis role="preprocessor">#endif</emphasis>
8045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{&#32;ipos&#32;};
8048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8050 
8051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link>((is_key_or_convertible&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::is_wide_string&lt;KeyType&gt;),
8052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,
8053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType)
8054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;insert(KeyType&amp;&amp;&#32;key,
8055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ValueType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
8056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
8057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
8059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Insertion&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
8060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
8061 
8062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ValueType&gt;)
8063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
8065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<emphasis role="keyword">false</emphasis>&#32;};
8066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8067 
8068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
8069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8070 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
8071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert(impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
8072 <emphasis role="preprocessor">#else</emphasis>
8073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
8074 <emphasis role="preprocessor">#endif</emphasis>
8075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_view&#32;=&#32;std::string_view{&#32;key&#32;};
8079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;ipos&#32;&#32;&#32;=&#32;get_lower_bound(key_view);
8080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ipos&#32;==&#32;map_.end()&#32;||&#32;ipos-&gt;first&#32;!=&#32;key_view)
8081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos&#32;=&#32;insert_with_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;ipos&#32;},
8083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},
8084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
8085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">true</emphasis>&#32;};
8086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">false</emphasis>&#32;};
8088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8090 
8091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a28441f3c429403e368267788c2e8a279">TOML_CONSTRAINED_TEMPLATE</link>((!is_key_or_convertible&lt;Iter&gt;&#32;&amp;&amp;&#32;!impl::is_wide_string&lt;Iter&gt;),&#32;<emphasis role="keyword">typename</emphasis>&#32;Iter)
8092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;insert(Iter&#32;begin,&#32;Iter&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
8093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(begin&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
8095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
8096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;begin;&#32;it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;it++)
8097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_rvalue_reference_v&lt;<emphasis role="keyword">decltype</emphasis>(*it)&gt;)
8099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>((*it).first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>((*it).second),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
8100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert((*it).first,&#32;(*it).second,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
8102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8104 
8105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a85c74f29b8142342905b49f2fb1fbf2c">TOML_CONSTRAINED_TEMPLATE</link>((is_key_or_convertible&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::is_wide_string&lt;KeyType&gt;),
8106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,
8107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType)
8108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;insert_or_assign(KeyType&amp;&amp;&#32;key,
8109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ValueType&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
8110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>)
8111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
8113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Insertion&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
8114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
8115 
8116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_node_view&lt;ValueType&gt;)
8117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
8119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<emphasis role="keyword">false</emphasis>&#32;};
8120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8121 
8122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
8123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8124 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
8125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_or_assign(impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),
8126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),
8127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
8128 <emphasis role="preprocessor">#else</emphasis>
8129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
8130 <emphasis role="preprocessor">#endif</emphasis>
8131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_view&#32;=&#32;std::string_view{&#32;key&#32;};
8135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_iterator&#32;ipos&#32;&#32;&#32;=&#32;get_lower_bound(key_view);
8136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ipos&#32;==&#32;map_.end()&#32;||&#32;ipos-&gt;first&#32;!=&#32;key_view)
8137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos&#32;=&#32;insert_with_hint(<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;ipos&#32;},
8139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},
8140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>));
8141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">true</emphasis>&#32;};
8142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*ipos).second&#32;=&#32;impl::make_node(<emphasis role="keyword">static_cast&lt;</emphasis>ValueType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
8146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">false</emphasis>&#32;};
8147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8150 
8151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a6aa09205053fcd522ab78e862d21a0f0">TOML_CONSTRAINED_TEMPLATE</link>((is_key_or_convertible&lt;KeyType&amp;&amp;&gt;&#32;||&#32;impl::is_wide_string&lt;KeyType&gt;),
8152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;ValueType&#32;=&#32;<emphasis role="keywordtype">void</emphasis>,
8153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;KeyType,
8154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;ValueArgs)
8155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;&#32;emplace(KeyType&amp;&amp;&#32;key,&#32;ValueArgs&amp;&amp;...&#32;args)
8156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!impl::is_wide_string&lt;KeyType&gt;&#32;||&#32;<link linkend="_group__configuration_1ga94867db67c98e0e9d4fbb70690951fbf">TOML_ENABLE_WINDOWS_COMPAT</link>,
8158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Emplacement&#32;using&#32;wide-character&#32;keys&#32;is&#32;only&#32;supported&#32;on&#32;Windows&#32;with&#32;&quot;</emphasis>
8159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;TOML_ENABLE_WINDOWS_COMPAT&#32;enabled.&quot;</emphasis>);
8160 
8161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&#32;=&#32;impl::remove_cvref&lt;ValueType&gt;;
8162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1af8f0e6773b97cc2093d44fc0be051995">value_type</link>&#32;&#32;&#32;&#32;&#32;=&#32;std::
8163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;std::is_void_v&lt;raw_value_type&gt;,&#32;impl::emplaced_type_of&lt;ValueArgs&amp;&amp;...&gt;,&#32;<link linkend="_classtable_1a6837fcea2eb10704f988624b7a73f3ee">raw_value_type</link>&gt;;
8164 
8165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_wide_string&lt;KeyType&gt;)
8166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8167 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
8168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace&lt;value_type&gt;(impl::narrow(<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)),
8169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...);
8170 <emphasis role="preprocessor">#else</emphasis>
8171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(impl::dependent_false&lt;KeyType&gt;,&#32;<emphasis role="stringliteral">&quot;Evaluated&#32;unreachable&#32;branch!&quot;</emphasis>);
8172 <emphasis role="preprocessor">#endif</emphasis>
8173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable_1aa4e13665570823f0343c59dc161baa95">unwrapped_type</link>&#32;=&#32;impl::remove_cvref&lt;impl::unwrap_node&lt;value_type&gt;&gt;;
8177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((impl::is_native&lt;unwrapped_type&gt;&#32;||&#32;impl::is_one_of&lt;unwrapped_type,&#32;table,&#32;array&gt;),
8178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;ValueType&#32;argument&#32;of&#32;table::emplace()&#32;must&#32;be&#32;one&#32;&quot;</emphasis>
8179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;of:&quot;</emphasis>&#32;<link linkend="_toml_8hpp_1a1de380e050f331193398fe626294c548">TOML_SA_UNWRAPPED_NODE_TYPE_LIST</link>);
8180 
8181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_view&#32;=&#32;std::string_view{&#32;key&#32;};
8182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ipos&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;get_lower_bound(key_view);
8183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ipos&#32;==&#32;map_.end()&#32;||&#32;ipos-&gt;first&#32;!=&#32;key_view)
8184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ipos&#32;=&#32;insert_with_hint(
8186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">const_iterator</link>{&#32;ipos&#32;},
8187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::key{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>KeyType&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(key)&#32;},
8188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;impl::wrap_node&lt;unwrapped_type&gt;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ValueArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(args)...&#32;}&#32;});
8189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">true</emphasis>&#32;};
8190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">iterator</link>{&#32;ipos&#32;},&#32;<emphasis role="keyword">false</emphasis>&#32;};
8192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8194 
8195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node::operator[];&#32;<emphasis role="comment">//&#32;inherit&#32;operator[toml::path]</emphasis>
8196 
8197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classtable_1a68177c7a82d76e4ef27ba9c8618272f4">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
8199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
8201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8202 
8203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classtable_1a7a1c9cb424ad342897ac73aeddb88a27">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
8205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
8207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8208 
8209 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
8210 
8211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;operator[](std::wstring_view&#32;key)
8213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
8215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8216 
8217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;operator[](std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
8219 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
8220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(key)&#32;};
8221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8222 
8223 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
8224 
8225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
8226 
8227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
8228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8436c6f378c73f3446a3b6f1e2c5e81c">TOML_EXPORTED_STATIC_FUNCTION</link>
8229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
8230 
8231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8232 
8233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a7dec1fafb7abc1389b18d2de80c39392">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
8235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;equal(lhs,&#32;rhs);
8237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8238 
8239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1ab456df97bd98e13632b756411088bfbd">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
8241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal(lhs,&#32;rhs);
8243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8244 
8245 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
8246 
8247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classtable_1a82b6ece5db050fa6c468b08fa514a7dc">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)
8248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs);
8250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
8251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8252 
8253 <emphasis role="preprocessor">#endif</emphasis>
8254 &#32;&#32;&#32;&#32;};
8255 }
8256 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
8257 
8258 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8259 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
8260 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
8261 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
8262 <emphasis role="preprocessor">#endif</emphasis>
8263 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
8264 
8265 <emphasis role="comment">//********&#32;&#32;impl/unicode_autogenerated.h&#32;&#32;******************************************************************************</emphasis>
8266 
8267 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
8268 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8269 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
8270 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
8271 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
8272 <emphasis role="preprocessor">#undef&#32;min</emphasis>
8273 <emphasis role="preprocessor">#undef&#32;max</emphasis>
8274 <emphasis role="preprocessor">#endif</emphasis>
8275 
8276 <emphasis role="preprocessor">#if&#32;TOML_GCC&#32;&amp;&amp;&#32;TOML_GCC&#32;&lt;&#32;9</emphasis>
8277 <emphasis role="preprocessor">#pragma&#32;GCC&#32;push_options</emphasis>
8278 <emphasis role="preprocessor">#pragma&#32;GCC&#32;optimize(&quot;O1&quot;)&#32;</emphasis><emphasis role="comment">//&#32;codegen&#32;bugs</emphasis>
8279 <emphasis role="preprocessor">#endif</emphasis>
8280 
8281 <emphasis role="comment">//&#32;the&#32;functions&#32;in&#32;this&#32;namespace&#32;block&#32;are&#32;automatically&#32;generated&#32;by&#32;a&#32;tool&#32;-&#32;they&#32;are&#32;not&#32;meant&#32;to&#32;be&#32;hand-edited</emphasis>
8282 
8283 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
8284 {
8285 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8286 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_ascii_horizontal_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8287 &#32;&#32;&#32;&#32;{
8288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;\t&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
8289 &#32;&#32;&#32;&#32;}
8290 
8291 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8292 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_non_ascii_horizontal_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8293 &#32;&#32;&#32;&#32;{
8294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;20&#32;code&#32;units&#32;from&#32;8&#32;ranges&#32;(spanning&#32;a&#32;search&#32;area&#32;of&#32;65120)</emphasis>
8295 
8296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;U<emphasis role="stringliteral">&apos;\xA0&apos;</emphasis>&#32;||&#32;c&#32;&gt;&#32;U<emphasis role="stringliteral">&apos;\uFEFF&apos;</emphasis>)
8297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8298 
8299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;child_index_0&#32;=&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab604f73dd823867b43702ae88b4f4445">uint_least64_t</link><emphasis role="keyword">&gt;</emphasis>(c)&#32;-&#32;0xA0ull)&#32;/&#32;0x3FAull;
8300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((1ull&#32;&lt;&lt;&#32;child_index_0)&#32;&amp;&#32;0x7FFFFFFFFFFFF75Eull)
8301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;U<emphasis role="stringliteral">&apos;\xA0&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u3000&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\uFEFF&apos;</emphasis>)
8303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
8304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(child_index_0)
8305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x05:&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u1680&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u180E&apos;</emphasis>;
8307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x07:
8308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(U<emphasis role="stringliteral">&apos;\u2000&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u200B&apos;</emphasis>)&#32;||&#32;(U<emphasis role="stringliteral">&apos;\u205F&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u2060&apos;</emphasis>)&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u202F&apos;</emphasis>;
8309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
8310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8311 
8312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
8313 &#32;&#32;&#32;&#32;}
8314 
8315 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8316 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_ascii_vertical_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8317 &#32;&#32;&#32;&#32;{
8318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;\r&apos;</emphasis>;
8319 &#32;&#32;&#32;&#32;}
8320 
8321 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8322 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_non_ascii_vertical_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8323 &#32;&#32;&#32;&#32;{
8324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(U<emphasis role="stringliteral">&apos;\u2028&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u2029&apos;</emphasis>)&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\x85&apos;</emphasis>;
8325 &#32;&#32;&#32;&#32;}
8326 
8327 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8328 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_ascii_bare_key_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8329 &#32;&#32;&#32;&#32;{
8330 <emphasis role="preprocessor">#if&#32;TOML_LANG_UNRELEASED&#32;</emphasis><emphasis role="comment">//&#32;toml/issues/644&#32;(&apos;+&apos;&#32;in&#32;bare&#32;keys)</emphasis>
8331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(c&#32;==&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>)
8332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
8333 <emphasis role="preprocessor">#endif</emphasis>
8334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;64&#32;code&#32;units&#32;from&#32;5&#32;ranges&#32;(spanning&#32;a&#32;search&#32;area&#32;of&#32;78)</emphasis>
8335 
8336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;||&#32;c&#32;&gt;&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>)
8337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8338 
8339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(((<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab604f73dd823867b43702ae88b4f4445">uint_least64_t</link><emphasis role="keyword">&gt;</emphasis>(c)&#32;-&#32;0x2Dull)&#32;/&#32;0x40ull)&#32;!=&#32;0ull)
8340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((1ull&#32;&lt;&lt;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab604f73dd823867b43702ae88b4f4445">uint_least64_t</link><emphasis role="keyword">&gt;</emphasis>(c)&#32;-&#32;0x2Dull))&#32;&amp;&#32;0xFFF43FFFFFF01FF9ull);
8341 &#32;&#32;&#32;&#32;}
8342 
8343 <emphasis role="preprocessor">#if&#32;TOML_LANG_UNRELEASED&#32;</emphasis><emphasis role="comment">//&#32;toml/pull/891&#32;(unicode&#32;bare&#32;keys)</emphasis>
8344 
8345 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8346 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_non_ascii_bare_key_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8347 &#32;&#32;&#32;&#32;{
8348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;971732&#32;code&#32;units&#32;from&#32;16&#32;ranges&#32;(spanning&#32;a&#32;search&#32;area&#32;of&#32;982862)</emphasis>
8349 
8350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;U<emphasis role="stringliteral">&apos;\xB2&apos;</emphasis>&#32;||&#32;c&#32;&gt;&#32;U<emphasis role="stringliteral">&apos;\U000EFFFF&apos;</emphasis>)
8351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
8352 
8353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;child_index_0&#32;=&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab604f73dd823867b43702ae88b4f4445">uint_least64_t</link><emphasis role="keyword">&gt;</emphasis>(c)&#32;-&#32;0xB2ull)&#32;/&#32;0x3BFEull;
8354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((1ull&#32;&lt;&lt;&#32;child_index_0)&#32;&amp;&#32;0xFFFFFFFFFFFFFFE6ull)
8355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
8356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(child_index_0)
8357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x00:&#32;<emphasis role="comment">//&#32;[0]&#32;00B2&#32;-&#32;3CAF</emphasis>
8359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;12710&#32;code&#32;units&#32;from&#32;13&#32;ranges&#32;(spanning&#32;a&#32;search&#32;area&#32;of&#32;15358)</emphasis>
8361 
8362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(c&#32;&gt;=&#32;U<emphasis role="stringliteral">&apos;\xB2&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u3CAF&apos;</emphasis>);
8363 
8364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab604f73dd823867b43702ae88b4f4445">uint_least64_t</link>&#32;bitmask_table_1[]&#32;=&#32;{
8365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFDFFFFFDC83u,&#32;0xFFFFFFFFFFFFFFDFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFEFFFu,
8368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0x000000000C003FFFu,&#32;0xC000000000006000u,&#32;0xFFFFFFFFFFFFFFFFu,
8397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0x000000003FFFFFFFu,
8398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0xFFFFC00000000000u,&#32;0xFFFFFFFFFFFFFFFFu,
8401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0x0000000000003FFFu,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,&#32;0x0000000000000000u,
8408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x0000000000000000u,&#32;0xFFFFFFFFFFFFC000u,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x3FFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFF8000u,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,
8424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0xFFFFFFFFFFFFFFFFu,&#32;0x3FFFFFFFFFFFFFFFu,
8425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
8426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;bitmask_table_1[(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab604f73dd823867b43702ae88b4f4445">uint_least64_t</link><emphasis role="keyword">&gt;</emphasis>(c)&#32;-&#32;0xB2ull)&#32;/&#32;0x40ull]
8427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;(0x1ull&#32;&lt;&lt;&#32;((<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab604f73dd823867b43702ae88b4f4445">uint_least64_t</link><emphasis role="keyword">&gt;</emphasis>(c)&#32;-&#32;0xB2ull)&#32;%&#32;0x40ull));
8428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x03:&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\uD7FF&apos;</emphasis>;
8430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x04:
8431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(U<emphasis role="stringliteral">&apos;\uF900&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\uFDCF&apos;</emphasis>)&#32;||&#32;(U<emphasis role="stringliteral">&apos;\uFDF0&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\uFFFD&apos;</emphasis>)&#32;||&#32;U<emphasis role="stringliteral">&apos;\U00010000&apos;</emphasis>&#32;&lt;=&#32;c;
8432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
8433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8434 
8435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
8436 &#32;&#32;&#32;&#32;}
8437 
8438 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_LANG_UNRELEASED</emphasis>
8439 }
8440 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
8441 
8442 <emphasis role="preprocessor">#if&#32;TOML_GCC&#32;&amp;&amp;&#32;TOML_GCC&#32;&lt;&#32;9</emphasis>
8443 <emphasis role="preprocessor">#pragma&#32;GCC&#32;pop_options</emphasis>
8444 <emphasis role="preprocessor">#endif</emphasis>
8445 
8446 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8447 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
8448 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
8449 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
8450 <emphasis role="preprocessor">#endif</emphasis>
8451 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
8452 
8453 <emphasis role="comment">//********&#32;&#32;impl/unicode.h&#32;&#32;********************************************************************************************</emphasis>
8454 
8455 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
8456 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8457 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
8458 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
8459 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
8460 <emphasis role="preprocessor">#undef&#32;min</emphasis>
8461 <emphasis role="preprocessor">#undef&#32;max</emphasis>
8462 <emphasis role="preprocessor">#endif</emphasis>
8463 
8464 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
8465 {
8466 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8467 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_string_delimiter(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8468 &#32;&#32;&#32;&#32;{
8469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>;
8470 &#32;&#32;&#32;&#32;}
8471 
8472 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8473 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_ascii_letter(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8474 &#32;&#32;&#32;&#32;{
8475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>)&#32;||&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;Z&apos;</emphasis>);
8476 &#32;&#32;&#32;&#32;}
8477 
8478 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8479 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_binary_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8480 &#32;&#32;&#32;&#32;{
8481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;1&apos;</emphasis>;
8482 &#32;&#32;&#32;&#32;}
8483 
8484 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8485 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_octal_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8486 &#32;&#32;&#32;&#32;{
8487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;7&apos;</emphasis>);
8488 &#32;&#32;&#32;&#32;}
8489 
8490 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8491 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_decimal_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8492 &#32;&#32;&#32;&#32;{
8493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;9&apos;</emphasis>);
8494 &#32;&#32;&#32;&#32;}
8495 
8496 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8497 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_hexadecimal_digit(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8498 &#32;&#32;&#32;&#32;{
8499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&lt;=&#32;c&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U&apos;f&apos;&#32;&amp;&amp;&#32;(1ull&#32;&lt;&lt;&#32;(static_cast&lt;uint_least64_t&gt;(c)&#32;-&#32;0x30u))&#32;&amp;&#32;0x7E0000007E03FFull;
8500 &#32;&#32;&#32;&#32;}
8501 
8502 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
8503 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8504 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&#32;hex_to_dec(<emphasis role="keyword">const</emphasis>&#32;T&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8505 &#32;&#32;&#32;&#32;{
8506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&gt;)
8507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&gt;=&#32;0x41u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&gt;=&#32;&apos;A&apos;</emphasis>
8508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;10u&#32;+&#32;(c&#32;|&#32;0x20u)&#32;-&#32;0x61u&#32;<emphasis role="comment">//&#32;-&#32;&apos;a&apos;</emphasis>
8509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;c&#32;-&#32;0x30u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;&apos;0&apos;</emphasis>
8510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
8511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hex_to_dec(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(c));
8513 &#32;&#32;&#32;&#32;}
8514 
8515 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8516 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_horizontal_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8517 &#32;&#32;&#32;&#32;{
8518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_ascii_horizontal_whitespace(c)&#32;||&#32;is_non_ascii_horizontal_whitespace(c);
8519 &#32;&#32;&#32;&#32;}
8520 
8521 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8522 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_vertical_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8523 &#32;&#32;&#32;&#32;{
8524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_ascii_vertical_whitespace(c)&#32;||&#32;is_non_ascii_vertical_whitespace(c);
8525 &#32;&#32;&#32;&#32;}
8526 
8527 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8528 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_whitespace(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8529 &#32;&#32;&#32;&#32;{
8530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_horizontal_whitespace(c)&#32;||&#32;is_vertical_whitespace(c);
8531 &#32;&#32;&#32;&#32;}
8532 
8533 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8534 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_bare_key_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8535 &#32;&#32;&#32;&#32;{
8536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_ascii_bare_key_character(c)
8537 <emphasis role="preprocessor">#if&#32;TOML_LANG_UNRELEASED&#32;</emphasis><emphasis role="comment">//&#32;toml/pull/891&#32;(unicode&#32;bare&#32;keys)</emphasis>
8538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_non_ascii_bare_key_character(c)
8539 <emphasis role="preprocessor">#endif</emphasis>
8540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
8541 &#32;&#32;&#32;&#32;}
8542 
8543 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8544 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_value_terminator(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8545 &#32;&#32;&#32;&#32;{
8546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_whitespace(c)&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;]&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;}&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;,&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="charliteral">&apos;#&apos;</emphasis>;
8547 &#32;&#32;&#32;&#32;}
8548 
8549 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8550 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_control_character(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8551 &#32;&#32;&#32;&#32;{
8552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&lt;=&#32;<emphasis role="stringliteral">&apos;\u001F&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="stringliteral">&apos;\u007F&apos;</emphasis>;
8553 &#32;&#32;&#32;&#32;}
8554 
8555 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8556 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_control_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8557 &#32;&#32;&#32;&#32;{
8558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u001F&apos;</emphasis>&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u007F&apos;</emphasis>;
8559 &#32;&#32;&#32;&#32;}
8560 
8561 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8562 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_nontab_control_character(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8563 &#32;&#32;&#32;&#32;{
8564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u0008&apos;</emphasis>&#32;||&#32;(c&#32;&gt;=&#32;U<emphasis role="stringliteral">&apos;\u000A&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\u001F&apos;</emphasis>)&#32;||&#32;c&#32;==&#32;U<emphasis role="stringliteral">&apos;\u007F&apos;</emphasis>;
8565 &#32;&#32;&#32;&#32;}
8566 
8567 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
8568 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_unicode_surrogate(<emphasis role="keywordtype">char32_t</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8569 &#32;&#32;&#32;&#32;{
8570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&gt;=&#32;0xD800u&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;0xDFFF;
8571 &#32;&#32;&#32;&#32;}
8572 
8573 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>utf8_decoder
8574 &#32;&#32;&#32;&#32;{
8575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;utf8_decoder&#32;based&#32;on&#32;this:&#32;https://bjoern.hoehrmann.de/utf-8/decoder/dfa/</emphasis>
8576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copyright&#32;(c)&#32;2008-2009&#32;Bjoern&#32;Hoehrmann&#32;&lt;bjoern@hoehrmann.de&gt;</emphasis>
8577 
8578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&#32;state{};
8579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char32_t</emphasis>&#32;codepoint{};
8580 
8581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;state_table[]{
8582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
8583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
8584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
8585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,
8586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;0,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,
8587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;1,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;9,&#32;&#32;7,&#32;&#32;7,
8588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,
8589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;7,&#32;&#32;7,&#32;&#32;7,&#32;&#32;8,&#32;&#32;8,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,
8590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;2,&#32;&#32;10,&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;3,&#32;&#32;4,&#32;&#32;3,&#32;&#32;3,&#32;&#32;11,&#32;6,&#32;&#32;6,
8591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6,&#32;&#32;5,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,&#32;&#32;8,
8592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;12,&#32;24,&#32;36,&#32;60,&#32;96,&#32;84,&#32;12,&#32;12,&#32;12,&#32;48,&#32;72,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;0,&#32;&#32;12,
8593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;12,&#32;12,&#32;12,&#32;12,&#32;0,&#32;&#32;12,&#32;0,&#32;&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,
8594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;24,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,
8595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;36,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,&#32;36,&#32;12,&#32;12,&#32;12,&#32;36,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12,&#32;12
8596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
8597 
8598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
8599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>()&#32;const&#32;noexcept
8600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;state&#32;==&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;12u&#32;};
8602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8603 
8604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
8605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;has_code_point()&#32;const&#32;noexcept
8606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;state&#32;==&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{};
8608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8609 
8610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
8611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;needs_more_input()&#32;const&#32;noexcept
8612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!has_code_point()&#32;&amp;&amp;&#32;!<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>();
8614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8615 
8616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;<emphasis role="keywordtype">byte</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
8617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>());
8619 
8620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;state_table[<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>];
8621 
8622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char32_t</emphasis><emphasis role="keyword">&gt;</emphasis>(has_code_point()&#32;?&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;255u&#32;}&#32;&gt;&gt;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)&#32;&amp;&#32;<emphasis role="keywordtype">byte</emphasis>
8623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>&#32;&amp;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;63u&#32;})
8624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(static_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>&gt;(codepoint)&#32;&lt;&lt;&#32;6));
8625 
8626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;state_table[state&#32;+&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;256u&#32;}&#32;+&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>];
8627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8628 
8629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
8630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;<emphasis role="keyword">noexcept</emphasis>
8631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(c));
8633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8634 
8635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
8636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset()&#32;noexcept
8637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;{};
8639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8640 &#32;&#32;&#32;&#32;};
8641 
8642 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
8643 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
8644 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;<link linkend="_toml_8hpp_1a59540c22f4b7e10864095f21c67e0c69">is_ascii</link>(const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;noexcept;
8645 }
8646 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
8647 
8648 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8649 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
8650 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
8651 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
8652 <emphasis role="preprocessor">#endif</emphasis>
8653 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
8654 
8655 <emphasis role="comment">//********&#32;&#32;impl/parse_error.h&#32;&#32;****************************************************************************************</emphasis>
8656 
8657 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER</emphasis>
8658 
8659 <emphasis role="comment">//********&#32;&#32;impl/std_except.h&#32;&#32;*****************************************************************************************</emphasis>
8660 
8661 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
8662 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
8663 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
8664 <emphasis role="preprocessor">#endif</emphasis>
8665 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
8666 
8667 <emphasis role="comment">//********&#32;&#32;impl/parse_error.h&#32;&#32;****************************************************************************************</emphasis>
8668 
8669 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
8670 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8671 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
8672 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
8673 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
8674 <emphasis role="preprocessor">#undef&#32;min</emphasis>
8675 <emphasis role="preprocessor">#undef&#32;max</emphasis>
8676 <emphasis role="preprocessor">#endif</emphasis>
8677 
8678 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;!TOML_EXCEPTIONS</emphasis>
8679 <emphasis role="preprocessor">#define&#32;TOML_PARSE_ERROR_BASE</emphasis>
8680 <emphasis role="preprocessor">#else</emphasis>
8681 <emphasis role="preprocessor">#define&#32;TOML_PARSE_ERROR_BASE&#32;&#32;&#32;&#32;:&#32;public&#32;std::runtime_error</emphasis>
8682 <emphasis role="preprocessor">#endif</emphasis>
8683 
8684 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
8685 {
8686 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex);
8687 
8688 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>parse_error&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e">TOML_PARSE_ERROR_BASE</link>
8689 &#32;&#32;&#32;&#32;{
8690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
8691 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
8692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;description_;
8693 <emphasis role="preprocessor">#endif</emphasis>
8694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__region">source_region</link>&#32;source_;
8695 
8696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8697 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
8698 
8699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
8701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
8702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::runtime_error{&#32;desc&#32;},
8703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
8704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
8705 
8706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
8708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
8709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}&#32;}
8710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
8711 
8712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
8714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_source__region_8h_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;<link linkend="_classpath">path</link>&#32;=&#32;{})&#32;<emphasis role="keyword">noexcept</emphasis>
8715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_classpath">path</link>&#32;}&#32;}
8716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
8717 
8718 <emphasis role="preprocessor">#else</emphasis>
8719 
8720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a00e25a3aafdabaecf43c1b963c932933">parse_error</link>(std::string&amp;&amp;&#32;desc,&#32;<link linkend="_structsource__region">source_region</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
8722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;description_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(desc)&#32;},
8723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;}
8724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
8725 
8726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a2e2596415c0b4416ea318f066b31c780">parse_error</link>(std::string&amp;&amp;&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
8728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(desc),&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;}&#32;}
8729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
8730 
8731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a8cad309102946c5e9570f052fa4a2da8">parse_error</link>(std::string&amp;&amp;&#32;desc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;<link linkend="_classpath">path</link>&#32;=&#32;{})&#32;<emphasis role="keyword">noexcept</emphasis>
8733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;parse_error{&#32;<link linkend="_namespacestd">std</link>::move(desc),&#32;<link linkend="_structsource__region">source_region</link>{&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>,&#32;<link linkend="_classpath">path</link>&#32;}&#32;}
8734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
8735 
8736 <emphasis role="preprocessor">#endif</emphasis>
8737 
8738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a8cd74000216c01fdb432ec811cb51d2a">description</link>()&#32;const&#32;noexcept
8740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8741 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
8742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string_view{&#32;what()&#32;};
8743 <emphasis role="preprocessor">#else</emphasis>
8744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;description_;
8745 <emphasis role="preprocessor">#endif</emphasis>
8746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8747 
8748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a7bc4debd390ea05d61cf6a11707edfd2">source</link>()&#32;const&#32;noexcept
8750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;source_;
8752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8753 
8754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_class_t_o_m_l___p_a_r_s_e___e_r_r_o_r___b_a_s_e_1a3708b936f4344b8ca8a0e6a0de70f687">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;parse_error&amp;&#32;rhs)
8755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs.description());
8757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;<emphasis role="stringliteral">&quot;\n\t(error&#32;occurred&#32;at&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
8758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;rhs.source());
8759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(lhs,&#32;<emphasis role="stringliteral">&quot;)&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
8760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
8761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8762 &#32;&#32;&#32;&#32;};
8763 
8764 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
8765 }
8766 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
8767 
8768 <emphasis role="preprocessor">#undef&#32;TOML_PARSE_ERROR_BASE</emphasis>
8769 
8770 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8771 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
8772 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
8773 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
8774 <emphasis role="preprocessor">#endif</emphasis>
8775 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
8776 
8777 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_PARSER</emphasis>
8778 
8779 <emphasis role="comment">//********&#32;&#32;impl/parse_result.h&#32;&#32;***************************************************************************************</emphasis>
8780 
8781 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;(TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS)</emphasis>
8782 
8783 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
8784 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
8785 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
8786 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
8787 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
8788 <emphasis role="preprocessor">#undef&#32;min</emphasis>
8789 <emphasis role="preprocessor">#undef&#32;max</emphasis>
8790 <emphasis role="preprocessor">#endif</emphasis>
8791 
8792 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
8793 {
8794 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a9592495c391e21aa0ebe67066fa73214">TOML_ABI_NAMESPACE_START</link>(noex);
8795 
8796 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classparse__result">parse_result</link>
8797 &#32;&#32;&#32;&#32;{
8798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
8799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>storage_t
8800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=
8802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>(toml::table)&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(parse_error)&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(parse_error)&#32;:&#32;sizeof(<link linkend="_namespacetoml">toml</link>::<link linkend="_classtable">table</link>));
8803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;align&#32;=
8804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">alignof</emphasis>(toml::table)&#32;&lt;&#32;<emphasis role="keyword">alignof</emphasis>(parse_error)&#32;?&#32;<emphasis role="keyword">alignof</emphasis>(parse_error)&#32;:&#32;<link linkend="__classes_2lib_2include_2stdalign_8h_1abb241e4f00c28465643e1010172aef04">alignof</link>(<link linkend="_namespacetoml">toml</link>::<link linkend="_classtable">table</link>));
8805 
8806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(align)&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;bytes[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>];
8807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
8808 
8809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(storage_t::align)&#32;<emphasis role="keyword">mutable</emphasis>&#32;storage_t&#32;storage_;
8810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;err_;
8811 
8812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Type&gt;
8813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
8815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Type*&#32;get_as(storage_t&amp;&#32;s)&#32;<emphasis role="keyword">noexcept</emphasis>
8816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a50ef717d8403c782d1405902faca4b80">TOML_LAUNDER</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>Type*<emphasis role="keyword">&gt;</emphasis>(s.bytes));
8818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8819 
8820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;destroy()&#32;noexcept
8821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
8823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_as&lt;parse_error&gt;(storage_)-&gt;~parse_error();
8824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_as&lt;toml::table&gt;(storage_)-&gt;~table();
8826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8827 
8828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
8829 
8830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1a7ce78793e1d7badb69d1fa9a1b9dc023">parse_result</link>()&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
8832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<emphasis role="keyword">true</emphasis>&#32;}
8833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;std::string{},&#32;<link linkend="_structsource__region">source_region</link>{}&#32;};
8835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8836 
8837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classparse__result_1a5bfa57ac29dbff7c917931f74d90c653">parse_result</link>(toml::table&amp;&amp;&#32;tbl)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
8839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<emphasis role="keyword">false</emphasis>&#32;}
8840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_classtable">table</link>{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(tbl)&#32;};
8842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8843 
8844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classparse__result_1a9cff481307b801bd9972917bada1b39e">parse_result</link>(parse_error&amp;&amp;&#32;err)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
8846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<emphasis role="keyword">true</emphasis>&#32;}
8847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(err)&#32;};
8849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8850 
8851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
8852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1a35a596e77eaea21f1b4cb725b8444cf2">parse_result</link>(<link linkend="_classparse__result">parse_result</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
8853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.err_&#32;}
8854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
8856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>).error()&#32;};
8857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
8858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_classtable">table</link>{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>).<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link>()&#32;};
8859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8860 
8861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&amp;&#32;<link linkend="_classparse__result_1a749c0c01921e831bb836c5713f0c22b6">operator=</link>(<link linkend="_classparse__result">parse_result</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
8862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_&#32;!=&#32;rhs.err_)
8864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
8866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err_&#32;=&#32;rhs.err_;
8867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
8868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).error()&#32;};
8869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
8870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;toml::table{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).table()&#32;};
8871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
8875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).error();
8876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
8877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link>();
8878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
8880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8881 
8882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1a4ee2de268492e79c15475e0729e5fb91">~parse_result</link>()&#32;noexcept
8883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
8885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8886 
8887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb">succeeded</link>()&#32;const&#32;noexcept
8889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!err_;
8891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8892 
8893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c">failed</link>()&#32;const&#32;noexcept
8895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_;
8897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8898 
8899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
8901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!err_;
8903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8904 
8905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::table&amp;&#32;<link linkend="_classparse__result_1a08838803e7d4834359276ac1d0ec79a4">table</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
8907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!err_);
8909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;toml::table&gt;(storage_);
8910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8911 
8912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::table&amp;&amp;&#32;<link linkend="_classparse__result_1a007d45efccfa57e83299b448913ca1c5">table</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
8914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!err_);
8916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::table&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*get_as&lt;toml::table&gt;(storage_));
8917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8918 
8919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;&#32;<link linkend="_classparse__result_1a19b0dad766f7fe8c16b6304ab62e1ac4">table</link>()&#32;const&amp;&#32;noexcept
8921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!err_);
8923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;toml::table&gt;(storage_);
8924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8925 
8926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;toml::table&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
8928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable">table</link>();
8930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8931 
8932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;toml::table&amp;&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
8934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classtable">table</link>());
8936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8937 
8938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
8940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable">table</link>();
8942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8943 
8944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error&amp;&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
8946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(err_);
8948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;parse_error&gt;(storage_);
8949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8950 
8951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error&amp;&amp;&#32;<link linkend="_classparse__result_1ab657ef6a6e4b07b66dd445023f08e3b2">error</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
8953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(err_);
8955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>parse_error&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*get_as&lt;parse_error&gt;(storage_));
8956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8957 
8958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;parse_error&amp;&#32;<link linkend="_classparse__result_1ac15b1a7c842a4a8e917a3f51d392556a">error</link>()&#32;const&amp;&#32;noexcept
8960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(err_);
8962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;parse_error&gt;(storage_);
8963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8964 
8965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;parse_error&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
8967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>();
8969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8970 
8971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;parse_error&amp;&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
8973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>());
8975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8976 
8977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;parse_error&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
8979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>();
8981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8982 
8983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator">iterator</link>&#32;=&#32;<link linkend="_classtable__iterator">table_iterator</link>;
8984 
8985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb">const_iterator</link>&#32;=&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>;
8986 
8987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0">begin</link>()&#32;noexcept
8989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classtable__iterator">table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>();
8991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8992 
8993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
8994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1a1b747121196915109bf6ee42999de721">begin</link>()&#32;const&#32;noexcept
8995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
8996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>();
8997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
8998 
8999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1af99c0ce6e4bbe37d4fc63ce33cb6a9ba">cbegin</link>()&#32;const&#32;noexcept
9001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1a99538d11dcdbaa6693aa17002aa40967">cbegin</link>();
9003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9004 
9005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end</link>()&#32;noexcept
9007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classtable__iterator">table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>();
9009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9010 
9011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1a8896ba9f0c0c1339b7be850ea8d60aa1">end</link>()&#32;const&#32;noexcept
9013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>();
9015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9016 
9017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1aab6d787d388a6e63f1f899e153468fcc">cend</link>()&#32;const&#32;noexcept
9019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend</link>();
9021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9022 
9023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641">at_path</link>(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
9025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
9027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9028 
9029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1acfc8e405c9d3ff150bb1322d27e0294f">at_path</link>(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
9031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
9033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9034 
9035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a1963f05321264471873f57fe990ec967">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
9037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
9039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9040 
9041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a38991e36f62e6fe38f7710295c9e80e3">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
9043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
9045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9046 
9047 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
9048 
9049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641">at_path</link>(std::wstring_view&#32;<link linkend="_classpath">path</link>)
9051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
9053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9054 
9055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641">at_path</link>(std::wstring_view&#32;<link linkend="_classpath">path</link>)<emphasis role="keyword">&#32;const</emphasis>
9057 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
9058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
9059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9060 
9061 <emphasis role="preprocessor">#endif</emphasis>
9062 
9063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
9065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[<link linkend="_classpath">path</link>];
9067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9068 
9069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a0a1d0ca0fb0970279d78884704d44ac7">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
9071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[<link linkend="_classpath">path</link>];
9073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9074 
9075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a86709bcdd3001344b0fccd11f04ca56a">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
9077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
9079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9080 
9081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a8f4b8fe8c7b52d0e42fd371226570467">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
9083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
9085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9086 
9087 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
9088 
9089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d">operator[]</link>(std::wstring_view&#32;key)
9091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
9093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9094 
9095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d">operator[]</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
9097 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
9098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
9099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9100 
9101 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
9102 
9103 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
9104 
9105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classparse__result_1a24e2d0cb20f183774c91ca48e9033aa5">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
9106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.err_&#32;?&#32;(os&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.error())&#32;:&#32;(os&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.table());
9108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9109 
9110 <emphasis role="preprocessor">#endif</emphasis>
9111 &#32;&#32;&#32;&#32;};
9112 
9113 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;
9114 }
9115 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
9116 
9117 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9118 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
9119 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
9120 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
9121 <emphasis role="preprocessor">#endif</emphasis>
9122 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
9123 
9124 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
9125 
9126 <emphasis role="comment">//********&#32;&#32;impl/parser.h&#32;&#32;*********************************************************************************************</emphasis>
9127 
9128 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER</emphasis>
9129 
9130 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
9131 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9132 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
9133 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
9134 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
9135 <emphasis role="preprocessor">#undef&#32;min</emphasis>
9136 <emphasis role="preprocessor">#undef&#32;max</emphasis>
9137 <emphasis role="preprocessor">#endif</emphasis>
9138 
9139 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
9140 {
9141 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex);
9142 
9143 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9144 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9145 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::string_view&#32;doc,&#32;std::string_view&#32;source_path&#32;=&#32;{});
9146 
9147 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9148 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9149 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::string_view&#32;doc,&#32;std::string&#32;&amp;&amp;&#32;source_path);
9150 
9151 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9152 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9153 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a283b0807cf14ff886499b5fd270161b2">parse_file</link>(std::string_view&#32;file_path);
9154 
9155 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
9156 
9157 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9158 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9159 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::u8string_view&#32;doc,&#32;std::string_view&#32;source_path&#32;=&#32;{});
9160 
9161 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9162 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9163 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::u8string_view&#32;doc,&#32;std::string&#32;&amp;&amp;&#32;source_path);
9164 
9165 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9166 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9167 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a283b0807cf14ff886499b5fd270161b2">parse_file</link>(std::u8string_view&#32;file_path);
9168 
9169 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8</emphasis>
9170 
9171 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
9172 
9173 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9174 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9175 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::string_view&#32;doc,&#32;std::wstring_view&#32;source_path);
9176 
9177 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9178 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9179 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::istream&#32;&amp;&#32;doc,&#32;std::wstring_view&#32;source_path);
9180 
9181 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9182 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9183 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a283b0807cf14ff886499b5fd270161b2">parse_file</link>(std::wstring_view&#32;file_path);
9184 
9185 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
9186 
9187 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8&#32;&amp;&amp;&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
9188 
9189 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9190 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9191 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::u8string_view&#32;doc,&#32;std::wstring_view&#32;source_path);
9192 
9193 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8&#32;&amp;&amp;&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
9194 
9195 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9196 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9197 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::istream&#32;&amp;&#32;doc,&#32;std::string_view&#32;source_path&#32;=&#32;{});
9198 
9199 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9200 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac40a454cde06de4e76df3d6d460a3544">TOML_EXPORTED_FREE_FUNCTION</link>
9201 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::istream&#32;&amp;&#32;doc,&#32;std::string&#32;&amp;&amp;&#32;source_path);
9202 
9203 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
9204 
9205 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceliterals">literals</link>
9206 &#32;&#32;&#32;&#32;{
9207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;lit_ex,&#32;lit_noex);
9208 
9209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
9211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_toml(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
9212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_parser_8h_1a6b22a2b999bcc2d61e471470a4ef8e96">parse</link>(std::string_view{&#32;str,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;});
9214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9215 
9216 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
9217 
9218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
9220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;_toml(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
9221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_parser_8h_1a6b22a2b999bcc2d61e471470a4ef8e96">parse</link>(std::u8string_view{&#32;str,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;});
9223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9224 
9225 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8</emphasis>
9226 
9227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceliterals_1a179ab2ccfe25b96becb1decf42648ca9">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
9228 &#32;&#32;&#32;&#32;}
9229 }
9230 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
9231 
9232 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9233 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
9234 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
9235 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
9236 <emphasis role="preprocessor">#endif</emphasis>
9237 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
9238 
9239 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_PARSER</emphasis>
9240 
9241 <emphasis role="comment">//********&#32;&#32;impl/formatter.h&#32;&#32;******************************************************************************************</emphasis>
9242 
9243 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
9244 
9245 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
9246 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9247 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
9248 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
9249 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
9250 <emphasis role="preprocessor">#undef&#32;min</emphasis>
9251 <emphasis role="preprocessor">#undef&#32;max</emphasis>
9252 <emphasis role="preprocessor">#endif</emphasis>
9253 
9254 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
9255 {
9256 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>formatter_constants
9257 &#32;&#32;&#32;&#32;{
9258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;mandatory_flags;
9259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;ignored_flags;
9260 
9261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;float_pos_inf;
9262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;float_neg_inf;
9263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;float_nan;
9264 
9265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;bool_true;
9266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;bool_false;
9267 &#32;&#32;&#32;&#32;};
9268 
9269 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structformatter__config">formatter_config</link>
9270 &#32;&#32;&#32;&#32;{
9271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>;
9272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_structformatter__config_1a1a2ae49c7de03d0014d24e9397455733">indent</link>;
9273 &#32;&#32;&#32;&#32;};
9274 
9275 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_toml_8hpp_1a3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;<link linkend="_classformatter">formatter</link>
9276 &#32;&#32;&#32;&#32;{
9277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
9278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;source_;
9279 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
9280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>*&#32;result_;
9281 <emphasis role="preprocessor">#endif</emphasis>
9282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;formatter_constants*&#32;constants_;
9283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structformatter__config">formatter_config</link>&#32;config_;
9284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;indent_columns_;
9285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;int_format_mask_;
9286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream*&#32;stream_;&#32;<emphasis role="comment">//</emphasis>
9287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;indent_;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;these&#32;are&#32;set&#32;in&#32;attach()</emphasis>
9288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;naked_newline_;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9289 
9290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
9291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>()&#32;const&#32;noexcept
9293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*source_;
9295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9296 
9297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;&#32;<link linkend="_classformatter_1a51257d7977f94a0c358aab545d5e2695">stream</link>()&#32;const&#32;noexcept
9299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*stream_;
9301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9302 
9303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classformatter_1a968336d10a2780be27ec1ddf1532fbe5">indent</link>()&#32;const&#32;noexcept
9305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;indent_;
9307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9308 
9309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a3e83dcfc1b4a209778d7f2f55f92043d">indent</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
9310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a2424d012241ecec8ab2763eddf543736">level</link>;
9312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9313 
9314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>()&#32;noexcept
9315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_++;
9317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9318 
9319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>()&#32;noexcept
9320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_--;
9322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9323 
9324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classformatter_1a39a56705bed37122f2b164f1bb143f10">indent_columns</link>()&#32;const&#32;noexcept
9326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;indent_columns_;
9328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9329 
9330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1a81bfefbaec0e8743248a31309263b32a">indent_array_elements</link>()&#32;const&#32;noexcept
9332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::indent_array_elements);
9334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9335 
9336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1a7418d6ecf6698ae231a576a4bd1d1f26">indent_sub_tables</link>()&#32;const&#32;noexcept
9338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::indent_sub_tables);
9340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9341 
9342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;const&#32;noexcept
9344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_literal_strings);
9346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9347 
9348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1a2c5c11209bcde97d39b08d2e1a159f04">multi_line_strings_allowed</link>()&#32;const&#32;noexcept
9350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_multi_line_strings);
9352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9353 
9354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1a70244c9a53ff8dcdda99788ff7048aed">real_tabs_in_strings_allowed</link>()&#32;const&#32;noexcept
9356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_real_tabs_in_strings);
9358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9359 
9360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1a8337456ce8d93a5b60fb3b3e4d467ef2">unicode_strings_allowed</link>()&#32;const&#32;noexcept
9362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::allow_unicode_strings);
9364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9365 
9366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
9367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1a78bb5356ddd0baf02415527e4fb036f0">terse_kvps</link>()&#32;const&#32;noexcept
9368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::terse_key_value_pairs);
9370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9371 
9372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;attach(std::ostream&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>)&#32;<emphasis role="keyword">noexcept</emphasis>;
9374 
9375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;detach()&#32;noexcept;
9377 
9378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_newline(<emphasis role="keywordtype">bool</emphasis>&#32;force&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>);
9380 
9381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_indent();
9383 
9384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_unformatted(<emphasis role="keywordtype">char</emphasis>);
9386 
9387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_unformatted(<link linkend="_namespacestd">std</link>::string_view);
9389 
9390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_string(<link linkend="_namespacestd">std</link>::string_view&#32;str,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_multi_line&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_bare&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>);
9392 
9393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="_namespacestd">std</link>::<emphasis role="keywordtype">string</emphasis>&gt;&amp;);
9395 
9396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;&amp;);
9398 
9399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<emphasis role="keywordtype">double</emphasis>&gt;&amp;);
9401 
9402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<emphasis role="keywordtype">bool</emphasis>&gt;&amp;);
9404 
9405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;date&gt;&amp;);
9407 
9408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="_structtime">time</link>&gt;&amp;);
9410 
9411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(const&#32;<link linkend="_classvalue">value</link>&lt;<link linkend="_structdate__time">date_time</link>&gt;&amp;);
9413 
9414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtc_2gtc__packing_8cpp_1a57a79a4ef71048df91475bed8ba43e2b">print_value</link>(const&#32;node&amp;,&#32;node_type);
9416 
9417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
9418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;dump_failed_parse_result();
9420 
9421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
9422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter">formatter</link>(const&#32;node*,&#32;const&#32;<link linkend="_classparse__result">parse_result</link>*,&#32;const&#32;formatter_constants&amp;,&#32;const&#32;<link linkend="_structformatter__config">formatter_config</link>&amp;)&#32;noexcept;
9424 &#32;&#32;&#32;&#32;};
9425 }
9426 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
9427 
9428 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9429 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
9430 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
9431 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
9432 <emphasis role="preprocessor">#endif</emphasis>
9433 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
9434 
9435 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
9436 
9437 <emphasis role="comment">//********&#32;&#32;impl/toml_formatter.h&#32;&#32;*************************************************************************************</emphasis>
9438 
9439 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
9440 
9441 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
9442 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9443 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
9444 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
9445 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
9446 <emphasis role="preprocessor">#undef&#32;min</emphasis>
9447 <emphasis role="preprocessor">#undef&#32;max</emphasis>
9448 <emphasis role="preprocessor">#endif</emphasis>
9449 
9450 <link linkend="_preprocessor_8h_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
9451 {
9452 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;toml_formatter&#32;:&#32;impl::formatter
9453 &#32;&#32;&#32;&#32;{
9454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
9455 
9456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>base&#32;=&#32;impl::formatter;
9457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;const&#32;key*&gt;&#32;key_path_;
9458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;pending_table_separator_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
9459 
9460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_pending_table_separator();
9462 
9463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(<emphasis role="keyword">const</emphasis>&#32;key&amp;);
9465 
9466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_inline(<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;);
9468 
9469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(<emphasis role="keyword">const</emphasis>&#32;toml::array&amp;);
9471 
9472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;);
9474 
9475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>();
9477 
9478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;impl::formatter_constants&#32;constants&#32;=&#32;{&#32;format_flags::none,&#32;<emphasis role="comment">//&#32;mandatory</emphasis>
9479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;format_flags::none,&#32;<emphasis role="comment">//&#32;ignored</emphasis>
9480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;-inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;nan&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;};
9485 
9486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9487 
9488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;default_flags&#32;=&#32;constants.mandatory_flags&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_literal_strings&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_multi_line_strings&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_unicode_strings&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_real_tabs_in_strings&#32;<emphasis role="comment">//</emphasis>
9493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_binary_integers&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_octal_integers&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_hexadecimal_integers&#32;<emphasis role="comment">//</emphasis>
9496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::indentation;
9497 
9498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
9499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;toml_formatter(<emphasis role="keyword">const</emphasis>&#32;toml::node&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;default_flags)&#32;noexcept
9500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base{&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;constants,&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;}&#32;}
9501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9502 
9503 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;(TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS)</emphasis>
9504 
9505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
9506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;toml_formatter(<emphasis role="keyword">const</emphasis>&#32;toml::parse_result&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;default_flags)&#32;noexcept
9507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base{&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;constants,&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;}&#32;}
9508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9509 
9510 <emphasis role="preprocessor">#endif</emphasis>
9511 
9512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;toml_formatter&amp;&#32;rhs)
9513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.attach(lhs);
9515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.key_path_.clear();
9516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.print();
9517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.detach();
9518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
9519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9520 
9521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;toml_formatter&amp;&amp;&#32;rhs)
9522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;rhs;&#32;<emphasis role="comment">//&#32;as&#32;lvalue</emphasis>
9524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9525 &#32;&#32;&#32;&#32;};
9526 }
9527 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
9528 
9529 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9530 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
9531 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
9532 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
9533 <emphasis role="preprocessor">#endif</emphasis>
9534 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
9535 
9536 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
9537 
9538 <emphasis role="comment">//********&#32;&#32;impl/json_formatter.h&#32;&#32;*************************************************************************************</emphasis>
9539 
9540 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
9541 
9542 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
9543 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9544 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
9545 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
9546 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
9547 <emphasis role="preprocessor">#undef&#32;min</emphasis>
9548 <emphasis role="preprocessor">#undef&#32;max</emphasis>
9549 <emphasis role="preprocessor">#endif</emphasis>
9550 
9551 <link linkend="_preprocessor_8h_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
9552 {
9553 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;json_formatter&#32;:&#32;impl::formatter
9554 &#32;&#32;&#32;&#32;{
9555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
9556 
9557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>base&#32;=&#32;impl::formatter;
9558 
9559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;);
9561 
9562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(<emphasis role="keyword">const</emphasis>&#32;toml::array&amp;);
9564 
9565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>();
9567 
9568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;impl::formatter_constants&#32;constants&#32;=&#32;{
9569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;format_flags::quote_dates_and_times,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;mandatory</emphasis>
9570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;format_flags::allow_literal_strings&#32;|&#32;format_flags::allow_multi_line_strings,&#32;<emphasis role="comment">//&#32;ignored</emphasis>
9571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Infinity&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;-Infinity&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;NaN&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
9576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9577 
9578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9579 
9580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;default_flags&#32;=&#32;constants.mandatory_flags&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::quote_infinities_and_nans&#32;<emphasis role="comment">//</emphasis>
9582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_unicode_strings&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::indentation;
9584 
9585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
9586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;json_formatter(<emphasis role="keyword">const</emphasis>&#32;toml::node&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;default_flags)&#32;noexcept
9587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base{&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;constants,&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;}&#32;}
9588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9589 
9590 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;(TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS)</emphasis>
9591 
9592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
9593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;json_formatter(<emphasis role="keyword">const</emphasis>&#32;toml::parse_result&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;default_flags)&#32;noexcept
9594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base{&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;constants,&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;}&#32;}
9595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9596 
9597 <emphasis role="preprocessor">#endif</emphasis>
9598 
9599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;json_formatter&amp;&#32;rhs)
9600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.attach(lhs);
9602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.print();
9603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.detach();
9604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
9605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9606 
9607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;json_formatter&amp;&amp;&#32;rhs)
9608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;rhs;&#32;<emphasis role="comment">//&#32;as&#32;lvalue</emphasis>
9610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9611 &#32;&#32;&#32;&#32;};
9612 }
9613 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
9614 
9615 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9616 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
9617 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
9618 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
9619 <emphasis role="preprocessor">#endif</emphasis>
9620 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
9621 
9622 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
9623 
9624 <emphasis role="comment">//********&#32;&#32;impl/yaml_formatter.h&#32;&#32;*************************************************************************************</emphasis>
9625 
9626 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
9627 
9628 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
9629 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9630 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
9631 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
9632 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
9633 <emphasis role="preprocessor">#undef&#32;min</emphasis>
9634 <emphasis role="preprocessor">#undef&#32;max</emphasis>
9635 <emphasis role="preprocessor">#endif</emphasis>
9636 
9637 <link linkend="_preprocessor_8h_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
9638 {
9639 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_group__configuration_1ga3d7aebf91431575688d573f09a17559a">TOML_EXPORTED_CLASS</link>&#32;yaml_formatter&#32;:&#32;impl::formatter
9640 &#32;&#32;&#32;&#32;{
9641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
9642 
9643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>base&#32;=&#32;impl::formatter;
9644 
9645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_yaml_string(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&amp;);
9647 
9648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;<emphasis role="keyword">false</emphasis>);
9650 
9651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(<emphasis role="keyword">const</emphasis>&#32;toml::array&amp;,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;<emphasis role="keyword">false</emphasis>);
9653 
9654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1gadf515bb7a6b8ce6b14bf86c8961a63cb">TOML_EXPORTED_MEMBER_FUNCTION</link>
9655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>();
9656 
9657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;impl::formatter_constants&#32;constants&#32;=&#32;{
9658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;format_flags::quote_dates_and_times&#32;|&#32;format_flags::indentation,&#32;<emphasis role="comment">//&#32;mandatory</emphasis>
9660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;format_flags::allow_multi_line_strings,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ignored</emphasis>
9661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;.inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;-.inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;.NAN&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
9665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
9666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9667 
9668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
9669 
9670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;default_flags&#32;=&#32;constants.mandatory_flags&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
9671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_literal_strings&#32;<emphasis role="comment">//</emphasis>
9672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_unicode_strings&#32;<emphasis role="comment">//</emphasis>
9673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_octal_integers&#32;&#32;<emphasis role="comment">//</emphasis>
9674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_hexadecimal_integers;
9675 
9676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
9677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;yaml_formatter(<emphasis role="keyword">const</emphasis>&#32;toml::node&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;default_flags)&#32;noexcept
9678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base{&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;constants,&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;}&#32;}
9679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9680 
9681 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;(TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS)</emphasis>
9682 
9683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
9684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;yaml_formatter(<emphasis role="keyword">const</emphasis>&#32;toml::parse_result&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;default_flags)&#32;noexcept
9685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;base{&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>,&#32;constants,&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;}&#32;}
9686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
9687 
9688 <emphasis role="preprocessor">#endif</emphasis>
9689 
9690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;yaml_formatter&amp;&#32;rhs)
9691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.attach(lhs);
9693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.print();
9694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.detach();
9695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs;
9696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9697 
9698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;lhs,&#32;yaml_formatter&amp;&amp;&#32;rhs)
9699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;rhs;&#32;<emphasis role="comment">//&#32;as&#32;lvalue</emphasis>
9701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9702 &#32;&#32;&#32;&#32;};
9703 }
9704 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
9705 
9706 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9707 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
9708 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
9709 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
9710 <emphasis role="preprocessor">#endif</emphasis>
9711 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
9712 
9713 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
9714 
9715 <emphasis role="preprocessor">#if&#32;TOML_IMPLEMENTATION</emphasis>
9716 
9717 <emphasis role="comment">//********&#32;&#32;impl/std_string.inl&#32;&#32;***************************************************************************************</emphasis>
9718 
9719 <emphasis role="preprocessor">#if&#32;TOML_WINDOWS</emphasis>
9720 
9721 <emphasis role="preprocessor">#ifndef&#32;_WINDOWS_</emphasis>
9722 <emphasis role="preprocessor">#if&#32;TOML_INCLUDE_WINDOWS_H</emphasis>
9723 <emphasis role="preprocessor">#include&#32;&lt;Windows.h&gt;</emphasis>
9724 <emphasis role="preprocessor">#else</emphasis>
9725 
9726 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;__declspec(dllimport)&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;WideCharToMultiByte(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CodePage,
9727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;dwFlags,
9728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;lpWideCharStr,
9729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cchWideChar,
9730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lpMultiByteStr,
9731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cbMultiByte,
9732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lpDefaultChar,
9733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>*&#32;lpUsedDefaultChar);
9734 
9735 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;__declspec(dllimport)&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;MultiByteToWideChar(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CodePage,
9736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;dwFlags,
9737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lpMultiByteStr,
9738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cbMultiByte,
9739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;lpWideCharStr,
9740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cchWideChar);
9741 
9742 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_INCLUDE_WINDOWS_H</emphasis>
9743 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_WINDOWS_</emphasis>
9744 
9745 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
9746 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9747 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
9748 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
9749 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
9750 <emphasis role="preprocessor">#undef&#32;min</emphasis>
9751 <emphasis role="preprocessor">#undef&#32;max</emphasis>
9752 <emphasis role="preprocessor">#endif</emphasis>
9753 
9754 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
9755 {
9756 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
9757 &#32;&#32;&#32;&#32;std::string&#32;narrow(std::wstring_view&#32;str)
9758 &#32;&#32;&#32;&#32;{
9759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str.empty())
9760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
9761 
9762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;s;
9763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=
9764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::WideCharToMultiByte(65001,&#32;0,&#32;str.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(str.length()),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="keyword">nullptr</emphasis>);
9765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
9766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.resize(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
9768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::WideCharToMultiByte(65001,
9769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
9770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.data(),
9771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(str.length()),
9772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.data(),
9773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,
9774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>,
9775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">nullptr</emphasis>);
9776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
9778 &#32;&#32;&#32;&#32;}
9779 
9780 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
9781 &#32;&#32;&#32;&#32;std::wstring&#32;widen(std::string_view&#32;str)
9782 &#32;&#32;&#32;&#32;{
9783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str.empty())
9784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
9785 
9786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::wstring&#32;s;
9787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;::MultiByteToWideChar(65001,&#32;0,&#32;str.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(str.length()),&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;0);
9788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
9789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.resize(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
9791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::MultiByteToWideChar(65001,&#32;0,&#32;str.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(str.length()),&#32;s.data(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
9792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
9794 &#32;&#32;&#32;&#32;}
9795 
9796 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
9797 
9798 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
9799 &#32;&#32;&#32;&#32;std::wstring&#32;widen(std::u8string_view&#32;str)
9800 &#32;&#32;&#32;&#32;{
9801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str.empty())
9802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
9803 
9804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;widen(std::string_view{&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(str.data()),&#32;str.length()&#32;});
9805 &#32;&#32;&#32;&#32;}
9806 
9807 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8</emphasis>
9808 }
9809 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
9810 
9811 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9812 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
9813 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
9814 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
9815 <emphasis role="preprocessor">#endif</emphasis>
9816 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
9817 
9818 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_WINDOWS</emphasis>
9819 
9820 <emphasis role="comment">//********&#32;&#32;impl/print_to_stream.inl&#32;&#32;**********************************************************************************</emphasis>
9821 
9822 <link linkend="_preprocessor_8h_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
9823 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
9824 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV&#32;||&#32;TOML_FLOAT_CHARCONV</emphasis>
9825 <emphasis role="preprocessor">#include&#32;&lt;charconv&gt;</emphasis>
9826 <emphasis role="preprocessor">#endif</emphasis>
9827 <emphasis role="preprocessor">#if&#32;!TOML_INT_CHARCONV&#32;||&#32;!TOML_FLOAT_CHARCONV</emphasis>
9828 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
9829 <emphasis role="preprocessor">#endif</emphasis>
9830 <emphasis role="preprocessor">#if&#32;!TOML_INT_CHARCONV</emphasis>
9831 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
9832 <emphasis role="preprocessor">#endif</emphasis>
9833 <link linkend="_preprocessor_8h_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
9834 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
9835 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
9836 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
9837 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
9838 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
9839 <emphasis role="preprocessor">#undef&#32;min</emphasis>
9840 <emphasis role="preprocessor">#undef&#32;max</emphasis>
9841 <emphasis role="preprocessor">#endif</emphasis>
9842 
9843 <link linkend="_preprocessor_8h_1a492b1349e6331172ea2b6b9b5791ec61">TOML_ANON_NAMESPACE_START</link>
9844 {
9845 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9846 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;charconv_buffer_length&#32;=&#32;0;
9847 
9848 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9849 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1a8189ce073a380bfaedb83b589d944ddf">charconv_buffer_length&lt;int8_t&gt;</link>&#32;=&#32;4;&#32;<emphasis role="comment">//&#32;strlen(&quot;-128&quot;)</emphasis>
9850 
9851 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9852 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1a0d52c8fffb070859c3decf0313a3627b">charconv_buffer_length&lt;int16_t&gt;</link>&#32;=&#32;6;&#32;<emphasis role="comment">//&#32;strlen(&quot;-32768&quot;)</emphasis>
9853 
9854 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9855 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1aa0eeb9b98c1b00814115ccbcc26584ef">charconv_buffer_length&lt;int32_t&gt;</link>&#32;=&#32;11;&#32;<emphasis role="comment">//&#32;strlen(&quot;-2147483648&quot;)</emphasis>
9856 
9857 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9858 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1a3a79e3122b596ad47a25b66aacf181d9">charconv_buffer_length&lt;int64_t&gt;</link>&#32;=&#32;20;&#32;<emphasis role="comment">//&#32;strlen(&quot;-9223372036854775808&quot;)</emphasis>
9859 
9860 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9861 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1a10b1beeb9876d2242010a83848a8d2f8">charconv_buffer_length&lt;uint8_t&gt;</link>&#32;=&#32;3;&#32;<emphasis role="comment">//&#32;strlen(&quot;255&quot;)</emphasis>
9862 
9863 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9864 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1a736cfeba3712a13299acce5d8bbae738">charconv_buffer_length&lt;uint16_t&gt;</link>&#32;=&#32;5;&#32;<emphasis role="comment">//&#32;strlen(&quot;65535&quot;)</emphasis>
9865 
9866 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9867 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1a97a3f7337264b54b891ea302ae08b9e7">charconv_buffer_length&lt;uint32_t&gt;</link>&#32;=&#32;10;&#32;<emphasis role="comment">//&#32;strlen(&quot;4294967295&quot;)</emphasis>
9868 
9869 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9870 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1aa953f8a1b787818620a3a5be31755675">charconv_buffer_length&lt;uint64_t&gt;</link>&#32;=&#32;20;&#32;<emphasis role="comment">//&#32;strlen(&quot;18446744073709551615&quot;)</emphasis>
9871 
9872 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9873 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1addbd7d618800a068ddd7d1e5528ace93">charconv_buffer_length&lt;float&gt;</link>&#32;=&#32;64;
9874 
9875 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
9876 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_print__to__stream_8inl_1ad164d15850201081ce9f8d2820252b21">charconv_buffer_length&lt;double&gt;</link>&#32;=&#32;64;
9877 
9878 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9879 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
9880 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_print__to__stream_8inl_1ae0ee9b1728e8a7cddf22095cf20e5090">print_integer_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;T&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;=&#32;{},&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits&#32;=&#32;0)
9881 &#32;&#32;&#32;&#32;{
9882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
9883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!min_digits)
9885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_digits&#32;=&#32;1;
9886 
9887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;min_digits;&#32;i++)
9888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
9889 
9890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
9891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9892 
9893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;value_flags_mask&#32;=
9894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_binary&#32;|&#32;value_flags::format_as_octal&#32;|&#32;value_flags::format_as_hexadecimal;
9895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;&amp;=&#32;value_flags_mask;
9896 
9897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;base&#32;=&#32;10;
9898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;!=&#32;value_flags::none&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&gt;&#32;T{})
9899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>)
9901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_binary:&#32;base&#32;=&#32;2;&#32;<emphasis role="keywordflow">break</emphasis>;
9903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_octal:&#32;base&#32;=&#32;8;&#32;<emphasis role="keywordflow">break</emphasis>;
9904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_hexadecimal:&#32;base&#32;=&#32;16;&#32;<emphasis role="keywordflow">break</emphasis>;
9905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
9906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9908 
9909 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV</emphasis>
9910 
9911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[(<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;CHAR_BIT)];
9912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;std::to_chars(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;base);
9913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.ptr&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>);
9914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;i&#32;&lt;&#32;min_digits;&#32;i++)
9915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
9916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base&#32;==&#32;16)
9917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;i++)
9919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[i]&#32;&gt;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>)
9920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[i]&#32;-=&#32;32;
9921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
9923 
9924 <emphasis role="preprocessor">#else</emphasis>
9925 
9926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unsigned_type&#32;=&#32;std::conditional_t&lt;(<emphasis role="keyword">sizeof</emphasis>(T)&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>)),&#32;std::make_unsigned_t&lt;T&gt;,&#32;<emphasis role="keywordtype">unsigned</emphasis>&gt;;
9927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>cast_type&#32;&#32;&#32;&#32;&#32;=&#32;std::conditional_t&lt;std::is_signed_v&lt;T&gt;,&#32;std::make_signed_t&lt;unsigned_type&gt;,&#32;unsigned_type&gt;;
9928 
9929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base&#32;==&#32;2)
9930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;CHAR_BIT;
9932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;i&#32;&lt;&#32;min_digits;&#32;i++)
9933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
9934 
9935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found_one&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
9936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>unsigned_type<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
9937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unsigned_type&#32;<link linkend="_namespacemask">mask</link>&#32;=&#32;unsigned_type{&#32;1&#32;}&#32;&lt;&lt;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;-&#32;1u);
9938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;i++)
9939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&amp;&#32;<link linkend="_namespacemask">mask</link>))
9941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;1&apos;</emphasis>);
9943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;found_one&#32;=&#32;<emphasis role="keyword">true</emphasis>;
9944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(found_one)
9946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
9947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacemask">mask</link>&#32;&gt;&gt;=&#32;1;
9948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
9951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;ss;
9953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.imbue(std::locale::classic());
9954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;std::uppercase&#32;&lt;&lt;&#32;std::setbase(base);
9955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(min_digits)
9956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;std::setfill(&apos;0&apos;)&#32;&lt;&lt;&#32;std::setw(static_cast&lt;int&gt;(min_digits));
9957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;static_cast&lt;cast_type&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
9958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;str&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ss).str();
9959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;str);
9960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
9961 
9962 <emphasis role="preprocessor">#endif</emphasis>
9963 &#32;&#32;&#32;&#32;}
9964 
9965 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
9966 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
9967 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_print__to__stream_8inl_1a6ee5428b144b0bd723b9ef03285a17b5">print_floating_point_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,
9968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
9969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,
9970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keywordtype">bool</emphasis>&#32;relaxed_precision)
9971 &#32;&#32;&#32;&#32;{
9972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(impl::fpclassify(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))
9973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;impl::fp_class::neg_inf:&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;-inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;<emphasis role="keywordflow">break</emphasis>;
9975 
9976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;impl::fp_class::pos_inf:&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;<emphasis role="keywordflow">break</emphasis>;
9977 
9978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;impl::fp_class::nan:&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;nan&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;<emphasis role="keywordflow">break</emphasis>;
9979 
9980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;impl::fp_class::ok:
9981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;needs_decimal_point&#32;=&#32;[](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;s)&#32;<emphasis role="keyword">noexcept</emphasis>
9983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
9984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;s)
9985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>)
9986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
9987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
9988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
9989 
9990 <emphasis role="preprocessor">#if&#32;TOML_FLOAT_CHARCONV</emphasis>
9991 
9992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;hex&#32;=&#32;!!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;&amp;&#32;value_flags::format_as_hexadecimal);
9993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[charconv_buffer_length&lt;T&gt;];
9994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;hex&#32;?&#32;std::to_chars(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;std::chars_format::hex)
9995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::to_chars(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
9996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;str&#32;=&#32;std::string_view{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.ptr&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>)&#32;};
9997 
9998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buf2[charconv_buffer_length&lt;T&gt;];
9999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hex&#32;&amp;&amp;&#32;relaxed_precision)
10000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::to_chars(buf2,&#32;buf2&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(buf2),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;std::chars_format::general,&#32;6);
10002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;str2&#32;=&#32;std::string_view{&#32;buf2,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.ptr&#32;-&#32;buf2)&#32;};
10003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str2.length()&#32;&lt;&#32;str.length())
10004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;str2;
10005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10006 
10007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;str);
10008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hex&#32;&amp;&amp;&#32;needs_decimal_point(str))
10009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;.0&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10010 
10011 <emphasis role="preprocessor">#else</emphasis>
10012 
10013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;ss;
10014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.imbue(std::locale::classic());
10015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!relaxed_precision)
10016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.precision(std::numeric_limits&lt;T&gt;::max_digits10);
10017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;&amp;&#32;value_flags::format_as_hexadecimal))
10018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;std::hexfloat;
10019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
10020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;str&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ss).str();
10021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;str);
10022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>&#32;&amp;&#32;value_flags::format_as_hexadecimal)&#32;&amp;&amp;&#32;needs_decimal_point(str))
10023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;.0&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10024 
10025 <emphasis role="preprocessor">#endif</emphasis>
10026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10028 
10029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_preprocessor_8h_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
10030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10031 &#32;&#32;&#32;&#32;}
10032 }
10033 <link linkend="_preprocessor_8h_1a0385295454ae473a68d194eaffaf597c">TOML_ANON_NAMESPACE_END</link>;
10034 
10035 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
10036 {
10037 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10038 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
10039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
10040 &#32;&#32;&#32;&#32;{
10041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.write(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>));
10042 &#32;&#32;&#32;&#32;}
10043 
10044 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;std::string_view&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10046 &#32;&#32;&#32;&#32;{
10047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.write(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.length()));
10048 &#32;&#32;&#32;&#32;}
10049 
10050 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10051 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10052 &#32;&#32;&#32;&#32;{
10053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.write(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.length()));
10054 &#32;&#32;&#32;&#32;}
10055 
10056 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10057 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10058 &#32;&#32;&#32;&#32;{
10059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
10060 &#32;&#32;&#32;&#32;}
10061 
10062 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10063 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10064 &#32;&#32;&#32;&#32;{
10065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10066 &#32;&#32;&#32;&#32;}
10067 
10068 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10070 &#32;&#32;&#32;&#32;{
10071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10072 &#32;&#32;&#32;&#32;}
10073 
10074 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10075 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10076 &#32;&#32;&#32;&#32;{
10077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10078 &#32;&#32;&#32;&#32;}
10079 
10080 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10081 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10082 &#32;&#32;&#32;&#32;{
10083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10084 &#32;&#32;&#32;&#32;}
10085 
10086 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10087 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,
10088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
10089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,
10090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10091 &#32;&#32;&#32;&#32;{
10092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10093 &#32;&#32;&#32;&#32;}
10094 
10095 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10096 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10097 &#32;&#32;&#32;&#32;{
10098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10099 &#32;&#32;&#32;&#32;}
10100 
10101 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10102 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10103 &#32;&#32;&#32;&#32;{
10104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10105 &#32;&#32;&#32;&#32;}
10106 
10107 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10109 &#32;&#32;&#32;&#32;{
10110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10111 &#32;&#32;&#32;&#32;}
10112 
10113 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10115 &#32;&#32;&#32;&#32;{
10116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10117 &#32;&#32;&#32;&#32;}
10118 
10119 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,
10121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
10122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,
10123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;min_digits)
10124 &#32;&#32;&#32;&#32;{
10125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_integer_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;min_digits);
10126 &#32;&#32;&#32;&#32;}
10127 
10128 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;relaxed_precision)
10130 &#32;&#32;&#32;&#32;{
10131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_floating_point_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;relaxed_precision);
10132 &#32;&#32;&#32;&#32;}
10133 
10134 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;relaxed_precision)
10136 &#32;&#32;&#32;&#32;{
10137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::print_floating_point_to_stream(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>,&#32;relaxed_precision);
10138 &#32;&#32;&#32;&#32;}
10139 
10140 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10142 &#32;&#32;&#32;&#32;{
10143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10144 &#32;&#32;&#32;&#32;}
10145 
10146 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10147 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::date&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10148 &#32;&#32;&#32;&#32;{
10149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.year,&#32;{},&#32;4);
10150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;-&apos;</emphasis>);
10151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.month,&#32;{},&#32;2);
10152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;-&apos;</emphasis>);
10153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.day,&#32;{},&#32;2);
10154 &#32;&#32;&#32;&#32;}
10155 
10156 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10158 &#32;&#32;&#32;&#32;{
10159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.hour,&#32;{},&#32;2);
10160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;:&apos;</emphasis>);
10161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.minute,&#32;{},&#32;2);
10162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;:&apos;</emphasis>);
10163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.second,&#32;{},&#32;2);
10164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.nanosecond&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.nanosecond&#32;&lt;=&#32;999999999u)
10165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;.&apos;</emphasis>);
10167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ns&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.nanosecond;
10168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;digits&#32;=&#32;9u;
10169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ns&#32;%&#32;10u&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
10170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ns&#32;/=&#32;10u;
10172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits--;
10173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;ns,&#32;{},&#32;digits);
10175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10176 &#32;&#32;&#32;&#32;}
10177 
10178 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::time_offset&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10180 &#32;&#32;&#32;&#32;{
10181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.minutes)
10182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;Z&apos;</emphasis>);
10184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
10185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10186 
10187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mins&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.minutes);
10188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mins&#32;&lt;&#32;0)
10189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;-&apos;</emphasis>);
10191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mins&#32;=&#32;-mins;
10192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;+&apos;</emphasis>);
10195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;hours&#32;=&#32;mins&#32;/&#32;60;
10196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hours)
10197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(hours),&#32;{},&#32;2);
10199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mins&#32;-=&#32;hours&#32;*&#32;60;
10200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;00&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;:&apos;</emphasis>);
10204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(mins),&#32;{},&#32;2);
10205 &#32;&#32;&#32;&#32;}
10206 
10207 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::date_time&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10209 &#32;&#32;&#32;&#32;{
10210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.date);
10211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;T&apos;</emphasis>);
10212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.time);
10213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.offset)
10214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.offset);
10215 &#32;&#32;&#32;&#32;}
10216 
10217 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10219 &#32;&#32;&#32;&#32;{
10220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;line&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.line);
10222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;,&#32;column&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.column);
10224 &#32;&#32;&#32;&#32;}
10225 
10226 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__region">source_region</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10228 &#32;&#32;&#32;&#32;{
10229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.begin);
10230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.path)
10231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="stringliteral">&quot;&#32;of&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.path);
10234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>.put(<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>);
10235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10236 &#32;&#32;&#32;&#32;}
10237 
10238 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
10239 
10240 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;arr)
10242 &#32;&#32;&#32;&#32;{
10243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;arr&#32;};
10244 &#32;&#32;&#32;&#32;}
10245 
10246 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10247 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl)
10248 &#32;&#32;&#32;&#32;{
10249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;tbl&#32;};
10250 &#32;&#32;&#32;&#32;}
10251 
10252 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10253 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10254 &#32;&#32;&#32;&#32;{
10255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;};
10256 &#32;&#32;&#32;&#32;}
10257 
10258 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10259 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10260 &#32;&#32;&#32;&#32;{
10261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;};
10262 &#32;&#32;&#32;&#32;}
10263 
10264 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10265 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;double&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10266 &#32;&#32;&#32;&#32;{
10267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;};
10268 &#32;&#32;&#32;&#32;}
10269 
10270 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10272 &#32;&#32;&#32;&#32;{
10273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;};
10274 &#32;&#32;&#32;&#32;}
10275 
10276 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10277 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10278 &#32;&#32;&#32;&#32;{
10279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;};
10280 &#32;&#32;&#32;&#32;}
10281 
10282 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10283 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;time&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10284 &#32;&#32;&#32;&#32;{
10285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;};
10286 &#32;&#32;&#32;&#32;}
10287 
10288 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10289 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_print__to__stream_8h_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
10290 &#32;&#32;&#32;&#32;{
10291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;&lt;&lt;&#32;toml_formatter{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;};
10292 &#32;&#32;&#32;&#32;}
10293 
10294 <emphasis role="preprocessor">#endif</emphasis>
10295 }
10296 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
10297 
10298 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
10299 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
10300 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
10301 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
10302 <emphasis role="preprocessor">#endif</emphasis>
10303 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
10304 
10305 <emphasis role="comment">//********&#32;&#32;impl/node.inl&#32;&#32;*********************************************************************************************</emphasis>
10306 
10307 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
10308 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
10309 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
10310 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
10311 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
10312 <emphasis role="preprocessor">#undef&#32;min</emphasis>
10313 <emphasis role="preprocessor">#undef&#32;max</emphasis>
10314 <emphasis role="preprocessor">#endif</emphasis>
10315 
10316 <link linkend="_preprocessor_8h_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
10317 {
10318 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10319 &#32;&#32;&#32;&#32;node::node()&#32;noexcept&#32;=&#32;default;
10320 
10321 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10322 &#32;&#32;&#32;&#32;node::~node()&#32;noexcept&#32;=&#32;default;
10323 
10324 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10325 &#32;&#32;&#32;&#32;node::node(node&#32;&amp;&amp;&#32;other)&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
10326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;source_{&#32;std::exchange(other.source_,&#32;{})&#32;}
10327 &#32;&#32;&#32;&#32;{}
10328 
10329 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10330 &#32;&#32;&#32;&#32;node::node(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<emphasis role="comment">/*other*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
10331 &#32;&#32;&#32;&#32;{
10332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;does&#32;not&#32;copy&#32;source&#32;information&#32;-&#32;this&#32;is&#32;not&#32;an&#32;error</emphasis>
10333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;see&#32;https://github.com/marzer/tomlplusplus/issues/49#issuecomment-665089577</emphasis>
10335 &#32;&#32;&#32;&#32;}
10336 
10337 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10338 &#32;&#32;&#32;&#32;node&amp;&#32;node::operator=(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;<emphasis role="comment">/*rhs*/</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
10339 &#32;&#32;&#32;&#32;{
10340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;does&#32;not&#32;copy&#32;source&#32;information&#32;-&#32;this&#32;is&#32;not&#32;an&#32;error</emphasis>
10341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;see&#32;https://github.com/marzer/tomlplusplus/issues/49#issuecomment-665089577</emphasis>
10343 
10344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_&#32;=&#32;{};
10345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10346 &#32;&#32;&#32;&#32;}
10347 
10348 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10349 &#32;&#32;&#32;&#32;node&amp;&#32;node::operator=(node&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
10350 &#32;&#32;&#32;&#32;{
10351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
10352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_&#32;=&#32;std::exchange(rhs.source_,&#32;{});
10353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10354 &#32;&#32;&#32;&#32;}
10355 
10356 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10357 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;node::at_path(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
10358 &#32;&#32;&#32;&#32;{
10359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classpath">path</link>);
10360 &#32;&#32;&#32;&#32;}
10361 
10362 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10363 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;node::at_path(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
10364 &#32;&#32;&#32;&#32;{
10365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classpath">path</link>);
10366 &#32;&#32;&#32;&#32;}
10367 
10368 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10369 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;node::at_path(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)&#32;<emphasis role="keyword">noexcept</emphasis>
10370 &#32;&#32;&#32;&#32;{
10371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;p);
10372 &#32;&#32;&#32;&#32;}
10373 
10374 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10375 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;node::at_path(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
10376 &#32;&#32;&#32;&#32;{
10377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;p);
10378 &#32;&#32;&#32;&#32;}
10379 
10380 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10381 
10382 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10383 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;node::at_path(std::wstring_view&#32;<link linkend="_classpath">path</link>)
10384 &#32;&#32;&#32;&#32;{
10385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classpath">path</link>);
10386 &#32;&#32;&#32;&#32;}
10387 
10388 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10389 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;node::at_path(std::wstring_view&#32;<link linkend="_classpath">path</link>)<emphasis role="keyword">&#32;const</emphasis>
10390 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
10391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classpath">path</link>);
10392 &#32;&#32;&#32;&#32;}
10393 
10394 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10395 
10396 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10397 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;node::operator[](<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)&#32;<emphasis role="keyword">noexcept</emphasis>
10398 &#32;&#32;&#32;&#32;{
10399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;p);
10400 &#32;&#32;&#32;&#32;}
10401 
10402 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10403 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;node::operator[](<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;p)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
10404 &#32;&#32;&#32;&#32;{
10405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;toml::at_path(*<emphasis role="keyword">this</emphasis>,&#32;p);
10406 &#32;&#32;&#32;&#32;}
10407 }
10408 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
10409 
10410 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
10411 {
10412 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
10413 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10414 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;node_deep_equality(<emphasis role="keyword">const</emphasis>&#32;node*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
10415 &#32;&#32;&#32;&#32;{
10416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;both&#32;same&#32;or&#32;both&#32;null</emphasis>
10417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs&#32;==&#32;rhs)
10418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10419 
10420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lhs&#32;null&#32;!=&#32;rhs&#32;null&#32;or&#32;different&#32;types</emphasis>
10421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((!lhs&#32;!=&#32;!rhs)&#32;||&#32;lhs-&gt;type()&#32;!=&#32;rhs-&gt;type())
10422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10423 
10424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs-&gt;visit(
10425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](<emphasis role="keyword">auto</emphasis>&amp;&#32;l)&#32;<emphasis role="keyword">noexcept</emphasis>
10426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>concrete_type&#32;=&#32;remove_cvref&lt;<emphasis role="keyword">decltype</emphasis>(l)&gt;;
10428 
10429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;l&#32;==&#32;*(rhs-&gt;as&lt;concrete_type&gt;());
10430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
10431 &#32;&#32;&#32;&#32;}
10432 }
10433 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
10434 
10435 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
10436 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
10437 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
10438 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
10439 <emphasis role="preprocessor">#endif</emphasis>
10440 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
10441 
10442 <emphasis role="comment">//********&#32;&#32;impl/at_path.inl&#32;&#32;******************************************************************************************</emphasis>
10443 
10444 <link linkend="_preprocessor_8h_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
10445 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV</emphasis>
10446 <emphasis role="preprocessor">#include&#32;&lt;charconv&gt;</emphasis>
10447 <emphasis role="preprocessor">#else</emphasis>
10448 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
10449 <emphasis role="preprocessor">#endif</emphasis>
10450 <link linkend="_preprocessor_8h_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
10451 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
10452 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
10453 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
10454 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
10455 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
10456 <emphasis role="preprocessor">#undef&#32;min</emphasis>
10457 <emphasis role="preprocessor">#undef&#32;max</emphasis>
10458 <emphasis role="preprocessor">#endif</emphasis>
10459 
10460 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
10461 {
10462 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10463 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8b559ae46e60a5b64d0b3607f8d556c8">parse_path</link>(<emphasis role="keyword">const</emphasis>&#32;std::string_view&#32;<link linkend="_classpath">path</link>,
10464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,
10465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;parse_path_callback&lt;std::string_view&gt;&#32;on_key,
10466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;parse_path_callback&lt;size_t&gt;&#32;on_index)
10467 &#32;&#32;&#32;&#32;{
10468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;blank&#32;string&#32;is&#32;a&#32;valid&#32;path;&#32;it&apos;s&#32;just&#32;one&#32;component&#32;representing&#32;the&#32;&quot;&quot;&#32;key</emphasis>
10469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classpath">path</link>.<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>())
10470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;on_key(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
10471 
10472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
10473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_classpath">path</link>.length();
10474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;prev_was_array_indexer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;prev_was_dot&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;invisible&#32;root&#32;&apos;dot&apos;</emphasis>
10476 
10477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
10478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;start&#32;of&#32;an&#32;array&#32;indexer</emphasis>
10480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classpath">path</link>[pos]&#32;==&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>)
10481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;first&#32;digit&#32;in&#32;index</emphasis>
10483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index_start&#32;=&#32;pos&#32;+&#32;1u;
10484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
10485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(index_start&#32;&gt;=&#32;<link linkend="_classpath">path</link>.length())
10487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>;
10488 
10489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;c&#32;=&#32;<link linkend="_classpath">path</link>[index_start];
10490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;<link linkend="_preprocessor_8h_1a210082555d3fdd90061891a73b546e3d">TOML_LIKELY</link>(c&#32;&gt;=&#32;&apos;0&apos;&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;&apos;9&apos;)
10491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
10492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(c&#32;==&#32;&apos;&#32;&apos;&#32;||&#32;c&#32;==&#32;&apos;\t&apos;)
10493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_start++;
10494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
10495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>;
10496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="_classpath">path</link>[index_start]&#32;&gt;=&#32;&apos;0&apos;);
10498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="_classpath">path</link>[index_start]&#32;&lt;=&#32;&apos;9&apos;);
10499 
10500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;end&#32;of&#32;index&#32;(first&#32;non-digit&#32;character)</emphasis>
10501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;index_end&#32;=&#32;index_start&#32;+&#32;1<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;
10502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
10503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;an&#32;array&#32;indexer&#32;is&#32;missing&#32;the&#32;trailing&#32;&apos;]&apos;&#32;at&#32;the&#32;end&#32;of&#32;the&#32;string,&#32;permissively&#32;accept&#32;it</emphasis>
10505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(index_end&#32;&gt;=&#32;<link linkend="_classpath">path</link>.length())
10506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
10507 
10508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;c&#32;=&#32;<link linkend="_classpath">path</link>[index_end];
10509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(c&#32;&gt;=&#32;&apos;0&apos;&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;&apos;9&apos;)
10510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_end++;
10511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(c&#32;==&#32;&apos;]&apos;&#32;||&#32;c&#32;==&#32;&apos;&#32;&apos;&#32;||&#32;c&#32;==&#32;&apos;\t&apos;&#32;||&#32;c&#32;==&#32;&apos;.&apos;&#32;||&#32;c&#32;==&#32;&apos;[&apos;)
10512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
10513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
10514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>;
10515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="_classpath">path</link>[index_end&#32;-&#32;1<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>]&#32;&gt;=&#32;&apos;0&apos;);
10517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(<link linkend="_classpath">path</link>[index_end&#32;-&#32;1<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>]&#32;&lt;=&#32;&apos;9&apos;);
10518 
10519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move&#32;pos&#32;to&#32;after&#32;indexer&#32;(char&#32;after&#32;closing&#32;&apos;]&apos;&#32;or&#32;permissively&#32;EOL/subkey&#32;&apos;.&apos;/next&#32;opening&#32;&apos;[&apos;)</emphasis>
10520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;=&#32;index_end;
10521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while&#32;(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
10522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(pos&#32;&gt;=&#32;<link linkend="_classpath">path</link>.length())
10524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
10525 
10526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;c&#32;=&#32;<link linkend="_classpath">path</link>[pos];
10527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(c&#32;==&#32;&apos;]&apos;)
10528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
10530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
10531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(c&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>)
10533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
10534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(c&#32;==&#32;&apos;\t&apos;&#32;||&#32;c&#32;==&#32;&apos;&#32;&apos;)
10535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
10536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
10537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>;
10538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10539 
10540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;array&#32;index&#32;substring</emphasis>
10541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;index_str&#32;=&#32;<link linkend="_classpath">path</link>.substr(index_start,&#32;index_end&#32;-&#32;index_start);
10542 
10543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;the&#32;actual&#32;array&#32;index&#32;to&#32;an&#32;integer&#32;type</emphasis>
10544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>;
10545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(index_str.<link linkend="_namespacelength">length</link>()&#32;==&#32;1<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
10546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>&#32;=&#32;static_cast&lt;<emphasis role="keywordtype">size_t</emphasis>&gt;(index_str[0]&#32;-&#32;&apos;0&apos;);
10547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
10548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10549 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV</emphasis>
10550 
10551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;fc_result&#32;=&#32;std::from_chars(index_str.data(),&#32;index_str.data()&#32;+&#32;index_str.length(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
10552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fc_result.ec&#32;!=&#32;std::errc{})
10553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10554 
10555 <emphasis role="preprocessor">#else</emphasis>
10556 
10557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ss;
10558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.imbue(std::locale::classic());
10559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.write(index_str.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(index_str.length()));
10560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(ss&#32;&gt;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>))
10561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10562 
10563 <emphasis role="preprocessor">#endif</emphasis>
10564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10565 
10566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_dot&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_array_indexer&#32;=&#32;<emphasis role="keyword">true</emphasis>;
10568 
10569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!on_index(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>))
10570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10572 
10573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;start&#32;of&#32;a&#32;new&#32;table&#32;child</emphasis>
10574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classpath">path</link>[pos]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)
10575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;dot&#32;immediately&#32;following&#32;another&#32;dot&#32;(or&#32;at&#32;the&#32;beginning&#32;of&#32;the&#32;string)&#32;is&#32;as&#32;if&#32;we&apos;d&#32;asked</emphasis>
10577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;an&#32;empty&#32;child&#32;in&#32;between,&#32;e.g.</emphasis>
10578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;foo..bar</emphasis>
10580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;equivalent&#32;to</emphasis>
10582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&quot;foo&quot;.&quot;&quot;.&quot;bar&quot;</emphasis>
10584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev_was_dot&#32;&amp;&amp;&#32;!on_key(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>))
10586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10587 
10588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
10589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_dot&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
10590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_array_indexer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10592 
10593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;an&#32;errant&#32;closing&#32;&apos;]&apos;</emphasis>
10594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_classpath">path</link>[pos]&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>)
10595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>;
10596 
10597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;regular&#32;subkey</emphasis>
10598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
10599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;subkey_start&#32;=&#32;pos;
10601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;subkey_len&#32;=
10602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::min(<link linkend="_classpath">path</link>.find_first_of(<emphasis role="stringliteral">&quot;.[]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;subkey_start&#32;+&#32;1u),&#32;<link linkend="_classpath">path</link>.length())&#32;-&#32;subkey_start;
10603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;subkey&#32;=&#32;<link linkend="_classpath">path</link>.substr(subkey_start,&#32;subkey_len);
10604 
10605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;regular&#32;subkey&#32;segment&#32;immediately&#32;after&#32;an&#32;array&#32;indexer&#32;is&#32;OK&#32;if&#32;it&#32;was&#32;all&#32;whitespace,&#32;e.g.:</emphasis>
10606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&quot;foo[0]&#32;&#32;.bar&quot;</emphasis>
10608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^^&#32;skip&#32;this</emphasis>
10609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
10610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;its&#32;an&#32;error&#32;(since&#32;it&#32;would&#32;have&#32;to&#32;be&#32;preceeded&#32;by&#32;a&#32;dot)</emphasis>
10611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev_was_array_indexer)
10612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;non_ws&#32;=&#32;subkey.find_first_not_of(<emphasis role="stringliteral">&quot;&#32;\t&quot;</emphasis>);
10614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(non_ws&#32;==&#32;std::string_view::npos)
10615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;subkey_len;
10617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_dot&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_array_indexer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
10620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10624 
10625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;subkey_len;
10626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_dot&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_was_array_indexer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10628 
10629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!on_key(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;subkey))
10630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10633 
10634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Last&#32;character&#32;was&#32;a&#32;&apos;.&apos;,&#32;which&#32;implies&#32;an&#32;empty&#32;string&#32;key&#32;at&#32;the&#32;end&#32;of&#32;the&#32;path</emphasis>
10635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev_was_dot&#32;&amp;&amp;&#32;!on_key(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>))
10636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10637 
10638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10639 &#32;&#32;&#32;&#32;}
10640 }
10641 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
10642 
10643 <link linkend="_preprocessor_8h_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
10644 {
10645 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10646 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
10647 &#32;&#32;&#32;&#32;{
10648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;early-exit&#32;sanity-checks</emphasis>
10649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.is_value())
10650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
10651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_table();&#32;tbl&#32;&amp;&amp;&#32;tbl-&gt;empty())
10652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
10653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_array();&#32;arr&#32;&amp;&amp;&#32;arr-&gt;empty())
10654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
10655 
10656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;current&#32;=&#32;&amp;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>;
10657 
10658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;on_key&#32;=&#32;[](<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>
10659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>node**<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>);
10661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(curr);
10662 
10663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;current_table&#32;=&#32;curr-&gt;as&lt;<link linkend="_classtable">table</link>&gt;();
10664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current_table)
10665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10666 
10667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curr&#32;=&#32;current_table-&gt;<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(key);
10668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;curr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;
10669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10670 
10671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;on_index&#32;=&#32;[](<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>
10672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>node**<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>);
10674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(curr);
10675 
10676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;current_array&#32;=&#32;curr-&gt;as&lt;<link linkend="_classarray">array</link>&gt;();
10677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current_array)
10678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10679 
10680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curr&#32;=&#32;current_array-&gt;<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
10681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;curr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;
10682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10683 
10684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!impl::parse_path(<link linkend="_classpath">path</link>,&#32;&amp;current,&#32;on_key,&#32;on_index))
10685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
10686 
10687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view</link>{&#32;current&#32;};
10688 &#32;&#32;&#32;&#32;}
10689 
10690 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10691 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
10692 &#32;&#32;&#32;&#32;{
10693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const_cast&lt;</emphasis>node&amp;<emphasis role="keyword">&gt;</emphasis>(root),&#32;<link linkend="_classpath">path</link>).node()&#32;};
10694 &#32;&#32;&#32;&#32;}
10695 
10696 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10697 
10698 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10699 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;std::wstring_view&#32;<link linkend="_classpath">path</link>)
10700 &#32;&#32;&#32;&#32;{
10701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;these&#32;are&#32;the&#32;same&#32;top-level&#32;checks&#32;from&#32;the&#32;narrow-string&#32;version;</emphasis>
10702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;they&apos;re&#32;hoisted&#32;up&#32;here&#32;to&#32;avoid&#32;doing&#32;the&#32;wide&#32;-&gt;&#32;narrow&#32;conversion&#32;where&#32;it&#32;would&#32;not&#32;be&#32;necessary</emphasis>
10703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(avoids&#32;an&#32;allocation)</emphasis>
10704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.is_value())
10705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
10706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_table();&#32;tbl&#32;&amp;&amp;&#32;tbl-&gt;empty())
10707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
10708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_array();&#32;arr&#32;&amp;&amp;&#32;arr-&gt;empty())
10709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
10710 
10711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(root,&#32;impl::narrow(<link linkend="_classpath">path</link>));
10712 &#32;&#32;&#32;&#32;}
10713 
10714 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10715 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_group__configuration_1ga2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;std::wstring_view&#32;<link linkend="_classpath">path</link>)
10716 &#32;&#32;&#32;&#32;{
10717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="_at__path_8h_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const_cast&lt;</emphasis>node&amp;<emphasis role="keyword">&gt;</emphasis>(root),&#32;<link linkend="_classpath">path</link>).node()&#32;};
10718 &#32;&#32;&#32;&#32;}
10719 
10720 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10721 }
10722 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
10723 
10724 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
10725 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
10726 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
10727 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
10728 <emphasis role="preprocessor">#endif</emphasis>
10729 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
10730 
10731 <emphasis role="comment">//********&#32;&#32;impl/path.inl&#32;&#32;*********************************************************************************************</emphasis>
10732 
10733 <link linkend="_preprocessor_8h_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
10734 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV</emphasis>
10735 <emphasis role="preprocessor">#include&#32;&lt;charconv&gt;</emphasis>
10736 <emphasis role="preprocessor">#endif</emphasis>
10737 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
10738 <link linkend="_preprocessor_8h_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
10739 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
10740 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
10741 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
10742 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
10743 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
10744 <emphasis role="preprocessor">#undef&#32;min</emphasis>
10745 <emphasis role="preprocessor">#undef&#32;max</emphasis>
10746 <emphasis role="preprocessor">#endif</emphasis>
10747 
10748 <link linkend="_preprocessor_8h_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
10749 {
10750 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10751 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>()&#32;<emphasis role="comment">//</emphasis>
10752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_{&#32;path_component_type::key&#32;}
10753 &#32;&#32;&#32;&#32;{
10754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;value_storage_);
10755 &#32;&#32;&#32;&#32;}
10756 
10757 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10758 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
10759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_(path_component_type::array_index)
10760 &#32;&#32;&#32;&#32;{
10761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>,&#32;value_storage_);
10762 &#32;&#32;&#32;&#32;}
10763 
10764 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10765 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(std::string_view&#32;key)&#32;<emphasis role="comment">//</emphasis>
10766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_(path_component_type::key)
10767 &#32;&#32;&#32;&#32;{
10768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(key,&#32;value_storage_);
10769 &#32;&#32;&#32;&#32;}
10770 
10771 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10772 
10773 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10774 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(std::wstring_view&#32;key)&#32;<emphasis role="comment">//</emphasis>
10775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classpath__component">path_component</link>(impl::narrow(key))
10776 &#32;&#32;&#32;&#32;{}
10777 
10778 <emphasis role="preprocessor">#endif</emphasis>
10779 
10780 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10781 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;pc)&#32;<emphasis role="comment">//</emphasis>
10782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_{&#32;pc.type_&#32;}
10783 &#32;&#32;&#32;&#32;{
10784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
10785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(pc.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>(),&#32;value_storage_);
10786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(pc.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>(),&#32;value_storage_);
10788 &#32;&#32;&#32;&#32;}
10789 
10790 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10791 &#32;&#32;&#32;&#32;<link linkend="_classpath__component_1a04c4df82cb6dc36db572e7a21a1b9819">path_component::path_component</link>(<link linkend="_classpath__component">path_component</link>&#32;&amp;&amp;&#32;pc)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
10792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;type_{&#32;pc.type_&#32;}
10793 &#32;&#32;&#32;&#32;{
10794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
10795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(pc.index_ref(),&#32;value_storage_);
10796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(pc.key_ref()),&#32;value_storage_);
10798 &#32;&#32;&#32;&#32;}
10799 
10800 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10801 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)
10802 &#32;&#32;&#32;&#32;{
10803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;!=&#32;rhs.type_)
10804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
10806 
10807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;rhs.type_;
10808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
10809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>(),&#32;value_storage_);
10810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(rhs.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>(),&#32;value_storage_);
10812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
10816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_ref()&#32;=&#32;rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>();
10817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;rhs.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>();
10819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10821 &#32;&#32;&#32;&#32;}
10822 
10823 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10824 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(<link linkend="_classpath__component">path_component</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
10825 &#32;&#32;&#32;&#32;{
10826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;!=&#32;rhs.type_)
10827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>();
10829 
10830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;rhs.type_;
10831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
10832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>(),&#32;value_storage_);
10833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.key_ref()),&#32;value_storage_);
10835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::array_index)
10839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index_ref()&#32;=&#32;rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>();
10840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.key_ref());
10842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10844 &#32;&#32;&#32;&#32;}
10845 
10846 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
10847 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10848 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;path_component::equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
10849 &#32;&#32;&#32;&#32;{
10850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Different&#32;comparison&#32;depending&#32;on&#32;contents</emphasis>
10851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.type_&#32;!=&#32;rhs.type_)
10852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10853 
10854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.type_&#32;==&#32;path_component_type::array_index)
10855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.index()&#32;==&#32;rhs.<link linkend="_classpath__component_1a89eb0855bfc3761316939641c4b10807">index</link>();
10856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;path_component_type::key</emphasis>
10857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.key()&#32;==&#32;rhs.<link linkend="_classpath__component_1a43675807336b25e9bc5e7b895ecf0dff">key</link>();
10858 &#32;&#32;&#32;&#32;}
10859 
10860 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10861 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_index)&#32;<emphasis role="keyword">noexcept</emphasis>
10862 &#32;&#32;&#32;&#32;{
10863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;currently&#32;a&#32;key,&#32;string&#32;will&#32;need&#32;to&#32;be&#32;destroyed&#32;regardless</emphasis>
10864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>();
10865 
10866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;path_component_type::array_index;
10867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_index(new_index,&#32;value_storage_);
10868 
10869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10870 &#32;&#32;&#32;&#32;}
10871 
10872 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10873 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(std::string_view&#32;new_key)
10874 &#32;&#32;&#32;&#32;{
10875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::key)
10876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;new_key;
10877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;path_component_type::key;
10880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(new_key,&#32;value_storage_);
10881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10882 
10883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10884 &#32;&#32;&#32;&#32;}
10885 
10886 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10887 
10888 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10889 &#32;&#32;&#32;&#32;<link linkend="_classpath__component">path_component</link>&amp;&#32;<link linkend="_classpath__component_1a293a74d51a88f91ccda3105427496a2c">path_component::operator=</link>(std::wstring_view&#32;new_key)
10890 &#32;&#32;&#32;&#32;{
10891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;==&#32;path_component_type::key)
10892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_ref()&#32;=&#32;impl::narrow(new_key);
10893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
10894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;path_component_type::key;
10896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;store_key(impl::narrow(new_key),&#32;value_storage_);
10897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10898 
10899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10900 &#32;&#32;&#32;&#32;}
10901 
10902 <emphasis role="preprocessor">#endif</emphasis>
10903 }
10904 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
10905 
10906 <link linkend="_toml_8hpp_1a492b1349e6331172ea2b6b9b5791ec61">TOML_ANON_NAMESPACE_START</link>
10907 {
10908 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
10909 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_path_into(std::string_view&#32;path_str,&#32;std::vector&lt;path_component&gt;&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>)
10910 &#32;&#32;&#32;&#32;{
10911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>components_type&#32;=&#32;std::remove_reference_t&lt;<emphasis role="keyword">decltype</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>)&gt;;
10912 
10913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;original_size&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>.size();
10914 
10915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;on_key&#32;=&#32;[](<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;std::string_view&#32;key)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>
10916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;comps&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>components_type*<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>);
10918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;comps.emplace_back(key);
10919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10921 
10922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;on_index&#32;=&#32;[](<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>
10923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;comps&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>components_type*<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>);
10925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;comps.emplace_back(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
10926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
10928 
10929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!impl::parse_path(path_str,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>,&#32;on_key,&#32;on_index))
10930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a452b9ab10170c96a9bef2657c036a2c0">components</link>.resize(original_size);
10932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
10933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10934 
10935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
10936 &#32;&#32;&#32;&#32;}
10937 }
10938 <link linkend="_toml_8hpp_1a0385295454ae473a68d194eaffaf597c">TOML_ANON_NAMESPACE_END</link>;
10939 
10940 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
10941 {
10942 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10943 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;path::print_to(std::ostream&#32;&amp;&#32;os)<emphasis role="keyword">&#32;const</emphasis>
10944 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
10945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
10946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;component&#32;:&#32;components_)
10947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(component.type()&#32;==&#32;path_component_type::key)&#32;<emphasis role="comment">//&#32;key</emphasis>
10949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!root)
10951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>);
10952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;component.key());
10953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(component.type()&#32;==&#32;path_component_type::array_index)&#32;<emphasis role="comment">//&#32;array</emphasis>
10955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
10956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>);
10957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;component.index());
10958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::print_to_stream(os,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>);
10959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
10961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
10962 &#32;&#32;&#32;&#32;}
10963 
10964 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
10965 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10966 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;path::equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
10967 &#32;&#32;&#32;&#32;{
10968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.components_&#32;==&#32;rhs.components_;
10969 &#32;&#32;&#32;&#32;}
10970 
10971 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10972 &#32;&#32;&#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path::path</link>(std::string_view&#32;str)&#32;<emphasis role="comment">//</emphasis>
10973 &#32;&#32;&#32;&#32;{
10974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::parse_path_into(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>,&#32;components_);
10975 &#32;&#32;&#32;&#32;}
10976 
10977 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10978 
10979 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10980 &#32;&#32;&#32;&#32;<link linkend="_classpath_1a67032008d5e8b7d05a67eb20688ec27c">path::path</link>(std::wstring_view&#32;str)&#32;<emphasis role="comment">//</emphasis>
10981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classpath">path</link>(impl::narrow(str))
10982 &#32;&#32;&#32;&#32;{}
10983 
10984 <emphasis role="preprocessor">#endif</emphasis>
10985 
10986 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10987 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(std::string_view&#32;rhs)
10988 &#32;&#32;&#32;&#32;{
10989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">clear</link>();
10990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::parse_path_into(rhs,&#32;components_);
10991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
10992 &#32;&#32;&#32;&#32;}
10993 
10994 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
10995 
10996 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
10997 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ae994d06e46e0f0fa99dd861af3695ded">path::operator=</link>(std::wstring_view&#32;rhs)
10998 &#32;&#32;&#32;&#32;{
10999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1ace78199ce6abac6d6476bfb5e09de398">assign</link>(impl::narrow(rhs));
11000 &#32;&#32;&#32;&#32;}
11001 
11002 <emphasis role="preprocessor">#endif</emphasis>
11003 
11004 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11005 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;rhs)
11006 &#32;&#32;&#32;&#32;{
11007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.cend(),&#32;rhs.<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>(),&#32;rhs.<link linkend="_classpath_1a337c19aa6a1a9ea9f505a166038b6e14">end</link>());
11008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11009 &#32;&#32;&#32;&#32;}
11010 
11011 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11012 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(<link linkend="_classpath">path</link>&amp;&amp;&#32;rhs)
11013 &#32;&#32;&#32;&#32;{
11014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.end(),
11015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(rhs.components_.begin()),
11016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(rhs.components_.end()));
11017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11018 &#32;&#32;&#32;&#32;}
11019 
11020 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11021 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(std::string_view&#32;str)
11022 &#32;&#32;&#32;&#32;{
11023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_ANON_NAMESPACE::parse_path_into(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>,&#32;components_);
11024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11025 &#32;&#32;&#32;&#32;}
11026 
11027 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
11028 
11029 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11030 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1ac4088e42d302fc936f17befaf31b13cd">path::operator+=</link>(std::wstring_view&#32;str)
11031 &#32;&#32;&#32;&#32;{
11032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;impl::narrow(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>);
11033 &#32;&#32;&#32;&#32;}
11034 
11035 <emphasis role="preprocessor">#endif</emphasis>
11036 
11037 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11038 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
11039 &#32;&#32;&#32;&#32;{
11040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.end());
11041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11042 &#32;&#32;&#32;&#32;}
11043 
11044 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11045 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(<link linkend="_classpath">path</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
11046 &#32;&#32;&#32;&#32;{
11047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.insert(components_.begin(),
11048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.begin()),
11049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>.components_.end()));
11050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11051 &#32;&#32;&#32;&#32;}
11052 
11053 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11054 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(std::string_view&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
11055 &#32;&#32;&#32;&#32;{
11056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(<link linkend="_classpath">path</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>&#32;});
11057 &#32;&#32;&#32;&#32;}
11058 
11059 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
11060 
11061 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11062 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">path::prepend</link>(std::wstring_view&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)
11063 &#32;&#32;&#32;&#32;{
11064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1aa660d65893eeb1a91dada668633bc6fd">prepend</link>(impl::narrow(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>));
11065 &#32;&#32;&#32;&#32;}
11066 
11067 <emphasis role="preprocessor">#endif</emphasis>
11068 
11069 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11070 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">path::str</link>()<emphasis role="keyword">&#32;const</emphasis>
11071 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classpath_1acab74ce9c17856e48dfaa538d69d5d00">empty</link>())
11073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
11074 
11075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;ss;
11076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_to(ss);
11077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ss).str();
11078 &#32;&#32;&#32;&#32;}
11079 
11080 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
11081 
11082 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11083 &#32;&#32;&#32;&#32;std::wstring&#32;<link linkend="_classpath_1a0927a2cb65d7b1ef4305898276b2ca4a">path::wide_str</link>()<emphasis role="keyword">&#32;const</emphasis>
11084 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::widen(<link linkend="_classpath_1a57d9527113e1c8a12d75f2a56e7d0ae7">str</link>());
11086 &#32;&#32;&#32;&#32;}
11087 
11088 <emphasis role="preprocessor">#endif</emphasis>
11089 
11090 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11091 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classpath_1a0aba473e525c6bd36f429c34eb105de3">path::clear</link>()&#32;noexcept
11092 &#32;&#32;&#32;&#32;{
11093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.clear();
11094 &#32;&#32;&#32;&#32;}
11095 
11096 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11097 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&amp;&#32;<link linkend="_classpath_1a167b26b6e68446fd12e06a6f64dad850">path::truncate</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)
11098 &#32;&#32;&#32;&#32;{
11099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;n&#32;&gt;&#32;components_.<link linkend="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691">size</link>()&#32;?&#32;components_.size()&#32;:&#32;n;
11100 
11101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it_end&#32;=&#32;components_.end();
11102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.erase(it_end&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(n),&#32;it_end);
11103 
11104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11105 &#32;&#32;&#32;&#32;}
11106 
11107 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11108 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba">path::truncated</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)<emphasis role="keyword">&#32;const</emphasis>
11109 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;truncated_path{};
11111 
11112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;n&#32;&gt;&#32;components_.<link linkend="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691">size</link>()&#32;?&#32;components_.size()&#32;:&#32;n;
11113 
11114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;all&#32;components&#32;except&#32;one</emphasis>
11115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Need&#32;at&#32;least&#32;two&#32;path&#32;components&#32;to&#32;have&#32;a&#32;parent,&#32;since&#32;if&#32;there&#32;is</emphasis>
11116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;one&#32;path&#32;component,&#32;the&#32;parent&#32;is&#32;the&#32;root/null&#32;path&#32;&quot;&quot;</emphasis>
11117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;truncated_path.components_.insert(truncated_path.components_.begin(),
11118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.begin(),
11119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.end()&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(n));
11120 
11121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;truncated_path;
11122 &#32;&#32;&#32;&#32;}
11123 
11124 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11125 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1a0e6eb582abfb5ecbc3378f18a581e2a0">path::parent</link>()<emphasis role="keyword">&#32;const</emphasis>
11126 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1a263cf395cbe7c79a04333d80e9b5f7ba">truncated</link>(1);
11128 &#32;&#32;&#32;&#32;}
11129 
11130 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11131 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1acba8ae5b25b11f25ffcc6a30226f98e9">path::leaf</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;n)<emphasis role="keyword">&#32;const</emphasis>
11132 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;leaf_path{};
11134 
11135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;n&#32;&gt;&#32;components_.<link linkend="_classpath_1a4c5fe971603ea9fd3107ca14e9c60691">size</link>()&#32;?&#32;components_.size()&#32;:&#32;n;
11136 
11137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;&gt;&#32;0)
11138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;leaf_path.components_.insert(leaf_path.components_.begin(),
11140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.end()&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(n),
11141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;components_.end());
11142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11143 
11144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;leaf_path;
11145 &#32;&#32;&#32;&#32;}
11146 
11147 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11148 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">path::subpath</link>(std::vector&lt;path_component&gt;::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,
11149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;path_component&gt;::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)<emphasis role="keyword">&#32;const</emphasis>
11150 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
11152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
11153 
11154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>;
11155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>.components_.insert(<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>.components_.begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>);
11156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>;
11157 &#32;&#32;&#32;&#32;}
11158 
11159 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11160 &#32;&#32;&#32;&#32;<link linkend="_classpath">path</link>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">path::subpath</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>)<emphasis role="keyword">&#32;const</emphasis>
11161 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
11162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classpath_1af550d277cd6628ce830315fd95c2ee18">subpath</link>(<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>),&#32;<link linkend="_classpath_1a82d976c5118224f5c69f543a4f32af38">begin</link>()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;+&#32;<link linkend="_namespacelength">length</link>));
11163 &#32;&#32;&#32;&#32;}
11164 }
11165 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
11166 
11167 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
11168 {
11169 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11170 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(node&#32;&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
11171 &#32;&#32;&#32;&#32;{
11172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;early-exit&#32;sanity-checks</emphasis>
11173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.is_value())
11174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
11175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_table();&#32;tbl&#32;&amp;&amp;&#32;tbl-&gt;empty())
11176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
11177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>.as_array();&#32;arr&#32;&amp;&amp;&#32;arr-&gt;empty())
11178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
11179 
11180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;current&#32;=&#32;&amp;<link linkend="_namespaceversion_1ab64fdd4f88cc81edfc86738fbae8bb9a">root</link>;
11181 
11182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;component&#32;:&#32;<link linkend="_classpath">path</link>)
11183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;component.type();
11185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;path_component_type::array_index)
11186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;current_array&#32;=&#32;current-&gt;as&lt;<link linkend="_classarray">array</link>&gt;();
11188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current_array)
11189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;<emphasis role="comment">//&#32;not&#32;an&#32;array,&#32;using&#32;array&#32;index&#32;doesn&apos;t&#32;work</emphasis>
11190 
11191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current_array-&gt;<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>(component.index());
11192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;path_component_type::key)
11194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;current_table&#32;=&#32;current-&gt;as&lt;<link linkend="_classtable">table</link>&gt;();
11196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current_table)
11197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
11198 
11199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current_table-&gt;<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">get</link>(component.key());
11200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error:&#32;invalid&#32;component</emphasis>
11204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
11205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11206 
11207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!current)
11208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;<emphasis role="comment">//&#32;not&#32;found</emphasis>
11209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11210 
11211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view</link>{&#32;current&#32;};
11212 &#32;&#32;&#32;&#32;}
11213 
11214 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11215 &#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
11216 &#32;&#32;&#32;&#32;{
11217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{&#32;<link linkend="_toml_8hpp_1a8fd45f603d445b914dc921213e6f2dc0">at_path</link>(<emphasis role="keyword">const_cast&lt;</emphasis>node&amp;<emphasis role="keyword">&gt;</emphasis>(root),&#32;<link linkend="_classpath">path</link>).node()&#32;};
11218 &#32;&#32;&#32;&#32;}
11219 }
11220 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
11221 
11222 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
11223 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
11224 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
11225 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
11226 <emphasis role="preprocessor">#endif</emphasis>
11227 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
11228 
11229 <emphasis role="comment">//********&#32;&#32;impl/array.inl&#32;&#32;********************************************************************************************</emphasis>
11230 
11231 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
11232 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
11233 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
11234 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
11235 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
11236 <emphasis role="preprocessor">#undef&#32;min</emphasis>
11237 <emphasis role="preprocessor">#undef&#32;max</emphasis>
11238 <emphasis role="preprocessor">#endif</emphasis>
11239 
11240 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
11241 {
11242 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11243 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>()&#32;noexcept
11244 &#32;&#32;&#32;&#32;{
11245 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
11247 <emphasis role="preprocessor">#endif</emphasis>
11248 &#32;&#32;&#32;&#32;}
11249 
11250 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11251 &#32;&#32;&#32;&#32;<link linkend="_classarray_1a1d7469751b7a1f350f5a4e6561f67dd2">array::~array</link>()&#32;noexcept
11252 &#32;&#32;&#32;&#32;{
11253 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1aa202f036c1241739881c3910dcd659d0">TOML_ARRAY_DESTROYED</link>;
11255 <emphasis role="preprocessor">#endif</emphasis>
11256 &#32;&#32;&#32;&#32;}
11257 
11258 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11259 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>(<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;impl::array_init_elem*&#32;e)
11260 &#32;&#32;&#32;&#32;{
11261 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
11263 <emphasis role="preprocessor">#endif</emphasis>
11264 
11265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
11266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(e);
11267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;&lt;=&#32;e);
11268 
11269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;==&#32;e)
11270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
11271 
11272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>{};
11273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;&#32;it&#32;!=&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>;&#32;it++)
11274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it-&gt;value)
11276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>++;
11277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>)
11279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
11280 
11281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>);
11282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;!=&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>++)
11283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>-&gt;value)
11285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>-&gt;value));
11286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11287 &#32;&#32;&#32;&#32;}
11288 
11289 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11290 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;other)&#32;<emphasis role="comment">//</emphasis>
11291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(other)
11292 &#32;&#32;&#32;&#32;{
11293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(other.elems_.size());
11294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;other)
11295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.emplace_back(impl::<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(elem));
11296 
11297 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
11299 <emphasis role="preprocessor">#endif</emphasis>
11300 &#32;&#32;&#32;&#32;}
11301 
11302 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11303 &#32;&#32;&#32;&#32;<link linkend="_classarray_1ae461d55c88baa4edfc9ae21a33234edb">array::array</link>(<link linkend="_classarray">array</link>&#32;&amp;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
11304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other)),
11305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.elems_))
11306 &#32;&#32;&#32;&#32;{
11307 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a77af8d51acf7fb2a86045b3f89cce670">TOML_ARRAY_CREATED</link>;
11309 <emphasis role="preprocessor">#endif</emphasis>
11310 &#32;&#32;&#32;&#32;}
11311 
11312 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11313 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">array::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)
11314 &#32;&#32;&#32;&#32;{
11315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
11316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(rhs);
11318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.clear();
11319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(rhs.elems_.size());
11320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;rhs)
11321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.<link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back</link>(impl::<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(elem));
11322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11324 &#32;&#32;&#32;&#32;}
11325 
11326 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11327 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a1e8c1ad2f0705c91a9722ed61024aefb">array::operator=</link>(<link linkend="_classarray">array</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
11328 &#32;&#32;&#32;&#32;{
11329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
11330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs));
11332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.elems_);
11333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11335 &#32;&#32;&#32;&#32;}
11336 
11337 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11338 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;array::preinsertion_resize(<emphasis role="keywordtype">size_t</emphasis>&#32;idx,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>)
11339 &#32;&#32;&#32;&#32;{
11340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(idx&#32;&lt;=&#32;elems_.size());
11341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;&gt;=&#32;1u);
11342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;old_size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;elems_.size();
11343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;new_size&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;old_size&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>;
11344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;inserting_at_end&#32;=&#32;idx&#32;==&#32;old_size;
11345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.resize(new_size);
11346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!inserting_at_end)
11347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;left&#32;=&#32;old_size,&#32;right&#32;=&#32;new_size&#32;-&#32;1u;&#32;left--&#32;&gt;&#32;idx;&#32;right--)
11349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[right]&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elems_[left]);
11350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11351 &#32;&#32;&#32;&#32;}
11352 
11353 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11354 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;array::insert_at_back(impl::node_ptr&#32;&amp;&amp;&#32;elem)
11355 &#32;&#32;&#32;&#32;{
11356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(elem);
11357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elem));
11358 &#32;&#32;&#32;&#32;}
11359 
11360 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11361 &#32;&#32;&#32;&#32;array::vector_iterator&#32;array::insert_at(const_vector_iterator&#32;pos,&#32;impl::node_ptr&#32;&amp;&amp;&#32;elem)
11362 &#32;&#32;&#32;&#32;{
11363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;elems_.insert(pos,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elem));
11364 &#32;&#32;&#32;&#32;}
11365 
11366 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11367 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11368 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">array::is_homogeneous</link>(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
11369 &#32;&#32;&#32;&#32;{
11370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
11371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11372 
11373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;==&#32;node_type::none)
11374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ntype&#32;=&#32;elems_[0]-&gt;type();
11375 
11376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;:&#32;elems_)
11377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>()&#32;!=&#32;ntype)
11378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>;
11379 
11380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11381 &#32;&#32;&#32;&#32;}
11382 
11383 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11384 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11385 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">array::is_homogeneous</link>(node_type&#32;ntype,&#32;node&#32;*&#32;&amp;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>
11386 &#32;&#32;&#32;&#32;{
11387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
11388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;{};
11390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;==&#32;node_type::none)
11393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ntype&#32;=&#32;elems_[0]-&gt;type();
11394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;:&#32;elems_)
11395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;type()&#32;!=&#32;ntype)
11397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.get();
11399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11403 &#32;&#32;&#32;&#32;}
11404 
11405 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11406 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11407 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classarray_1a0f6a36df19a4ea52d2dada6359e59024">array::is_homogeneous</link>(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
11408 &#32;&#32;&#32;&#32;{
11409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;fnm&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
11410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classarray">array</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classarray_1ac515de2b5c9aeebd65b046191fe53c20">is_homogeneous</link>(ntype,&#32;fnm);
11411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;&#32;&#32;&#32;=&#32;fnm;
11412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
11413 &#32;&#32;&#32;&#32;}
11414 
11415 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11416 &#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classarray_1a68878b9acb36940fbd8aa1177110cda1">array::at</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>)
11417 &#32;&#32;&#32;&#32;{
11418 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
11419 
11420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*elems_.at(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
11421 
11422 <emphasis role="preprocessor">#else</emphasis>
11423 
11424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a57f14e05b1900f16a2da82ade47d0c6d">index</link>);
11425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(n&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;element&#32;index&#32;not&#32;found&#32;in&#32;array!&quot;</emphasis>);
11426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*n;
11427 
11428 <emphasis role="preprocessor">#endif</emphasis>
11429 &#32;&#32;&#32;&#32;}
11430 
11431 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11432 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1">array::reserve</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_capacity)
11433 &#32;&#32;&#32;&#32;{
11434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(new_capacity);
11435 &#32;&#32;&#32;&#32;}
11436 
11437 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11438 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1ae420782d223545646c2f76a0f557bf1d">array::shrink_to_fit</link>()
11439 &#32;&#32;&#32;&#32;{
11440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.shrink_to_fit();
11441 &#32;&#32;&#32;&#32;}
11442 
11443 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11444 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a8f0452eded5f124b52b5b31ecfe3ca22">array::truncate</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;new_size)
11445 &#32;&#32;&#32;&#32;{
11446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(new_size&#32;&lt;&#32;elems_.size())
11447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.resize(new_size);
11448 &#32;&#32;&#32;&#32;}
11449 
11450 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11451 &#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">array::iterator</link>&#32;<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">array::erase</link>(const_iterator&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
11452 &#32;&#32;&#32;&#32;{
11453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{&#32;elems_.erase(const_vector_iterator{&#32;pos&#32;})&#32;};
11454 &#32;&#32;&#32;&#32;}
11455 
11456 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11457 &#32;&#32;&#32;&#32;<link linkend="_classarray_1adc01054d5dfc4deee603ecaf9dfab71a">array::iterator</link>&#32;<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">array::erase</link>(const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;const_iterator&#32;last)&#32;<emphasis role="keyword">noexcept</emphasis>
11458 &#32;&#32;&#32;&#32;{
11459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{&#32;elems_.erase(const_vector_iterator{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;},&#32;const_vector_iterator{&#32;last&#32;})&#32;};
11460 &#32;&#32;&#32;&#32;}
11461 
11462 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11463 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;array::total_leaf_count()&#32;const&#32;noexcept
11464 &#32;&#32;&#32;&#32;{
11465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;leaves{};
11466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;elems_.size();&#32;i&#32;&lt;&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>;&#32;i++)
11467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;as_array();
11469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;leaves&#32;+=&#32;arr&#32;?&#32;arr-&gt;total_leaf_count()&#32;:&#32;<emphasis role="keywordtype">size_t</emphasis>{&#32;1&#32;};
11470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;leaves;
11472 &#32;&#32;&#32;&#32;}
11473 
11474 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11475 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;array::flatten_child(<link linkend="_classarray">array</link>&#32;&amp;&amp;&#32;child,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&amp;&#32;dest_index)&#32;<emphasis role="keyword">noexcept</emphasis>
11476 &#32;&#32;&#32;&#32;{
11477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;child.size();&#32;i&#32;&lt;&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>;&#32;i++)
11478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;child.elems_[i]-&gt;type();
11480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;node_type::array)
11481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;arr&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(child.elems_[i].get());
11483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr.<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>())
11484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flatten_child(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(arr),&#32;dest_index);
11485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_[dest_index++]&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(child.elems_[i]);
11488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11489 &#32;&#32;&#32;&#32;}
11490 
11491 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11492 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1ad02eb6d4631b38d436733d693773eed0">array::flatten</link>()&amp;
11493 &#32;&#32;&#32;&#32;{
11494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
11495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11496 
11497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;requires_flattening&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
11498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size_after_flattening&#32;=&#32;elems_.<link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link>();
11499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;elems_.size();&#32;i--&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;)
11500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;<link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link>();
11502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr)
11503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_after_flattening--;&#32;<emphasis role="comment">//&#32;discount&#32;the&#32;array&#32;itself</emphasis>
11505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;leaf_count&#32;=&#32;arr-&gt;total_leaf_count();
11506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(leaf_count&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
11507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;requires_flattening&#32;=&#32;<emphasis role="keyword">true</emphasis>;
11509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_after_flattening&#32;+=&#32;leaf_count;
11510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
11512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.erase(elems_.cbegin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(i));
11513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11514 
11515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!requires_flattening)
11516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11517 
11518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.reserve(size_after_flattening);
11519 
11520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;
11521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;elems_.size())
11522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;<link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link>();
11524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr)
11525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
11527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11529 
11530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::node_ptr&#32;arr_storage&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(elems_[i]);
11531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;leaf_count&#32;&#32;&#32;&#32;&#32;&#32;=&#32;arr-&gt;total_leaf_count();
11532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(leaf_count&#32;&gt;&#32;1u)
11533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preinsertion_resize(i&#32;+&#32;1u,&#32;leaf_count&#32;-&#32;1u);
11534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flatten_child(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*arr),&#32;i);&#32;<emphasis role="comment">//&#32;increments&#32;i</emphasis>
11535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11536 
11537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11538 &#32;&#32;&#32;&#32;}
11539 
11540 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11541 &#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;<link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">array::prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive)&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
11542 &#32;&#32;&#32;&#32;{
11543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elems_.empty())
11544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11545 
11546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;elems_.size();&#32;i--&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;)
11547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;elems_[i]-&gt;as_array())
11549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recursive)
11551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr-&gt;<link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">prune</link>(<emphasis role="keyword">true</emphasis>);
11552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr-&gt;<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>())
11553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">erase</link>(elems_.cbegin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(i));
11554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;elems_[i]-&gt;as_table())
11556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recursive)
11558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl-&gt;prune(<emphasis role="keyword">true</emphasis>);
11559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl-&gt;empty())
11560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.erase(elems_.cbegin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(i));
11561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11563 
11564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11565 &#32;&#32;&#32;&#32;}
11566 
11567 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11568 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a6327207c728cef7a8b406684ee85b66d">array::pop_back</link>()&#32;noexcept
11569 &#32;&#32;&#32;&#32;{
11570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.pop_back();
11571 &#32;&#32;&#32;&#32;}
11572 
11573 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11574 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classarray_1a6e618e14b5f8c217bc593837bb3dbeb8">array::clear</link>()&#32;noexcept
11575 &#32;&#32;&#32;&#32;{
11576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elems_.clear();
11577 &#32;&#32;&#32;&#32;}
11578 
11579 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11580 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;array::equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
11581 &#32;&#32;&#32;&#32;{
11582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;lhs&#32;==&#32;&amp;rhs)
11583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.elems_.size()&#32;!=&#32;rhs.elems_.size())
11585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;lhs.elems_.size();&#32;i&#32;&lt;&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>;&#32;i++)
11587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_type&#32;=&#32;lhs.elems_[i]-&gt;type();
11589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;rhs_&#32;&#32;&#32;&#32;=&#32;*rhs.elems_[i];
11590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_type&#32;=&#32;rhs_.type();
11591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;!=&#32;rhs_type)
11592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11593 
11594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>&#32;=&#32;lhs.elems_[i]-&gt;visit(
11595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;lhs_)&#32;<emphasis role="keyword">noexcept</emphasis>
11596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs_&#32;==&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::remove_reference_t&lt;decltype(lhs_)<emphasis role="keyword">&gt;</emphasis>*&gt;(&amp;rhs_);&#32;});
11597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!equal)
11598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11601 &#32;&#32;&#32;&#32;}
11602 }
11603 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
11604 
11605 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
11606 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
11607 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
11608 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
11609 <emphasis role="preprocessor">#endif</emphasis>
11610 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
11611 
11612 <emphasis role="comment">//********&#32;&#32;impl/table.inl&#32;&#32;********************************************************************************************</emphasis>
11613 
11614 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
11615 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
11616 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
11617 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
11618 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
11619 <emphasis role="preprocessor">#undef&#32;min</emphasis>
11620 <emphasis role="preprocessor">#undef&#32;max</emphasis>
11621 <emphasis role="preprocessor">#endif</emphasis>
11622 
11623 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
11624 {
11625 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11626 &#32;&#32;&#32;&#32;<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table::table</link>()&#32;noexcept
11627 &#32;&#32;&#32;&#32;{
11628 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a63080247234b01d8dede9852ff737900">TOML_TABLE_CREATED</link>;
11630 <emphasis role="preprocessor">#endif</emphasis>
11631 &#32;&#32;&#32;&#32;}
11632 
11633 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11634 &#32;&#32;&#32;&#32;<link linkend="_classtable_1a7af51d696f375eae4ca68ede19225796">table::~table</link>()&#32;noexcept
11635 &#32;&#32;&#32;&#32;{
11636 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a466845615db4e81f310c8a57fe535c3b">TOML_TABLE_DESTROYED</link>;
11638 <emphasis role="preprocessor">#endif</emphasis>
11639 &#32;&#32;&#32;&#32;}
11640 
11641 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11642 &#32;&#32;&#32;&#32;<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table::table</link>(<emphasis role="keyword">const</emphasis>&#32;impl::table_init_pair*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;impl::table_init_pair*&#32;e)
11643 &#32;&#32;&#32;&#32;{
11644 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a63080247234b01d8dede9852ff737900">TOML_TABLE_CREATED</link>;
11646 <emphasis role="preprocessor">#endif</emphasis>
11647 
11648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
11649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(e);
11650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;&lt;=&#32;e);
11651 
11652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;==&#32;e)
11653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
11654 
11655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;!=&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>++)
11656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>-&gt;value)&#32;<emphasis role="comment">//&#32;empty&#32;node_views</emphasis>
11658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11659 
11660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_.insert_or_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>-&gt;key),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>-&gt;value));
11661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11662 &#32;&#32;&#32;&#32;}
11663 
11664 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11665 &#32;&#32;&#32;&#32;<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table::table</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;other)&#32;<emphasis role="comment">//</emphasis>
11666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(other),
11667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline_{&#32;other.inline_&#32;}
11668 &#32;&#32;&#32;&#32;{
11669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;other.map_)
11670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_.emplace_hint(map_.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;k,&#32;impl::<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
11671 
11672 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a63080247234b01d8dede9852ff737900">TOML_TABLE_CREATED</link>;
11674 <emphasis role="preprocessor">#endif</emphasis>
11675 &#32;&#32;&#32;&#32;}
11676 
11677 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11678 &#32;&#32;&#32;&#32;<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table::table</link>(<link linkend="_classtable">table</link>&#32;&amp;&amp;&#32;other)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
11679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other)),
11680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(other.map_)&#32;},
11681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline_{&#32;other.inline_&#32;}
11682 &#32;&#32;&#32;&#32;{
11683 <emphasis role="preprocessor">#if&#32;TOML_LIFETIME_HOOKS</emphasis>
11684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_leakproof_8h_1a63080247234b01d8dede9852ff737900">TOML_TABLE_CREATED</link>;
11685 <emphasis role="preprocessor">#endif</emphasis>
11686 &#32;&#32;&#32;&#32;}
11687 
11688 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11689 &#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a6f963a302ec0f592701775c95c1df1e3">table::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)
11690 &#32;&#32;&#32;&#32;{
11691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
11692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(rhs);
11694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_.clear();
11695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;rhs.map_)
11696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_.emplace_hint(map_.<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;k,&#32;impl::<link linkend="_toml_8hpp_1a42b4a4b2210e5fb851ab38730940293c">make_node</link>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
11697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline_&#32;=&#32;rhs.inline_;
11698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11700 &#32;&#32;&#32;&#32;}
11701 
11702 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11703 &#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a6f963a302ec0f592701775c95c1df1e3">table::operator=</link>(<link linkend="_classtable">table</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
11704 &#32;&#32;&#32;&#32;{
11705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;rhs&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
11706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node::operator=(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs));
11708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs.map_);
11709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline_&#32;=&#32;rhs.inline_;
11710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11712 &#32;&#32;&#32;&#32;}
11713 
11714 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11715 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11716 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a57a2f14d20387ea2d9abed242cd3043d">table::is_homogeneous</link>(node_type&#32;ntype)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
11717 &#32;&#32;&#32;&#32;{
11718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(map_.empty())
11719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11720 
11721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;==&#32;node_type::none)
11722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ntype&#32;=&#32;map_.cbegin()-&gt;second-&gt;type();
11723 
11724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;map_)
11725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05802eb834f167bd8a151e82492b8866">TOML_UNUSED</link>(k);
11727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>-&gt;type()&#32;!=&#32;ntype)
11728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11730 
11731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11732 &#32;&#32;&#32;&#32;}
11733 
11734 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11735 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11736 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a57a2f14d20387ea2d9abed242cd3043d">table::is_homogeneous</link>(node_type&#32;ntype,&#32;node&#32;*&#32;&amp;first_nonmatch)&#32;<emphasis role="keyword">noexcept</emphasis>
11737 &#32;&#32;&#32;&#32;{
11738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(map_.empty())
11739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;{};
11741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ntype&#32;==&#32;node_type::none)
11744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ntype&#32;=&#32;map_.cbegin()-&gt;second-&gt;type();
11745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;map_)
11746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05802eb834f167bd8a151e82492b8866">TOML_UNUSED</link>(k);
11748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>-&gt;type()&#32;!=&#32;ntype)
11749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.get();
11751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11755 &#32;&#32;&#32;&#32;}
11756 
11757 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11758 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11759 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classtable_1a57a2f14d20387ea2d9abed242cd3043d">table::is_homogeneous</link>(node_type&#32;ntype,&#32;<emphasis role="keyword">const</emphasis>&#32;node*&amp;&#32;first_nonmatch)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
11760 &#32;&#32;&#32;&#32;{
11761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;fnm&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
11762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classtable">table</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).<link linkend="_classtable_1a6cbade52106ece3ab27feda3f4d58110">is_homogeneous</link>(ntype,&#32;fnm);
11763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_nonmatch&#32;&#32;&#32;&#32;=&#32;fnm;
11764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
11765 &#32;&#32;&#32;&#32;}
11766 
11767 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11768 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11769 &#32;&#32;&#32;&#32;node*&#32;<link linkend="_classtable_1a3a338dc69074b9f155ca52f044ef0b07">table::get</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
11770 &#32;&#32;&#32;&#32;{
11771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;map_.find(key);&#32;it&#32;!=&#32;map_.end())
11772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;it-&gt;second.get();
11773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
11774 &#32;&#32;&#32;&#32;}
11775 
11776 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11777 &#32;&#32;&#32;&#32;node&amp;&#32;<link linkend="_classtable_1a0a56f283072073b872d15bb91889ede5">table::at</link>(std::string_view&#32;key)
11778 &#32;&#32;&#32;&#32;{
11779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;n&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>);
11780 
11781 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
11782 
11783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!n)
11784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;err&#32;=&#32;<emphasis role="stringliteral">&quot;key&#32;&apos;&quot;</emphasis>s;
11786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err.append(<link linkend="_classtable_1a93f2c5bdc6079be238e168fc144ec13a">key</link>);
11787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err.append(<emphasis role="stringliteral">&quot;&apos;&#32;not&#32;found&#32;in&#32;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
11788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::out_of_range{&#32;err&#32;};
11789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11790 
11791 <emphasis role="preprocessor">#else</emphasis>
11792 
11793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(n&#32;&amp;&amp;&#32;<emphasis role="stringliteral">&quot;key&#32;not&#32;found&#32;in&#32;table!&quot;</emphasis>);
11794 
11795 <emphasis role="preprocessor">#endif</emphasis>
11796 
11797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*n;
11798 &#32;&#32;&#32;&#32;}
11799 
11800 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11801 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11802 &#32;&#32;&#32;&#32;table::map_iterator&#32;table::get_lower_bound(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
11803 &#32;&#32;&#32;&#32;{
11804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.lower_bound(key);
11805 &#32;&#32;&#32;&#32;}
11806 
11807 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11808 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11809 &#32;&#32;&#32;&#32;<link linkend="_classtable_1afea247dbb72228a422b110d4bd5805a4">table::iterator</link>&#32;<link linkend="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8">table::find</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
11810 &#32;&#32;&#32;&#32;{
11811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator{&#32;map_.find(key)&#32;};
11812 &#32;&#32;&#32;&#32;}
11813 
11814 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11815 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11816 &#32;&#32;&#32;&#32;<link linkend="_classtable_1a5b18db2aaca1aae0f43a8ae15005e754">table::const_iterator</link>&#32;<link linkend="_classtable_1a87d7ec24b1659977c450a25d39e0c2e8">table::find</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
11817 &#32;&#32;&#32;&#32;{
11818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator{&#32;map_.find(key)&#32;};
11819 &#32;&#32;&#32;&#32;}
11820 
11821 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11822 &#32;&#32;&#32;&#32;table::map_iterator&#32;<link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">table::erase</link>(const_map_iterator&#32;pos)&#32;<emphasis role="keyword">noexcept</emphasis>
11823 &#32;&#32;&#32;&#32;{
11824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.erase(pos);
11825 &#32;&#32;&#32;&#32;}
11826 
11827 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11828 &#32;&#32;&#32;&#32;table::map_iterator&#32;<link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">table::erase</link>(const_map_iterator&#32;begin,&#32;const_map_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
11829 &#32;&#32;&#32;&#32;{
11830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.erase(begin,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>);
11831 &#32;&#32;&#32;&#32;}
11832 
11833 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11834 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">table::erase</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
11835 &#32;&#32;&#32;&#32;{
11836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;map_.find(key);&#32;it&#32;!=&#32;map_.end())
11837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_.erase(it);
11839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>{&#32;1&#32;};
11840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>{};
11842 &#32;&#32;&#32;&#32;}
11843 
11844 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11845 &#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;<link linkend="_classtable_1a03364a6c3763fac7c731183ae810a319">table::prune</link>(<emphasis role="keywordtype">bool</emphasis>&#32;recursive)&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
11846 &#32;&#32;&#32;&#32;{
11847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(map_.empty())
11848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11849 
11850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;it&#32;=&#32;map_.begin();&#32;it&#32;!=&#32;map_.end();)
11851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;it-&gt;second-&gt;as_array())
11853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recursive)
11855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr-&gt;<link linkend="_classarray_1a6dda9e6ee37dad724f39b2f46ae72f39">prune</link>(<emphasis role="keyword">true</emphasis>);
11856 
11857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr-&gt;<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>())
11858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;map_.<link linkend="_classarray_1a546d26becf24ade8e2fea51275e076c0">erase</link>(it);
11860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;it-&gt;second-&gt;as_table())
11864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recursive)
11866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl-&gt;prune(<emphasis role="keyword">true</emphasis>);
11867 
11868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl-&gt;empty())
11869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;=&#32;map_.erase(it);
11871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
11872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it++;
11875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11876 
11877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
11878 &#32;&#32;&#32;&#32;}
11879 
11880 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11881 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classtable_1a6248c10022c6cd670f045cda74cb1cbe">table::clear</link>()&#32;noexcept
11882 &#32;&#32;&#32;&#32;{
11883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;map_.clear();
11884 &#32;&#32;&#32;&#32;}
11885 
11886 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11887 &#32;&#32;&#32;&#32;table::map_iterator&#32;table::insert_with_hint(const_iterator&#32;hint,&#32;key&#32;&amp;&amp;&#32;k,&#32;impl::node_ptr&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
11888 &#32;&#32;&#32;&#32;{
11889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;map_.emplace_hint(const_map_iterator{&#32;hint&#32;},&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(k),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
11890 &#32;&#32;&#32;&#32;}
11891 
11892 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11893 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11894 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;table::equal(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
11895 &#32;&#32;&#32;&#32;{
11896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;lhs&#32;==&#32;&amp;rhs)
11897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs.map_.size()&#32;!=&#32;rhs.map_.size())
11899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11900 
11901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;l&#32;=&#32;lhs.map_.begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>&#32;=&#32;rhs.map_.begin(),&#32;e&#32;=&#32;lhs.map_.end();&#32;l&#32;!=&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>;&#32;l++,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>++)
11902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l-&gt;first&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>-&gt;first)
11904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11905 
11906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;lhs_type&#32;=&#32;l-&gt;second-&gt;type();
11907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;rhs_&#32;&#32;&#32;&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>-&gt;second;
11908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;rhs_type&#32;=&#32;rhs_.type();
11909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lhs_type&#32;!=&#32;rhs_type)
11910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11911 
11912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>&#32;=&#32;l-&gt;second-&gt;visit(
11913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;lhs_)&#32;<emphasis role="keyword">noexcept</emphasis>
11914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs_&#32;==&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::remove_reference_t&lt;decltype(lhs_)<emphasis role="keyword">&gt;</emphasis>*&gt;(&amp;rhs_);&#32;});
11915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!equal)
11916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
11919 &#32;&#32;&#32;&#32;}
11920 }
11921 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
11922 
11923 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
11924 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
11925 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
11926 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
11927 <emphasis role="preprocessor">#endif</emphasis>
11928 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
11929 
11930 <emphasis role="comment">//********&#32;&#32;impl/simd.h&#32;&#32;***********************************************************************************************</emphasis>
11931 
11932 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_SIMD</emphasis>
11933 
11934 <emphasis role="preprocessor">#if&#32;definedemphasis>
11935 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;(defined(_MSC_VER)&#32;&amp;&amp;&#32;(defined(_M_AMD64)&#32;||&#32;defined(_M_X64)&#32;||&#32;(defined(_M_IX86_FP)&#32;&amp;&amp;&#32;_M_IX86_FP&#32;&gt;=&#32;2)))</emphasis>
11936 <emphasis role="preprocessor">#define&#32;TOML_HAS_SSE2&#32;1</emphasis>
11937 <emphasis role="preprocessor">#endif</emphasis>
11938 
11939 <emphasis role="preprocessor">#if&#32;defined(__SSE4_1__)&#32;||&#32;(defined(_MSC_VER)&#32;&amp;&amp;&#32;(defined(__AVX__)&#32;||&#32;defined(__AVX2__)))</emphasis>
11940 <emphasis role="preprocessor">#define&#32;TOML_HAS_SSE4_1&#32;1</emphasis>
11941 <emphasis role="preprocessor">#endif</emphasis>
11942 
11943 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_SIMD</emphasis>
11944 
11945 <emphasis role="preprocessor">#ifndef&#32;TOML_HAS_SSE2</emphasis>
11946 <emphasis role="preprocessor">#define&#32;TOML_HAS_SSE2&#32;0</emphasis>
11947 <emphasis role="preprocessor">#endif</emphasis>
11948 <emphasis role="preprocessor">#ifndef&#32;TOML_HAS_SSE4_1</emphasis>
11949 <emphasis role="preprocessor">#define&#32;TOML_HAS_SSE4_1&#32;0</emphasis>
11950 <emphasis role="preprocessor">#endif</emphasis>
11951 
11952 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
11953 <emphasis role="preprocessor">#if&#32;TOML_HAS_SSE4_1</emphasis>
11954 <emphasis role="preprocessor">#include&#32;&lt;smmintrin.h&gt;</emphasis>
11955 <emphasis role="preprocessor">#endif</emphasis>
11956 <emphasis role="preprocessor">#if&#32;TOML_HAS_SSE2</emphasis>
11957 <emphasis role="preprocessor">#include&#32;&lt;emmintrin.h&gt;</emphasis>
11958 <emphasis role="preprocessor">#endif</emphasis>
11959 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
11960 
11961 <emphasis role="comment">//********&#32;&#32;impl/unicode.inl&#32;&#32;******************************************************************************************</emphasis>
11962 
11963 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
11964 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
11965 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
11966 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
11967 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
11968 <emphasis role="preprocessor">#undef&#32;min</emphasis>
11969 <emphasis role="preprocessor">#undef&#32;max</emphasis>
11970 <emphasis role="preprocessor">#endif</emphasis>
11971 
11972 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
11973 {
11974 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
11975 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
11976 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a59540c22f4b7e10864095f21c67e0c69">is_ascii</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
11977 &#32;&#32;&#32;&#32;{
11978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;str&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
11979 
11980 <emphasis role="preprocessor">#if&#32;TOML_HAS_SSE2&#32;&amp;&amp;&#32;(128&#32;%&#32;CHAR_BIT)&#32;==&#32;0</emphasis>
11981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;chars_per_vector&#32;=&#32;128u&#32;/&#32;CHAR_BIT;
11983 
11984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;simdable&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;-&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;%&#32;chars_per_vector))
11985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<link linkend="_namespacemask">mask</link>&#32;=&#32;_mm_setzero_si128();
11987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;e&#32;=&#32;str&#32;+&#32;simdable;&#32;str&#32;&lt;&#32;e;&#32;str&#32;+=&#32;chars_per_vector)
11988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;current_bytes&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i*<emphasis role="keyword">&gt;</emphasis>(str));
11990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacemask">mask</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_or_si128(<link linkend="_namespacemask">mask</link>,&#32;current_bytes);
11991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
11992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;has_error&#32;=&#32;_mm_cmpgt_epi8(_mm_setzero_si128(),&#32;<link linkend="_namespacemask">mask</link>);
11993 
11994 <emphasis role="preprocessor">#if&#32;TOML_HAS_SSE4_1</emphasis>
11995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_mm_testz_si128(has_error,&#32;has_error))
11996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
11997 <emphasis role="preprocessor">#else</emphasis>
11998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_mm_movemask_epi8(_mm_cmpeq_epi8(has_error,&#32;_mm_setzero_si128()))&#32;!=&#32;0xFFFF)
11999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12000 <emphasis role="preprocessor">#endif</emphasis>
12001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12003 <emphasis role="preprocessor">#endif</emphasis>
12004 
12005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;str&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;str++)
12006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(*str)&#32;&gt;&#32;127u)
12007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12008 
12009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
12010 &#32;&#32;&#32;&#32;}
12011 }
12012 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
12013 
12014 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
12015 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
12016 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
12017 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
12018 <emphasis role="preprocessor">#endif</emphasis>
12019 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
12020 
12021 <emphasis role="comment">//********&#32;&#32;impl/parser.inl&#32;&#32;*******************************************************************************************</emphasis>
12022 
12023 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER</emphasis>
12024 
12025 <link linkend="_toml_8hpp_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
12026 <emphasis role="preprocessor">#include&#32;&lt;istream&gt;</emphasis>
12027 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
12028 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV&#32;||&#32;TOML_FLOAT_CHARCONV</emphasis>
12029 <emphasis role="preprocessor">#include&#32;&lt;charconv&gt;</emphasis>
12030 <emphasis role="preprocessor">#endif</emphasis>
12031 <emphasis role="preprocessor">#if&#32;!TOML_INT_CHARCONV&#32;||&#32;!TOML_FLOAT_CHARCONV</emphasis>
12032 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
12033 <emphasis role="preprocessor">#endif</emphasis>
12034 <emphasis role="preprocessor">#if&#32;!TOML_INT_CHARCONV</emphasis>
12035 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
12036 <emphasis role="preprocessor">#endif</emphasis>
12037 <link linkend="_toml_8hpp_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
12038 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
12039 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
12040 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
12041 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
12042 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
12043 <emphasis role="preprocessor">#undef&#32;min</emphasis>
12044 <emphasis role="preprocessor">#undef&#32;max</emphasis>
12045 <emphasis role="preprocessor">#endif</emphasis>
12046 
12047 <link linkend="_toml_8hpp_1a492b1349e6331172ea2b6b9b5791ec61">TOML_ANON_NAMESPACE_START</link>
12048 {
12049 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
12050 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>utf8_byte_stream;
12051 
12052 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12053 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_toml_8hpp_1adc25ea9f06030e43e1cf5333d39e3237">utf8_byte_order_mark</link>&#32;=&#32;<emphasis role="stringliteral">&quot;\xEF\xBB\xBF&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12054 
12055 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Char&gt;
12056 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>utf8_byte_stream&lt;<link linkend="_namespacestd">std</link>::basic_string_view&lt;Char&gt;&gt;
12057 &#32;&#32;&#32;&#32;{
12058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(Char)&#32;==&#32;1);
12059 
12060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::basic_string_view&lt;Char&gt;&#32;source_;
12062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;position_&#32;=&#32;{};
12063 
12064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a7ede07b930ef849492da6b24ef13b778">utf8_byte_stream</link>(std::basic_string_view&lt;Char&gt;&#32;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
12067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;source_{&#32;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;}
12068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;bom</emphasis>
12070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(source_.length()&#32;&gt;=&#32;3u&#32;&amp;&amp;&#32;memcmp(<link linkend="_parser_8inl_1adc25ea9f06030e43e1cf5333d39e3237">utf8_byte_order_mark</link>.data(),&#32;source_.data(),&#32;3u)&#32;==&#32;0)
12071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position_&#32;+=&#32;3u;
12072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12073 
12074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
12075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1ac9be009983ef67089c25d51a74a4ee68">error</link>()&#32;const&#32;noexcept
12076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12079 
12080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1adb397dfdc74f9978c9c32f3e05c328a7">eof</link>()&#32;const&#32;noexcept
12082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;position_&#32;&gt;=&#32;source_.length();
12084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12085 
12086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
12088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!eof();
12090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12091 
12092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1basic__string__view_3_01_char_01_4_01_4_1a4894d3e2f94b3f8b301816aeee1f45dc">peek_eof</link>()&#32;const&#32;noexcept
12094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;eof();
12096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12097 
12098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
12100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>&#32;operator()(<emphasis role="keywordtype">void</emphasis>*&#32;dest,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>)&#32;noexcept
12101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!eof());
12103 
12104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>&#32;=&#32;impl::min(position_&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>,&#32;source_.length())&#32;-&#32;position_;
12105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(dest,&#32;source_.data()&#32;+&#32;position_,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>);
12106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position_&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>;
12107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>;
12108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12109 &#32;&#32;&#32;&#32;};
12110 
12111 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
12112 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>utf8_byte_stream&lt;<link linkend="_namespacestd">std</link>::istream&gt;
12113 &#32;&#32;&#32;&#32;{
12114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::istream*&#32;source_;
12116 
12117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a1dfbcde579c1c5ec0fce260de8aa7731">utf8_byte_stream</link>(std::istream&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>)&#32;<emphasis role="keyword">noexcept</emphasis>(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)&#32;<emphasis role="comment">//</emphasis>
12120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;source_{&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;}
12121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!*<emphasis role="keyword">this</emphasis>)&#32;<emphasis role="comment">//&#32;eof,&#32;bad</emphasis>
12123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
12124 
12125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;initial_pos&#32;=&#32;source_-&gt;tellg();
12126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;bom[3];
12127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_-&gt;read(bom,&#32;3);
12128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(source_-&gt;bad()&#32;||&#32;(source_-&gt;gcount()&#32;==&#32;3&#32;&amp;&amp;&#32;memcmp(<link linkend="_parser_8inl_1adc25ea9f06030e43e1cf5333d39e3237">utf8_byte_order_mark</link>.data(),&#32;bom,&#32;3u)&#32;==&#32;0))
12129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
12130 
12131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_-&gt;clear();
12132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_-&gt;seekg(initial_pos,&#32;std::istream::beg);
12133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12134 
12135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1aec883df2c800b0fb4f1cb9d4a05e872a">error</link>()&#32;const&#32;noexcept
12137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(source_-&gt;rdstate()&#32;&amp;&#32;std::istream::badbit);
12139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12140 
12141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a13dcf56d903304f2f04ee00e57019e77">eof</link>()&#32;const&#32;noexcept
12143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(source_-&gt;rdstate()&#32;&amp;&#32;std::istream::eofbit);
12145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12146 
12147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
12149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(source_-&gt;rdstate()&#32;&amp;&#32;(std::istream::badbit&#32;|&#32;std::istream::eofbit));
12151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12152 
12153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__byte__stream_3_01std_1_1istream_01_4_1a7fcc47ac4e0d4e66156967bb41160235">peek_eof</link>()&#32;const&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)
12155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;eof()&#32;||&#32;source_-&gt;peek()&#32;==&#32;std::istream::traits_type::eof();
12157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12158 
12159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
12161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>&#32;operator()(<emphasis role="keywordtype">void</emphasis>*&#32;dest,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>)&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)
12162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(*<emphasis role="keyword">this</emphasis>);
12164 
12165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_-&gt;read(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(dest),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abb50fc1ead3a02a46fb52daa2045f95c">num</link>));
12166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(source_-&gt;gcount());
12167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12168 &#32;&#32;&#32;&#32;};
12169 
12170 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structutf8__codepoint">utf8_codepoint</link>
12171 &#32;&#32;&#32;&#32;{
12172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char32_t</emphasis>&#32;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>;
12173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>[4];
12174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structutf8__codepoint_1abc7117238315044355827f52f66a711d">count</link>;
12175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;<link linkend="_structutf8__codepoint_1a473b5beaa148f7c5358147304810dd90">position</link>;
12176 
12177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char32_t</emphasis>&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
12179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>;
12181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12182 
12183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char32_t</emphasis>&amp;&#32;<link linkend="_structutf8__codepoint_1a09b834cc01e1ce7be28ec5171474988c">operator*</link>()&#32;const&#32;noexcept
12185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>;
12187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12188 &#32;&#32;&#32;&#32;};
12189 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_trivial_v&lt;utf8_codepoint&gt;);
12190 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_standard_layout_v&lt;utf8_codepoint&gt;);
12191 
12192 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_toml_8hpp_1aff57c07de29701e4a68a260317a08218">TOML_ABSTRACT_INTERFACE</link>&#32;<link linkend="_structutf8__reader__interface">utf8_reader_interface</link>
12193 &#32;&#32;&#32;&#32;{
12194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;<link linkend="_structutf8__reader__interface_1a4556538dd8acf45ad0e54594b7f23519">source_path</link>()&#32;const&#32;noexcept&#32;=&#32;0;
12196 
12197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;const&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;read_next()&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)&#32;=&#32;0;
12199 
12200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;<emphasis role="keywordtype">bool</emphasis>&#32;peek_eof()&#32;const&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)&#32;=&#32;0;
12202 
12203 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
12204 
12205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;optional&lt;parse_error&gt;&amp;&amp;&#32;<link linkend="_structutf8__reader__interface_1a137047d526546c1d4e0ce23ba69ceac5">error</link>()&#32;noexcept&#32;=&#32;0;
12207 
12208 <emphasis role="preprocessor">#endif</emphasis>
12209 
12210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_structutf8__reader__interface_1a467484791fcf69056a30f380439703ba">~utf8_reader_interface</link>()&#32;noexcept&#32;=&#32;default;
12211 &#32;&#32;&#32;&#32;};
12212 
12213 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
12214 <emphasis role="preprocessor">#define&#32;utf8_reader_error(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;throw&#32;parse_error(__VA_ARGS__)</emphasis>
12215 <emphasis role="preprocessor">#define&#32;utf8_reader_return_after_error(...)&#32;static_assert(true)</emphasis>
12216 <emphasis role="preprocessor">#define&#32;utf8_reader_error_check(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
12217 <emphasis role="preprocessor">#else</emphasis>
12218 <emphasis role="preprocessor">#define&#32;utf8_reader_error(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err_.emplace(__VA_ARGS__)</emphasis>
12219 <emphasis role="preprocessor">#define&#32;utf8_reader_return_after_error(...)&#32;return&#32;__VA_ARGS__</emphasis>
12220 <emphasis role="preprocessor">#define&#32;utf8_reader_error_check(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12221 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
12222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
12223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;TOML_UNLIKELY(err_)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
12226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
12227 
12228 <emphasis role="preprocessor">#endif</emphasis>
12229 
12230 <emphasis role="preprocessor">#if&#32;defined(__APPLE__)&#32;||&#32;defined(__MINGW32__)&#32;||&#32;defined(__MINGW64__)</emphasis>
12231 <emphasis role="preprocessor">#define&#32;TOML_OVERALIGNED</emphasis>
12232 <emphasis role="preprocessor">#else</emphasis>
12233 <emphasis role="preprocessor">#define&#32;TOML_OVERALIGNED&#32;alignas(32)</emphasis>
12234 <emphasis role="preprocessor">#endif</emphasis>
12235 
12236 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
12237 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_preprocessor_8h_1a207c4b5404fad3bbeeb40388c9480f64">TOML_EMPTY_BASES</link>&#32;<link linkend="_classutf8__reader">utf8_reader</link>&#32;final&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structutf8__reader__interface">utf8_reader_interface</link>
12238 &#32;&#32;&#32;&#32;{
12239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;block_capacity&#32;=&#32;32;
12241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_byte_stream&lt;T&gt;&#32;stream_;
12242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;next_pos_&#32;=&#32;{&#32;1,&#32;1&#32;};
12243 
12244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::utf8_decoder&#32;decoder_;
12245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>currently_decoding_t
12246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;bytes[4];
12248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>;
12249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;currently_decoding_;
12250 
12251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>codepoints_t
12252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a738efc76b091799c4b312ad69c8773bc">TOML_OVERALIGNED</link>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>[block_capacity];
12254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;current;
12255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>;
12256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;codepoints_;
12257 
12258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_source__region_8h_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&#32;source_path_;
12259 
12260 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
12261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;parse_error&gt;&#32;err_;
12262 <emphasis role="preprocessor">#endif</emphasis>
12263 
12264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;read_next_block()&#32;<emphasis role="keyword">noexcept</emphasis>(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)
12265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(stream_);
12267 
12268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a738efc76b091799c4b312ad69c8773bc">TOML_OVERALIGNED</link>&#32;<emphasis role="keywordtype">char</emphasis>&#32;raw_bytes[block_capacity];
12269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;raw_bytes_read;
12270 
12271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;the&#32;next&#32;raw&#32;(encoded)&#32;block&#32;in&#32;from&#32;the&#32;stream</emphasis>
12272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">noexcept</emphasis>(stream_(raw_bytes,&#32;block_capacity))&#32;||&#32;!<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>)
12273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raw_bytes_read&#32;=&#32;stream_(raw_bytes,&#32;block_capacity);
12275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12276 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
12277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
12280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;raw_bytes_read&#32;=&#32;stream_(raw_bytes,&#32;block_capacity);
12282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classstd_1_1exception">std::exception</link>&amp;&#32;exc)
12284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;parse_error{&#32;exc.<link linkend="_classstd_1_1exception_1aaeb5dde11d9e9efd8813c9521294a245">what</link>(),&#32;next_pos_,&#32;source_path_&#32;};
12286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)
12288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;parse_error{&#32;<emphasis role="stringliteral">&quot;An&#32;unspecified&#32;error&#32;occurred&quot;</emphasis>,&#32;next_pos_,&#32;source_path_&#32;};
12290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12292 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
12293 
12294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;a&#32;zero-byte&#32;read</emphasis>
12295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!raw_bytes_read)
12296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(stream_.eof())
12298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EOF&#32;only&#32;sets&#32;the&#32;error&#32;state&#32;if&#32;the&#32;decoder&#32;wants&#32;more&#32;input,&#32;otherwise</emphasis>
12300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;zero-byte&#32;read&#32;might&#32;have&#32;just&#32;caused&#32;the&#32;underlying&#32;stream&#32;to&#32;realize&#32;it&apos;s&#32;exhaused&#32;and&#32;set</emphasis>
12301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;EOF&#32;flag,&#32;and&#32;that&apos;s&#32;totally&#32;fine</emphasis>
12302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder_.needs_more_input())
12303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a7807884a92014643ba5f592263d86bb0">utf8_reader_error</link>(<emphasis role="stringliteral">&quot;Encountered&#32;EOF&#32;during&#32;incomplete&#32;utf-8&#32;code&#32;point&#32;sequence&quot;</emphasis>,
12304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_pos_,
12305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_path_);
12306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a7807884a92014643ba5f592263d86bb0">utf8_reader_error</link>(<emphasis role="stringliteral">&quot;Reading&#32;from&#32;the&#32;underlying&#32;stream&#32;failed&#32;-&#32;zero&#32;bytes&#32;read&quot;</emphasis>,
12310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_pos_,
12311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_path_);
12312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
12314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12315 
12316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(raw_bytes_read);
12317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(&amp;codepoints_,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(codepoints_));
12318 
12319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;helper&#32;for&#32;calculating&#32;decoded&#32;codepoint&#32;line+cols</emphasis>
12320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;calc_positions&#32;=&#32;[&amp;]()&#32;<emphasis role="keyword">noexcept</emphasis>
12321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;codepoints_.count;&#32;i++)
12323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;cp&#32;&#32;&#32;&#32;=&#32;codepoints_.buffer[i];
12325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp.position&#32;=&#32;next_pos_;
12326 
12327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp&#32;==&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>)
12328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_pos_.<link linkend="_structsource__position_1a4b07caf7db950b97a6f09be1572ba15d">line</link>++;
12330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_pos_.<link linkend="_structsource__position_1a5e87746bbf1a06bcf8b6ba7f566730b9">column</link>&#32;=&#32;source_index{&#32;1&#32;};
12331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_pos_.<link linkend="_structsource__position_1a5e87746bbf1a06bcf8b6ba7f566730b9">column</link>++;
12334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
12336 
12337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decide&#32;whether&#32;we&#32;need&#32;to&#32;use&#32;the&#32;UTF-8&#32;decoder&#32;or&#32;if&#32;we&#32;can&#32;treat&#32;this&#32;block&#32;as&#32;plain&#32;ASCII</emphasis>
12338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;ascii_fast_path&#32;=&#32;!decoder_.needs_more_input()&#32;&amp;&amp;&#32;impl::is_ascii(raw_bytes,&#32;raw_bytes_read);
12339 
12340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ASCII&#32;fast-path</emphasis>
12341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ascii_fast_path)
12342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder_.reset();
12344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currently_decoding_.count&#32;=&#32;{};
12345 
12346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoints_.count&#32;=&#32;raw_bytes_read;
12347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;codepoints_.count;&#32;i++)
12348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;cp&#32;&#32;&#32;&#32;=&#32;codepoints_.buffer[i];
12350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp.value&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char32_t</emphasis><emphasis role="keyword">&gt;</emphasis>(raw_bytes[i]);
12351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp.bytes[0]&#32;=&#32;raw_bytes[i];
12352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp.count&#32;&#32;&#32;&#32;=&#32;1u;
12353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12355 
12356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-8&#32;slow-path</emphasis>
12357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;helper&#32;for&#32;getting&#32;precise&#32;error&#32;location</emphasis>
12360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;error_pos&#32;=&#32;[&amp;]()&#32;<emphasis role="keyword">noexcept</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;
12361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//</emphasis>
12362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;codepoints_.count&#32;?&#32;codepoints_.buffer[codepoints_.count&#32;-&#32;1u].position&#32;:&#32;next_pos_;
12363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
12364 
12365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;raw_bytes_read;&#32;i++)
12366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder_(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(raw_bytes[i]));
12368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(decoder_.error())
12369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;calc_positions();
12371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a7807884a92014643ba5f592263d86bb0">utf8_reader_error</link>(<emphasis role="stringliteral">&quot;Encountered&#32;invalid&#32;utf-8&#32;sequence&quot;</emphasis>,&#32;error_pos(),&#32;source_path_);
12372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1af8d77e747aff2b90c099d213469c63da">utf8_reader_return_after_error</link>(<emphasis role="keyword">false</emphasis>);
12373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12374 
12375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currently_decoding_.bytes[currently_decoding_.count++]&#32;=&#32;raw_bytes[i];
12376 
12377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder_.has_code_point())
12378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;cp&#32;=&#32;codepoints_.buffer[codepoints_.count++];
12380 
12381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp.value&#32;=&#32;decoder_.codepoint;
12382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp.count&#32;=&#32;currently_decoding_.count;
12383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(cp.bytes,&#32;currently_decoding_.bytes,&#32;currently_decoding_.count);
12384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currently_decoding_.count&#32;=&#32;{};
12385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(currently_decoding_.count&#32;==&#32;4u)
12387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;calc_positions();
12389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a7807884a92014643ba5f592263d86bb0">utf8_reader_error</link>(<emphasis role="stringliteral">&quot;Encountered&#32;overlong&#32;utf-8&#32;sequence&quot;</emphasis>,&#32;error_pos(),&#32;source_path_);
12390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1af8d77e747aff2b90c099d213469c63da">utf8_reader_return_after_error</link>(<emphasis role="keyword">false</emphasis>);
12391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(decoder_.needs_more_input()&#32;&amp;&amp;&#32;stream_.eof())
12394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;calc_positions();
12396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a7807884a92014643ba5f592263d86bb0">utf8_reader_error</link>(<emphasis role="stringliteral">&quot;Encountered&#32;EOF&#32;during&#32;incomplete&#32;utf-8&#32;code&#32;point&#32;sequence&quot;</emphasis>,
12397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_pos(),
12398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_path_);
12399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1af8d77e747aff2b90c099d213469c63da">utf8_reader_return_after_error</link>(<emphasis role="keyword">false</emphasis>);
12400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12402 
12403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(codepoints_.count);
12404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;calc_positions();
12405 
12406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;general&#32;I/O&#32;errors</emphasis>
12407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(down&#32;here&#32;so&#32;the&#32;next_pos_&#32;benefits&#32;from&#32;calc_positions())</emphasis>
12408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(stream_.error())
12409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a7807884a92014643ba5f592263d86bb0">utf8_reader_error</link>(<emphasis role="stringliteral">&quot;An&#32;I/O&#32;error&#32;occurred&#32;while&#32;reading&#32;from&#32;the&#32;underlying&#32;stream&quot;</emphasis>,
12411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next_pos_,
12412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_path_);
12413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1af8d77e747aff2b90c099d213469c63da">utf8_reader_return_after_error</link>(<emphasis role="keyword">false</emphasis>);
12414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12415 
12416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
12417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12418 
12419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">typename</emphasis>&#32;String&#32;=&#32;std::<emphasis role="keywordtype">string</emphasis>_view&gt;
12421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classutf8__reader_1a0bb05e6654cb4453ee9f719388cf5ab9">utf8_reader</link>(U&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>,&#32;String&amp;&amp;&#32;source_path&#32;=&#32;{})&#32;<emphasis role="keyword">noexcept</emphasis>(
12423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_nothrow_constructible_v&lt;utf8_byte_stream&lt;T&gt;,&#32;U&amp;&amp;&gt;)
12424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;stream_{&#32;static_cast&lt;U&amp;&amp;&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>)&#32;}
12425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currently_decoding_.count&#32;=&#32;{};
12427 
12428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoints_.current&#32;=&#32;{};
12429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoints_.count&#32;&#32;&#32;=&#32;{};
12430 
12431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!source_path.empty())
12432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_path_&#32;=&#32;std::make_shared&lt;const&#32;std::string&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>String&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(source_path));
12433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12434 
12435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;<link linkend="_classutf8__reader_1a780f2a782652606b6db722e880019eb2">source_path</link>()&#32;const&#32;noexcept&#32;final
12437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;source_path_;
12439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12440 
12441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;<link linkend="_classutf8__reader_1aed6bb16cd83adb87af6c0d008a0c78f7">read_next</link>()&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)&#32;final
12443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1a9786bc2cc56c908d0a845891896f4de8">utf8_reader_error_check</link>({});
12445 
12446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(codepoints_.current&#32;==&#32;codepoints_.count)
12447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!stream_&#32;||&#32;!read_next_block())
12449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
12450 
12451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!codepoints_.current);
12452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(codepoints_.count);
12454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(codepoints_.count&#32;&lt;=&#32;block_capacity);
12455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(codepoints_.current&#32;&lt;&#32;codepoints_.count);
12456 
12457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;codepoints_.buffer[codepoints_.current++];
12458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12459 
12460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__reader_1ae203f27a05b9833af011c2f169b97dae">peek_eof</link>()&#32;const&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)&#32;final
12462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stream_.peek_eof();
12464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12465 
12466 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
12467 
12468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;parse_error&gt;&amp;&amp;&#32;<link linkend="_classutf8__reader_1a70b6e1eebfed24383be8f99c675ed1b3">error</link>()&#32;noexcept&#32;final
12470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(err_);
12472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12473 
12474 <emphasis role="preprocessor">#endif</emphasis>
12475 &#32;&#32;&#32;&#32;};
12476 
12477 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Char&gt;
12478 &#32;&#32;&#32;&#32;<link linkend="_classutf8__reader">utf8_reader</link>(std::basic_string_view&lt;Char&gt;,&#32;std::string_view)&#32;-&gt;&#32;<link linkend="_classutf8__reader">utf8_reader&lt;std::basic_string_view&lt;Char&gt;</link>&gt;;
12479 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Char&gt;
12480 &#32;&#32;&#32;&#32;<link linkend="_classutf8__reader">utf8_reader</link>(std::basic_string_view&lt;Char&gt;,&#32;std::string&#32;&amp;&amp;)&#32;-&gt;&#32;<link linkend="_classutf8__reader">utf8_reader&lt;std::basic_string_view&lt;Char&gt;</link>&gt;;
12481 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Char&gt;
12482 &#32;&#32;&#32;&#32;<link linkend="_classutf8__reader">utf8_reader</link>(std::basic_istream&lt;Char&gt;&amp;,&#32;std::string_view)&#32;-&gt;&#32;<link linkend="_classutf8__reader">utf8_reader&lt;std::basic_istream&lt;Char&gt;</link>&gt;;
12483 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Char&gt;
12484 &#32;&#32;&#32;&#32;<link linkend="_classutf8__reader">utf8_reader</link>(std::basic_istream&lt;Char&gt;&amp;,&#32;std::string&#32;&amp;&amp;)&#32;-&gt;&#32;<link linkend="_classutf8__reader">utf8_reader&lt;std::basic_istream&lt;Char&gt;</link>&gt;;
12485 
12486 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
12487 <emphasis role="preprocessor">#define&#32;utf8_buffered_reader_error_check(...)&#32;static_assert(true)</emphasis>
12488 <emphasis role="preprocessor">#else</emphasis>
12489 <emphasis role="preprocessor">#define&#32;utf8_buffered_reader_error_check(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12490 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
12491 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12492 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;TOML_UNLIKELY(reader_.error())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12493 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12494 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
12495 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
12496 
12497 <emphasis role="preprocessor">#endif</emphasis>
12498 
12499 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_preprocessor_8h_1a207c4b5404fad3bbeeb40388c9480f64">TOML_EMPTY_BASES</link>&#32;<link linkend="_classutf8__buffered__reader">utf8_buffered_reader</link>
12500 &#32;&#32;&#32;&#32;{
12501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;max_history_length&#32;=&#32;128;
12503 
12504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
12505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;history_buffer_size&#32;=&#32;max_history_length&#32;-&#32;1;&#32;<emphasis role="comment">//&apos;head&apos;&#32;is&#32;stored&#32;in&#32;the&#32;reader</emphasis>
12506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutf8__reader__interface">utf8_reader_interface</link>&amp;&#32;reader_;
12507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
12508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>[history_buffer_size];
12510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
12511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;history_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
12512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;head_&#32;=&#32;{};
12513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;negative_offset_&#32;&#32;&#32;&#32;&#32;=&#32;{};
12514 
12515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
12516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classutf8__buffered__reader_1af95c39dcbef5f7501b2d19b0e9849d14">utf8_buffered_reader</link>(<link linkend="_structutf8__reader__interface">utf8_reader_interface</link>&amp;&#32;reader)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
12518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;reader_{&#32;reader&#32;}
12519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
12520 
12521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;<link linkend="_classutf8__buffered__reader_1a82f28b3ba60daf554b34e7b588cd26a7">source_path</link>()&#32;const&#32;noexcept
12523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reader_.<link linkend="_structutf8__reader__interface_1a4556538dd8acf45ad0e54594b7f23519">source_path</link>();
12525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12526 
12527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;<link linkend="_classutf8__buffered__reader_1a90556ed6c36b8fa958b6515c4b932cd7">read_next</link>()&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)
12529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1ac78113fc8c30dd400d9b8b3a82b0cbb9">utf8_buffered_reader_error_check</link>({});
12531 
12532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(negative_offset_)
12533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;negative_offset_--;
12535 
12536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;an&#32;entry&#32;negative&#32;offset&#32;of&#32;1&#32;just&#32;means&#32;&quot;replay&#32;the&#32;current&#32;head&quot;</emphasis>
12537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!negative_offset_)
12538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;head_;
12539 
12540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;step&#32;back&#32;into&#32;the&#32;history&#32;buffer</emphasis>
12541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;history_.buffer
12543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;((history_.first&#32;+&#32;history_.count&#32;-&#32;negative_offset_)&#32;%&#32;history_buffer_size);
12544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;first&#32;character&#32;read&#32;from&#32;stream</emphasis>
12548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!history_.count&#32;&amp;&amp;&#32;!head_)
12549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head_&#32;=&#32;reader_.<link linkend="_structutf8__reader__interface_1abfc2cf51cb019309c776bcef347e9796">read_next</link>();
12550 
12551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;subsequent&#32;characters&#32;and&#32;not&#32;eof</emphasis>
12552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(head_)
12553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_preprocessor_8h_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(history_.count&#32;&lt;&#32;history_buffer_size)
12555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;history_.buffer[history_.count++]&#32;=&#32;*head_;
12556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;history_.buffer[(history_.first++&#32;+&#32;history_buffer_size)&#32;%&#32;history_buffer_size]&#32;=&#32;*head_;
12558 
12559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head_&#32;=&#32;reader_.<link linkend="_structutf8__reader__interface_1abfc2cf51cb019309c776bcef347e9796">read_next</link>();
12560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12561 
12562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;head_;
12563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12565 
12566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;<link linkend="_classutf8__buffered__reader_1aa31e6337c3669dc7bf2fcca5f2a4895e">step_back</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
12568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_parser_8inl_1ac78113fc8c30dd400d9b8b3a82b0cbb9">utf8_buffered_reader_error_check</link>({});
12570 
12571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(history_.count);
12572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(negative_offset_&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;&lt;=&#32;history_.count);
12573 
12574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;negative_offset_&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>;
12575 
12576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;negative_offset_
12577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;history_.buffer&#32;+&#32;((history_.first&#32;+&#32;history_.count&#32;-&#32;negative_offset_)&#32;%&#32;history_buffer_size)
12578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;head_;
12579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12580 
12581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classutf8__buffered__reader_1a9a576cea8dc099eaead9ba01c872ee08">peek_eof</link>()&#32;const&#32;noexcept(!<link linkend="_preprocessor_8h_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)
12583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reader_.<link linkend="_structutf8__reader__interface_1aa49d7571963817157d85094a3191997c">peek_eof</link>();
12585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12586 
12587 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
12588 
12589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
12590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;optional&lt;parse_error&gt;&amp;&amp;&#32;<link linkend="_classutf8__buffered__reader_1acd165b3c7ae7025ef4bec5633bb91ba0">error</link>()&#32;noexcept
12591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;reader_.<link linkend="_structutf8__reader__interface_1a137047d526546c1d4e0ce23ba69ceac5">error</link>();
12593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12594 
12595 <emphasis role="preprocessor">#endif</emphasis>
12596 &#32;&#32;&#32;&#32;};
12597 }
12598 <link linkend="_toml_8hpp_1a0385295454ae473a68d194eaffaf597c">TOML_ANON_NAMESPACE_END</link>;
12599 
12600 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
12601 <emphasis role="preprocessor">#define&#32;TOML_RETURNS_BY_THROWING&#32;[[noreturn]]</emphasis>
12602 <emphasis role="preprocessor">#else</emphasis>
12603 <emphasis role="preprocessor">#define&#32;TOML_RETURNS_BY_THROWING</emphasis>
12604 <emphasis role="preprocessor">#endif</emphasis>
12605 
12606 <link linkend="_toml_8hpp_1a492b1349e6331172ea2b6b9b5791ec61">TOML_ANON_NAMESPACE_START</link>
12607 {
12608 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
12609 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
12610 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12611 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_match(<emphasis role="keywordtype">char32_t</emphasis>&#32;codepoint,&#32;T...&#32;vals)&#32;<emphasis role="keyword">noexcept</emphasis>
12612 &#32;&#32;&#32;&#32;{
12613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((std::is_same_v&lt;char32_t,&#32;T&gt;&#32;&amp;&amp;&#32;...));
12614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((codepoint&#32;==&#32;vals)&#32;||&#32;...);
12615 &#32;&#32;&#32;&#32;}
12616 
12617 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;u<emphasis role="keywordtype">int</emphasis>64_t&gt;
12618 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>parse_integer_traits;
12619 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
12620 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>parse_integer_traits&lt;2&gt;
12621 &#32;&#32;&#32;&#32;{
12622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;scope_qualifier&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;binary&#32;integer&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_digit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;impl::is_binary_digit;
12624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_signed&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
12625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;max_digits&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;63;
12626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;prefix_codepoint&#32;=&#32;U<emphasis role="charliteral">&apos;b&apos;</emphasis>;
12627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;prefix&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;b&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;full_prefix&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;0b&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12629 &#32;&#32;&#32;&#32;};
12630 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
12631 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>parse_integer_traits&lt;8&gt;
12632 &#32;&#32;&#32;&#32;{
12633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;scope_qualifier&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;octal&#32;integer&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_digit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;impl::is_octal_digit;
12635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_signed&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
12636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;max_digits&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;21;&#32;<emphasis role="comment">//&#32;strlen(&quot;777777777777777777777&quot;)</emphasis>
12637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;prefix_codepoint&#32;=&#32;U<emphasis role="charliteral">&apos;o&apos;</emphasis>;
12638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;prefix&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;o&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;full_prefix&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;0o&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12640 &#32;&#32;&#32;&#32;};
12641 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
12642 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>parse_integer_traits&lt;10&gt;
12643 &#32;&#32;&#32;&#32;{
12644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;scope_qualifier&#32;=&#32;<emphasis role="stringliteral">&quot;decimal&#32;integer&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_digit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;impl::is_decimal_digit;
12646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_signed&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
12647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;max_digits&#32;&#32;&#32;&#32;&#32;&#32;=&#32;19;&#32;<emphasis role="comment">//&#32;strlen(&quot;9223372036854775807&quot;)</emphasis>
12648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;full_prefix&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12649 &#32;&#32;&#32;&#32;};
12650 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
12651 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>parse_integer_traits&lt;16&gt;
12652 &#32;&#32;&#32;&#32;{
12653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;scope_qualifier&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;hexadecimal&#32;integer&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_digit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;impl::is_hexadecimal_digit;
12655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_signed&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
12656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;max_digits&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;16;&#32;<emphasis role="comment">//&#32;strlen(&quot;7FFFFFFFFFFFFFFF&quot;)</emphasis>
12657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;prefix_codepoint&#32;=&#32;U<emphasis role="charliteral">&apos;x&apos;</emphasis>;
12658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;prefix&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;x&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;full_prefix&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="stringliteral">&quot;0x&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12660 &#32;&#32;&#32;&#32;};
12661 
12662 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
12663 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12664 &#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(node_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
12665 &#32;&#32;&#32;&#32;{
12666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::node_type_friendly_names[impl::unwrap_enum(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)];
12667 &#32;&#32;&#32;&#32;}
12668 
12669 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
12670 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12671 &#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;str)&#32;<emphasis role="keyword">noexcept</emphasis>
12672 &#32;&#32;&#32;&#32;{
12673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string_view{&#32;str&#32;};
12674 &#32;&#32;&#32;&#32;}
12675 
12676 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a635df435bd9048d34bd5824a31d79d1e">TOML_CONST_GETTER</link>
12677 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12678 &#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
12679 &#32;&#32;&#32;&#32;{
12680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::string_view_literals;
12681 
12682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12683 &#32;&#32;&#32;&#32;}
12684 
12685 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
12686 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12687 &#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>&amp;&#32;cp)&#32;<emphasis role="keyword">noexcept</emphasis>
12688 &#32;&#32;&#32;&#32;{
12689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp.value&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\x1F&apos;</emphasis>)
12690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::control_char_escapes[cp.value];
12691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp.value&#32;==&#32;U<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>)
12692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;\\u007F&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string_view{&#32;cp.bytes,&#32;cp.count&#32;};
12695 &#32;&#32;&#32;&#32;}
12696 
12697 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
12698 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12699 &#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;cp)&#32;<emphasis role="keyword">noexcept</emphasis>
12700 &#32;&#32;&#32;&#32;{
12701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp)
12702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp);
12703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
12704 &#32;&#32;&#32;&#32;}
12705 
12706 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structescaped__codepoint">escaped_codepoint</link>
12707 &#32;&#32;&#32;&#32;{
12708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>&amp;&#32;<link linkend="_structescaped__codepoint_1a8db2f2c4e433782b4bb051b9a4fa8bf6">cp</link>;
12709 &#32;&#32;&#32;&#32;};
12710 
12711 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
12712 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(nonnull)
12713 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
12714 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(<emphasis role="keywordtype">char</emphasis>*&amp;&#32;write_pos,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;buf_end,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>
12715 &#32;&#32;&#32;&#32;{
12716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(write_pos&#32;&gt;=&#32;buf_end)
12717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
12718 
12719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>arg_type&#32;=&#32;impl::remove_cvref&lt;T&gt;;
12720 
12721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;views</emphasis>
12722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;arg_type,&#32;std::string_view&gt;)
12723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;max_chars&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(buf_end&#32;-&#32;write_pos);
12725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;max_chars&#32;&lt;&#32;arg.length()&#32;?&#32;max_chars&#32;:&#32;arg.length();
12726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(write_pos,&#32;arg.data(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
12727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_pos&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
12728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12729 
12730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;doubles</emphasis>
12731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;arg_type,&#32;double&gt;)
12732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12733 <emphasis role="preprocessor">#if&#32;TOML_FLOAT_CHARCONV</emphasis>
12734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;std::to_chars(write_pos,&#32;buf_end,&#32;arg);
12735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_pos&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.ptr;
12736 <emphasis role="preprocessor">#else</emphasis>
12737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;ss;
12738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.imbue(std::locale::classic());
12739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.precision(std::numeric_limits&lt;arg_type&gt;::max_digits10);
12740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;arg;
12741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(write_pos,&#32;buf_end,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ss).str()));
12742 <emphasis role="preprocessor">#endif</emphasis>
12743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12744 
12745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;64-bit&#32;integers</emphasis>
12746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::is_one_of&lt;arg_type,&#32;int64_t,&#32;uint64_t&gt;)
12747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12748 <emphasis role="preprocessor">#if&#32;TOML_INT_CHARCONV</emphasis>
12749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;std::to_chars(write_pos,&#32;buf_end,&#32;arg);
12750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;write_pos&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.ptr;
12751 <emphasis role="preprocessor">#else</emphasis>
12752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;ss;
12753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.imbue(std::locale::classic());
12754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>cast_type&#32;=&#32;std::conditional_t&lt;std::is_signed_v&lt;arg_type&gt;,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&gt;;
12755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;static_cast&lt;cast_type&gt;(arg);
12756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(write_pos,&#32;buf_end,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ss).str()));
12757 <emphasis role="preprocessor">#endif</emphasis>
12758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12759 
12760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escaped_codepoint</emphasis>
12761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;arg_type,&#32;escaped_codepoint&gt;)
12762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arg.cp.value&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>)
12764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(write_pos,&#32;buf_end,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(arg.cp));
12765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(arg.cp.value);
12768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;digits&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&gt;&#32;0xFFFFu&#32;?&#32;8u&#32;:&#32;4u;
12769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespacemask">mask</link>&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link>{&#32;0xFu&#32;};
12770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[10]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;digits&#32;&gt;&#32;4&#32;?&#32;<emphasis role="charliteral">&apos;U&apos;</emphasis>&#32;:&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>&#32;};
12771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;2u&#32;+&#32;digits;&#32;i--&#32;&gt;&#32;2u;)
12772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;hexdig&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&amp;&#32;<link linkend="_namespacemask">mask</link>;
12774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[i]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(hexdig&#32;&gt;=&#32;0xAu&#32;?&#32;(<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;+&#32;(hexdig&#32;-&#32;0xAu))&#32;:&#32;(<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;hexdig));
12775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&gt;&gt;=&#32;4;
12776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(write_pos,&#32;buf_end,&#32;std::string_view{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;digits&#32;+&#32;2u&#32;});
12778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12780 
12781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;other&#32;floats&#32;(fallback&#32;-&#32;coerce&#32;to&#32;double)</emphasis>
12782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_floating_point_v&lt;arg_type&gt;)
12783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(write_pos,&#32;buf_end,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(arg));
12784 
12785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;other&#32;integers&#32;(fallback&#32;-&#32;coerce&#32;to&#32;(u)int64_t)</emphasis>
12786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_arithmetic_v&lt;arg_type&gt;&#32;&amp;&amp;&#32;std::is_integral_v&lt;arg_type&gt;)
12787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>cast_type&#32;=&#32;std::conditional_t&lt;std::is_unsigned_v&lt;arg_type&gt;,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;;
12789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(write_pos,&#32;buf_end,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>cast_type<emphasis role="keyword">&gt;</emphasis>(arg));
12790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12791 
12792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
12793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
12795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::dependent_false&lt;T&gt;,
12796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;concatenate()&#32;inputs&#32;are&#32;limited&#32;to&#32;std::string_views,&#32;integers,&#32;floats,&#32;and&#32;escaped_codepoint&quot;</emphasis>);
12797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12798 &#32;&#32;&#32;&#32;}
12799 
12800 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structerror__builder">error_builder</link>
12801 &#32;&#32;&#32;&#32;{
12802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::size_t&#32;<link linkend="_structerror__builder_1a9676953542ccc454af02b85f80fd0979">buf_size</link>&#32;=&#32;512;
12803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[<link linkend="_structerror__builder_1a9676953542ccc454af02b85f80fd0979">buf_size</link>];
12804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structerror__builder_1add3763a9cecbbb61ec7200f454e00a7c">write_pos</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_structerror__builder_1abbf8aa4ed1709881c0f7e1fd04698967">buf</link>;
12805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structerror__builder_1acc0dee693a1e826c64966e2e76e03695">max_write_pos</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>&#32;+&#32;(<link linkend="_structerror__builder_1a9676953542ccc454af02b85f80fd0979">buf_size</link>&#32;-&#32;std::size_t{&#32;1&#32;});&#32;<emphasis role="comment">//&#32;allow&#32;for&#32;null&#32;terminator</emphasis>
12806 
12807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structerror__builder_1ab901aa63cddcbbcf3222cb16eefec2ec">error_builder</link>(std::string_view&#32;scope)&#32;<emphasis role="keyword">noexcept</emphasis>
12809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(<link linkend="_structerror__builder_1add3763a9cecbbb61ec7200f454e00a7c">write_pos</link>,&#32;<link linkend="_structerror__builder_1acc0dee693a1e826c64966e2e76e03695">max_write_pos</link>,&#32;<emphasis role="stringliteral">&quot;Error&#32;while&#32;parsing&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
12811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(<link linkend="_structerror__builder_1add3763a9cecbbb61ec7200f454e00a7c">write_pos</link>,&#32;<link linkend="_structerror__builder_1acc0dee693a1e826c64966e2e76e03695">max_write_pos</link>,&#32;scope);
12812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(<link linkend="_structerror__builder_1add3763a9cecbbb61ec7200f454e00a7c">write_pos</link>,&#32;<link linkend="_structerror__builder_1acc0dee693a1e826c64966e2e76e03695">max_write_pos</link>,&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
12813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12814 
12815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
12816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structerror__builder_1a4368a7026c60dfaf64d25afe89066f60">append</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;arg)&#32;<emphasis role="keyword">noexcept</emphasis>
12817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af49131ba8c9d457cc429110e01808f9a">concatenate</link>(<link linkend="_structerror__builder_1add3763a9cecbbb61ec7200f454e00a7c">write_pos</link>,&#32;<link linkend="_structerror__builder_1acc0dee693a1e826c64966e2e76e03695">max_write_pos</link>,&#32;arg);
12819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12820 
12821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a20dec4fc2cdf7f5ff2372b1d7827aa7c">TOML_RETURNS_BY_THROWING</link>
12822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structerror__builder_1ad582cf957b48af018d36ca912f64299c">finish</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&amp;&#32;pos,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_toml_8hpp_1a9162c7aeefc4d78442fc504b0893be89">source_path_ptr</link>&amp;&#32;source_path)<emphasis role="keyword">&#32;const</emphasis>
12823 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
12824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_structerror__builder_1add3763a9cecbbb61ec7200f454e00a7c">write_pos</link>&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
12825 
12826 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
12827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;parse_error{&#32;<link linkend="_structerror__builder_1abbf8aa4ed1709881c0f7e1fd04698967">buf</link>,&#32;pos,&#32;source_path&#32;};
12828 <emphasis role="preprocessor">#else</emphasis>
12829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_error{&#32;std::string(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="_structerror__builder_1add3763a9cecbbb61ec7200f454e00a7c">write_pos</link>&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>)),&#32;pos,&#32;source_path&#32;};
12830 <emphasis role="preprocessor">#endif</emphasis>
12831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12832 
12833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structerror__builder_1ad32391988c0fcfbb3b549ed378efc0bf">TOML_DELETE_DEFAULTS</link>(<link linkend="_structerror__builder">error_builder</link>);
12834 &#32;&#32;&#32;&#32;};
12835 
12836 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structparse__scope">parse_scope</link>
12837 &#32;&#32;&#32;&#32;{
12838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&amp;&#32;<link linkend="_structparse__scope_1aea28508ecbc5d1405c0fbae4ad8c73cd">storage_</link>;
12839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_structparse__scope_1a6df35dfb6026baa94f6401d0437a7b76">parent_</link>;
12840 
12841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_structparse__scope_1ae188710ca5bf8da6a19fe3726c90cd9a">parse_scope</link>(std::string_view&amp;&#32;current_scope,&#32;std::string_view&#32;new_scope)&#32;noexcept
12843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structparse__scope_1aea28508ecbc5d1405c0fbae4ad8c73cd">storage_</link>{&#32;current_scope&#32;},
12844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__scope_1a6df35dfb6026baa94f6401d0437a7b76">parent_</link>{&#32;current_scope&#32;}
12845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__scope_1aea28508ecbc5d1405c0fbae4ad8c73cd">storage_</link>&#32;=&#32;new_scope;
12847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12848 
12849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__scope_1a8aae0137c5dc33798e28b95198e63512">~parse_scope</link>()&#32;noexcept
12850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__scope_1aea28508ecbc5d1405c0fbae4ad8c73cd">storage_</link>&#32;=&#32;<link linkend="_structparse__scope_1a6df35dfb6026baa94f6401d0437a7b76">parent_</link>;
12852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12853 
12854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__scope_1a6215c270636234ee9912ca9be55e679b">TOML_DELETE_DEFAULTS</link>(<link linkend="_structparse__scope">parse_scope</link>);
12855 &#32;&#32;&#32;&#32;};
12856 <emphasis role="preprocessor">#define&#32;push_parse_scope_2(scope,&#32;line)&#32;parse_scope&#32;ps_##line(current_scope,&#32;scope)</emphasis>
12857 <emphasis role="preprocessor">#define&#32;push_parse_scope_1(scope,&#32;line)&#32;push_parse_scope_2(scope,&#32;line)</emphasis>
12858 <emphasis role="preprocessor">#define&#32;push_parse_scope(scope)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;push_parse_scope_1(scope,&#32;__LINE__)</emphasis>
12859 
12860 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structparse__key__buffer">parse_key_buffer</link>
12861 &#32;&#32;&#32;&#32;{
12862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="_structparse__key__buffer_1ac139f8d1dab75e1c34ea088ad1d66af4">buffer</link>;
12863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;size_t,&#32;size_t&gt;&gt;&#32;<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>;
12864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;source_position&gt;&#32;<link linkend="_structparse__key__buffer_1ad92b5a087bd073a11f647bcb25e111d7">starts</link>;
12865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;source_position&gt;&#32;<link linkend="_structparse__key__buffer_1a2ad820379b61e423674be863bfda21ca">ends</link>;
12866 
12867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structparse__key__buffer_1a528e6021b3353f7dc508065b15d408d3">clear</link>()&#32;noexcept
12868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>.clear();
12870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>.clear();
12871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__key__buffer_1ad92b5a087bd073a11f647bcb25e111d7">starts</link>.clear();
12872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__key__buffer_1a2ad820379b61e423674be863bfda21ca">ends</link>.clear();
12873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12874 
12875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structparse__key__buffer_1a5be5a39fb6e88bd73f36c983d822dbfb">push_back</link>(std::string_view&#32;segment,&#32;<link linkend="_structsource__position">source_position</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<link linkend="_structsource__position">source_position</link>&#32;e)
12876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>.push_back({&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>.length(),&#32;segment.length()&#32;});
12878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>.append(segment);
12879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__key__buffer_1ad92b5a087bd073a11f647bcb25e111d7">starts</link>.push_back(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
12880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__key__buffer_1a2ad820379b61e423674be863bfda21ca">ends</link>.push_back(e);
12881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12882 
12883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_structparse__key__buffer_1af3712cbb6f15492dfd9e9b28ac83f3ed">operator[]</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
12885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string_view{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>.c_str()&#32;+&#32;<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>[i].first,&#32;<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>[i].second&#32;};
12887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12888 
12889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_structparse__key__buffer_1a471983ccaa14c3e702f8d111cc27b6a9">back</link>()&#32;const&#32;noexcept
12891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>.size()&#32;-&#32;1u];
12893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12894 
12895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structparse__key__buffer_1a781aed86aafbdd7e125db15ef7425030">empty</link>()&#32;const&#32;noexcept
12897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>.empty();
12899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12900 
12901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
12902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structparse__key__buffer_1a0b6efc243f6498c089430873c5258ce0">size</link>()&#32;const&#32;noexcept
12903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structparse__key__buffer_1aa642b64dad04183aee16c24991de45f3">segments</link>.size();
12905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12906 &#32;&#32;&#32;&#32;};
12907 
12908 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdepth__counter__scope">depth_counter_scope</link>
12909 &#32;&#32;&#32;&#32;{
12910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="_structdepth__counter__scope_1a0b3b7629cfecae2f081c8d5a459d9c91">depth_</link>;
12911 
12912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_structdepth__counter__scope_1ae0f3872ac331e31bd80133de52a486bc">depth_counter_scope</link>(<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
12914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structdepth__counter__scope_1a0b3b7629cfecae2f081c8d5a459d9c91">depth_</link>{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1aa8bd8cf1eef34712fdb6ad58b540a2ee">depth</link>&#32;}
12915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdepth__counter__scope_1a0b3b7629cfecae2f081c8d5a459d9c91">depth_</link>++;
12917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12918 
12919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdepth__counter__scope_1a233b3392c04a2ebc65ae268967dda869">~depth_counter_scope</link>()&#32;noexcept
12920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdepth__counter__scope_1a0b3b7629cfecae2f081c8d5a459d9c91">depth_</link>--;
12922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12923 
12924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdepth__counter__scope_1a779a299e94910a56f1c221f8db5c60f4">TOML_DELETE_DEFAULTS</link>(<link linkend="_structdepth__counter__scope">depth_counter_scope</link>);
12925 &#32;&#32;&#32;&#32;};
12926 
12927 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structparsed__string">parsed_string</link>
12928 &#32;&#32;&#32;&#32;{
12929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;<link linkend="_structparsed__string_1a11310fc19c13d1f45b55f7c0c9861376">value</link>;
12930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structparsed__string_1a34d7b66e6e51904b3c58712c47207336">was_multi_line</link>;
12931 &#32;&#32;&#32;&#32;};
12932 
12933 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtable__vector__scope">table_vector_scope</link>
12934 &#32;&#32;&#32;&#32;{
12935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;table*&gt;&amp;&#32;<link linkend="_structtable__vector__scope_1a1942143146d62ad8f9ec727076c0fc12">tables</link>;
12936 
12937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
12938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_structtable__vector__scope_1aa65dcdc7f40696121aa93c63e8a1bfe2">table_vector_scope</link>(std::vector&lt;table*&gt;&amp;&#32;tables_,&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl)&#32;<emphasis role="comment">//</emphasis>
12939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_structtable__vector__scope_1a1942143146d62ad8f9ec727076c0fc12">tables</link>{&#32;tables_&#32;}
12940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtable__vector__scope_1a1942143146d62ad8f9ec727076c0fc12">tables</link>.push_back(&amp;tbl);
12942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12943 
12944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtable__vector__scope_1a3d2911b5859dd60622cf744c3c8da7df">~table_vector_scope</link>()&#32;noexcept
12945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
12946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtable__vector__scope_1a1942143146d62ad8f9ec727076c0fc12">tables</link>.pop_back();
12947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
12948 
12949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtable__vector__scope_1a643029011394081c80894b506627d9c3">TOML_DELETE_DEFAULTS</link>(<link linkend="_structtable__vector__scope">table_vector_scope</link>);
12950 &#32;&#32;&#32;&#32;};
12951 }
12952 <link linkend="_toml_8hpp_1a0385295454ae473a68d194eaffaf597c">TOML_ANON_NAMESPACE_END</link>;
12953 
12954 <emphasis role="preprocessor">#if&#32;1&#32;</emphasis><emphasis role="comment">//&#32;parser&#32;helper&#32;macros</emphasis>
12955 
12956 <emphasis role="comment">//&#32;Q:&#32;&quot;what&#32;the&#32;fuck&#32;is&#32;this?&#32;MACROS????&quot;</emphasis>
12957 <emphasis role="comment">//&#32;A:&#32;The&#32;parser&#32;needs&#32;to&#32;work&#32;in&#32;exceptionless&#32;mode&#32;(returning&#32;error&#32;objects&#32;directly)</emphasis>
12958 <emphasis role="comment">//&#32;&#32;&#32;&#32;and&#32;exception&#32;mode&#32;(reporting&#32;parse&#32;failures&#32;by&#32;throwing).&#32;Two&#32;totally&#32;different&#32;control&#32;flows.</emphasis>
12959 <emphasis role="comment">//&#32;&#32;&#32;&#32;These&#32;macros&#32;encapsulate&#32;the&#32;differences&#32;between&#32;the&#32;two&#32;modes&#32;so&#32;I&#32;can&#32;write&#32;code&#32;code</emphasis>
12960 <emphasis role="comment">//&#32;&#32;&#32;&#32;as&#32;though&#32;I&#32;was&#32;only&#32;targeting&#32;one&#32;mode&#32;and&#32;not&#32;want&#32;yeet&#32;myself&#32;into&#32;the&#32;sun.</emphasis>
12961 <emphasis role="comment">//&#32;&#32;&#32;&#32;They&apos;re&#32;all&#32;#undef&apos;d&#32;at&#32;the&#32;bottom&#32;of&#32;the&#32;parser&apos;s&#32;implementation&#32;so&#32;they&#32;should&#32;be&#32;harmless&#32;outside</emphasis>
12962 <emphasis role="comment">//&#32;&#32;&#32;&#32;of&#32;toml++.</emphasis>
12963 
12964 <emphasis role="preprocessor">#define&#32;is_eof()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!cp</emphasis>
12965 <emphasis role="preprocessor">#define&#32;assert_not_eof()&#32;TOML_ASSERT_ASSUME(cp&#32;!=&#32;nullptr)</emphasis>
12966 <emphasis role="preprocessor">#define&#32;return_if_eof(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12967 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
12968 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
12969 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;TOML_UNLIKELY(is_eof())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12970 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12971 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
12972 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
12973 
12974 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
12975 <emphasis role="preprocessor">#define&#32;is_error()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;false</emphasis>
12976 <emphasis role="preprocessor">#define&#32;return_after_error(...)&#32;&#32;&#32;&#32;&#32;TOML_UNREACHABLE</emphasis>
12977 <emphasis role="preprocessor">#define&#32;assert_not_error()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
12978 <emphasis role="preprocessor">#define&#32;return_if_error(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
12979 <emphasis role="preprocessor">#define&#32;return_if_error_or_eof(...)&#32;return_if_eof(__VA_ARGS__)</emphasis>
12980 <emphasis role="preprocessor">#else</emphasis>
12981 <emphasis role="preprocessor">#define&#32;is_error()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!!err</emphasis>
12982 <emphasis role="preprocessor">#define&#32;return_after_error(...)&#32;return&#32;__VA_ARGS__</emphasis>
12983 <emphasis role="preprocessor">#define&#32;assert_not_error()&#32;&#32;&#32;&#32;&#32;&#32;TOML_ASSERT(!is_error())</emphasis>
12984 <emphasis role="preprocessor">#define&#32;return_if_error(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12985 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
12986 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
12987 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;TOML_UNLIKELY(is_error())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12988 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12989 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
12990 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
12991 <emphasis role="preprocessor">#define&#32;return_if_error_or_eof(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12992 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
12993 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
12994 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;TOML_UNLIKELY(is_eof()&#32;||&#32;is_error())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12995 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__VA_ARGS__;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
12996 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
12997 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
12998 <emphasis role="preprocessor">#endif</emphasis>
12999 
13000 <emphasis role="preprocessor">#if&#32;defined(TOML_BREAK_AT_PARSE_ERRORS)&#32;&amp;&amp;&#32;TOML_BREAK_AT_PARSE_ERRORS</emphasis>
13001 <emphasis role="preprocessor">#if&#32;defined(__has_builtin)</emphasis>
13002 <emphasis role="preprocessor">#if&#32;__has_builtin(__builtin_debugtrap)</emphasis>
13003 <emphasis role="preprocessor">#define&#32;parse_error_break()&#32;__builtin_debugtrap()</emphasis>
13004 <emphasis role="preprocessor">#elif&#32;__has_builtin(__debugbreak)</emphasis>
13005 <emphasis role="preprocessor">#define&#32;parse_error_break()&#32;__debugbreak()</emphasis>
13006 <emphasis role="preprocessor">#endif</emphasis>
13007 <emphasis role="preprocessor">#endif</emphasis>
13008 <emphasis role="preprocessor">#ifndef&#32;parse_error_break</emphasis>
13009 <emphasis role="preprocessor">#if&#32;TOML_MSVC&#32;||&#32;TOML_ICC</emphasis>
13010 <emphasis role="preprocessor">#define&#32;parse_error_break()&#32;__debugbreak()</emphasis>
13011 <emphasis role="preprocessor">#else</emphasis>
13012 <emphasis role="preprocessor">#define&#32;parse_error_break()&#32;TOML_ASSERT(false)</emphasis>
13013 <emphasis role="preprocessor">#endif</emphasis>
13014 <emphasis role="preprocessor">#endif</emphasis>
13015 <emphasis role="preprocessor">#else</emphasis>
13016 <emphasis role="preprocessor">#define&#32;parse_error_break()&#32;static_assert(true)</emphasis>
13017 <emphasis role="preprocessor">#endif</emphasis>
13018 
13019 <emphasis role="preprocessor">#define&#32;set_error_and_return(ret,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13020 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
13021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
13022 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(!is_error())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13024 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return_after_error(ret);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13025 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
13026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
13027 
13028 <emphasis role="preprocessor">#define&#32;set_error_and_return_default(...)&#32;set_error_and_return({},&#32;__VA_ARGS__)</emphasis>
13029 
13030 <emphasis role="preprocessor">#define&#32;set_error_and_return_if_eof(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13031 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
13032 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
13033 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;TOML_UNLIKELY(is_eof())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_and_return(__VA_ARGS__,&#32;&quot;encountered&#32;end-of-file&quot;sv);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13035 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13036 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
13037 
13038 <emphasis role="preprocessor">#define&#32;advance_and_return_if_error(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13039 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13040 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
13041 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_not_eof();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13042 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advanceemphasis>
13043 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return_if_error(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13044 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
13045 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
13046 
13047 <emphasis role="preprocessor">#define&#32;advance_and_return_if_error_or_eof(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13048 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
13049 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
13050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert_not_eof();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13051 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advanceemphasis>
13052 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return_if_error(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13053 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_and_return_if_eof(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
13054 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
13055 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
13056 
13057 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;parser&#32;helper&#32;macros</emphasis>
13058 
13059 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
13060 {
13061 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;impl_ex,&#32;impl_noex);
13062 
13063 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classparser">parser</link>
13064 &#32;&#32;&#32;&#32;{
13065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
13066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;max_nested_values&#32;=&#32;<link linkend="_toml_8hpp_1a9c9d5c24d1da441070611cb02cf78993">TOML_MAX_NESTED_VALUES</link>;
13067 
13068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classutf8__buffered__reader">utf8_buffered_reader</link>&#32;reader;
13069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&#32;root;
13070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;prev_pos&#32;=&#32;{&#32;1,&#32;1&#32;};
13071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;cp&#32;=&#32;{};
13072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;table*&gt;&#32;implicit_tables;
13073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;table*&gt;&#32;dotted_key_tables;
13074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;table*&gt;&#32;open_inline_tables;
13075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;array*&gt;&#32;table_arrays;
13076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparse__key__buffer">parse_key_buffer</link>&#32;key_buffer;
13077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;string_buffer;
13078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;recording_buffer;&#32;<emphasis role="comment">//&#32;for&#32;diagnostics</emphasis>
13079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;recording&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;recording_whitespace&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;current_scope;
13081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nested_values&#32;=&#32;{};
13082 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
13083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;optional&lt;parse_error&gt;&#32;err;
13084 <emphasis role="preprocessor">#endif</emphasis>
13085 
13086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;current_position(source_index&#32;fallback_offset&#32;=&#32;0)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
13088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
13090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cp-&gt;<link linkend="_structutf8__codepoint_1a473b5beaa148f7c5358147304810dd90">position</link>;
13091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;prev_pos.<link linkend="_structsource__position_1a4b07caf7db950b97a6f09be1572ba15d">line</link>,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>source_index<emphasis role="keyword">&gt;</emphasis>(prev_pos.<link linkend="_structsource__position_1a5e87746bbf1a06bcf8b6ba7f566730b9">column</link>&#32;+&#32;fallback_offset)&#32;};
13092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13093 
13094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
13095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a20dec4fc2cdf7f5ff2372b1d7827aa7c">TOML_RETURNS_BY_THROWING</link>
13096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_error_at(<link linkend="_structsource__position">source_position</link>&#32;pos,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;...&#32;reason)<emphasis role="keyword">&#32;const</emphasis>
13098 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
13099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>...(T)&#32;&gt;&#32;0);
13100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
13101 
13102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structerror__builder">error_builder</link>&#32;builder{&#32;current_scope&#32;};
13103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(builder.append(reason),&#32;...);
13104 
13105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ac6bf913c1b74fc5a47c2675e99c60155">parse_error_break</link>();
13106 
13107 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
13108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;builder.finish(pos,&#32;reader.<link linkend="_classutf8__buffered__reader_1a82f28b3ba60daf554b34e7b588cd26a7">source_path</link>());
13109 <emphasis role="preprocessor">#else</emphasis>
13110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err.emplace(builder.finish(pos,&#32;reader.<link linkend="_classutf8__buffered__reader_1a82f28b3ba60daf554b34e7b588cd26a7">source_path</link>()));
13111 <emphasis role="preprocessor">#endif</emphasis>
13112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13113 
13114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
13115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a20dec4fc2cdf7f5ff2372b1d7827aa7c">TOML_RETURNS_BY_THROWING</link>
13116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;set_error(<emphasis role="keyword">const</emphasis>&#32;T&amp;...&#32;reason)<emphasis role="keyword">&#32;const</emphasis>
13117 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
13118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_at(current_position(1),&#32;reason...);
13119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13120 
13121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;go_back(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>&#32;=&#32;1)&#32;<emphasis role="keyword">noexcept</emphasis>
13122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
13124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
13125 
13126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;reader.<link linkend="_classutf8__buffered__reader_1aa31e6337c3669dc7bf2fcca5f2a4895e">step_back</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
13127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_pos&#32;=&#32;cp-&gt;<link linkend="_structutf8__codepoint_1a473b5beaa148f7c5358147304810dd90">position</link>;
13128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13129 
13130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;advance()
13131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
13133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13134 
13135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_pos&#32;=&#32;cp-&gt;<link linkend="_structutf8__codepoint_1a473b5beaa148f7c5358147304810dd90">position</link>;
13136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;reader.<link linkend="_classutf8__buffered__reader_1a90556ed6c36b8fa958b6515c4b932cd7">read_next</link>();
13137 
13138 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
13139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reader.<link linkend="_classutf8__buffered__reader_1acd165b3c7ae7025ef4bec5633bb91ba0">error</link>())
13140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(reader.<link linkend="_classutf8__buffered__reader_1acd165b3c7ae7025ef4bec5633bb91ba0">error</link>());
13142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
13143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13144 <emphasis role="preprocessor">#endif</emphasis>
13145 
13146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recording&#32;&amp;&amp;&#32;!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
13147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(recording_whitespace&#32;||&#32;!is_whitespace(*cp))
13149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_buffer.append(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>,&#32;cp-&gt;<link linkend="_structutf8__codepoint_1abc7117238315044355827f52f66a711d">count</link>);
13150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13152 
13153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;start_recording(<emphasis role="keywordtype">bool</emphasis>&#32;include_current&#32;=&#32;<emphasis role="keyword">true</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
13154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
13156 
13157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_whitespace&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_buffer.clear();
13160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(include_current&#32;&amp;&amp;&#32;!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
13161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_buffer.append(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>,&#32;cp-&gt;<link linkend="_structutf8__codepoint_1abc7117238315044355827f52f66a711d">count</link>);
13162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13163 
13164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;stop_recording(<emphasis role="keywordtype">size_t</emphasis>&#32;pop_bytes&#32;=&#32;0)&#32;<emphasis role="keyword">noexcept</emphasis>
13165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
13167 
13168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pop_bytes)
13170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pop_bytes&#32;&gt;=&#32;recording_buffer.length())
13172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_buffer.clear();
13173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pop_bytes&#32;==&#32;1u)
13174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_buffer.pop_back();
13175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_buffer.erase(recording_buffer.begin()
13177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(recording_buffer.length()&#32;-&#32;pop_bytes),
13178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_buffer.end());
13179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13181 
13182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;consume_leading_whitespace()
13183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a625e0562629966fb24c082b163e593bf">return_if_error_or_eof</link>({});
13185 
13186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;consumed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;is_horizontal_whitespace(*cp))
13188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!is_ascii_horizontal_whitespace(*cp))
13190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;space&#32;or&#32;tab,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_structescaped__codepoint">escaped_codepoint</link>{&#32;*cp&#32;},&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13191 
13192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consumed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;consumed;
13196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13197 
13198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;consume_line_break()
13199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a625e0562629966fb24c082b163e593bf">return_if_error_or_eof</link>({});
13201 
13202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;\v&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;\f&apos;</emphasis>))
13203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R<emphasis role="stringliteral">&quot;(vertical&#32;tabs&#32;&apos;\v&apos;&#32;and&#32;form-feeds&#32;&apos;\f&apos;&#32;are&#32;not&#32;legal&#32;line&#32;breaks&#32;in&#32;TOML)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
13205 <emphasis role="stringliteral"></emphasis>
13206 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;\r&apos;</emphasis>)
13207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;\r</emphasis>
13209 
13210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
13211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;\\n&apos;&#32;after&#32;&apos;\\r&apos;,&#32;saw&#32;EOF&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13212 
13213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>)
13214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;\\n&apos;&#32;after&#32;&apos;\\r&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structescaped__codepoint">escaped_codepoint</link>{&#32;*cp&#32;},
13216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>)
13219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13220 
13221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;\n</emphasis>
13222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
13223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13224 
13225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;consume_rest_of_line()
13226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a625e0562629966fb24c082b163e593bf">return_if_error_or_eof</link>({});
13228 
13229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
13230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_ascii_vertical_whitespace(*cp))
13232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;consume_line_break();
13233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance();
13235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>());
13238 
13239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
13240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13241 
13242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;consume_comment()
13243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a625e0562629966fb24c082b163e593bf">return_if_error_or_eof</link>({});
13245 
13246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;#&apos;</emphasis>)
13247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13248 
13249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;comment&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13250 
13251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;&apos;#&apos;</emphasis>
13252 
13253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
13254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(consume_line_break())
13256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
13257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13258 
13259 <emphasis role="preprocessor">#if&#32;TOML_LANG_AT_LEAST(1,&#32;0,&#32;0)</emphasis>
13260 
13261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;toml/issues/567&#32;(disallow&#32;non-TAB&#32;control&#32;characters&#32;in&#32;comments)</emphasis>
13262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_nontab_control_character(*cp))
13263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;control&#32;characters&#32;other&#32;than&#32;TAB&#32;(U+0009)&#32;are&#32;explicitly&#32;prohibited&#32;in&#32;comments&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13265 
13266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;toml/pull/720&#32;(disallow&#32;surrogates&#32;in&#32;comments)</emphasis>
13267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_unicode_surrogate(*cp))
13268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unicode&#32;surrogates&#32;(U+D800&#32;to&#32;U+DFFF)&#32;are&#32;explicitly&#32;prohibited&#32;in&#32;comments&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13270 <emphasis role="preprocessor">#endif</emphasis>
13271 
13272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13274 
13275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
13276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13277 
13278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;consume_expected_sequence(std::u32string_view&#32;seq)
13280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(!seq.empty());
13283 
13284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;seq)
13285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
13287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;c)
13288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
13292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13293 
13294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
13295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;consume_digit_sequence(T*&#32;digits,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
13297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(digits);
13300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
13301 
13302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;&#32;i++)
13303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
13305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_decimal_digit(*cp))
13306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
13307 
13308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits[i]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*cp&#32;-&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>);
13309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
13312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13313 
13314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
13315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;consume_variable_length_digit_sequence(T*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;max_len)
13317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>);
13320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(max_len);
13321 
13322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;{};
13323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;i&#32;&lt;&#32;max_len;&#32;i++)
13324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;||&#32;!is_decimal_digit(*cp))
13326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13327 
13328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a7bd7b5e409950ac3449c78baf3205f4b">buffer</link>[i]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(*cp&#32;-&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>);
13329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i;
13332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13333 
13334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;parse_basic_string(<emphasis role="keywordtype">bool</emphasis>&#32;multi_line)
13337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
13341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;string&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13342 
13343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;&apos;&quot;&apos;</emphasis>
13344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13345 
13346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multi-line&#32;strings&#32;ignore&#32;a&#32;single&#32;line&#32;ending&#32;right&#32;at&#32;the&#32;beginning</emphasis>
13347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line)
13348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_line_break();
13350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
13352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13353 
13354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;str&#32;=&#32;string_buffer;
13355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.clear();
13356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;escaped&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;skipping_whitespace&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
13359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(escaped)
13361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;escaped&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13363 
13364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;&apos;line&#32;ending&#32;slashes&apos;&#32;in&#32;multi-line&#32;mode</emphasis>
13365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line&#32;&amp;&amp;&#32;is_whitespace(*cp))
13366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
13368 
13369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!consume_line_break())
13370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;line-ending&#32;backslashes&#32;must&#32;be&#32;the&#32;last&#32;non-whitespace&#32;character&#32;on&#32;the&#32;line&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13372 
13373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skipping_whitespace&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
13376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13377 
13378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;skip_escaped_codepoint&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structescaped__codepoint">escaped_codepoint</link>&#32;=&#32;*cp)
13381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;regular&apos;&#32;escape&#32;codes</emphasis>
13383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;b&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\b&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;f&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\f&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;n&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;r&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;t&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\\&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13390 
13391 <emphasis role="preprocessor">#if&#32;TOML_LANG_UNRELEASED&#32;</emphasis><emphasis role="comment">//&#32;toml/pull/790&#32;(\e&#32;shorthand&#32;for&#32;\x1B)</emphasis>
13392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;e&apos;</emphasis>:&#32;str&#32;+=&#32;<emphasis role="stringliteral">&apos;\x1B&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
13393 <emphasis role="preprocessor">#else</emphasis>
13394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;e&apos;</emphasis>:
13395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;escape&#32;sequence&#32;&apos;\\e&apos;&#32;is&#32;not&#32;supported&#32;in&#32;TOML&#32;1.0.0&#32;and&#32;earlier&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13397 <emphasis role="preprocessor">#endif</emphasis>
13398 
13399 <emphasis role="preprocessor">#if&#32;TOML_LANG_UNRELEASED&#32;</emphasis><emphasis role="comment">//&#32;toml/pull/796&#32;(\xHH&#32;unicode&#32;scalar&#32;sequences)</emphasis>
13400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;x&apos;</emphasis>:&#32;[[fallthrough]];
13401 <emphasis role="preprocessor">#else</emphasis>
13402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;x&apos;</emphasis>:
13403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;escape&#32;sequence&#32;&apos;\\x&apos;&#32;is&#32;not&#32;supported&#32;in&#32;TOML&#32;1.0.0&#32;and&#32;earlier&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13405 <emphasis role="preprocessor">#endif</emphasis>
13406 
13407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unicode&#32;scalar&#32;sequences</emphasis>
13408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;u&apos;</emphasis>:&#32;[[fallthrough]];
13409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;U&apos;</emphasis>:
13410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;unicode&#32;scalar&#32;sequence&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_escaped_codepoint&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13414 
13415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;place_value&#32;=
13416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structescaped__codepoint">escaped_codepoint</link>&#32;==&#32;U<emphasis role="charliteral">&apos;U&apos;</emphasis>&#32;?&#32;0x10000000u&#32;:&#32;(<link linkend="_structescaped__codepoint">escaped_codepoint</link>&#32;==&#32;U<emphasis role="charliteral">&apos;u&apos;</emphasis>&#32;?&#32;0x1000u&#32;:&#32;0x10u);
13417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;sequence_value{};
13418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(place_value)
13419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
13421 
13422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!is_hexadecimal_digit(*cp))
13423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;hex&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13424 
13425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sequence_value&#32;+=&#32;place_value&#32;*&#32;hex_to_dec(*cp);
13426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;place_value&#32;/=&#32;16u;
13427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13429 
13430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_unicode_surrogate(sequence_value))
13431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unicode&#32;surrogates&#32;(U+D800&#32;-&#32;U+DFFF)&#32;are&#32;explicitly&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(sequence_value&#32;&gt;&#32;0x10FFFFu)
13434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;values&#32;greater&#32;than&#32;U+10FFFF&#32;are&#32;invalid&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13435 
13436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sequence_value&#32;&lt;&#32;0x80)
13437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(sequence_value);
13439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sequence_value&#32;&lt;&#32;0x800u)
13441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>((sequence_value&#32;&gt;&gt;&#32;6)&#32;|&#32;0xC0u);
13443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>((sequence_value&#32;&amp;&#32;0x3Fu)&#32;|&#32;0x80u);
13444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sequence_value&#32;&lt;&#32;0x10000u)
13446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>((sequence_value&#32;&gt;&gt;&#32;12)&#32;|&#32;0xE0u);
13448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(((sequence_value&#32;&gt;&gt;&#32;6)&#32;&amp;&#32;0x3Fu)&#32;|&#32;0x80u);
13449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>((sequence_value&#32;&amp;&#32;0x3Fu)&#32;|&#32;0x80u);
13450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sequence_value&#32;&lt;&#32;0x110000u)
13452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>((sequence_value&#32;&gt;&gt;&#32;18)&#32;|&#32;0xF0u);
13454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(((sequence_value&#32;&gt;&gt;&#32;12)&#32;&amp;&#32;0x3Fu)&#32;|&#32;0x80u);
13455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(((sequence_value&#32;&gt;&gt;&#32;6)&#32;&amp;&#32;0x3Fu)&#32;|&#32;0x80u);
13456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>((sequence_value&#32;&amp;&#32;0x3Fu)&#32;|&#32;0x80u);
13457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13460 
13461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;???</emphasis>
13462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ed5549bb358a70566b2499634ffd752">TOML_UNLIKELY_CASE</link>
13463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;unknown&#32;escape&#32;sequence&#32;&apos;\\&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13465 
13466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(skip_escaped_codepoint)
13467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;closing&#32;delimiters</emphasis>
13472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>)
13473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line)
13475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lookaheads&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
13477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;consecutive_delimiters&#32;=&#32;1;
13478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
13479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lookaheads++;
13482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>)
13483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consecutive_delimiters++;
13484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(lookaheads&#32;&lt;&#32;4u);
13488 
13489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(consecutive_delimiters)
13490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;&quot;&quot;&#32;&quot;&#32;(one&#32;quote&#32;somewhere&#32;in&#32;a&#32;ML&#32;string)</emphasis>
13492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
13493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
13494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skipping_whitespace&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
13496 
13497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;&quot;&quot;&#32;&quot;&quot;&#32;(two&#32;quotes&#32;somewhere&#32;in&#32;a&#32;ML&#32;string)</emphasis>
13498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
13499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.append(<emphasis role="stringliteral">&quot;\&quot;\&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skipping_whitespace&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
13502 
13503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;&quot;&quot;&#32;&quot;&quot;&quot;&#32;(the&#32;end&#32;of&#32;the&#32;string)</emphasis>
13504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13505 
13506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;&quot;&quot;&#32;&quot;&quot;&quot;&quot;&#32;(one&#32;at&#32;the&#32;end&#32;of&#32;the&#32;string)</emphasis>
13507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13508 
13509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;&quot;&quot;&#32;&quot;&quot;&quot;&quot;&quot;&#32;(two&#32;quotes&#32;at&#32;the&#32;end&#32;of&#32;the&#32;string)</emphasis>
13510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5:
13511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.append(<emphasis role="stringliteral">&quot;\&quot;\&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;last&#32;&apos;&quot;&apos;</emphasis>
13513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13514 
13515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
13516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;closing&#32;delimiter</emphasis>
13521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13524 
13525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;escapes</emphasis>
13526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;\\&apos;</emphasis>)
13527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;&apos;\&apos;</emphasis>
13529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skipping_whitespace&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;escaped&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
13532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13533 
13534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;line&#32;endings&#32;in&#32;multi-line&#32;mode</emphasis>
13535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line&#32;&amp;&amp;&#32;is_ascii_vertical_whitespace(*cp))
13536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_line_break();
13538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!skipping_whitespace)
13540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
13541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
13542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13543 
13544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;control&#32;characters</emphasis>
13545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_nontab_control_character(*cp))
13546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unescaped&#32;control&#32;characters&#32;other&#32;than&#32;TAB&#32;(U+0009)&#32;are&#32;explicitly&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13548 
13549 <emphasis role="preprocessor">#if&#32;TOML_LANG_AT_LEAST(1,&#32;0,&#32;0)</emphasis>
13550 
13551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;surrogates&#32;in&#32;strings</emphasis>
13552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_unicode_surrogate(*cp))
13553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;unescaped&#32;unicode&#32;surrogates&#32;(U+D800&#32;to&#32;U+DFFF)&#32;are&#32;explicitly&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13555 <emphasis role="preprocessor">#endif</emphasis>
13556 
13557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line)
13558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!skipping_whitespace&#32;||&#32;!is_horizontal_whitespace(*cp))
13560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skipping_whitespace&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.append(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>,&#32;cp-&gt;<link linkend="_structutf8__codepoint_1abc7117238315044355827f52f66a711d">count</link>);
13563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.append(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>,&#32;cp-&gt;<link linkend="_structutf8__codepoint_1abc7117238315044355827f52f66a711d">count</link>);
13567 
13568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>());
13572 
13573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;encountered&#32;end-of-file&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13575 
13576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;parse_literal_string(<emphasis role="keywordtype">bool</emphasis>&#32;multi_line)
13579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>);
13583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;literal&#32;string&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13584 
13585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;delimiter</emphasis>
13586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13587 
13588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;multi-line&#32;strings&#32;ignore&#32;a&#32;single&#32;line&#32;ending&#32;right&#32;at&#32;the&#32;beginning</emphasis>
13589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line)
13590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_line_break();
13592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
13594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13595 
13596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;str&#32;=&#32;string_buffer;
13597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.clear();
13598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
13599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13601 
13602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;closing&#32;delimiters</emphasis>
13603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>)
13604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line)
13606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lookaheads&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
13608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;consecutive_delimiters&#32;=&#32;1;
13609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
13610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lookaheads++;
13613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>)
13614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consecutive_delimiters++;
13615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(lookaheads&#32;&lt;&#32;4u);
13619 
13620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(consecutive_delimiters)
13621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;&apos;&apos;&#32;&apos;&#32;(one&#32;quote&#32;somewhere&#32;in&#32;a&#32;ML&#32;string)</emphasis>
13623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>;&#32;<emphasis role="keywordflow">continue</emphasis>;
13624 
13625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;&apos;&apos;&#32;&apos;&apos;&#32;(two&#32;quotes&#32;somewhere&#32;in&#32;a&#32;ML&#32;string)</emphasis>
13626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:&#32;str.append(<emphasis role="stringliteral">&quot;&apos;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;<emphasis role="keywordflow">continue</emphasis>;
13627 
13628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;&apos;&apos;&#32;&apos;&apos;&apos;&#32;(the&#32;end&#32;of&#32;the&#32;string)</emphasis>
13629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13630 
13631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;&apos;&apos;&#32;&apos;&apos;&apos;&apos;&#32;(one&#32;at&#32;the&#32;end&#32;of&#32;the&#32;string)</emphasis>
13632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13633 
13634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;&apos;&apos;&#32;&apos;&apos;&apos;&apos;&apos;&#32;(two&#32;quotes&#32;at&#32;the&#32;end&#32;of&#32;the&#32;string)</emphasis>
13635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5:
13636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.append(<emphasis role="stringliteral">&quot;&apos;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;last&#32;&apos;</emphasis>
13638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13639 
13640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
13641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;closing&#32;delimiter</emphasis>
13646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
13647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13649 
13650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;line&#32;endings&#32;in&#32;multi-line&#32;mode</emphasis>
13651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multi_line&#32;&amp;&amp;&#32;is_ascii_vertical_whitespace(*cp))
13652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_line_break();
13654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;+=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
13656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
13657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13658 
13659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;control&#32;characters</emphasis>
13660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_nontab_control_character(*cp))
13661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
13662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;control&#32;characters&#32;other&#32;than&#32;TAB&#32;(U+0009)&#32;are&#32;explicitly&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13663 
13664 <emphasis role="preprocessor">#if&#32;TOML_LANG_AT_LEAST(1,&#32;0,&#32;0)</emphasis>
13665 
13666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;surrogates&#32;in&#32;strings</emphasis>
13667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_unicode_surrogate(*cp))
13668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;unicode&#32;surrogates&#32;(U+D800&#32;-&#32;U+DFFF)&#32;are&#32;explicitly&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13669 <emphasis role="preprocessor">#endif</emphasis>
13670 
13671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str.append(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>,&#32;cp-&gt;<link linkend="_structutf8__codepoint_1abc7117238315044355827f52f66a711d">count</link>);
13672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>());
13675 
13676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;encountered&#32;end-of-file&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13678 
13679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparsed__string">parsed_string</link>&#32;parse_string()
13682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_string_delimiter(*cp));
13686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;string&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13687 
13688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;the&#32;first&#32;three&#32;characters&#32;to&#32;determine&#32;the&#32;string&#32;type</emphasis>
13689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;cp-&gt;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>;
13690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;second&#32;=&#32;cp-&gt;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>;
13692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;third&#32;=&#32;cp&#32;?&#32;cp-&gt;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>&#32;:&#32;U<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
13694 
13695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;we&#32;were&#32;eof&#32;at&#32;the&#32;third&#32;character&#32;then&#32;first&#32;and&#32;second&#32;need&#32;to&#32;be</emphasis>
13696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;same&#32;string&#32;character&#32;(otherwise&#32;it&apos;s&#32;an&#32;unterminated&#32;string)</emphasis>
13697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
13698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(second&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)
13700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
13701 
13702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;encountered&#32;end-of-file&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13704 
13705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;first&#32;three&#32;characters&#32;are&#32;all&#32;the&#32;same&#32;string&#32;delimiter&#32;then</emphasis>
13706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&apos;s&#32;a&#32;multi-line&#32;string.</emphasis>
13707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;==&#32;second&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;==&#32;third)
13708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;?&#32;parse_literal_string(<emphasis role="keyword">true</emphasis>)&#32;:&#32;parse_basic_string(<emphasis role="keyword">true</emphasis>),&#32;<emphasis role="keyword">true</emphasis>&#32;};
13710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13711 
13712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;it&apos;s&#32;just&#32;a&#32;regular&#32;string.</emphasis>
13713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;step&#32;back&#32;two&#32;characters&#32;so&#32;that&#32;the&#32;current</emphasis>
13716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;character&#32;is&#32;the&#32;string&#32;delimiter</emphasis>
13717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;go_back(2u);
13718 
13719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;?&#32;parse_literal_string(<emphasis role="keyword">false</emphasis>)&#32;:&#32;parse_basic_string(<emphasis role="keyword">false</emphasis>),&#32;<emphasis role="keyword">false</emphasis>&#32;};
13720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13722 
13723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;parse_bare_key_segment()
13726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_bare_key_character(*cp));
13730 
13731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_buffer.clear();
13732 
13733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
13734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_bare_key_character(*cp))
13736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13737 
13738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_buffer.append(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>,&#32;cp-&gt;<link linkend="_structutf8__codepoint_1abc7117238315044355827f52f66a711d">count</link>);
13739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13741 
13742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_buffer;
13743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13744 
13745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_boolean()
13748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;t&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;f&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;T&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;F&apos;</emphasis>));
13752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;boolean&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13753 
13754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start_recording(<emphasis role="keyword">true</emphasis>);
13755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;is_match(*cp,&#32;U<emphasis role="charliteral">&apos;t&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;T&apos;</emphasis>);
13756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_expected_sequence(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;?&#32;U<emphasis role="stringliteral">&quot;true&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;U<emphasis role="stringliteral">&quot;false&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>))
13757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>),
13759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
13761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_recording();
13763 
13764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
13765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;value-terminator,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13766 
13767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13769 
13770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;parse_inf_or_nan()
13773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;i&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;n&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;I&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;N&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>));
13777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;floating-point&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13778 
13779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start_recording(<emphasis role="keyword">true</emphasis>);
13780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;negative&#32;=&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>;
13781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(negative&#32;||&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>)
13782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13783 
13784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inf&#32;=&#32;is_match(*cp,&#32;U<emphasis role="charliteral">&apos;i&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;I&apos;</emphasis>);
13785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_expected_sequence(inf&#32;?&#32;U<emphasis role="stringliteral">&quot;inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;U<emphasis role="stringliteral">&quot;nan&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>))
13786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inf&#32;?&#32;<emphasis role="stringliteral">&quot;inf&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;nan&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
13790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_recording();
13792 
13793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
13794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;value-terminator,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13795 
13796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;inf&#32;?&#32;(negative&#32;?&#32;-std::numeric_limits&lt;double&gt;::infinity()&#32;:&#32;std::numeric_limits&lt;double&gt;::infinity())
13797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::numeric_limits&lt;double&gt;::quiet_NaN();
13798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13799 
13800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;parse_float()
13803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;||&#32;is_decimal_digit(*cp));
13807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;floating-point&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13808 
13809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sign</emphasis>
13810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacesign">sign</link>&#32;=&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;?&#32;-1&#32;:&#32;1;
13811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>))
13812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13813 
13814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;consume&#32;value&#32;chars</emphasis>
13815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;chars[<link linkend="_classutf8__buffered__reader_1a93f9481db7eb9dceaf857956cfdb18a3">utf8_buffered_reader::max_history_length</link>];
13816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
13817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;prev&#32;=&#32;{};
13818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;seen_decimal&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;seen_exponent&#32;=&#32;<emphasis role="keyword">false</emphasis>;
13819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;first_integer_part&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
13820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
13821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
13823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!prev&#32;||&#32;!is_decimal_digit(*prev))
13825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;may&#32;only&#32;follow&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13826 
13827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;cp;
13828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
13830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(prev&#32;&amp;&amp;&#32;*prev&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>&#32;&amp;&amp;&#32;!is_decimal_digit(*cp))
13832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;must&#32;be&#32;followed&#32;by&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_namespacelength">length</link>&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(chars))
13834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;exceeds&#32;length&#32;limit&#32;of&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(chars),
13836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(seen_exponent&#32;?&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;(consider&#32;using&#32;exponent&#32;notation)&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>));
13838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>)
13839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;.1</emphasis>
13841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-.1</emphasis>
13842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+.1&#32;(no&#32;integer&#32;part)</emphasis>
13843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!first_integer_part)
13844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;decimal&#32;digit,&#32;saw&#32;&apos;.&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13845 
13846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0e+.10&#32;(exponent&#32;cannot&#32;have&#32;&apos;.&apos;)</emphasis>
13847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seen_exponent)
13848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;exponent&#32;decimal&#32;digit&#32;or&#32;sign,&#32;saw&#32;&apos;.&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13849 
13850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0.e+.10</emphasis>
13851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1..0</emphasis>
13852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(multiple&#32;&apos;.&apos;)</emphasis>
13853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seen_decimal)
13854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;decimal&#32;digit&#32;or&#32;exponent,&#32;saw&#32;&apos;.&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13855 
13856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seen_decimal&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;E&apos;</emphasis>))
13859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;&amp;&amp;&#32;!is_decimal_digit(*prev))
13861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;decimal&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13862 
13863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0ee+10&#32;(multiple&#32;&apos;e&apos;)</emphasis>
13864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(seen_exponent)
13865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;decimal&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13866 
13867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seen_decimal&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;implied</emphasis>
13868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seen_exponent&#32;=&#32;<emphasis role="keyword">true</emphasis>;
13869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>))
13871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.-0&#32;(sign&#32;in&#32;mantissa)</emphasis>
13873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!seen_exponent)
13874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;decimal&#32;digit&#32;or&#32;&apos;.&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13875 
13876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0e1-0&#32;(misplaced&#32;exponent&#32;sign)</emphasis>
13877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_match(*prev,&#32;U<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;E&apos;</emphasis>))
13878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;exponent&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_decimal_digit(*cp))
13881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!seen_decimal)
13883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!first_integer_part)
13885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first_integer_part&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>[0]);
13886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first_integer_part&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
13887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;leading&#32;zeroes&#32;are&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;decimal&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13892 
13893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chars[<link linkend="_namespacelength">length</link>++]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>[0]);
13894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;cp;
13895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
13896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13897 
13898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sanity-check&#32;ending&#32;state</emphasis>
13899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev)
13900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*prev&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
13902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
13904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;must&#32;be&#32;followed&#32;by&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*prev,&#32;U<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;E&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>))
13907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
13909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;decimal&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13912 
13913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;to&#32;double</emphasis>
13914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
13915 <emphasis role="preprocessor">#if&#32;TOML_FLOAT_CHARCONV</emphasis>
13916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;fc_result&#32;=&#32;std::from_chars(chars,&#32;chars&#32;+&#32;<link linkend="_namespacelength">length</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
13918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(fc_result.ec)
13919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a96d958d2281756956fce337b6a48cb63">TOML_LIKELY_CASE</link>
13921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::errc{}:&#32;<emphasis role="comment">//&#32;ok</emphasis>
13922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;*&#32;<link linkend="_namespacesign">sign</link>;
13923 
13924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::errc::invalid_argument:
13925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;chars,&#32;<link linkend="_namespacelength">length</link>&#32;},
13927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;could&#32;not&#32;be&#32;interpreted&#32;as&#32;a&#32;value&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13929 
13930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;std::errc::result_out_of_range:
13931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;chars,&#32;<link linkend="_namespacelength">length</link>&#32;},
13933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;is&#32;not&#32;representable&#32;in&#32;64&#32;bits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
13935 
13936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//??</emphasis>
13937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;an&#32;unspecified&#32;error&#32;occurred&#32;while&#32;trying&#32;to&#32;interpret&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;chars,&#32;<link linkend="_namespacelength">length</link>&#32;},
13939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;as&#32;a&#32;value&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13942 <emphasis role="preprocessor">#else</emphasis>
13943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ss;
13945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.imbue(std::locale::classic());
13946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.write(chars,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespacelength">length</link>));
13947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((ss&#32;&gt;&gt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>))
13948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;*&#32;<link linkend="_namespacesign">sign</link>;
13949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
13950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
13951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;chars,&#32;<link linkend="_namespacelength">length</link>&#32;},
13952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;could&#32;not&#32;be&#32;interpreted&#32;as&#32;a&#32;value&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13954 <emphasis role="preprocessor">#endif</emphasis>
13955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
13956 
13957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
13958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
13959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;parse_hex_float()
13960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
13962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
13963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>));
13964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;hexadecimal&#32;floating-point&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13965 
13966 <emphasis role="preprocessor">#if&#32;TOML_LANG_UNRELEASED&#32;</emphasis><emphasis role="comment">//&#32;toml/issues/562&#32;(hexfloats)</emphasis>
13967 
13968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sign</emphasis>
13969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacesign">sign</link>&#32;=&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;?&#32;-1&#32;:&#32;1;
13970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>))
13971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13972 
13973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;0&apos;</emphasis>
13974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>)
13975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;&#32;expected&#32;&apos;0&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13977 
13978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;x&apos;&#32;or&#32;&apos;X&apos;</emphasis>
13979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_match(*cp,&#32;U<emphasis role="charliteral">&apos;x&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;X&apos;</emphasis>))
13980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;x&apos;&#32;or&#32;&apos;X&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
13981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
13982 
13983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&lt;HEX&#32;DIGITS&gt;&#32;([.]&lt;HEX&#32;DIGITS&gt;)?&#32;[pP]&#32;[+-]?&#32;&lt;DEC&#32;DIGITS&gt;</emphasis>
13984 
13985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;consume&#32;value&#32;fragments</emphasis>
13986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>fragment
13987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
13988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;chars[24];
13989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>;
13990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_classvalue">value</link>;
13991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fragment&#32;fragments[]&#32;=&#32;{
13993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{},&#32;<emphasis role="comment">//&#32;mantissa,&#32;whole&#32;part</emphasis>
13994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{},&#32;<emphasis role="comment">//&#32;mantissa,&#32;fractional&#32;part</emphasis>
13995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}&#32;&#32;<emphasis role="comment">//&#32;exponent</emphasis>
13996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
13997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fragment*&#32;current_fragment&#32;=&#32;fragments;
13998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;prev&#32;=&#32;{};
13999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exponent_sign&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1;
14000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
14001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
14003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!prev&#32;||&#32;!is_hexadecimal_digit(*prev))
14005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;may&#32;only&#32;follow&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14006 
14007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;cp;
14008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
14010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;&amp;&amp;&#32;*prev&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>&#32;&amp;&amp;&#32;!is_hexadecimal_digit(*cp))
14012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;must&#32;be&#32;followed&#32;by&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>)
14014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10.0p-.0&#32;(exponent&#32;cannot&#32;have&#32;&apos;.&apos;)</emphasis>
14016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment&#32;==&#32;fragments&#32;+&#32;2)
14017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;exponent&#32;digit&#32;or&#32;sign,&#32;saw&#32;&apos;.&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14018 
14019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10.0.p-0&#32;(multiple&#32;&apos;.&apos;)</emphasis>
14020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment&#32;==&#32;fragments&#32;+&#32;1)
14021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;hexadecimal&#32;digit&#32;or&#32;exponent,&#32;saw&#32;&apos;.&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14022 
14023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_fragment++;
14025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;p&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;P&apos;</emphasis>))
14027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10.0pp-0&#32;(multiple&#32;&apos;p&apos;)</emphasis>
14029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment&#32;==&#32;fragments&#32;+&#32;2)
14030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;exponent&#32;digit&#32;or&#32;sign,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14031 
14032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x.p-0&#32;(mantissa&#32;is&#32;just&#32;&apos;.&apos;)</emphasis>
14033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fragments[0].<link linkend="_namespacelength">length</link>&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;&amp;&amp;&#32;fragments[1].<link linkend="_namespacelength">length</link>&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
14034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;hexadecimal&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14035 
14036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_fragment&#32;=&#32;fragments&#32;+&#32;2;
14038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>))
14040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x-10.0p-0&#32;(sign&#32;in&#32;mantissa)</emphasis>
14042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment&#32;!=&#32;fragments&#32;+&#32;2)
14043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;hexadecimal&#32;digit&#32;or&#32;&apos;.&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14044 
14045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10.0p0-&#32;(misplaced&#32;exponent&#32;sign)</emphasis>
14046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_match(*prev,&#32;U<emphasis role="charliteral">&apos;p&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;P&apos;</emphasis>))
14047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;exponent&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14048 
14049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exponent_sign&#32;=&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;?&#32;-1&#32;:&#32;1;
14051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment&#32;&lt;&#32;fragments&#32;+&#32;2&#32;&amp;&amp;&#32;!is_hexadecimal_digit(*cp))
14053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;hexadecimal&#32;digit&#32;or&#32;&apos;.&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment&#32;==&#32;fragments&#32;+&#32;2&#32;&amp;&amp;&#32;!is_decimal_digit(*cp))
14055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;exponent&#32;digit&#32;or&#32;sign,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment-&gt;length&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(fragment::chars))
14057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;fragment&#32;exceeeds&#32;maximum&#32;length&#32;of&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
14058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(fragment::chars),
14059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;characters&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_fragment-&gt;chars[current_fragment-&gt;length++]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>[0]);
14062 
14063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;cp;
14064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
14065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14066 
14067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sanity-check&#32;ending&#32;state</emphasis>
14068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_fragment&#32;!=&#32;fragments&#32;+&#32;2&#32;||&#32;current_fragment-&gt;length&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
14069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;missing&#32;exponent&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;&amp;&amp;&#32;*prev&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
14074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;must&#32;be&#32;followed&#32;by&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14078 
14079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;values&#32;for&#32;the&#32;three&#32;fragments</emphasis>
14080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;fragment_idx&#32;=&#32;0;&#32;fragment_idx&#32;&lt;&#32;3;&#32;fragment_idx++)
14081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;fragments[fragment_idx];
14083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;base&#32;=&#32;fragment_idx&#32;==&#32;2&#32;?&#32;10u&#32;:&#32;16u;
14084 
14085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;left-trim&#32;zeroes</emphasis>
14086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;c&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.chars;
14087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;sig&#32;&#32;&#32;&#32;=&#32;{};
14088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.length&#32;&amp;&amp;&#32;*c&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
14089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.length--;
14091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
14092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sig++;
14093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.length)
14095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
14096 
14097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;value</emphasis>
14098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;place&#32;=&#32;1u;
14099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.length&#32;-&#32;1u;&#32;i++)
14100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;place&#32;*=&#32;base;
14101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>{};
14102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(place)
14103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base&#32;==&#32;16)
14105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;+=&#32;place&#32;*&#32;hex_to_dec(*c);
14106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;+=&#32;place&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(*c&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
14108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fragment_idx&#32;==&#32;1)
14109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sig++;
14110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c++;
14111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;place&#32;/=&#32;base;
14112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.value&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
14114 
14115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;shift&#32;the&#32;fractional&#32;part</emphasis>
14116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fragment_idx&#32;==&#32;1)
14117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(sig--)
14119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>.value&#32;/=&#32;base;
14120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14122 
14123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(fragments[0].<link linkend="_classvalue">value</link>&#32;+&#32;fragments[1].<link linkend="_classvalue">value</link>)&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>(2.0,&#32;fragments[2].<link linkend="_classvalue">value</link>&#32;*&#32;exponent_sign)&#32;*&#32;<link linkend="_namespacesign">sign</link>;
14124 
14125 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;!TOML_LANG_UNRELEASED</emphasis>
14126 
14127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;hexadecimal&#32;floating-point&#32;values&#32;are&#32;not&#32;supported&#32;&quot;</emphasis>
14128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;in&#32;TOML&#32;1.0.0&#32;and&#32;earlier&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14129 
14130 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!TOML_LANG_UNRELEASED</emphasis>
14131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14132 
14133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;u<emphasis role="keywordtype">int</emphasis>64_t&#32;base&gt;
14134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
14136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;parse_integer()
14137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
14140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>traits&#32;=&#32;parse_integer_traits&lt;base&gt;;
14141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(traits::scope_qualifier);
14142 
14143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;<link linkend="_namespacesign">sign</link>&#32;=&#32;1;
14144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(traits::is_signed)
14145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacesign">sign</link>&#32;=&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;?&#32;-1&#32;:&#32;1;
14147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>))
14148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14150 
14151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(base&#32;==&#32;10)
14152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!traits::is_digit(*cp))
14154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;expected&#32;digit&#32;or&#32;sign,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;0&apos;</emphasis>
14159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>)
14160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;0&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14162 
14163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;b&apos;,&#32;&apos;o&apos;,&#32;&apos;x&apos;</emphasis>
14164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;traits::prefix_codepoint)
14165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;traits::prefix,&#32;<emphasis role="stringliteral">&quot;&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14167 
14168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!traits::is_digit(*cp))
14169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14171 
14172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;consume&#32;digits</emphasis>
14173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;digits[<link linkend="_classutf8__buffered__reader_1a93f9481db7eb9dceaf857956cfdb18a3">utf8_buffered_reader::max_history_length</link>];
14174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespacelength">length</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
14175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structutf8__codepoint">utf8_codepoint</link>*&#32;prev&#32;=&#32;{};
14176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
14177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
14179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!prev&#32;||&#32;!traits::is_digit(*prev))
14181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;may&#32;only&#32;follow&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14182 
14183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;cp;
14184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
14186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(prev&#32;&amp;&amp;&#32;*prev&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>&#32;&amp;&amp;&#32;!traits::is_digit(*cp))
14188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;must&#32;be&#32;followed&#32;by&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!traits::is_digit(*cp))
14190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;digit,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_namespacelength">length</link>&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(digits))
14192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;exceeds&#32;length&#32;limit&#32;of&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(digits),&#32;<emphasis role="stringliteral">&quot;&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits[<link linkend="_namespacelength">length</link>++]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(cp-&gt;<link linkend="_structutf8__codepoint_1a1bd739ffc7da1acc69ab281c736e1ca3">bytes</link>[0]);
14195 
14196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;cp;
14197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
14198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14199 
14200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sanity&#32;check&#32;ending&#32;state</emphasis>
14201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;&amp;&amp;&#32;*prev&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
14202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;underscores&#32;must&#32;be&#32;followed&#32;by&#32;digits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14206 
14207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;single&#32;digits&#32;can&#32;be&#32;converted&#32;trivially</emphasis>
14208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacelength">length</link>&#32;==&#32;1u)
14209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
14211 
14212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(base&#32;==&#32;16)
14213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(hex_to_dec(digits[0]));
14214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(digits[0]&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
14216 
14217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(traits::is_signed)
14218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;*=&#32;<link linkend="_namespacesign">sign</link>;
14219 
14220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
14221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14222 
14223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bin,&#32;oct&#32;and&#32;hex&#32;allow&#32;leading&#32;zeroes&#32;so&#32;trim&#32;them&#32;first</emphasis>
14224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;digits&#32;+&#32;<link linkend="_namespacelength">length</link>;
14225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;msd&#32;=&#32;digits;
14226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(base&#32;!=&#32;10)
14227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(msd&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;&amp;&amp;&#32;*msd&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
14229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msd++;
14230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msd&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
14231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0ll;
14232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14233 
14234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decimal&#32;integers&#32;do&#32;not&#32;allow&#32;leading&#32;zeroes</emphasis>
14235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(digits[0]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
14238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;leading&#32;zeroes&#32;are&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14240 
14241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;range&#32;check</emphasis>
14242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;-&#32;msd)&#32;&gt;&#32;traits::max_digits)
14243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
14244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits::full_prefix,
14245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;digits,&#32;<link linkend="_namespacelength">length</link>&#32;},
14246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;is&#32;not&#32;representable&#32;in&#32;64&#32;bits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14247 
14248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;the&#32;thing</emphasis>
14249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;{};
14251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;power&#32;=&#32;1;
14253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;&gt;=&#32;msd)
14254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(base&#32;==&#32;16)
14256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;power&#32;*&#32;hex_to_dec(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>);
14257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;+=&#32;power&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
14259 
14260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;power&#32;*=&#32;base;
14261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14263 
14264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;range&#32;check</emphasis>
14265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;i64_max&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>((std::numeric_limits&lt;int64_t&gt;::max)());
14266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;&gt;&#32;i64_max&#32;+&#32;(<link linkend="_namespacesign">sign</link>&#32;&lt;&#32;0&#32;?&#32;1u&#32;:&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>))
14267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
14268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits::full_prefix,
14269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;digits,&#32;<link linkend="_namespacelength">length</link>&#32;},
14270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;is&#32;not&#32;representable&#32;in&#32;64&#32;bits&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14271 
14272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(traits::is_signed)
14273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;avoid&#32;signed&#32;multiply&#32;UB&#32;when&#32;parsing&#32;INT64_MIN</emphasis>
14275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(<link linkend="_namespacesign">sign</link>&#32;&lt;&#32;0&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;==&#32;i64_max&#32;+&#32;1u)
14276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::numeric_limits&lt;int64_t&gt;::min)();
14277 
14278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)&#32;*&#32;<link linkend="_namespacesign">sign</link>;
14279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
14282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14284 
14285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
14287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;date&#32;parse_date(<emphasis role="keywordtype">bool</emphasis>&#32;part_of_datetime&#32;=&#32;<emphasis role="keyword">false</emphasis>)
14288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
14291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_decimal_digit(*cp));
14292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;date&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14293 
14294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;YYYY&quot;</emphasis>
14295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;digits[4];
14296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;4u))
14297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;4-digit&#32;year,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;year&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;digits[3]&#32;+&#32;digits[2]&#32;*&#32;10u&#32;+&#32;digits[1]&#32;*&#32;100u&#32;+&#32;digits[0]&#32;*&#32;1000u;
14299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_leap_year&#32;=&#32;(year&#32;%&#32;4u&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)&#32;&amp;&amp;&#32;((year&#32;%&#32;100u&#32;!=&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)&#32;||&#32;(year&#32;%&#32;400u&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>));
14300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14301 
14302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;-&apos;</emphasis>
14303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>)
14304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;-&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14306 
14307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;MM&quot;</emphasis>
14308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;2u))
14309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;2-digit&#32;month,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;month&#32;=&#32;digits[1]&#32;+&#32;digits[0]&#32;*&#32;10u;
14311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(month&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;||&#32;month&#32;&gt;&#32;12u)
14312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;month&#32;between&#32;1&#32;and&#32;12&#32;(inclusive),&#32;saw&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;month);
14313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;max_days_in_month&#32;=&#32;month&#32;==&#32;2u
14314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(is_leap_year&#32;?&#32;29u&#32;:&#32;28u)
14315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;(month&#32;==&#32;4u&#32;||&#32;month&#32;==&#32;6u&#32;||&#32;month&#32;==&#32;9u&#32;||&#32;month&#32;==&#32;11u&#32;?&#32;30u&#32;:&#32;31u);
14316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14317 
14318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;-&apos;</emphasis>
14319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>)
14320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;-&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14322 
14323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;DD&quot;</emphasis>
14324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;2u))
14325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;2-digit&#32;day,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;day&#32;=&#32;digits[1]&#32;+&#32;digits[0]&#32;*&#32;10u;
14327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(day&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;||&#32;day&#32;&gt;&#32;max_days_in_month)
14328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;day&#32;between&#32;1&#32;and&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
14329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_days_in_month,
14330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;(inclusive),&#32;saw&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
14331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;day);
14332 
14333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!part_of_datetime&#32;&amp;&amp;&#32;!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
14334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;value-terminator,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14335 
14336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;year,&#32;month,&#32;day&#32;};
14337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14338 
14339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
14341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;parse_time(<emphasis role="keywordtype">bool</emphasis>&#32;part_of_datetime&#32;=&#32;<emphasis role="keyword">false</emphasis>)
14342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
14345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_decimal_digit(*cp));
14346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;time&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14347 
14348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;max_digits&#32;=&#32;64;&#32;<emphasis role="comment">//&#32;far&#32;more&#32;than&#32;necessary&#32;but&#32;needed&#32;to&#32;allow&#32;fractional</emphasis>
14349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;millisecond&#32;truncation&#32;per&#32;the&#32;spec</emphasis>
14350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;digits[max_digits];
14351 
14352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;HH&quot;</emphasis>
14353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;2u))
14354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;2-digit&#32;hour,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;hour&#32;=&#32;digits[1]&#32;+&#32;digits[0]&#32;*&#32;10u;
14356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hour&#32;&gt;&#32;23u)
14357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;hour&#32;between&#32;0&#32;to&#32;59&#32;(inclusive),&#32;saw&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;hour);
14358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14359 
14360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;:&apos;</emphasis>
14361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;:&apos;</emphasis>)
14362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;:&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14364 
14365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;MM&quot;</emphasis>
14366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;2u))
14367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;2-digit&#32;minute,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;minute&#32;=&#32;digits[1]&#32;+&#32;digits[0]&#32;*&#32;10u;
14369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minute&#32;&gt;&#32;59u)
14370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;minute&#32;between&#32;0&#32;and&#32;59&#32;(inclusive),&#32;saw&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;minute);
14371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structtime">time</link>&#32;=&#32;toml::time{&#32;hour,&#32;minute&#32;};
14372 
14373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;:&apos;</emphasis>
14374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<link linkend="_toml_8hpp_1a649c9819492ed84229f80659f9f7a1a0">TOML_LANG_UNRELEASED</link>)&#32;<emphasis role="comment">//&#32;toml/issues/671&#32;(allow&#32;omission&#32;of&#32;seconds)</emphasis>
14375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;||&#32;is_value_terminator(*cp)&#32;||&#32;(part_of_datetime&#32;&amp;&amp;&#32;is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;Z&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>)))
14377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structtime">time</link>;
14378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;:&apos;</emphasis>)
14382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;:&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14384 
14385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;SS&quot;</emphasis>
14386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;2u))
14387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;2-digit&#32;second,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;second&#32;=&#32;digits[1]&#32;+&#32;digits[0]&#32;*&#32;10u;
14389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(second&#32;&gt;&#32;59u)
14390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;second&#32;between&#32;0&#32;and&#32;59&#32;(inclusive),&#32;saw&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;second);
14391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>.<link linkend="_structtime_1ab99c95365d82ac9fdc6646bf9f6107d0">second</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>decltype(<link linkend="_structtime">time</link>.second)<emphasis role="keyword">&gt;</emphasis>(second);
14392 
14393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;.&apos;&#32;(early-exiting&#32;is&#32;allowed;&#32;fractional&#32;is&#32;optional)</emphasis>
14394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;||&#32;is_value_terminator(*cp)&#32;||&#32;(part_of_datetime&#32;&amp;&amp;&#32;is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;Z&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>)))
14395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structtime">time</link>;
14396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>)
14397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;.&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14399 
14400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;FFFFFFFFF&quot;</emphasis>
14401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;digit_count&#32;=&#32;consume_variable_length_digit_sequence(digits,&#32;max_digits);
14402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!digit_count)
14403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;fractional&#32;digits,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
14408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digit_count&#32;==&#32;max_digits&#32;&amp;&amp;&#32;is_decimal_digit(*cp))
14410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;fractional&#32;component&#32;exceeds&#32;maximum&#32;precision&#32;of&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;max_digits);
14411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!part_of_datetime&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
14412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;value-terminator,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;
14415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;place&#32;=&#32;1u;
14416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;impl::min&lt;size_t&gt;(digit_count,&#32;9u);&#32;i--&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>;)
14417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;+=&#32;digits[i]&#32;*&#32;place;
14419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;place&#32;*=&#32;10u;
14420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;i&#32;=&#32;digit_count;&#32;i&#32;&lt;&#32;9u;&#32;i++)&#32;<emphasis role="comment">//&#32;implicit&#32;zeros</emphasis>
14422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;*=&#32;10u;
14423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>.<link linkend="_structtime_1a9a334075b0ad19b4a0402a7384ff4ea0">nanosecond</link>&#32;=&#32;<link linkend="_classvalue">value</link>;
14424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structtime">time</link>;
14425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14426 
14427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
14429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdate__time">date_time</link>&#32;parse_date_time()
14430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
14433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_decimal_digit(*cp));
14434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;date-time&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14435 
14436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;YYYY-MM-DD&quot;</emphasis>
14437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;date&#32;=&#32;parse_date(<emphasis role="keyword">true</emphasis>);
14438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14439 
14440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;&#32;&apos;,&#32;&apos;T&apos;&#32;or&#32;&apos;t&apos;</emphasis>
14441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_match(*cp,&#32;U<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;T&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;t&apos;</emphasis>))
14442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;space,&#32;&apos;T&apos;&#32;or&#32;&apos;t&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14444 
14445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;HH:MM:SS.FFFFFFFFF&quot;</emphasis>
14446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structtime">time</link>&#32;=&#32;parse_time(<emphasis role="keyword">true</emphasis>);
14447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14448 
14449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;no&#32;offset</emphasis>
14450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;||&#32;is_value_terminator(*cp))
14451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;date,&#32;<link linkend="_structtime">time</link>&#32;};
14452 
14453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;zero&#32;offset&#32;(&apos;Z&apos;&#32;or&#32;&apos;z&apos;)</emphasis>
14454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime__offset">time_offset</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>{};
14455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;Z&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>))
14456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
14457 
14458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;explicit&#32;offset&#32;(&quot;+/-HH:MM&quot;)</emphasis>
14459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>))
14460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;date-time&#32;offset&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14462 
14463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sign</emphasis>
14464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacesign">sign</link>&#32;=&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;?&#32;-1&#32;:&#32;1;
14465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14466 
14467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;HH&quot;</emphasis>
14468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;digits[2];
14469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;2u))
14470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;2-digit&#32;hour,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;hour&#32;=&#32;digits[1]&#32;+&#32;digits[0]&#32;*&#32;10;
14472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hour&#32;&gt;&#32;23)
14473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;hour&#32;between&#32;0&#32;and&#32;23&#32;(inclusive),&#32;saw&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;hour);
14474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
14475 
14476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;:&apos;</emphasis>
14477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;:&apos;</emphasis>)
14478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;:&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
14480 
14481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;MM&quot;</emphasis>
14482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!consume_digit_sequence(digits,&#32;2u))
14483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;2-digit&#32;minute,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;minute&#32;=&#32;digits[1]&#32;+&#32;digits[0]&#32;*&#32;10;
14485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minute&#32;&gt;&#32;59)
14486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;minute&#32;between&#32;0&#32;and&#32;59&#32;(inclusive),&#32;saw&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;minute);
14487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>.minutes&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>decltype(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>.minutes)<emphasis role="keyword">&gt;</emphasis>((hour&#32;*&#32;60&#32;+&#32;minute)&#32;*&#32;<link linkend="_namespacesign">sign</link>);
14488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14489 
14490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;!is_value_terminator(*cp))
14491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;value-terminator,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14492 
14493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;date,&#32;<link linkend="_structtime">time</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>&#32;};
14494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14495 
14496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;parse_array();
14498 
14499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;parse_inline_table();
14501 
14502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;parse_value_known_prefixes()
14504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
14507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!is_control_character(*cp));
14508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>);
14509 
14510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(cp-&gt;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>)
14511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arrays</emphasis>
14513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;[&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_array();
14514 
14515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;inline&#32;tables</emphasis>
14516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;{&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;parse_inline_table();
14517 
14518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;floats&#32;beginning&#32;with&#32;&apos;.&apos;</emphasis>
14519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_float()&#32;}&#32;};
14520 
14521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;strings</emphasis>
14522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:&#32;[[fallthrough]];
14523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_string().<link linkend="_structparsed__string_1a11310fc19c13d1f45b55f7c0c9861376">value</link>&#32;}&#32;};
14524 
14525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
14526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;cp_upper&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(cp-&gt;<link linkend="_structutf8__codepoint_1a5953a104977f8ea41005426dc6002624">value</link>)&#32;&amp;&#32;~0x20u;
14528 
14529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bools</emphasis>
14530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp_upper&#32;==&#32;70u&#32;||&#32;cp_upper&#32;==&#32;84u)&#32;<emphasis role="comment">//&#32;F&#32;or&#32;T</emphasis>
14531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_boolean()&#32;}&#32;};
14532 
14533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;inf/nan</emphasis>
14534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp_upper&#32;==&#32;73u&#32;||&#32;cp_upper&#32;==&#32;78u)&#32;<emphasis role="comment">//&#32;I&#32;or&#32;N</emphasis>
14535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_inf_or_nan()&#32;}&#32;};
14536 
14537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
14539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
14542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14543 
14544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
14545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;parse_value()
14546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
14549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!is_value_terminator(*cp));
14550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;value&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14551 
14552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdepth__counter__scope">depth_counter_scope</link>&#32;depth_counter{&#32;nested_values&#32;};
14553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(nested_values&#32;&gt;&#32;max_nested_values)
14554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;exceeded&#32;maximum&#32;nested&#32;value&#32;depth&#32;of&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
14555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_nested_values,
14556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;(TOML_MAX_NESTED_VALUES)&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14557 
14558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;it&#32;begins&#32;with&#32;some&#32;control&#32;character</emphasis>
14559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(note&#32;that&#32;this&#32;will&#32;also&#32;fail&#32;for&#32;whitespace&#32;but&#32;we&apos;re&#32;assuming&#32;we&apos;ve</emphasis>
14560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;consume_leading_whitespace()&#32;before&#32;calling&#32;parse_value())</emphasis>
14561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_control_character(*cp))
14562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;unexpected&#32;control&#32;character&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14563 
14564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;underscores&#32;at&#32;the&#32;beginning</emphasis>
14565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
14566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;values&#32;may&#32;not&#32;begin&#32;with&#32;underscores&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14567 
14568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;begin_pos&#32;=&#32;cp-&gt;<link linkend="_structutf8__codepoint_1a473b5beaa148f7c5358147304810dd90">position</link>;
14569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
14570 
14571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
14572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!is_control_character(*cp));
14574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>);
14575 
14576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;detect&#32;the&#32;value&#32;type&#32;and&#32;parse&#32;accordingly,</emphasis>
14577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;starting&#32;with&#32;value&#32;types&#32;that&#32;can&#32;be&#32;detected</emphasis>
14578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unambiguously&#32;from&#32;just&#32;one&#32;character.</emphasis>
14579 
14580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;parse_value_known_prefixes();
14581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
14583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14584 
14585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;types&#32;from&#32;here&#32;down&#32;require&#32;more&#32;than&#32;one&#32;character&#32;to&#32;unambiguously&#32;identify</emphasis>
14586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;scan&#32;ahead&#32;and&#32;collect&#32;a&#32;set&#32;of&#32;value&#32;&apos;traits&apos;.</emphasis>
14587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_toml_8hpp_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link>&#32;<link linkend="_structvalue__traits">value_traits</link>&#32;:&#32;<emphasis role="keywordtype">int</emphasis>
14588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_nothing&#32;&#32;=&#32;0,
14590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_digits&#32;&#32;&#32;=&#32;1,
14591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_b&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;1,&#32;<emphasis role="comment">//&#32;as&#32;second&#32;char&#32;only&#32;(0b)</emphasis>
14592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_e&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;2,&#32;<emphasis role="comment">//&#32;only&#32;float&#32;exponents</emphasis>
14593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_o&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;3,&#32;<emphasis role="comment">//&#32;as&#32;second&#32;char&#32;only&#32;(0o)</emphasis>
14594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_p&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;4,&#32;<emphasis role="comment">//&#32;only&#32;hexfloat&#32;exponents</emphasis>
14595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;5,
14596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_x&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;6,&#32;<emphasis role="comment">//&#32;as&#32;second&#32;or&#32;third&#32;char&#32;only&#32;(0x,&#32;-0x,&#32;+0x)</emphasis>
14597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_z&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;7,
14598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_colon&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;8,
14599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_plus&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;9,
14600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_minus&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;10,
14601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_dot&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;11,
14602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;begins_sign&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;12,
14603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;begins_digit&#32;=&#32;1&#32;&lt;&lt;&#32;13,
14604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;begins_zero&#32;&#32;=&#32;1&#32;&lt;&lt;&#32;14,
14605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;signs_msk&#32;&#32;=&#32;has_plus&#32;|&#32;has_minus,
14606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bdigit_msk&#32;=&#32;has_digits&#32;|&#32;begins_digit,
14607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bzero_msk&#32;&#32;=&#32;bdigit_msk&#32;|&#32;begins_zero,
14608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
14609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structvalue__traits">value_traits</link>&#32;traits&#32;&#32;=&#32;has_nothing;
14610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;has_any&#32;&#32;&#32;=&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(traits&#32;&amp;&#32;t)&#32;!=&#32;has_nothing;&#32;};
14611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;has_none&#32;&#32;=&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(traits&#32;&amp;&#32;t)&#32;==&#32;has_nothing;&#32;};
14612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;add_trait&#32;=&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;t)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;traits&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_structvalue__traits">value_traits</link><emphasis role="keyword">&gt;</emphasis>(traits&#32;|&#32;t);&#32;};
14613 
14614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;examine&#32;the&#32;first&#32;character&#32;to&#32;get&#32;the&#32;&apos;begins&#32;with&apos;&#32;traits</emphasis>
14615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(good&#32;fail-fast&#32;opportunity;&#32;all&#32;the&#32;remaining&#32;types&#32;begin&#32;with&#32;numeric&#32;digits&#32;or&#32;signs)</emphasis>
14616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_decimal_digit(*cp))
14617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(begins_digit);
14619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>)
14620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(begins_zero);
14621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(*cp,&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>))
14623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(begins_sign);
14624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14626 
14627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;scan&#32;the&#32;rest&#32;of&#32;the&#32;value&#32;to&#32;determine&#32;the&#32;remaining&#32;traits</emphasis>
14628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char32_t</emphasis>&#32;chars[<link linkend="_classutf8__buffered__reader_1a93f9481db7eb9dceaf857956cfdb18a3">utf8_buffered_reader::max_history_length</link>];
14629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;char_count&#32;=&#32;{},&#32;advance_count&#32;=&#32;{};
14630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;eof_while_scanning&#32;=&#32;<emphasis role="keyword">false</emphasis>;
14631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;scan&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;[&amp;]()&#32;<emphasis role="keyword">noexcept</emphasis>(!<link linkend="_toml_8hpp_1a7006a81cb3a4676d1514dedfb77a1993">TOML_COMPILER_HAS_EXCEPTIONS</link>)
14632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>())
14634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
14635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!is_value_terminator(*cp));
14636 
14637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
14638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;c&#32;=&#32;**cp;&#32;c&#32;!=&#32;U<emphasis role="charliteral">&apos;_&apos;</emphasis>)
14640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chars[char_count++]&#32;=&#32;c;
14642 
14643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_decimal_digit(c))
14644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(has_digits);
14645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_ascii_letter(c))
14646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>((c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>)&#32;||&#32;(c&#32;&gt;=&#32;U<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;Z&apos;</emphasis>));
14648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char32_t</emphasis><emphasis role="keyword">&gt;</emphasis>(c&#32;|&#32;32u))
14649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;b&apos;</emphasis>:
14651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(char_count&#32;==&#32;2u&#32;&amp;&amp;&#32;has_any(begins_zero))
14652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(has_b);
14653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14654 
14655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;e&apos;</emphasis>:
14656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(char_count&#32;&gt;&#32;1u
14657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;has_none(has_b&#32;|&#32;has_o&#32;|&#32;has_p&#32;|&#32;has_t&#32;|&#32;has_x&#32;|&#32;has_z&#32;|&#32;has_colon)
14658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(has_none(has_plus&#32;|&#32;has_minus)&#32;||&#32;has_any(begins_sign)))
14659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(has_e);
14660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14661 
14662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;o&apos;</emphasis>:
14663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(char_count&#32;==&#32;2u&#32;&amp;&amp;&#32;has_any(begins_zero))
14664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(has_o);
14665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14666 
14667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;p&apos;</emphasis>:
14668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(has_x))
14669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(has_p);
14670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14671 
14672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;x&apos;</emphasis>:
14673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((char_count&#32;==&#32;2u&#32;&amp;&amp;&#32;has_any(begins_zero))
14674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(char_count&#32;==&#32;3u&#32;&amp;&amp;&#32;has_any(begins_sign)&#32;&amp;&amp;&#32;chars[1]&#32;==&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>))
14675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(has_x);
14676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14677 
14678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;t&apos;</emphasis>:&#32;add_trait(has_t);&#32;<emphasis role="keywordflow">break</emphasis>;
14679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;z&apos;</emphasis>:&#32;add_trait(has_z);&#32;<emphasis role="keywordflow">break</emphasis>;
14680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;=&#32;U<emphasis role="charliteral">&apos;:&apos;</emphasis>)
14683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(c&#32;&lt;&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;c&#32;&gt;&#32;U<emphasis role="charliteral">&apos;9&apos;</emphasis>);
14685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)
14686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;+&apos;</emphasis>:&#32;add_trait(has_plus);&#32;<emphasis role="keywordflow">break</emphasis>;
14688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>:&#32;add_trait(has_minus);&#32;<emphasis role="keywordflow">break</emphasis>;
14689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>:&#32;add_trait(has_dot);&#32;<emphasis role="keywordflow">break</emphasis>;
14690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;:&apos;</emphasis>:&#32;add_trait(has_colon);&#32;<emphasis role="keywordflow">break</emphasis>;
14691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14694 
14695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>();
14696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance_count++;
14697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eof_while_scanning&#32;=&#32;<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>();
14698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(advance_count&#32;&lt;&#32;(<link linkend="_classutf8__buffered__reader_1a93f9481db7eb9dceaf857956cfdb18a3">utf8_buffered_reader::max_history_length</link>&#32;-&#32;1u)&#32;&amp;&amp;&#32;!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()
14700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_value_terminator(*cp));
14701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
14702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scan();
14703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14704 
14705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;force&#32;further&#32;scanning&#32;if&#32;this&#32;could&#32;have&#32;been&#32;a&#32;date-time&#32;with&#32;a&#32;space&#32;instead&#32;of&#32;a&#32;T</emphasis>
14706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(char_count&#32;==&#32;10u&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
14707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(traits&#32;|&#32;begins_zero)&#32;==&#32;(bzero_msk&#32;|&#32;has_minus)&#32;<emphasis role="comment">//</emphasis>
14708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;chars[4]&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
14709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;chars[7]&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
14710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
14711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;*cp&#32;==&#32;U<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)
14712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;pre_advance_count&#32;=&#32;advance_count;
14714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;pre_scan_traits&#32;&#32;&#32;=&#32;traits;
14715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chars[char_count++]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;*cp;
14716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;add_trait(has_t);
14717 
14718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;backpedal&#32;=&#32;[&amp;]()&#32;<emphasis role="keyword">noexcept</emphasis>
14719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;go_back(advance_count&#32;-&#32;pre_advance_count);
14721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance_count&#32;=&#32;pre_advance_count;
14722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;pre_scan_traits;
14723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_count&#32;&#32;&#32;&#32;=&#32;10u;
14724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
14725 
14726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
14727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance_count++;
14728 
14729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;||&#32;!is_decimal_digit(*cp))
14730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;backpedal();
14731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chars[char_count++]&#32;=&#32;*cp;
14734 
14735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
14736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance_count++;
14737 
14738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scan();
14739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14740 
14741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(char_count&#32;==&#32;12u)
14742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;backpedal();
14743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14745 
14746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;the&#32;reader&#32;back&#32;to&#32;where&#32;we&#32;started</emphasis>
14747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;go_back(advance_count);
14748 
14749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;after&#32;scanning&#32;ahead&#32;we&#32;still&#32;only&#32;have&#32;one&#32;value&#32;character,</emphasis>
14750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;only&#32;valid&#32;value&#32;type&#32;is&#32;an&#32;integer.</emphasis>
14751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(char_count&#32;==&#32;1u)
14752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(begins_digit))
14754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(chars[0]&#32;-&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;});
14756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance();&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;digit</emphasis>
14757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14759 
14760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;anything&#32;else&#32;would&#32;be&#32;ambiguous.</emphasis>
14761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
14762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(eof_while_scanning&#32;?&#32;<emphasis role="stringliteral">&quot;encountered&#32;end-of-file&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
14763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;could&#32;not&#32;determine&#32;value&#32;type&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14765 
14766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;now&#32;things&#32;that&#32;can&#32;be&#32;identified&#32;from&#32;two&#32;or&#32;more&#32;characters</emphasis>
14767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(char_count&#32;&gt;=&#32;2u);
14769 
14770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;some&#32;&apos;fuzzy&#32;matching&apos;&#32;where&#32;there&apos;s&#32;no&#32;ambiguity,&#32;since&#32;that&#32;allows&#32;the&#32;specific</emphasis>
14771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typed&#32;parse&#32;functions&#32;to&#32;take&#32;over&#32;and&#32;show&#32;better&#32;diagnostics&#32;if&#32;there&apos;s&#32;an&#32;issue</emphasis>
14772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(as&#32;opposed&#32;to&#32;the&#32;fallback&#32;&quot;could&#32;not&#32;determine&#32;type&quot;&#32;message)</emphasis>
14773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(has_p))
14774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_hex_float()&#32;});
14775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(has_x&#32;|&#32;has_o&#32;|&#32;has_b))
14776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;i;
14778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>;
14779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(has_x))
14780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;&#32;&#32;&#32;&#32;=&#32;parse_integer&lt;16&gt;();
14782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;value_flags::format_as_hexadecimal;
14783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(has_o))
14785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;&#32;&#32;&#32;&#32;=&#32;parse_integer&lt;8&gt;();
14787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;value_flags::format_as_octal;
14788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;has_b</emphasis>
14790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;&#32;&#32;&#32;&#32;=&#32;parse_integer&lt;2&gt;();
14792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;value_flags::format_as_binary;
14793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14795 
14796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;i&#32;});
14797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;ref_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
14798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(has_e)&#32;||&#32;(has_any(begins_digit)&#32;&amp;&amp;&#32;chars[1]&#32;==&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>))
14800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_float()&#32;});
14801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(has_any(begins_sign))
14802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;single-digit&#32;signed&#32;integers</emphasis>
14804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(char_count&#32;==&#32;2u&#32;&amp;&amp;&#32;has_any(has_digits))
14805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(chars[1]&#32;-&#32;U<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;*&#32;(chars[0]&#32;==&#32;U<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;?&#32;-1LL&#32;:&#32;1LL)&#32;});
14807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance();&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;sign</emphasis>
14808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;advance();&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;digit</emphasis>
14809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14811 
14812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simple&#32;signed&#32;floats&#32;(e.g.&#32;+1.0)</emphasis>
14813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_decimal_digit(chars[1])&#32;&amp;&amp;&#32;chars[2]&#32;==&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>)
14814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_float()&#32;});
14815 
14816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;signed&#32;infinity&#32;or&#32;nan</emphasis>
14817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_match(chars[1],&#32;U<emphasis role="charliteral">&apos;i&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;n&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;I&apos;</emphasis>,&#32;U<emphasis role="charliteral">&apos;N&apos;</emphasis>))
14818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_inf_or_nan()&#32;});
14819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14820 
14821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
14822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
14823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14824 
14825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;match&#32;trait&#32;masks&#32;against&#32;what&#32;they&#32;can&#32;match&#32;exclusively.</emphasis>
14826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;correct&#32;value&#32;parses&#32;will&#32;come&#32;out&#32;of&#32;this&#32;list,&#32;so&#32;doing&#32;this&#32;as&#32;a&#32;switch&#32;is&#32;likely&#32;to</emphasis>
14827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;be&#32;a&#32;better&#32;friend&#32;to&#32;the&#32;optimizer&#32;on&#32;the&#32;success&#32;path&#32;(failure&#32;path&#32;can&#32;be&#32;slow&#32;but&#32;that</emphasis>
14828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;doesn&apos;t&#32;matter&#32;much).</emphasis>
14829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(unwrap_enum(traits))
14830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;binary&#32;integers</emphasis>
14832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0b10</emphasis>
14833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_b:
14834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_integer&lt;2&gt;()&#32;});
14835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;ref_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>(value_flags::format_as_binary);
14836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14837 
14838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;octal&#32;integers</emphasis>
14839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0o10</emphasis>
14840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_o:
14841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_integer&lt;8&gt;()&#32;});
14842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;ref_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>(value_flags::format_as_octal);
14843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14844 
14845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decimal&#32;integers</emphasis>
14846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;00</emphasis>
14847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;10</emphasis>
14848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+10</emphasis>
14849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-10</emphasis>
14850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk:&#32;[[fallthrough]];
14851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk:&#32;[[fallthrough]];
14852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_minus:&#32;[[fallthrough]];
14853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_plus:
14854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
14855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;value&#32;was&#32;so&#32;long&#32;we&#32;exhausted&#32;the&#32;history&#32;buffer&#32;it&apos;s&#32;reasonable&#32;to&#32;assume</emphasis>
14856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;there&#32;was&#32;more&#32;and&#32;the&#32;value&apos;s&#32;actual&#32;type&#32;is&#32;impossible&#32;to&#32;identify&#32;without&#32;making&#32;the</emphasis>
14857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;buffer&#32;bigger&#32;(since&#32;it&#32;could&#32;have&#32;actually&#32;been&#32;a&#32;float),&#32;so&#32;emit&#32;an&#32;error.</emphasis>
14858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
14859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(this&#32;will&#32;likely&#32;only&#32;come&#32;up&#32;during&#32;fuzzing&#32;and&#32;similar&#32;scenarios)</emphasis>
14860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;max_numeric_value_length&#32;=
14861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classutf8__buffered__reader_1a93f9481db7eb9dceaf857956cfdb18a3">utf8_buffered_reader::max_history_length</link>&#32;-&#32;2u;
14862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!eof_while_scanning&#32;&amp;&amp;&#32;advance_count&#32;&gt;&#32;max_numeric_value_length)
14863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;numeric&#32;value&#32;too&#32;long&#32;to&#32;identify&#32;type&#32;-&#32;cannot&#32;exceed&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
14864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_numeric_value_length,
14865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;characters&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
14866 
14867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_integer&lt;10&gt;()&#32;});
14868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
14870 
14871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hexadecimal&#32;integers</emphasis>
14872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10</emphasis>
14873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_x:
14874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_integer&lt;16&gt;()&#32;});
14875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;ref_cast&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>(value_flags::format_as_hexadecimal);
14876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14877 
14878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;decimal&#32;floats</emphasis>
14879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0e1</emphasis>
14880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0e-1</emphasis>
14881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0e+1</emphasis>
14882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0.0</emphasis>
14883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0.0e1</emphasis>
14884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0.0e-1</emphasis>
14885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0.0e+1</emphasis>
14886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_e:&#32;[[fallthrough]];
14887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_e&#32;|&#32;has_minus:&#32;[[fallthrough]];
14888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_e&#32;|&#32;has_plus:&#32;[[fallthrough]];
14889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_dot:&#32;[[fallthrough]];
14890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_dot&#32;|&#32;has_e:&#32;[[fallthrough]];
14891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_dot&#32;|&#32;has_e&#32;|&#32;has_minus:&#32;[[fallthrough]];
14892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_dot&#32;|&#32;has_e&#32;|&#32;has_plus:&#32;[[fallthrough]];
14893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1e1</emphasis>
14894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1e-1</emphasis>
14895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1e+1</emphasis>
14896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0</emphasis>
14897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0e1</emphasis>
14898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0e-1</emphasis>
14899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.0e+1</emphasis>
14900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_e:&#32;[[fallthrough]];
14901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_e&#32;|&#32;has_minus:&#32;[[fallthrough]];
14902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_e&#32;|&#32;has_plus:&#32;[[fallthrough]];
14903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_dot:&#32;[[fallthrough]];
14904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_dot&#32;|&#32;has_e:&#32;[[fallthrough]];
14905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_dot&#32;|&#32;has_e&#32;|&#32;has_minus:&#32;[[fallthrough]];
14906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_dot&#32;|&#32;has_e&#32;|&#32;has_plus:&#32;[[fallthrough]];
14907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+1e1</emphasis>
14908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+1.0</emphasis>
14909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+1.0e1</emphasis>
14910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+1.0e+1</emphasis>
14911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+1.0e-1</emphasis>
14912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1.0e+1</emphasis>
14913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_e&#32;|&#32;has_plus:&#32;[[fallthrough]];
14914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_dot&#32;|&#32;has_plus:&#32;[[fallthrough]];
14915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_dot&#32;|&#32;has_e&#32;|&#32;has_plus:&#32;[[fallthrough]];
14916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_dot&#32;|&#32;has_e&#32;|&#32;signs_msk:&#32;[[fallthrough]];
14917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1e1</emphasis>
14918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1e+1</emphasis>
14919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+1e-1</emphasis>
14920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1.0</emphasis>
14921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1.0e1</emphasis>
14922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-1.0e-1</emphasis>
14923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_e&#32;|&#32;has_minus:&#32;[[fallthrough]];
14924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_e&#32;|&#32;signs_msk:&#32;[[fallthrough]];
14925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_dot&#32;|&#32;has_minus:&#32;[[fallthrough]];
14926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_dot&#32;|&#32;has_e&#32;|&#32;has_minus:
14927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_float()&#32;});
14928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14929 
14930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hexadecimal&#32;floats</emphasis>
14931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10p0</emphasis>
14932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10p-0</emphasis>
14933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10p+0</emphasis>
14934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_x&#32;|&#32;has_p:&#32;[[fallthrough]];
14935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_x&#32;|&#32;has_p&#32;|&#32;has_minus:&#32;[[fallthrough]];
14936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_x&#32;|&#32;has_p&#32;|&#32;has_plus:&#32;[[fallthrough]];
14937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-0x10p0</emphasis>
14938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-0x10p-0</emphasis>
14939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+0x10p0</emphasis>
14940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+0x10p+0</emphasis>
14941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-0x10p+0</emphasis>
14942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+0x10p-0</emphasis>
14943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_x&#32;|&#32;has_p&#32;|&#32;has_minus:&#32;[[fallthrough]];
14944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_x&#32;|&#32;has_p&#32;|&#32;has_plus:&#32;[[fallthrough]];
14945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_x&#32;|&#32;has_p&#32;|&#32;signs_msk:&#32;[[fallthrough]];
14946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10.1p0</emphasis>
14947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10.1p-0</emphasis>
14948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0x10.1p+0</emphasis>
14949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_x&#32;|&#32;has_dot&#32;|&#32;has_p:&#32;[[fallthrough]];
14950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_x&#32;|&#32;has_dot&#32;|&#32;has_p&#32;|&#32;has_minus:&#32;[[fallthrough]];
14951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_x&#32;|&#32;has_dot&#32;|&#32;has_p&#32;|&#32;has_plus:&#32;[[fallthrough]];
14952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-0x10.1p0</emphasis>
14953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-0x10.1p-0</emphasis>
14954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+0x10.1p0</emphasis>
14955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+0x10.1p+0</emphasis>
14956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-0x10.1p+0</emphasis>
14957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+0x10.1p-0</emphasis>
14958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_x&#32;|&#32;has_dot&#32;|&#32;has_p&#32;|&#32;has_minus:&#32;[[fallthrough]];
14959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_x&#32;|&#32;has_dot&#32;|&#32;has_p&#32;|&#32;has_plus:&#32;[[fallthrough]];
14960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;begins_sign&#32;|&#32;has_digits&#32;|&#32;has_x&#32;|&#32;has_dot&#32;|&#32;has_p&#32;|&#32;signs_msk:
14961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_hex_float()&#32;});
14962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
14963 
14964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;times</emphasis>
14965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HH:MM</emphasis>
14966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HH:MM:SS</emphasis>
14967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HH:MM:SS.FFFFFF</emphasis>
14968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_colon:&#32;[[fallthrough]];
14969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_colon&#32;|&#32;has_dot:&#32;[[fallthrough]];
14970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_colon:&#32;[[fallthrough]];
14971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_colon&#32;|&#32;has_dot:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_time()&#32;});&#32;<emphasis role="keywordflow">break</emphasis>;
14972 
14973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;local&#32;dates</emphasis>
14974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD</emphasis>
14975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_minus:&#32;[[fallthrough]];
14976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_minus:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_date()&#32;});&#32;<emphasis role="keywordflow">break</emphasis>;
14977 
14978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;date-times</emphasis>
14979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM</emphasis>
14980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM-HH:MM</emphasis>
14981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM+HH:MM</emphasis>
14982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM</emphasis>
14983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM-HH:MM</emphasis>
14984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM+HH:MM</emphasis>
14985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SS</emphasis>
14986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SS-HH:MM</emphasis>
14987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SS+HH:MM</emphasis>
14988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SS</emphasis>
14989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SS-HH:MM</emphasis>
14990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SS+HH:MM</emphasis>
14991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_t:&#32;[[fallthrough]];
14992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;signs_msk&#32;|&#32;has_colon&#32;|&#32;has_t:&#32;[[fallthrough]];
14993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_t:&#32;[[fallthrough]];
14994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;signs_msk&#32;|&#32;has_colon&#32;|&#32;has_t:&#32;[[fallthrough]];
14995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SS.FFFFFF</emphasis>
14996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SS.FFFFFF-HH:MM</emphasis>
14997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SS.FFFFFF+HH:MM</emphasis>
14998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SS.FFFFFF</emphasis>
14999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SS.FFFFFF-HH:MM</emphasis>
15000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SS.FFFFFF+HH:MM</emphasis>
15001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_dot&#32;|&#32;has_t:&#32;[[fallthrough]];
15002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;signs_msk&#32;|&#32;has_colon&#32;|&#32;has_dot&#32;|&#32;has_t:&#32;[[fallthrough]];
15003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_dot&#32;|&#32;has_t:&#32;[[fallthrough]];
15004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;signs_msk&#32;|&#32;has_colon&#32;|&#32;has_dot&#32;|&#32;has_t:&#32;[[fallthrough]];
15005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MMZ</emphasis>
15006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MMZ</emphasis>
15007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SSZ</emphasis>
15008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SSZ</emphasis>
15009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DDTHH:MM:SS.FFFFFFZ</emphasis>
15010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;YYYY-MM-DD&#32;HH:MM:SS.FFFFFFZ</emphasis>
15011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_z&#32;|&#32;has_t:&#32;[[fallthrough]];
15012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bzero_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_dot&#32;|&#32;has_z&#32;|&#32;has_t:&#32;[[fallthrough]];
15013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_z&#32;|&#32;has_t:&#32;[[fallthrough]];
15014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;bdigit_msk&#32;|&#32;has_minus&#32;|&#32;has_colon&#32;|&#32;has_dot&#32;|&#32;has_z&#32;|&#32;has_t:
15015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reset(<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classvalue">value</link>{&#32;parse_date_time()&#32;});
15016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">false</emphasis>);
15020 
15021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
15022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_at(begin_pos,&#32;<emphasis role="stringliteral">&quot;could&#32;not&#32;determine&#32;value&#32;type&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8f28cbcf24d908558aeb26e271823adf">return_after_error</link>({});
15025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15026 
15027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>-&gt;source_&#32;=&#32;{&#32;begin_pos,&#32;current_position(1),&#32;reader.<link linkend="_classutf8__buffered__reader_1a82f28b3ba60daf554b34e7b588cd26a7">source_path</link>()&#32;};
15028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
15029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15030 
15031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
15032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_key()
15033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
15036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_bare_key_character(*cp)&#32;||&#32;is_string_delimiter(*cp));
15037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;key&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15038 
15039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_buffer.clear();
15040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_whitespace&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15041 
15042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())
15043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;key_segment;
15045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_begin&#32;=&#32;current_position();
15046 
15047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bare_key_segment</emphasis>
15048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_bare_key_character(*cp))
15049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_segment&#32;=&#32;parse_bare_key_segment();
15050 
15051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;quoted&#32;key&#32;segment&quot;</emphasis>
15052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_string_delimiter(*cp))
15053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;begin_pos&#32;=&#32;cp-&gt;position;
15055 
15056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_whitespace&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structparsed__string">parsed_string</link>&#32;str&#32;&#32;&#32;&#32;=&#32;parse_string();
15058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recording_whitespace&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15060 
15061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str.<link linkend="_structparsed__string_1a34d7b66e6e51904b3c58712c47207336">was_multi_line</link>)
15062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_at(begin_pos,
15064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;multi-line&#32;strings&#32;are&#32;prohibited&#32;in&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_buffer.empty()&#32;?&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;dotted&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;keys&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8f28cbcf24d908558aeb26e271823adf">return_after_error</link>({});
15068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_segment&#32;=&#32;str.<link linkend="_structparsed__string_1a11310fc19c13d1f45b55f7c0c9861376">value</link>;
15071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15072 
15073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;???</emphasis>
15074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;bare&#32;key&#32;starting&#32;character&#32;or&#32;string&#32;delimiter,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),
15077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15078 
15079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key_end&#32;=&#32;current_position();
15080 
15081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;whitespace&#32;following&#32;the&#32;key&#32;segment</emphasis>
15082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15083 
15084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;store&#32;segment</emphasis>
15085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_buffer.push_back(key_segment,&#32;key_begin,&#32;key_end);
15086 
15087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;eof&#32;or&#32;no&#32;more&#32;key&#32;to&#32;come</emphasis>
15088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;||&#32;*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;.&apos;</emphasis>)
15089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15090 
15091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;was&#32;a&#32;dotted&#32;key&#32;-&#32;go&#32;around&#32;again</emphasis>
15092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15097 
15098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
15099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15100 
15101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
15102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key&#32;make_key(<emphasis role="keywordtype">size_t</emphasis>&#32;segment_index)<emphasis role="keyword">&#32;const</emphasis>
15103 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
15104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(key_buffer.size()&#32;&gt;&#32;segment_index);
15105 
15106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;key{
15107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_buffer[segment_index],
15108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__region">source_region</link>{&#32;key_buffer.starts[segment_index],&#32;key_buffer.ends[segment_index],&#32;root.source().path&#32;}
15109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
15110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15111 
15112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
15113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
15114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;parse_table_header()
15115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
15118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;[&apos;</emphasis>);
15119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;table&#32;header&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15120 
15121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structsource__position">source_position</link>&#32;header_begin_pos&#32;=&#32;cp-&gt;position;
15122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;header_end_pos;
15123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_arr&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15124 
15125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parse&#32;header</emphasis>
15126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;first&#32;&apos;[&apos;</emphasis>
15128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15129 
15130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;past&#32;any&#32;whitespace&#32;that&#32;followed&#32;the&#32;&apos;[&apos;</emphasis>
15131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;had_leading_whitespace&#32;=&#32;consume_leading_whitespace();
15132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15133 
15134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;second&#32;&apos;[&apos;&#32;(if&#32;present)</emphasis>
15135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;[&apos;</emphasis>)
15136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(had_leading_whitespace)
15138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(
15139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;[[array-of-table]]&#32;brackets&#32;must&#32;be&#32;contiguous&#32;(i.e.&#32;[&#32;[&#32;this&#32;]&#32;]&#32;is&#32;prohibited)&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15140 
15141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_arr&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15143 
15144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;past&#32;any&#32;whitespace&#32;that&#32;followed&#32;the&#32;&apos;[&apos;</emphasis>
15145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15148 
15149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;for&#32;a&#32;premature&#32;closing&#32;&apos;]&apos;</emphasis>
15150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;]&apos;</emphasis>)
15151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;tables&#32;with&#32;blank&#32;bare&#32;keys&#32;are&#32;explicitly&#32;prohibited&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15152 
15153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;the&#32;actual&#32;key</emphasis>
15154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start_recording();
15155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_key();
15156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_recording(1u);
15157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15158 
15159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;past&#32;any&#32;whitespace&#32;that&#32;followed&#32;the&#32;key</emphasis>
15160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15163 
15164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;consume&#32;the&#32;closing&#32;&apos;]&apos;</emphasis>
15165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;]&apos;</emphasis>)
15166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;]&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_arr)
15168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;]&apos;</emphasis>)
15171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;]&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
15174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;header_end_pos&#32;=&#32;current_position(1);
15175 
15176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;the&#32;rest&#32;of&#32;the&#32;line&#32;after&#32;the&#32;header</emphasis>
15177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;!consume_comment()&#32;&amp;&amp;&#32;!consume_line_break())
15179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;a&#32;comment&#32;or&#32;whitespace,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(!key_buffer.empty());
15182 
15183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;if&#32;each&#32;parent&#32;is&#32;a&#32;table/table&#32;array,&#32;or&#32;can&#32;be&#32;created&#32;implicitly&#32;as&#32;a&#32;table.</emphasis>
15184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;parent&#32;=&#32;&amp;root;
15185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0,&#32;e&#32;=&#32;key_buffer.size()&#32;-&#32;1u;&#32;i&#32;&lt;&#32;e;&#32;i++)
15186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string_view&#32;segment&#32;=&#32;key_buffer[i];
15188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;pit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;parent-&gt;<link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link>(segment);
15189 
15190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parent&#32;already&#32;existed</emphasis>
15191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pit&#32;!=&#32;parent-&gt;<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>()&#32;&amp;&amp;&#32;pit-&gt;first&#32;==&#32;segment)
15192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;p&#32;=&#32;pit-&gt;second;
15194 
15195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;p.as_table())
15196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adding&#32;to&#32;closed&#32;inline&#32;tables&#32;is&#32;illegal</emphasis>
15198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl-&gt;is_inline()&#32;&amp;&amp;&#32;!impl::find(open_inline_tables.begin(),&#32;open_inline_tables.end(),&#32;tbl))
15199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;cannot&#32;insert&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
15201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;into&#32;existing&#32;inline&#32;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15202 
15203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent&#32;=&#32;tbl;
15204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;p.<link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link>();&#32;arr&#32;&amp;&amp;&#32;impl::find(table_arrays.begin(),&#32;table_arrays.end(),&#32;arr))
15206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;table&#32;arrays&#32;are&#32;a&#32;special&#32;case;</emphasis>
15208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;spec&#32;dictates&#32;we&#32;select&#32;the&#32;most&#32;recently&#32;declared&#32;element&#32;in&#32;the&#32;array.</emphasis>
15209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(!arr-&gt;<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>());
15210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(arr-&gt;<link linkend="_classarray_1a379242a7c65182981d5ce24535c58296">back</link>().is_table());
15211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent&#32;=&#32;&amp;arr-&gt;<link linkend="_classarray_1a379242a7c65182981d5ce24535c58296">back</link>().ref_cast&lt;<link linkend="_classtable">table</link>&gt;();
15212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_arr&#32;&amp;&amp;&#32;p.type()&#32;==&#32;node_type::table)
15216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;cannot&#32;redefine&#32;existing&#32;table&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
15218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;cannot&#32;redefine&#32;existing&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(p.type()),
15222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
15224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;as&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_arr&#32;?&#32;<emphasis role="stringliteral">&quot;array-of-tables&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15228 
15229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;create&#32;a&#32;new&#32;implicit&#32;table</emphasis>
15230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pit&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;parent-&gt;emplace_hint&lt;<link linkend="_classtable">table</link>&gt;(pit,&#32;make_key(i));
15233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;p&#32;&#32;=&#32;pit-&gt;second.ref_cast&lt;<link linkend="_classtable">table</link>&gt;();
15234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p.source_&#32;=&#32;{&#32;header_begin_pos,&#32;header_end_pos,&#32;reader.source_path()&#32;};
15235 
15236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;implicit_tables.push_back(&amp;p);
15237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent&#32;=&#32;&amp;p;
15238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15240 
15241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;last_segment&#32;=&#32;key_buffer.back();
15242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;parent-&gt;<link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link>(last_segment);
15243 
15244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;there&#32;was&#32;already&#32;a&#32;matching&#32;node&#32;some&#32;sanity&#32;checking&#32;is&#32;necessary;</emphasis>
15245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;is&#32;ok&#32;if&#32;we&apos;re&#32;making&#32;an&#32;array&#32;and&#32;the&#32;existing&#32;element&#32;is&#32;already&#32;an&#32;array&#32;(new&#32;element)</emphasis>
15246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;if&#32;we&apos;re&#32;making&#32;a&#32;table&#32;and&#32;the&#32;existing&#32;element&#32;is&#32;an&#32;implicitly-created&#32;table&#32;(promote&#32;it),</emphasis>
15247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;this&#32;is&#32;a&#32;redefinition&#32;error.</emphasis>
15248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;parent-&gt;<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>()&#32;&amp;&amp;&#32;it-&gt;first&#32;==&#32;last_segment)
15249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node&amp;&#32;matching_node&#32;=&#32;it-&gt;second;
15251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;matching_node.<link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link>();
15252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_arr&#32;&amp;&amp;&#32;arr&#32;&amp;&amp;&#32;impl::find(table_arrays.begin(),&#32;table_arrays.end(),&#32;arr))
15253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl&#32;&#32;=&#32;arr-&gt;<link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back</link>&lt;<link linkend="_classtable">table</link>&gt;();
15255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl.source_&#32;=&#32;{&#32;header_begin_pos,&#32;header_end_pos,&#32;reader.source_path()&#32;};
15256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;tbl;
15257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15258 
15259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;matching_node.as_table();&#32;!is_arr&#32;&amp;&amp;&#32;tbl&#32;&amp;&amp;&#32;!implicit_tables.empty())
15260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;found&#32;=&#32;impl::find(implicit_tables.begin(),&#32;implicit_tables.end(),&#32;tbl);&#32;found)
15262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ok&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!tbl-&gt;empty())
15265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;[_,&#32;child]&#32;:&#32;*tbl)
15267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!child.is_table()&#32;&amp;&amp;&#32;!child.is_array_of_tables())
15269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ok&#32;=&#32;<emphasis role="keyword">false</emphasis>;
15271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15275 
15276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ok)
15277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;implicit_tables.<link linkend="_classtable_1afc8a374f825376cd8dd55b843f0db2de">erase</link>(implicit_tables.cbegin()&#32;+&#32;(found&#32;-&#32;implicit_tables.data()));
15279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl-&gt;source_.begin&#32;=&#32;header_begin_pos;
15280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl-&gt;source_.end&#32;&#32;&#32;=&#32;header_end_pos;
15281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tbl;
15282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15285 
15286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;we&#32;get&#32;here&#32;it&apos;s&#32;a&#32;redefinition&#32;error.</emphasis>
15287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_arr&#32;&amp;&amp;&#32;matching_node.type()&#32;==&#32;node_type::table)
15288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_at(header_begin_pos,
15290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;cannot&#32;redefine&#32;existing&#32;table&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
15292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8f28cbcf24d908558aeb26e271823adf">return_after_error</link>({});
15294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_at(header_begin_pos,
15298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;cannot&#32;redefine&#32;existing&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(matching_node.type()),
15300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
15302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&#32;as&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_arr&#32;?&#32;<emphasis role="stringliteral">&quot;array-of-tables&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8f28cbcf24d908558aeb26e271823adf">return_after_error</link>({});
15305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15307 
15308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;there&#32;was&#32;no&#32;matching&#32;node,&#32;sweet&#32;-&#32;we&#32;can&#32;freely&#32;instantiate&#32;a&#32;new&#32;table/table&#32;array.</emphasis>
15309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_key&#32;=&#32;make_key(key_buffer.size()&#32;-&#32;1u);
15312 
15313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;it&apos;s&#32;an&#32;array&#32;we&#32;need&#32;to&#32;make&#32;the&#32;array&#32;and&#32;it&apos;s&#32;first&#32;table&#32;element,</emphasis>
15314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;the&#32;starting&#32;regions,&#32;and&#32;return&#32;the&#32;table&#32;element</emphasis>
15315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_arr)
15316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;parent-&gt;emplace_hint&lt;<link linkend="_classarray">array</link>&gt;(it,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last_key));
15318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;tbl_arr&#32;=&#32;it-&gt;second.ref_cast&lt;<link linkend="_classarray">array</link>&gt;();
15319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;table_arrays.<link linkend="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c">push_back</link>(&amp;tbl_arr);
15320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl_arr.source_&#32;=&#32;{&#32;header_begin_pos,&#32;header_end_pos,&#32;reader.source_path()&#32;};
15321 
15322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl&#32;&#32;=&#32;tbl_arr.emplace_back&lt;<link linkend="_classtable">table</link>&gt;();
15323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl.source_&#32;=&#32;{&#32;header_begin_pos,&#32;header_end_pos,&#32;reader.source_path()&#32;};
15324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;tbl;
15325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15326 
15327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;we&apos;re&#32;just&#32;making&#32;a&#32;table</emphasis>
15328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;parent-&gt;emplace_hint&lt;<link linkend="_classtable">table</link>&gt;(it,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last_key));
15331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl&#32;&#32;=&#32;it-&gt;second.ref_cast&lt;<link linkend="_classtable">table</link>&gt;();
15332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl.source_&#32;=&#32;{&#32;header_begin_pos,&#32;header_end_pos,&#32;reader.source_path()&#32;};
15333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;tbl;
15334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15337 
15338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3051c67f622ff6b83a43e3db480a45b6">TOML_NEVER_INLINE</link>
15339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parse_key_value_pair_and_insert(<link linkend="_classtable">table</link>*&#32;tbl)
15340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
15343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(is_string_delimiter(*cp)&#32;||&#32;is_bare_key_character(*cp));
15344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;key-value&#32;pair&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15345 
15346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;the&#32;key&#32;into&#32;the&#32;key&#32;buffer</emphasis>
15347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start_recording();
15348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_key();
15349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stop_recording(1u);
15350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8c407a8f6fe52a795db35be3f00393f8">TOML_ASSERT</link>(key_buffer.size()&#32;&gt;=&#32;1u);
15352 
15353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;past&#32;any&#32;whitespace&#32;that&#32;followed&#32;the&#32;key</emphasis>
15354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15356 
15357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&apos;=&apos;</emphasis>
15358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;!=&#32;U<emphasis role="charliteral">&apos;=&apos;</emphasis>)
15359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;&apos;=&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15361 
15362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;past&#32;any&#32;whitespace&#32;that&#32;followed&#32;the&#32;&apos;=&apos;</emphasis>
15363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15366 
15367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;that&#32;the&#32;next&#32;character&#32;could&#32;actually&#32;be&#32;a&#32;value</emphasis>
15368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_value_terminator(*cp))
15369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;value,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15370 
15371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;it&apos;s&#32;a&#32;dotted&#32;kvp&#32;we&#32;need&#32;to&#32;spawn&#32;the&#32;parent&#32;sub-tables&#32;if&#32;necessary,</emphasis>
15372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;set&#32;the&#32;target&#32;table&#32;to&#32;the&#32;second-to-last&#32;one&#32;in&#32;the&#32;chain</emphasis>
15373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(key_buffer.size()&#32;&gt;&#32;1u)
15374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;key_buffer.size()&#32;-&#32;1u;&#32;i++)
15376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string_view&#32;segment&#32;=&#32;key_buffer[i];
15378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;pit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;tbl-&gt;<link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link>(segment);
15379 
15380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parent&#32;already&#32;existed</emphasis>
15381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pit&#32;!=&#32;tbl-&gt;<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>()&#32;&amp;&amp;&#32;pit-&gt;first&#32;==&#32;segment)
15382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;p&#32;=&#32;pit-&gt;second.<link linkend="_classtable_1a6e49884f9b927770890cb9fe6df61a42">as_table</link>();
15384 
15385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;redefinition</emphasis>
15386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(!p
15387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!(impl::find(dotted_key_tables.begin(),&#32;dotted_key_tables.end(),&#32;p)
15388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;impl::find(implicit_tables.begin(),&#32;implicit_tables.end(),&#32;p)))
15389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error_at(key_buffer.starts[i],
15391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;cannot&#32;redefine&#32;existing&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(pit-&gt;second.type()),
15393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;as&#32;dotted&#32;key-value&#32;pair&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8f28cbcf24d908558aeb26e271823adf">return_after_error</link>({});
15395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15396 
15397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl&#32;=&#32;p;
15398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15399 
15400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;create&#32;a&#32;new&#32;implicit&#32;table</emphasis>
15401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pit&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;tbl-&gt;emplace_hint&lt;<link linkend="_classtable">table</link>&gt;(pit,&#32;make_key(i));
15404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;p&#32;&#32;=&#32;pit-&gt;second.ref_cast&lt;<link linkend="_classtable">table</link>&gt;();
15405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p.source_&#32;=&#32;pit-&gt;first.source();
15406 
15407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dotted_key_tables.push_back(&amp;p);
15408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl&#32;=&#32;&amp;p;
15409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15412 
15413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ensure&#32;this&#32;isn&apos;t&#32;a&#32;redefinition</emphasis>
15414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string_view&#32;last_segment&#32;=&#32;key_buffer.back();
15415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;it&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;tbl-&gt;<link linkend="_classtable_1ac88a3ddbef7f2522fc3626a03077b238">lower_bound</link>(last_segment);
15416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(it&#32;!=&#32;tbl-&gt;<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>()&#32;&amp;&amp;&#32;it-&gt;first&#32;==&#32;last_segment)
15417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error(<emphasis role="stringliteral">&quot;cannot&#32;redefine&#32;existing&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(it-&gt;second.type()),
15420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
15421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(recording_buffer),
15422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a8f28cbcf24d908558aeb26e271823adf">return_after_error</link>({});
15424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15425 
15426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;create&#32;the&#32;key&#32;first&#32;since&#32;the&#32;key&#32;buffer&#32;will&#32;likely&#32;get&#32;overwritten&#32;during&#32;value&#32;parsing&#32;(inline</emphasis>
15427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tables)</emphasis>
15428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;last_key&#32;=&#32;make_key(key_buffer.size()&#32;-&#32;1u);
15429 
15430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;now&#32;we&#32;can&#32;actually&#32;parse&#32;the&#32;value</emphasis>
15431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;parse_value();
15432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15433 
15434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl-&gt;emplace_hint&lt;node_ptr&gt;(it,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(last_key),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
15435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
15436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15437 
15438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;parse_document()
15439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a9e2dd718c4dcf40b8a25b3b35402bfc8">assert_not_error</link>();
15441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
15442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;root&#32;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15443 
15444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>*&#32;current_table&#32;=&#32;&amp;root;
15445 
15446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
15447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
15449 
15450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;leading&#32;whitespace,&#32;line&#32;endings,&#32;comments</emphasis>
15451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(consume_leading_whitespace()&#32;||&#32;consume_line_break()&#32;||&#32;consume_comment())
15452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
15453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
15454 
15455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[tables]</emphasis>
15456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[[table&#32;array]]</emphasis>
15457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;[&apos;</emphasis>)
15458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_table&#32;=&#32;parse_table_header();
15459 
15460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bare_keys</emphasis>
15461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dotted.keys</emphasis>
15462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;quoted&#32;keys&quot;</emphasis>
15463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_bare_key_character(*cp)&#32;||&#32;is_string_delimiter(*cp))
15464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;key-value&#32;pair&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15466 
15467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_key_value_pair_and_insert(current_table);
15468 
15469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;the&#32;rest&#32;of&#32;the&#32;line&#32;after&#32;the&#32;kvp</emphasis>
15470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(this&#32;is&#32;not&#32;done&#32;in&#32;parse_key_value_pair()&#32;because&#32;that&#32;is&#32;also&#32;used&#32;for&#32;inline&#32;tables)</emphasis>
15471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;consume_leading_whitespace();
15472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>();
15473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>()&#32;&amp;&amp;&#32;!consume_comment()&#32;&amp;&amp;&#32;!consume_line_break())
15474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error(<emphasis role="stringliteral">&quot;expected&#32;a&#32;comment&#32;or&#32;whitespace,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15476 
15477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;??</emphasis>
15478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;set_error(<emphasis role="stringliteral">&quot;expected&#32;keys,&#32;tables,&#32;whitespace&#32;or&#32;comments,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1aca74b37bcd6c077f58f262e43c8a8aa3">is_eof</link>());
15481 
15482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;eof_pos&#32;&#32;&#32;&#32;&#32;=&#32;current_position(1);
15483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root.source_.end&#32;=&#32;eof_pos;
15484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_table&#32;&amp;&amp;&#32;current_table&#32;!=&#32;&amp;root&#32;&amp;&amp;&#32;current_table-&gt;source_.<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>&#32;&lt;=&#32;current_table-&gt;source_.<link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>)
15485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current_table-&gt;source_.<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>&#32;=&#32;eof_pos;
15486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15487 
15488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;update_region_ends(node&amp;&#32;nde)&#32;<emphasis role="keyword">noexcept</emphasis>
15489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;nde.type();
15491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&gt;&#32;node_type::array)
15492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
15493 
15494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;node_type::table)
15495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;tbl&#32;=&#32;nde.ref_cast&lt;<link linkend="_classtable">table</link>&gt;();
15497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl.<link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline</link>())&#32;<emphasis role="comment">//&#32;inline&#32;tables&#32;(and&#32;all&#32;their&#32;inline&#32;descendants)&#32;are&#32;already&#32;correctly</emphasis>
15498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;terminated</emphasis>
15499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
15500 
15501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;nde.source_.<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>;
15502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
15503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05802eb834f167bd8a151e82492b8866">TOML_UNUSED</link>(k);
15505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_region_ends(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
15506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.source_.end)
15507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.source_.end;
15508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;arrays</emphasis>
15511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;arr&#32;=&#32;nde.ref_cast&lt;<link linkend="_classarray">array</link>&gt;();
15513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;&#32;=&#32;nde.source_.<link linkend="_classarray_1a2027254bbe0a3e797c461a0b2446f656">end</link>;
15514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;:&#32;arr)
15515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_region_ends(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
15517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.source_.end)
15518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.source_.end;
15519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nde.source_.end&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;
15521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15523 
15524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
15525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparser_1a2c95ede0298d9e3dbc095a8585a25751">parser</link>(<link linkend="_structutf8__reader__interface">utf8_reader_interface</link>&amp;&amp;&#32;reader_)&#32;<emphasis role="comment">//</emphasis>
15526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;reader{&#32;reader_&#32;}
15527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root.source_&#32;=&#32;{&#32;prev_pos,&#32;prev_pos,&#32;reader.source_path()&#32;};
15529 
15530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!reader.peek_eof())
15531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp&#32;=&#32;reader.read_next();
15533 
15534 <emphasis role="preprocessor">#if&#32;!TOML_EXCEPTIONS</emphasis>
15535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reader.error())
15536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(reader.error());
15538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
15539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15540 <emphasis role="preprocessor">#endif</emphasis>
15541 
15542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cp)
15543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_document();
15544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15545 
15546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_region_ends(root);
15547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15548 
15549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
15550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
15551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15552 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
15553 
15554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(root)&#32;};
15555 
15556 <emphasis role="preprocessor">#else</emphasis>
15557 
15558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err)
15559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>{&#32;*<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(err)&#32;};
15560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(root)&#32;};
15562 
15563 <emphasis role="preprocessor">#endif</emphasis>
15564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15565 &#32;&#32;&#32;&#32;};
15566 
15567 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15568 &#32;&#32;&#32;&#32;node_ptr&#32;parser::parse_array()
15569 &#32;&#32;&#32;&#32;{
15570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
15572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;[&apos;</emphasis>);
15573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;array&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15574 
15575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;opening&#32;&apos;[&apos;</emphasis>
15576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15577 
15578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;arr_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classarray">array</link>{}&#32;};
15579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>&amp;&#32;arr&#32;=&#32;arr_ptr-&gt;ref_cast&lt;<link linkend="_classarray">array</link>&gt;();
15580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;parse_type&#32;:&#32;<emphasis role="keywordtype">int</emphasis>
15581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
15583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;comma,
15584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>
15585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
15586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_type&#32;prev&#32;=&#32;parse_type::none;
15587 
15588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())
15589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(consume_leading_whitespace()&#32;||&#32;consume_line_break()&#32;||&#32;consume_comment())
15591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
15592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15593 
15594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;commas&#32;-&#32;only&#32;legal&#32;after&#32;a&#32;value</emphasis>
15595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;,&apos;</emphasis>)
15596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;==&#32;parse_type::val)
15598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;parse_type::comma;
15600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
15602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;value&#32;or&#32;closing&#32;&apos;]&apos;,&#32;saw&#32;comma&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15605 
15606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;&apos;]&apos;</emphasis>
15607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;]&apos;</emphasis>)
15608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
15610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15612 
15613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;must&#32;be&#32;a&#32;value</emphasis>
15614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;==&#32;parse_type::val)
15617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;comma&#32;or&#32;closing&#32;&apos;]&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
15620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;parse_type::val;
15622 
15623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;parse_value();
15624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15625 
15626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr.<link linkend="_classarray_1a3b63fa3d1dce25204338afaa72bb9ba7">capacity</link>())
15627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr.<link linkend="_classarray_1a11fae0d179d11cc04ce16c4cd99cb8d1">reserve</link>(4u);
15628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr.<link linkend="_classarray_1a59266d6b5fce72dc6fe0db2e16446bb0">emplace_back</link>&lt;node_ptr&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
15629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15631 
15632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;arr_ptr;
15634 &#32;&#32;&#32;&#32;}
15635 
15636 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15637 &#32;&#32;&#32;&#32;node_ptr&#32;parser::parse_inline_table()
15638 &#32;&#32;&#32;&#32;{
15639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad1ac3723bbf0d358f9df5b44be71c36e">assert_not_eof</link>();
15641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;{&apos;</emphasis>);
15642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a973cefa1364e120a5b2f2ec712a0fa35">push_parse_scope</link>(<emphasis role="stringliteral">&quot;inline&#32;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15643 
15644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;opening&#32;&apos;{&apos;</emphasis>
15645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15646 
15647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;tbl_ptr{&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classtable">table</link>{}&#32;};
15648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl&#32;=&#32;tbl_ptr-&gt;ref_cast&lt;<link linkend="_classtable">table</link>&gt;();
15649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl.<link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline</link>(<emphasis role="keyword">true</emphasis>);
15650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtable__vector__scope">table_vector_scope</link>&#32;table_scope{&#32;open_inline_tables,&#32;tbl&#32;};
15651 
15652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;parse_type&#32;:&#32;<emphasis role="keywordtype">int</emphasis>
15653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
15655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;comma,
15656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kvp
15657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
15658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_type&#32;prev&#32;=&#32;parse_type::none;
15659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!<link linkend="_toml_8hpp_1a633cbdc0b71907d8e9bce9ecf54ad16d">is_error</link>())
15660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<link linkend="_toml_8hpp_1a649c9819492ed84229f80659f9f7a1a0">TOML_LANG_UNRELEASED</link>)&#32;<emphasis role="comment">//&#32;toml/issues/516&#32;(newlines/trailing&#32;commas&#32;in&#32;inline&#32;tables)</emphasis>
15662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(consume_leading_whitespace()&#32;||&#32;consume_line_break()&#32;||&#32;consume_comment())
15664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
15665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(consume_leading_whitespace())
15669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
15670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a367ca88c87eb601c25350b729b5d2699">set_error_and_return_if_eof</link>({});
15673 
15674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;commas&#32;-&#32;only&#32;legal&#32;after&#32;a&#32;key-value&#32;pair</emphasis>
15675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;,&apos;</emphasis>)
15676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;==&#32;parse_type::kvp)
15678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;parse_type::comma;
15680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa21605e78d9d44ea396e3df072fc99e0">advance_and_return_if_error_or_eof</link>({});
15681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;key-value&#32;pair&#32;or&#32;closing&#32;&apos;}&apos;,&#32;saw&#32;comma&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15685 
15686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;closing&#32;&apos;}&apos;</emphasis>
15687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*cp&#32;==&#32;U<emphasis role="charliteral">&apos;}&apos;</emphasis>)
15688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!<link linkend="_toml_8hpp_1a649c9819492ed84229f80659f9f7a1a0">TOML_LANG_UNRELEASED</link>)&#32;<emphasis role="comment">//&#32;toml/issues/516&#32;(newlines/trailing&#32;commas&#32;in&#32;inline&#32;tables)</emphasis>
15690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;==&#32;parse_type::comma)
15692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;key-value&#32;pair,&#32;saw&#32;closing&#32;&apos;}&apos;&#32;(dangling&#32;comma)&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
15695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ad01675bc2d478a261e2ae9898c8d8371">advance_and_return_if_error</link>({});
15698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
15699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15700 
15701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;key-value&#32;pair</emphasis>
15702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_string_delimiter(*cp)&#32;||&#32;is_bare_key_character(*cp))
15703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev&#32;==&#32;parse_type::kvp)
15705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;comma&#32;or&#32;closing&#32;&apos;}&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;parse_type::kvp;
15709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_key_value_pair_and_insert(&amp;tbl);
15710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15712 
15713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a44a192b247bc4686a968814009ecee14">set_error_and_return_default</link>(<emphasis role="stringliteral">&quot;expected&#32;key&#32;or&#32;closing&#32;&apos;}&apos;,&#32;saw&#32;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;<link linkend="_toml_8hpp_1a7962d3d78317c0c0bed873999e311627">to_sv</link>(*cp),&#32;<emphasis role="stringliteral">&quot;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
15715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15716 
15717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a899e5e612179f84d3b14d6c881dc151b">return_if_error</link>({});
15718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tbl_ptr;
15719 &#32;&#32;&#32;&#32;}
15720 
15721 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
15722 }
15723 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
15724 
15725 <emphasis role="preprocessor">#undef&#32;TOML_RETURNS_BY_THROWING</emphasis>
15726 <emphasis role="preprocessor">#undef&#32;advance_and_return_if_error</emphasis>
15727 <emphasis role="preprocessor">#undef&#32;advance_and_return_if_error_or_eof</emphasis>
15728 <emphasis role="preprocessor">#undef&#32;assert_not_eof</emphasis>
15729 <emphasis role="preprocessor">#undef&#32;assert_not_error</emphasis>
15730 <emphasis role="preprocessor">#undef&#32;is_eof</emphasis>
15731 <emphasis role="preprocessor">#undef&#32;is_error</emphasis>
15732 <emphasis role="preprocessor">#undef&#32;parse_error_break</emphasis>
15733 <emphasis role="preprocessor">#undef&#32;push_parse_scope</emphasis>
15734 <emphasis role="preprocessor">#undef&#32;push_parse_scope_1</emphasis>
15735 <emphasis role="preprocessor">#undef&#32;push_parse_scope_2</emphasis>
15736 <emphasis role="preprocessor">#undef&#32;return_after_error</emphasis>
15737 <emphasis role="preprocessor">#undef&#32;return_if_eof</emphasis>
15738 <emphasis role="preprocessor">#undef&#32;return_if_error</emphasis>
15739 <emphasis role="preprocessor">#undef&#32;return_if_error_or_eof</emphasis>
15740 <emphasis role="preprocessor">#undef&#32;set_error_and_return</emphasis>
15741 <emphasis role="preprocessor">#undef&#32;set_error_and_return_default</emphasis>
15742 <emphasis role="preprocessor">#undef&#32;set_error_and_return_if_eof</emphasis>
15743 <emphasis role="preprocessor">#undef&#32;utf8_buffered_reader_error_check</emphasis>
15744 <emphasis role="preprocessor">#undef&#32;utf8_reader_error</emphasis>
15745 <emphasis role="preprocessor">#undef&#32;utf8_reader_error_check</emphasis>
15746 <emphasis role="preprocessor">#undef&#32;utf8_reader_return_after_error</emphasis>
15747 
15748 <link linkend="_toml_8hpp_1a492b1349e6331172ea2b6b9b5791ec61">TOML_ANON_NAMESPACE_START</link>
15749 {
15750 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
15751 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
15752 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;do_parse(<link linkend="_structutf8__reader__interface">utf8_reader_interface</link>&#32;&amp;&amp;&#32;reader)
15753 &#32;&#32;&#32;&#32;{
15754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;impl::parser{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(reader)&#32;};
15755 &#32;&#32;&#32;&#32;}
15756 
15757 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
15758 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
15759 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;do_parse_file(std::string_view&#32;file_path)
15760 &#32;&#32;&#32;&#32;{
15761 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
15762 <emphasis role="preprocessor">#define&#32;TOML_PARSE_FILE_ERROR(msg,&#32;path)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
15763 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;throw&#32;parse_error{&#32;msg,&#32;source_position{},&#32;std::make_shared&lt;const&#32;std::string&gt;(std::move(path))&#32;}</emphasis>
15764 <emphasis role="preprocessor">#else</emphasis>
15765 <emphasis role="preprocessor">#define&#32;TOML_PARSE_FILE_ERROR(msg,&#32;path)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
15766 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;parse_result&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
15767 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
15768 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_erroremphasis>
15769 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{emphasis>
15770 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msg,&#32;source_position{},&#32;std::make_shared&lt;const&#32;std::string&gt;(std::move(path))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
15771 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}emphasis>
15772 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
15773 <emphasis role="preprocessor">#endif</emphasis>
15774 
15775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;file_path_str(file_path);
15776 
15777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;open&#32;file&#32;with&#32;a&#32;custom-sized&#32;stack&#32;buffer</emphasis>
15778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ifstream&#32;<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>;
15779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a738efc76b091799c4b312ad69c8773bc">TOML_OVERALIGNED</link>&#32;<emphasis role="keywordtype">char</emphasis>&#32;file_buffer[<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">void</emphasis>*)&#32;*&#32;1024u];
15780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>.rdbuf()-&gt;pubsetbuf(file_buffer,&#32;<emphasis role="keyword">sizeof</emphasis>(file_buffer));
15781 <emphasis role="preprocessor">#if&#32;TOML_WINDOWS</emphasis>
15782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>.open(impl::widen(file_path_str).c_str(),&#32;std::ifstream::in&#32;|&#32;std::ifstream::binary&#32;|&#32;std::ifstream::ate);
15783 <emphasis role="preprocessor">#else</emphasis>
15784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>.open(file_path_str,&#32;std::ifstream::in&#32;|&#32;std::ifstream::binary&#32;|&#32;std::ifstream::ate);
15785 <emphasis role="preprocessor">#endif</emphasis>
15786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>.is_open())
15787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a80b3e84c102efec5a37153b958cb6535">TOML_PARSE_FILE_ERROR</link>(<emphasis role="stringliteral">&quot;File&#32;could&#32;not&#32;be&#32;opened&#32;for&#32;reading&quot;</emphasis>,&#32;file_path_str);
15788 
15789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;get&#32;size</emphasis>
15790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;file_size&#32;=&#32;<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>.tellg();
15791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file_size&#32;==&#32;-1)
15792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a80b3e84c102efec5a37153b958cb6535">TOML_PARSE_FILE_ERROR</link>(<emphasis role="stringliteral">&quot;Could&#32;not&#32;determine&#32;file&#32;size&quot;</emphasis>,&#32;file_path_str);
15793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>.seekg(0,&#32;std::ifstream::beg);
15794 
15795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;the&#32;whole&#32;file&#32;into&#32;memory&#32;first&#32;if&#32;the&#32;file&#32;isn&apos;t&#32;too&#32;large</emphasis>
15796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;large_file_threshold&#32;=&#32;1024&#32;*&#32;1024&#32;*&#32;2;&#32;<emphasis role="comment">//&#32;2&#32;MB</emphasis>
15797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file_size&#32;&lt;=&#32;large_file_threshold)
15798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;char&gt;&#32;file_data;
15800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_data.resize(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(file_size));
15801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceversion_1aee8dac8d4699e20bfc999959504928c0">file</link>.read(file_data.data(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::streamsize<emphasis role="keyword">&gt;</emphasis>(file_size));
15802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::string_view{&#32;file_data.data(),&#32;file_data.size()&#32;},&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(file_path_str));
15803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15804 
15805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;parse&#32;it&#32;using&#32;the&#32;streams</emphasis>
15806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
15807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(file,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(file_path_str));
15808 
15809 <emphasis role="preprocessor">#undef&#32;TOML_PARSE_FILE_ERROR</emphasis>
15810 &#32;&#32;&#32;&#32;}
15811 }
15812 <link linkend="_toml_8hpp_1a0385295454ae473a68d194eaffaf597c">TOML_ANON_NAMESPACE_END</link>;
15813 
15814 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
15815 {
15816 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_toml_8hpp_1a93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex);
15817 
15818 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15819 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::string_view&#32;doc,&#32;std::string_view&#32;source_path)
15820 &#32;&#32;&#32;&#32;{
15821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;source_path&#32;});
15822 &#32;&#32;&#32;&#32;}
15823 
15824 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15825 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::string_view&#32;doc,&#32;std::string&#32;&amp;&amp;&#32;source_path)
15826 &#32;&#32;&#32;&#32;{
15827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(source_path)&#32;});
15828 &#32;&#32;&#32;&#32;}
15829 
15830 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15831 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::istream&#32;&amp;&#32;doc,&#32;std::string_view&#32;source_path)
15832 &#32;&#32;&#32;&#32;{
15833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;source_path&#32;});
15834 &#32;&#32;&#32;&#32;}
15835 
15836 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15837 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::istream&#32;&amp;&#32;doc,&#32;std::string&#32;&amp;&amp;&#32;source_path)
15838 &#32;&#32;&#32;&#32;{
15839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(source_path)&#32;});
15840 &#32;&#32;&#32;&#32;}
15841 
15842 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15843 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a283b0807cf14ff886499b5fd270161b2">parse_file</link>(std::string_view&#32;file_path)
15844 &#32;&#32;&#32;&#32;{
15845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse_file(file_path);
15846 &#32;&#32;&#32;&#32;}
15847 
15848 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
15849 
15850 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15851 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::u8string_view&#32;doc,&#32;std::string_view&#32;source_path)
15852 &#32;&#32;&#32;&#32;{
15853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;source_path&#32;});
15854 &#32;&#32;&#32;&#32;}
15855 
15856 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15857 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::u8string_view&#32;doc,&#32;std::string&#32;&amp;&amp;&#32;source_path)
15858 &#32;&#32;&#32;&#32;{
15859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(source_path)&#32;});
15860 &#32;&#32;&#32;&#32;}
15861 
15862 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15863 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a283b0807cf14ff886499b5fd270161b2">parse_file</link>(std::u8string_view&#32;file_path)
15864 &#32;&#32;&#32;&#32;{
15865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;file_path_str;
15866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_path_str.resize(file_path.length());
15867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(file_path_str.data(),&#32;file_path.data(),&#32;file_path.length());
15868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse_file(file_path_str);
15869 &#32;&#32;&#32;&#32;}
15870 
15871 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8</emphasis>
15872 
15873 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
15874 
15875 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15876 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::string_view&#32;doc,&#32;std::wstring_view&#32;source_path)
15877 &#32;&#32;&#32;&#32;{
15878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;impl::narrow(source_path)&#32;});
15879 &#32;&#32;&#32;&#32;}
15880 
15881 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15882 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::istream&#32;&amp;&#32;doc,&#32;std::wstring_view&#32;source_path)
15883 &#32;&#32;&#32;&#32;{
15884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;impl::narrow(source_path)&#32;});
15885 &#32;&#32;&#32;&#32;}
15886 
15887 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15888 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1a283b0807cf14ff886499b5fd270161b2">parse_file</link>(std::wstring_view&#32;file_path)
15889 &#32;&#32;&#32;&#32;{
15890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse_file(impl::narrow(file_path));
15891 &#32;&#32;&#32;&#32;}
15892 
15893 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
15894 
15895 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8&#32;&amp;&amp;&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
15896 
15897 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15898 &#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&#32;<link linkend="_toml_8hpp_1a2bfc7ae4747f15378d92249aadce019e">TOML_CALLCONV</link>&#32;<link linkend="_toml_8hpp_1ab4b6a8282072fb55b91953ad86504247">parse</link>(std::u8string_view&#32;doc,&#32;std::wstring_view&#32;source_path)
15899 &#32;&#32;&#32;&#32;{
15900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;TOML_ANON_NAMESPACE::do_parse(TOML_ANON_NAMESPACE::utf8_reader{&#32;doc,&#32;impl::narrow(source_path)&#32;});
15901 &#32;&#32;&#32;&#32;}
15902 
15903 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_HAS_CHAR8&#32;&amp;&amp;&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
15904 
15905 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
15906 }
15907 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
15908 
15909 <emphasis role="preprocessor">#undef&#32;TOML_OVERALIGNED</emphasis>
15910 
15911 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
15912 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
15913 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
15914 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
15915 <emphasis role="preprocessor">#endif</emphasis>
15916 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
15917 
15918 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_PARSER</emphasis>
15919 
15920 <emphasis role="comment">//********&#32;&#32;impl/formatter.inl&#32;&#32;****************************************************************************************</emphasis>
15921 
15922 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
15923 
15924 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
15925 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
15926 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
15927 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
15928 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
15929 <emphasis role="preprocessor">#undef&#32;min</emphasis>
15930 <emphasis role="preprocessor">#undef&#32;max</emphasis>
15931 <emphasis role="preprocessor">#endif</emphasis>
15932 
15933 <link linkend="_toml_8hpp_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
15934 {
15935 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_toml_8hpp_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link>&#32;formatted_string_traits&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>
15936 &#32;&#32;&#32;&#32;{
15937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
15938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line_breaks&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;0,&#32;<emphasis role="comment">//&#32;\n</emphasis>
15939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tabs&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;1,&#32;<emphasis role="comment">//&#32;\t</emphasis>
15940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;control_chars&#32;=&#32;1u&#32;&lt;&lt;&#32;2,&#32;<emphasis role="comment">//&#32;also&#32;includes&#32;non-ascii&#32;vertical&#32;whitespace</emphasis>
15941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;single_quotes&#32;=&#32;1u&#32;&lt;&lt;&#32;3,
15942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;non_bare&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;4,&#32;<emphasis role="comment">//&#32;anything&#32;not&#32;satisfying&#32;&quot;is&#32;bare&#32;key&#32;character&quot;</emphasis>
15943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;non_ascii&#32;&#32;&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;5,&#32;<emphasis role="comment">//&#32;any&#32;codepoint&#32;&gt;=&#32;128</emphasis>
15944 
15945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>&#32;=&#32;(non_ascii&#32;&lt;&lt;&#32;1u)&#32;-&#32;1u
15946 &#32;&#32;&#32;&#32;};
15947 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1af3268f6dd1413971826ff207adc92d49">TOML_MAKE_FLAGS</link>(formatted_string_traits);
15948 
15949 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15950 &#32;&#32;&#32;&#32;<link linkend="_classformatter_1af732ca5de2431badc30d819d30715860">formatter::formatter</link>(<emphasis role="keyword">const</emphasis>&#32;node*&#32;source_node,
15951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>*&#32;source_pr,
15952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;formatter_constants&amp;&#32;constants,
15953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structformatter__config">formatter_config</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
15954 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
15955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;source_{&#32;source_pr&#32;&amp;&amp;&#32;*source_pr&#32;?&#32;&amp;source_pr-&gt;table()&#32;:&#32;source_node&#32;},
15956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result_{&#32;source_pr&#32;},
15957 <emphasis role="preprocessor">#else</emphasis>
15958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;source_{&#32;source_pr&#32;?&#32;source_pr&#32;:&#32;source_node&#32;},
15959 <emphasis role="preprocessor">#endif</emphasis>
15960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constants_{&#32;&amp;constants&#32;},
15961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>&#32;}
15962 &#32;&#32;&#32;&#32;{
15963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(source_);
15964 
15965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;=&#32;(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;|&#32;constants_-&gt;mandatory_flags)&#32;&amp;&#32;~constants_-&gt;ignored_flags;
15966 
15967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_columns_&#32;=&#32;{};
15968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;config_.indent)
15969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_columns_&#32;+=&#32;c&#32;==&#32;<emphasis role="stringliteral">&apos;\t&apos;</emphasis>&#32;?&#32;4u&#32;:&#32;1u;
15970 
15971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_format_mask_&#32;=&#32;config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>
15972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;(format_flags::allow_binary_integers&#32;|&#32;format_flags::allow_octal_integers
15973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_hexadecimal_integers);
15974 &#32;&#32;&#32;&#32;}
15975 
15976 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15977 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a86257d60959a58cba61543ccafe17947">formatter::attach</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
15978 &#32;&#32;&#32;&#32;{
15979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
15980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>;
15982 &#32;&#32;&#32;&#32;}
15983 
15984 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15985 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a76c840552a46939086439bff7d487bae">formatter::detach</link>()&#32;noexcept
15986 &#32;&#32;&#32;&#32;{
15987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream_&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
15988 &#32;&#32;&#32;&#32;}
15989 
15990 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
15991 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">formatter::print_newline</link>(<emphasis role="keywordtype">bool</emphasis>&#32;force)
15992 &#32;&#32;&#32;&#32;{
15993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!naked_newline_&#32;||&#32;force)
15994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
15995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
15996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
15997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15998 &#32;&#32;&#32;&#32;}
15999 
16000 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16001 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">formatter::print_indent</link>()
16002 &#32;&#32;&#32;&#32;{
16003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;indent_;&#32;i++)
16004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;config_.<link linkend="_structformatter__config_1a1a2ae49c7de03d0014d24e9397455733">indent</link>);
16006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16008 &#32;&#32;&#32;&#32;}
16009 
16010 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16011 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">formatter::print_unformatted</link>(<emphasis role="keywordtype">char</emphasis>&#32;c)
16012 &#32;&#32;&#32;&#32;{
16013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;c);
16014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16015 &#32;&#32;&#32;&#32;}
16016 
16017 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16018 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">formatter::print_unformatted</link>(std::string_view&#32;str)
16019 &#32;&#32;&#32;&#32;{
16020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;str);
16021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16022 &#32;&#32;&#32;&#32;}
16023 
16024 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16025 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">formatter::print_string</link>(std::string_view&#32;str,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_multi_line,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_bare)
16026 &#32;&#32;&#32;&#32;{
16027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str.empty())
16028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="stringliteral">&quot;&apos;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;\&quot;\&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16032 
16033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pre-scan&#32;the&#32;string&#32;to&#32;determine&#32;how&#32;we&#32;should&#32;output&#32;it</emphasis>
16034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatted_string_traits&#32;traits&#32;=&#32;{};
16035 
16036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!allow_bare)
16037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_bare;
16038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;unicode_allowed&#32;=&#32;<link linkend="_classformatter_1a8337456ce8d93a5b60fb3b3e4d467ef2">unicode_strings_allowed</link>();
16039 
16040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ascii&#32;fast&#32;path</emphasis>
16041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1a59540c22f4b7e10864095f21c67e0c69">is_ascii</link>(str.data(),&#32;str.length()))
16042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
16044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)
16046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::line_breaks;&#32;<emphasis role="keywordflow">break</emphasis>;
16048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::tabs;&#32;<emphasis role="keywordflow">break</emphasis>;
16049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::single_quotes;&#32;<emphasis role="keywordflow">break</emphasis>;
16050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
16051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_control_character(c))
16053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::control_chars;
16054 
16055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_ascii_bare_key_character(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char32_t</emphasis><emphasis role="keyword">&gt;</emphasis>(c)))
16056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_bare;
16057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16060 
16061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;all_ascii_traits&#32;=
16062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatted_string_traits::all&#32;&amp;&#32;~formatted_string_traits::non_ascii;
16063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(traits&#32;==&#32;all_ascii_traits)
16064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16067 
16068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unicode&#32;slow&#32;path</emphasis>
16069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_ascii;
16072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_decoder&#32;decoder;
16073 
16074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;unicode&#32;is&#32;malformed&#32;just&#32;treat&#32;the&#32;string&#32;as&#32;a&#32;single-line&#32;non-literal&#32;and</emphasis>
16075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escape&#32;all&#32;non-ascii&#32;characters&#32;(to&#32;ensure&#32;round-tripping&#32;and&#32;help&#32;with&#32;diagnostics)</emphasis>
16076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;bad_unicode&#32;=&#32;[&amp;]()&#32;<emphasis role="keyword">noexcept</emphasis>
16077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;&amp;=&#32;~formatted_string_traits::line_breaks;
16079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::control_chars&#32;|&#32;formatted_string_traits::non_bare;
16080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unicode_allowed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
16082 
16083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
16084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder(c);
16086 
16087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(decoder.error())
16088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bad_unicode();
16090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16092 
16093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!decoder.has_code_point())
16094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
16095 
16096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(decoder.codepoint)
16097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::line_breaks;&#32;<emphasis role="keywordflow">break</emphasis>;
16099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::tabs;&#32;<emphasis role="keywordflow">break</emphasis>;
16100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::single_quotes;&#32;<emphasis role="keywordflow">break</emphasis>;
16101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
16102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_control_character(decoder.codepoint)
16104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_non_ascii_vertical_whitespace(decoder.codepoint))
16105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::control_chars;
16106 
16107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!is_bare_key_character(decoder.codepoint))
16108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_bare;
16109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
16110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16113 
16114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(decoder.needs_more_input())
16115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bad_unicode();
16116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16117 
16118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;string&#32;meets&#32;the&#32;requirements&#32;of&#32;being&#32;&apos;bare&apos;&#32;we&#32;can&#32;emit&#32;a&#32;bare&#32;string</emphasis>
16119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(bare&#32;strings&#32;are&#32;composed&#32;of&#32;letters&#32;and&#32;numbers;&#32;no&#32;whitespace,&#32;control&#32;chars,&#32;quotes,&#32;etc)</emphasis>
16120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_bare)
16121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_ascii)&#32;||&#32;unicode_allowed))
16122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(str);
16124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16126 
16127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;determine&#32;if&#32;this&#32;should&#32;be&#32;a&#32;multi-line&#32;string&#32;(triple-quotes)</emphasis>
16128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;multi_line&#32;=&#32;allow_multi_line&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_classformatter_1a2c5c11209bcde97d39b08d2e1a159f04">multi_line_strings_allowed</link>()&#32;<emphasis role="comment">//</emphasis>
16130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!!(traits&#32;&amp;&#32;formatted_string_traits::line_breaks);
16131 
16132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;determine&#32;if&#32;this&#32;should&#32;be&#32;a&#32;literal&#32;string&#32;(single-quotes&#32;with&#32;no&#32;escaping)</emphasis>
16133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;literal&#32;=&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!(traits&#32;&amp;&#32;formatted_string_traits::control_chars)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::single_quotes)&#32;||&#32;multi_line)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
16136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::tabs)&#32;||&#32;<link linkend="_classformatter_1a70244c9a53ff8dcdda99788ff7048aed">real_tabs_in_strings_allowed</link>())&#32;<emphasis role="comment">//</emphasis>
16137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_ascii)&#32;||&#32;unicode_allowed);
16138 
16139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;literal&#32;strings&#32;(single&#32;quotes,&#32;no&#32;escape&#32;codes)</emphasis>
16140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(literal)
16141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;quot&#32;=&#32;multi_line&#32;?&#32;R<emphasis role="stringliteral">&quot;(&apos;&apos;&apos;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R</emphasis><emphasis role="stringliteral">&quot;(&apos;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;</emphasis>
16143 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(quot);</emphasis>
16144 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(str);</emphasis>
16145 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(quot);</emphasis>
16146 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>;
16147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16148 
16149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;anything&#32;from&#32;here&#32;down&#32;is&#32;a&#32;non-literal&#32;string,&#32;so&#32;requires&#32;iteration&#32;and&#32;escaping.</emphasis>
16150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(multi_line&#32;?&#32;R<emphasis role="stringliteral">&quot;(&quot;&quot;&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R</emphasis><emphasis role="stringliteral">&quot;(&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
16151 <emphasis role="stringliteral"></emphasis>
16152 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;real_tabs_allowed&#32;=&#32;<link linkend="_classformatter_1a70244c9a53ff8dcdda99788ff7048aed">real_tabs_in_strings_allowed</link>();
16153 
16154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ascii&#32;fast&#32;path</emphasis>
16155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_ascii))
16156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
16158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)
16160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\\)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u007F)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;real_tabs_allowed&#32;?&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\t)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;multi_line&#32;?&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\n)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
16167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;control&#32;characters&#32;from&#32;lookup&#32;table</emphasis>
16169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(c&#32;&gt;=&#32;<emphasis role="stringliteral">&apos;\x00&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="stringliteral">&apos;\x1F&apos;</emphasis>)
16170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<link linkend="_toml_8hpp_1a6b12f27cd2f2075ecfa8109f2149ebdf">control_char_escapes</link>[c]);
16171 
16172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;regular&#32;characters</emphasis>
16173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
16174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;c);
16175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16179 
16180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unicode&#32;slow&#32;path</emphasis>
16181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
16182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_decoder&#32;decoder;
16184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;cp_start&#32;=&#32;str.data();
16185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;cp_end&#32;&#32;&#32;=&#32;cp_start;
16186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
16187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder(c);
16189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_end++;
16190 
16191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;decoder&#32;encounters&#32;malformed&#32;unicode&#32;just&#32;emit&#32;raw&#32;bytes&#32;and</emphasis>
16192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder.error())
16193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(cp_start&#32;!=&#32;cp_end)
16195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u00)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
16197 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,</emphasis>
16198 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(*cp_start),
16199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_hexadecimal,
16200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2);
16201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_start++;
16202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder.reset();
16204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
16205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16206 
16207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!decoder.has_code_point())
16208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
16209 
16210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(decoder.codepoint)
16211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\\&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\\)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u007F)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;real_tabs_allowed&#32;?&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\t)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;multi_line&#32;?&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\n)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
16217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
16218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;control&#32;characters&#32;from&#32;lookup&#32;table</emphasis>
16220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(decoder.codepoint&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\x1F&apos;</emphasis>)
16221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,
16222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a6b12f27cd2f2075ecfa8109f2149ebdf">control_char_escapes</link>[<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint)]);
16223 
16224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escaped&#32;unicode&#32;characters</emphasis>
16225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder.codepoint&#32;&gt;&#32;U<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>
16226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!unicode_allowed&#32;||&#32;is_non_ascii_vertical_whitespace(decoder.codepoint)))
16227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint)&#32;&gt;&#32;0xFFFFu)
16229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\U)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
16231 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,</emphasis>
16232 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint),
16233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_hexadecimal,
16234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8);
16235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
16239 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,</emphasis>
16240 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint),
16241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_hexadecimal,
16242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4);
16243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16245 
16246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;regular&#32;characters</emphasis>
16247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;cp_start,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(cp_end&#32;-&#32;cp_start));
16249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16251 
16252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_start&#32;=&#32;cp_end;
16253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16255 
16256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(multi_line&#32;?&#32;R<emphasis role="stringliteral">&quot;(&quot;&quot;&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R</emphasis><emphasis role="stringliteral">&quot;(&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
16257 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
16258 <emphasis role="stringliteral"></emphasis>
16259 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link></emphasis>
16260 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16261 &#32;&#32;&#32;&#32;{
16262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">print_string</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.get());
16263 &#32;&#32;&#32;&#32;}
16264 
16265 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16267 &#32;&#32;&#32;&#32;{
16268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16269 
16270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;!!int_format_mask_)
16271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;value_flags_mask&#32;=
16273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_binary&#32;|&#32;value_flags::format_as_octal&#32;|&#32;value_flags::format_as_hexadecimal;
16274 
16275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;fmt&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.flags()&#32;&amp;&#32;value_flags_mask;
16276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(fmt)
16277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_binary:
16279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(int_format_mask_&#32;&amp;&#32;format_flags::allow_binary_integers))
16280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="stringliteral">&quot;0b&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;fmt);
16283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16286 
16287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_octal:
16288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(int_format_mask_&#32;&amp;&#32;format_flags::allow_octal_integers))
16289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="stringliteral">&quot;0o&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;fmt);
16292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16295 
16296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_hexadecimal:
16297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(int_format_mask_&#32;&amp;&#32;format_flags::allow_hexadecimal_integers))
16298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="stringliteral">&quot;0x&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;fmt);
16301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16304 
16305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
16306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16308 
16309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback&#32;to&#32;decimal</emphasis>
16310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
16311 &#32;&#32;&#32;&#32;}
16312 
16313 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16314 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;double&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16315 &#32;&#32;&#32;&#32;{
16316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string_view*&#32;inf_nan&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
16317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_toml_8hpp_1a2c39cdb56141a8d5637c9933c53e8bb6">fpclassify</link>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))
16318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::neg_inf:&#32;inf_nan&#32;=&#32;&amp;constants_-&gt;float_neg_inf;&#32;<emphasis role="keywordflow">break</emphasis>;
16320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::pos_inf:&#32;inf_nan&#32;=&#32;&amp;constants_-&gt;float_pos_inf;&#32;<emphasis role="keywordflow">break</emphasis>;
16321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::nan:&#32;inf_nan&#32;=&#32;&amp;constants_-&gt;float_nan;&#32;<emphasis role="keywordflow">break</emphasis>;
16322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::ok:
16323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,
16324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
16325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::none,
16326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::relaxed_float_precision));
16327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
16329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16330 
16331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inf_nan)
16332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_infinities_and_nans))
16334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*inf_nan,&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
16335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*inf_nan);
16337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16338 
16339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16340 &#32;&#32;&#32;&#32;}
16341 
16342 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16343 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16344 &#32;&#32;&#32;&#32;{
16345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;?&#32;constants_-&gt;bool_true&#32;:&#32;constants_-&gt;bool_false);
16346 &#32;&#32;&#32;&#32;}
16347 
16348 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16349 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16350 &#32;&#32;&#32;&#32;{
16351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_dates_and_times))
16352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&apos;&quot;&apos;</emphasis>);
16353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
16355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16356 &#32;&#32;&#32;&#32;}
16357 
16358 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16359 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;time&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16360 &#32;&#32;&#32;&#32;{
16361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_dates_and_times))
16362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&apos;&quot;&apos;</emphasis>);
16363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
16365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16366 &#32;&#32;&#32;&#32;}
16367 
16368 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16369 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16370 &#32;&#32;&#32;&#32;{
16371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_dates_and_times))
16372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&apos;&quot;&apos;</emphasis>);
16373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
16375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16376 &#32;&#32;&#32;&#32;}
16377 
16378 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16379 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">formatter::print_value</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;val_node,&#32;node_type&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
16380 &#32;&#32;&#32;&#32;{
16381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&gt;&#32;node_type::array);
16382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
16383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::string:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;std::string&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
16385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::integer:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;int64_t&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
16386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::floating_point:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;double&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
16387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::boolean:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;bool&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
16388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;date&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
16389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::time:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;time&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
16390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date_time:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;date_time&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
16391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
16392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16393 &#32;&#32;&#32;&#32;}
16394 
16395 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
16396 
16397 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16398 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1af51c8230b648501330350dd18ffef0a0">formatter::dump_failed_parse_result</link>()
16399 &#32;&#32;&#32;&#32;{
16400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result_&#32;&amp;&amp;&#32;!(*result_))
16401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a51257d7977f94a0c358aab545d5e2695">stream</link>()&#32;&lt;&lt;&#32;result_-&gt;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>();
16403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
16404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
16406 &#32;&#32;&#32;&#32;}
16407 
16408 <emphasis role="preprocessor">#else</emphasis>
16409 
16410 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16411 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(<emphasis role="keyword">const</emphasis>)
16412 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;<link linkend="_classformatter">formatter</link>::<link linkend="_classformatter_1af51c8230b648501330350dd18ffef0a0">dump_failed_parse_result</link>()
16413 &#32;&#32;&#32;&#32;{
16414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
16415 &#32;&#32;&#32;&#32;}
16416 
16417 <emphasis role="preprocessor">#endif</emphasis>
16418 }
16419 <link linkend="_toml_8hpp_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
16420 
16421 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16422 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
16423 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
16424 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
16425 <emphasis role="preprocessor">#endif</emphasis>
16426 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
16427 
16428 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
16429 
16430 <emphasis role="comment">//********&#32;&#32;impl/toml_formatter.inl&#32;&#32;***********************************************************************************</emphasis>
16431 
16432 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
16433 
16434 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
16435 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16436 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
16437 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
16438 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
16439 <emphasis role="preprocessor">#undef&#32;min</emphasis>
16440 <emphasis role="preprocessor">#undef&#32;max</emphasis>
16441 <emphasis role="preprocessor">#endif</emphasis>
16442 
16443 <link linkend="_toml_8hpp_1a0e478700173d852d6baaf3fc40d6712f">TOML_DISABLE_ARITHMETIC_WARNINGS</link>;
16444 
16445 <link linkend="_toml_8hpp_1a492b1349e6331172ea2b6b9b5791ec61">TOML_ANON_NAMESPACE_START</link>
16446 {
16447 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
16448 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;toml_formatter_count_inline_columns(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;node,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;line_wrap_cols)&#32;<emphasis role="keyword">noexcept</emphasis>
16449 &#32;&#32;&#32;&#32;{
16450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(node.type())
16451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:
16453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;tbl&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;node);
16455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl.<link linkend="_classtable_1a406c059cce67faebb6aa0815624b6231">empty</link>())
16456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2u;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;{}&quot;</emphasis>
16457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;weight&#32;=&#32;3u;&#32;<emphasis role="comment">//&#32;&quot;{&#32;}&quot;</emphasis>
16458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
16459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weight&#32;+=&#32;k.length()&#32;+&#32;toml_formatter_count_inline_columns(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;line_wrap_cols)&#32;+&#32;2u;&#32;<emphasis role="comment">//&#32;+&#32;&#32;&quot;,&#32;&quot;</emphasis>
16461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(weight&#32;&gt;=&#32;line_wrap_cols)
16462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;weight;
16465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16466 
16467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:
16468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;arr&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;node);
16470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr.<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>())
16471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2u;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;[]&quot;</emphasis>
16472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;weight&#32;=&#32;3u;&#32;<emphasis role="comment">//&#32;&quot;[&#32;]&quot;</emphasis>
16473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&#32;elem&#32;:&#32;arr)
16474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weight&#32;+=&#32;toml_formatter_count_inline_columns(elem,&#32;line_wrap_cols)&#32;+&#32;2u;&#32;<emphasis role="comment">//&#32;+&#32;&#32;&quot;,&#32;&quot;</emphasis>
16476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(weight&#32;&gt;=&#32;line_wrap_cols)
16477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;weight;
16480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16481 
16482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::string:
16483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;todo:&#32;proper&#32;utf8&#32;decoding?</emphasis>
16485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;todo:&#32;tab&#32;awareness?</emphasis>
16486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;str&#32;=&#32;(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;std::string&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;node)).<link linkend="_classarray_1a0b94266548e749456885847091128b5d">get</link>();
16487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str.length()&#32;+&#32;2u;&#32;<emphasis role="comment">//&#32;+&#32;&quot;&quot;</emphasis>
16488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16489 
16490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::integer:
16491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;int64_t&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;node)).get();
16493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
16494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1u;
16495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;weight&#32;=&#32;{};
16496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;0)
16497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weight&#32;+=&#32;1u;
16499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;*=&#32;-1;
16500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;weight&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2tgmath_8h_1af26c25cec2b892904654e4068b199882">log10</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)))&#32;+&#32;1u;
16502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16503 
16504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::floating_point:
16505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;=&#32;(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;double&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;node)).get();
16507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;==&#32;0.0)
16508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3u;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;0.0&quot;</emphasis>
16509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;weight&#32;=&#32;2u;&#32;<emphasis role="comment">//&#32;&quot;.0&quot;</emphasis>
16510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&lt;&#32;0.0)
16511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weight&#32;+=&#32;1u;
16513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;*=&#32;-1.0;
16514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;weight&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2tgmath_8h_1af26c25cec2b892904654e4068b199882">log10</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))&#32;+&#32;1u;
16516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16518 
16519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::boolean:&#32;<emphasis role="keywordflow">return</emphasis>&#32;5u;
16520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date:&#32;[[fallthrough]];
16521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::time:&#32;<emphasis role="keywordflow">return</emphasis>&#32;10u;
16522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date_time:&#32;<emphasis role="keywordflow">return</emphasis>&#32;30u;
16523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::none:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
16524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
16525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16526 
16527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
16528 &#32;&#32;&#32;&#32;}
16529 
16530 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a31ffc2d7129c04c13914b97c0a6e8417">TOML_INTERNAL_LINKAGE</link>
16531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;toml_formatter_forces_multiline(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;node,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;line_wrap_cols,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;starting_column_bias)&#32;<emphasis role="keyword">noexcept</emphasis>
16532 &#32;&#32;&#32;&#32;{
16533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(toml_formatter_count_inline_columns(node,&#32;line_wrap_cols)&#32;+&#32;starting_column_bias)&#32;&gt;=&#32;line_wrap_cols;
16534 &#32;&#32;&#32;&#32;}
16535 }
16536 <link linkend="_toml_8hpp_1a0385295454ae473a68d194eaffaf597c">TOML_ANON_NAMESPACE_END</link>;
16537 
16538 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
16539 {
16540 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16541 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;toml_formatter::print_pending_table_separator()
16542 &#32;&#32;&#32;&#32;{
16543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pending_table_separator_)
16544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pending_table_separator_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16549 &#32;&#32;&#32;&#32;}
16550 
16551 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16552 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;toml_formatter::print(<emphasis role="keyword">const</emphasis>&#32;key&amp;&#32;k)
16553 &#32;&#32;&#32;&#32;{
16554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">print_string</link>(k.str(),&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
16555 &#32;&#32;&#32;&#32;}
16556 
16557 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16558 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;toml_formatter::print_inline(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl)
16559 &#32;&#32;&#32;&#32;{
16560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl.<link linkend="_classtable_1a406c059cce67faebb6aa0815624b6231">empty</link>())
16561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;{}&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16565 
16566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;{&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16567 
16568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
16570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)
16572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16574 
16575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(k);
16576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a78bb5356ddd0baf02415527e4fb036f0">terse_kvps</link>())
16577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;=&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16580 
16581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
16582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
16583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
16584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;print_inline(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
16588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16590 
16591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;&#32;}&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16592 &#32;&#32;&#32;&#32;}
16593 
16594 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16595 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;toml_formatter::print(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&amp;&#32;arr)
16596 &#32;&#32;&#32;&#32;{
16597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr.<link linkend="_classarray_1aaea8c1a0137a49b14637584bb2aa5d94">empty</link>())
16598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;[]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16602 
16603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;original_indent&#32;=&#32;<link linkend="_classformatter_1a968336d10a2780be27ec1ddf1532fbe5">indent</link>();
16604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;multiline&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;TOML_ANON_NAMESPACE::toml_formatter_forces_multiline(
16605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;arr,
16606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;120u,
16607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a39a56705bed37122f2b164f1bb143f10">indent_columns</link>()&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(original_indent&#32;&lt;&#32;0&#32;?&#32;0&#32;:&#32;original_indent));
16608 
16609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;[&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16610 
16611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multiline)
16612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(original_indent&#32;&lt;&#32;0)
16614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a968336d10a2780be27ec1ddf1532fbe5">indent</link>(0);
16615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a81bfefbaec0e8743248a31309263b32a">indent_array_elements</link>())
16616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
16617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
16620 
16621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.<link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link>();&#32;i++)
16622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
16624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
16626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!multiline)
16627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
16628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16629 
16630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multiline)
16631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16635 
16636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;arr[i];
16637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.<link linkend="_classarray_1a9ccff2347a4e44e86ec966c0aba8aec3">type</link>();
16638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
16639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
16640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;print_inline(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
16644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multiline)
16647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a968336d10a2780be27ec1ddf1532fbe5">indent</link>(original_indent);
16649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
16654 
16655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16656 &#32;&#32;&#32;&#32;}
16657 
16658 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16659 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;toml_formatter::print(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classtable">table</link>&amp;&#32;tbl)
16660 &#32;&#32;&#32;&#32;{
16661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_non_inline_array_of_tables&#32;=&#32;[](<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;n)&#32;<emphasis role="keyword">noexcept</emphasis>
16662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;arr&#32;=&#32;n.<link linkend="_classarray_1ae1acd61c688b255230a78ca6ec23fe90">as_array</link>();
16664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!arr&#32;||&#32;!arr-&gt;<link linkend="_classarray_1a6efebd20b162d0297dc45cdcb312f885">is_array_of_tables</link>())
16665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
16666 
16667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;(*arr)[0])-&gt;is_inline();
16668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
16669 
16670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;values,&#32;arrays,&#32;and&#32;inline&#32;tables/table&#32;arrays</emphasis>
16671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
16672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.<link linkend="_classtable_1a54c936c3aac096be1dcad45036ee6a9f">type</link>();
16674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;node_type::table&#32;&amp;&amp;&#32;!<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)-&gt;is_inline())
16675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;==&#32;node_type::array&#32;&amp;&amp;&#32;is_non_inline_array_of_tables(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)))
16676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
16677 
16678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pending_table_separator_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>();
16680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(k);
16682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a78bb5356ddd0baf02415527e4fb036f0">terse_kvps</link>())
16683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;=&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;&#32;=&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
16687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
16688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;print_inline(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
16692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16694 
16695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;print_key_path&#32;=&#32;[&amp;]()
16696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i{};
16698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;k&#32;:&#32;key_path_)
16699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i++)
16701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;.&apos;</emphasis>);
16702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*k);
16703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
16705 
16706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;non-inline&#32;tables</emphasis>
16707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
16708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
16710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::table&#32;||&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)-&gt;is_inline())
16711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
16712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;child_tbl&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
16713 
16714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;can&#32;skip&#32;indenting&#32;and&#32;emitting&#32;the&#32;headers&#32;for&#32;tables&#32;that&#32;only&#32;contain&#32;other&#32;tables</emphasis>
16715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(so&#32;we&#32;don&apos;t&#32;over-nest)</emphasis>
16716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;child_value_count{};&#32;<emphasis role="comment">//&#32;includes&#32;inline&#32;tables&#32;and&#32;non-table&#32;arrays</emphasis>
16717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;child_table_count{};
16718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;child_table_array_count{};
16719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[child_k,&#32;child_v]&#32;:&#32;child_tbl)
16720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05802eb834f167bd8a151e82492b8866">TOML_UNUSED</link>(child_k);
16722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;child_type&#32;=&#32;child_v.type();
16723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(child_type&#32;!=&#32;node_type::none);
16724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(child_type)
16725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:
16727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;child_v)-&gt;is_inline())
16728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;child_value_count++;
16729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;child_table_count++;
16731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16732 
16733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:
16734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_non_inline_array_of_tables(child_v))
16735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;child_table_array_count++;
16736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;child_value_count++;
16738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16739 
16740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;child_value_count++;
16741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;skip_self&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child_value_count&#32;==&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;&amp;&amp;&#32;(child_table_count&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;||&#32;child_table_array_count&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>))
16745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_self&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16746 
16747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_path_.push_back(&amp;k);
16748 
16749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!skip_self)
16750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_pending_table_separator();
16752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a7418d6ecf6698ae231a576a4bd1d1f26">indent_sub_tables</link>())
16753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
16754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;[&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_key_path();
16757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pending_table_separator_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16760 
16761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(child_tbl);
16762 
16763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_path_.pop_back();
16764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!skip_self&#32;&amp;&amp;&#32;<link linkend="_classformatter_1a7418d6ecf6698ae231a576a4bd1d1f26">indent_sub_tables</link>())
16765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();
16766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16767 
16768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;table&#32;arrays</emphasis>
16769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
16770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_non_inline_array_of_tables(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>))
16772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
16773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;arr&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
16774 
16775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a7418d6ecf6698ae231a576a4bd1d1f26">indent_sub_tables</link>())
16776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
16777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_path_.<link linkend="_classarray_1afa5750f44dfcc2e9c7097a3efb02019c">push_back</link>(&amp;k);
16778 
16779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.<link linkend="_classarray_1aeb9d2f12b9199641b8b340365a59174b">size</link>();&#32;i++)
16780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_pending_table_separator();
16782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;[[&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_key_path();
16785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;]]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pending_table_separator_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;arr[i]));
16788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16789 
16790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_path_.pop_back();
16791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a7418d6ecf6698ae231a576a4bd1d1f26">indent_sub_tables</link>())
16792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();
16793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16794 &#32;&#32;&#32;&#32;}
16795 
16796 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16797 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;toml_formatter::print()
16798 &#32;&#32;&#32;&#32;{
16799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1af51c8230b648501330350dd18ffef0a0">dump_failed_parse_result</link>())
16800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16801 
16802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;source_type&#32;=&#32;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>().<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>())
16803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:
16805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;tbl&#32;=&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>());
16807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl.<link linkend="_classtable_1aaaf20b46eede72428dea24b4f4ac85c8">is_inline</link>())
16808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_inline(tbl);
16809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();&#32;<emphasis role="comment">//&#32;so&#32;root&#32;kvps&#32;and&#32;tables&#32;have&#32;the&#32;same&#32;indent</emphasis>
16812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(tbl);
16813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
16815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16816 
16817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>()));&#32;<emphasis role="keywordflow">break</emphasis>;
16818 
16819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>(),&#32;source_type);
16820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16821 &#32;&#32;&#32;&#32;}
16822 }
16823 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
16824 
16825 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16826 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
16827 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
16828 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
16829 <emphasis role="preprocessor">#endif</emphasis>
16830 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
16831 
16832 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
16833 
16834 <emphasis role="comment">//********&#32;&#32;impl/json_formatter.inl&#32;&#32;***********************************************************************************</emphasis>
16835 
16836 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
16837 
16838 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
16839 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16840 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
16841 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
16842 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
16843 <emphasis role="preprocessor">#undef&#32;min</emphasis>
16844 <emphasis role="preprocessor">#undef&#32;max</emphasis>
16845 <emphasis role="preprocessor">#endif</emphasis>
16846 
16847 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
16848 {
16849 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16850 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;json_formatter::print(<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;&#32;tbl)
16851 &#32;&#32;&#32;&#32;{
16852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl.empty())
16853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;{}&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16857 
16858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;{&apos;</emphasis>);
16859 
16860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a7418d6ecf6698ae231a576a4bd1d1f26">indent_sub_tables</link>())
16861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
16862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
16864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)
16866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
16867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
16868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16870 
16871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">print_string</link>(k.str(),&#32;<emphasis role="keyword">false</emphasis>);
16872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a78bb5356ddd0baf02415527e4fb036f0">terse_kvps</link>())
16873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;:&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
16875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16876 
16877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
16878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
16879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
16880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
16884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a7418d6ecf6698ae231a576a4bd1d1f26">indent_sub_tables</link>())
16887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();
16888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16890 
16891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;}&apos;</emphasis>);
16892 &#32;&#32;&#32;&#32;}
16893 
16894 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16895 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;json_formatter::print(<emphasis role="keyword">const</emphasis>&#32;toml::array&amp;&#32;arr)
16896 &#32;&#32;&#32;&#32;{
16897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr.empty())
16898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;[]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16902 
16903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;[&apos;</emphasis>);
16904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a81bfefbaec0e8743248a31309263b32a">indent_array_elements</link>())
16905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
16906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.size();&#32;i++)
16907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
16909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
16910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16912 
16913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;arr[i];
16914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
16915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
16916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
16917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
16920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
16921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a81bfefbaec0e8743248a31309263b32a">indent_array_elements</link>())
16924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();
16925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>(<emphasis role="keyword">true</emphasis>);
16926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
16927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="charliteral">&apos;]&apos;</emphasis>);
16928 &#32;&#32;&#32;&#32;}
16929 
16930 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16931 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;json_formatter::print()
16932 &#32;&#32;&#32;&#32;{
16933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1af51c8230b648501330350dd18ffef0a0">dump_failed_parse_result</link>())
16934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16935 
16936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;source_type&#32;=&#32;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>().<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>())
16937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>()));&#32;<emphasis role="keywordflow">break</emphasis>;
16939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>()));&#32;<emphasis role="keywordflow">break</emphasis>;
16940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>(),&#32;source_type);
16941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16942 &#32;&#32;&#32;&#32;}
16943 }
16944 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
16945 
16946 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16947 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
16948 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
16949 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
16950 <emphasis role="preprocessor">#endif</emphasis>
16951 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
16952 
16953 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
16954 
16955 <emphasis role="comment">//********&#32;&#32;impl/yaml_formatter.inl&#32;&#32;***********************************************************************************</emphasis>
16956 
16957 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
16958 
16959 <link linkend="_toml_8hpp_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
16960 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
16961 <emphasis role="preprocessor">#pragma&#32;inline_recursion(on)</emphasis>
16962 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;min&quot;)</emphasis>
16963 <emphasis role="preprocessor">#pragma&#32;push_macro(&quot;max&quot;)</emphasis>
16964 <emphasis role="preprocessor">#undef&#32;min</emphasis>
16965 <emphasis role="preprocessor">#undef&#32;max</emphasis>
16966 <emphasis role="preprocessor">#endif</emphasis>
16967 
16968 <link linkend="_toml_8hpp_1a9bceb285d9224ce1b1ab443811722aec">TOML_NAMESPACE_START</link>
16969 {
16970 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
16971 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;yaml_formatter::print_yaml_string(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&amp;&#32;str)
16972 &#32;&#32;&#32;&#32;{
16973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str-&gt;empty())
16974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base::print(str);
16976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
16977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
16978 
16979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;contains_newline&#32;=&#32;<emphasis role="keyword">false</emphasis>;
16980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;=&#32;str-&gt;c_str(),&#32;e&#32;=&#32;str-&gt;c_str()&#32;+&#32;str-&gt;length();&#32;c&#32;&lt;&#32;<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>&#32;&amp;&amp;&#32;!contains_newline;&#32;c++)
16981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contains_newline&#32;=&#32;*c&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
16982 
16983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(contains_newline)
16984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;|-&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
16986 
16987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
16988 
16989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;line_end&#32;&#32;=&#32;str-&gt;c_str()&#32;-&#32;1u;
16990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;str-&gt;c_str()&#32;+&#32;str-&gt;length();
16991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(line_end&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
16992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
16993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;line_start&#32;=&#32;line_end&#32;+&#32;1u;
16994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line_end&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;line_start;
16995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;line_end&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;&amp;&amp;&#32;*line_end&#32;!=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;&#32;line_end++)
16996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
16997 
16998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a210082555d3fdd90061891a73b546e3d">TOML_LIKELY</link>(line_start&#32;!=&#32;line_end&#32;||&#32;line_end&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
16999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>();
17001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
17002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(std::string_view{&#32;line_start,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(line_end&#32;-&#32;line_start)&#32;});
17003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17005 
17006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();
17007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">print_string</link>(*str,&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
17010 &#32;&#32;&#32;&#32;}
17011 
17012 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
17013 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;yaml_formatter::print(<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;&#32;tbl,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parent_is_array)
17014 &#32;&#32;&#32;&#32;{
17015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl.empty())
17016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;{}&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
17018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17020 
17021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
17022 
17023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
17024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!parent_is_array)
17026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>();
17028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
17029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent_is_array&#32;=&#32;<emphasis role="keyword">false</emphasis>;
17031 
17032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">print_string</link>(k.str(),&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
17033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1a78bb5356ddd0baf02415527e4fb036f0">terse_kvps</link>())
17034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;:&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
17035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
17036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
17037 
17038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
17039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
17040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
17041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
17043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
17044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::string:&#32;print_yaml_string(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;std::string&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
17045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
17046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17048 
17049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();
17050 &#32;&#32;&#32;&#32;}
17051 
17052 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
17053 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;yaml_formatter::print(<emphasis role="keyword">const</emphasis>&#32;toml::array&amp;&#32;arr,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parent_is_array)
17054 &#32;&#32;&#32;&#32;{
17055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr.empty())
17056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;[]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
17058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17060 
17061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1af44b942ae9bd88e088558f20cf4eb3ac">increase_indent</link>();
17062 
17063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;:&#32;arr)
17064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!parent_is_array)
17066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">print_newline</link>();
17068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">print_indent</link>();
17069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parent_is_array&#32;=&#32;<emphasis role="keyword">false</emphasis>;
17071 
17072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<emphasis role="stringliteral">&quot;-&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
17073 
17074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
17075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
17076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
17077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;<emphasis role="keyword">true</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
17079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>),&#32;<emphasis role="keyword">true</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
17080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::string:&#32;print_yaml_string(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;std::string&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
17081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
17082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17084 
17085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();
17086 &#32;&#32;&#32;&#32;}
17087 
17088 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
17089 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;yaml_formatter::print()
17090 &#32;&#32;&#32;&#32;{
17091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classformatter_1af51c8230b648501330350dd18ffef0a0">dump_failed_parse_result</link>())
17092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
17093 
17094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;source_type&#32;=&#32;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>().<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>())
17095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
17096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:
17097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a42ed5a21bf27916276a7b8d977fca2ad">decrease_indent</link>();&#32;<emphasis role="comment">//&#32;so&#32;root&#32;kvps&#32;and&#32;tables&#32;have&#32;the&#32;same&#32;indent</emphasis>
17098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>()));
17099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
17100 
17101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>()));&#32;<emphasis role="keywordflow">break</emphasis>;
17102 
17103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::string:&#32;print_yaml_string(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;std::string&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>()));&#32;<emphasis role="keywordflow">break</emphasis>;
17104 
17105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">print_value</link>(<link linkend="_classformatter_1a5650ec7ead7acd3beed4bd3dc88a584e">source</link>(),&#32;source_type);
17106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
17107 &#32;&#32;&#32;&#32;}
17108 }
17109 <link linkend="_toml_8hpp_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
17110 
17111 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
17112 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;min&quot;)</emphasis>
17113 <emphasis role="preprocessor">#pragma&#32;pop_macro(&quot;max&quot;)</emphasis>
17114 <emphasis role="preprocessor">#pragma&#32;inline_recursion(off)</emphasis>
17115 <emphasis role="preprocessor">#endif</emphasis>
17116 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
17117 
17118 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
17119 
17120 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_IMPLEMENTATION</emphasis>
17121 
17122 <link linkend="_toml_8hpp_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
17123 
17124 <emphasis role="comment">//&#32;macro&#32;hygiene</emphasis>
17125 <emphasis role="preprocessor">#if&#32;TOML_UNDEF_MACROS</emphasis>
17126 <emphasis role="preprocessor">#undef&#32;TOML_ABI_NAMESPACE_BOOL</emphasis>
17127 <emphasis role="preprocessor">#undef&#32;TOML_ABI_NAMESPACE_END</emphasis>
17128 <emphasis role="preprocessor">#undef&#32;TOML_ABI_NAMESPACE_START</emphasis>
17129 <emphasis role="preprocessor">#undef&#32;TOML_ABI_NAMESPACES</emphasis>
17130 <emphasis role="preprocessor">#undef&#32;TOML_ABSTRACT_INTERFACE</emphasis>
17131 <emphasis role="preprocessor">#undef&#32;TOML_ALWAYS_INLINE</emphasis>
17132 <emphasis role="preprocessor">#undef&#32;TOML_ANON_NAMESPACE</emphasis>
17133 <emphasis role="preprocessor">#undef&#32;TOML_ANON_NAMESPACE_END</emphasis>
17134 <emphasis role="preprocessor">#undef&#32;TOML_ANON_NAMESPACE_START</emphasis>
17135 <emphasis role="preprocessor">#undef&#32;TOML_ARCH_AMD64</emphasis>
17136 <emphasis role="preprocessor">#undef&#32;TOML_ARCH_ARM</emphasis>
17137 <emphasis role="preprocessor">#undef&#32;TOML_ARCH_ARM32</emphasis>
17138 <emphasis role="preprocessor">#undef&#32;TOML_ARCH_ARM64</emphasis>
17139 <emphasis role="preprocessor">#undef&#32;TOML_ARCH_ITANIUM</emphasis>
17140 <emphasis role="preprocessor">#undef&#32;TOML_ARCH_X86</emphasis>
17141 <emphasis role="preprocessor">#undef&#32;TOML_ASSERT</emphasis>
17142 <emphasis role="preprocessor">#undef&#32;TOML_ASSERT_ASSUME</emphasis>
17143 <emphasis role="preprocessor">#undef&#32;TOML_ASSUME</emphasis>
17144 <emphasis role="preprocessor">#undef&#32;TOML_ASYMMETRICAL_EQUALITY_OPS</emphasis>
17145 <emphasis role="preprocessor">#undef&#32;TOML_ATTR</emphasis>
17146 <emphasis role="preprocessor">#undef&#32;TOML_CLANG</emphasis>
17147 <emphasis role="preprocessor">#undef&#32;TOML_CLANG_VERSION</emphasis>
17148 <emphasis role="preprocessor">#undef&#32;TOML_CLOSED_ENUM</emphasis>
17149 <emphasis role="preprocessor">#undef&#32;TOML_CLOSED_FLAGS_ENUM</emphasis>
17150 <emphasis role="preprocessor">#undef&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
17151 <emphasis role="preprocessor">#undef&#32;TOML_COMPILER_HAS_RTTI</emphasis>
17152 <emphasis role="preprocessor">#undef&#32;TOML_CONST</emphasis>
17153 <emphasis role="preprocessor">#undef&#32;TOML_CONST_GETTER</emphasis>
17154 <emphasis role="preprocessor">#undef&#32;TOML_CONST_INLINE_GETTER</emphasis>
17155 <emphasis role="preprocessor">#undef&#32;TOML_CONSTRAINED_TEMPLATE</emphasis>
17156 <emphasis role="preprocessor">#undef&#32;TOML_CPP</emphasis>
17157 <emphasis role="preprocessor">#undef&#32;TOML_DECLSPEC</emphasis>
17158 <emphasis role="preprocessor">#undef&#32;TOML_DELETE_DEFAULTS</emphasis>
17159 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_ARITHMETIC_WARNINGS</emphasis>
17160 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS</emphasis>
17161 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_SPAM_WARNINGS</emphasis>
17162 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_SPAM_WARNINGS_CLANG_10</emphasis>
17163 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_SPAM_WARNINGS_CLANG_11</emphasis>
17164 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS</emphasis>
17165 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_SWITCH_WARNINGS</emphasis>
17166 <emphasis role="preprocessor">#undef&#32;TOML_DISABLE_WARNINGS</emphasis>
17167 <emphasis role="preprocessor">#undef&#32;TOML_DOXYGEN</emphasis>
17168 <emphasis role="preprocessor">#undef&#32;TOML_EMPTY_BASES</emphasis>
17169 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_IF</emphasis>
17170 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_WARNINGS</emphasis>
17171 <emphasis role="preprocessor">#undef&#32;TOML_EVAL_BOOL_0</emphasis>
17172 <emphasis role="preprocessor">#undef&#32;TOML_EVAL_BOOL_1</emphasis>
17173 <emphasis role="preprocessor">#undef&#32;TOML_EXTERNAL_LINKAGE</emphasis>
17174 <emphasis role="preprocessor">#undef&#32;TOML_FLAGS_ENUM</emphasis>
17175 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT_CHARCONV</emphasis>
17176 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT128</emphasis>
17177 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT16_DIG</emphasis>
17178 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT16_LIMITS_SET</emphasis>
17179 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT16_MANT_DIG</emphasis>
17180 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT16_MAX_10_EXP</emphasis>
17181 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT16_MAX_EXP</emphasis>
17182 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT16_MIN_10_EXP</emphasis>
17183 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT16_MIN_EXP</emphasis>
17184 <emphasis role="preprocessor">#undef&#32;TOML_GCC</emphasis>
17185 <emphasis role="preprocessor">#undef&#32;TOML_HAS_ATTR</emphasis>
17186 <emphasis role="preprocessor">#undef&#32;TOML_HAS_BUILTIN</emphasis>
17187 <emphasis role="preprocessor">#undef&#32;TOML_HAS_CHAR8</emphasis>
17188 <emphasis role="preprocessor">#undef&#32;TOML_HAS_CPP_ATTR</emphasis>
17189 <emphasis role="preprocessor">#undef&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE</emphasis>
17190 <emphasis role="preprocessor">#undef&#32;TOML_HAS_FEATURE</emphasis>
17191 <emphasis role="preprocessor">#undef&#32;TOML_HAS_INCLUDE</emphasis>
17192 <emphasis role="preprocessor">#undef&#32;TOML_HAS_SSE2</emphasis>
17193 <emphasis role="preprocessor">#undef&#32;TOML_HAS_SSE4_1</emphasis>
17194 <emphasis role="preprocessor">#undef&#32;TOML_HIDDEN_CONSTRAINT</emphasis>
17195 <emphasis role="preprocessor">#undef&#32;TOML_ICC</emphasis>
17196 <emphasis role="preprocessor">#undef&#32;TOML_ICC_CL</emphasis>
17197 <emphasis role="preprocessor">#undef&#32;TOML_IMPL_NAMESPACE_END</emphasis>
17198 <emphasis role="preprocessor">#undef&#32;TOML_IMPL_NAMESPACE_START</emphasis>
17199 <emphasis role="preprocessor">#undef&#32;TOML_IMPLEMENTATION</emphasis>
17200 <emphasis role="preprocessor">#undef&#32;TOML_INCLUDE_WINDOWS_H</emphasis>
17201 <emphasis role="preprocessor">#undef&#32;TOML_INT_CHARCONV</emphasis>
17202 <emphasis role="preprocessor">#undef&#32;TOML_INT128</emphasis>
17203 <emphasis role="preprocessor">#undef&#32;TOML_INTELLISENSE</emphasis>
17204 <emphasis role="preprocessor">#undef&#32;TOML_INTERNAL_LINKAGE</emphasis>
17205 <emphasis role="preprocessor">#undef&#32;TOML_LANG_AT_LEAST</emphasis>
17206 <emphasis role="preprocessor">#undef&#32;TOML_LANG_EFFECTIVE_VERSION</emphasis>
17207 <emphasis role="preprocessor">#undef&#32;TOML_LANG_HIGHER_THAN</emphasis>
17208 <emphasis role="preprocessor">#undef&#32;TOML_LANG_UNRELEASED</emphasis>
17209 <emphasis role="preprocessor">#undef&#32;TOML_LAUNDER</emphasis>
17210 <emphasis role="preprocessor">#undef&#32;TOML_LIFETIME_HOOKS</emphasis>
17211 <emphasis role="preprocessor">#undef&#32;TOML_LIKELY</emphasis>
17212 <emphasis role="preprocessor">#undef&#32;TOML_LIKELY_CASE</emphasis>
17213 <emphasis role="preprocessor">#undef&#32;TOML_MAKE_FLAGS</emphasis>
17214 <emphasis role="preprocessor">#undef&#32;TOML_MAKE_FLAGS_</emphasis>
17215 <emphasis role="preprocessor">#undef&#32;TOML_MAKE_FLAGS_1</emphasis>
17216 <emphasis role="preprocessor">#undef&#32;TOML_MAKE_FLAGS_2</emphasis>
17217 <emphasis role="preprocessor">#undef&#32;TOML_MAKE_STRING</emphasis>
17218 <emphasis role="preprocessor">#undef&#32;TOML_MAKE_STRING_1</emphasis>
17219 <emphasis role="preprocessor">#undef&#32;TOML_MAKE_VERSION</emphasis>
17220 <emphasis role="preprocessor">#undef&#32;TOML_MSVC</emphasis>
17221 <emphasis role="preprocessor">#undef&#32;TOML_NAMESPACE</emphasis>
17222 <emphasis role="preprocessor">#undef&#32;TOML_NEVER_INLINE</emphasis>
17223 <emphasis role="preprocessor">#undef&#32;TOML_NODISCARD</emphasis>
17224 <emphasis role="preprocessor">#undef&#32;TOML_NODISCARD_CTOR</emphasis>
17225 <emphasis role="preprocessor">#undef&#32;TOML_OPEN_ENUM</emphasis>
17226 <emphasis role="preprocessor">#undef&#32;TOML_OPEN_FLAGS_ENUM</emphasis>
17227 <emphasis role="preprocessor">#undef&#32;TOML_PARSER_TYPENAME</emphasis>
17228 <emphasis role="preprocessor">#undef&#32;TOML_POP_WARNINGS</emphasis>
17229 <emphasis role="preprocessor">#undef&#32;TOML_PRAGMA_CLANG</emphasis>
17230 <emphasis role="preprocessor">#undef&#32;TOML_PRAGMA_CLANG_GE_10</emphasis>
17231 <emphasis role="preprocessor">#undef&#32;TOML_PRAGMA_CLANG_GE_11</emphasis>
17232 <emphasis role="preprocessor">#undef&#32;TOML_PRAGMA_CLANG_GE_9</emphasis>
17233 <emphasis role="preprocessor">#undef&#32;TOML_PRAGMA_GCC</emphasis>
17234 <emphasis role="preprocessor">#undef&#32;TOML_PRAGMA_ICC</emphasis>
17235 <emphasis role="preprocessor">#undef&#32;TOML_PRAGMA_MSVC</emphasis>
17236 <emphasis role="preprocessor">#undef&#32;TOML_PURE</emphasis>
17237 <emphasis role="preprocessor">#undef&#32;TOML_PURE_GETTER</emphasis>
17238 <emphasis role="preprocessor">#undef&#32;TOML_PURE_INLINE_GETTER</emphasis>
17239 <emphasis role="preprocessor">#undef&#32;TOML_PUSH_WARNINGS</emphasis>
17240 <emphasis role="preprocessor">#undef&#32;TOML_REQUIRES</emphasis>
17241 <emphasis role="preprocessor">#undef&#32;TOML_SA_LIST_BEG</emphasis>
17242 <emphasis role="preprocessor">#undef&#32;TOML_SA_LIST_END</emphasis>
17243 <emphasis role="preprocessor">#undef&#32;TOML_SA_LIST_NEW</emphasis>
17244 <emphasis role="preprocessor">#undef&#32;TOML_SA_LIST_NXT</emphasis>
17245 <emphasis role="preprocessor">#undef&#32;TOML_SA_LIST_SEP</emphasis>
17246 <emphasis role="preprocessor">#undef&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST</emphasis>
17247 <emphasis role="preprocessor">#undef&#32;TOML_SA_NEWLINE</emphasis>
17248 <emphasis role="preprocessor">#undef&#32;TOML_SA_NODE_TYPE_LIST</emphasis>
17249 <emphasis role="preprocessor">#undef&#32;TOML_SA_UNWRAPPED_NODE_TYPE_LIST</emphasis>
17250 <emphasis role="preprocessor">#undef&#32;TOML_SA_VALUE_EXACT_FUNC_MESSAGE</emphasis>
17251 <emphasis role="preprocessor">#undef&#32;TOML_SA_VALUE_FUNC_MESSAGE</emphasis>
17252 <emphasis role="preprocessor">#undef&#32;TOML_SA_VALUE_MESSAGE_CONST_CHAR8</emphasis>
17253 <emphasis role="preprocessor">#undef&#32;TOML_SA_VALUE_MESSAGE_U8STRING_VIEW</emphasis>
17254 <emphasis role="preprocessor">#undef&#32;TOML_SA_VALUE_MESSAGE_WSTRING</emphasis>
17255 <emphasis role="preprocessor">#undef&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES</emphasis>
17256 <emphasis role="preprocessor">#undef&#32;TOML_TRIVIAL_ABI</emphasis>
17257 <emphasis role="preprocessor">#undef&#32;TOML_UINT128</emphasis>
17258 <emphasis role="preprocessor">#undef&#32;TOML_UNLIKELY</emphasis>
17259 <emphasis role="preprocessor">#undef&#32;TOML_UNLIKELY_CASE</emphasis>
17260 <emphasis role="preprocessor">#undef&#32;TOML_UNREACHABLE</emphasis>
17261 <emphasis role="preprocessor">#undef&#32;TOML_UNUSED</emphasis>
17262 <emphasis role="preprocessor">#undef&#32;TOML_WINDOWS</emphasis>
17263 <emphasis role="preprocessor">#endif</emphasis>
17264 
17265 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOMLPLUSPLUS_H</emphasis>
</programlisting></section>
