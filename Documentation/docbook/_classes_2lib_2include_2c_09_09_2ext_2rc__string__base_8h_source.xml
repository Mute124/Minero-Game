<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2rc__string__base_8h_source" xml:lang="en-US">
<title>rc_string_base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/rc_string_base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Reference-counted&#32;versatile&#32;string&#32;base&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_RC_STRING_BASE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_RC_STRING_BASE_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#include&#32;&lt;ext/atomicity.h&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_funcs.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
82 &#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__rc_string_base
84 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;__vstring_utility&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;
85 &#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::char_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
90 
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__vstring_utility&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;&#32;&#32;&#32;&#32;_Util_Base;
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Util_Base::_CharT_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT_alloc_type;
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT_alloc_type::size_type&#32;&#32;&#32;&#32;&#32;size_type;
94 
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Rep:&#32;string&#32;representation</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;Invariants:</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;1.&#32;String&#32;really&#32;contains&#32;_M_length&#32;+&#32;1&#32;characters:&#32;due&#32;to&#32;21.3.4</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;must&#32;be&#32;kept&#32;null-terminated.</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;2.&#32;_M_capacity&#32;&gt;=&#32;_M_length</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;Allocated&#32;memory&#32;is&#32;always&#32;(_M_capacity&#32;+&#32;1)&#32;*&#32;sizeof(_CharT).</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;3.&#32;_M_refcount&#32;has&#32;three&#32;states:</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;-1:&#32;leaked,&#32;one&#32;reference,&#32;no&#32;ref-copies&#32;allowed,&#32;non-const.</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;0:&#32;one&#32;reference,&#32;non-const.</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;n&gt;0:&#32;n&#32;+&#32;1&#32;references,&#32;operations&#32;require&#32;a&#32;lock,&#32;const.</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;4.&#32;All&#32;fields&#32;==&#32;0&#32;is&#32;an&#32;empty&#32;string,&#32;given&#32;the&#32;extra&#32;storage</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;beyond-the-end&#32;for&#32;a&#32;null&#32;terminator;&#32;thus,&#32;the&#32;shared</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;empty&#32;string&#32;representation&#32;needs&#32;no&#32;constructor.</emphasis>
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rep
110 &#32;&#32;&#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">union</emphasis>
112 &#32;&#32;&#32;&#32;{
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_length;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;&#32;_M_refcount;
118 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_info;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;for&#32;alignment&#32;purposes.</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_align;
122 &#32;&#32;&#32;&#32;};
123 
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__alloc_traits&lt;_Alloc&gt;::template&#32;rebind&lt;_Rep&gt;::other
125 &#32;&#32;&#32;&#32;&#32;&#32;_Rep_alloc_type;
126 
127 &#32;&#32;&#32;&#32;_CharT*
128 &#32;&#32;&#32;&#32;_M_refdata()&#32;<emphasis role="keywordflow">throw</emphasis>()
129 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_CharT*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>&#32;+&#32;1);&#32;}
130 
131 &#32;&#32;&#32;&#32;_CharT*
132 &#32;&#32;&#32;&#32;_M_refcopy()&#32;<emphasis role="keywordflow">throw</emphasis>()
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_add_dispatch(&amp;_M_info._M_refcount,&#32;1);
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refdata();
136 &#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;MT</emphasis>
137 
138 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
139 &#32;&#32;&#32;&#32;_M_set_length(size_type&#32;__n)
140 &#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;_M_info._M_refcount&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;One&#32;reference.</emphasis>
142 &#32;&#32;&#32;&#32;&#32;&#32;_M_info._M_length&#32;=&#32;__n;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;grrr.&#32;(per&#32;21.3.4)</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;You&#32;cannot&#32;leave&#32;those&#32;LWG&#32;people&#32;alone&#32;for&#32;a&#32;second.</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(_M_refdata()[__n],&#32;_CharT());
146 &#32;&#32;&#32;&#32;}
147 
148 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;&amp;&#32;Destroy</emphasis>
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Rep*
150 &#32;&#32;&#32;&#32;_S_create(size_type,&#32;size_type,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;);
151 
152 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
153 &#32;&#32;&#32;&#32;_M_destroy(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
154 
155 &#32;&#32;&#32;&#32;_CharT*
156 &#32;&#32;&#32;&#32;_M_clone(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;size_type&#32;__res&#32;=&#32;0);
157 &#32;&#32;&#32;&#32;&#32;&#32;};
158 
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Rep_empty
160 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Rep
161 &#32;&#32;&#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_terminal;
163 &#32;&#32;&#32;&#32;&#32;&#32;};
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Rep_empty&#32;&#32;&#32;&#32;&#32;_S_empty_rep;
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;maximum&#32;number&#32;of&#32;individual&#32;char_type&#32;elements&#32;of&#32;an</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;individual&#32;string&#32;is&#32;determined&#32;by&#32;_S_max_size.&#32;This&#32;is&#32;the</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;value&#32;that&#32;will&#32;be&#32;returned&#32;by&#32;max_size().&#32;&#32;(Whereas&#32;npos</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;the&#32;maximum&#32;number&#32;of&#32;bytes&#32;the&#32;allocator&#32;can&#32;allocate.)</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;one&#32;was&#32;to&#32;divvy&#32;up&#32;the&#32;theoretical&#32;largest&#32;size&#32;string,</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;a&#32;terminating&#32;character&#32;and&#32;m&#32;_CharT&#32;elements,&#32;it&apos;d</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;look&#32;like&#32;this:</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;npos&#32;=&#32;sizeof(_Rep)&#32;+&#32;(m&#32;*&#32;sizeof(_CharT))&#32;+&#32;sizeof(_CharT)</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;sizeof(_Rep)&#32;-&#32;1</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(NB:&#32;last&#32;two&#32;terms&#32;for&#32;rounding&#32;reasons,&#32;see&#32;_M_create&#32;below)</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Solving&#32;for&#32;m:</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m&#32;=&#32;((npos&#32;-&#32;2&#32;*&#32;sizeof(_Rep)&#32;+&#32;1)&#32;/&#32;sizeof(_CharT))&#32;-&#32;1</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;addition,&#32;this&#32;implementation&#32;halves&#32;this&#32;amount.</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_max_size&#32;=&#32;(((<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(-1)&#32;-&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep)
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;1)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT))&#32;-&#32;1)&#32;/&#32;2&#32;};
182 
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Member&#32;(private):</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Util_Base::template&#32;_Alloc_hider&lt;_Alloc&gt;&#32;&#32;_M_dataplus;
185 
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(_CharT*&#32;__p)
188 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_dataplus._M_p&#32;=&#32;__p;&#32;}
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*
191 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()<emphasis role="keyword">&#32;const</emphasis>
192 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;((<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Rep*<emphasis role="keyword">&gt;</emphasis>(_M_data()))[-1]);&#32;}
193 
194 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
195 &#32;&#32;&#32;&#32;&#32;&#32;_M_grab(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc)<emphasis role="keyword">&#32;const</emphasis>
196 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(!_M_is_leaked()&#32;&amp;&amp;&#32;_M_get_allocator()&#32;==&#32;__alloc)
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_rep()-&gt;_M_refcopy()&#32;:&#32;_M_rep()-&gt;_M_clone(__alloc);
199 &#32;&#32;&#32;&#32;&#32;&#32;}
200 
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()
203 &#32;&#32;&#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
205 &#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_rep()-&gt;_M_info.
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount);
207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__exchange_and_add_dispatch(&amp;_M_rep()-&gt;_M_info._M_refcount,
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)&#32;&lt;=&#32;0)
209 &#32;&#32;&#32;&#32;&#32;&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_rep()-&gt;_M_info.
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount);
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_destroy(_M_get_allocator());
213 &#32;&#32;&#32;&#32;&#32;&#32;}
214 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;MT</emphasis>
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;_M_is_leaked()<emphasis role="keyword">&#32;const</emphasis>
218 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep()-&gt;_M_info._M_refcount&#32;&lt;&#32;0;&#32;}
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
221 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_sharable()
222 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_rep()-&gt;_M_info._M_refcount&#32;=&#32;0;&#32;}
223 
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;_M_leak_hard();
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_construct_aux&#32;is&#32;used&#32;to&#32;implement&#32;the&#32;21.3.1&#32;para&#32;15&#32;which</emphasis>
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requires&#32;special&#32;behaviour&#32;if&#32;_InIterator&#32;is&#32;an&#32;integral&#32;type</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
230 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
231 &#32;&#32;&#32;&#32;_S_construct_aux(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;std::__false_type)
233 &#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_InIterator&gt;::iterator_category
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tag;
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct(__beg,&#32;__end,&#32;__a,&#32;_Tag());
237 &#32;&#32;&#32;&#32;}
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
243 &#32;&#32;&#32;&#32;_S_construct_aux(_Integer&#32;__beg,&#32;_Integer&#32;__end,
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;std::__true_type)
245 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct_aux_2(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__beg),
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end,&#32;__a);&#32;}
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
249 &#32;&#32;&#32;&#32;&#32;&#32;_S_construct_aux_2(size_type&#32;__req,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
250 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct(__req,&#32;__c,&#32;__a);&#32;}
251 
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
254 &#32;&#32;&#32;&#32;_S_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
255 &#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InIterator&gt;::__type&#32;_Integral;
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_construct_aux(__beg,&#32;__end,&#32;__a,&#32;_Integral());
258 &#32;&#32;&#32;&#32;}
259 
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;Input&#32;Iterators,&#32;used&#32;in&#32;istreambuf_iterators,&#32;etc.</emphasis>
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
263 &#32;&#32;&#32;&#32;&#32;_S_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag);
265 
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;forward_iterators&#32;up&#32;to&#32;random_access_iterators,&#32;used&#32;for</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string::iterator,&#32;_CharT*,&#32;etc.</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FwdIterator&gt;
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
270 &#32;&#32;&#32;&#32;_S_construct(_FwdIterator&#32;__beg,&#32;_FwdIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag);
272 
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_CharT*
274 &#32;&#32;&#32;&#32;&#32;&#32;_S_construct(size_type&#32;__req,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
275 
276 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
277 &#32;&#32;&#32;&#32;&#32;&#32;size_type
278 &#32;&#32;&#32;&#32;&#32;&#32;_M_max_size()<emphasis role="keyword">&#32;const</emphasis>
279 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;size_type(_S_max_size);&#32;}
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
282 &#32;&#32;&#32;&#32;&#32;&#32;_M_data()<emphasis role="keyword">&#32;const</emphasis>
283 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus._M_p;&#32;}
284 
285 &#32;&#32;&#32;&#32;&#32;&#32;size_type
286 &#32;&#32;&#32;&#32;&#32;&#32;_M_length()<emphasis role="keyword">&#32;const</emphasis>
287 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep()-&gt;_M_info._M_length;&#32;}
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;size_type
290 &#32;&#32;&#32;&#32;&#32;&#32;_M_capacity()<emphasis role="keyword">&#32;const</emphasis>
291 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep()-&gt;_M_info._M_capacity;&#32;}
292 
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;_M_is_shared()<emphasis role="keyword">&#32;const</emphasis>
295 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_rep()-&gt;_M_info._M_refcount&#32;&gt;&#32;0;&#32;}
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_leaked()
299 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_rep()-&gt;_M_info._M_refcount&#32;=&#32;-1;&#32;}
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;_M_leak()&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;use&#32;in&#32;begin()&#32;&amp;&#32;non-const&#32;op[]</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;{
304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_is_leaked())
305 &#32;&#32;&#32;&#32;&#32;&#32;_M_leak_hard();
306 &#32;&#32;&#32;&#32;&#32;&#32;}
307 
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
309 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(size_type&#32;__n)
310 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_rep()-&gt;_M_set_length(__n);&#32;}
311 
312 &#32;&#32;&#32;&#32;&#32;&#32;__rc_string_base()
313 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_S_empty_rep._M_refcopy())&#32;{&#32;}
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;__rc_string_base(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;__rc_string_base(<emphasis role="keyword">const</emphasis>&#32;__rc_string_base&amp;&#32;__rcs);
318 
319 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
320 &#32;&#32;&#32;&#32;&#32;&#32;__rc_string_base(__rc_string_base&amp;&amp;&#32;__rcs)
321 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(__rcs._M_dataplus)
322 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__rcs._M_data(_S_empty_rep._M_refcopy());&#32;}
323 <emphasis role="preprocessor">#endif</emphasis>
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;__rc_string_base(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
328 &#32;&#32;&#32;&#32;__rc_string_base(_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end,
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a);
330 
331 &#32;&#32;&#32;&#32;&#32;&#32;~__rc_string_base()
332 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_dispose();&#32;}
333 
334 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type&amp;
335 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_allocator()
336 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus;&#32;}
337 
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;
339 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_allocator()<emphasis role="keyword">&#32;const</emphasis>
340 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus;&#32;}
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(__rc_string_base&amp;&#32;__rcs);
344 
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
346 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(<emphasis role="keyword">const</emphasis>&#32;__rc_string_base&amp;&#32;__rcs);
347 
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;_M_reserve(size_type&#32;__res);
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__len2);
354 
355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(size_type&#32;__pos,&#32;size_type&#32;__n);
357 
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;_M_clear()
360 &#32;&#32;&#32;&#32;&#32;&#32;{
361 &#32;&#32;&#32;&#32;_M_dispose();
362 &#32;&#32;&#32;&#32;_M_data(_S_empty_rep._M_refcopy());
363 &#32;&#32;&#32;&#32;&#32;&#32;}
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
366 &#32;&#32;&#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;__rc_string_base&amp;)<emphasis role="keyword">&#32;const</emphasis>
367 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
368 &#32;&#32;&#32;&#32;};
369 
370 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
371 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::_Rep_empty
372 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::_S_empty_rep;
373 
374 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::_Rep*
376 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::_Rep::
377 &#32;&#32;&#32;&#32;_S_create(size_type&#32;__capacity,&#32;size_type&#32;__old_capacity,
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc)
379 &#32;&#32;&#32;&#32;{
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;83.&#32;&#32;String::npos&#32;vs.&#32;string::max_size()</emphasis>
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;size_type(_S_max_size))
383 &#32;&#32;&#32;&#32;std::__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;__rc_string_base::_Rep::_S_create&quot;</emphasis>));
384 
385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;standard&#32;places&#32;no&#32;restriction&#32;on&#32;allocating&#32;more&#32;memory</emphasis>
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;than&#32;is&#32;strictly&#32;needed&#32;within&#32;this&#32;layer&#32;at&#32;the&#32;moment&#32;or&#32;as</emphasis>
387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requested&#32;by&#32;an&#32;explicit&#32;application&#32;call&#32;to&#32;reserve().</emphasis>
388 
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Many&#32;malloc&#32;implementations&#32;perform&#32;quite&#32;poorly&#32;when&#32;an</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;application&#32;attempts&#32;to&#32;allocate&#32;memory&#32;in&#32;a&#32;stepwise&#32;fashion</emphasis>
391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;growing&#32;each&#32;allocation&#32;size&#32;by&#32;only&#32;1&#32;char.&#32;&#32;Additionally,</emphasis>
392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;it&#32;makes&#32;little&#32;sense&#32;to&#32;allocate&#32;less&#32;linear&#32;memory&#32;than&#32;the</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;natural&#32;blocking&#32;size&#32;of&#32;the&#32;malloc&#32;implementation.</emphasis>
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unfortunately,&#32;we&#32;would&#32;need&#32;a&#32;somewhat&#32;low-level&#32;calculation</emphasis>
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;tuned&#32;parameters&#32;to&#32;get&#32;this&#32;perfect&#32;for&#32;any&#32;particular</emphasis>
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;malloc&#32;implementation.&#32;&#32;Fortunately,&#32;generalizations&#32;about</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;common&#32;features&#32;seen&#32;among&#32;implementations&#32;seems&#32;to&#32;suffice.</emphasis>
398 
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__pagesize&#32;need&#32;not&#32;match&#32;the&#32;actual&#32;VM&#32;page&#32;size&#32;for&#32;good</emphasis>
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;results&#32;in&#32;practice,&#32;thus&#32;we&#32;pick&#32;a&#32;common&#32;value&#32;on&#32;the&#32;low</emphasis>
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;side.&#32;&#32;__malloc_header_size&#32;is&#32;an&#32;estimate&#32;of&#32;the&#32;amount&#32;of</emphasis>
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;overhead&#32;per&#32;memory&#32;allocation&#32;(in&#32;practice&#32;seen&#32;N&#32;*&#32;sizeof</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(void*)&#32;where&#32;N&#32;is&#32;0,&#32;2&#32;or&#32;4).&#32;&#32;According&#32;to&#32;folklore,</emphasis>
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;picking&#32;this&#32;value&#32;on&#32;the&#32;high&#32;side&#32;is&#32;better&#32;than</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;low-balling&#32;it&#32;(especially&#32;when&#32;this&#32;algorithm&#32;is&#32;used&#32;with</emphasis>
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;malloc&#32;implementations&#32;that&#32;allocate&#32;memory&#32;blocks&#32;rounded&#32;up</emphasis>
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;a&#32;size&#32;which&#32;is&#32;a&#32;power&#32;of&#32;2).</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pagesize&#32;=&#32;4096;
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__malloc_header_size&#32;=&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">void</emphasis>*);
410 
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;below&#32;implements&#32;an&#32;exponential&#32;growth&#32;policy,&#32;necessary&#32;to</emphasis>
412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;meet&#32;amortized&#32;linear&#32;time&#32;requirements&#32;of&#32;the&#32;library:&#32;see</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;__old_capacity&#32;&amp;&amp;&#32;__capacity&#32;&lt;&#32;2&#32;*&#32;__old_capacity)
415 &#32;&#32;&#32;&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;2&#32;*&#32;__old_capacity;
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Never&#32;allocate&#32;a&#32;string&#32;bigger&#32;than&#32;_S_max_size.</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;size_type(_S_max_size))
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;size_type(_S_max_size);
420 &#32;&#32;&#32;&#32;}
421 
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Need&#32;an&#32;array&#32;of&#32;char_type[__capacity],&#32;plus&#32;a&#32;terminating</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;null&#32;char_type()&#32;element,&#32;plus&#32;enough&#32;for&#32;the&#32;_Rep&#32;data&#32;structure,</emphasis>
424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;plus&#32;sizeof(_Rep)&#32;-&#32;1&#32;to&#32;upper&#32;round&#32;to&#32;a&#32;size&#32;multiple&#32;of</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sizeof(_Rep).</emphasis>
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Whew.&#32;Seemingly&#32;so&#32;needy,&#32;yet&#32;so&#32;elemental.</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__size&#32;=&#32;((__capacity&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT)
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep)&#32;-&#32;1);
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__adj_size&#32;=&#32;__size&#32;+&#32;__malloc_header_size;
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__adj_size&#32;&gt;&#32;__pagesize&#32;&amp;&amp;&#32;__capacity&#32;&gt;&#32;__old_capacity)
432 &#32;&#32;&#32;&#32;{
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__extra&#32;=&#32;__pagesize&#32;-&#32;__adj_size&#32;%&#32;__pagesize;
434 &#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;+=&#32;__extra&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT);
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__capacity&#32;&gt;&#32;size_type(_S_max_size))
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;size_type(_S_max_size);
437 &#32;&#32;&#32;&#32;&#32;&#32;__size&#32;=&#32;(__capacity&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT)&#32;+&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep)&#32;-&#32;1;
438 &#32;&#32;&#32;&#32;}
439 
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Might&#32;throw,&#32;but&#32;no&#32;worries&#32;about&#32;a&#32;leak,&#32;mate:&#32;_Rep()</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;does&#32;not&#32;throw.</emphasis>
442 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__place&#32;=&#32;_Rep_alloc_type(__alloc).allocate(__size&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep));
443 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__p&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(__place)&#32;_Rep;
444 &#32;&#32;&#32;&#32;&#32;&#32;__p-&gt;_M_info._M_capacity&#32;=&#32;__capacity;
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
446 &#32;&#32;&#32;&#32;}
447 
448 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
449 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
450 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::_Rep::
451 &#32;&#32;&#32;&#32;_M_destroy(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;()
452 &#32;&#32;&#32;&#32;{
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;((_M_info._M_capacity&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT)
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep)&#32;-&#32;1);
455 &#32;&#32;&#32;&#32;&#32;&#32;_Rep_alloc_type(__a).deallocate(<emphasis role="keyword">this</emphasis>,&#32;__size&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Rep));
456 &#32;&#32;&#32;&#32;}
457 
458 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
459 &#32;&#32;&#32;&#32;_CharT*
460 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::_Rep::
461 &#32;&#32;&#32;&#32;_M_clone(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc,&#32;size_type&#32;__res)
462 &#32;&#32;&#32;&#32;{
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Requested&#32;capacity&#32;of&#32;the&#32;clone.</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__requested_cap&#32;=&#32;_M_info._M_length&#32;+&#32;__res;
465 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__requested_cap,&#32;_M_info._M_capacity,
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc);
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_info._M_length)
469 &#32;&#32;&#32;&#32;__rc_string_base::_S_copy(__r-&gt;_M_refdata(),&#32;_M_refdata(),&#32;_M_info._M_length);
470 
471 &#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_set_length(_M_info._M_length);
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
473 &#32;&#32;&#32;&#32;}
474 
475 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
476 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
477 &#32;&#32;&#32;&#32;__rc_string_base(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
478 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__a,&#32;_S_construct(size_type(),&#32;_CharT(),&#32;__a))&#32;{&#32;}
479 
480 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
481 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
482 &#32;&#32;&#32;&#32;__rc_string_base(<emphasis role="keyword">const</emphasis>&#32;__rc_string_base&amp;&#32;__rcs)
483 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__rcs._M_get_allocator(),
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_grab(__rcs._M_get_allocator()))&#32;{&#32;}
485 
486 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
487 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
488 &#32;&#32;&#32;&#32;__rc_string_base(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
489 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__a,&#32;_S_construct(__n,&#32;__c,&#32;__a))&#32;{&#32;}
490 
491 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
492 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
493 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
494 &#32;&#32;&#32;&#32;__rc_string_base(_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end,
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
496 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(__a,&#32;_S_construct(__beg,&#32;__end,&#32;__a))&#32;{&#32;}
497 
498 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
499 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
500 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
501 &#32;&#32;&#32;&#32;_M_leak_hard()
502 &#32;&#32;&#32;&#32;{
503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_shared())
504 &#32;&#32;&#32;&#32;_M_erase(0,&#32;0);
505 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_leaked();
506 &#32;&#32;&#32;&#32;}
507 
508 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;is&#32;the&#32;special&#32;case&#32;for&#32;Input&#32;Iterators,&#32;used&#32;in</emphasis>
509 &#32;&#32;<emphasis role="comment">//&#32;istreambuf_iterators,&#32;etc.</emphasis>
510 &#32;&#32;<emphasis role="comment">//&#32;Input&#32;Iterators&#32;have&#32;a&#32;cost&#32;structure&#32;very&#32;different&#32;from</emphasis>
511 &#32;&#32;<emphasis role="comment">//&#32;pointers,&#32;calling&#32;for&#32;a&#32;different&#32;coding&#32;style.</emphasis>
512 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
514 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
515 &#32;&#32;&#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
516 &#32;&#32;&#32;&#32;&#32;&#32;_S_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
518 &#32;&#32;&#32;&#32;&#32;&#32;{
519 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__beg&#32;==&#32;__end&#32;&amp;&amp;&#32;__a&#32;==&#32;_Alloc())
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty_rep._M_refcopy();
521 
522 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;reallocation&#32;for&#32;common&#32;case.</emphasis>
523 &#32;&#32;&#32;&#32;_CharT&#32;__buf[128];
524 &#32;&#32;&#32;&#32;size_type&#32;__len&#32;=&#32;0;
525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__beg&#32;!=&#32;__end&#32;&amp;&amp;&#32;__len&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(__buf)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT))
526 &#32;&#32;&#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buf[__len++]&#32;=&#32;*__beg;
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__beg;
529 &#32;&#32;&#32;&#32;&#32;&#32;}
530 &#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__len,&#32;size_type(0),&#32;__a);
531 &#32;&#32;&#32;&#32;_S_copy(__r-&gt;_M_refdata(),&#32;__buf,&#32;__len);
532 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
533 &#32;&#32;&#32;&#32;&#32;&#32;{
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__beg&#32;!=&#32;__end)
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;==&#32;__r-&gt;_M_info._M_capacity)
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;more&#32;space.</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__another&#32;=&#32;_Rep::_S_create(__len&#32;+&#32;1,&#32;__len,&#32;__a);
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_copy(__another-&gt;_M_refdata(),&#32;__r-&gt;_M_refdata(),&#32;__len);
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_destroy(__a);
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;__another;
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_refdata()[__len++]&#32;=&#32;*__beg;
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__beg;
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
547 &#32;&#32;&#32;&#32;&#32;&#32;}
548 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
549 &#32;&#32;&#32;&#32;&#32;&#32;{
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_destroy(__a);
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
552 &#32;&#32;&#32;&#32;&#32;&#32;}
553 &#32;&#32;&#32;&#32;__r-&gt;_M_set_length(__len);
554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
555 &#32;&#32;&#32;&#32;&#32;&#32;}
556 
557 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
558 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
559 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
560 &#32;&#32;&#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
561 &#32;&#32;&#32;&#32;&#32;&#32;_S_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
563 &#32;&#32;&#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__beg&#32;==&#32;__end&#32;&amp;&amp;&#32;__a&#32;==&#32;_Alloc())
565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty_rep._M_refcopy();
566 
567 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Not&#32;required,&#32;but&#32;considered&#32;best&#32;practice.</emphasis>
568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_null_pointer(__beg)&#32;&amp;&amp;&#32;__beg&#32;!=&#32;__end)
569 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;__rc_string_base::&quot;</emphasis>
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_S_construct&#32;null&#32;not&#32;valid&quot;</emphasis>));
571 
572 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__dnew&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(std::distance(__beg,
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end));
574 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;out_of_range&#32;and&#32;length_error&#32;exceptions.</emphasis>
575 &#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__dnew,&#32;size_type(0),&#32;__a);
576 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
577 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__rc_string_base::_S_copy_chars(__r-&gt;_M_refdata(),&#32;__beg,&#32;__end);&#32;}
578 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
579 &#32;&#32;&#32;&#32;&#32;&#32;{
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_destroy(__a);
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
582 &#32;&#32;&#32;&#32;&#32;&#32;}
583 &#32;&#32;&#32;&#32;__r-&gt;_M_set_length(__dnew);
584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
585 &#32;&#32;&#32;&#32;&#32;&#32;}
586 
587 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
588 &#32;&#32;&#32;&#32;_CharT*
589 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
590 &#32;&#32;&#32;&#32;_S_construct(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
591 &#32;&#32;&#32;&#32;{
592 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0&#32;&amp;&amp;&#32;__a&#32;==&#32;_Alloc())
593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_empty_rep._M_refcopy();
594 
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;out_of_range&#32;and&#32;length_error&#32;exceptions.</emphasis>
596 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__n,&#32;size_type(0),&#32;__a);
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
598 &#32;&#32;&#32;&#32;__rc_string_base::_S_assign(__r-&gt;_M_refdata(),&#32;__n,&#32;__c);
599 
600 &#32;&#32;&#32;&#32;&#32;&#32;__r-&gt;_M_set_length(__n);
601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r-&gt;_M_refdata();
602 &#32;&#32;&#32;&#32;}
603 
604 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
605 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
606 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
607 &#32;&#32;&#32;&#32;_M_swap(__rc_string_base&amp;&#32;__rcs)
608 &#32;&#32;&#32;&#32;{
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_leaked())
610 &#32;&#32;&#32;&#32;_M_set_sharable();
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rcs._M_is_leaked())
612 &#32;&#32;&#32;&#32;__rcs._M_set_sharable();
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_data();
615 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(__rcs._M_data());
616 &#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
617 
618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;431.&#32;Swapping&#32;containers&#32;with&#32;unequal&#32;allocators.</emphasis>
620 &#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_swap&lt;allocator_type&gt;::_S_do_it(_M_get_allocator(),
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rcs._M_get_allocator());
622 &#32;&#32;&#32;&#32;}
623 
624 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
625 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
626 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
627 &#32;&#32;&#32;&#32;_M_assign(<emphasis role="keyword">const</emphasis>&#32;__rc_string_base&amp;&#32;__rcs)
628 &#32;&#32;&#32;&#32;{
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()&#32;!=&#32;__rcs._M_rep())
630 &#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__rcs._M_grab(_M_get_allocator());
632 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
633 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
634 &#32;&#32;&#32;&#32;}
635 &#32;&#32;&#32;&#32;}
636 
637 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
638 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
639 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
640 &#32;&#32;&#32;&#32;_M_reserve(size_type&#32;__res)
641 &#32;&#32;&#32;&#32;{
642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;we&#32;don&apos;t&#32;shrink&#32;below&#32;the&#32;current&#32;size.</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;&lt;&#32;_M_length())
644 &#32;&#32;&#32;&#32;__res&#32;=&#32;_M_length();
645 
646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;!=&#32;_M_capacity()&#32;||&#32;_M_is_shared())
647 &#32;&#32;&#32;&#32;{
648 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_rep()-&gt;_M_clone(_M_get_allocator(),
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res&#32;-&#32;_M_length());
650 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
651 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
652 &#32;&#32;&#32;&#32;}
653 &#32;&#32;&#32;&#32;}
654 
655 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
656 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
657 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
658 &#32;&#32;&#32;&#32;_M_mutate(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__len2)
660 &#32;&#32;&#32;&#32;{
661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__how_much&#32;=&#32;_M_length()&#32;-&#32;__pos&#32;-&#32;__len1;
662 
663 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(_M_length()&#32;+&#32;__len2&#32;-&#32;__len1,
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(),&#32;_M_get_allocator());
665 
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos)
667 &#32;&#32;&#32;&#32;this-&gt;_S_copy(__r-&gt;_M_refdata(),&#32;_M_data(),&#32;__pos);
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s&#32;&amp;&amp;&#32;__len2)
669 &#32;&#32;&#32;&#32;this-&gt;_S_copy(__r-&gt;_M_refdata()&#32;+&#32;__pos,&#32;__s,&#32;__len2);
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__how_much)
671 &#32;&#32;&#32;&#32;this-&gt;_S_copy(__r-&gt;_M_refdata()&#32;+&#32;__pos&#32;+&#32;__len2,
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__len1,&#32;__how_much);
673 
674 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
675 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(__r-&gt;_M_refdata());
676 &#32;&#32;&#32;&#32;}
677 
678 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
679 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
680 &#32;&#32;&#32;&#32;__rc_string_base&lt;_CharT,&#32;_Traits,&#32;_Alloc&gt;::
681 &#32;&#32;&#32;&#32;_M_erase(size_type&#32;__pos,&#32;size_type&#32;__n)
682 &#32;&#32;&#32;&#32;{
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__new_size&#32;=&#32;_M_length()&#32;-&#32;__n;
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__how_much&#32;=&#32;_M_length()&#32;-&#32;__pos&#32;-&#32;__n;
685 
686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_is_shared())
687 &#32;&#32;&#32;&#32;{
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;reallocate.</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;_Rep*&#32;__r&#32;=&#32;_Rep::_S_create(__new_size,&#32;_M_capacity(),
690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_allocator());
691 
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos)
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_copy(__r-&gt;_M_refdata(),&#32;_M_data(),&#32;__pos);
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__how_much)
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_copy(__r-&gt;_M_refdata()&#32;+&#32;__pos,
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__n,&#32;__how_much);
697 
698 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
699 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(__r-&gt;_M_refdata());
700 &#32;&#32;&#32;&#32;}
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__how_much&#32;&amp;&amp;&#32;__n)
702 &#32;&#32;&#32;&#32;{
703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Work&#32;in-place.</emphasis>
704 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_move(_M_data()&#32;+&#32;__pos,
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data()&#32;+&#32;__pos&#32;+&#32;__n,&#32;__how_much);
706 &#32;&#32;&#32;&#32;}
707 
708 &#32;&#32;&#32;&#32;&#32;&#32;_M_rep()-&gt;_M_set_length(__new_size);
709 &#32;&#32;&#32;&#32;}
710 
711 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
712 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
713 &#32;&#32;&#32;&#32;__rc_string_base&lt;char,&#32;std::char_traits&lt;char&gt;,
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator&lt;char&gt;&#32;&gt;::
715 &#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;__rc_string_base&amp;&#32;__rcs)<emphasis role="keyword">&#32;const</emphasis>
716 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()&#32;==&#32;__rcs._M_rep())
718 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
720 &#32;&#32;&#32;&#32;}
721 
722 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
723 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
724 &#32;&#32;&#32;&#32;__rc_string_base&lt;wchar_t,&#32;std::char_traits&lt;wchar_t&gt;,
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::allocator&lt;wchar_t&gt;&#32;&gt;::
726 &#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;__rc_string_base&amp;&#32;__rcs)<emphasis role="keyword">&#32;const</emphasis>
727 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_rep()&#32;==&#32;__rcs._M_rep())
729 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
731 &#32;&#32;&#32;&#32;}
732 
733 _GLIBCXX_END_NAMESPACE_VERSION
734 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
735 
736 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_RC_STRING_BASE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
