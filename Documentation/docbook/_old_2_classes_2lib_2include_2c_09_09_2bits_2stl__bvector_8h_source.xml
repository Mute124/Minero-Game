<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__bvector_8h_source" xml:lang="en-US">
<title>stl_bvector.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_bvector.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;vector&lt;bool&gt;&#32;specialization&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1999</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_BVECTOR_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_BVECTOR_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;bits/functional_hash.h&gt;</emphasis>
62 <emphasis role="preprocessor">#endif</emphasis>
63 
64 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
65 {
66 _GLIBCXX_BEGIN_NAMESPACE_VERSION
67 
68 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;_Bit_type;
69 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_word_bit&#32;=&#32;int(__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Bit_type))&#32;};
70 
71 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__nonnull__))
72 &#32;&#32;_GLIBCXX20_CONSTEXPR
73 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
74 &#32;&#32;__fill_bvector_n(_Bit_type*,&#32;<emphasis role="keywordtype">size_t</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;_GLIBCXX_NOEXCEPT;
75 
76 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
77 
78 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bit_reference
79 &#32;&#32;{
80 &#32;&#32;&#32;&#32;_Bit_type&#32;*&#32;_M_p;
81 &#32;&#32;&#32;&#32;_Bit_type&#32;_M_mask;
82 
83 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
84 &#32;&#32;&#32;&#32;_Bit_reference(_Bit_type&#32;*&#32;__x,&#32;_Bit_type&#32;__y)
85 &#32;&#32;&#32;&#32;:&#32;_M_p(__x),&#32;_M_mask(__y)&#32;{&#32;}
86 
87 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
88 &#32;&#32;&#32;&#32;_Bit_reference()&#32;_GLIBCXX_NOEXCEPT&#32;:&#32;_M_p(0),&#32;_M_mask(0)&#32;{&#32;}
89 
90 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
91 &#32;&#32;&#32;&#32;_Bit_reference(<emphasis role="keyword">const</emphasis>&#32;_Bit_reference&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
92 <emphasis role="preprocessor">#endif</emphasis>
93 
94 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
96 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!(*_M_p&#32;&amp;&#32;_M_mask);&#32;}
97 
98 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
99 &#32;&#32;&#32;&#32;_Bit_reference&amp;
100 &#32;&#32;&#32;&#32;operator=(<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;_GLIBCXX_NOEXCEPT
101 &#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x)
103 &#32;&#32;&#32;&#32;*_M_p&#32;|=&#32;_M_mask;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
105 &#32;&#32;&#32;&#32;*_M_p&#32;&amp;=&#32;~_M_mask;
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
107 &#32;&#32;&#32;&#32;}
108 
109 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
110 &#32;&#32;&#32;&#32;_Bit_reference&amp;
111 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Bit_reference&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
112 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(__x);&#32;}
113 
114 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
115 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
116 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Bit_reference&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
117 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(*<emphasis role="keyword">this</emphasis>)&#32;==&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(__x);&#32;}
118 
119 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
121 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Bit_reference&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
122 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(*<emphasis role="keyword">this</emphasis>)&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(__x);&#32;}
123 
124 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
125 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
126 &#32;&#32;&#32;&#32;flip()&#32;_GLIBCXX_NOEXCEPT
127 &#32;&#32;&#32;&#32;{&#32;*_M_p&#32;^=&#32;_M_mask;&#32;}
128 
129 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
130 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
132 &#32;&#32;&#32;&#32;swap(_Bit_reference&#32;__x,&#32;_Bit_reference&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
135 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__y;
136 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
137 &#32;&#32;&#32;&#32;}
138 
139 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
141 &#32;&#32;&#32;&#32;swap(_Bit_reference&#32;__x,&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
142 &#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
144 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__y;
145 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
146 &#32;&#32;&#32;&#32;}
147 
148 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
150 &#32;&#32;&#32;&#32;swap(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x,&#32;_Bit_reference&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
151 &#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
153 &#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;__y;
154 &#32;&#32;&#32;&#32;&#32;&#32;__y&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
155 &#32;&#32;&#32;&#32;}
156 <emphasis role="preprocessor">#endif</emphasis>
157 &#32;&#32;};
158 
159 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;std::iterator.</emphasis>
160 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
161 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
162 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bit_iterator_base
163 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::iterator&lt;std::random_access_iterator_tag,&#32;bool&gt;
164 &#32;&#32;{
165 &#32;&#32;&#32;&#32;_Bit_type&#32;*&#32;_M_p;
166 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_offset;
167 
168 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
169 &#32;&#32;&#32;&#32;_Bit_iterator_base(_Bit_type&#32;*&#32;__x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
170 &#32;&#32;&#32;&#32;:&#32;_M_p(__x),&#32;_M_offset(__y)&#32;{&#32;}
171 
172 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
173 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
174 &#32;&#32;&#32;&#32;_M_bump_up()
175 &#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_offset++&#32;==&#32;<emphasis role="keywordtype">int</emphasis>(_S_word_bit)&#32;-&#32;1)
177 &#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;_M_offset&#32;=&#32;0;
179 &#32;&#32;&#32;&#32;&#32;&#32;++_M_p;
180 &#32;&#32;&#32;&#32;}
181 &#32;&#32;&#32;&#32;}
182 
183 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
185 &#32;&#32;&#32;&#32;_M_bump_down()
186 &#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_offset--&#32;==&#32;0)
188 &#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;_M_offset&#32;=&#32;int(_S_word_bit)&#32;-&#32;1;
190 &#32;&#32;&#32;&#32;&#32;&#32;--_M_p;
191 &#32;&#32;&#32;&#32;}
192 &#32;&#32;&#32;&#32;}
193 
194 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
195 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
196 &#32;&#32;&#32;&#32;_M_incr(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__i)
197 &#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;difference_type&#32;__n&#32;=&#32;__i&#32;+&#32;_M_offset;
199 &#32;&#32;&#32;&#32;&#32;&#32;_M_p&#32;+=&#32;__n&#32;/&#32;int(_S_word_bit);
200 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__n&#32;%&#32;int(_S_word_bit);
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;&#32;0)
202 &#32;&#32;&#32;&#32;{
203 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;+=&#32;int(_S_word_bit);
204 &#32;&#32;&#32;&#32;&#32;&#32;--_M_p;
205 &#32;&#32;&#32;&#32;}
206 &#32;&#32;&#32;&#32;&#32;&#32;_M_offset&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__n);
207 &#32;&#32;&#32;&#32;}
208 
209 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
211 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
212 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_p&#32;==&#32;__y._M_p&#32;&amp;&amp;&#32;__x._M_offset&#32;==&#32;__y._M_offset;&#32;}
213 
214 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
215 &#32;&#32;&#32;&#32;[[nodiscard]]
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;strong_ordering
217 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>
219 &#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__cmp&#32;=&#32;__x._M_p&#32;&lt;=&gt;&#32;__y._M_p;&#32;__cmp&#32;!=&#32;0)
221 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cmp;
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_offset&#32;&lt;=&gt;&#32;__y._M_offset;
223 &#32;&#32;&#32;&#32;}
224 <emphasis role="preprocessor">#else</emphasis>
225 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
227 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
228 &#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_p&#32;&lt;&#32;__y._M_p
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__x._M_p&#32;==&#32;__y._M_p&#32;&amp;&amp;&#32;__x._M_offset&#32;&lt;&#32;__y._M_offset);
231 &#32;&#32;&#32;&#32;}
232 
233 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
235 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
236 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
237 
238 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
240 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
241 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
242 
243 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
245 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
246 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
247 
248 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
250 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
251 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
252 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
253 
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
255 &#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator_base&amp;&#32;__y)
256 &#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>(_S_word_bit)&#32;*&#32;(__x._M_p&#32;-&#32;__y._M_p)
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__x._M_offset&#32;-&#32;__y._M_offset);
259 &#32;&#32;&#32;&#32;}
260 &#32;&#32;};
261 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
262 
263 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bit_iterator&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Bit_iterator_base
264 &#32;&#32;{
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_reference&#32;&#32;reference;
266 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
267 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
268 <emphasis role="preprocessor">#else</emphasis>
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_reference*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
270 <emphasis role="preprocessor">#endif</emphasis>
271 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_iterator&#32;&#32;&#32;iterator;
272 
273 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
274 &#32;&#32;&#32;&#32;_Bit_iterator()&#32;:&#32;_Bit_iterator_base(0,&#32;0)&#32;{&#32;}
275 
276 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
277 &#32;&#32;&#32;&#32;_Bit_iterator(_Bit_type&#32;*&#32;__x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
278 &#32;&#32;&#32;&#32;:&#32;_Bit_iterator_base(__x,&#32;__y)&#32;{&#32;}
279 
280 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
281 &#32;&#32;&#32;&#32;iterator
282 &#32;&#32;&#32;&#32;_M_const_cast()<emphasis role="keyword">&#32;const</emphasis>
283 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
284 
285 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
286 &#32;&#32;&#32;&#32;reference
287 &#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
288 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reference(_M_p,&#32;1UL&#32;&lt;&lt;&#32;_M_offset);&#32;}
289 
290 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
291 &#32;&#32;&#32;&#32;iterator&amp;
292 &#32;&#32;&#32;&#32;operator++()
293 &#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_up();
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
296 &#32;&#32;&#32;&#32;}
297 
298 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
299 &#32;&#32;&#32;&#32;iterator
300 &#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
301 &#32;&#32;&#32;&#32;{
302 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
303 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_up();
304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
305 &#32;&#32;&#32;&#32;}
306 
307 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
308 &#32;&#32;&#32;&#32;iterator&amp;
309 &#32;&#32;&#32;&#32;operator--()
310 &#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_down();
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
313 &#32;&#32;&#32;&#32;}
314 
315 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
316 &#32;&#32;&#32;&#32;iterator
317 &#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)
318 &#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
320 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_down();
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
322 &#32;&#32;&#32;&#32;}
323 
324 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
325 &#32;&#32;&#32;&#32;iterator&amp;
326 &#32;&#32;&#32;&#32;operator+=(difference_type&#32;__i)
327 &#32;&#32;&#32;&#32;{
328 &#32;&#32;&#32;&#32;&#32;&#32;_M_incr(__i);
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
330 &#32;&#32;&#32;&#32;}
331 
332 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
333 &#32;&#32;&#32;&#32;iterator&amp;
334 &#32;&#32;&#32;&#32;operator-=(difference_type&#32;__i)
335 &#32;&#32;&#32;&#32;{
336 &#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;-__i;
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
338 &#32;&#32;&#32;&#32;}
339 
340 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
341 &#32;&#32;&#32;&#32;reference
342 &#32;&#32;&#32;&#32;operator[](difference_type&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
343 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(*<emphasis role="keyword">this</emphasis>&#32;+&#32;__i);&#32;}
344 
345 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
346 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;iterator
347 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__x,&#32;difference_type&#32;__n)
348 &#32;&#32;&#32;&#32;{
349 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
350 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;+=&#32;__n;
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
352 &#32;&#32;&#32;&#32;}
353 
354 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;iterator
356 &#32;&#32;&#32;&#32;operator+(difference_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__x)
357 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__n;&#32;}
358 
359 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
360 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;iterator
361 &#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__x,&#32;difference_type&#32;__n)
362 &#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
364 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;-=&#32;__n;
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
366 &#32;&#32;&#32;&#32;}
367 &#32;&#32;};
368 
369 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bit_const_iterator&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Bit_iterator_base
370 &#32;&#32;{
371 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
372 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
373 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
375 <emphasis role="preprocessor">#else</emphasis>
376 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
377 <emphasis role="preprocessor">#endif</emphasis>
378 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_const_iterator&#32;&#32;const_iterator;
379 
380 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
381 &#32;&#32;&#32;&#32;_Bit_const_iterator()&#32;:&#32;_Bit_iterator_base(0,&#32;0)&#32;{&#32;}
382 
383 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
384 &#32;&#32;&#32;&#32;_Bit_const_iterator(_Bit_type&#32;*&#32;__x,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
385 &#32;&#32;&#32;&#32;:&#32;_Bit_iterator_base(__x,&#32;__y)&#32;{&#32;}
386 
387 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
388 &#32;&#32;&#32;&#32;_Bit_const_iterator(<emphasis role="keyword">const</emphasis>&#32;_Bit_iterator&amp;&#32;__x)
389 &#32;&#32;&#32;&#32;:&#32;_Bit_iterator_base(__x._M_p,&#32;__x._M_offset)&#32;{&#32;}
390 
391 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
392 &#32;&#32;&#32;&#32;_Bit_iterator
393 &#32;&#32;&#32;&#32;_M_const_cast()<emphasis role="keyword">&#32;const</emphasis>
394 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bit_iterator(_M_p,&#32;_M_offset);&#32;}
395 
396 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
397 &#32;&#32;&#32;&#32;const_reference
398 &#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
399 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bit_reference(_M_p,&#32;1UL&#32;&lt;&lt;&#32;_M_offset);&#32;}
400 
401 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
402 &#32;&#32;&#32;&#32;const_iterator&amp;
403 &#32;&#32;&#32;&#32;operator++()
404 &#32;&#32;&#32;&#32;{
405 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_up();
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
407 &#32;&#32;&#32;&#32;}
408 
409 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
410 &#32;&#32;&#32;&#32;const_iterator
411 &#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
412 &#32;&#32;&#32;&#32;{
413 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
414 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_up();
415 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
416 &#32;&#32;&#32;&#32;}
417 
418 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
419 &#32;&#32;&#32;&#32;const_iterator&amp;
420 &#32;&#32;&#32;&#32;operator--()
421 &#32;&#32;&#32;&#32;{
422 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_down();
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
424 &#32;&#32;&#32;&#32;}
425 
426 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
427 &#32;&#32;&#32;&#32;const_iterator
428 &#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)
429 &#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
431 &#32;&#32;&#32;&#32;&#32;&#32;_M_bump_down();
432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
433 &#32;&#32;&#32;&#32;}
434 
435 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
436 &#32;&#32;&#32;&#32;const_iterator&amp;
437 &#32;&#32;&#32;&#32;operator+=(difference_type&#32;__i)
438 &#32;&#32;&#32;&#32;{
439 &#32;&#32;&#32;&#32;&#32;&#32;_M_incr(__i);
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
441 &#32;&#32;&#32;&#32;}
442 
443 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
444 &#32;&#32;&#32;&#32;const_iterator&amp;
445 &#32;&#32;&#32;&#32;operator-=(difference_type&#32;__i)
446 &#32;&#32;&#32;&#32;{
447 &#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;+=&#32;-__i;
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
449 &#32;&#32;&#32;&#32;}
450 
451 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
452 &#32;&#32;&#32;&#32;const_reference
453 &#32;&#32;&#32;&#32;operator[](difference_type&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
454 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(*<emphasis role="keyword">this</emphasis>&#32;+&#32;__i);&#32;}
455 
456 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;const_iterator
458 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;const_iterator&amp;&#32;__x,&#32;difference_type&#32;__n)
459 &#32;&#32;&#32;&#32;{
460 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
461 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;+=&#32;__n;
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
463 &#32;&#32;&#32;&#32;}
464 
465 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
466 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;const_iterator
467 &#32;&#32;&#32;&#32;operator-(<emphasis role="keyword">const</emphasis>&#32;const_iterator&amp;&#32;__x,&#32;difference_type&#32;__n)
468 &#32;&#32;&#32;&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
470 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;-=&#32;__n;
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
472 &#32;&#32;&#32;&#32;}
473 
474 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
475 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;const_iterator
476 &#32;&#32;&#32;&#32;operator+(difference_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;const_iterator&amp;&#32;__x)
477 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__n;&#32;}
478 &#32;&#32;};
479 
480 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
481 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bvector_base
482 &#32;&#32;&#32;&#32;{
483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rebind&lt;_Bit_type&gt;::other&#32;_Bit_alloc_type;
485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Bit_alloc_type&gt;
486 &#32;&#32;&#32;&#32;_Bit_alloc_traits;
487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Bit_alloc_traits::pointer&#32;_Bit_pointer;
488 
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bvector_impl_data
490 &#32;&#32;&#32;&#32;&#32;&#32;{
491 <emphasis role="preprocessor">#if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
492 &#32;&#32;&#32;&#32;_Bit_iterator&#32;&#32;&#32;_M_start;
493 <emphasis role="preprocessor">#else</emphasis>
494 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;don&apos;t&#32;need&#32;the&#32;offset&#32;field&#32;for&#32;the&#32;start,&#32;it&apos;s&#32;always&#32;zero.</emphasis>
495 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
496 &#32;&#32;&#32;&#32;&#32;&#32;_Bit_type*&#32;_M_p;
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;assignment&#32;from&#32;iterators&#32;(assume&#32;offset&#32;is&#32;zero):</emphasis>
498 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(_Bit_iterator&#32;__it)&#32;{&#32;_M_p&#32;=&#32;__it._M_p;&#32;}
500 &#32;&#32;&#32;&#32;}&#32;_M_start;
501 <emphasis role="preprocessor">#endif</emphasis>
502 &#32;&#32;&#32;&#32;_Bit_iterator&#32;&#32;&#32;_M_finish;
503 &#32;&#32;&#32;&#32;_Bit_pointer&#32;&#32;&#32;&#32;_M_end_of_storage;
504 
505 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
506 &#32;&#32;&#32;&#32;_Bvector_impl_data()&#32;_GLIBCXX_NOEXCEPT
507 &#32;&#32;&#32;&#32;:&#32;_M_start(),&#32;_M_finish(),&#32;_M_end_of_storage()
508 &#32;&#32;&#32;&#32;{&#32;}
509 
510 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
511 &#32;&#32;&#32;&#32;_Bvector_impl_data(<emphasis role="keyword">const</emphasis>&#32;_Bvector_impl_data&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
512 
513 &#32;&#32;&#32;&#32;_Bvector_impl_data&amp;
514 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Bvector_impl_data&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
515 
516 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
517 &#32;&#32;&#32;&#32;_Bvector_impl_data(_Bvector_impl_data&amp;&amp;&#32;__x)&#32;noexcept
518 &#32;&#32;&#32;&#32;:&#32;_Bvector_impl_data(__x)
519 &#32;&#32;&#32;&#32;{&#32;__x._M_reset();&#32;}
520 
521 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
522 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
523 &#32;&#32;&#32;&#32;_M_move_data(_Bvector_impl_data&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
524 &#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;__x;
526 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_reset();
527 &#32;&#32;&#32;&#32;}
528 <emphasis role="preprocessor">#endif</emphasis>
529 
530 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
531 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
532 &#32;&#32;&#32;&#32;_M_reset()&#32;_GLIBCXX_NOEXCEPT
533 &#32;&#32;&#32;&#32;{&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;_Bvector_impl_data();&#32;}
534 
535 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
536 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
537 &#32;&#32;&#32;&#32;_M_swap_data(_Bvector_impl_data&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
538 &#32;&#32;&#32;&#32;{
539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;use&#32;std::swap(_M_start,&#32;__x._M_start),&#32;etc&#32;as&#32;it&#32;loses</emphasis>
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;information&#32;used&#32;by&#32;TBAA.</emphasis>
541 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(*<emphasis role="keyword">this</emphasis>,&#32;__x);
542 &#32;&#32;&#32;&#32;}
543 &#32;&#32;&#32;&#32;&#32;&#32;};
544 
545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bvector_impl
546 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Bit_alloc_type,&#32;<emphasis role="keyword">public</emphasis>&#32;_Bvector_impl_data
547 &#32;&#32;&#32;&#32;&#32;&#32;{
548 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
549 &#32;&#32;&#32;&#32;_Bvector_impl()&#32;_GLIBCXX_NOEXCEPT_IF(
550 &#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_default_constructible&lt;_Bit_alloc_type&gt;::value)
551 &#32;&#32;&#32;&#32;:&#32;_Bit_alloc_type()
552 &#32;&#32;&#32;&#32;{&#32;}
553 
554 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
555 &#32;&#32;&#32;&#32;_Bvector_impl(<emphasis role="keyword">const</emphasis>&#32;_Bit_alloc_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
556 &#32;&#32;&#32;&#32;:&#32;_Bit_alloc_type(__a)
557 &#32;&#32;&#32;&#32;{&#32;}
558 
559 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
560 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defaulted,&#32;to&#32;enforce&#32;noexcept(true)&#32;even&#32;when</emphasis>
561 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;!is_nothrow_move_constructible&lt;_Bit_alloc_type&gt;.</emphasis>
562 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
563 &#32;&#32;&#32;&#32;_Bvector_impl(_Bvector_impl&amp;&amp;&#32;__x)&#32;noexcept
564 &#32;&#32;&#32;&#32;:&#32;_Bit_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x)),&#32;_Bvector_impl_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x))
565 &#32;&#32;&#32;&#32;{&#32;}
566 
567 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
568 &#32;&#32;&#32;&#32;_Bvector_impl(_Bit_alloc_type&amp;&amp;&#32;__a,&#32;_Bvector_impl&amp;&amp;&#32;__x)&#32;noexcept
569 &#32;&#32;&#32;&#32;:&#32;_Bit_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),&#32;_Bvector_impl_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x))
570 &#32;&#32;&#32;&#32;{&#32;}
571 <emphasis role="preprocessor">#endif</emphasis>
572 
573 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
574 &#32;&#32;&#32;&#32;_Bit_type*
575 &#32;&#32;&#32;&#32;_M_end_addr()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
576 &#32;&#32;&#32;&#32;{
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_end_of_storage)
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(this-&gt;_M_end_of_storage[-1])&#32;+&#32;1;
579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
580 &#32;&#32;&#32;&#32;}
581 &#32;&#32;&#32;&#32;&#32;&#32;};
582 
583 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;allocator_type;
585 
586 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
587 &#32;&#32;&#32;&#32;&#32;&#32;_Bit_alloc_type&amp;
588 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Bit_allocator()&#32;_GLIBCXX_NOEXCEPT
589 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
590 
591 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
592 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_alloc_type&amp;
593 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Bit_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
594 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
595 
596 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
597 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
598 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
599 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_get_Bit_allocator());&#32;}
600 
601 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
602 &#32;&#32;&#32;&#32;&#32;&#32;_Bvector_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
603 <emphasis role="preprocessor">#else</emphasis>
604 &#32;&#32;&#32;&#32;&#32;&#32;_Bvector_base()&#32;{&#32;}
605 <emphasis role="preprocessor">#endif</emphasis>
606 
607 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
608 &#32;&#32;&#32;&#32;&#32;&#32;_Bvector_base(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
609 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)&#32;{&#32;}
610 
611 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
612 &#32;&#32;&#32;&#32;&#32;&#32;_Bvector_base(_Bvector_base&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
615 &#32;&#32;&#32;&#32;&#32;&#32;_Bvector_base(_Bvector_base&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)&#32;noexcept
616 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(_Bit_alloc_type(__a),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl))
617 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
618 <emphasis role="preprocessor">#endif</emphasis>
619 
620 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
621 &#32;&#32;&#32;&#32;&#32;&#32;~_Bvector_base()
622 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_deallocate();&#32;}
623 
624 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
625 &#32;&#32;&#32;&#32;&#32;&#32;_Bvector_impl&#32;_M_impl;
626 
627 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
628 &#32;&#32;&#32;&#32;&#32;&#32;_Bit_pointer
629 &#32;&#32;&#32;&#32;&#32;&#32;_M_allocate(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
630 &#32;&#32;&#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;_Bit_pointer&#32;__p&#32;=&#32;_Bit_alloc_traits::allocate(_M_impl,&#32;_S_nword(__n));
632 <emphasis role="preprocessor">#if&#32;__cpp_lib_is_constant_evaluated</emphasis>
633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
634 &#32;&#32;&#32;&#32;{
635 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;_S_nword(__n);
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p[__i]&#32;=&#32;0ul;
638 &#32;&#32;&#32;&#32;}
639 <emphasis role="preprocessor">#endif</emphasis>
640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
641 &#32;&#32;&#32;&#32;&#32;&#32;}
642 
643 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
645 &#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate()
646 &#32;&#32;&#32;&#32;&#32;&#32;{
647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_impl._M_start._M_p)
648 &#32;&#32;&#32;&#32;&#32;&#32;{
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n&#32;=&#32;_M_impl._M_end_addr()&#32;-&#32;_M_impl._M_start._M_p;
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Bit_alloc_traits::deallocate(_M_impl,
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_end_of_storage&#32;-&#32;__n,
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n);
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_impl._M_reset();
654 &#32;&#32;&#32;&#32;&#32;&#32;}
655 &#32;&#32;&#32;&#32;&#32;&#32;}
656 
657 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
658 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
660 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_data(_Bvector_base&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
661 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl._M_move_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl));&#32;}
662 <emphasis role="preprocessor">#endif</emphasis>
663 
664 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
666 &#32;&#32;&#32;&#32;&#32;&#32;_S_nword(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)
667 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__n&#32;+&#32;<emphasis role="keywordtype">int</emphasis>(_S_word_bit)&#32;-&#32;1)&#32;/&#32;int(_S_word_bit);&#32;}
668 &#32;&#32;&#32;&#32;};
669 
689 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
690 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>vector&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;_Alloc&gt;&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;_Bvector_base&lt;_Alloc&gt;
691 &#32;&#32;&#32;&#32;{
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bvector_base&lt;_Alloc&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base;
693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Bit_pointer&#32;&#32;&#32;&#32;&#32;&#32;_Bit_pointer;
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Bit_alloc_traits&#32;&#32;&#32;&#32;&#32;_Bit_alloc_traits;
695 
696 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>std::hash&lt;vector&gt;;
698 <emphasis role="preprocessor">#endif</emphasis>
699 
700 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_reference*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Bit_const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
713 
714 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
715 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
716 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()<emphasis role="keyword">&#32;const</emphasis>
717 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base::get_allocator();&#32;}
718 
719 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_allocate;
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_deallocate;
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_S_nword;
723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_get_Bit_allocator;
724 
725 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
726 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
727 &#32;&#32;&#32;&#32;&#32;&#32;vector()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
728 <emphasis role="preprocessor">#else</emphasis>
729 &#32;&#32;&#32;&#32;&#32;&#32;vector()&#32;{&#32;}
730 <emphasis role="preprocessor">#endif</emphasis>
731 
732 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
733 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
734 &#32;&#32;&#32;&#32;&#32;&#32;vector(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
735 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)&#32;{&#32;}
736 
737 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
738 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
740 &#32;&#32;&#32;&#32;&#32;&#32;vector(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
741 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;vector(__n,&#32;<emphasis role="keyword">false</emphasis>,&#32;__a)
742 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
743 
744 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
745 &#32;&#32;&#32;&#32;&#32;&#32;vector(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__value,
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
747 <emphasis role="preprocessor">#else</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
749 &#32;&#32;&#32;&#32;&#32;&#32;vector(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__value&#32;=&#32;<emphasis role="keywordtype">bool</emphasis>(),
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
751 <emphasis role="preprocessor">#endif</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)
753 &#32;&#32;&#32;&#32;&#32;&#32;{
754 &#32;&#32;&#32;&#32;_M_initialize(__n);
755 &#32;&#32;&#32;&#32;_M_initialize_value(__value);
756 &#32;&#32;&#32;&#32;&#32;&#32;}
757 
758 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
759 &#32;&#32;&#32;&#32;&#32;&#32;vector(<emphasis role="keyword">const</emphasis>&#32;vector&amp;&#32;__x)
760 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
761 &#32;&#32;&#32;&#32;&#32;&#32;{
762 &#32;&#32;&#32;&#32;_M_initialize(__x.size());
763 &#32;&#32;&#32;&#32;_M_copy_aligned(__x.begin(),&#32;__x.end(),&#32;begin());
764 &#32;&#32;&#32;&#32;&#32;&#32;}
765 
766 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
767 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
768 
769 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
770 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
771 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;true_type)&#32;noexcept
772 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a)
773 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
774 
775 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
776 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;false_type)
777 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)
778 &#32;&#32;&#32;&#32;&#32;&#32;{
779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x.get_allocator()&#32;==&#32;__a)
780 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_move_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
781 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
782 &#32;&#32;&#32;&#32;&#32;&#32;{
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize(__x.size());
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy_aligned(__x.begin(),&#32;__x.end(),&#32;begin());
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.clear();
786 &#32;&#32;&#32;&#32;&#32;&#32;}
787 &#32;&#32;&#32;&#32;&#32;&#32;}
788 
789 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
790 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
791 &#32;&#32;&#32;&#32;&#32;&#32;vector(vector&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Bit_alloc_traits::_S_always_equal())
793 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;vector(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a,
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Bit_alloc_traits::is_always_equal{})
795 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
796 
797 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
798 &#32;&#32;&#32;&#32;&#32;&#32;vector(<emphasis role="keyword">const</emphasis>&#32;vector&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
799 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)
800 &#32;&#32;&#32;&#32;&#32;&#32;{
801 &#32;&#32;&#32;&#32;_M_initialize(__x.size());
802 &#32;&#32;&#32;&#32;_M_copy_aligned(__x.begin(),&#32;__x.end(),&#32;begin());
803 &#32;&#32;&#32;&#32;&#32;&#32;}
804 
805 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
806 &#32;&#32;&#32;&#32;&#32;&#32;vector(initializer_list&lt;bool&gt;&#32;__l,
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
808 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__a)
809 &#32;&#32;&#32;&#32;&#32;&#32;{
810 &#32;&#32;&#32;&#32;_M_initialize_range(__l.begin(),&#32;__l.end(),
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag());
812 &#32;&#32;&#32;&#32;&#32;&#32;}
813 <emphasis role="preprocessor">#endif</emphasis>
814 
815 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
818 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
819 &#32;&#32;&#32;&#32;vector(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
821 &#32;&#32;&#32;&#32;:&#32;_Base(__a)
822 &#32;&#32;&#32;&#32;{
823 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_range(__first,&#32;__last,
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
825 &#32;&#32;&#32;&#32;}
826 <emphasis role="preprocessor">#else</emphasis>
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
828 &#32;&#32;&#32;&#32;vector(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
830 &#32;&#32;&#32;&#32;:&#32;_Base(__a)
831 &#32;&#32;&#32;&#32;{
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
833 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
834 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_dispatch(__first,&#32;__last,&#32;_Integral());
835 &#32;&#32;&#32;&#32;}
836 <emphasis role="preprocessor">#endif</emphasis>
837 
838 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
839 &#32;&#32;&#32;&#32;&#32;&#32;~vector()&#32;_GLIBCXX_NOEXCEPT&#32;{&#32;}
840 
841 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
842 &#32;&#32;&#32;&#32;&#32;&#32;vector&amp;
843 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;vector&amp;&#32;__x)
844 &#32;&#32;&#32;&#32;&#32;&#32;{
845 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;__x&#32;==&#32;<emphasis role="keyword">this</emphasis>)
846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
847 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Bit_alloc_traits::_S_propagate_on_copy_assign())
849 &#32;&#32;&#32;&#32;&#32;&#32;{
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_get_Bit_allocator()&#32;!=&#32;__x._M_get_Bit_allocator())
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_deallocate();
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_on_copy(_M_get_Bit_allocator(),
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Bit_allocator());
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize(__x.size());
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_on_copy(_M_get_Bit_allocator(),
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Bit_allocator());
860 &#32;&#32;&#32;&#32;&#32;&#32;}
861 <emphasis role="preprocessor">#endif</emphasis>
862 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x.size()&#32;&gt;&#32;capacity())
863 &#32;&#32;&#32;&#32;&#32;&#32;{
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_deallocate();
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize(__x.size());
866 &#32;&#32;&#32;&#32;&#32;&#32;}
867 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=&#32;_M_copy_aligned(__x.begin(),&#32;__x.end(),
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;begin());
869 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
870 &#32;&#32;&#32;&#32;&#32;&#32;}
871 
872 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
873 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
874 &#32;&#32;&#32;&#32;&#32;&#32;vector&amp;
875 &#32;&#32;&#32;&#32;&#32;&#32;operator=(vector&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>(_Bit_alloc_traits::_S_nothrow_move())
876 &#32;&#32;&#32;&#32;&#32;&#32;{
877 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Bit_alloc_traits::_S_propagate_on_move_assign()
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;this-&gt;_M_get_Bit_allocator()&#32;==&#32;__x._M_get_Bit_allocator())
879 &#32;&#32;&#32;&#32;&#32;&#32;{
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_deallocate();
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_move_data(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_on_move(_M_get_Bit_allocator(),
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Bit_allocator());
884 &#32;&#32;&#32;&#32;&#32;&#32;}
885 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
886 &#32;&#32;&#32;&#32;&#32;&#32;{
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x.size()&#32;&gt;&#32;capacity())
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_deallocate();
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize(__x.size());
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=&#32;_M_copy_aligned(__x.begin(),&#32;__x.end(),
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;begin());
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.clear();
895 &#32;&#32;&#32;&#32;&#32;&#32;}
896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
897 &#32;&#32;&#32;&#32;&#32;&#32;}
898 
899 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
900 &#32;&#32;&#32;&#32;&#32;&#32;vector&amp;
901 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;bool&gt;&#32;__l)
902 &#32;&#32;&#32;&#32;&#32;&#32;{
903 &#32;&#32;&#32;&#32;this-&gt;assign(__l.begin(),&#32;__l.end());
904 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
905 &#32;&#32;&#32;&#32;&#32;&#32;}
906 <emphasis role="preprocessor">#endif</emphasis>
907 
908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;assign(),&#32;a&#32;generalized&#32;assignment&#32;member&#32;function.&#32;&#32;Two</emphasis>
909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;versions:&#32;one&#32;that&#32;takes&#32;a&#32;count,&#32;and&#32;one&#32;that&#32;takes&#32;a&#32;range.</emphasis>
910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;range&#32;version&#32;is&#32;a&#32;member&#32;template,&#32;so&#32;we&#32;dispatch&#32;on&#32;whether</emphasis>
911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;not&#32;the&#32;type&#32;is&#32;an&#32;integer.</emphasis>
912 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
914 &#32;&#32;&#32;&#32;&#32;&#32;assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x)
915 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;__x);&#32;}
916 
917 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
920 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
921 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
922 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
923 &#32;&#32;&#32;&#32;{&#32;_M_assign_aux(__first,&#32;__last,&#32;std::__iterator_category(__first));&#32;}
924 <emphasis role="preprocessor">#else</emphasis>
925 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
926 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
927 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
928 &#32;&#32;&#32;&#32;{
929 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
930 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
931 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_dispatch(__first,&#32;__last,&#32;_Integral());
932 &#32;&#32;&#32;&#32;}
933 <emphasis role="preprocessor">#endif</emphasis>
934 
935 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
936 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
938 &#32;&#32;&#32;&#32;&#32;&#32;assign(initializer_list&lt;bool&gt;&#32;__l)
939 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_assign_aux(__l.begin(),&#32;__l.end(),&#32;random_access_iterator_tag());&#32;}
940 <emphasis role="preprocessor">#endif</emphasis>
941 
942 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
943 &#32;&#32;&#32;&#32;&#32;&#32;iterator
944 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
945 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_impl._M_start._M_p,&#32;0);&#32;}
946 
947 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
948 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
949 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
950 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_start._M_p,&#32;0);&#32;}
951 
952 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
953 &#32;&#32;&#32;&#32;&#32;&#32;iterator
954 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
955 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish;&#32;}
956 
957 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
958 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
959 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
960 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish;&#32;}
961 
962 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
963 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
964 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
965 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
966 
967 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
968 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
969 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
970 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
971 
972 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
973 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
974 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
975 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(begin());&#32;}
976 
977 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
978 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
979 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
980 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
981 
982 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
983 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
984 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
985 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
986 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_start._M_p,&#32;0);&#32;}
987 
988 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
989 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
990 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
991 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_finish;&#32;}
992 
993 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
994 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
995 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
996 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
997 
998 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]&#32;_GLIBCXX20_CONSTEXPR
999 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1000 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1001 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
1002 <emphasis role="preprocessor">#endif</emphasis>
1003 
1004 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1005 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1006 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1007 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;size_type(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;-&#32;begin());&#32;}
1008 
1009 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1010 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1011 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1012 &#32;&#32;&#32;&#32;&#32;&#32;{
1013 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__isize&#32;=
1014 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;difference_type&gt;::__max
1015 &#32;&#32;&#32;&#32;&#32;&#32;-&#32;int(_S_word_bit)&#32;+&#32;1;
1016 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__asize
1017 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Bit_alloc_traits::max_size(_M_get_Bit_allocator());
1018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__asize&#32;&lt;=&#32;__isize&#32;/&#32;<emphasis role="keywordtype">int</emphasis>(_S_word_bit)
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;__asize&#32;*&#32;<emphasis role="keywordtype">int</emphasis>(_S_word_bit)&#32;:&#32;__isize);
1020 &#32;&#32;&#32;&#32;&#32;&#32;}
1021 
1022 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1023 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1024 &#32;&#32;&#32;&#32;&#32;&#32;capacity()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1025 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;size_type(const_iterator(this-&gt;_M_impl._M_end_addr(),&#32;0)
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;begin());&#32;}
1027 
1028 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1030 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1031 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;}
1032 
1033 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1034 &#32;&#32;&#32;&#32;&#32;&#32;reference
1035 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__n)
1036 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()[__n];&#32;}
1037 
1038 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1039 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1040 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1041 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()[__n];&#32;}
1042 
1043 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1044 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1046 &#32;&#32;&#32;&#32;&#32;&#32;_M_range_check(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1047 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1049 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;vector&lt;bool&gt;::_M_range_check:&#32;__n&#32;&quot;</emphasis>
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&#32;&gt;=&#32;this-&gt;size()&#32;&quot;</emphasis>
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&quot;</emphasis>),
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1053 &#32;&#32;&#32;&#32;&#32;&#32;}
1054 
1055 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1056 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1057 &#32;&#32;&#32;&#32;&#32;&#32;reference
1058 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)
1059 &#32;&#32;&#32;&#32;&#32;&#32;{
1060 &#32;&#32;&#32;&#32;_M_range_check(__n);
1061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[__n];
1062 &#32;&#32;&#32;&#32;&#32;&#32;}
1063 
1064 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1065 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1066 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1067 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1068 &#32;&#32;&#32;&#32;_M_range_check(__n);
1069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[__n];
1070 &#32;&#32;&#32;&#32;&#32;&#32;}
1071 
1072 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1074 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__n)
1075 &#32;&#32;&#32;&#32;&#32;&#32;{
1076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;max_size())
1077 &#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;vector::reserve&quot;</emphasis>));
1078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(capacity()&#32;&lt;&#32;__n)
1079 &#32;&#32;&#32;&#32;&#32;&#32;_M_reallocate(__n);
1080 &#32;&#32;&#32;&#32;&#32;&#32;}
1081 
1082 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1083 &#32;&#32;&#32;&#32;&#32;&#32;reference
1084 &#32;&#32;&#32;&#32;&#32;&#32;front()
1085 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();&#32;}
1086 
1087 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1088 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1089 &#32;&#32;&#32;&#32;&#32;&#32;front()<emphasis role="keyword">&#32;const</emphasis>
1090 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();&#32;}
1091 
1092 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1093 &#32;&#32;&#32;&#32;&#32;&#32;reference
1094 &#32;&#32;&#32;&#32;&#32;&#32;back()
1095 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;-&#32;1);&#32;}
1096 
1097 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1098 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1099 &#32;&#32;&#32;&#32;&#32;&#32;back()<emphasis role="keyword">&#32;const</emphasis>
1100 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;-&#32;1);&#32;}
1101 
1102 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1104 &#32;&#32;&#32;&#32;&#32;&#32;push_back(<emphasis role="keywordtype">bool</emphasis>&#32;__x)
1105 &#32;&#32;&#32;&#32;&#32;&#32;{
1106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_finish._M_p&#32;!=&#32;this-&gt;_M_impl._M_end_addr())
1107 &#32;&#32;&#32;&#32;&#32;&#32;*this-&gt;_M_impl._M_finish++&#32;=&#32;__x;
1108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1109 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_aux(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__x);
1110 &#32;&#32;&#32;&#32;&#32;&#32;}
1111 
1112 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;swap(vector&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
1115 &#32;&#32;&#32;&#32;&#32;&#32;{
1116 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1117 &#32;&#32;&#32;&#32;__glibcxx_assert(_Bit_alloc_traits::propagate_on_container_swap::value
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_get_Bit_allocator()&#32;==&#32;__x._M_get_Bit_allocator());
1119 <emphasis role="preprocessor">#endif</emphasis>
1120 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_swap_data(__x._M_impl);
1121 &#32;&#32;&#32;&#32;_Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Bit_allocator());
1123 &#32;&#32;&#32;&#32;&#32;&#32;}
1124 
1125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.5]/1,&#32;third-to-last&#32;entry&#32;in&#32;synopsis&#32;listing</emphasis>
1126 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1128 &#32;&#32;&#32;&#32;&#32;&#32;swap(reference&#32;__x,&#32;reference&#32;__y)&#32;_GLIBCXX_NOEXCEPT
1129 &#32;&#32;&#32;&#32;&#32;&#32;{
1130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__x;
1131 &#32;&#32;&#32;&#32;__x&#32;=&#32;__y;
1132 &#32;&#32;&#32;&#32;__y&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1133 &#32;&#32;&#32;&#32;&#32;&#32;}
1134 
1135 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1136 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1137 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1138 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x)
1139 <emphasis role="preprocessor">#else</emphasis>
1140 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x)
1141 <emphasis role="preprocessor">#endif</emphasis>
1142 &#32;&#32;&#32;&#32;&#32;&#32;{
1143 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;difference_type&#32;__n&#32;=&#32;__position&#32;-&#32;begin();
1144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_impl._M_finish._M_p&#32;!=&#32;this-&gt;_M_impl._M_end_addr()
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__position&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
1146 &#32;&#32;&#32;&#32;&#32;&#32;*this-&gt;_M_impl._M_finish++&#32;=&#32;__x;
1147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1148 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_aux(__position._M_const_cast(),&#32;__x);
1149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__n;
1150 &#32;&#32;&#32;&#32;&#32;&#32;}
1151 
1152 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1153 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a17fa7e635ec9d71553d5324a00388bad">_GLIBCXX_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;insert(position,&#32;false)&quot;</emphasis>)
1154 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1155 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position)
1156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__position._M_const_cast(),&#32;<emphasis role="keyword">false</emphasis>);&#32;}
1157 <emphasis role="preprocessor">#endif</emphasis>
1158 
1159 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1162 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1163 &#32;&#32;&#32;&#32;iterator
1164 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1166 &#32;&#32;&#32;&#32;{
1167 &#32;&#32;&#32;&#32;&#32;&#32;difference_type&#32;__offset&#32;=&#32;__position&#32;-&#32;cbegin();
1168 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_range(__position._M_const_cast(),
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__last,
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1172 &#32;&#32;&#32;&#32;}
1173 <emphasis role="preprocessor">#else</emphasis>
1174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1175 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1176 &#32;&#32;&#32;&#32;insert(iterator&#32;__position,
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1178 &#32;&#32;&#32;&#32;{
1179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
1180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
1181 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_dispatch(__position,&#32;__first,&#32;__last,&#32;_Integral());
1182 &#32;&#32;&#32;&#32;}
1183 <emphasis role="preprocessor">#endif</emphasis>
1184 
1185 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1186 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1187 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1188 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x)
1189 &#32;&#32;&#32;&#32;&#32;&#32;{
1190 &#32;&#32;&#32;&#32;difference_type&#32;__offset&#32;=&#32;__position&#32;-&#32;cbegin();
1191 &#32;&#32;&#32;&#32;_M_fill_insert(__position._M_const_cast(),&#32;__n,&#32;__x);
1192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;begin()&#32;+&#32;__offset;
1193 &#32;&#32;&#32;&#32;&#32;&#32;}
1194 <emphasis role="preprocessor">#else</emphasis>
1195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1196 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x)
1197 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_insert(__position,&#32;__n,&#32;__x);&#32;}
1198 <emphasis role="preprocessor">#endif</emphasis>
1199 
1200 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1201 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1202 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1203 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__p,&#32;initializer_list&lt;bool&gt;&#32;__l)
1204 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__p,&#32;__l.begin(),&#32;__l.end());&#32;}
1205 <emphasis role="preprocessor">#endif</emphasis>
1206 
1207 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1209 &#32;&#32;&#32;&#32;&#32;&#32;pop_back()
1210 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;--this-&gt;_M_impl._M_finish;&#32;}
1211 
1212 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1213 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1214 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1215 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1216 <emphasis role="preprocessor">#else</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1218 <emphasis role="preprocessor">#endif</emphasis>
1219 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(__position._M_const_cast());&#32;}
1220 
1221 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1222 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1223 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1224 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1225 <emphasis role="preprocessor">#else</emphasis>
1226 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
1227 <emphasis role="preprocessor">#endif</emphasis>
1228 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_erase(__first._M_const_cast(),&#32;__last._M_const_cast());&#32;}
1229 
1230 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1232 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x&#32;=&#32;<emphasis role="keywordtype">bool</emphasis>())
1233 &#32;&#32;&#32;&#32;&#32;&#32;{
1234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_size&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1235 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(begin()&#32;+&#32;difference_type(__new_size));
1236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1237 &#32;&#32;&#32;&#32;&#32;&#32;insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__new_size&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__x);
1238 &#32;&#32;&#32;&#32;&#32;&#32;}
1239 
1240 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1241 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1243 &#32;&#32;&#32;&#32;&#32;&#32;shrink_to_fit()
1244 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_shrink_to_fit();&#32;}
1245 <emphasis role="preprocessor">#endif</emphasis>
1246 
1247 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1249 &#32;&#32;&#32;&#32;&#32;&#32;flip()&#32;_GLIBCXX_NOEXCEPT
1250 &#32;&#32;&#32;&#32;&#32;&#32;{
1251 &#32;&#32;&#32;&#32;_Bit_type&#32;*&#32;<emphasis role="keyword">const</emphasis>&#32;__end&#32;=&#32;this-&gt;_M_impl._M_end_addr();
1252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Bit_type&#32;*&#32;__p&#32;=&#32;this-&gt;_M_impl._M_start._M_p;&#32;__p&#32;!=&#32;__end;&#32;++__p)
1253 &#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;=&#32;~*__p;
1254 &#32;&#32;&#32;&#32;&#32;&#32;}
1255 
1256 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1258 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1259 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_erase_at_end(begin());&#32;}
1260 
1261 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1263 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1264 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1265 &#32;&#32;&#32;&#32;reference
1266 <emphasis role="preprocessor">#else</emphasis>
1267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1268 <emphasis role="preprocessor">#endif</emphasis>
1269 &#32;&#32;&#32;&#32;emplace_back(_Args&amp;&amp;...&#32;__args)
1270 &#32;&#32;&#32;&#32;{
1271 &#32;&#32;&#32;&#32;&#32;&#32;push_back(<emphasis role="keywordtype">bool</emphasis>(__args...));
1272 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;back();
1274 <emphasis role="preprocessor">#endif</emphasis>
1275 &#32;&#32;&#32;&#32;}
1276 
1277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1278 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1279 &#32;&#32;&#32;&#32;iterator
1280 &#32;&#32;&#32;&#32;emplace(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
1281 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert(__pos,&#32;<emphasis role="keywordtype">bool</emphasis>(__args...));&#32;}
1282 <emphasis role="preprocessor">#endif</emphasis>
1283 
1284 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;__first._M_offset&#32;==&#32;0&#32;&amp;&amp;&#32;__result._M_offset&#32;==&#32;0.</emphasis>
1286 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1287 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1288 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy_aligned(const_iterator&#32;__first,&#32;const_iterator&#32;__last,
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__result)
1290 &#32;&#32;&#32;&#32;&#32;&#32;{
1291 &#32;&#32;&#32;&#32;_Bit_type*&#32;__q&#32;=&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first._M_p,&#32;__last._M_p,&#32;__result._M_p);
1292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(const_iterator(__last._M_p,&#32;0),&#32;__last,
1293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(__q,&#32;0));
1294 &#32;&#32;&#32;&#32;&#32;&#32;}
1295 
1296 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1298 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize(size_type&#32;__n)
1299 &#32;&#32;&#32;&#32;&#32;&#32;{
1300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n)
1301 &#32;&#32;&#32;&#32;&#32;&#32;{
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Bit_pointer&#32;__q&#32;=&#32;this-&gt;_M_allocate(__n);
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_end_of_storage&#32;=&#32;__q&#32;+&#32;_S_nword(__n);
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__start&#32;=&#32;iterator(std::__addressof(*__q),&#32;0);
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_start&#32;=&#32;__start;
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_impl._M_finish&#32;=&#32;__start&#32;+&#32;difference_type(__n);
1307 &#32;&#32;&#32;&#32;&#32;&#32;}
1308 &#32;&#32;&#32;&#32;&#32;&#32;}
1309 
1310 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1312 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_value(<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;_GLIBCXX_NOEXCEPT
1313 &#32;&#32;&#32;&#32;&#32;&#32;{
1314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Bit_type*&#32;__p&#32;=&#32;this-&gt;_M_impl._M_start._M_p)
1315 &#32;&#32;&#32;&#32;&#32;&#32;__fill_bvector_n(__p,&#32;this-&gt;_M_impl._M_end_addr()&#32;-&#32;__p,&#32;__x);
1316 &#32;&#32;&#32;&#32;&#32;&#32;}
1317 
1318 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1320 &#32;&#32;&#32;&#32;&#32;&#32;_M_reallocate(size_type&#32;__n);
1321 
1322 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1323 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1325 &#32;&#32;&#32;&#32;&#32;&#32;_M_shrink_to_fit();
1326 <emphasis role="preprocessor">#endif</emphasis>
1327 
1328 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1332 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1333 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_Integer&#32;__n,&#32;_Integer&#32;__x,&#32;__true_type)
1334 &#32;&#32;&#32;&#32;{
1335 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__n));
1336 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_value(__x);
1337 &#32;&#32;&#32;&#32;}
1338 
1339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1340 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1341 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1343 &#32;&#32;&#32;&#32;{&#32;_M_initialize_range(__first,&#32;__last,
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));&#32;}
1345 <emphasis role="preprocessor">#endif</emphasis>
1346 
1347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1348 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1349 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1350 &#32;&#32;&#32;&#32;_M_initialize_range(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
1352 &#32;&#32;&#32;&#32;{
1353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;push_back(*__first);
1355 &#32;&#32;&#32;&#32;}
1356 
1357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1358 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1359 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1360 &#32;&#32;&#32;&#32;_M_initialize_range(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
1362 &#32;&#32;&#32;&#32;{
1363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;std::distance(__first,&#32;__last);
1364 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize(__n);
1365 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__last,&#32;begin());
1366 &#32;&#32;&#32;&#32;}
1367 
1368 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1372 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1373 &#32;&#32;&#32;&#32;_M_assign_dispatch(_Integer&#32;__n,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__true_type)
1374 &#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
1375 
1376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1377 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1378 &#32;&#32;&#32;&#32;_M_assign_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1380 &#32;&#32;&#32;&#32;{&#32;_M_assign_aux(__first,&#32;__last,&#32;std::__iterator_category(__first));&#32;}
1381 <emphasis role="preprocessor">#endif</emphasis>
1382 
1383 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1385 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_assign(<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x)
1386 &#32;&#32;&#32;&#32;&#32;&#32;{
1387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1388 &#32;&#32;&#32;&#32;&#32;&#32;{
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_value(__x);
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__n&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__x);
1391 &#32;&#32;&#32;&#32;&#32;&#32;}
1392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1393 &#32;&#32;&#32;&#32;&#32;&#32;{
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(begin()&#32;+&#32;__n);
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_value(__x);
1396 &#32;&#32;&#32;&#32;&#32;&#32;}
1397 &#32;&#32;&#32;&#32;&#32;&#32;}
1398 
1399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1400 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1401 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1402 &#32;&#32;&#32;&#32;_M_assign_aux(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
1404 &#32;&#32;&#32;&#32;{
1405 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__cur&#32;=&#32;begin();
1406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;__cur&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++__cur,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first)
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__cur&#32;=&#32;*__first;
1408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(__cur);
1410 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__first,&#32;__last);
1412 &#32;&#32;&#32;&#32;}
1413 
1414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1415 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1416 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1417 &#32;&#32;&#32;&#32;_M_assign_aux(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
1419 &#32;&#32;&#32;&#32;{
1420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;std::distance(__first,&#32;__last);
1421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__last,&#32;begin()));
1423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__mid&#32;=&#32;__first;
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(__mid,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__mid,&#32;begin());
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__mid,&#32;__last);
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1430 &#32;&#32;&#32;&#32;}
1431 
1432 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1436 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1437 &#32;&#32;&#32;&#32;_M_insert_dispatch(iterator&#32;__pos,&#32;_Integer&#32;__n,&#32;_Integer&#32;__x,
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__true_type)
1439 &#32;&#32;&#32;&#32;{&#32;_M_fill_insert(__pos,&#32;__n,&#32;__x);&#32;}
1440 
1441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1442 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1443 &#32;&#32;&#32;&#32;_M_insert_dispatch(iterator&#32;__pos,
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1446 &#32;&#32;&#32;&#32;{&#32;_M_insert_range(__pos,&#32;__first,&#32;__last,
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));&#32;}
1448 <emphasis role="preprocessor">#endif</emphasis>
1449 
1450 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1452 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_insert(iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x);
1453 
1454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1455 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1456 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1457 &#32;&#32;&#32;&#32;_M_insert_range(iterator&#32;__pos,&#32;_InputIterator&#32;__first,
1458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last,&#32;std::input_iterator_tag)
1459 &#32;&#32;&#32;&#32;{
1460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pos&#32;=&#32;insert(__pos,&#32;*__first);
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__pos;
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1465 &#32;&#32;&#32;&#32;}
1466 
1467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1468 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1469 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1470 &#32;&#32;&#32;&#32;_M_insert_range(iterator&#32;__position,&#32;_ForwardIterator&#32;__first,
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,&#32;std::forward_iterator_tag);
1472 
1473 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1475 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert_aux(iterator&#32;__position,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x);
1476 
1477 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1478 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1479 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_len(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
1480 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(max_size()&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;&lt;&#32;__n)
1482 &#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(__s));
1483 
1484 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;+&#32;std::max(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__n);
1485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__len&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;||&#32;__len&#32;&gt;&#32;max_size())&#32;?&#32;max_size()&#32;:&#32;__len;
1486 &#32;&#32;&#32;&#32;&#32;&#32;}
1487 
1488 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1490 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_at_end(iterator&#32;__pos)
1491 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_impl._M_finish&#32;=&#32;__pos;&#32;}
1492 
1493 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1494 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1495 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(iterator&#32;__pos);
1496 
1497 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1498 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1499 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(iterator&#32;__first,&#32;iterator&#32;__last);
1500 
1501 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;464.&#32;Suggestion&#32;for&#32;new&#32;member&#32;functions&#32;in&#32;standard&#32;containers.</emphasis>
1504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;N.B.&#32;DR&#32;464&#32;says&#32;nothing&#32;about&#32;vector&lt;bool&gt;&#32;but&#32;we&#32;need&#32;something</emphasis>
1505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;here&#32;due&#32;to&#32;the&#32;using-declaration&#32;in&#32;__gnu_debug::vector.</emphasis>
1506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;vector&#32;class.</emphasis>
1507 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1509 <emphasis role="preprocessor">#else</emphasis>
1510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;{&#32;}
1511 <emphasis role="preprocessor">#endif</emphasis>
1512 &#32;&#32;&#32;&#32;};
1513 
1514 _GLIBCXX_END_NAMESPACE_CONTAINER
1515 
1516 &#32;&#32;<emphasis role="comment">//&#32;Fill&#32;a&#32;partial&#32;word.</emphasis>
1517 &#32;&#32;_GLIBCXX20_CONSTEXPR
1518 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1519 &#32;&#32;__fill_bvector(_Bit_type*&#32;__v,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__first,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__last,
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;_GLIBCXX_NOEXCEPT
1521 &#32;&#32;{
1522 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_type&#32;__fmask&#32;=&#32;~0ul&#32;&lt;&lt;&#32;__first;
1523 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_type&#32;__lmask&#32;=&#32;~0ul&#32;&gt;&gt;&#32;(_S_word_bit&#32;-&#32;__last);
1524 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Bit_type&#32;__mask&#32;=&#32;__fmask&#32;&amp;&#32;__lmask;
1525 
1526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x)
1527 &#32;&#32;&#32;&#32;&#32;&#32;*__v&#32;|=&#32;__mask;
1528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1529 &#32;&#32;&#32;&#32;&#32;&#32;*__v&#32;&amp;=&#32;~__mask;
1530 &#32;&#32;}
1531 
1532 &#32;&#32;<emphasis role="comment">//&#32;Fill&#32;N&#32;full&#32;words,&#32;as&#32;if&#32;using&#32;memset,&#32;but&#32;usable&#32;in&#32;constant&#32;expressions.</emphasis>
1533 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__nonnull__))
1534 &#32;&#32;_GLIBCXX20_CONSTEXPR
1535 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1536 &#32;&#32;__fill_bvector_n(_Bit_type*&#32;__p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;_GLIBCXX_NOEXCEPT
1537 &#32;&#32;{
1538 <emphasis role="preprocessor">#if&#32;__cpp_lib_is_constant_evaluated</emphasis>
1539 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
1540 &#32;&#32;&#32;&#32;{
1541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
1542 &#32;&#32;&#32;&#32;__p[__i]&#32;=&#32;__x&#32;?&#32;~0ul&#32;:&#32;0ul;
1543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1544 &#32;&#32;&#32;&#32;}
1545 <emphasis role="preprocessor">#endif</emphasis>
1546 &#32;&#32;&#32;&#32;__builtin_memset(__p,&#32;__x&#32;?&#32;~0&#32;:&#32;0,&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Bit_type));
1547 &#32;&#32;}
1548 
1549 
1550 &#32;&#32;_GLIBCXX20_CONSTEXPR
1551 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1552 &#32;&#32;__fill_a1(_GLIBCXX_STD_C::_Bit_iterator&#32;__first,
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Bit_iterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x)
1554 &#32;&#32;{
1555 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_p&#32;!=&#32;__last._M_p)
1556 &#32;&#32;&#32;&#32;&#32;&#32;{
1557 &#32;&#32;&#32;&#32;_Bit_type*&#32;__first_p&#32;=&#32;__first._M_p;
1558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_offset&#32;!=&#32;0)
1559 &#32;&#32;&#32;&#32;&#32;&#32;__fill_bvector(__first_p++,&#32;__first._M_offset,&#32;_S_word_bit,&#32;__x);
1560 
1561 &#32;&#32;&#32;&#32;__fill_bvector_n(__first_p,&#32;__last._M_p&#32;-&#32;__first_p,&#32;__x);
1562 
1563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last._M_offset&#32;!=&#32;0)
1564 &#32;&#32;&#32;&#32;&#32;&#32;__fill_bvector(__last._M_p,&#32;0,&#32;__last._M_offset,&#32;__x);
1565 &#32;&#32;&#32;&#32;&#32;&#32;}
1566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_offset&#32;!=&#32;__last._M_offset)
1567 &#32;&#32;&#32;&#32;&#32;&#32;__fill_bvector(__first._M_p,&#32;__first._M_offset,&#32;__last._M_offset,&#32;__x);
1568 &#32;&#32;}
1569 
1570 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1571 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;1182.</emphasis>
1573 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1574 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;_GLIBCXX_STD_C::vector&lt;bool,&#32;_Alloc&gt;&gt;
1575 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;_GLIBCXX_STD_C::vector&lt;bool,&#32;_Alloc&gt;&gt;
1576 &#32;&#32;&#32;&#32;{
1577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
1578 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_STD_C::vector&lt;bool,&#32;_Alloc&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
1579 &#32;&#32;&#32;&#32;};
1580 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1581 
1582 _GLIBCXX_END_NAMESPACE_VERSION
1583 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1584 
1585 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
