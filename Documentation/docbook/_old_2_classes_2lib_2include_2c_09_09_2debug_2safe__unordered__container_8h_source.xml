<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__unordered__container_8h_source" xml:lang="en-US">
<title>safe_unordered_container.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/safe_unordered_container.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Safe&#32;container&#32;implementation&#32;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2011-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;debug/assertions.h&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;debug/macros.h&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;debug/functions.h&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_unordered_base.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
38 {
57 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_unordered_container&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Safe_unordered_container_base
59 &#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
61 &#32;&#32;&#32;&#32;&#32;&#32;_Container&amp;
62 &#32;&#32;&#32;&#32;&#32;&#32;_M_cont()&#32;noexcept
63 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Container*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);&#32;}
64 
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container_1af38fea658dbbc19d870448021ade3a17">_M_invalidate_locals</link>()
68 &#32;&#32;&#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__local_end&#32;=&#32;_M_cont()._M_base().cend(0);
70 &#32;&#32;&#32;&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aa3e9b27e61fad7cb80cfab023eac395d">_M_invalidate_local_if</link>(
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__local_end](__decltype(__local_end)&#32;__it)
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it&#32;!=&#32;__local_end;&#32;});
73 &#32;&#32;&#32;&#32;&#32;&#32;}
74 
75 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UContInvalidatePred
78 &#32;&#32;&#32;&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iterator&#32;__it)<emphasis role="keyword">&#32;const</emphasis>
82 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_source.count(_ExtractKey{}(*__it))&#32;==&#32;0;&#32;}
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;_M_source;
85 &#32;&#32;&#32;&#32;};
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UMContInvalidatePred
89 &#32;&#32;&#32;&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iterator&#32;__it)<emphasis role="keyword">&#32;const</emphasis>
93 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__rng&#32;=
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_source._M_base().equal_range(_ExtractKey{}(*__it));
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__rit&#32;=&#32;__rng.first;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rit&#32;!=&#32;__rng.second;&#32;++__rit)
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__it&#32;==&#32;__rit)
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
105 
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Source&amp;&#32;_M_source;
107 &#32;&#32;&#32;&#32;};
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Source,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Inval<emphasis role="keywordtype">id</emphasis>atePred&gt;
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_UContMergeGuard
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;_UContMergeGuard(_Source&amp;&#32;__src)&#32;noexcept
113 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_source(__src),&#32;_M_size(__src.size()),&#32;_M_pred&#32;{&#32;__src&#32;}
114 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;_UContMergeGuard(<emphasis role="keyword">const</emphasis>&#32;_UContMergeGuard&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;~_UContMergeGuard()
119 &#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__size&#32;=&#32;_M_source.size();
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size&#32;==&#32;_M_size)
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size&#32;==&#32;0)
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_source._M_invalidate_all();
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_source._M_invalidate_if(_M_pred);
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_source._M_invalidate_local_if(_M_pred);
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_source._M_invalidate_all();
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
138 &#32;&#32;&#32;&#32;&#32;&#32;}
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;_Source&amp;&#32;_M_source;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;_M_size;
142 &#32;&#32;&#32;&#32;&#32;&#32;_InvalidatePred&#32;_M_pred;
143 &#32;&#32;&#32;&#32;};
144 
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_UContMergeGuard&lt;_Source,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UContInvalidatePred&lt;_ExtractKey,&#32;_Source&gt;&gt;
148 &#32;&#32;&#32;&#32;_S_uc_guard(_ExtractKey,&#32;_Source&amp;&#32;__src)
149 &#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UContInvalidatePred&lt;_ExtractKey,&#32;_Source&gt;&#32;_InvalidatePred;
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_UContMergeGuard&lt;_Source,&#32;_InvalidatePred&gt;(__src);
152 &#32;&#32;&#32;&#32;}
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Source&gt;
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_UContMergeGuard&lt;_Source,
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UMContInvalidatePred&lt;_ExtractKey,&#32;_Source&gt;&gt;
157 &#32;&#32;&#32;&#32;_S_umc_guard(_ExtractKey,&#32;_Source&amp;&#32;__src)
158 &#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_UMContInvalidatePred&lt;_ExtractKey,&#32;_Source&gt;&#32;_InvalidatePred;
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_UContMergeGuard&lt;_Source,&#32;_InvalidatePred&gt;(__src);
161 &#32;&#32;&#32;&#32;}
162 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
163 
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container_1a1cd59f7dfebb1c28f012efacbcfd92a2">_M_invalidate_all</link>()
167 &#32;&#32;&#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__end&#32;=&#32;_M_cont()._M_base().cend();
169 &#32;&#32;&#32;&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aff0fe666b60f05c5f8da0ae92548ad42">_M_invalidate_if</link>([__end](__decltype(__end)&#32;__it)
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it&#32;!=&#32;__end;&#32;});
171 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container_1af38fea658dbbc19d870448021ade3a17">_M_invalidate_locals</link>();
172 &#32;&#32;&#32;&#32;&#32;&#32;}
173 
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
180 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aff0fe666b60f05c5f8da0ae92548ad42">_M_invalidate_if</link>(_Predicate&#32;__pred);
181 
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
187 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
188 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container_1aa3e9b27e61fad7cb80cfab023eac395d">_M_invalidate_local_if</link>(_Predicate&#32;__pred);
189 &#32;&#32;&#32;&#32;};
190 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_debug</emphasis>
191 
192 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_unordered_container.tcc&gt;</emphasis>
193 
194 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
