<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2uses__allocator_8h_source" xml:lang="en-US">
<title>uses_allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/uses_allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Uses-allocator&#32;Construction&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2010-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_USES_ALLOCATOR_H</emphasis>
26 <emphasis role="preprocessor">#define&#32;_USES_ALLOCATOR_H&#32;1</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
29 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
30 <emphasis role="preprocessor">#else</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
34 
35 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
36 {
37 _GLIBCXX_BEGIN_NAMESPACE_VERSION
39 
40 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;used&#32;for&#32;std::experimental::erased_type&#32;from&#32;Library&#32;Fundamentals.</emphasis>
41 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__erased_type&#32;{&#32;};
42 
43 &#32;&#32;<emphasis role="comment">//&#32;This&#32;also&#32;supports&#32;the&#32;&quot;type-erased&#32;allocator&quot;&#32;protocol&#32;from&#32;the</emphasis>
44 &#32;&#32;<emphasis role="comment">//&#32;Library&#32;Fundamentals&#32;TS,&#32;where&#32;allocator_type&#32;is&#32;erased_type.</emphasis>
45 &#32;&#32;<emphasis role="comment">//&#32;The&#32;second&#32;condition&#32;will&#32;always&#32;be&#32;false&#32;for&#32;types&#32;not&#32;using&#32;the&#32;TS.</emphasis>
46 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_erased_or_convertible
48 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__or_&lt;is_convertible&lt;_Alloc,&#32;_Tp&gt;,&#32;is_same&lt;_Tp,&#32;__erased_type&gt;&gt;;
49 
51 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>allocator_arg_t&#32;{&#32;<emphasis role="keyword">explicit</emphasis>&#32;allocator_arg_t()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;};
52 
53 &#32;&#32;_GLIBCXX17_INLINE&#32;<emphasis role="keyword">constexpr</emphasis>&#32;allocator_arg_t&#32;allocator_arg&#32;=
54 &#32;&#32;&#32;&#32;allocator_arg_t();
55 
56 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_allocator_helper
58 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
59 
60 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_allocator_helper&lt;_Tp,&#32;_Alloc,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Tp::allocator_type&gt;&gt;
63 &#32;&#32;&#32;&#32;:&#32;__is_erased_or_convertible&lt;_Alloc,&#32;typename&#32;_Tp::allocator_type&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
64 &#32;&#32;&#32;&#32;{&#32;};
65 
67 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>uses_allocator
69 &#32;&#32;&#32;&#32;:&#32;__uses_allocator_helper&lt;_Tp,&#32;_Alloc&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
70 &#32;&#32;&#32;&#32;{&#32;};
71 
72 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_alloc_base&#32;{&#32;};
73 
74 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_alloc0&#32;:&#32;__uses_alloc_base
75 &#32;&#32;{
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sink&#32;{&#32;<emphasis role="keywordtype">void</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)&#32;{&#32;}&#32;}&#32;_M_a;
77 &#32;&#32;};
78 
79 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_alloc1&#32;:&#32;__uses_alloc_base&#32;{&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc*&#32;_M_a;&#32;};
81 
82 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_alloc2&#32;:&#32;__uses_alloc_base&#32;{&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc*&#32;_M_a;&#32;};
84 
85 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_alloc;
87 
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_alloc&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;_Tp,&#32;_Alloc,&#32;_Args...&gt;
90 &#32;&#32;&#32;&#32;:&#32;__conditional_t&lt;
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_Tp,&#32;allocator_arg_t,&#32;const&#32;_Alloc&amp;,&#32;_Args...&gt;::value,
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uses_alloc1&lt;_Alloc&gt;,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__uses_alloc2&lt;_Alloc&gt;&gt;
94 &#32;&#32;&#32;&#32;{
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2586.&#32;Wrong&#32;value&#32;category&#32;used&#32;in&#32;scoped_allocator_adaptor::construct</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__or_&lt;
98 &#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_Tp,&#32;allocator_arg_t,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;_Args...&gt;,
99 &#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_Tp,&#32;_Args...,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&gt;&gt;<link linkend="_classvalue">::value</link>,
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;construction&#32;with&#32;an&#32;allocator&#32;must&#32;be&#32;possible&quot;</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;if&#32;uses_allocator&#32;is&#32;true&quot;</emphasis>);
102 &#32;&#32;&#32;&#32;};
103 
104 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__uses_alloc&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_Tp,&#32;_Alloc,&#32;_Args...&gt;
106 &#32;&#32;&#32;&#32;:&#32;__uses_alloc0&#32;{&#32;};
107 
108 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__uses_alloc_t&#32;=
110 &#32;&#32;&#32;&#32;&#32;&#32;__uses_alloc&lt;uses_allocator&lt;_Tp,&#32;_Alloc&gt;::value,&#32;_Tp,&#32;_Alloc,&#32;_Args...&gt;;
111 
112 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
113 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__uses_alloc_t&lt;_Tp,&#32;_Alloc,&#32;_Args...&gt;
115 &#32;&#32;&#32;&#32;__use_alloc(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;__uses_alloc_t&lt;_Tp,&#32;_Alloc,&#32;_Args...&gt;&#32;__ret;
118 &#32;&#32;&#32;&#32;&#32;&#32;__ret._M_a&#32;=&#32;std::__addressof(__a);
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
120 &#32;&#32;&#32;&#32;}
121 
122 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
123 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
124 &#32;&#32;&#32;&#32;__use_alloc(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
125 
126 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
127 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;uses_allocator_v&#32;=
129 &#32;&#32;&#32;&#32;&#32;&#32;uses_allocator&lt;_Tp,&#32;_Alloc&gt;::value;
130 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
131 
132 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Predicate,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_uses_allocator_predicate
135 &#32;&#32;&#32;&#32;:&#32;__conditional_t&lt;uses_allocator&lt;_Tp,&#32;_Alloc&gt;::value,
136 &#32;&#32;&#32;&#32;&#32;&#32;__or_&lt;_Predicate&lt;_Tp,&#32;allocator_arg_t,&#32;_Alloc,&#32;_Args...&gt;,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&lt;_Tp,&#32;_Args...,&#32;_Alloc&gt;&gt;,
138 &#32;&#32;&#32;&#32;&#32;&#32;_Predicate&lt;_Tp,&#32;_Args...&gt;&gt;&#32;{&#32;};
139 
140 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_uses_allocator_constructible
142 &#32;&#32;&#32;&#32;:&#32;__is_uses_allocator_predicate&lt;is_constructible,&#32;_Tp,&#32;_Alloc,&#32;_Args...&gt;
143 &#32;&#32;&#32;&#32;{&#32;};
144 
145 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
146 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
147 &#32;&#32;&#32;&#32;_GLIBCXX17_INLINE&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_uses_allocator_constructible_v&#32;=
148 &#32;&#32;&#32;&#32;&#32;&#32;__is_uses_allocator_constructible&lt;_Tp,&#32;_Alloc,&#32;_Args...&gt;<link linkend="_classvalue">::value</link>;
149 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
150 
151 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_nothrow_uses_allocator_constructible
153 &#32;&#32;&#32;&#32;:&#32;__is_uses_allocator_predicate&lt;is_nothrow_constructible,
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;_Alloc,&#32;_Args...&gt;
155 &#32;&#32;&#32;&#32;{&#32;};
156 
157 
158 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
159 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
160 &#32;&#32;&#32;&#32;_GLIBCXX17_INLINE&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
161 &#32;&#32;&#32;&#32;__is_nothrow_uses_allocator_constructible_v&#32;=
162 &#32;&#32;&#32;&#32;&#32;&#32;__is_nothrow_uses_allocator_constructible&lt;_Tp,&#32;_Alloc,&#32;_Args...&gt;<link linkend="_classvalue">::value</link>;
163 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
164 
165 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
166 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__uses_allocator_construct_impl(__uses_alloc0&#32;__a,&#32;_Tp*&#32;__ptr,
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
168 &#32;&#32;&#32;&#32;{&#32;::new&#32;((<emphasis role="keywordtype">void</emphasis>*)__ptr)&#32;_Tp(std::forward&lt;_Args&gt;(__args)...);&#32;}
169 
170 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__uses_allocator_construct_impl(__uses_alloc1&lt;_Alloc&gt;&#32;__a,&#32;_Tp*&#32;__ptr,
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
173 &#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;&#32;&#32;::new&#32;((<emphasis role="keywordtype">void</emphasis>*)__ptr)&#32;_Tp(allocator_arg,&#32;*__a._M_a,
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
176 &#32;&#32;&#32;&#32;}
177 
178 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__uses_allocator_construct_impl(__uses_alloc2&lt;_Alloc&gt;&#32;__a,&#32;_Tp*&#32;__ptr,
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
181 &#32;&#32;&#32;&#32;{&#32;::new&#32;((<emphasis role="keywordtype">void</emphasis>*)__ptr)&#32;_Tp(std::forward&lt;_Args&gt;(__args)...,&#32;*__a._M_a);&#32;}
182 
183 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
184 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;__uses_allocator_construct(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;_Tp*&#32;__ptr,
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
186 &#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;std::__uses_allocator_construct_impl(
188 &#32;&#32;&#32;&#32;&#32;&#32;std::__use_alloc&lt;_Tp,&#32;_Alloc,&#32;_Args...&gt;(__a),&#32;__ptr,
189 &#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
190 &#32;&#32;&#32;&#32;}
191 
193 _GLIBCXX_END_NAMESPACE_VERSION
194 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
195 
196 <emphasis role="preprocessor">#endif</emphasis>
197 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
