<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2debug_2safe__sequence_8h_source" xml:lang="en-US">
<title>safe_sequence.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/safe_sequence.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Safe&#32;sequence&#32;implementation&#32;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2003-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_SAFE_SEQUENCE_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_SAFE_SEQUENCE_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;debug/assertions.h&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;debug/macros.h&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;debug/functions.h&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_base.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
38 {
43 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Type&gt;
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__debug_1_1___not__equal__to">_Not_equal_to</link>
45 &#32;&#32;&#32;&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;_Type&#32;__value;
47 
48 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
49 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___not__equal__to_1aff2eba73a441e3f46741de681be4e90e">_Not_equal_to</link>(<emphasis role="keyword">const</emphasis>&#32;_Type&amp;&#32;__v)&#32;:&#32;__value(__v)&#32;{&#32;}
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
52 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___not__equal__to_1a568e9b5064f5f5908cd9f5d33ae84c0c">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
53 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__value&#32;!=&#32;__x;&#32;}
54 &#32;&#32;&#32;&#32;};
55 
58 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Type&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__debug_1_1___equal__to">_Equal_to</link>
60 &#32;&#32;&#32;&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;_Type&#32;__value;
62 
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___equal__to_1a0f0cb9b538bef9aa2702c6096e7696d2">_Equal_to</link>(<emphasis role="keyword">const</emphasis>&#32;_Type&amp;&#32;__v)&#32;:&#32;__value(__v)&#32;{&#32;}
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___equal__to_1a308cc5d233bdb34c67674f4cac7d93f3">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
68 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__value&#32;==&#32;__x;&#32;}
69 &#32;&#32;&#32;&#32;};
70 
73 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__debug_1_1___after__nth__from">_After_nth_from</link>
75 &#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::difference_type
77 &#32;&#32;&#32;&#32;&#32;&#32;difference_type;
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;_Iterator&#32;_M_base;
80 &#32;&#32;&#32;&#32;&#32;&#32;difference_type&#32;_M_n;
81 
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
83 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___after__nth__from_1ac94e5e7692abfb305e4935788ba0be11">_After_nth_from</link>(<emphasis role="keyword">const</emphasis>&#32;difference_type&amp;&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Iterator&amp;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>)
84 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_base(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>),&#32;_M_n(__n)&#32;{&#32;}
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___after__nth__from_1a3524f7ae5af4d7979654b84550a8ed1c">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;_Iterator&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
88 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;-&#32;_M_base&#32;&gt;=&#32;_M_n;&#32;}
89 &#32;&#32;&#32;&#32;};
90 
107 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_sequence&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Safe_sequence_base
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
117 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__sequence_1a9526e7688edd9c4e6f343340d833dfcf">_M_invalidate_if</link>(_Predicate&#32;__pred);
118 
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
124 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
125 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__sequence_1ad1f86e4e83069486342ba7b53e095c42">_M_transfer_from_if</link>(<link linkend="_class____gnu__debug_1_1___safe__sequence">_Safe_sequence</link>&amp;&#32;__from,&#32;_Predicate&#32;__pred);
126 &#32;&#32;&#32;&#32;};
127 
130 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__debug_1_1___safe__node__sequence">_Safe_node_sequence</link>
132 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__sequence">_Safe_sequence</link>&lt;_Sequence&gt;
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__node__sequence_1ae94b138660c94714a79326f8fa5e6b4f">_M_invalidate_all</link>()
137 &#32;&#32;&#32;&#32;&#32;&#32;{
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::const_iterator&#32;_Const_iterator;
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Const_iterator::iterator_type&#32;_Base_const_iterator;
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___not__equal__to">__gnu_debug::_Not_equal_to&lt;_Base_const_iterator&gt;</link>&#32;_Not_equal;
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__seq&#32;=&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Sequence*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);
142 &#32;&#32;&#32;&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__sequence_1a9526e7688edd9c4e6f343340d833dfcf">_M_invalidate_if</link>(_Not_equal(__seq._M_base().end()));
143 &#32;&#32;&#32;&#32;&#32;&#32;}
144 &#32;&#32;&#32;&#32;};
145 
146 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_debug</emphasis>
147 
148 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_sequence.tcc&gt;</emphasis>
149 
150 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
