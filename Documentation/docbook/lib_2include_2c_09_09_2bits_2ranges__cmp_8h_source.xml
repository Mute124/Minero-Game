<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2ranges__cmp_8h_source" xml:lang="en-US">
<title>ranges_cmp.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ranges_cmp.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Concept-constrained&#32;comparison&#32;implementations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2019-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_RANGES_CMP_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_RANGES_CMP_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/move.h&gt;</emphasis>
35 <emphasis role="preprocessor">#&#32;include&#32;&lt;concepts&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
41 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_transparent;&#32;<emphasis role="comment">//&#32;not&#32;defined</emphasis>
42 
43 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;std::identity&#32;here&#32;so&#32;that&#32;&lt;iterator&gt;&#32;and&#32;&lt;ranges&gt;</emphasis>
44 &#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;need&#32;to&#32;include&#32;&lt;bits/stl_function.h&gt;&#32;to&#32;get&#32;it.</emphasis>
45 
47 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>
48 &#32;&#32;{
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
50 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;&amp;
52 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
53 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t);&#32;}
54 
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;__is_transparent;
56 &#32;&#32;};
57 
58 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_concepts</emphasis>
59 <emphasis role="comment">//&#32;Define&#32;this&#32;here,&#32;included&#32;by&#32;all&#32;the&#32;headers&#32;that&#32;need&#32;to&#32;define&#32;it.</emphasis>
60 <emphasis role="preprocessor">#define&#32;__cpp_lib_ranges&#32;202110L</emphasis>
61 
62 <emphasis role="keyword">namespace&#32;</emphasis>ranges
63 {
64 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
65 &#32;&#32;{
66 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BUILTIN-PTR-CMP(T,&#32;&lt;,&#32;U)</emphasis>
67 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;determines&#32;whether&#32;t&#32;&lt;&#32;u&#32;results&#32;in&#32;a&#32;call&#32;to&#32;a&#32;built-in&#32;operator&lt;</emphasis>
68 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comparing&#32;pointers.&#32;It&#32;doesn&apos;t&#32;work&#32;for&#32;function&#32;pointers&#32;(PR&#32;93628).</emphasis>
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__less_builtin_ptr_cmp
71 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">requires</emphasis>&#32;(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;{&#32;{&#32;__t&#32;&lt;&#32;__u&#32;}&#32;-&gt;&#32;same_as&lt;bool&gt;;&#32;}
72 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Tp,&#32;const&#32;volatile&#32;void*&gt;
73 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Up,&#32;const&#32;volatile&#32;void*&gt;
74 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!&#32;<emphasis role="keyword">requires</emphasis>(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;operator&lt;(std::forward&lt;_Tp&gt;(__t),&#32;std::forward&lt;_Up&gt;(__u));&#32;}
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!&#32;<emphasis role="keyword">requires</emphasis>(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::forward&lt;_Tp&gt;(__t).operator&lt;(std::forward&lt;_Up&gt;(__u));&#32;});
78 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
79 
80 &#32;&#32;<emphasis role="comment">//&#32;[range.cmp]&#32;Concept-constrained&#32;comparisons</emphasis>
81 
82 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
83 &#32;&#32;<emphasis role="comment">//&#32;3530&#32;BUILTIN-PTR-MEOW&#32;should&#32;not&#32;opt&#32;the&#32;type&#32;out&#32;of&#32;syntactic&#32;checks</emphasis>
84 
86 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>equal_to
87 &#32;&#32;{
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;equality_comparable_with&lt;_Tp,&#32;_Up&gt;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::declval&lt;_Tp&gt;()&#32;==&#32;std::declval&lt;_Up&gt;()))
93 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;==&#32;std::forward&lt;_Up&gt;(__u);&#32;}
94 
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;__is_transparent;
96 &#32;&#32;};
97 
99 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>not_equal_to
100 &#32;&#32;{
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;equality_comparable_with&lt;_Tp,&#32;_Up&gt;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::declval&lt;_Up&gt;()&#32;==&#32;std::declval&lt;_Tp&gt;()))
106 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!equal_to{}(std::forward&lt;_Tp&gt;(__t),&#32;std::forward&lt;_Up&gt;(__u));&#32;}
107 
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;__is_transparent;
109 &#32;&#32;};
110 
112 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less
113 &#32;&#32;{
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;totally_ordered_with&lt;_Tp,&#32;_Up&gt;
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::declval&lt;_Tp&gt;()&#32;&lt;&#32;std::declval&lt;_Up&gt;()))
119 &#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__detail::__less_builtin_ptr_cmp&lt;_Tp,&#32;_Up&gt;)
121 &#32;&#32;&#32;&#32;&#32;&#32;{
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t&#32;&lt;&#32;__u;
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__UINTPTR_TYPE__<emphasis role="keyword">&gt;</emphasis>(
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Tp&gt;(__t)));
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__y&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__UINTPTR_TYPE__<emphasis role="keyword">&gt;</emphasis>(
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Up&gt;(__u)));
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&#32;__y;
130 &#32;&#32;&#32;&#32;&#32;&#32;}
131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;&lt;&#32;std::forward&lt;_Up&gt;(__u);
133 &#32;&#32;&#32;&#32;&#32;&#32;}
134 
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;__is_transparent;
136 &#32;&#32;};
137 
139 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater
140 &#32;&#32;{
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;totally_ordered_with&lt;_Tp,&#32;_Up&gt;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::declval&lt;_Up&gt;()&#32;&lt;&#32;std::declval&lt;_Tp&gt;()))
146 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;less{}(std::forward&lt;_Up&gt;(__u),&#32;std::forward&lt;_Tp&gt;(__t));&#32;}
147 
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;__is_transparent;
149 &#32;&#32;};
150 
152 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater_equal
153 &#32;&#32;{
154 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;totally_ordered_with&lt;_Tp,&#32;_Up&gt;
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::declval&lt;_Tp&gt;()&#32;&lt;&#32;std::declval&lt;_Up&gt;()))
159 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!less{}(std::forward&lt;_Tp&gt;(__t),&#32;std::forward&lt;_Up&gt;(__u));&#32;}
160 
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;__is_transparent;
162 &#32;&#32;};
163 
165 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less_equal
166 &#32;&#32;{
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;totally_ordered_with&lt;_Tp,&#32;_Up&gt;
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::declval&lt;_Up&gt;()&#32;&lt;&#32;std::declval&lt;_Tp&gt;()))
172 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!less{}(std::forward&lt;_Up&gt;(__u),&#32;std::forward&lt;_Tp&gt;(__t));&#32;}
173 
174 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;__is_transparent;
175 &#32;&#32;};
176 
177 }&#32;<emphasis role="comment">//&#32;namespace&#32;ranges</emphasis>
178 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;library&#32;concepts</emphasis>
179 _GLIBCXX_END_NAMESPACE_VERSION
180 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
181 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
182 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_RANGES_CMP_H</emphasis>
</programlisting></section>
