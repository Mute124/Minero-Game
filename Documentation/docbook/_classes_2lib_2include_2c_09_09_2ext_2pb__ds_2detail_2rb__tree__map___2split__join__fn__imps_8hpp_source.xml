<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2rb__tree__map___2split__join__fn__imps_8hpp_source" xml:lang="en-US">
<title>split_join_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
45 PB_DS_CLASS_C_DEC::
46 join(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
50 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(base_type::join_prep(other)&#32;==&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
51 &#32;&#32;&#32;&#32;{
52 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
53 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
54 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
55 &#32;&#32;&#32;&#32;}
56 
57 &#32;&#32;const&#32;node_pointer&#32;p_x&#32;=&#32;other.split_min();
58 &#32;&#32;join_imp(p_x,&#32;other.m_p_head-&gt;m_p_parent);
59 &#32;&#32;base_type::join_finish(other);
60 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
61 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
62 &#32;}
63 
64 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
65 <emphasis role="keywordtype">void</emphasis>
66 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
67 join_imp(node_pointer&#32;p_x,&#32;node_pointer&#32;p_r)
68 {
69 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_x&#32;!=&#32;0);
70 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r&#32;!=&#32;0)
71 &#32;&#32;&#32;&#32;p_r-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
72 
73 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;h&#32;=&#32;black_height(base_type::m_p_head-&gt;m_p_parent);
74 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;other_h&#32;=&#32;black_height(p_r);
75 &#32;&#32;node_pointer&#32;p_x_l;
76 &#32;&#32;node_pointer&#32;p_x_r;
77 &#32;&#32;std::pair&lt;node_pointer,&#32;node_pointer&gt;&#32;join_pos;
78 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;right_join&#32;=&#32;h&#32;&gt;=&#32;other_h;
79 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(right_join)
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;join_pos&#32;=&#32;find_join_pos_right(base_type::m_p_head-&gt;m_p_parent,&#32;
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h,&#32;other_h);
83 &#32;&#32;&#32;&#32;&#32;&#32;p_x_l&#32;=&#32;join_pos.first;
84 &#32;&#32;&#32;&#32;&#32;&#32;p_x_r&#32;=&#32;p_r;
85 &#32;&#32;&#32;&#32;}
86 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
87 &#32;&#32;&#32;&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;p_x_l&#32;=&#32;base_type::m_p_head-&gt;m_p_parent;
89 &#32;&#32;&#32;&#32;&#32;&#32;base_type::m_p_head-&gt;m_p_parent&#32;=&#32;p_r;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r&#32;!=&#32;0)
91 &#32;&#32;&#32;&#32;p_r-&gt;m_p_parent&#32;=&#32;base_type::m_p_head;
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;join_pos&#32;=&#32;find_join_pos_left(base_type::m_p_head-&gt;m_p_parent,&#32;
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h,&#32;other_h);
95 &#32;&#32;&#32;&#32;&#32;&#32;p_x_r&#32;=&#32;join_pos.first;
96 &#32;&#32;&#32;&#32;}
97 
98 &#32;&#32;node_pointer&#32;p_parent&#32;=&#32;join_pos.second;
99 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent&#32;==&#32;base_type::m_p_head)
100 &#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;base_type::m_p_head-&gt;m_p_parent&#32;=&#32;p_x;
102 &#32;&#32;&#32;&#32;&#32;&#32;p_x-&gt;m_p_parent&#32;=&#32;base_type::m_p_head;
103 &#32;&#32;&#32;&#32;}
104 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;p_x-&gt;m_p_parent&#32;=&#32;p_parent;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(right_join)
108 &#32;&#32;&#32;&#32;p_x-&gt;m_p_parent-&gt;m_p_right&#32;=&#32;p_x;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
110 &#32;&#32;&#32;&#32;p_x-&gt;m_p_parent-&gt;m_p_left&#32;=&#32;p_x;
111 &#32;&#32;&#32;&#32;}
112 
113 &#32;&#32;p_x-&gt;m_p_left&#32;=&#32;p_x_l;
114 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_x_l&#32;!=&#32;0)
115 &#32;&#32;&#32;&#32;p_x_l-&gt;m_p_parent&#32;=&#32;p_x;
116 
117 &#32;&#32;p_x-&gt;m_p_right&#32;=&#32;p_x_r;
118 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_x_r&#32;!=&#32;0)
119 &#32;&#32;&#32;&#32;p_x_r-&gt;m_p_parent&#32;=&#32;p_x;
120 
121 &#32;&#32;p_x-&gt;m_red&#32;=&#32;<emphasis role="keyword">true</emphasis>;
122 
123 &#32;&#32;base_type::initialize_min_max();
124 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
125 &#32;&#32;base_type::update_to_top(p_x,&#32;(node_update*&#32;)this);
126 &#32;&#32;insert_fixup(p_x);
127 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*this))
128 }
129 
130 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
131 inline&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::node_pointer
132 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
133 split_min()
134 {
135 &#32;&#32;node_pointer&#32;p_min&#32;=&#32;base_type::m_p_head-&gt;m_p_left;
136 
137 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
138 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_head&#32;=&#32;base_type::m_p_head;
139 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_min&#32;!=&#32;p_head);
140 <emphasis role="preprocessor">#endif&#32;</emphasis>
141 
142 &#32;&#32;remove_node(p_min);
143 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_min;
144 }
145 
146 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
147 std::pair&lt;
148 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer,
149 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer&gt;
150 PB_DS_CLASS_C_DEC::
151 find_join_pos_right(node_pointer&#32;p_l,&#32;size_type&#32;h_l,&#32;size_type&#32;h_r)
152 {
153 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(h_l&#32;&gt;=&#32;h_r);
154 
155 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base_type::m_p_head-&gt;m_p_parent&#32;==&#32;0)
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::make_pair((node_pointer)0,&#32;base_type::m_p_head));
157 
158 &#32;&#32;node_pointer&#32;p_l_parent&#32;=&#32;base_type::m_p_head;
159 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(h_l&#32;&gt;&#32;h_r)
160 &#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l-&gt;m_red&#32;==&#32;<emphasis role="keyword">false</emphasis>)
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(h_l&#32;&gt;&#32;0);
164 &#32;&#32;&#32;&#32;&#32;&#32;--h_l;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;p_l_parent&#32;=&#32;p_l;
168 &#32;&#32;&#32;&#32;&#32;&#32;p_l&#32;=&#32;p_l-&gt;m_p_right;
169 &#32;&#32;&#32;&#32;}
170 
171 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_effectively_black(p_l))
172 &#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;p_l_parent&#32;=&#32;p_l;
174 &#32;&#32;&#32;&#32;&#32;&#32;p_l&#32;=&#32;p_l-&gt;m_p_right;
175 &#32;&#32;&#32;&#32;}
176 
177 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(is_effectively_black(p_l));
178 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(black_height(p_l)&#32;==&#32;h_r);
179 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_l&#32;==&#32;0&#32;||&#32;p_l-&gt;m_p_parent&#32;==&#32;p_l_parent);
180 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(p_l,&#32;p_l_parent);
181 }
182 
183 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
184 std::pair&lt;
185 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer,
186 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer&gt;
187 PB_DS_CLASS_C_DEC::
188 find_join_pos_left(node_pointer&#32;p_r,&#32;size_type&#32;h_l,&#32;size_type&#32;h_r)
189 {
190 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(h_r&#32;&gt;&#32;h_l);
191 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base_type::m_p_head-&gt;m_p_parent&#32;==&#32;0)
192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::make_pair((node_pointer)0,
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_type::m_p_head));
194 &#32;&#32;node_pointer&#32;p_r_parent&#32;=&#32;base_type::m_p_head;
195 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(h_r&#32;&gt;&#32;h_l)
196 &#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;m_red&#32;==&#32;<emphasis role="keyword">false</emphasis>)
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(h_r&#32;&gt;&#32;0);
200 &#32;&#32;&#32;&#32;&#32;&#32;--h_r;
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;p_r_parent&#32;=&#32;p_r;
204 &#32;&#32;&#32;&#32;&#32;&#32;p_r&#32;=&#32;p_r-&gt;m_p_left;
205 &#32;&#32;&#32;&#32;}
206 
207 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_effectively_black(p_r))
208 &#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;p_r_parent&#32;=&#32;p_r;
210 &#32;&#32;&#32;&#32;&#32;&#32;p_r&#32;=&#32;p_r-&gt;m_p_left;
211 &#32;&#32;&#32;&#32;}
212 
213 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(is_effectively_black(p_r));
214 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(black_height(p_r)&#32;==&#32;h_l);
215 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r&#32;==&#32;0&#32;||&#32;p_r-&gt;m_p_parent&#32;==&#32;p_r_parent);
216 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(p_r,&#32;p_r_parent);
217 }
218 
219 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
220 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::size_type
221 PB_DS_CLASS_C_DEC::
222 black_height(node_pointer&#32;p_nd)
223 {
224 &#32;&#32;size_type&#32;h&#32;=&#32;1;
225 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_nd&#32;!=&#32;0)
226 &#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_red&#32;==&#32;<emphasis role="keyword">false</emphasis>)
228 &#32;&#32;&#32;&#32;++h;
229 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_nd-&gt;m_p_left;
230 &#32;&#32;&#32;&#32;}
231 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;h;
232 }
233 
234 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
235 <emphasis role="keywordtype">void</emphasis>
236 PB_DS_CLASS_C_DEC::
237 split(key_const_reference&#32;r_key,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
238 {
239 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
240 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
241 
242 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(base_type::split_prep(r_key,&#32;other)&#32;==&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
245 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
246 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
247 &#32;&#32;&#32;&#32;}
248 
249 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*this))
250 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>(other)
251 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;this-&gt;upper_bound(r_key).m_p_nd;
252 &#32;&#32;do
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next_nd&#32;=&#32;p_nd-&gt;m_p_parent;
255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Cmp_Fn::operator()(r_key,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value)))
256 &#32;&#32;&#32;&#32;split_at_node(p_nd,&#32;other);
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
259 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>(other)
260 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_next_nd;
261 &#32;&#32;&#32;&#32;}
262 &#32;&#32;while&#32;(p_nd&#32;!=&#32;base_type::m_p_head);
263 
264 &#32;&#32;base_type::split_finish(other);
265 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
266 }
267 
268 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
269 <emphasis role="keywordtype">void</emphasis>
270 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
271 split_at_node(node_pointer&#32;p_nd,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
272 {
273 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd&#32;!=&#32;0);
274 
275 &#32;&#32;node_pointer&#32;p_l&#32;=&#32;p_nd-&gt;m_p_left;
276 &#32;&#32;node_pointer&#32;p_r&#32;=&#32;p_nd-&gt;m_p_right;
277 &#32;&#32;node_pointer&#32;p_parent&#32;=&#32;p_nd-&gt;m_p_parent;
278 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent&#32;==&#32;base_type::m_p_head)
279 &#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;base_type::m_p_head-&gt;m_p_parent&#32;=&#32;p_l;
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l&#32;!=&#32;0)
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;p_l-&gt;m_p_parent&#32;=&#32;base_type::m_p_head;
284 &#32;&#32;&#32;&#32;&#32;&#32;p_l-&gt;m_red&#32;=&#32;<emphasis role="keyword">false</emphasis>;
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
286 &#32;&#32;&#32;&#32;}
287 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
288 &#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_parent-&gt;m_p_left&#32;==&#32;p_nd)
290 &#32;&#32;&#32;&#32;p_parent-&gt;m_p_left&#32;=&#32;p_l;
291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
292 &#32;&#32;&#32;&#32;p_parent-&gt;m_p_right&#32;=&#32;p_l;
293 
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l&#32;!=&#32;0)
295 &#32;&#32;&#32;&#32;p_l-&gt;m_p_parent&#32;=&#32;p_parent;
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;update_to_top(p_parent,&#32;(node_update*&#32;)<emphasis role="keyword">this</emphasis>);
298 
299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p_nd-&gt;m_red)
300 &#32;&#32;&#32;&#32;remove_fixup(p_l,&#32;p_parent);
301 &#32;&#32;&#32;&#32;}
302 
303 &#32;&#32;base_type::initialize_min_max();
304 &#32;&#32;other.join_imp(p_nd,&#32;p_r);
305 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
306 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1aab7f010e7d119791c979b0a32848c437">PB_DS_STRUCT_ONLY_ASSERT_VALID</link>(other)
307 }
308 
309 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
