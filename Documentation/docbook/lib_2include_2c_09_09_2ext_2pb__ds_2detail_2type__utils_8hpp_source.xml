<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2type__utils_8hpp_source" xml:lang="en-US">
<title>type_utils.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/type_utils.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
42 <emphasis role="preprocessor">#ifndef&#32;PB_DS_TYPE_UTILS_HPP</emphasis>
43 <emphasis role="preprocessor">#define&#32;PB_DS_TYPE_UTILS_HPP</emphasis>
44 
45 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;tr1/type_traits&gt;</emphasis>
48 <emphasis role="preprocessor">#include&#32;&lt;ext/type_traits.h&gt;</emphasis>
49 <emphasis role="preprocessor">#include&#32;&lt;ext/numeric_traits.h&gt;</emphasis>
50 
51 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__pbds">__gnu_pbds</link>
52 {
53 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>detail
54 &#32;&#32;{
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_same;
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_const;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_pointer;
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_reference;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_fundamental;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_member_object_pointer;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_member_pointer;
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::is_base_of;
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::remove_const;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::remove_reference;
65 
66 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Need&#32;integral_const&lt;bool,&#32;true&gt;&#32;&lt;-&gt;&#32;integral_const&lt;int,&#32;1&gt;,&#32;so</emphasis>
67 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;because&#32;of&#32;this&#32;use&#32;the&#32;following&#32;typedefs&#32;instead&#32;of&#32;importing</emphasis>
68 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::tr1&apos;s.</emphasis>
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::tr1::integral_constant;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::tr1::integral_constant&lt;int,&#32;1&gt;&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>;
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::tr1::integral_constant&lt;int,&#32;0&gt;&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>;
72 
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::__conditional_type;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::__numeric_traits;
75 
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_const_pointer
78 &#32;&#32;&#32;&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;is_const&lt;T&gt;::value&#32;&amp;&amp;&#32;is_pointer&lt;T&gt;::value
82 &#32;&#32;&#32;&#32;};
83 &#32;&#32;&#32;&#32;};
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_const_reference
87 &#32;&#32;&#32;&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
89 &#32;&#32;&#32;&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;is_const&lt;T&gt;::value&#32;&amp;&amp;&#32;is_reference&lt;T&gt;::value
91 &#32;&#32;&#32;&#32;};
92 &#32;&#32;&#32;&#32;};
93 
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_simple
96 &#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;is_fundamental&lt;typename&#32;remove_const&lt;T&gt;::type&gt;<link linkend="_classvalue">::value</link>&#32;
100 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_pointer&lt;typename&#32;remove_const&lt;T&gt;::type&gt;<link linkend="_classvalue">::value</link>&#32;
101 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_member_pointer&lt;T&gt;::value&#32;
102 &#32;&#32;&#32;&#32;};
103 &#32;&#32;&#32;&#32;};
104 
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>is_pair
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_pair_imp
111 &#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
113 &#32;&#32;&#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;0
115 &#32;&#32;&#32;&#32;&#32;&#32;};
116 &#32;&#32;&#32;&#32;&#32;&#32;};
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">typename</emphasis>&#32;V&gt;
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_pair_imp&lt;<link linkend="_namespacestd">std</link>::pair&lt;U,V&gt;&#32;&gt;
120 &#32;&#32;&#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
122 &#32;&#32;&#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;1
124 &#32;&#32;&#32;&#32;&#32;&#32;};
125 &#32;&#32;&#32;&#32;&#32;&#32;};
126 
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
129 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;is_pair_imp&lt;T&gt;::value
131 &#32;&#32;&#32;&#32;};
132 &#32;&#32;&#32;&#32;};
133 
134 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;C++11&apos;s&#32;static_assert&#32;if&#32;possible.</emphasis>
135 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
136 <emphasis role="preprocessor">#define&#32;PB_DS_STATIC_ASSERT(UNIQUE,&#32;E)&#32;&#32;static_assert(E,&#32;#UNIQUE)</emphasis>
137 <emphasis role="preprocessor">#else</emphasis>
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_assert;
140 
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_assert&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
143 &#32;&#32;&#32;&#32;{&#32;};
144 
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&gt;
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_assert_dumclass
147 &#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
149 &#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;=&#32;1
151 &#32;&#32;&#32;&#32;};
152 &#32;&#32;&#32;&#32;};
153 
154 <emphasis role="preprocessor">#define&#32;PB_DS_STATIC_ASSERT(UNIQUE,&#32;E)&#32;&#32;\</emphasis>
155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;__gnu_pbds::detail::__static_assert_dumclass&lt;sizeof(__gnu_pbds::detail::__static_assert&lt;bool(E)&gt;)&gt;&#32;UNIQUE##__static_assert_type</emphasis>
156 
157 <emphasis role="preprocessor">#endif</emphasis>
158 
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Type&gt;
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>type_to_type
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;Type&#32;<link linkend="_struct____gnu__pbds_1_1detail_1_1type__to__type_1a71c0bcce3c66fbe208aa77d03c93fc5e">type</link>;
163 &#32;&#32;&#32;&#32;};
164 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
165 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_pbds</emphasis>
166 
167 <emphasis role="preprocessor">#endif&#32;</emphasis>
</programlisting></section>
