<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_tests_8h_source" xml:lang="en-US">
<title>tests.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/tests/tests.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 
6 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2parallel_2settings_8h">settings.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&lt;<link linkend="_toml_8h">toml++/toml.h</link>&gt;</emphasis>
9 
10 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;^&#32;SHOULD_HAVE_EXCEPTIONS</emphasis>
11 <emphasis role="preprocessor">#error&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;was&#32;not&#32;deduced&#32;correctly</emphasis>
12 <emphasis role="preprocessor">#endif</emphasis>
13 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;^&#32;TOML_EXCEPTIONS</emphasis>
14 <emphasis role="preprocessor">#error&#32;TOML_EXCEPTIONS&#32;does&#32;not&#32;match&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;(default&#32;behaviour&#32;should&#32;be&#32;to&#32;match)</emphasis>
15 <emphasis role="preprocessor">#endif</emphasis>
16 <emphasis role="preprocessor">#if&#32;defined(_WIN32)&#32;^&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
17 <emphasis role="preprocessor">#error&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;does&#32;not&#32;match&#32;_WIN32&#32;(default&#32;behaviour&#32;should&#32;be&#32;to&#32;match)</emphasis>
18 <emphasis role="preprocessor">#endif</emphasis>
19 <emphasis role="preprocessor">#if&#32;TOML_LIB_SINGLE_HEADER&#32;^&#32;USE_SINGLE_HEADER</emphasis>
20 <emphasis role="preprocessor">#error&#32;TOML_LIB_SINGLE_HEADER&#32;was&#32;not&#32;set&#32;correctly</emphasis>
21 <emphasis role="preprocessor">#endif</emphasis>
22 
23 <emphasis role="preprocessor">#if&#32;TOML_ICC</emphasis>
24 <emphasis role="preprocessor">#define&#32;UNICODE_LITERALS_OK&#32;0</emphasis>
25 <emphasis role="preprocessor">#else</emphasis>
26 <emphasis role="preprocessor">#define&#32;UNICODE_LITERALS_OK&#32;1</emphasis>
27 <emphasis role="preprocessor">#endif</emphasis>
28 
29 <link linkend="_tests_8h_1a742c76bbbcc2c09ffc9988274cdd9e27">TOML_DISABLE_SPAM_WARNINGS</link>;
30 <link linkend="_tests_8h_1a56df52d1a29373a87698fdc09a1c1c7a">TOML_DISABLE_ARITHMETIC_WARNINGS</link>;
31 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;==&#32;13</emphasis>
32 <emphasis role="preprocessor">#pragma&#32;clang&#32;diagnostic&#32;ignored&#32;&quot;-Wreserved-identifier&quot;&#32;</emphasis><emphasis role="comment">//&#32;false-positive</emphasis>
33 <emphasis role="preprocessor">#endif</emphasis>
34 
35 <link linkend="_tests_8h_1a6c2a5b158c0a6d208edd992229d91d78">TOML_DISABLE_WARNINGS</link>;
36 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_lib__catch2_8h">lib_catch2.h</link>&quot;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacetoml">toml</link>
39 {
40 }
41 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace_catch_1_1literals">Catch::literals</link>;
42 <emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespacetoml">toml</link>;
43 <link linkend="_tests_8h_1a4e1f9eaceb60becba33cd64d3a85e3ed">TOML_ENABLE_WARNINGS</link>;
44 
45 <link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
46 <link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(<emphasis role="keyword">const</emphasis>)
47 <link linkend="_preprocessor_8h_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
48 constexpr&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;operator&quot;&quot;&#32;_sz(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;n)&#32;noexcept
49 {
50 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(n);
51 }
52 
53 <emphasis role="preprocessor">#define&#32;FILE_LINE_ARGS&#32;trim_file_path(std::string_view{&#32;__FILE__&#32;}),&#32;__LINE__</emphasis>
54 <emphasis role="preprocessor">#define&#32;BOM_PREFIX&#32;&#32;&#32;&#32;&#32;&quot;\xEF\xBB\xBF&quot;</emphasis>
55 
56 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
57 <emphasis role="preprocessor">#define&#32;FORCE_FAIL(...)&#32;FAIL(__VA_ARGS__)</emphasis>
58 <emphasis role="preprocessor">#else</emphasis>
59 <emphasis role="preprocessor">#defineemphasis>
60 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doemphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
62 <emphasis role="preprocessoremphasis>
63 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::exit(-1);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
64 <emphasis role="preprocessoremphasis>
65 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
66 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;while&#32;(false)</emphasis>
67 <emphasis role="preprocessor">#endif</emphasis>
68 
69 <emphasis role="preprocessor">#define&#32;CHECK_SYMMETRIC_RELOP(lhs,&#32;op,&#32;rhs,&#32;result)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
70 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CHECK(((lhs)op(rhs))&#32;==&#32;(result));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
71 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CHECK(((rhs)op(lhs))&#32;==&#32;(result))</emphasis>
72 
73 <emphasis role="preprocessor">#define&#32;CHECK_SYMMETRIC_EQUAL(lhs,&#32;rhs)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
74 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CHECK_SYMMETRIC_RELOP(lhs,&#32;==,&#32;rhs,&#32;true);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
75 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CHECK_SYMMETRIC_RELOP(lhs,&#32;!=,&#32;rhs,&#32;false)</emphasis>
76 
77 <emphasis role="preprocessor">#define&#32;CHECK_SYMMETRIC_INEQUAL(lhs,&#32;rhs)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
78 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CHECK_SYMMETRIC_RELOP(lhs,&#32;==,&#32;rhs,&#32;false);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
79 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;CHECK_SYMMETRIC_RELOP(lhs,&#32;!=,&#32;rhs,&#32;true)</emphasis>
80 
81 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
82 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtype__tag">type_tag</link>
83 {
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structtype__tag_1ac8c7f9c9090c5e322640127505a18fb1">type</link>&#32;=&#32;T;
85 };
86 
87 <emphasis role="comment">//&#32;function_view&#32;-&#32;adapted&#32;from&#32;here:&#32;https://vittorioromeo.info/index/blog/passing_functions_to_functions.html</emphasis>
88 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
89 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classfunction__view">function_view</link>;
90 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>,&#32;<emphasis role="keyword">typename</emphasis>...&#32;P&gt;
91 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classfunction__view">function_view</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>(P...)&gt;&#32;final
92 {
93 &#32;&#32;<emphasis role="keyword">private</emphasis>:
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>func_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>(P...);
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>eraser_func_type&#32;=&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>(<emphasis role="keywordtype">void</emphasis>*,&#32;P&amp;&amp;...);
96 
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;ptr_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;eraser_func_type*&#32;eraser&#32;=&#32;{};
99 
100 &#32;&#32;<emphasis role="keyword">public</emphasis>:
101 &#32;&#32;&#32;&#32;<link linkend="_classfunction__view_3_01_r_07_p_8_8_8_08_4_1a4d7a2612c55eef3e9cfac9cc0d06c013">function_view</link>()&#32;noexcept&#32;=&#32;default;
102 
103 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T&gt;
104 &#32;&#32;&#32;&#32;<link linkend="_classfunction__view">function_view</link>(T&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)&#32;noexcept&#32;:&#32;ptr_{&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::addressof(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>))&#32;}
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eraser&#32;=&#32;[](<emphasis role="keywordtype">void</emphasis>*&#32;ptr,&#32;P&amp;&amp;...&#32;xs)&#32;-&gt;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::add_pointer_t&lt;std::remove_reference_t&lt;T&gt;<emphasis role="keyword">&gt;</emphasis>&gt;(ptr))(std::forward&lt;P&gt;(xs)...);&#32;};
108 &#32;&#32;&#32;&#32;}
109 
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)&#32;<emphasis role="keyword">operator</emphasis>()(P&amp;&amp;...&#32;xs)&#32;<emphasis role="keyword">const</emphasis>
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;eraser(ptr_,&#32;std::forward&lt;P&gt;(xs)...);
113 &#32;&#32;&#32;&#32;}
114 
115 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
117 &#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!ptr_;
119 &#32;&#32;&#32;&#32;}
120 };
121 
122 <emphasis role="keyword">using&#32;</emphasis><link linkend="_classfunction__view">pss_func</link>&#32;=&#32;<link linkend="_classfunction__view">function_view</link>&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(<link linkend="_classtable">table</link>&amp;&amp;)&gt;;
123 
124 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1affe07f4d089ea923a2aecfff4fe14029">parsing_should_succeed</link>(std::string_view&#32;test_file,
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;test_line,
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;toml_str,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classfunction__view">pss_func</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{},
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;source_path&#32;=&#32;{});
129 
130 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1a0c5d9cf96489a99ae8ab7b72ef06f04b">parsing_should_fail</link>(std::string_view&#32;test_file,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;test_line,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;toml_str,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_index&#32;expected_failure_line&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>source_index<emphasis role="keyword">&gt;</emphasis>(-1),
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;source_index&#32;expected_failure_column&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>source_index<emphasis role="keyword">&gt;</emphasis>(-1));
135 
136 <link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
137 <emphasis role="keyword">constexpr</emphasis>&#32;std::string_view&#32;<link linkend="_tests_8h_1a583b12b24a91361c07fe5e1149c468a9">trim_file_path</link>(std::string_view&#32;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
138 {
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;=&#32;std::min(<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>.rfind(<emphasis role="stringliteral">&quot;\\&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>),&#32;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>.rfind(<emphasis role="stringliteral">&quot;/&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>));
140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;!=&#32;std::string_view::npos)
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;=&#32;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>.substr(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;+&#32;1_sz);
142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
143 }
144 
145 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
146 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link>(std::string_view&#32;test_file,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;test_line,
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view&#32;value_str,
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;expected)
150 {
151 &#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1a3ae64706314066fdc8b6c8029a915aa7">INFO</link>(<emphasis role="stringliteral">&quot;[&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;&lt;&lt;&#32;test_file&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;line&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;&lt;&lt;&#32;test_line&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;parse_expected_value(\&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;&lt;&lt;&#32;value_str&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\&quot;)&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>)
153 
154 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>;
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;key&#32;=&#32;<emphasis role="stringliteral">&quot;val&#32;=&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;
156 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.reserve(key.length()&#32;+&#32;value_str.length());
157 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.append(key);
158 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.append(value_str);
159 
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;is_val&#32;=&#32;[](<emphasis role="keywordtype">char32_t</emphasis>&#32;codepoint)
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(impl::node_type_of&lt;T&gt;&#32;==&#32;node_type::string)
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;codepoint&#32;==&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>&#32;||&#32;codepoint&#32;==&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!impl::is_whitespace(codepoint);
166 &#32;&#32;&#32;&#32;};
167 
168 &#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;pos{&#32;1,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>source_index<emphasis role="keyword">&gt;</emphasis>(key.length())&#32;};
169 &#32;&#32;&#32;&#32;<link linkend="_structsource__position">source_position</link>&#32;begin{},&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>{};
170 &#32;&#32;&#32;&#32;{
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::utf8_decoder&#32;decoder;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;value_str)
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(c));
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!decoder.has_code_point())
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(impl::is_ascii_vertical_whitespace(decoder.codepoint))
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder.codepoint&#32;==&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>)
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos.line++;
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos.column&#32;=&#32;source_index{&#32;1&#32;};
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
187 
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos.column++;
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_val(decoder.codepoint))
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!begin)
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;begin&#32;=&#32;pos;
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;pos;
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;begin;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>.column++;
200 &#32;&#32;&#32;&#32;}
201 
202 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;impl::native_type_of&lt;impl::remove_cvref&lt;T&gt;&gt;;
203 &#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;value_type&gt;</link>&#32;val_parsed;
204 &#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1a3ae64706314066fdc8b6c8029a915aa7">INFO</link>(<emphasis role="stringliteral">&quot;[&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;&lt;&lt;&#32;test_file&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;line&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;&lt;&lt;&#32;test_line&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;parse_expected_value:&#32;Checking&#32;initial&#32;parse&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>)
207 
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;stolen_value&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;parsing_should_succeed&#32;invokes&#32;the&#32;functor&#32;more&#32;than&#32;once</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="_tests_8h_1affe07f4d089ea923a2aecfff4fe14029">parsing_should_succeed</link>(
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_file,
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_line,
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;},
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<link linkend="_classtable">table</link>&amp;&amp;&#32;tbl)
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(tbl.size()&#32;==&#32;1);
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nv&#32;=&#32;tbl[<emphasis role="stringliteral">&quot;val&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>];
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv);
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.is&lt;value_type&gt;());
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.as&lt;value_type&gt;());
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.type()&#32;==&#32;impl::node_type_of&lt;T&gt;);
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node());
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;is&lt;value_type&gt;());
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;as&lt;value_type&gt;());
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;type()&#32;==&#32;impl::node_type_of&lt;T&gt;);
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;homogeneity</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.is_homogeneous());
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.is_homogeneous(node_type::none));
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.is_homogeneous(impl::node_type_of&lt;T&gt;));
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.is_homogeneous&lt;value_type&gt;());
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;is_homogeneous());
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;is_homogeneous(node_type::none));
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;is_homogeneous(impl::node_type_of&lt;T&gt;));
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;is_homogeneous&lt;value_type&gt;());
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;nt&#32;=&#32;impl::unwrap_enum(node_type::table);&#32;nt&#32;&lt;=&#32;impl::unwrap_enum(node_type::date_time);&#32;nt++)
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(node_type{&#32;nt&#32;}&#32;==&#32;impl::node_type_of&lt;T&gt;)
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node*&#32;first_nonmatch{};
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(!nv.is_homogeneous(node_type{&#32;nt&#32;}));
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(!nv.is_homogeneous(node_type{&#32;nt&#32;},&#32;first_nonmatch));
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(first_nonmatch&#32;==&#32;nv.node());
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(!nv.node()-&gt;is_homogeneous(node_type{&#32;nt&#32;}));
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(!nv.node()-&gt;is_homogeneous(node_type{&#32;nt&#32;},&#32;first_nonmatch));
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(first_nonmatch&#32;==&#32;nv.node());
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
247 
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;the&#32;raw&#32;value</emphasis>
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;value&lt;value_type&gt;()&#32;==&#32;expected);
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;value_or(T{})&#32;==&#32;expected);
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.as&lt;value_type&gt;()-&gt;get()&#32;==&#32;expected);
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.value&lt;value_type&gt;()&#32;==&#32;expected);
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.value_or(T{})&#32;==&#32;expected);
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.ref&lt;value_type&gt;()&#32;==&#32;expected);
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;ref&lt;value_type&gt;()&#32;==&#32;expected);
256 
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;the&#32;table&#32;relops</emphasis>
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(tbl&#32;==&#32;<link linkend="_classtable">table</link>{&#32;{&#32;{&#32;<emphasis role="stringliteral">&quot;val&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;expected&#32;}&#32;}&#32;});
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(!(tbl&#32;!=&#32;<link linkend="_classtable">table</link>{&#32;{&#32;{&#32;<emphasis role="stringliteral">&quot;val&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;expected&#32;}&#32;}&#32;}));
260 
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;value/node&#32;relops</emphasis>
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(*nv.as&lt;value_type&gt;(),&#32;*nv.as&lt;value_type&gt;());
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(*nv.as&lt;value_type&gt;(),&#32;expected);
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(nv,&#32;expected);
265 
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;sure&#32;source&#32;info&#32;is&#32;correct</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(nv.node()-&gt;source().begin,&#32;begin);
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(nv.node()-&gt;source().end,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>);
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;float&#32;identities&#32;etc</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;value_type,&#32;double&gt;)
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;float_node&#32;=&#32;*nv.as&lt;value_type&gt;();
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;fpcls&#32;=&#32;impl::fpclassify(*float_node);
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fpcls&#32;==&#32;impl::fp_class::nan)
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(float_node,&#32;std::numeric_limits&lt;double&gt;::quiet_NaN());
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;std::numeric_limits&lt;double&gt;::infinity());
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;-std::numeric_limits&lt;double&gt;::infinity());
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;1.0);
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;0.0);
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;-1.0);
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fpcls&#32;==&#32;impl::fp_class::neg_inf&#32;||&#32;fpcls&#32;==&#32;impl::fp_class::pos_inf)
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;std::numeric_limits&lt;double&gt;::quiet_NaN());
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fpcls&#32;==&#32;impl::fp_class::neg_inf)
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(float_node,&#32;-std::numeric_limits&lt;double&gt;::infinity());
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;std::numeric_limits&lt;double&gt;::infinity());
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(float_node,&#32;std::numeric_limits&lt;double&gt;::infinity());
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;-std::numeric_limits&lt;double&gt;::infinity());
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;1.0);
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;0.0);
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;-1.0);
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;std::numeric_limits&lt;double&gt;::quiet_NaN());
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;std::numeric_limits&lt;double&gt;::infinity());
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;-std::numeric_limits&lt;double&gt;::infinity());
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a86f5a6b4069fc1bfe9afad7f8201a532">CHECK_SYMMETRIC_EQUAL</link>(float_node,&#32;*float_node);
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::abs(*float_node)&#32;&lt;=&#32;1e10)
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;*float_node&#32;+&#32;100.0);
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1a842ec731389161b68a2be6828b13d651">CHECK_SYMMETRIC_INEQUAL</link>(float_node,&#32;*float_node&#32;-&#32;100.0);
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1a836cca6b6ed3a1706353f6d1bca0935f">CHECK</link>(float_node&#32;&lt;&#32;std::numeric_limits&lt;double&gt;::infinity());
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1a836cca6b6ed3a1706353f6d1bca0935f">CHECK</link>(float_node&#32;&gt;&#32;-std::numeric_limits&lt;double&gt;::infinity());
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;steal&#32;the&#32;val&#32;for&#32;round-trip&#32;tests</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!stolen_value)
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val_parsed&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*nv.as&lt;value_type&gt;());
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stolen_value&#32;=&#32;<emphasis role="keyword">true</emphasis>;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
327 &#32;&#32;&#32;&#32;}
328 
329 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;round-tripping</emphasis>
330 &#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1a3ae64706314066fdc8b6c8029a915aa7">INFO</link>(<emphasis role="stringliteral">&quot;[&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;&lt;&lt;&#32;test_file&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;line&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;&lt;&lt;&#32;test_line&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;parse_expected_value:&#32;Checking&#32;round-trip&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>)
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;str;
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;tbl&#32;=&#32;<link linkend="_classtable">table</link>{&#32;{&#32;{&#32;<emphasis role="stringliteral">&quot;val&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,&#32;*val_parsed&#32;}&#32;}&#32;};
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;ss;
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss&#32;&lt;&lt;&#32;tbl;
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(ss).str();
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;value_ok&#32;=&#32;<emphasis role="keyword">true</emphasis>;
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;parse_ok&#32;=
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1affe07f4d089ea923a2aecfff4fe14029">parsing_should_succeed</link>(test_file,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_line,
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string_view{&#32;str&#32;},
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<link linkend="_classtable">table</link>&amp;&amp;&#32;tbl)
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(tbl.size()&#32;==&#32;1);
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nv&#32;=&#32;tbl[<emphasis role="stringliteral">&quot;val&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>];
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv);
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.as&lt;value_type&gt;());
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85">REQUIRE</link>(nv.node()-&gt;type()&#32;==&#32;impl::node_type_of&lt;T&gt;);
354 
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(value_ok&#32;&amp;&amp;&#32;nv.ref&lt;value_type&gt;()&#32;!=&#32;expected)
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_ok&#32;=&#32;<emphasis role="keyword">false</emphasis>;
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_tests_8h_1aaa328e3be7660426b38cd1bb4953db8e">FORCE_FAIL</link>(<emphasis role="stringliteral">&quot;Value&#32;was&#32;not&#32;the&#32;same&#32;after&#32;round-tripping&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
361 
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!parse_ok&#32;||&#32;value_ok)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
365 &#32;&#32;&#32;&#32;}
366 
367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
368 }
369 
370 <emphasis role="comment">//&#32;manually&#32;instantiate&#32;some&#32;templates&#32;to&#32;reduce&#32;obj&#32;bloat&#32;and&#32;test&#32;compilation&#32;time</emphasis>
371 
372 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link>(std::string_view,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>,&#32;std::string_view,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;);
373 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link>(std::string_view,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>,&#32;std::string_view,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&amp;);
374 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link>(std::string_view,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>,&#32;std::string_view,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;);
375 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link>(std::string_view,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>,&#32;std::string_view,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&amp;);
376 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link>(std::string_view,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>,&#32;std::string_view,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;);
377 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_tests_8h_1aa009252a95ef7a00b3c5e8db48f5a3c5">parse_expected_value</link>(std::string_view,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>,&#32;std::string_view,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string_view&amp;);
378 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>
379 {
380 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>unique_ptr&lt;const&#32;Catch::IExceptionTranslator&gt;;
381 }
382 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_catch">Catch</link>
383 {
384 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker&lt;node_view&lt;node&gt;</link>&gt;;
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_catch_1_1_string_maker">StringMaker&lt;node_view&lt;const node&gt;</link>&gt;;
386 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&amp;&#32;ReusableStringStream::operator&lt;&lt;(<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;);
387 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<link linkend="_class_catch_1_1_reusable_string_stream">ReusableStringStream</link>&amp;&#32;ReusableStringStream::operator&lt;&lt;(<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;);
388 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>Detail
389 &#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1a84aa484e594118061dd09de134a49cf7">stringify</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&amp;);
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;std::string&#32;<link linkend="_namespace_catch_1_1_detail_1a84aa484e594118061dd09de134a49cf7">stringify</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&amp;);
392 &#32;&#32;&#32;&#32;}
393 }
394 
395 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;20&#32;&amp;&amp;&#32;TOML_CLANG&#32;&amp;&amp;&#32;TOML_CLANG&#32;&lt;=&#32;14&#32;</emphasis><emphasis role="comment">//&#32;https://github.com/llvm/llvm-project/issues/55560</emphasis>
396 
397 <link linkend="_preprocessor_8h_1a25cc6544f9a475e47e4d373f0b1ea5e2">TOML_PUSH_WARNINGS</link>;
398 <link linkend="_tests_8h_1a6c2a5b158c0a6d208edd992229d91d78">TOML_DISABLE_WARNINGS</link>;
399 
400 <emphasis role="keyword">namespace</emphasis>
401 {
402 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">static</emphasis>&#32;std::u8string&#32;clang_string_workaround(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)
403 &#32;&#32;&#32;&#32;{
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;};
405 &#32;&#32;&#32;&#32;}
406 }
407 
408 <link linkend="_preprocessor_8h_1a857696acfb06fc509ad07e0d23bb7aab">TOML_POP_WARNINGS</link>;
409 
410 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
