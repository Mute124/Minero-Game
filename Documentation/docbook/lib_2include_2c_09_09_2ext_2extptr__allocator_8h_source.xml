<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2extptr__allocator_8h_source" xml:lang="en-US">
<title>extptr_allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/extptr_allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;&lt;extptr_allocator.h&gt;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
36 <emphasis role="preprocessor">#ifndef&#32;_EXTPTR_ALLOCATOR_H</emphasis>
37 <emphasis role="preprocessor">#define&#32;_EXTPTR_ALLOCATOR_H&#32;1</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;ext/numeric_traits.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;ext/pointer.h&gt;</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
55 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtPtr_allocator
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;size_type;
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;difference_type;
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;the&#32;non-standard&#32;pointer&#32;types.</emphasis>
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Pointer_adapter&lt;_Relative_pointer_impl&lt;_Tp&gt;&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Pointer_adapter&lt;_Relative_pointer_impl&lt;const&#32;_Tp&gt;&#32;&gt;&#32;
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
66 
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;const_reference;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
70 
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_ExtPtr_allocator&lt;_Up&gt;&#32;other;&#32;};
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;_ExtPtr_allocator()&#32;_GLIBCXX_USE_NOEXCEPT&#32;
76 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_real_alloc()&#32;{&#32;}
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;_ExtPtr_allocator(<emphasis role="keyword">const</emphasis>&#32;_ExtPtr_allocator&amp;&#32;__rarg)&#32;_GLIBCXX_USE_NOEXCEPT
79 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_real_alloc(__rarg._M_real_alloc)&#32;{&#32;}
80 
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ExtPtr_allocator(<emphasis role="keyword">const</emphasis>&#32;_ExtPtr_allocator&lt;_Up&gt;&amp;&#32;__rarg)
83 &#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_real_alloc(__rarg._M_getUnderlyingImp())&#32;{&#32;}
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;~_ExtPtr_allocator()&#32;_GLIBCXX_USE_NOEXCEPT
87 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;address(reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
90 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;const_pointer&#32;address(const_reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
93 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;allocate(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;=&#32;0)
96 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_real_alloc.allocate(__n);&#32;}
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
99 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_real_alloc.deallocate(__p.get(),&#32;__n);&#32;}
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;max_size()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT
102 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__numeric_traits&lt;size_type&gt;::__max&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);&#32;}
103 
104 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;construct(_Up*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
108 &#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>&#32;*)__p)&#32;_Up(std::forward&lt;_Args&gt;(__args)...);&#32;}
109 
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;construct(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
113 &#32;&#32;&#32;&#32;{&#32;construct(__p.get(),&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_Up*&#32;__p)
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;__p-&gt;~_Up();&#32;}
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)
121 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(__p.get());&#32;}
122 
123 <emphasis role="preprocessor">#else</emphasis>
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;construct(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
126 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;::new(__p.get())&#32;_Tp(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;destroy(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)
129 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__p-&gt;~_Tp();&#32;}
130 <emphasis role="preprocessor">#endif</emphasis>
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;_ExtPtr_allocator&lt;_Up&gt;&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
135 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_real_alloc&#32;==&#32;__rarg._M_getUnderlyingImp();&#32;}
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;_ExtPtr_allocator&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
139 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_real_alloc&#32;==&#32;__rarg._M_real_alloc;&#32;}
140 
141 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;_ExtPtr_allocator&lt;_Up&gt;&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
145 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_real_alloc&#32;!=&#32;__rarg._M_getUnderlyingImp();&#32;}
146 
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
148 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;_ExtPtr_allocator&amp;&#32;__rarg)<emphasis role="keyword">&#32;const</emphasis>
149 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_real_alloc&#32;!=&#32;__rarg._M_real_alloc;&#32;}
150 <emphasis role="preprocessor">#endif</emphasis>
151 
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_ExtPtr_allocator&lt;_Up&gt;&amp;,&#32;_ExtPtr_allocator&lt;_Up&gt;&amp;);
155 
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;method&#32;specific&#32;to&#32;this&#32;implementation.</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::allocator&lt;_Tp&gt;&amp;
158 &#32;&#32;&#32;&#32;&#32;&#32;_M_getUnderlyingImp()<emphasis role="keyword">&#32;const</emphasis>
159 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_real_alloc;&#32;}
160 
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
162 &#32;&#32;&#32;&#32;&#32;&#32;std::allocator&lt;_Tp&gt;&#32;&#32;_M_real_alloc;
163 &#32;&#32;&#32;&#32;};
164 
165 &#32;&#32;<emphasis role="comment">//&#32;_ExtPtr_allocator&lt;void&gt;&#32;specialization.</emphasis>
166 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtPtr_allocator&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
168 &#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;&#32;size_type;
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;difference_type;
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;the&#32;non-standard&#32;pointer&#32;types</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Pointer_adapter&lt;_Relative_pointer_impl&lt;void&gt;&#32;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Pointer_adapter&lt;_Relative_pointer_impl&lt;const&#32;void&gt;&#32;&gt;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
178 
179 &#32;&#32;&#32;&#32;&#32;&#32;_ExtPtr_allocator()&#32;{&#32;}
180 
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
182 &#32;&#32;&#32;&#32;_ExtPtr_allocator(<emphasis role="keyword">const</emphasis>&#32;_ExtPtr_allocator&lt;_Up&gt;&amp;)&#32;{&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_ExtPtr_allocator&lt;_Up&gt;&#32;other;&#32;};
187 
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
189 &#32;&#32;&#32;&#32;&#32;&#32;std::allocator&lt;void&gt;&#32;&#32;_M_real_alloc;
190 &#32;&#32;&#32;&#32;};
191 
192 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
193 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
194 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_ExtPtr_allocator&lt;_Tp&gt;&amp;&#32;__larg,&#32;_ExtPtr_allocator&lt;_Tp&gt;&amp;&#32;__rarg)
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;std::allocator&lt;_Tp&gt;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(&#32;__rarg._M_real_alloc&#32;);
197 &#32;&#32;&#32;&#32;&#32;&#32;__rarg._M_real_alloc&#32;=&#32;__larg._M_real_alloc;
198 &#32;&#32;&#32;&#32;&#32;&#32;__larg._M_real_alloc&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
199 &#32;&#32;&#32;&#32;}
200 
201 _GLIBCXX_END_NAMESPACE_VERSION
202 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
203 
204 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_EXTPTR_ALLOCATOR_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
