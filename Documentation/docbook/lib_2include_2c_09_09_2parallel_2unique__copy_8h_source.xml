<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2parallel_2unique__copy_8h_source" xml:lang="en-US">
<title>unique_copy.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/unique_copy.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Robert&#32;Geisberger&#32;and&#32;Robin&#32;Dapp.</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_UNIQUE_COPY_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_UNIQUE_COPY_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;parallel/multiseq_selection.h&gt;</emphasis>
37 
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
39 {
46 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate&gt;
49 &#32;&#32;&#32;&#32;_OutputIterator
50 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a15f31ee1c15e180d0d838571cd6c8b24">__parallel_unique_copy</link>(_IIter&#32;__first,&#32;_IIter&#32;__last,
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__last&#32;-&#32;__first)
55 
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;&#32;_TraitsType;
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
59 
60 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__size&#32;=&#32;__last&#32;-&#32;__first;
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size&#32;==&#32;0)
63 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Let&#32;the&#32;first&#32;thread&#32;process&#32;two&#32;parts.</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;*__counter;
67 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;*__borders;
68 
69 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>();
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;part&#32;contains&#32;at&#32;least&#32;one&#32;element.</emphasis>
71 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;num_threads(__num_threads)</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;{
73 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
74 &#32;&#32;&#32;&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();
76 &#32;&#32;&#32;&#32;&#32;&#32;__borders&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;+&#32;2];
77 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ac799255921e70b0378d145924d673f9c">__equally_split</link>(__size,&#32;__num_threads&#32;+&#32;1,&#32;__borders);
78 &#32;&#32;&#32;&#32;&#32;&#32;__counter&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;+&#32;1];
79 &#32;&#32;&#32;&#32;}
80 
81 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
82 
83 &#32;&#32;&#32;&#32;_DifferenceType&#32;__begin,&#32;__end;
84 
85 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;length&#32;without&#32;duplicates</emphasis>
86 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Needed&#32;for&#32;position&#32;in&#32;output</emphasis>
87 &#32;&#32;&#32;&#32;_DifferenceType&#32;__i&#32;=&#32;0;
88 &#32;&#32;&#32;&#32;_OutputIterator&#32;__out&#32;=&#32;__result;
89 
90 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam&#32;==&#32;0)
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin&#32;=&#32;__borders[0]&#32;+&#32;1;&#32;&#32;&#32;<emphasis role="comment">//&#32;==&#32;1</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end&#32;=&#32;__borders[__iam&#32;+&#32;1];
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out++&#32;=&#32;*__first;
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_IIter&#32;__iter&#32;=&#32;__first&#32;+&#32;__begin;&#32;__iter&#32;&lt;&#32;__first&#32;+&#32;__end;
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__iter)
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__binary_pred(*__iter,&#32;*(__iter&#32;-&#32;1)))
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out++&#32;=&#32;*__iter;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin&#32;=&#32;__borders[__iam];&#32;<emphasis role="comment">//one&#32;part</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end&#32;=&#32;__borders[__iam&#32;+&#32;1];
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_IIter&#32;__iter&#32;=&#32;__first&#32;+&#32;__begin;&#32;__iter&#32;&lt;&#32;__first&#32;+&#32;__end;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__iter)
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__binary_pred(*__iter,&#32;*(__iter&#32;-&#32;1)))
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
120 &#32;&#32;&#32;&#32;__counter[__iam]&#32;=&#32;__i;
121 
122 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Last&#32;part&#32;still&#32;untouched.</emphasis>
123 &#32;&#32;&#32;&#32;_DifferenceType&#32;__begin_output;
124 
125 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
126 
127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;result&#32;in&#32;output&#32;on&#32;calculated&#32;positions.</emphasis>
128 &#32;&#32;&#32;&#32;__begin_output&#32;=&#32;0;
129 
130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iam&#32;==&#32;0)
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__t&#32;=&#32;0;&#32;__t&#32;&lt;&#32;__num_threads;&#32;++__t)
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_output&#32;+=&#32;__counter[__t];
134 
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;0;
136 
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__iter_out&#32;=&#32;__result&#32;+&#32;__begin_output;
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin&#32;=&#32;__borders[__num_threads];
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end&#32;=&#32;__size;
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_IIter&#32;__iter&#32;=&#32;__first&#32;+&#32;__begin;&#32;__iter&#32;&lt;&#32;__first&#32;+&#32;__end;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__iter)
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__iter&#32;==&#32;__first
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!__binary_pred(*__iter,&#32;*(__iter&#32;-&#32;1)))
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__iter_out++&#32;=&#32;*__iter;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__counter[__num_threads]&#32;=&#32;__i;
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__t&#32;=&#32;0;&#32;__t&#32;&lt;&#32;__iam;&#32;__t++)
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_output&#32;+=&#32;__counter[__t];
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__iter_out&#32;=&#32;__result&#32;+&#32;__begin_output;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_IIter&#32;__iter&#32;=&#32;__first&#32;+&#32;__begin;&#32;__iter&#32;&lt;&#32;__first&#32;+&#32;__end;
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__iter)
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__binary_pred(*__iter,&#32;*(__iter&#32;-&#32;1)))
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__iter_out++&#32;=&#32;*__iter;
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
168 &#32;&#32;&#32;&#32;&#32;&#32;}
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__end_output&#32;=&#32;0;
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__t&#32;=&#32;0;&#32;__t&#32;&lt;&#32;__num_threads&#32;+&#32;1;&#32;__t++)
172 &#32;&#32;&#32;&#32;__end_output&#32;+=&#32;__counter[__t];
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__borders;
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;__end_output;
177 &#32;&#32;&#32;&#32;}
178 
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
186 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a15f31ee1c15e180d0d838571cd6c8b24">__parallel_unique_copy</link>(_IIter&#32;__first,&#32;_IIter&#32;__last,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
188 &#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;::value_type
190 &#32;&#32;&#32;&#32;_ValueType;
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a15f31ee1c15e180d0d838571cd6c8b24">__parallel_unique_copy</link>(__first,&#32;__last,&#32;__result,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::equal_to&lt;_ValueType&gt;());
193 &#32;&#32;&#32;&#32;}
194 
195 }<emphasis role="comment">//namespace&#32;__gnu_parallel</emphasis>
196 
197 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_UNIQUE_COPY_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
