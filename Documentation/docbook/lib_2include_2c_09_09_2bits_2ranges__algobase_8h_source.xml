<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2ranges__algobase_8h_source" xml:lang="en-US">
<title>ranges_algobase.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ranges_algobase.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Core&#32;algorithmic&#32;facilities&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_RANGES_ALGOBASE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_RANGES_ALGOBASE_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;compare&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_funcs.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/ranges_base.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;ranges::begin,&#32;ranges::range&#32;etc.</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/invoke.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__invoke</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;__is_byte</emphasis>
42 
43 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
44 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
45 {
46 _GLIBCXX_BEGIN_NAMESPACE_VERSION
47 <emphasis role="keyword">namespace&#32;</emphasis>ranges
48 {
49 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
50 &#32;&#32;{
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_normal_iterator&#32;=&#32;<emphasis role="keyword">false</emphasis>;
53 
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&gt;
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
56 &#32;&#32;&#32;&#32;__is_normal_iterator&lt;__gnu_cxx::__normal_iterator&lt;_Iterator,
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Container&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
58 
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_reverse_iterator&#32;=&#32;<emphasis role="keyword">false</emphasis>;
61 
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
64 &#32;&#32;&#32;&#32;__is_reverse_iterator&lt;reverse_iterator&lt;_Iterator&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
65 
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_move_iterator&#32;=&#32;<emphasis role="keyword">false</emphasis>;
68 
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
71 &#32;&#32;&#32;&#32;__is_move_iterator&lt;move_iterator&lt;_Iterator&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
72 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
73 
74 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__equal_fn
75 &#32;&#32;{
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;_Iter1,&#32;_Iter2,&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
82 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Pred&#32;__pred&#32;=&#32;{},
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;implement&#32;more&#32;specializations&#32;to&#32;at&#32;least&#32;have&#32;parity&#32;with</emphasis>
87 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::equal.</emphasis>
88 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__detail::__is_normal_iterator&lt;_Iter1&gt;
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;_Iter1,&#32;_Sent1&gt;)
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(__first1.base(),&#32;__last1.base(),
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last2),
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
94 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__detail::__is_normal_iterator&lt;_Iter2&gt;
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;_Iter2,&#32;_Sent2&gt;)
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1),
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2.base(),&#32;__last2.base(),
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(sized_sentinel_for&lt;_Sent1,&#32;_Iter1&gt;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sized_sentinel_for&lt;_Sent2,&#32;_Iter2&gt;)
102 &#32;&#32;&#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;ranges::distance(__first1,&#32;__last1);
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;ranges::distance(__first2,&#32;__last2);
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;!=&#32;__d2)
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValueType1&#32;=&#32;iter_value_t&lt;_Iter1&gt;;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__use_memcmp
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;((is_integral_v&lt;_ValueType1&gt;&#32;||&#32;is_pointer_v&lt;_ValueType1&gt;)
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__memcmpable&lt;_Iter1,&#32;_Iter2&gt;::__value
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Pred,&#32;ranges::equal_to&gt;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Proj1,&#32;identity&gt;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Proj2,&#32;identity&gt;);
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__use_memcmp)
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len&#32;=&#32;(__last1&#32;-&#32;__first1))
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!std::__memcmp(__first1,&#32;__first2,&#32;__len);
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
130 &#32;&#32;&#32;&#32;&#32;&#32;}
131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1&#32;==&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;==&#32;__last2;
140 &#32;&#32;&#32;&#32;&#32;&#32;}
141 &#32;&#32;&#32;&#32;&#32;&#32;}
142 
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Pred&#32;__pred&#32;=&#32;{},
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
156 &#32;&#32;&#32;&#32;&#32;&#32;}
157 &#32;&#32;};
158 
159 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__equal_fn&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>{};
160 
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>in_out_result
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
165 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Out&#32;out;
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out2&gt;
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_Iter&amp;,&#32;_Iter2&gt;
169 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Out&amp;,&#32;_Out2&gt;
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_out_result&lt;_Iter2,&#32;_Out2&gt;()&#32;const&#32;&amp;
172 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;out};&#32;}
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out2&gt;
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;_Iter,&#32;_Iter2&gt;
176 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Out,&#32;_Out2&gt;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_out_result&lt;_Iter2,&#32;_Out2&gt;()&#32;&amp;&amp;
179 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(out)};&#32;}
180 &#32;&#32;&#32;&#32;};
181 
182 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>copy_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
184 
185 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
186 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>move_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
187 
188 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
189 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>move_backward_result&#32;=&#32;in_out_result&lt;_Iter1,&#32;_Iter2&gt;;
190 
191 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>copy_backward_result&#32;=&#32;in_out_result&lt;_Iter1,&#32;_Iter2&gt;;
193 
194 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator&#32;_Out&gt;
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_IsMove
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;indirectly_movable&lt;_Iter,&#32;_Out&gt;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;)
200 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__conditional_t&lt;_IsMove,
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_backward_result&lt;_Iter,&#32;_Out&gt;,
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_backward_result&lt;_Iter,&#32;_Out&gt;&gt;
203 &#32;&#32;&#32;&#32;__copy_or_move_backward(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result);
204 
205 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out&gt;
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_IsMove
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;indirectly_movable&lt;_Iter,&#32;_Out&gt;
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;)
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__conditional_t&lt;_IsMove,
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_result&lt;_Iter,&#32;_Out&gt;,
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_result&lt;_Iter,&#32;_Out&gt;&gt;
214 &#32;&#32;&#32;&#32;__copy_or_move(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result)
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;implement&#32;more&#32;specializations&#32;to&#32;be&#32;at&#32;least&#32;on&#32;par&#32;with</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::copy/std::move.</emphasis>
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__detail::__is_move_iterator;
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__detail::__is_reverse_iterator;
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__detail::__is_normal_iterator;
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_move_iterator&lt;_Iter&gt;&#32;&amp;&amp;&#32;same_as&lt;_Iter,&#32;_Sent&gt;)
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[__in,&#32;__out]
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__copy_or_move&lt;true&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first).base(),
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last).base(),
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{move_iterator{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__in)},&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out)};
228 &#32;&#32;&#32;&#32;}
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_reverse_iterator&lt;_Iter&gt;&#32;&amp;&amp;&#32;same_as&lt;_Iter,&#32;_Sent&gt;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_reverse_iterator&lt;_Out&gt;)
231 &#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[__in,__out]
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__copy_or_move_backward&lt;_IsMove&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last).base(),
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first).base(),
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result).base());
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{reverse_iterator{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__in)},
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out)}};
238 &#32;&#32;&#32;&#32;}
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_normal_iterator&lt;_Iter&gt;&#32;&amp;&amp;&#32;same_as&lt;_Iter,&#32;_Sent&gt;)
240 &#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[__in,__out]
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__copy_or_move&lt;_IsMove&gt;(__first.base(),&#32;__last.base(),
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result);
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">decltype</emphasis>(__first){__in},&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out)};
245 &#32;&#32;&#32;&#32;}
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_normal_iterator&lt;_Out&gt;)
247 &#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[__in,__out]
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__copy_or_move&lt;_IsMove&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;__last,&#32;__result.base());
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__in),&#32;<emphasis role="keyword">decltype</emphasis>(__result){__out}};
251 &#32;&#32;&#32;&#32;}
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(sized_sentinel_for&lt;_Sent,&#32;_Iter&gt;)
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__is_constant_evaluated())
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__memcpyable&lt;_Iter,&#32;_Out&gt;::__value)
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValueTypeI&#32;=&#32;iter_value_t&lt;_Iter&gt;;
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_IsMove
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;is_move_assignable_v&lt;_ValueTypeI&gt;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;is_copy_assignable_v&lt;_ValueTypeI&gt;);
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__num&#32;=&#32;__last&#32;-&#32;__first;
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num)
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memmove(__result,&#32;__first,
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueTypeI)&#32;*&#32;__num);
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first&#32;+&#32;__num,&#32;__result&#32;+&#32;__num};
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last&#32;-&#32;__first;&#32;__n&#32;&gt;&#32;0;&#32;--__n)
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_IsMove)
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
280 &#32;&#32;&#32;&#32;}
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
282 &#32;&#32;&#32;&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_IsMove)
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
293 &#32;&#32;&#32;&#32;}
294 &#32;&#32;&#32;&#32;}
295 
296 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_fn
297 &#32;&#32;{
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out&gt;
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_result&lt;_Iter,&#32;_Out&gt;
302 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
303 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::__copy_or_move&lt;false&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
307 &#32;&#32;&#32;&#32;&#32;&#32;}
308 
309 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out&gt;
310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
312 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
313 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
316 &#32;&#32;&#32;&#32;&#32;&#32;}
317 &#32;&#32;};
318 
319 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__copy_fn&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>{};
320 
321 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_fn
322 &#32;&#32;{
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out&gt;
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_movable&lt;_Iter,&#32;_Out&gt;
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;move_result&lt;_Iter,&#32;_Out&gt;
327 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
328 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::__copy_or_move&lt;true&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
332 &#32;&#32;&#32;&#32;&#32;&#32;}
333 
334 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out&gt;
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_movable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;move_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
337 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
338 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
341 &#32;&#32;&#32;&#32;&#32;&#32;}
342 &#32;&#32;};
343 
344 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__move_fn&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>{};
345 
346 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator&#32;_Out&gt;
349 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_IsMove
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;indirectly_movable&lt;_Iter,&#32;_Out&gt;
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;)
352 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__conditional_t&lt;_IsMove,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;move_backward_result&lt;_Iter,&#32;_Out&gt;,
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_backward_result&lt;_Iter,&#32;_Out&gt;&gt;
355 &#32;&#32;&#32;&#32;__copy_or_move_backward(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result)
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;implement&#32;more&#32;specializations&#32;to&#32;be&#32;at&#32;least&#32;on&#32;par&#32;with</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::copy_backward/std::move_backward.</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__detail::__is_reverse_iterator;
360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__detail::__is_normal_iterator;
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_reverse_iterator&lt;_Iter&gt;&#32;&amp;&amp;&#32;same_as&lt;_Iter,&#32;_Sent&gt;
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_reverse_iterator&lt;_Out&gt;)
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[__in,__out]
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__copy_or_move&lt;_IsMove&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last).base(),
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first).base(),
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result).base());
368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{reverse_iterator{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__in)},
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out)}};
370 &#32;&#32;&#32;&#32;}
371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_normal_iterator&lt;_Iter&gt;&#32;&amp;&amp;&#32;same_as&lt;_Iter,&#32;_Sent&gt;)
372 &#32;&#32;&#32;&#32;{
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[__in,__out]
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__copy_or_move_backward&lt;_IsMove&gt;(__first.base(),
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last.base(),
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<emphasis role="keyword">decltype</emphasis>(__first){__in},&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out)};
378 &#32;&#32;&#32;&#32;}
379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_normal_iterator&lt;_Out&gt;)
380 &#32;&#32;&#32;&#32;{
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[__in,__out]
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__copy_or_move_backward&lt;_IsMove&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.base());
385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__in),&#32;<emphasis role="keyword">decltype</emphasis>(__result){__out}};
386 &#32;&#32;&#32;&#32;}
387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(sized_sentinel_for&lt;_Sent,&#32;_Iter&gt;)
388 &#32;&#32;&#32;&#32;{
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__is_constant_evaluated())
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__memcpyable&lt;_Out,&#32;_Iter&gt;::__value)
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValueTypeI&#32;=&#32;iter_value_t&lt;_Iter&gt;;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_IsMove
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;is_move_assignable_v&lt;_ValueTypeI&gt;
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;is_copy_assignable_v&lt;_ValueTypeI&gt;);
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__num&#32;=&#32;__last&#32;-&#32;__first;
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num)
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memmove(__result&#32;-&#32;__num,&#32;__first,
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueTypeI)&#32;*&#32;__num);
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first&#32;+&#32;__num,&#32;__result&#32;-&#32;__num};
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
404 
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__tail&#32;=&#32;__lasti;
407 
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last&#32;-&#32;__first;&#32;__n&#32;&gt;&#32;0;&#32;--__n)
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__tail;
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__result;
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_IsMove)
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__tail);
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__tail;
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
418 &#32;&#32;&#32;&#32;}
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
420 &#32;&#32;&#32;&#32;{
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__tail&#32;=&#32;__lasti;
423 
424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__tail)
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__tail;
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__result;
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_IsMove)
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__tail);
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__tail;
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
434 &#32;&#32;&#32;&#32;}
435 &#32;&#32;&#32;&#32;}
436 
437 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_backward_fn
438 &#32;&#32;{
439 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter2&gt;
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter1,&#32;_Iter2&gt;
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_backward_result&lt;_Iter1,&#32;_Iter2&gt;
443 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first,&#32;_Sent1&#32;__last,&#32;_Iter2&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
444 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::__copy_or_move_backward&lt;false&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
448 &#32;&#32;&#32;&#32;&#32;&#32;}
449 
450 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_range&#32;_Range,&#32;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter&gt;
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Iter&gt;
452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_backward_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Iter&gt;
453 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Iter&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
454 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
457 &#32;&#32;&#32;&#32;&#32;&#32;}
458 &#32;&#32;};
459 
460 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__copy_backward_fn&#32;copy_backward{};
461 
462 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_backward_fn
463 &#32;&#32;{
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter2&gt;
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_movable&lt;_Iter1,&#32;_Iter2&gt;
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;move_backward_result&lt;_Iter1,&#32;_Iter2&gt;
468 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first,&#32;_Sent1&#32;__last,&#32;_Iter2&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
469 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::__copy_or_move_backward&lt;true&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
473 &#32;&#32;&#32;&#32;&#32;&#32;}
474 
475 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_range&#32;_Range,&#32;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter&gt;
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_movable&lt;iterator_t&lt;_Range&gt;,&#32;_Iter&gt;
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;move_backward_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Iter&gt;
478 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Iter&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
479 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
482 &#32;&#32;&#32;&#32;&#32;&#32;}
483 &#32;&#32;};
484 
485 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__move_backward_fn&#32;move_backward{};
486 
487 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>copy_n_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
489 
490 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_n_fn
491 &#32;&#32;{
492 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;weakly_incrementable&#32;_Out&gt;
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_n_result&lt;_Iter,&#32;_Out&gt;
495 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;iter_difference_t&lt;_Iter&gt;&#32;__n,
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
497 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(random_access_iterator&lt;_Iter&gt;)
499 &#32;&#32;&#32;&#32;&#32;&#32;{
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;0)
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::copy(__first,&#32;__first&#32;+&#32;__n,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
502 &#32;&#32;&#32;&#32;&#32;&#32;}
503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
504 &#32;&#32;&#32;&#32;&#32;&#32;{
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__result,&#32;(<emphasis role="keywordtype">void</emphasis>)++__first)
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
507 &#32;&#32;&#32;&#32;&#32;&#32;}
508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
509 &#32;&#32;&#32;&#32;&#32;&#32;}
510 &#32;&#32;};
511 
512 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__copy_n_fn&#32;<link linkend="_namespacestd_1ad65e2656aa6e6ce70150b2dfa9669cde">copy_n</link>{};
513 
514 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fill_n_fn
515 &#32;&#32;{
516 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;output_iterator&lt;const&#32;_Tp&amp;&gt;&#32;_Out&gt;
517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Out
518 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Out&#32;__first,&#32;iter_difference_t&lt;_Out&gt;&#32;__n,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)<emphasis role="keyword">&#32;const</emphasis>
520 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
521 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;implement&#32;more&#32;specializations&#32;to&#32;be&#32;at&#32;least&#32;on&#32;par&#32;with</emphasis>
522 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::fill_n</emphasis>
523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;0)
524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
525 
526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_scalar_v&lt;_Tp&gt;)
527 &#32;&#32;&#32;&#32;&#32;&#32;{
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Generalize&#32;this&#32;optimization&#32;to&#32;contiguous&#32;iterators.</emphasis>
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_pointer_v&lt;_Out&gt;
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;__is_byte&#32;already&#32;implies&#32;!is_volatile.</emphasis>
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_byte&lt;remove_pointer_t&lt;_Out&gt;&gt;::__value
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;integral&lt;_Tp&gt;)
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__is_constant_evaluated())
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memset(__first,
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(__value),
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n);
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__n;
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
542 
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__value;
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first)
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
547 &#32;&#32;&#32;&#32;&#32;&#32;}
548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;{
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first)
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;__value;
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
553 &#32;&#32;&#32;&#32;&#32;&#32;}
554 &#32;&#32;&#32;&#32;&#32;&#32;}
555 &#32;&#32;};
556 
557 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__fill_n_fn&#32;<link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">fill_n</link>{};
558 
559 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fill_fn
560 &#32;&#32;{
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_iterator&lt;const&#32;_Tp&amp;&gt;&#32;_Out,&#32;sentinel_for&lt;_Out&gt;&#32;_Sent&gt;
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Out
564 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Out&#32;__first,&#32;_Sent&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)<emphasis role="keyword">&#32;const</emphasis>
565 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
566 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;implement&#32;more&#32;specializations&#32;to&#32;be&#32;at&#32;least&#32;on&#32;par&#32;with</emphasis>
567 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::fill</emphasis>
568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(sized_sentinel_for&lt;_Sent,&#32;_Out&gt;)
569 &#32;&#32;&#32;&#32;&#32;&#32;{
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;__last&#32;-&#32;__first;
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::fill_n(__first,&#32;__len,&#32;__value);
572 &#32;&#32;&#32;&#32;&#32;&#32;}
573 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_scalar_v&lt;_Tp&gt;)
574 &#32;&#32;&#32;&#32;&#32;&#32;{
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__value;
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
579 &#32;&#32;&#32;&#32;&#32;&#32;}
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
581 &#32;&#32;&#32;&#32;&#32;&#32;{
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;__value;
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
585 &#32;&#32;&#32;&#32;&#32;&#32;}
586 &#32;&#32;&#32;&#32;&#32;&#32;}
587 
588 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;output_range&lt;const&#32;_Tp&amp;&gt;&#32;_Range&gt;
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
590 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)<emphasis role="keyword">&#32;const</emphasis>
591 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),&#32;__value);
593 &#32;&#32;&#32;&#32;&#32;&#32;}
594 &#32;&#32;};
595 
596 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__fill_fn&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">fill</link>{};
597 }
598 _GLIBCXX_END_NAMESPACE_VERSION
599 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
600 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;concepts</emphasis>
601 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
602 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_RANGES_ALGOBASE_H</emphasis>
</programlisting></section>
