<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2split__fn__imps_8hpp_source" xml:lang="en-US">
<title>split_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keywordtype">void</emphasis>
45 PB_DS_CLASS_C_DEC::
46 split(key_const_reference&#32;r_key,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
50 &#32;&#32;branch_bag&#32;bag;
51 &#32;&#32;leaf_pointer&#32;p_split_lf&#32;=&#32;split_prep(r_key,&#32;other,&#32;bag);
52 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_split_lf&#32;==&#32;0)
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(bag.empty());
55 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
56 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
57 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
58 &#32;&#32;&#32;&#32;}
59 
60 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(!bag.empty());
61 &#32;&#32;other.clear();
62 
63 &#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;rec_split(m_p_head-&gt;m_p_parent,&#32;pref_begin(p_split_lf),
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(p_split_lf),&#32;other,&#32;bag);
65 
66 &#32;&#32;m_p_head-&gt;m_p_parent-&gt;m_p_parent&#32;=&#32;m_p_head;
67 
68 &#32;&#32;head_pointer&#32;__ohead&#32;=&#32;other.m_p_head;
69 &#32;&#32;__ohead-&gt;m_p_max&#32;=&#32;m_p_head-&gt;m_p_max;
70 &#32;&#32;m_p_head-&gt;m_p_max&#32;=&#32;rightmost_descendant(m_p_head-&gt;m_p_parent);
71 &#32;&#32;__ohead-&gt;m_p_min&#32;=&#32;other.leftmost_descendant(__ohead-&gt;m_p_parent);
72 
73 &#32;&#32;other.m_size&#32;=&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacedistance">distance</link>(other.<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::begin(),
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
75 &#32;&#32;m_size&#32;-=&#32;other.m_size;
76 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
77 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
78 }
79 
80 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
81 typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::leaf_pointer
82 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
83 split_prep(key_const_reference&#32;r_key,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
85 {
86 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(r_bag.empty());
87 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_size&#32;==&#32;0)
88 &#32;&#32;&#32;&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;other.clear();
90 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
91 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
92 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;0;
93 &#32;&#32;&#32;&#32;}
94 
95 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(synth_access_traits::cmp_keys(r_key,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(static_cast&lt;leaf_const_pointer&gt;(m_p_head-&gt;m_p_min)-&gt;<link linkend="_classvalue">value</link>())))
97 &#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;other.clear();
99 &#32;&#32;&#32;&#32;&#32;&#32;value_swap(other);
100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
101 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;0;
103 &#32;&#32;&#32;&#32;}
104 
105 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!synth_access_traits::cmp_keys(r_key,
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(static_cast&lt;leaf_const_pointer&gt;(m_p_head-&gt;m_p_max)-&gt;<link linkend="_classvalue">value</link>())))
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
109 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
110 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;0;
111 &#32;&#32;&#32;&#32;}
112 
113 &#32;&#32;iterator&#32;it&#32;=&#32;lower_bound(r_key);
114 
115 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!synth_access_traits::equal_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*it),&#32;r_key))
116 &#32;&#32;&#32;&#32;--it;
117 
118 &#32;&#32;node_pointer&#32;p_nd&#32;=&#32;it.m_p_nd;
119 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;leaf_node);
120 &#32;&#32;leaf_pointer&#32;p_ret_l&#32;=&#32;static_cast&lt;leaf_pointer&gt;(p_nd);
121 &#32;&#32;while&#32;(p_nd-&gt;m_type&#32;!=&#32;head_node)
122 &#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;r_bag.add_branch();
124 &#32;&#32;&#32;&#32;&#32;&#32;p_nd&#32;=&#32;p_nd-&gt;m_p_parent;
125 &#32;&#32;&#32;&#32;}
126 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::split(r_key,(synth_access_traits&amp;)(*<emphasis role="keyword">this</emphasis>),&#32;other);)
127 
128 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret_l;
129 }
130 
131 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
132 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
133 PB_DS_CLASS_C_DEC::
134 rec_split(node_pointer&#32;p_nd,&#32;a_const_iterator&#32;b_it,&#32;a_const_iterator&#32;e_it,
135 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other,&#32;branch_bag&amp;&#32;r_bag)
136 {
137 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_type&#32;==&#32;leaf_node)
138 &#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(other.m_p_head-&gt;m_p_parent&#32;==&#32;0);
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_nd;
141 &#32;&#32;&#32;&#32;}
142 
143 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_nd-&gt;m_type&#32;==&#32;i_node);
144 &#32;&#32;inode_pointer&#32;p_ind&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_nd);
145 
146 &#32;&#32;node_pointer&#32;pfirst&#32;=&#32;p_ind-&gt;get_child_node(b_it,&#32;e_it,&#32;<emphasis role="keyword">this</emphasis>);
147 &#32;&#32;node_pointer&#32;p_child_ret&#32;=&#32;rec_split(pfirst,&#32;b_it,&#32;e_it,&#32;other,&#32;r_bag);
148 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_child_ret)
149 &#32;&#32;p_ind-&gt;replace_child(p_child_ret,&#32;b_it,&#32;e_it,&#32;<emphasis role="keyword">this</emphasis>);
150 &#32;&#32;apply_update(p_ind,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
151 
152 &#32;&#32;inode_iterator&#32;child_it&#32;=&#32;p_ind-&gt;get_child_it(b_it,&#32;e_it,&#32;<emphasis role="keyword">this</emphasis>);
153 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;lhs_dist&#32;=&#32;std::distance(p_ind-&gt;begin(),&#32;child_it);
154 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;lhs_num_children&#32;=&#32;lhs_dist&#32;+&#32;1;
155 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(lhs_num_children&#32;&gt;&#32;0);
156 
157 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;rhs_dist&#32;=&#32;&#32;std::distance(p_ind-&gt;begin(),&#32;p_ind-&gt;end());
158 &#32;&#32;size_type&#32;rhs_num_children&#32;=&#32;rhs_dist&#32;-&#32;lhs_num_children;
159 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rhs_num_children&#32;==&#32;0)
160 &#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_ind,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ind;
163 &#32;&#32;&#32;&#32;}
164 
165 &#32;&#32;other.split_insert_branch(p_ind-&gt;get_e_ind(),&#32;b_it,&#32;child_it,
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs_num_children,&#32;r_bag);
167 
168 &#32;&#32;child_it&#32;=&#32;p_ind-&gt;get_child_it(b_it,&#32;e_it,&#32;<emphasis role="keyword">this</emphasis>);
169 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(rhs_num_children&#32;!=&#32;0)
170 &#32;&#32;&#32;&#32;{
171 &#32;&#32;&#32;&#32;&#32;&#32;++child_it;
172 &#32;&#32;&#32;&#32;&#32;&#32;p_ind-&gt;remove_child(child_it);
173 &#32;&#32;&#32;&#32;&#32;&#32;--rhs_num_children;
174 &#32;&#32;&#32;&#32;}
175 &#32;&#32;apply_update(p_ind,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
176 
177 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;int_dist&#32;=&#32;std::distance(p_ind-&gt;begin(),&#32;p_ind-&gt;end());
178 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(int_dist&#32;&gt;=&#32;1);
179 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(int_dist&#32;&gt;&#32;1)
180 &#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;p_ind-&gt;update_prefixes(<emphasis role="keyword">this</emphasis>);
182 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_ind)
183 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_ind,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ind;
185 &#32;&#32;&#32;&#32;}
186 
187 &#32;&#32;node_pointer&#32;p_ret&#32;=&#32;*p_ind-&gt;begin();
188 &#32;&#32;p_ind-&gt;~inode();
189 &#32;&#32;s_inode_allocator.deallocate(p_ind,&#32;1);
190 &#32;&#32;apply_update(p_ret,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
191 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
192 }
193 
194 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
195 <emphasis role="keywordtype">void</emphasis>
196 PB_DS_CLASS_C_DEC::
197 split_insert_branch(size_type&#32;e_ind,&#32;a_const_iterator&#32;b_it,
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inode_iterator&#32;child_b_it,
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;num_children,&#32;branch_bag&amp;&#32;r_bag)
200 {
201 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
202 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;!=&#32;0)
203 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(m_p_head-&gt;m_p_parent)
204 <emphasis role="preprocessor">#endif</emphasis>
205 
206 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;=&#32;m_p_head-&gt;m_p_parent&#32;==&#32;0&#32;?&#32;0&#32;:&#32;1;
207 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;total_num_children&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;+&#32;num_children;
208 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(total_num_children&#32;==&#32;0)
209 &#32;&#32;&#32;&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_p_head-&gt;m_p_parent&#32;==&#32;0);
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
212 &#32;&#32;&#32;&#32;}
213 
214 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(total_num_children&#32;==&#32;1)
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;!=&#32;0)
217 &#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(m_p_head-&gt;m_p_parent)
219 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
220 &#32;&#32;&#32;&#32;}
221 
222 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(m_p_head-&gt;m_p_parent&#32;==&#32;0);
223 &#32;&#32;&#32;&#32;&#32;&#32;++child_b_it;
224 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;*child_b_it;
225 &#32;&#32;&#32;&#32;&#32;&#32;m_p_head-&gt;m_p_parent-&gt;m_p_parent&#32;=&#32;m_p_head;
226 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(m_p_head-&gt;m_p_parent,&#32;(node_update*)this);
227 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(m_p_head-&gt;m_p_parent)
228 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
229 &#32;&#32;&#32;&#32;}
230 
231 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(total_num_children&#32;&gt;&#32;1);
232 &#32;&#32;inode_pointer&#32;p_new_root&#32;=&#32;r_bag.get_branch();
233 &#32;&#32;new&#32;(p_new_root)&#32;inode(e_ind,&#32;b_it);
234 &#32;&#32;size_type&#32;num_inserted&#32;=&#32;0;
235 &#32;&#32;while&#32;(num_inserted++&#32;&lt;&#32;num_children)
236 &#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;++child_b_it;
238 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>((*child_b_it))
239 &#32;&#32;&#32;&#32;&#32;&#32;p_new_root-&gt;add_child(*child_b_it,&#32;pref_begin(*child_b_it),
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(*child_b_it),&#32;<emphasis role="keyword">this</emphasis>);
241 &#32;&#32;&#32;&#32;}
242 
243 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;!=&#32;0)
244 &#32;&#32;&#32;&#32;p_new_root-&gt;add_child(m_p_head-&gt;m_p_parent,
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_begin(m_p_head-&gt;m_p_parent),
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(m_p_head-&gt;m_p_parent),&#32;<emphasis role="keyword">this</emphasis>);
247 
248 &#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;p_new_root;
249 &#32;&#32;p_new_root-&gt;m_p_parent&#32;=&#32;m_p_head;
250 &#32;&#32;apply_update(m_p_head-&gt;m_p_parent,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
251 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(m_p_head-&gt;m_p_parent)
252 }
253 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
