<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2raylib_2src_2rnet_8h_source" xml:lang="en-US">
<title>rnet.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/raylib/src/rnet.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/**********************************************************************************************</emphasis>
2 <emphasis role="comment">*</emphasis>
3 <emphasis role="comment">*&#32;&#32;&#32;rnet&#32;-&#32;A&#32;simple&#32;and&#32;easy-to-use&#32;network&#32;module&#32;for&#32;raylib</emphasis>
4 <emphasis role="comment">*</emphasis>
5 <emphasis role="comment">*&#32;&#32;&#32;FEATURES:</emphasis>
6 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;Provides&#32;a&#32;simple&#32;and&#32;(hopefully)&#32;easy&#32;to&#32;use&#32;wrapper&#32;around&#32;the&#32;Berkeley&#32;socket&#32;API</emphasis>
7 <emphasis role="comment">*</emphasis>
8 <emphasis role="comment">*&#32;&#32;&#32;INSPIRED&#32;BY:</emphasis>
9 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;SFML&#32;Sockets&#32;-&#32;https://www.sfml-dev.org/documentation/2.5.1/classsf_1_1Socket.php</emphasis>
10 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;SDL_net&#32;-&#32;https://www.libsdl.org/projects/SDL_net/</emphasis>
11 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;BSD&#32;Sockets&#32;-&#32;https://www.gnu.org/software/libc/manual/html_node/Sockets.html</emphasis>
12 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;BEEJ&#32;-&#32;https://beej.us/guide/bgnet/html/single/bgnet.html</emphasis>
13 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Winsock2&#32;-&#32;https://docs.microsoft.com/en-us/windows/desktop/api/winsock2</emphasis>
14 <emphasis role="comment">*</emphasis>
15 <emphasis role="comment">*&#32;&#32;&#32;CONTRIBUTORS:</emphasis>
16 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Jak&#32;Barnes&#32;(github:&#32;@syphonx)&#32;(Feb.&#32;2019)&#32;-&#32;Initial&#32;version</emphasis>
17 <emphasis role="comment">*</emphasis>
18 <emphasis role="comment">*</emphasis>
19 <emphasis role="comment">*&#32;&#32;&#32;LICENSE:&#32;zlib/libpng</emphasis>
20 <emphasis role="comment">*</emphasis>
21 <emphasis role="comment">*&#32;&#32;&#32;Copyright&#32;(c)&#32;2019-2020&#32;Jak&#32;Barnes&#32;(@syphonx)&#32;and&#32;Ramon&#32;Santamaria&#32;(@raysan5)</emphasis>
22 <emphasis role="comment">*</emphasis>
23 <emphasis role="comment">*&#32;&#32;&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as-is&quot;,&#32;without&#32;any&#32;express&#32;or&#32;implied&#32;warranty.&#32;In&#32;no&#32;event</emphasis>
24 <emphasis role="comment">*&#32;&#32;&#32;will&#32;the&#32;authors&#32;be&#32;held&#32;liable&#32;for&#32;any&#32;damages&#32;arising&#32;from&#32;the&#32;use&#32;of&#32;this&#32;software.</emphasis>
25 <emphasis role="comment">*</emphasis>
26 <emphasis role="comment">*&#32;&#32;&#32;Permission&#32;is&#32;granted&#32;to&#32;anyone&#32;to&#32;use&#32;this&#32;software&#32;for&#32;any&#32;purpose,&#32;including&#32;commercial</emphasis>
27 <emphasis role="comment">*&#32;&#32;&#32;applications,&#32;and&#32;to&#32;alter&#32;it&#32;and&#32;redistribute&#32;it&#32;freely,&#32;subject&#32;to&#32;the&#32;following&#32;restrictions:</emphasis>
28 <emphasis role="comment">*</emphasis>
29 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;1.&#32;The&#32;origin&#32;of&#32;this&#32;software&#32;must&#32;not&#32;be&#32;misrepresented;&#32;you&#32;must&#32;not&#32;claim&#32;that&#32;you</emphasis>
30 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;wrote&#32;the&#32;original&#32;software.&#32;If&#32;you&#32;use&#32;this&#32;software&#32;in&#32;a&#32;product,&#32;an&#32;acknowledgment</emphasis>
31 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;in&#32;the&#32;product&#32;documentation&#32;would&#32;be&#32;appreciated&#32;but&#32;is&#32;not&#32;required.</emphasis>
32 <emphasis role="comment">*</emphasis>
33 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;2.&#32;Altered&#32;source&#32;versions&#32;must&#32;be&#32;plainly&#32;marked&#32;as&#32;such,&#32;and&#32;must&#32;not&#32;be&#32;misrepresented</emphasis>
34 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;as&#32;being&#32;the&#32;original&#32;software.</emphasis>
35 <emphasis role="comment">*</emphasis>
36 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;3.&#32;This&#32;notice&#32;may&#32;not&#32;be&#32;removed&#32;or&#32;altered&#32;from&#32;any&#32;source&#32;distribution.</emphasis>
37 <emphasis role="comment">*</emphasis>
38 <emphasis role="comment">**********************************************************************************************/</emphasis>
39 
40 <emphasis role="preprocessor">#ifndef&#32;RNET_H</emphasis>
41 <emphasis role="preprocessor">#define&#32;RNET_H</emphasis>
42 
43 <emphasis role="preprocessor">#include&#32;&lt;limits.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for&#32;limits</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;inttypes.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for&#32;platform&#32;type&#32;sizes</emphasis>
45 
46 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
47 <emphasis role="comment">//&#32;Defines&#32;and&#32;Macros</emphasis>
48 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
49 
50 <emphasis role="comment">//&#32;Undefine&#32;any&#32;conflicting&#32;windows.h&#32;symbols</emphasis>
51 <emphasis role="comment">//&#32;If&#32;defined,&#32;the&#32;following&#32;flags&#32;inhibit&#32;definition&#32;of&#32;the&#32;indicated&#32;items.</emphasis>
52 <emphasis role="preprocessor">#define&#32;NOGDICAPMASKS&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;CC_*,&#32;LC_*,&#32;PC_*,&#32;CP_*,&#32;TC_*,&#32;RC_</emphasis>
53 <emphasis role="preprocessor">#define&#32;NOVIRTUALKEYCODES&#32;</emphasis><emphasis role="comment">//&#32;VK_*</emphasis>
54 <emphasis role="preprocessor">#define&#32;NOWINMESSAGES&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;WM_*,&#32;EM_*,&#32;LB_*,&#32;CB_*</emphasis>
55 <emphasis role="preprocessor">#define&#32;NOWINSTYLES&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;WS_*,&#32;CS_*,&#32;ES_*,&#32;LBS_*,&#32;SBS_*,&#32;CBS_*</emphasis>
56 <emphasis role="preprocessor">#define&#32;NOSYSMETRICS&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;SM_*</emphasis>
57 <emphasis role="preprocessor">#define&#32;NOMENUS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;MF_*</emphasis>
58 <emphasis role="preprocessor">#define&#32;NOICONS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;IDI_*</emphasis>
59 <emphasis role="preprocessor">#define&#32;NOKEYSTATES&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;MK_*</emphasis>
60 <emphasis role="preprocessor">#define&#32;NOSYSCOMMANDS&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;SC_*</emphasis>
61 <emphasis role="preprocessor">#define&#32;NORASTEROPS&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Binary&#32;and&#32;Tertiary&#32;raster&#32;ops</emphasis>
62 <emphasis role="preprocessor">#define&#32;NOSHOWWINDOW&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;SW_*</emphasis>
63 <emphasis role="preprocessor">#define&#32;OEMRESOURCE&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;OEM&#32;Resource&#32;values</emphasis>
64 <emphasis role="preprocessor">#define&#32;NOATOM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Atom&#32;Manager&#32;routines</emphasis>
65 <emphasis role="preprocessor">#define&#32;NOCLIPBOARD&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Clipboard&#32;routines</emphasis>
66 <emphasis role="preprocessor">#define&#32;NOCOLOR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Screen&#32;colors</emphasis>
67 <emphasis role="preprocessor">#define&#32;NOCTLMGR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Control&#32;and&#32;Dialog&#32;routines</emphasis>
68 <emphasis role="preprocessor">#define&#32;NODRAWTEXT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;DrawText()&#32;and&#32;DT_*</emphasis>
69 <emphasis role="preprocessor">#define&#32;NOGDI&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;All&#32;GDI&#32;defines&#32;and&#32;routines</emphasis>
70 <emphasis role="preprocessor">#define&#32;NOKERNEL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;All&#32;KERNEL&#32;defines&#32;and&#32;routines</emphasis>
71 <emphasis role="preprocessor">#define&#32;NOUSER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;All&#32;USER&#32;defines&#32;and&#32;routines</emphasis>
72 <emphasis role="preprocessor">#define&#32;NONLS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;All&#32;NLS&#32;defines&#32;and&#32;routines</emphasis>
73 <emphasis role="preprocessor">#define&#32;NOMB&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;MB_*&#32;and&#32;MessageBox()</emphasis>
74 <emphasis role="preprocessor">#define&#32;NOMEMMGR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;GMEM_*,&#32;LMEM_*,&#32;GHND,&#32;LHND,&#32;associated&#32;routines</emphasis>
75 <emphasis role="preprocessor">#define&#32;NOMETAFILE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;typedef&#32;METAFILEPICT</emphasis>
76 <emphasis role="preprocessor">#define&#32;NOMINMAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Macros&#32;min(a,b)&#32;and&#32;max(a,b)</emphasis>
77 <emphasis role="preprocessor">#define&#32;NOMSG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;typedef&#32;MSG&#32;and&#32;associated&#32;routines</emphasis>
78 <emphasis role="preprocessor">#define&#32;NOOPENFILE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;OpenFile(),&#32;OemToAnsi,&#32;AnsiToOem,&#32;and&#32;OF_*</emphasis>
79 <emphasis role="preprocessor">#define&#32;NOSCROLL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;SB_*&#32;and&#32;scrolling&#32;routines</emphasis>
80 <emphasis role="preprocessor">#define&#32;NOSERVICE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;All&#32;Service&#32;Controller&#32;routines,&#32;SERVICE_&#32;equates,&#32;etc.</emphasis>
81 <emphasis role="preprocessor">#define&#32;NOSOUND&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Sound&#32;driver&#32;routines</emphasis>
82 <emphasis role="preprocessor">#define&#32;NOTEXTMETRIC&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;typedef&#32;TEXTMETRIC&#32;and&#32;associated&#32;routines</emphasis>
83 <emphasis role="preprocessor">#define&#32;NOWH&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;SetWindowsHook&#32;and&#32;WH_*</emphasis>
84 <emphasis role="preprocessor">#define&#32;NOWINOFFSETS&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;GWL_*,&#32;GCL_*,&#32;associated&#32;routines</emphasis>
85 <emphasis role="preprocessor">#define&#32;NOCOMM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;COMM&#32;driver&#32;routines</emphasis>
86 <emphasis role="preprocessor">#define&#32;NOKANJI&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Kanji&#32;support&#32;stuff.</emphasis>
87 <emphasis role="preprocessor">#define&#32;NOHELP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Help&#32;engine&#32;interface.</emphasis>
88 <emphasis role="preprocessor">#define&#32;NOPROFILER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Profiler&#32;interface.</emphasis>
89 <emphasis role="preprocessor">#define&#32;NODEFERWINDOWPOS&#32;&#32;</emphasis><emphasis role="comment">//&#32;DeferWindowPos&#32;routines</emphasis>
90 <emphasis role="preprocessor">#define&#32;NOMCX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Modem&#32;Configuration&#32;Extensions</emphasis>
91 <emphasis role="preprocessor">#define&#32;MMNOSOUND</emphasis>
92 
93 <emphasis role="comment">//&#32;Allow&#32;custom&#32;memory&#32;allocators</emphasis>
94 <emphasis role="preprocessor">#ifndef&#32;RNET_MALLOC</emphasis>
95 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;RNET_MALLOC(sz)&#32;&#32;&#32;&#32;&#32;&#32;&#32;malloc(sz)</emphasis>
96 <emphasis role="preprocessor">#endif</emphasis>
97 <emphasis role="preprocessor">#ifndef&#32;RNET_CALLOC</emphasis>
98 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;RNET_CALLOC(n,sz)&#32;&#32;&#32;&#32;&#32;calloc(n,sz)</emphasis>
99 <emphasis role="preprocessor">#endif</emphasis>
100 <emphasis role="preprocessor">#ifndef&#32;RNET_FREE</emphasis>
101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;RNET_FREE(p)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(p)</emphasis>
102 <emphasis role="preprocessor">#endif</emphasis>
103 
104 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
105 <emphasis role="comment">//&#32;Platform&#32;type&#32;definitions</emphasis>
106 <emphasis role="comment">//&#32;From:&#32;https://github.com/DFHack/clsocket/blob/master/src/Host.h</emphasis>
107 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
108 
109 <emphasis role="preprocessor">#ifdef&#32;WIN32</emphasis>
110 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;socklen_t;
111 <emphasis role="preprocessor">#endif</emphasis>
112 
113 <emphasis role="preprocessor">#ifndef&#32;RESULT_SUCCESS</emphasis>
114 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;RESULT_SUCCESS&#32;0</emphasis>
115 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RESULT_SUCCESS</emphasis>
116 
117 <emphasis role="preprocessor">#ifndef&#32;RESULT_FAILURE</emphasis>
118 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;define&#32;RESULT_FAILURE&#32;1</emphasis>
119 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RESULT_FAILURE</emphasis>
120 
121 <emphasis role="preprocessor">#ifndef&#32;htonll</emphasis>
122 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;ifdef&#32;_BIG_ENDIAN</emphasis>
123 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;htonll(x)&#32;(x)</emphasis>
124 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;ntohll(x)&#32;(x)</emphasis>
125 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;else</emphasis>
126 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;htonll(x)&#32;((((uint64)&#32;htonl(x))&#32;&lt;&lt;&#32;32)&#32;+&#32;htonl(x&#32;&gt;&gt;&#32;32))</emphasis>
127 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;define&#32;ntohll(x)&#32;((((uint64)&#32;ntohl(x))&#32;&lt;&lt;&#32;32)&#32;+&#32;ntohl(x&#32;&gt;&gt;&#32;32))</emphasis>
128 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;endif&#32;</emphasis><emphasis role="comment">//&#32;_BIG_ENDIAN</emphasis>
129 <emphasis role="preprocessor">#endif&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;htonll</emphasis>
130 
131 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
132 <emphasis role="comment">//&#32;Platform&#32;specific&#32;network&#32;includes</emphasis>
133 <emphasis role="comment">//&#32;From:&#32;https://github.com/SDL-mirror/SDL_net/blob/master/SDLnetsys.h</emphasis>
134 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
135 
136 <emphasis role="comment">//&#32;Include&#32;system&#32;network&#32;headers</emphasis>
137 <emphasis role="preprocessor">#if&#32;defined(_WIN32)&#32;</emphasis><emphasis role="comment">//&#32;Windows</emphasis>
138 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;__USE_W32_SOCKETS</emphasis>
139 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;WIN32_LEAN_AND_MEAN</emphasis>
140 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;winsock2.h&gt;</emphasis>
141 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;ws2tcpip.h&gt;</emphasis>
142 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;io.h&gt;</emphasis>
143 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;IPTOS_LOWDELAY&#32;0x10</emphasis>
144 <emphasis role="preprocessor">#else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Unix</emphasis>
145 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;sys/types.h&gt;</emphasis>
146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;fcntl.h&gt;</emphasis>
147 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;netinet/in.h&gt;</emphasis>
148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;sys/ioctl.h&gt;</emphasis>
149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;sys/time.h&gt;</emphasis>
150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;unistd.h&gt;</emphasis>
151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;net/if.h&gt;</emphasis>
152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;netdb.h&gt;</emphasis>
153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;netinet/tcp.h&gt;</emphasis>
154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;sys/socket.h&gt;</emphasis>
155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;arpa/inet.h&gt;</emphasis>
156 <emphasis role="preprocessor">#endif</emphasis>
157 
158 <emphasis role="preprocessor">#ifndef&#32;INVALID_SOCKET</emphasis>
159 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INVALID_SOCKET&#32;~(0)</emphasis>
160 <emphasis role="preprocessor">#endif</emphasis>
161 
162 <emphasis role="preprocessor">#ifndef&#32;__USE_W32_SOCKETS</emphasis>
163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;closesocket&#32;close</emphasis>
164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SOCKET&#32;int</emphasis>
165 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;INVALID_SOCKET&#32;-1</emphasis>
166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;SOCKET_ERROR&#32;-1</emphasis>
167 <emphasis role="preprocessor">#endif</emphasis>
168 
169 <emphasis role="preprocessor">#ifdef&#32;__USE_W32_SOCKETS</emphasis>
170 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifndef&#32;EINTR</emphasis>
171 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;EINTR&#32;WSAEINTR</emphasis>
172 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
173 <emphasis role="preprocessor">#endif</emphasis>
174 
175 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
176 <emphasis role="comment">//&#32;Module&#32;defines</emphasis>
177 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
178 
179 <emphasis role="comment">//&#32;Network&#32;connection&#32;related&#32;defines</emphasis>
180 <emphasis role="preprocessor">#define&#32;SOCKET_MAX_SET_SIZE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;32&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Maximum&#32;sockets&#32;in&#32;a&#32;set</emphasis>
181 <emphasis role="preprocessor">#define&#32;SOCKET_MAX_QUEUE_SIZE&#32;&#32;&#32;&#32;&#32;&#32;&#32;16&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Maximum&#32;socket&#32;queue&#32;size</emphasis>
182 <emphasis role="preprocessor">#define&#32;SOCKET_MAX_SOCK_OPTS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Maximum&#32;socket&#32;options</emphasis>
183 <emphasis role="preprocessor">#define&#32;SOCKET_MAX_UDPCHANNELS&#32;&#32;&#32;&#32;&#32;&#32;32&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Maximum&#32;UDP&#32;channels</emphasis>
184 <emphasis role="preprocessor">#define&#32;SOCKET_MAX_UDPADDRESSES&#32;&#32;&#32;&#32;&#32;4&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Maximum&#32;bound&#32;UDP&#32;addresses</emphasis>
185 
186 <emphasis role="comment">//&#32;Network&#32;address&#32;related&#32;defines</emphasis>
187 <emphasis role="preprocessor">#define&#32;ADDRESS_IPV4_ADDRSTRLEN&#32;&#32;&#32;&#32;&#32;22&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;IPv4&#32;string&#32;length</emphasis>
188 <emphasis role="preprocessor">#define&#32;ADDRESS_IPV6_ADDRSTRLEN&#32;&#32;&#32;&#32;&#32;65&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;IPv6&#32;string&#32;length</emphasis>
189 <emphasis role="preprocessor">#define&#32;ADDRESS_TYPE_ANY&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;AF_UNSPEC</emphasis>
190 <emphasis role="preprocessor">#define&#32;ADDRESS_TYPE_IPV4&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;AF_INET</emphasis>
191 <emphasis role="preprocessor">#define&#32;ADDRESS_TYPE_IPV6&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;23&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;AF_INET6</emphasis>
192 <emphasis role="preprocessor">#define&#32;ADDRESS_MAXHOST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1025&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Max&#32;size&#32;of&#32;a&#32;fully-qualified&#32;domain&#32;name</emphasis>
193 <emphasis role="preprocessor">#define&#32;ADDRESS_MAXSERV&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;32&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Max&#32;size&#32;of&#32;a&#32;service&#32;name</emphasis>
194 
195 <emphasis role="comment">//&#32;Network&#32;address&#32;related&#32;defines</emphasis>
196 <emphasis role="preprocessor">#define&#32;ADDRESS_ANY&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(unsigned&#32;long)0x00000000</emphasis>
197 <emphasis role="preprocessor">#define&#32;ADDRESS_LOOPBACK&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x7f000001</emphasis>
198 <emphasis role="preprocessor">#define&#32;ADDRESS_BROADCAST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(unsigned&#32;long)0xffffffff</emphasis>
199 <emphasis role="preprocessor">#define&#32;ADDRESS_NONE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0xffffffff</emphasis>
200 
201 <emphasis role="comment">//&#32;Network&#32;resolution&#32;related&#32;defines</emphasis>
202 <emphasis role="preprocessor">#define&#32;NAME_INFO_DEFAULT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x00&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;No&#32;flags&#32;set</emphasis>
203 <emphasis role="preprocessor">#define&#32;NAME_INFO_NOFQDN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x01&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Only&#32;return&#32;nodename&#32;portion&#32;for&#32;local&#32;hosts</emphasis>
204 <emphasis role="preprocessor">#define&#32;NAME_INFO_NUMERICHOST&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x02&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Return&#32;numeric&#32;form&#32;of&#32;the&#32;host&apos;s&#32;address</emphasis>
205 <emphasis role="preprocessor">#define&#32;NAME_INFO_NAMEREQD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x04&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Error&#32;if&#32;the&#32;host&apos;s&#32;name&#32;not&#32;in&#32;DNS</emphasis>
206 <emphasis role="preprocessor">#define&#32;NAME_INFO_NUMERICSERV&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x08&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Return&#32;numeric&#32;form&#32;of&#32;the&#32;service&#32;(port&#32;#)</emphasis>
207 <emphasis role="preprocessor">#define&#32;NAME_INFO_DGRAM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x10&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Service&#32;is&#32;a&#32;datagram&#32;service</emphasis>
208 
209 <emphasis role="comment">//&#32;Address&#32;resolution&#32;related&#32;defines</emphasis>
210 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
211 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_PASSIVE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000001)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Socket&#32;address&#32;will&#32;be&#32;used&#32;in&#32;bind()&#32;call</emphasis>
212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_CANONNAME&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000002)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Return&#32;canonical&#32;name&#32;in&#32;first&#32;ai_canonname</emphasis>
213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_NUMERICHOST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000004)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Nodename&#32;must&#32;be&#32;a&#32;numeric&#32;address&#32;string</emphasis>
214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_NUMERICSERV&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000008)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Servicename&#32;must&#32;be&#32;a&#32;numeric&#32;port&#32;number</emphasis>
215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_DNS_ONLY&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000010)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Restrict&#32;queries&#32;to&#32;unicast&#32;DNS&#32;only&#32;(no&#32;LLMNR,&#32;netbios,&#32;etc.)</emphasis>
216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_ALL&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000100)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Query&#32;both&#32;IP6&#32;and&#32;IP4&#32;with&#32;AI_V4MAPPED</emphasis>
217 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_ADDRCONFIG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000400)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Resolution&#32;only&#32;if&#32;global&#32;address&#32;configured</emphasis>
218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_V4MAPPED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00000800)&#32;&#32;</emphasis><emphasis role="comment">//&#32;On&#32;v6&#32;failure,&#32;query&#32;v4&#32;and&#32;convert&#32;to&#32;V4MAPPED&#32;format</emphasis>
219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_NON_AUTHORITATIVE&#32;&#32;&#32;&#32;&#32;&#32;(0x00004000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;LUP_NON_AUTHORITATIVE</emphasis>
220 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_SECURE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00008000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;LUP_SECURE</emphasis>
221 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_RETURN_PREFERRED_NAMES&#32;(0x00010000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;LUP_RETURN_PREFERRED_NAMES</emphasis>
222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_FQDN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00020000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Return&#32;the&#32;FQDN&#32;in&#32;ai_canonname</emphasis>
223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_FILESERVER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x00040000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Resolving&#32;fileserver&#32;name&#32;resolution</emphasis>
224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_DISABLE_IDN_ENCODING&#32;&#32;&#32;(0x00080000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Disable&#32;Internationalized&#32;Domain&#32;Names&#32;handling</emphasis>
225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_EXTENDED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x80000000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Indicates&#32;this&#32;is&#32;extended&#32;ADDRINFOEX(2/..)&#32;struct</emphasis>
226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ADDRESS_INFO_RESOLUTION_HANDLE&#32;&#32;&#32;&#32;&#32;&#32;(0x40000000)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Request&#32;resolution&#32;handle</emphasis>
227 <emphasis role="preprocessor">#endif</emphasis>
228 
229 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
230 <emphasis role="comment">//&#32;Types&#32;and&#32;Structures&#32;Definition</emphasis>
231 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
232 
233 <emphasis role="comment">//&#32;Boolean&#32;type</emphasis>
234 <emphasis role="preprocessor">#if&#32;defined(__STDC__)&#32;&amp;&amp;&#32;__STDC_VERSION__&#32;&gt;=&#32;199901L</emphasis>
235 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;stdbool.h&gt;</emphasis>
236 <emphasis role="preprocessor">#elif&#32;!defined(__cplusplus)&#32;&amp;&amp;&#32;!defined(bool)</emphasis>
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>&#32;}&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>;
238 <emphasis role="preprocessor">#endif</emphasis>
239 
240 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{
241 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a2843397fd39bd96681bca78a8aa03096">SOCKET_TCP</link>&#32;=&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SOCK_STREAM</emphasis>
242 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>&#32;=&#32;1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SOCK_DGRAM</emphasis>
243 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97">SocketType</link>;
244 
245 <emphasis role="comment">//&#32;Network&#32;typedefs</emphasis>
246 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5d8af9067194dce781973e2cac697d63">SocketChannel</link>;
247 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_AddressInformation&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>;
248 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddress&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad208bfd0dd46ff2d9168ff0e58733c46">SocketAddress</link>;
249 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv4&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0315342f59e125e44dd4bae552102466">SocketAddressIPv4</link>;
250 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv6&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad7a31420ceecb2fabc3b6bec5557a451">SocketAddressIPv6</link>;
251 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressStorage&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7a22c34741344764c4027d92e3935a20">SocketAddressStorage</link>;
252 
253 <emphasis role="comment">//&#32;IPAddress&#32;definition&#32;(in&#32;network&#32;byte&#32;order)</emphasis>
254 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_i_p_address">IPAddress</link>&#32;{
255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_i_p_address_1a4455f5fb12a2f9ab6399591d42367088">host</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;32-bit&#32;IPv4&#32;host&#32;address</emphasis>
256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="_struct_i_p_address_1a0b0a074bd9085172732e030959d6c575">port</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;16-bit&#32;protocol&#32;port</emphasis>
257 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a024fa5fb50879de3cba5985b06ab636c">IPAddress</link>;
258 
259 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_u_d_p_channel">UDPChannel</link>&#32;{
260 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_u_d_p_channel_1a832efa95aebb7d0a8e3cd482e6f74924">numbound</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;total&#32;number&#32;of&#32;addresses&#32;this&#32;channel&#32;is&#32;bound&#32;to</emphasis>
261 &#32;&#32;&#32;&#32;<link linkend="_struct_i_p_address">IPAddress</link>&#32;<link linkend="_struct_u_d_p_channel_1a2d254248edabe2083cac6e3ea2f61384">address</link>[<link linkend="__old_2_classes_2lib_2raylib_2src_2rnet_8h_1a706cefcd61f57a478a950ca8d29e89b8">SOCKET_MAX_UDPADDRESSES</link>];&#32;<emphasis role="comment">//&#32;The&#32;list&#32;of&#32;remote&#32;addresses&#32;this&#32;channel&#32;is&#32;bound&#32;to</emphasis>
262 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a4a3bd31fe991858e0c7e49fb587f6b1b">UDPChannel</link>;
263 
264 <emphasis role="comment">//&#32;An&#32;option&#32;ID,&#32;value,&#32;sizeof(value)&#32;tuple&#32;for&#32;setsockopt(2).</emphasis>
265 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_opt">SocketOpt</link>&#32;{
266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_opt_1aac1ffcda45283fc87a7b64c79aee212b">id</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socked&#32;option&#32;id</emphasis>
267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_opt_1a3a8efbf1e974c76ebb6dd257e4d20072">valueLen</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socked&#32;option&#32;value&#32;len</emphasis>
268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_struct_socket_opt_1ae10894c9da77c3d25e501c4f85baea91">value</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socked&#32;option&#32;value&#32;data</emphasis>
269 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad1a79d064b634c9473fa9c812ef7bc8d">SocketOpt</link>;
270 
271 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket">Socket</link>&#32;{
272 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_1a47d0d403ecbdbc00075730234dc15b85">ready</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Is&#32;the&#32;socket&#32;ready?&#32;i.e.&#32;has&#32;information</emphasis>
273 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;last&#32;status&#32;code&#32;to&#32;have&#32;occured&#32;using&#32;this&#32;socket</emphasis>
274 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_socket_1a6acb5848c334ef7e6e440c66e8cc2907">isServer</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Is&#32;this&#32;socket&#32;a&#32;server&#32;socket&#32;(i.e.&#32;TCP/UDP&#32;Listen&#32;Server)</emphasis>
275 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5d8af9067194dce781973e2cac697d63">SocketChannel</link>&#32;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;socket&#32;handle&#32;id</emphasis>
276 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97">SocketType</link>&#32;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Is&#32;this&#32;socket&#32;a&#32;TCP&#32;or&#32;UDP&#32;socket?</emphasis>
277 &#32;&#32;&#32;&#32;
278 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_socket_1aa00d7f299c6db6cb56a3fca7135da641">isIPv6</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Is&#32;this&#32;socket&#32;address&#32;an&#32;ipv6&#32;address?</emphasis>
279 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0315342f59e125e44dd4bae552102466">SocketAddressIPv4</link>&#32;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>;&#32;<emphasis role="comment">//&#32;The&#32;host/target&#32;IPv4&#32;for&#32;this&#32;socket&#32;(in&#32;network&#32;byte&#32;order)</emphasis>
280 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad7a31420ceecb2fabc3b6bec5557a451">SocketAddressIPv6</link>&#32;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>;&#32;<emphasis role="comment">//&#32;The&#32;host/target&#32;IPv6&#32;for&#32;this&#32;socket&#32;(in&#32;network&#32;byte&#32;order)</emphasis>
281 
282 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_u_d_p_channel">UDPChannel</link>&#32;<link linkend="_struct_socket_1aad2198fdc998f8f29fbb61900f2f690f">binding</link>[<link linkend="__old_2_classes_2lib_2raylib_2src_2rnet_8h_1a3b984adc1aad0cbec4c6d9b45e5ba6d5">SOCKET_MAX_UDPCHANNELS</link>];&#32;<emphasis role="comment">//&#32;The&#32;amount&#32;of&#32;channels&#32;(if&#32;UDP)&#32;this&#32;socket&#32;is&#32;bound&#32;to</emphasis>
283 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a9ca40401240ec743ac7c45f6da062750">Socket</link>;
284 
285 <emphasis role="comment">//&#32;Configuration&#32;for&#32;a&#32;socket</emphasis>
286 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_config">SocketConfig</link>&#32;{
287 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97">SocketType</link>&#32;<link linkend="_struct_socket_config_1a40745d0509616c0e66f437fc450cc88b">type</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;type&#32;of&#32;socket,&#32;TCP/UDP</emphasis>
288 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_socket_config_1a924009d9d6eab87d28ca03208aea13e6">host</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;host&#32;address&#32;in&#32;xxx.xxx.xxx.xxx&#32;form</emphasis>
289 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_socket_config_1a8c970a2a6e81e0ce2781d464f06956b7">port</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;target&#32;port/service&#32;in&#32;the&#32;form&#32;&quot;http&quot;&#32;or&#32;&quot;25565&quot;</emphasis>
290 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_socket_config_1aa73853d23f5943fe043df4a448a4527f">server</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Listen&#32;for&#32;incoming&#32;clients?</emphasis>
291 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_socket_config_1a84bf439971ec2750d026ba97381277f1">nonblocking</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;non-blocking&#32;operation?</emphasis>
292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_config_1af7fa5ad2bc75dcf30f0da8c1acdf9bbb">backlog_size</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;a&#32;custom&#32;backlog&#32;size</emphasis>
293 &#32;&#32;&#32;&#32;<link linkend="_struct_socket_opt">SocketOpt</link>&#32;<link linkend="_struct_socket_config_1a22bd9fc8e9b4f6d6f1698e0702b7c3d7">sockopts</link>[<link linkend="__old_2_classes_2lib_2raylib_2src_2rnet_8h_1a5633ef3dc32baf96a9f8723a628f7db6">SOCKET_MAX_SOCK_OPTS</link>];
294 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a61bedba3415c9c0fc76cad8cbc0a411b">SocketConfig</link>;
295 
296 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;{
297 &#32;&#32;&#32;&#32;<link linkend="_struct_i_p_address">IPAddress</link>&#32;<link linkend="_struct_socket_data_packet_1a25e02c597f5dd4204229b12f9668df76">address</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;source/dest&#32;address&#32;of&#32;an&#32;incoming/outgoing&#32;packet</emphasis>
298 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_data_packet_1ab1934264c509cb7cbe6e271c0503cf27">channel</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;src/dst&#32;channel&#32;of&#32;the&#32;packet</emphasis>
299 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_data_packet_1a24ba0f23a93ba04893979f0ac9efadb9">maxlen</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;size&#32;of&#32;the&#32;data&#32;buffer</emphasis>
300 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_data_packet_1aa92736266be3315697fa6ec90aee4f86">status</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Packet&#32;status&#32;after&#32;sending</emphasis>
301 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_data_packet_1a989a2a594adb1aebaf7381404e60c947">len</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;length&#32;of&#32;the&#32;packet&#32;data</emphasis>
302 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_struct_socket_data_packet_1a829ec84af7e054a72213fe861512cf94">data</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;packet&#32;data</emphasis>
303 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a4a53adb8eb057c745e8f9e491ee42b24">SocketDataPacket</link>;
304 
305 <emphasis role="comment">//&#32;Result&#32;from&#32;calling&#32;open&#32;with&#32;a&#32;given&#32;config</emphasis>
306 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_result">SocketResult</link>&#32;{
307 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_result_1ae40c1706406266149f8b3246ce4d704d">status</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socket&#32;result&#32;state</emphasis>
308 &#32;&#32;&#32;&#32;<link linkend="_struct_socket">Socket</link>&#32;*<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socket&#32;ref</emphasis>
309 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aeef54e179ab8f367a053e5e4bd07596a">SocketResult</link>;
310 
311 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_set">SocketSet</link>&#32;{
312 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_set_1a7ad2aa8a67299f6df9dbd0ac61aa9d38">numsockets</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socket&#32;set&#32;count</emphasis>
313 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_socket_set_1a88e90329f540534d0793987ec3e55e10">maxsockets</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socket&#32;set&#32;max</emphasis>
314 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket">Socket</link>&#32;**<link linkend="_struct_socket_set_1a1edd6aec3c7182098648154d1ff974f5">sockets</link>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sockets&#32;array</emphasis>
315 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aed2c8d8dff3512e21fdfa2848c7ddefd">SocketSet</link>;
316 
317 <emphasis role="comment">//&#32;Packet&#32;type</emphasis>
318 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_packet">Packet</link>&#32;{
319 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;total&#32;size&#32;of&#32;bytes&#32;in&#32;data</emphasis>
320 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;offset&#32;to&#32;data&#32;access</emphasis>
321 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_struct_packet_1a6c8e6423001840db076c2f4f2db979d6">maxs</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;max&#32;size&#32;of&#32;data</emphasis>
322 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;stored&#32;in&#32;network&#32;byte&#32;order</emphasis>
323 }&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a9351530394464c1d1892ddeca8a6aea1">Packet</link>;
324 
325 
326 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
327 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prevents&#32;name&#32;mangling&#32;of&#32;functions</emphasis>
328 <emphasis role="preprocessor">#endif</emphasis>
329 
330 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
331 <emphasis role="comment">//&#32;Global&#32;Variables&#32;Definition</emphasis>
332 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
333 <emphasis role="comment">//...</emphasis>
334 
335 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
336 <emphasis role="comment">//&#32;Module&#32;Functions&#32;Declaration</emphasis>
337 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
338 
339 <emphasis role="comment">//&#32;Initialisation&#32;and&#32;cleanup</emphasis>
340 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5a60c212d8eeafc3ba60de4a4d44ba74">InitNetworkDevice</link>(<emphasis role="keywordtype">void</emphasis>);
341 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa974e47901bd01a4a776436eb5428234">CloseNetworkDevice</link>(<emphasis role="keywordtype">void</emphasis>);
342 
343 <emphasis role="comment">//&#32;Address&#32;API</emphasis>
344 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aecf982e4f2c0754b601b83891d4c5cbd">ResolveIP</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ip,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*service,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*outhost,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*outserv);
345 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a55f9fc49dda7d2e6ba334837a92a408f">ResolveHost</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*address,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*service,&#32;<emphasis role="keywordtype">int</emphasis>&#32;addressType,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*outAddr);
346 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a635dd34c43b71fecfcc7520ea09352a4">GetAddressFamily</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address);
347 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a1b3484a52be7986604e1cc1e4db773be">GetAddressSocketType</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address);
348 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa473777697288b6043bccfc7305b3635">GetAddressProtocol</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address);
349 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a47af7050a9549107d5f5f2bb8b170211">GetAddressCanonName</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address);
350 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a81267bfd7fdff96179ee5d87604862a8">GetAddressHostAndPort</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*outhost,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*outport);
351 
352 <emphasis role="comment">//&#32;Address&#32;Memory&#32;API</emphasis>
353 <link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae2a03204f42d6cb31df4ea7c9f18b9cd">LoadAddress</link>(<emphasis role="keywordtype">void</emphasis>);
354 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad37277a5289b09cb964d542f343b932c">UnloadAddress</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*addressInfo);
355 <link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7065cb129962ecb2d6d67b87d8261ef5">LoadAddressList</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
356 
357 <emphasis role="comment">//&#32;Socket&#32;API</emphasis>
358 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a522dc88d16849e1959bec2daaa6a1762">SocketCreate</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
359 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1acf37e109a222380e783c1a34abee2abe">SocketBind</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
360 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8ad0ec061568a3118a945e83ab38ae36">SocketListen</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
361 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aba11a54a2556ea0d8f93af8b538850f6">SocketConnect</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
362 <link linkend="_struct_socket">Socket</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a29824fed608e6775ec31ab91d1aeec20">SocketAccept</link>(<link linkend="_struct_socket">Socket</link>&#32;*server,&#32;<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>);
363 
364 <emphasis role="comment">//&#32;General&#32;Socket&#32;API</emphasis>
365 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a75bab715e75916550bd46024525797f2">SocketSend</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*datap,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
366 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1add10df2d75939fec326dfdb98a4ba4b6">SocketReceive</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxlen);
367 <link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7a22c34741344764c4027d92e3935a20">SocketAddressStorage</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad52f97449470b062d1074a1cd7e4b497">SocketGetPeerAddress</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock);
368 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a40bc0aa46e0b8b6eeec34d0d951b1715">GetSocketAddressHost</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7a22c34741344764c4027d92e3935a20">SocketAddressStorage</link>&#32;storage);
369 <emphasis role="keywordtype">short</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae627dbc8fefd201251bb8e5924e28dcf">GetSocketAddressPort</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7a22c34741344764c4027d92e3935a20">SocketAddressStorage</link>&#32;storage);
370 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1adb4e419587d33d420dfda94f506e23e8">SocketClose</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock);
371 
372 <emphasis role="comment">//&#32;UDP&#32;Socket&#32;API</emphasis>
373 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1acbeb0d91b33a764d5da90f10ed925de1">SocketSetChannel</link>(<link linkend="_struct_socket">Socket</link>&#32;*socket,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structchannel">channel</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_i_p_address">IPAddress</link>&#32;*address);
374 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a02411b2ff61874d3b2d9d8b435a79f91">SocketUnsetChannel</link>(<link linkend="_struct_socket">Socket</link>&#32;*socket,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structchannel">channel</link>);
375 
376 <emphasis role="comment">//&#32;UDP&#32;DataPacket&#32;API</emphasis>
377 <link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a76188e5aad60c42deea2a9b751a45f07">AllocPacket</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
378 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a9e60e3a2fdfc965dbcb9bb1da63315ec">ResizePacket</link>(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*packet,&#32;<emphasis role="keywordtype">int</emphasis>&#32;newsize);
379 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1abc4db040e1d2c72b1d0b1f9f3edbccf5">FreePacket</link>(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*packet);
380 <link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;**<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6413e063cdbe9e7af1e77c087908053c">AllocPacketList</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
381 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae38e93f37b95449bc5fcb7e408671b82">FreePacketList</link>(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;**packets);
382 
383 <emphasis role="comment">//&#32;Socket&#32;Memory&#32;API</emphasis>
384 <link linkend="_struct_socket">Socket</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0cebe9c8f03fc94ae448651f3fa96ecd">LoadSocket</link>(<emphasis role="keywordtype">void</emphasis>);
385 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5195a4b40e90c87de73d50634548100a">UnloadSocket</link>(<link linkend="_struct_socket">Socket</link>&#32;**sock);
386 <link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0a04d869981037d5c9fff8a5d9acd5b0">LoadSocketResult</link>(<emphasis role="keywordtype">void</emphasis>);
387 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a70ffb393df8af12caff6459c0800f0a5">UnloadSocketResult</link>(<link linkend="_struct_socket_result">SocketResult</link>&#32;**<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
388 <link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7919801f20cf31cda1b69270d74ff641">LoadSocketSet</link>(<emphasis role="keywordtype">int</emphasis>&#32;max);
389 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ab5fe07b39551f2a6f30027f1856f6161">UnloadSocketSet</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*sockset);
390 
391 <emphasis role="comment">//&#32;Socket&#32;I/O&#32;API</emphasis>
392 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a558a93f8b6938c62f9227a1dd2eb6798">IsSocketReady</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock);
393 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a2d4cd08dd2c37e8d5733f8b68ac19489">IsSocketConnected</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock);
394 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1adfedffc78ad3f1fceeb2e0dc277a0e73">AddSocket</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>,&#32;<link linkend="_struct_socket">Socket</link>&#32;*sock);
395 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a495bc9c4544f725a88eee4a97b16aef8">RemoveSocket</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>,&#32;<link linkend="_struct_socket">Socket</link>&#32;*sock);
396 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1abb554d0ca8efb5b1268b419b0102520b">CheckSockets</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>);
397 
398 <emphasis role="comment">//&#32;Packet&#32;API</emphasis>
399 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a1abe34162b80e7a71e127353f55f4c95">PacketSend</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet);
400 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a399d94d0d0388eda67d18ad1aca22840">PacketReceive</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet);
401 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae9121c1cb1e1038910c33cf8a242cae8">PacketWrite8</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="_classvalue">value</link>);
402 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a16236af8cbe6a610c71d54bbf687e231">PacketWrite16</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="_classvalue">value</link>);
403 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1af19e701801e3ad5abc627a8066b8a05d">PacketWrite32</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_classvalue">value</link>);
404 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a80ea7b1788991d155a9a5e5a631774d4">PacketWrite64</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_classvalue">value</link>);
405 <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a9509bda61cffb7e6e334f0b16bb1f9d1">PacketRead8</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet);
406 <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ab1c061c9443cacbacf92be74c348cf68">PacketRead16</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet);
407 <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a844639e4c0c9bf1a9236c77592f6af08">PacketRead32</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet);
408 <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a2025285e8fc45f29b998a3704e3f60a3">PacketRead64</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet);
409 
410 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
411 }
412 <emphasis role="preprocessor">#endif</emphasis>
413 
414 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;RNET_H</emphasis>
415 
416 <emphasis role="comment">/***********************************************************************************</emphasis>
417 <emphasis role="comment">*</emphasis>
418 <emphasis role="comment">*&#32;&#32;&#32;RNET&#32;IMPLEMENTATION</emphasis>
419 <emphasis role="comment">*</emphasis>
420 <emphasis role="comment">************************************************************************************/</emphasis>
421 
422 <emphasis role="preprocessor">#if&#32;defined(RNET_IMPLEMENTATION)</emphasis>
423 
424 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;assert()</emphasis>
425 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;FILE,&#32;fopen(),&#32;fclose(),&#32;fread()</emphasis>
426 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;malloc(),&#32;free()</emphasis>
427 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;strcmp(),&#32;strncmp()</emphasis>
428 
429 <emphasis role="preprocessor">#define&#32;NET_DEBUG_ENABLED&#32;&#32;&#32;1</emphasis>
430 
431 <emphasis role="preprocessor">#if&#32;defined(SUPPORT_TRACELOG)</emphasis>
432 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TRACELOG(level,&#32;...)&#32;TraceLog(level,&#32;__VA_ARGS__)</emphasis>
433 
434 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(SUPPORT_TRACELOG_DEBUG)</emphasis>
435 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;TRACELOGD(...)&#32;TraceLog(LOG_DEBUG,&#32;__VA_ARGS__)</emphasis>
436 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
437 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;TRACELOGD(...)&#32;(void)0</emphasis>
438 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
439 <emphasis role="preprocessor">#else</emphasis>
440 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TRACELOG(level,&#32;...)&#32;(void)0</emphasis>
441 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TRACELOGD(...)&#32;(void)0</emphasis>
442 <emphasis role="preprocessor">#endif</emphasis>
443 
444 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
445 <emphasis role="comment">//&#32;Types&#32;and&#32;Structures&#32;Definition</emphasis>
446 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
447 
448 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddress
449 {
450 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr&#32;address;
451 }&#32;_SocketAddress;
452 
453 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv4
454 {
455 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;address;
456 }&#32;_SocketAddressIPv4;
457 
458 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv6
459 {
460 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;address;
461 }&#32;_SocketAddressIPv6;
462 
463 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressStorage
464 {
465 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;address;
466 }&#32;_SocketAddressStorage;
467 
468 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_AddressInformation
469 {
470 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>;
471 }&#32;_AddressInformation;
472 
473 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
474 <emphasis role="comment">//&#32;Local&#32;module&#32;Functions&#32;Declarations</emphasis>
475 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
476 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintSocket(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;family,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;socktype,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;protocol);
477 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SocketAddressToString(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*sockaddr);
478 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsIPv4Address(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ip);
479 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsIPv6Address(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ip);
480 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*GetSocketPortPtr(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*sa);
481 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*GetSocketAddressPtr(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*sa);
482 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsSocketValid(<link linkend="_struct_socket">Socket</link>&#32;*sock);
483 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SocketSetLastError(<emphasis role="keywordtype">int</emphasis>&#32;err);
484 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;SocketGetLastError();
485 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SocketGetLastErrorString();
486 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SocketErrorCodeToString(<emphasis role="keywordtype">int</emphasis>&#32;err);
487 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetDefaults(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>);
488 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;InitSocket(<link linkend="_struct_socket">Socket</link>&#32;*sock,&#32;<emphasis role="keyword">struct</emphasis>&#32;addrinfo&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>);
489 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CreateSocket(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*outresult);
490 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetBlocking(<link linkend="_struct_socket">Socket</link>&#32;*sock);
491 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetNonBlocking(<link linkend="_struct_socket">Socket</link>&#32;*sock);
492 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetOptions(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket">Socket</link>&#32;*sock);
493 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SocketSetHints(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<emphasis role="keyword">struct</emphasis>&#32;addrinfo&#32;*hints);
494 
495 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
496 <emphasis role="comment">//&#32;Local&#32;module&#32;Functions&#32;Definition</emphasis>
497 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
498 <emphasis role="comment">//&#32;Print&#32;socket&#32;information</emphasis>
499 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintSocket(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;family,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;socktype,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;protocol)
500 {
501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(family)
502 &#32;&#32;&#32;&#32;{
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_UNSPEC:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tFamily:&#32;Unspecified&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET:
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tFamily:&#32;AF_INET&#32;(IPv4)&quot;</emphasis>);
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;IPv4&#32;address&#32;%s&quot;</emphasis>,&#32;SocketAddressToString(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>));
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET6:
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tFamily:&#32;AF_INET6&#32;(IPv6)&quot;</emphasis>);
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;IPv6&#32;address&#32;%s&quot;</emphasis>,&#32;SocketAddressToString(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>));
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_NETBIOS:
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tFamily:&#32;AF_NETBIOS&#32;(NetBIOS)&quot;</emphasis>);
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tFamily:&#32;Other&#32;%ld&quot;</emphasis>,&#32;family);&#32;<emphasis role="keywordflow">break</emphasis>;
519 &#32;&#32;&#32;&#32;}
520 
521 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tSocket&#32;type:&quot;</emphasis>);
522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(socktype)
523 &#32;&#32;&#32;&#32;{
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;Unspecified&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SOCK_STREAM:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;SOCK_STREAM&#32;(stream)&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SOCK_DGRAM:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;SOCK_DGRAM&#32;(datagram)&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SOCK_RAW:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;SOCK_RAW&#32;(raw)&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SOCK_RDM:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;SOCK_RDM&#32;(reliable&#32;message&#32;datagram)&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;SOCK_SEQPACKET:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;SOCK_SEQPACKET&#32;(pseudo-stream&#32;packet)&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;Other&#32;%ld&quot;</emphasis>,&#32;socktype);&#32;<emphasis role="keywordflow">break</emphasis>;
531 &#32;&#32;&#32;&#32;}
532 
533 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tProtocol:&quot;</emphasis>);
534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(protocol)
535 &#32;&#32;&#32;&#32;{
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;Unspecified&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IPPROTO_TCP:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;IPPROTO_TCP&#32;(TCP)&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IPPROTO_UDP:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;IPPROTO_UDP&#32;(UDP)&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\t-&#32;Other&#32;%ld&quot;</emphasis>,&#32;protocol);&#32;<emphasis role="keywordflow">break</emphasis>;
540 &#32;&#32;&#32;&#32;}
541 }
542 
543 <emphasis role="comment">//&#32;Convert&#32;network&#32;ordered&#32;socket&#32;address&#32;to&#32;human&#32;readable&#32;string&#32;(127.0.0.1)</emphasis>
544 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SocketAddressToString(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*sockaddr)
545 {
546 &#32;&#32;&#32;&#32;<emphasis role="comment">//static&#32;const&#32;char*&#32;ipv6[INET6_ADDRSTRLEN];</emphasis>
547 &#32;&#32;&#32;&#32;assert(sockaddr&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>);
548 &#32;&#32;&#32;&#32;assert(sockaddr-&gt;ss_family&#32;==&#32;AF_INET&#32;||&#32;sockaddr-&gt;ss_family&#32;==&#32;AF_INET6);
549 
550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sockaddr-&gt;ss_family)
551 &#32;&#32;&#32;&#32;{
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET:
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//struct&#32;sockaddr_in&#32;*s&#32;=&#32;((struct&#32;sockaddr_in&#32;*)sockaddr);</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;inet_ntop(AF_INET,&#32;&amp;s-&gt;sin_addr,&#32;ipv6,&#32;INET_ADDRSTRLEN);&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET6:
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//struct&#32;sockaddr_in6&#32;*s&#32;=&#32;((struct&#32;sockaddr_in6&#32;*)sockaddr);</emphasis>
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;inet_ntop(AF_INET6,&#32;&amp;s-&gt;sin6_addr,&#32;ipv6,&#32;INET6_ADDRSTRLEN);&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
564 &#32;&#32;&#32;&#32;}
565 
566 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
567 }
568 
569 <emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;null&#32;terminated&#32;string&#32;ip&#32;is&#32;a&#32;valid&#32;IPv4&#32;address</emphasis>
570 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsIPv4Address(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ip)
571 {
572 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
573 <emphasis role="comment">&#32;&#32;&#32;&#32;struct&#32;sockaddr_in&#32;sa;</emphasis>
574 <emphasis role="comment">&#32;&#32;&#32;&#32;int&#32;result&#32;=&#32;inet_pton(AF_INET,&#32;ip,&#32;&amp;(sa.sin_addr));&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
575 <emphasis role="comment">&#32;&#32;&#32;&#32;return&#32;(result&#32;!=&#32;0);</emphasis>
576 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
578 }
579 
580 <emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;null&#32;terminated&#32;string&#32;ip&#32;is&#32;a&#32;valid&#32;IPv6&#32;address</emphasis>
581 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsIPv6Address(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ip)
582 {
583 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
584 <emphasis role="comment">&#32;&#32;&#32;&#32;struct&#32;sockaddr_in6&#32;sa;</emphasis>
585 <emphasis role="comment">&#32;&#32;&#32;&#32;int&#32;result&#32;=&#32;inet_pton(AF_INET6,&#32;ip,&#32;&amp;(sa.sin6_addr));&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
586 <emphasis role="comment">&#32;&#32;&#32;&#32;return&#32;result&#32;!=&#32;0;</emphasis>
587 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
589 }
590 
591 <emphasis role="comment">//&#32;Return&#32;a&#32;pointer&#32;to&#32;the&#32;port&#32;from&#32;the&#32;correct&#32;address&#32;family&#32;(IPv4,&#32;or&#32;IPv6)</emphasis>
592 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*GetSocketPortPtr(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*sa)
593 {
594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sa-&gt;ss_family&#32;==&#32;AF_INET)
595 &#32;&#32;&#32;&#32;{
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*)sa)-&gt;sin_port);
597 &#32;&#32;&#32;&#32;}
598 
599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;*)sa)-&gt;sin6_port);
600 }
601 
602 <emphasis role="comment">//&#32;Return&#32;a&#32;pointer&#32;to&#32;the&#32;address&#32;from&#32;the&#32;correct&#32;address&#32;family&#32;(IPv4,&#32;or&#32;IPv6)</emphasis>
603 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*GetSocketAddressPtr(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*sa)
604 {
605 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sa-&gt;ss_family&#32;==&#32;AF_INET)
606 &#32;&#32;&#32;&#32;{
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*)sa)-&gt;sin_addr);
608 &#32;&#32;&#32;&#32;}
609 
610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;*)sa)-&gt;sin6_addr);
611 }
612 
613 <emphasis role="comment">//&#32;Is&#32;the&#32;socket&#32;in&#32;a&#32;valid&#32;state?</emphasis>
614 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsSocketValid(<link linkend="_struct_socket">Socket</link>&#32;*sock)
615 {
616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
617 &#32;&#32;&#32;&#32;{
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a26769957ec1a2beaf223f33b66ee64ab">INVALID_SOCKET</link>);
619 &#32;&#32;&#32;&#32;}
620 
621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
622 }
623 
624 <emphasis role="comment">//&#32;Sets&#32;the&#32;error&#32;code&#32;that&#32;can&#32;be&#32;retrieved&#32;through&#32;the&#32;WSAGetLastError&#32;function.</emphasis>
625 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SocketSetLastError(<emphasis role="keywordtype">int</emphasis>&#32;err)
626 {
627 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
628 &#32;&#32;&#32;&#32;WSASetLastError(err);
629 <emphasis role="preprocessor">#else</emphasis>
630 &#32;&#32;&#32;&#32;errno&#32;=&#32;err;
631 <emphasis role="preprocessor">#endif</emphasis>
632 }
633 
634 <emphasis role="comment">//&#32;Returns&#32;the&#32;error&#32;status&#32;for&#32;the&#32;last&#32;Sockets&#32;operation&#32;that&#32;failed</emphasis>
635 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;SocketGetLastError(<emphasis role="keywordtype">void</emphasis>)
636 {
637 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;WSAGetLastError();
639 <emphasis role="preprocessor">#else</emphasis>
640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;errno;
641 <emphasis role="preprocessor">#endif</emphasis>
642 }
643 
644 <emphasis role="comment">//&#32;Returns&#32;a&#32;human-readable&#32;string&#32;representing&#32;the&#32;last&#32;error&#32;message</emphasis>
645 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SocketGetLastErrorString(<emphasis role="keywordtype">void</emphasis>)
646 {
647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SocketErrorCodeToString(SocketGetLastError());
648 }
649 
650 <emphasis role="comment">//&#32;Returns&#32;a&#32;human-readable&#32;string&#32;representing&#32;the&#32;error&#32;message&#32;(err)</emphasis>
651 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SocketErrorCodeToString(<emphasis role="keywordtype">int</emphasis>&#32;err)
652 {
653 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
654 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;gaiStrErrorBuffer[GAI_STRERROR_BUFFER_SIZE];
655 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;gaiStrErrorBuffer,&#32;<emphasis role="stringliteral">&quot;%s&quot;</emphasis>,&#32;gai_strerror(err));
656 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;gaiStrErrorBuffer;
657 <emphasis role="preprocessor">#else</emphasis>
658 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;gai_strerror(err);
659 <emphasis role="preprocessor">#endif</emphasis>
660 }
661 
662 <emphasis role="comment">//&#32;Set&#32;the&#32;defaults&#32;in&#32;the&#32;supplied&#32;SocketConfig&#32;if&#32;they&apos;re&#32;not&#32;already&#32;set</emphasis>
663 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetDefaults(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>)
664 {
665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;backlog_size&#32;==&#32;0)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;backlog_size&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a9b1432dd7e336816eda674c15d960405">SOCKET_MAX_QUEUE_SIZE</link>;
666 
667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
668 }
669 
670 <emphasis role="comment">//&#32;Create&#32;the&#32;socket&#32;channel</emphasis>
671 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;InitSocket(<link linkend="_struct_socket">Socket</link>&#32;*sckt,&#32;<emphasis role="keyword">struct</emphasis>&#32;addrinfo&#32;*address)
672 {
673 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sckt-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>)
674 &#32;&#32;&#32;&#32;{
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a2843397fd39bd96681bca78a8aa03096">SOCKET_TCP</link>:
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(address-&gt;ai_family&#32;==&#32;AF_INET)&#32;sckt-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;=&#32;socket(AF_INET,&#32;SOCK_STREAM,&#32;0);
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;sckt-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;=&#32;socket(AF_INET6,&#32;SOCK_STREAM,&#32;0);
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>:
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(address-&gt;ai_family&#32;==&#32;AF_INET)&#32;sckt-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;=&#32;socket(AF_INET,&#32;SOCK_DGRAM,&#32;0);
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;sckt-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;=&#32;socket(AF_INET6,&#32;SOCK_DGRAM,&#32;0);
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;socket&#32;type&#32;specified.&quot;</emphasis>);&#32;<emphasis role="keywordflow">break</emphasis>;
686 &#32;&#32;&#32;&#32;}
687 
688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsSocketValid(sckt);
689 }
690 
691 <emphasis role="comment">//&#32;&#32;&#32;&#32;CreateSocket()&#32;-&#32;Interally&#32;called&#32;by&#32;CreateSocket()</emphasis>
692 <emphasis role="comment">//</emphasis>
693 <emphasis role="comment">//&#32;&#32;&#32;&#32;This&#32;here&#32;is&#32;the&#32;bread&#32;and&#32;butter&#32;of&#32;the&#32;socket&#32;API,&#32;This&#32;function&#32;will</emphasis>
694 <emphasis role="comment">//&#32;&#32;&#32;&#32;attempt&#32;to&#32;open&#32;a&#32;socket,&#32;bind&#32;and&#32;listen&#32;to&#32;it&#32;based&#32;on&#32;the&#32;config&#32;passed&#32;in</emphasis>
695 <emphasis role="comment">//</emphasis>
696 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketConfig*&#32;config&#32;-&#32;Configuration&#32;for&#32;which&#32;socket&#32;to&#32;open</emphasis>
697 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketResult*&#32;result&#32;-&#32;The&#32;results&#32;of&#32;this&#32;function&#32;(if&#32;any,&#32;including&#32;errors)</emphasis>
698 <emphasis role="comment">//</emphasis>
699 <emphasis role="comment">//&#32;&#32;&#32;&#32;e.g.</emphasis>
700 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketConfig&#32;server_config&#32;=&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketConfig&#32;client_config&#32;=&#32;{</emphasis>
701 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.host&#32;=&#32;&quot;127.0.0.1&quot;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.host&#32;=&#32;&quot;127.0.0.1&quot;,</emphasis>
702 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.port&#32;=&#32;8080,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.port&#32;=&#32;8080,</emphasis>
703 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.server&#32;=&#32;true,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};</emphasis>
704 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.nonblocking&#32;=&#32;true,</emphasis>
705 <emphasis role="comment">//&#32;&#32;&#32;&#32;};</emphasis>
706 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketResult&#32;server_res;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketResult&#32;client_res;</emphasis>
707 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CreateSocket(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*outresult)
708 {
709 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
710 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;addrstatus;
711 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;hints;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Address&#32;flags&#32;(IPV4,&#32;IPV6,&#32;UDP?)</emphasis>
712 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;pointer&#32;to&#32;the&#32;resulting&#32;address&#32;list</emphasis>
713 
714 &#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a26769957ec1a2beaf223f33b66ee64ab">INVALID_SOCKET</link>;
715 &#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1ae40c1706406266149f8b3246ce4d704d">status</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aea87ce97f86effb2c4df6274d4aac567">RESULT_FAILURE</link>;
716 
717 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;socket&#32;type</emphasis>
718 &#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;type;
719 
720 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;Set&#32;the&#32;hints&#32;based&#32;on&#32;information&#32;in&#32;the&#32;config</emphasis>
721 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
722 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;AI_CANONNAME&#32;&#32;&#32;&#32;Causes&#32;the&#32;ai_canonname&#32;of&#32;the&#32;result&#32;to&#32;the&#32;filled&#32;&#32;out&#32;with&#32;the&#32;host&apos;s&#32;canonical&#32;(real)&#32;name.</emphasis>
723 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;AI_PASSIVE:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Causes&#32;the&#32;result&apos;s&#32;IP&#32;address&#32;to&#32;be&#32;filled&#32;out&#32;with&#32;INADDR_ANY&#32;(IPv4)or&#32;in6addr_any&#32;(IPv6);</emphasis>
724 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;Note:&#32;&#32;&#32;&#32;This&#32;causes&#32;a&#32;subsequent&#32;call&#32;to&#32;bind()&#32;to&#32;auto-fill&#32;the&#32;IP&#32;address</emphasis>
725 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;of&#32;the&#32;struct&#32;sockaddr&#32;with&#32;the&#32;address&#32;of&#32;the&#32;current&#32;host.</emphasis>
726 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
727 &#32;&#32;&#32;&#32;SocketSetHints(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;&amp;hints);
728 
729 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;address&#32;information</emphasis>
730 &#32;&#32;&#32;&#32;addrstatus&#32;=&#32;getaddrinfo(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;host,&#32;<emphasis role="comment">//&#32;e.g.&#32;&quot;www.example.com&quot;&#32;or&#32;IP&#32;(Can&#32;be&#32;null&#32;if&#32;AI_PASSIVE&#32;flag&#32;is&#32;set</emphasis>
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;port,&#32;<emphasis role="comment">//&#32;e.g.&#32;&quot;http&quot;&#32;or&#32;port&#32;number</emphasis>
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;hints,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;e.g.&#32;SOCK_STREAM/SOCK_DGRAM</emphasis>
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;struct&#32;to&#32;populate</emphasis>
734 &#32;&#32;&#32;&#32;);
735 
736 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Did&#32;we&#32;succeed?</emphasis>
737 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addrstatus&#32;!=&#32;0)
738 &#32;&#32;&#32;&#32;{
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;get&#32;resolve&#32;host&#32;%s:%s:&#32;%s&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;host,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;port,&#32;SocketGetLastErrorString());
743 
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(success&#32;=&#32;<emphasis role="keyword">false</emphasis>);
745 &#32;&#32;&#32;&#32;}
746 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
747 &#32;&#32;&#32;&#32;{
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;hoststr[NI_MAXHOST];
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;portstr[NI_MAXSERV];
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//socklen_t&#32;client_len&#32;=&#32;sizeof(struct&#32;sockaddr_storage);</emphasis>
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;rc&#32;=&#32;getnameinfo((struct&#32;sockaddr&#32;*)res-&gt;ai_addr,&#32;client_len,&#32;hoststr,&#32;sizeof(hoststr),&#32;portstr,&#32;sizeof(portstr),&#32;NI_NUMERICHOST&#32;|&#32;NI_NUMERICSERV);</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;resolved&#32;host&#32;%s:%s&quot;</emphasis>,&#32;hoststr,&#32;portstr);
753 &#32;&#32;&#32;&#32;}
754 
755 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Walk&#32;the&#32;address&#32;information&#32;linked-list</emphasis>
756 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*it;
757 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;&#32;it&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;&#32;it&#32;=&#32;it-&gt;ai_next)
758 &#32;&#32;&#32;&#32;{
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialise&#32;the&#32;socket</emphasis>
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!InitSocket(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>,&#32;it))
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
767 
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;socket&#32;options</emphasis>
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SocketSetOptions(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>))
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freeaddrinfo(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
775 
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(success&#32;=&#32;<emphasis role="keyword">false</emphasis>);
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
778 &#32;&#32;&#32;&#32;}
779 
780 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsSocketValid(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>))
781 &#32;&#32;&#32;&#32;{
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(outresult-&gt;<link linkend="_struct_socket_result_1ae40c1706406266149f8b3246ce4d704d">status</link>));
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freeaddrinfo(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
786 
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(success&#32;=&#32;<emphasis role="keyword">false</emphasis>);
788 &#32;&#32;&#32;&#32;}
789 
790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(success)
791 &#32;&#32;&#32;&#32;{
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1ae40c1706406266149f8b3246ce4d704d">status</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7cc1753a05a0821f6c70dd2bccfbab5c">RESULT_SUCCESS</link>;
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a47d0d403ecbdbc00075730234dc15b85">ready</link>&#32;=&#32;0;
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;0;
795 
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;type&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>))&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1a6acb5848c334ef7e6e440c66e8cc2907">isServer</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;server;
797 
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>-&gt;ai_addr-&gt;sa_family)
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET:
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv4&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>));
803 
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(*outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>));
807 
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>-&gt;address,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>-&gt;ai_addr,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in));
811 
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aa00d7f299c6db6cb56a3fca7135da641">isIPv6</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;hoststr[NI_MAXHOST];
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;portstr[NI_MAXSERV];
815 
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;socklen_t&#32;client_len&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage);
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getnameinfo((<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>-&gt;address,&#32;client_len,&#32;hoststr,&#32;<emphasis role="keyword">sizeof</emphasis>(hoststr),&#32;portstr,&#32;<emphasis role="keyword">sizeof</emphasis>(portstr),&#32;NI_NUMERICHOST&#32;|&#32;NI_NUMERICSERV);
818 
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;address&#32;set&#32;to&#32;%s:%s&quot;</emphasis>,&#32;hoststr,&#32;portstr);
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET6:
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv6&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(*outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>));
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>,&#32;0,
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(*outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>));
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>-&gt;address,
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in6&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>-&gt;ai_addr,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in6));
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1aa00d7f299c6db6cb56a3fca7135da641">isIPv6</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;hoststr[NI_MAXHOST];
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;portstr[NI_MAXSERV];
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;socklen_t&#32;client_len&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage);
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getnameinfo(
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;outresult-&gt;<link linkend="_struct_socket_result_1a89109dc68075b5f0941dc720f293034e">socket</link>-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>-&gt;address,&#32;client_len,&#32;hoststr,&#32;<emphasis role="keyword">sizeof</emphasis>(hoststr),&#32;portstr,&#32;<emphasis role="keyword">sizeof</emphasis>(portstr),&#32;NI_NUMERICHOST&#32;|&#32;NI_NUMERICSERV);
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;address&#32;set&#32;to&#32;%s:%s&quot;</emphasis>,&#32;hoststr,&#32;portstr);
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
847 &#32;&#32;&#32;&#32;}
848 
849 &#32;&#32;&#32;&#32;freeaddrinfo(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
850 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success;
851 }
852 
853 <emphasis role="comment">//&#32;Set&#32;the&#32;state&#32;of&#32;the&#32;Socket&#32;sock&#32;to&#32;blocking</emphasis>
854 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetBlocking(<link linkend="_struct_socket">Socket</link>&#32;*sock)
855 {
856 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret&#32;=&#32;<emphasis role="keyword">true</emphasis>;
857 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
858 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>&#32;=&#32;0;
859 &#32;&#32;&#32;&#32;ret&#32;=&#32;ioctlsocket(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;FIONBIO,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>);
860 <emphasis role="preprocessor">#else</emphasis>
861 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;fcntl(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;F_GETFL,&#32;0);
862 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;&amp;&#32;O_NONBLOCK))
863 &#32;&#32;&#32;&#32;{
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;was&#32;already&#32;in&#32;blocking&#32;mode&quot;</emphasis>);
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
866 &#32;&#32;&#32;&#32;}
867 
868 &#32;&#32;&#32;&#32;ret&#32;=&#32;(0&#32;==&#32;fcntl(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;F_SETFL,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;^&#32;O_NONBLOCK)));
869 <emphasis role="preprocessor">#endif</emphasis>
870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
871 }
872 
873 <emphasis role="comment">//&#32;Set&#32;the&#32;state&#32;of&#32;the&#32;Socket&#32;sock&#32;to&#32;non-blocking</emphasis>
874 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetNonBlocking(<link linkend="_struct_socket">Socket</link>&#32;*sock)
875 {
876 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret&#32;=&#32;<emphasis role="keyword">true</emphasis>;
877 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
878 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>&#32;=&#32;1;
879 &#32;&#32;&#32;&#32;ret&#32;=&#32;ioctlsocket(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;FIONBIO,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1e71d9c196e4683cc06c4b54d53f7ef5">mode</link>);
880 <emphasis role="preprocessor">#else</emphasis>
881 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;=&#32;fcntl(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;F_GETFL,&#32;0);
882 
883 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;&amp;&#32;O_NONBLOCK))
884 &#32;&#32;&#32;&#32;{
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;was&#32;already&#32;in&#32;non-blocking&#32;mode&quot;</emphasis>);
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
887 &#32;&#32;&#32;&#32;}
888 
889 &#32;&#32;&#32;&#32;ret&#32;=&#32;(0&#32;==&#32;fcntl(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;F_SETFL,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>&#32;|&#32;O_NONBLOCK)));
890 <emphasis role="preprocessor">#endif</emphasis>
891 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
892 }
893 
894 <emphasis role="comment">//&#32;Set&#32;options&#32;specified&#32;in&#32;SocketConfig&#32;to&#32;Socket&#32;sock</emphasis>
895 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;SocketSetOptions(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket">Socket</link>&#32;*sock)
896 {
897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5633ef3dc32baf96a9f8723a628f7db6">SOCKET_MAX_SOCK_OPTS</link>;&#32;i++)
898 &#32;&#32;&#32;&#32;{
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_socket_opt">SocketOpt</link>&#32;*opt&#32;=&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;sockopts[i];
900 
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(opt-&gt;<link linkend="_struct_socket_opt_1aac1ffcda45283fc87a7b64c79aee212b">id</link>&#32;==&#32;0)&#32;<emphasis role="keywordflow">break</emphasis>;
902 
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(setsockopt(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;SOL_SOCKET,&#32;opt-&gt;<link linkend="_struct_socket_opt_1aac1ffcda45283fc87a7b64c79aee212b">id</link>,&#32;opt-&gt;<link linkend="_struct_socket_opt_1ae10894c9da77c3d25e501c4f85baea91">value</link>,&#32;opt-&gt;<link linkend="_struct_socket_opt_1a3a8efbf1e974c76ebb6dd257e4d20072">valueLen</link>)&#32;&lt;&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
904 &#32;&#32;&#32;&#32;}
905 
906 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
907 }
908 
909 <emphasis role="comment">//&#32;Set&#32;&quot;hints&quot;&#32;in&#32;an&#32;addrinfo&#32;struct,&#32;to&#32;be&#32;passed&#32;to&#32;getaddrinfo.</emphasis>
910 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;SocketSetHints(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<emphasis role="keyword">struct</emphasis>&#32;addrinfo&#32;*hints)
911 {
912 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>&#32;||&#32;hints&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
913 
914 &#32;&#32;&#32;&#32;memset(hints,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(*hints));
915 
916 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;ip&#32;supplied&#32;in&#32;the&#32;config&#32;is&#32;a&#32;valid&#32;ipv4&#32;ip&#32;ipv6&#32;address</emphasis>
917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsIPv4Address(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;host))
918 &#32;&#32;&#32;&#32;{
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hints-&gt;ai_family&#32;=&#32;AF_INET;
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hints-&gt;ai_flags&#32;|=&#32;AI_NUMERICHOST;
921 &#32;&#32;&#32;&#32;}
922 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
923 &#32;&#32;&#32;&#32;{
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsIPv6Address(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;host))
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hints-&gt;ai_family&#32;=&#32;AF_INET6;
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hints-&gt;ai_flags&#32;|=&#32;AI_NUMERICHOST;
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;hints-&gt;ai_family&#32;=&#32;AF_UNSPEC;
930 &#32;&#32;&#32;&#32;}
931 
932 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;type&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>)&#32;hints-&gt;ai_socktype&#32;=&#32;SOCK_DGRAM;
933 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;hints-&gt;ai_socktype&#32;=&#32;SOCK_STREAM;
934 
935 
936 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;passive&#32;unless&#32;UDP&#32;client</emphasis>
937 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;type&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>)&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;server)&#32;hints-&gt;ai_flags&#32;=&#32;AI_PASSIVE;
938 }
939 
940 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
941 <emphasis role="comment">//&#32;Module&#32;implementation</emphasis>
942 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
943 
944 <emphasis role="comment">//&#32;&#32;&#32;&#32;Initialise&#32;the&#32;network&#32;(requires&#32;for&#32;windows&#32;platforms&#32;only)</emphasis>
945 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5a60c212d8eeafc3ba60de4a4d44ba74">InitNetworkDevice</link>(<emphasis role="keywordtype">void</emphasis>)
946 {
947 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
948 &#32;&#32;&#32;&#32;WORD&#32;wVersionRequested;
949 &#32;&#32;&#32;&#32;WSADATA&#32;wsaData;
950 
951 &#32;&#32;&#32;&#32;wVersionRequested&#32;=&#32;MAKEWORD(2,&#32;2);
952 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;WSAStartup(wVersionRequested,&#32;&amp;wsaData);
953 
954 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;0)
955 &#32;&#32;&#32;&#32;{
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;WinSock&#32;failed&#32;to&#32;initialise.&quot;</emphasis>);
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
958 &#32;&#32;&#32;&#32;}
959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;WinSock&#32;initialised.&quot;</emphasis>);
960 
961 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(LOBYTE(wsaData.wVersion)&#32;!=&#32;2&#32;||&#32;HIBYTE(wsaData.wVersion)&#32;!=&#32;2)
962 &#32;&#32;&#32;&#32;{
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;WinSock&#32;failed&#32;to&#32;initialise.&quot;</emphasis>);
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WSACleanup();
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
966 &#32;&#32;&#32;&#32;}
967 
968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
969 <emphasis role="preprocessor">#else</emphasis>
970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
971 <emphasis role="preprocessor">#endif</emphasis>
972 }
973 
974 <emphasis role="comment">//&#32;&#32;&#32;&#32;Cleanup,&#32;and&#32;close&#32;the&#32;network</emphasis>
975 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa974e47901bd01a4a776436eb5428234">CloseNetworkDevice</link>(<emphasis role="keywordtype">void</emphasis>)
976 {
977 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
978 &#32;&#32;&#32;&#32;WSACleanup();
979 <emphasis role="preprocessor">#endif</emphasis>
980 }
981 
982 <emphasis role="comment">//&#32;&#32;&#32;&#32;Protocol-independent&#32;name&#32;resolution&#32;from&#32;an&#32;address&#32;to&#32;an&#32;ANSI&#32;host&#32;name</emphasis>
983 <emphasis role="comment">//&#32;&#32;&#32;&#32;and&#32;from&#32;a&#32;port&#32;number&#32;to&#32;the&#32;ANSI&#32;service&#32;name.</emphasis>
984 <emphasis role="comment">//</emphasis>
985 <emphasis role="comment">//&#32;&#32;&#32;&#32;The&#32;flags&#32;parameter&#32;can&#32;be&#32;used&#32;to&#32;customize&#32;processing&#32;of&#32;the&#32;getnameinfo&#32;function</emphasis>
986 <emphasis role="comment">//</emphasis>
987 <emphasis role="comment">//&#32;&#32;&#32;&#32;The&#32;following&#32;flags&#32;are&#32;available:</emphasis>
988 <emphasis role="comment">//</emphasis>
989 <emphasis role="comment">//&#32;&#32;&#32;&#32;NAME_INFO_DEFAULT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x00&#32;&#32;&#32;&#32;//&#32;No&#32;flags&#32;set</emphasis>
990 <emphasis role="comment">//&#32;&#32;&#32;&#32;NAME_INFO_NOFQDN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x01&#32;&#32;&#32;&#32;//&#32;Only&#32;return&#32;nodename&#32;portion&#32;for&#32;local&#32;hosts</emphasis>
991 <emphasis role="comment">//&#32;&#32;&#32;&#32;NAME_INFO_NUMERICHOST&#32;&#32;&#32;&#32;0x02&#32;&#32;&#32;&#32;//&#32;Return&#32;numeric&#32;form&#32;of&#32;the&#32;host&apos;s&#32;address</emphasis>
992 <emphasis role="comment">//&#32;&#32;&#32;&#32;NAME_INFO_NAMEREQD&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x04&#32;&#32;&#32;&#32;//&#32;Error&#32;if&#32;the&#32;host&apos;s&#32;name&#32;not&#32;in&#32;DNS</emphasis>
993 <emphasis role="comment">//&#32;&#32;&#32;&#32;NAME_INFO_NUMERICSERV&#32;&#32;&#32;&#32;0x08&#32;&#32;&#32;&#32;//&#32;Return&#32;numeric&#32;form&#32;of&#32;the&#32;service&#32;(port&#32;#)</emphasis>
994 <emphasis role="comment">//&#32;&#32;&#32;&#32;NAME_INFO_DGRAM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0x10&#32;&#32;&#32;&#32;//&#32;Service&#32;is&#32;a&#32;datagram&#32;service</emphasis>
995 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aecf982e4f2c0754b601b83891d4c5cbd">ResolveIP</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*ip,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*port,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*host,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*serv)
996 {
997 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Variables</emphasis>
998 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Status&#32;value&#32;to&#32;return&#32;(0)&#32;is&#32;success</emphasis>
999 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;hints;&#32;&#32;<emphasis role="comment">//&#32;Address&#32;flags&#32;(IPV4,&#32;IPV6,&#32;UDP?)</emphasis>
1000 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;pointer&#32;to&#32;the&#32;resulting&#32;address&#32;list</emphasis>
1001 
1002 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;hints</emphasis>
1003 &#32;&#32;&#32;&#32;memset(&amp;hints,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;hints);
1004 &#32;&#32;&#32;&#32;hints.ai_family&#32;=&#32;AF_UNSPEC;&#32;<emphasis role="comment">//&#32;Either&#32;IPv4&#32;or&#32;IPv6&#32;(AF_INET,&#32;AF_INET6)</emphasis>
1005 &#32;&#32;&#32;&#32;hints.ai_protocol&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Automatically&#32;select&#32;correct&#32;protocol&#32;(IPPROTO_TCP),&#32;(IPPROTO_UDP)</emphasis>
1006 
1007 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;address&#32;information</emphasis>
1008 &#32;&#32;&#32;&#32;status&#32;=&#32;getaddrinfo(ip,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;e.g.&#32;&quot;www.example.com&quot;&#32;or&#32;IP</emphasis>
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;port,&#32;&#32;&#32;<emphasis role="comment">//&#32;e.g.&#32;&quot;http&quot;&#32;or&#32;port&#32;number</emphasis>
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;hints,&#32;<emphasis role="comment">//&#32;e.g.&#32;SOCK_STREAM/SOCK_DGRAM</emphasis>
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;struct&#32;to&#32;populate</emphasis>
1012 &#32;&#32;&#32;&#32;);
1013 
1014 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Did&#32;we&#32;succeed?</emphasis>
1015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;0)&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;get&#32;resolve&#32;host&#32;%s:%s:&#32;%s&quot;</emphasis>,&#32;ip,&#32;port,&#32;gai_strerror(errno));
1016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Resolving...&#32;%s::%s&quot;</emphasis>,&#32;ip,&#32;port);
1017 
1018 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Attempt&#32;to&#32;resolve&#32;network&#32;byte&#32;order&#32;ip&#32;to&#32;hostname</emphasis>
1019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>-&gt;ai_family)
1020 &#32;&#32;&#32;&#32;{
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET:
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;getnameinfo(&amp;*((<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>-&gt;ai_addr),
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(*((<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>-&gt;ai_addr)),
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;host,&#32;NI_MAXHOST,&#32;serv,&#32;NI_MAXSERV,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET6:
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1030 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;getnameinfo(&amp;*((struct&#32;sockaddr_in6&#32;*)res-&gt;ai_addr),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
1031 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeof(*((struct&#32;sockaddr_in6&#32;*)res-&gt;ai_addr)),</emphasis>
1032 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;host,&#32;NI_MAXHOST,&#32;serv,&#32;NI_MAXSERV,&#32;flags);</emphasis>
1033 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
1036 &#32;&#32;&#32;&#32;}
1037 
1038 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;0)&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;resolve&#32;ip&#32;%s:&#32;%s&quot;</emphasis>,&#32;ip,&#32;SocketGetLastErrorString());
1039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;resolved&#32;%s::%s&#32;to&#32;%s&quot;</emphasis>,&#32;ip,&#32;port,&#32;host);
1040 
1041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;pointer&#32;to&#32;the&#32;data&#32;returned&#32;by&#32;addrinfo</emphasis>
1042 &#32;&#32;&#32;&#32;freeaddrinfo(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
1043 }
1044 
1045 <emphasis role="comment">//&#32;&#32;&#32;&#32;Protocol-independent&#32;translation&#32;from&#32;an&#32;ANSI&#32;host&#32;name&#32;to&#32;an&#32;address</emphasis>
1046 <emphasis role="comment">//</emphasis>
1047 <emphasis role="comment">//&#32;&#32;&#32;&#32;e.g.</emphasis>
1048 <emphasis role="comment">//&#32;&#32;&#32;&#32;const&#32;char*&#32;address&#32;=&#32;&quot;127.0.0.1&quot;&#32;(local&#32;address)</emphasis>
1049 <emphasis role="comment">//&#32;&#32;&#32;&#32;const&#32;char*&#32;port&#32;=&#32;&quot;80&quot;</emphasis>
1050 <emphasis role="comment">//</emphasis>
1051 <emphasis role="comment">//&#32;&#32;Parameters:</emphasis>
1052 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;const&#32;char*&#32;address&#32;-&#32;A&#32;pointer&#32;to&#32;a&#32;NULL-terminated&#32;ANSI&#32;string&#32;that&#32;contains&#32;a&#32;host&#32;(node)&#32;name&#32;or&#32;a&#32;numeric&#32;host&#32;address&#32;string.</emphasis>
1053 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;const&#32;char*&#32;service&#32;-&#32;A&#32;pointer&#32;to&#32;a&#32;NULL-terminated&#32;ANSI&#32;string&#32;that&#32;contains&#32;either&#32;a&#32;service&#32;name&#32;or&#32;port&#32;number&#32;represented&#32;as&#32;a&#32;string.</emphasis>
1054 <emphasis role="comment">//</emphasis>
1055 <emphasis role="comment">//&#32;&#32;&#32;&#32;Returns:</emphasis>
1056 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;total&#32;amount&#32;of&#32;addresses&#32;found,&#32;-1&#32;on&#32;error</emphasis>
1057 <emphasis role="comment">//</emphasis>
1058 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a55f9fc49dda7d2e6ba334837a92a408f">ResolveHost</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*address,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*service,&#32;<emphasis role="keywordtype">int</emphasis>&#32;addressType,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*outAddr)
1059 {
1060 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Variables</emphasis>
1061 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status;&#32;<emphasis role="comment">//&#32;Status&#32;value&#32;to&#32;return&#32;(0)&#32;is&#32;success</emphasis>
1062 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;hints;&#32;&#32;<emphasis role="comment">//&#32;Address&#32;flags&#32;(IPV4,&#32;IPV6,&#32;UDP?)</emphasis>
1063 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;will&#32;point&#32;to&#32;the&#32;results</emphasis>
1064 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>addrinfo&#32;*iterator;
1065 &#32;&#32;&#32;&#32;assert(((address&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>&#32;||&#32;address&#32;!=&#32;0)&#32;||&#32;(service&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>&#32;||&#32;service&#32;!=&#32;0)));
1066 &#32;&#32;&#32;&#32;assert(((addressType&#32;==&#32;AF_INET)&#32;||&#32;(addressType&#32;==&#32;AF_INET6)&#32;||&#32;(addressType&#32;==&#32;AF_UNSPEC)));
1067 
1068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;hints</emphasis>
1069 &#32;&#32;&#32;&#32;memset(&amp;hints,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>&#32;hints);
1070 &#32;&#32;&#32;&#32;hints.ai_family&#32;=&#32;addressType;&#32;<emphasis role="comment">//&#32;Either&#32;IPv4&#32;or&#32;IPv6&#32;(ADDRESS_TYPE_IPV4,&#32;ADDRESS_TYPE_IPV6)</emphasis>
1071 &#32;&#32;&#32;&#32;hints.ai_protocol&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;Automatically&#32;select&#32;correct&#32;protocol&#32;(IPPROTO_TCP),&#32;(IPPROTO_UDP)</emphasis>
1072 &#32;&#32;&#32;&#32;hints.ai_flags&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>;
1073 &#32;&#32;&#32;&#32;assert((hints.ai_addrlen&#32;==&#32;0)&#32;||&#32;(hints.ai_addrlen&#32;==&#32;0));
1074 &#32;&#32;&#32;&#32;assert((hints.ai_canonname&#32;==&#32;0)&#32;||&#32;(hints.ai_canonname&#32;==&#32;0));
1075 &#32;&#32;&#32;&#32;assert((hints.ai_addr&#32;==&#32;0)&#32;||&#32;(hints.ai_addr&#32;==&#32;0));
1076 &#32;&#32;&#32;&#32;assert((hints.ai_next&#32;==&#32;0)&#32;||&#32;(hints.ai_next&#32;==&#32;0));
1077 
1078 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;the&#32;address&#32;is&#32;NULL,&#32;populate&#32;the&#32;IP&#32;for&#32;me</emphasis>
1079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(address&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1080 &#32;&#32;&#32;&#32;{
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((hints.ai_flags&#32;&amp;&#32;AI_PASSIVE)&#32;==&#32;0)&#32;hints.ai_flags&#32;|=&#32;AI_PASSIVE;
1082 &#32;&#32;&#32;&#32;}
1083 
1084 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Resolving&#32;host...&quot;</emphasis>);
1085 
1086 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Populate&#32;address&#32;information</emphasis>
1087 &#32;&#32;&#32;&#32;status&#32;=&#32;getaddrinfo(address,&#32;<emphasis role="comment">//&#32;e.g.&#32;&quot;www.example.com&quot;&#32;or&#32;IP</emphasis>
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;service,&#32;<emphasis role="comment">//&#32;e.g.&#32;&quot;http&quot;&#32;or&#32;port&#32;number</emphasis>
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;hints,&#32;&#32;<emphasis role="comment">//&#32;e.g.&#32;SOCK_STREAM/SOCK_DGRAM</emphasis>
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;struct&#32;to&#32;populate</emphasis>
1091 &#32;&#32;&#32;&#32;);
1092 
1093 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Did&#32;we&#32;succeed?</emphasis>
1094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;!=&#32;0)
1095 &#32;&#32;&#32;&#32;{
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>&#32;=&#32;SocketGetLastError();
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;get&#32;resolve&#32;host:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(error));
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
1100 &#32;&#32;&#32;&#32;}
1101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;resolved&#32;host&#32;%s:%s&quot;</emphasis>,&#32;address,&#32;service);
1102 
1103 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;size&#32;of&#32;the&#32;address&#32;information&#32;list</emphasis>
1104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=&#32;0;
1105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(iterator&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;&#32;iterator&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;&#32;iterator&#32;=&#32;iterator-&gt;ai_next)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>++;
1106 
1107 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Validate&#32;the&#32;size&#32;is&#32;&gt;&#32;0,&#32;otherwise&#32;return</emphasis>
1108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;&lt;=&#32;0)
1109 &#32;&#32;&#32;&#32;{
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Error,&#32;no&#32;addresses&#32;found.&quot;</emphasis>);
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
1112 &#32;&#32;&#32;&#32;}
1113 
1114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;not&#32;address&#32;list&#32;was&#32;allocated,&#32;allocate&#32;it&#32;dynamically&#32;with&#32;the&#32;known&#32;address&#32;size</emphasis>
1115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outAddr&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;outAddr&#32;=&#32;(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>));
1116 
1117 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dynamically&#32;allocate&#32;an&#32;array&#32;of&#32;address&#32;information&#32;structs</emphasis>
1118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outAddr&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1119 &#32;&#32;&#32;&#32;{
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;&#32;++i)
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outAddr[i]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae2a03204f42d6cb31df4ea7c9f18b9cd">LoadAddress</link>();
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(outAddr[i]&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1129 
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outAddr[i]&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)&#32;outAddr&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1132 &#32;&#32;&#32;&#32;}
1133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1134 &#32;&#32;&#32;&#32;{
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Error,&#32;failed&#32;to&#32;dynamically&#32;allocate&#32;memory&#32;for&#32;the&#32;address&#32;list&quot;</emphasis>);
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
1137 &#32;&#32;&#32;&#32;}
1138 
1139 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;all&#32;the&#32;address&#32;information&#32;from&#32;res&#32;into&#32;outAddrList</emphasis>
1140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
1141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(iterator&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;&#32;iterator&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;&#32;iterator&#32;=&#32;iterator-&gt;ai_next)
1142 &#32;&#32;&#32;&#32;{
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outAddr[i]-&gt;addr.ai_flags&#32;=&#32;iterator-&gt;ai_flags;
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outAddr[i]-&gt;addr.ai_family&#32;=&#32;iterator-&gt;ai_family;
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outAddr[i]-&gt;addr.ai_socktype&#32;=&#32;iterator-&gt;ai_socktype;
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outAddr[i]-&gt;addr.ai_protocol&#32;=&#32;iterator-&gt;ai_protocol;
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outAddr[i]-&gt;addr.ai_addrlen&#32;=&#32;iterator-&gt;ai_addrlen;
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*outAddr[i]-&gt;addr.ai_addr&#32;=&#32;*iterator-&gt;ai_addr;
1151 <emphasis role="preprocessor">#if&#32;NET_DEBUG_ENABLED</emphasis>
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;GetAddressInformation&quot;</emphasis>);
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;\tFlags:&#32;0x%x&quot;</emphasis>,&#32;iterator-&gt;ai_flags);
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//PrintSocket(outAddr[i]-&gt;addr.ai_addr,&#32;outAddr[i]-&gt;addr.ai_family,&#32;outAddr[i]-&gt;addr.ai_socktype,&#32;outAddr[i]-&gt;addr.ai_protocol);</emphasis>
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Length&#32;of&#32;this&#32;sockaddr:&#32;%d&quot;</emphasis>,&#32;outAddr[i]-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>.ai_addrlen);
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Canonical&#32;name:&#32;%s&quot;</emphasis>,&#32;iterator-&gt;ai_canonname);
1157 <emphasis role="preprocessor">#endif</emphasis>
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1160 &#32;&#32;&#32;&#32;}
1161 
1162 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;pointer&#32;to&#32;the&#32;data&#32;returned&#32;by&#32;addrinfo</emphasis>
1163 &#32;&#32;&#32;&#32;freeaddrinfo(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
1164 
1165 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;total&#32;count&#32;of&#32;addresses&#32;found</emphasis>
1166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;
1167 }
1168 
1169 <emphasis role="comment">//&#32;&#32;&#32;&#32;This&#32;here&#32;is&#32;the&#32;bread&#32;and&#32;butter&#32;of&#32;the&#32;socket&#32;API,&#32;This&#32;function&#32;will</emphasis>
1170 <emphasis role="comment">//&#32;&#32;&#32;&#32;attempt&#32;to&#32;open&#32;a&#32;socket,&#32;bind&#32;and&#32;listen&#32;to&#32;it&#32;based&#32;on&#32;the&#32;config&#32;passed&#32;in</emphasis>
1171 <emphasis role="comment">//</emphasis>
1172 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketConfig*&#32;config&#32;-&#32;Configuration&#32;for&#32;which&#32;socket&#32;to&#32;open</emphasis>
1173 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketResult*&#32;result&#32;-&#32;The&#32;results&#32;of&#32;this&#32;function&#32;(if&#32;any,&#32;including&#32;errors)</emphasis>
1174 <emphasis role="comment">//</emphasis>
1175 <emphasis role="comment">//&#32;&#32;&#32;&#32;e.g.</emphasis>
1176 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketConfig&#32;server_config&#32;=&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketConfig&#32;client_config&#32;=&#32;{</emphasis>
1177 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.host&#32;=&#32;&quot;127.0.0.1&quot;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.host&#32;=&#32;&quot;127.0.0.1&quot;,</emphasis>
1178 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.port&#32;=&#32;8080,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.port&#32;=&#32;8080,</emphasis>
1179 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.server&#32;=&#32;true,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};</emphasis>
1180 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.nonblocking&#32;=&#32;true,</emphasis>
1181 <emphasis role="comment">//&#32;&#32;&#32;&#32;};</emphasis>
1182 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketResult&#32;server_res;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketResult&#32;client_res;</emphasis>
1183 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a522dc88d16849e1959bec2daaa6a1762">SocketCreate</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
1184 {
1185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Socket&#32;creation&#32;result</emphasis>
1186 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1187 
1188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;we&apos;ve&#32;not&#32;received&#32;a&#32;null&#32;config&#32;or&#32;result&#32;pointer</emphasis>
1189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>&#32;||&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;(success&#32;=&#32;<emphasis role="keyword">false</emphasis>);
1190 
1191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;defaults&#32;based&#32;on&#32;the&#32;config</emphasis>
1192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!SocketSetDefaults(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>))
1193 &#32;&#32;&#32;&#32;{
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Configuration&#32;Error.&quot;</emphasis>);
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1196 &#32;&#32;&#32;&#32;}
1197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1198 &#32;&#32;&#32;&#32;{
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;the&#32;socket</emphasis>
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CreateSocket(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>))
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;nonblocking)&#32;SocketSetNonBlocking(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket);
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;SocketSetBlocking(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket);
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1206 &#32;&#32;&#32;&#32;}
1207 
1208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success;
1209 }
1210 
1211 <emphasis role="comment">//&#32;Bind&#32;a&#32;socket&#32;to&#32;a&#32;local&#32;address</emphasis>
1212 <emphasis role="comment">//&#32;Note:&#32;The&#32;bind&#32;function&#32;is&#32;required&#32;on&#32;an&#32;unconnected&#32;socket&#32;before&#32;subsequent&#32;calls&#32;to&#32;the&#32;listen&#32;function.</emphasis>
1213 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1acf37e109a222380e783c1a34abee2abe">SocketBind</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
1214 {
1215 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1216 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;status&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aea87ce97f86effb2c4df6274d4aac567">RESULT_FAILURE</link>;
1217 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;*sock_addr&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1218 
1219 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;bind&#32;to&#32;a&#32;socket&#32;that&#32;isn&apos;t&#32;configured&#32;as&#32;a&#32;server</emphasis>
1220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsSocketValid(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket)&#32;||&#32;!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;server)
1221 &#32;&#32;&#32;&#32;{
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;Cannot&#32;bind&#32;to&#32;socket&#32;marked&#32;as&#32;\<emphasis role="stringliteral">&quot;Client\&quot;&#32;in&#32;SocketConfig.&quot;</emphasis>);
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1224 &#32;&#32;&#32;&#32;}
1225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1226 &#32;&#32;&#32;&#32;{
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;isIPv6)&#32;sock_addr&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;*)&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv6-&gt;address;
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;sock_addr&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;*)&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv4-&gt;address;
1229 
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock_addr&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bind(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;channel,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)sock_addr,&#32;<emphasis role="keyword">sizeof</emphasis>(*sock_addr))&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a633b0396ff93d336a088412a190a5072">SOCKET_ERROR</link>)
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;bound&#32;socket.&quot;</emphasis>);
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status&#32;=&#32;SocketGetLastError();
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status));
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1245 &#32;&#32;&#32;&#32;}
1246 
1247 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Was&#32;the&#32;bind&#32;a&#32;success?</emphasis>
1248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(success)
1249 &#32;&#32;&#32;&#32;{
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;status&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7cc1753a05a0821f6c70dd2bccfbab5c">RESULT_SUCCESS</link>;
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;ready&#32;=&#32;0;
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status&#32;=&#32;0;
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;socklen_t&#32;sock_len&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(*sock_addr);
1254 
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(getsockname(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;channel,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)sock_addr,&#32;&amp;sock_len)&#32;&lt;&#32;0)
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Couldn&apos;t&#32;get&#32;socket&#32;address&quot;</emphasis>);
1258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*s&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*)sock_addr;
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result-&gt;socket-&gt;address.host&#32;=&#32;s-&gt;sin_addr.s_addr;</emphasis>
1263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;result-&gt;socket-&gt;address.port&#32;=&#32;s-&gt;sin_port;</emphasis>
1264 
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv4&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv4&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv4));
1266 
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv4&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;memset(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv4,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv4));
1268 
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;addripv4-&gt;address,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in&#32;*)&amp;s-&gt;sin_addr,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in));
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1271 &#32;&#32;&#32;&#32;}
1272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success;
1273 }
1274 
1275 <emphasis role="comment">//&#32;Listens&#32;(and&#32;queues)&#32;incoming&#32;connections&#32;requests&#32;for&#32;a&#32;bound&#32;port.</emphasis>
1276 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8ad0ec061568a3118a945e83ab38ae36">SocketListen</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
1277 {
1278 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1279 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;status&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aea87ce97f86effb2c4df6274d4aac567">RESULT_FAILURE</link>;
1280 
1281 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;bind&#32;to&#32;a&#32;socket&#32;that&#32;isn&apos;t&#32;configured&#32;as&#32;a&#32;server</emphasis>
1282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsSocketValid(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket)&#32;||&#32;!<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;server)
1283 &#32;&#32;&#32;&#32;{
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Cannot&#32;listen&#32;on&#32;socket&#32;marked&#32;as&#32;\&quot;Client\&quot;&#32;in&#32;SocketConfig.&quot;</emphasis>);
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1286 &#32;&#32;&#32;&#32;}
1287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1288 &#32;&#32;&#32;&#32;{
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;listen&#32;on&#32;UDP&#32;sockets</emphasis>
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;type&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>))
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(listen(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;channel,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;backlog_size)&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a633b0396ff93d336a088412a190a5072">SOCKET_ERROR</link>)
1293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Started&#32;listening&#32;on&#32;socket...&quot;</emphasis>);
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status&#32;=&#32;SocketGetLastError();
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status));
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Cannot&#32;listen&#32;on&#32;socket&#32;marked&#32;as&#32;\&quot;UDP\&quot;&#32;(datagram)&#32;in&#32;SocketConfig.&quot;</emphasis>);
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1310 &#32;&#32;&#32;&#32;}
1311 
1312 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Was&#32;the&#32;listen&#32;a&#32;success?</emphasis>
1313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(success)
1314 &#32;&#32;&#32;&#32;{
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;status&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7cc1753a05a0821f6c70dd2bccfbab5c">RESULT_SUCCESS</link>;
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;ready&#32;=&#32;0;
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status&#32;=&#32;0;
1318 &#32;&#32;&#32;&#32;}
1319 
1320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success;
1321 }
1322 
1323 <emphasis role="comment">//&#32;Connect&#32;the&#32;socket&#32;to&#32;the&#32;destination&#32;specified&#32;by&#32;&quot;host&quot;&#32;and&#32;&quot;port&quot;&#32;in&#32;SocketConfig</emphasis>
1324 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aba11a54a2556ea0d8f93af8b538850f6">SocketConnect</link>(<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>,&#32;<link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
1325 {
1326 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1327 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;status&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aea87ce97f86effb2c4df6274d4aac567">RESULT_FAILURE</link>;
1328 
1329 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;bind&#32;to&#32;sockets&#32;marked&#32;as&#32;server</emphasis>
1330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;server)
1331 &#32;&#32;&#32;&#32;{
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Cannot&#32;connect&#32;to&#32;socket&#32;marked&#32;as&#32;\&quot;Server\&quot;&#32;in&#32;SocketConfig.&quot;</emphasis>);
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1334 &#32;&#32;&#32;&#32;}
1335 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1336 &#32;&#32;&#32;&#32;{
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsIPv4Address(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;host))
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;ip4addr;
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ip4addr.sin_family&#32;=&#32;AF_INET;
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;hport;
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hport&#32;=&#32;strtoul(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;port,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;0);
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ip4addr.sin_port&#32;=&#32;htons(hport);
1344 
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Changed&#32;the&#32;code&#32;to&#32;avoid&#32;the&#32;usage&#32;of&#32;inet_pton&#32;and&#32;inet_ntop&#32;replacing&#32;them&#32;with&#32;getnameinfo&#32;(that&#32;should&#32;have&#32;a&#32;better&#32;support&#32;on&#32;windows).</emphasis>
1346 
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//inet_pton(AF_INET,&#32;config-&gt;host,&#32;&amp;ip4addr.sin_addr);</emphasis>
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;connect_result&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2platform_8c_1a09fba7fe010bf5874aedf846155a0950">connect</link>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;channel,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;ip4addr,&#32;<emphasis role="keyword">sizeof</emphasis>(ip4addr));
1349 
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(connect_result&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a633b0396ff93d336a088412a190a5072">SOCKET_ERROR</link>)
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status&#32;=&#32;SocketGetLastError();
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1354 
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status)
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;WSAEWOULDBLOCK:&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status));
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;connected&#32;to&#32;socket.&quot;</emphasis>);
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(IsIPv6Address(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;host))
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;ip6addr;
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ip6addr.sin6_family&#32;=&#32;AF_INET6;
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;hport;
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hport&#32;=&#32;strtoul(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;port,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;0);
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ip6addr.sin6_port&#32;=&#32;htons(hport);
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//inet_pton(AF_INET6,&#32;config-&gt;host,&#32;&amp;ip6addr.sin6_addr);&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;connect_result&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2platform_8c_1a09fba7fe010bf5874aedf846155a0950">connect</link>(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;channel,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;ip6addr,&#32;<emphasis role="keyword">sizeof</emphasis>(ip6addr));
1382 
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(connect_result&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a633b0396ff93d336a088412a190a5072">SOCKET_ERROR</link>)
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status&#32;=&#32;SocketGetLastError();
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1387 
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status)
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;WSAEWOULDBLOCK:&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status));
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;connected&#32;to&#32;socket.&quot;</emphasis>);
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1405 &#32;&#32;&#32;&#32;}
1406 
1407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(success)
1408 &#32;&#32;&#32;&#32;{
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;status&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7cc1753a05a0821f6c70dd2bccfbab5c">RESULT_SUCCESS</link>;
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;ready&#32;=&#32;0;
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>-&gt;socket-&gt;status&#32;=&#32;0;
1412 &#32;&#32;&#32;&#32;}
1413 
1414 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success;
1415 }
1416 
1417 <emphasis role="comment">//&#32;&#32;&#32;&#32;Closes&#32;an&#32;existing&#32;socket</emphasis>
1418 <emphasis role="comment">//</emphasis>
1419 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketChannel&#32;socket&#32;-&#32;The&#32;id&#32;of&#32;the&#32;socket&#32;to&#32;close</emphasis>
1420 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1adb4e419587d33d420dfda94f506e23e8">SocketClose</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock)
1421 {
1422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1423 &#32;&#32;&#32;&#32;{
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a26769957ec1a2beaf223f33b66ee64ab">INVALID_SOCKET</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1afdbb9d84bd17efd2ae7290e664992c48">closesocket</link>(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>);
1425 &#32;&#32;&#32;&#32;}
1426 }
1427 
1428 <emphasis role="comment">//&#32;Returns&#32;the&#32;sockaddress&#32;for&#32;a&#32;specific&#32;socket&#32;in&#32;a&#32;generic&#32;storage&#32;struct</emphasis>
1429 <link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7a22c34741344764c4027d92e3935a20">SocketAddressStorage</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad52f97449470b062d1074a1cd7e4b497">SocketGetPeerAddress</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock)
1430 {
1431 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO.</emphasis>
1432 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1433 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(sock-&gt;isServer)&#32;return&#32;NULL;</emphasis>
1434 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;(sock-&gt;isIPv6)&#32;return&#32;sock-&gt;addripv6;</emphasis>
1435 <emphasis role="comment">&#32;&#32;&#32;&#32;else&#32;return&#32;sock-&gt;addripv4;</emphasis>
1436 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
1437 
1438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1439 }
1440 
1441 <emphasis role="comment">//&#32;Return&#32;the&#32;address-type&#32;appropriate&#32;host&#32;portion&#32;of&#32;a&#32;socket&#32;address</emphasis>
1442 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a40bc0aa46e0b8b6eeec34d0d951b1715">GetSocketAddressHost</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7a22c34741344764c4027d92e3935a20">SocketAddressStorage</link>&#32;storage)
1443 {
1444 &#32;&#32;&#32;&#32;assert(storage-&gt;address.ss_family&#32;==&#32;AF_INET&#32;||&#32;storage-&gt;address.ss_family&#32;==&#32;AF_INET6);
1445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;SocketAddressToString((<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*)storage);
1446 }
1447 
1448 <emphasis role="comment">//&#32;Return&#32;the&#32;address-type&#32;appropriate&#32;port(service)&#32;portion&#32;of&#32;a&#32;socket&#32;address</emphasis>
1449 <emphasis role="keywordtype">short</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae627dbc8fefd201251bb8e5924e28dcf">GetSocketAddressPort</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7a22c34741344764c4027d92e3935a20">SocketAddressStorage</link>&#32;storage)
1450 {
1451 &#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;ntohs(GetSocketPortPtr(storage));&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
1452 
1453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1454 }
1455 
1456 <emphasis role="comment">//&#32;&#32;&#32;&#32;The&#32;accept&#32;function&#32;permits&#32;an&#32;incoming&#32;connection&#32;attempt&#32;on&#32;a&#32;socket.</emphasis>
1457 <emphasis role="comment">//</emphasis>
1458 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketChannel&#32;&#32;&#32;&#32;listener&#32;&#32;&#32;&#32;-&#32;The&#32;socket&#32;to&#32;listen&#32;for&#32;incoming&#32;connections&#32;on&#32;(i.e.&#32;server)</emphasis>
1459 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketResult*&#32;&#32;&#32;&#32;out&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;The&#32;result&#32;of&#32;this&#32;function&#32;(if&#32;any,&#32;including&#32;errors)</emphasis>
1460 <emphasis role="comment">//</emphasis>
1461 <emphasis role="comment">//&#32;&#32;&#32;&#32;e.g.</emphasis>
1462 <emphasis role="comment">//</emphasis>
1463 <emphasis role="comment">//&#32;&#32;&#32;&#32;SocketResult&#32;connection;</emphasis>
1464 <emphasis role="comment">//&#32;&#32;&#32;&#32;bool&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;connected&#32;=&#32;false;</emphasis>
1465 <emphasis role="comment">//&#32;&#32;&#32;&#32;if&#32;(!connected)</emphasis>
1466 <emphasis role="comment">//&#32;&#32;&#32;&#32;{</emphasis>
1467 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(SocketAccept(server_res.socket.channel,&#32;&amp;connection))</emphasis>
1468 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{</emphasis>
1469 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;connected&#32;=&#32;true;</emphasis>
1470 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1471 <emphasis role="comment">//&#32;&#32;&#32;&#32;}</emphasis>
1472 <link linkend="_struct_socket">Socket</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a29824fed608e6775ec31ab91d1aeec20">SocketAccept</link>(<link linkend="_struct_socket">Socket</link>&#32;*server,&#32;<link linkend="_struct_socket_config">SocketConfig</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>)
1473 {
1474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!server-&gt;<link linkend="_struct_socket_1a6acb5848c334ef7e6e440c66e8cc2907">isServer</link>&#32;||&#32;server-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1475 
1476 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;sock_addr;
1477 &#32;&#32;&#32;&#32;socklen_t&#32;sock_alen;
1478 &#32;&#32;&#32;&#32;<link linkend="_struct_socket">Socket</link>&#32;*sock&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0cebe9c8f03fc94ae448651f3fa96ecd">LoadSocket</link>();
1479 &#32;&#32;&#32;&#32;server-&gt;<link linkend="_struct_socket_1a47d0d403ecbdbc00075730234dc15b85">ready</link>&#32;=&#32;0;
1480 &#32;&#32;&#32;&#32;sock_alen&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(sock_addr);
1481 &#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;=&#32;accept(server-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;sock_addr,&#32;&amp;sock_alen);
1482 
1483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a26769957ec1a2beaf223f33b66ee64ab">INVALID_SOCKET</link>)
1484 &#32;&#32;&#32;&#32;{
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1adb4e419587d33d420dfda94f506e23e8">SocketClose</link>(sock);
1489 
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1491 &#32;&#32;&#32;&#32;}
1492 
1493 &#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>-&gt;nonblocking)&#32;?&#32;SocketSetNonBlocking(sock)&#32;:&#32;SocketSetBlocking(sock);
1494 &#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a6acb5848c334ef7e6e440c66e8cc2907">isServer</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1495 &#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a47d0d403ecbdbc00075730234dc15b85">ready</link>&#32;=&#32;0;
1496 &#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>&#32;=&#32;server-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>;
1497 
1498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sock_addr.ss_family)
1499 &#32;&#32;&#32;&#32;{
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET:
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*s&#32;=&#32;((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*)&amp;sock_addr);
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv4&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>));
1504 
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(*sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>));
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>-&gt;address,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in&#32;*)&amp;s-&gt;sin_addr,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in));
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Server:&#32;Got&#32;connection&#32;from&#32;%s::%hu&quot;</emphasis>,&#32;SocketAddressToString((<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*)s),&#32;ntohs(sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>-&gt;address.sin_port));
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET6:
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;*s&#32;=&#32;((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;*)&amp;sock_addr);
1515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>_SocketAddressIPv6&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>));
1516 
1517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(*sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>));
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>-&gt;address,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in6&#32;*)&amp;s-&gt;sin6_addr,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr_in6));
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Server:&#32;Got&#32;connection&#32;from&#32;%s::%hu&quot;</emphasis>,&#32;SocketAddressToString((<emphasis role="keyword">struct</emphasis>&#32;sockaddr_storage&#32;*)s),&#32;ntohs(sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>-&gt;address.sin6_port));
1522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1524 &#32;&#32;&#32;&#32;}
1525 
1526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sock;
1527 }
1528 
1529 <emphasis role="comment">//&#32;Verify&#32;that&#32;the&#32;channel&#32;is&#32;in&#32;the&#32;valid&#32;range</emphasis>
1530 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;ValidChannel(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structchannel">channel</link>)
1531 {
1532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_structchannel">channel</link>&#32;&lt;&#32;0)&#32;||&#32;(<link linkend="_structchannel">channel</link>&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a3b984adc1aad0cbec4c6d9b45e5ba6d5">SOCKET_MAX_UDPCHANNELS</link>))
1533 &#32;&#32;&#32;&#32;{
1534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Invalid&#32;channel&quot;</emphasis>);
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1536 &#32;&#32;&#32;&#32;}
1537 
1538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
1539 }
1540 
1541 <emphasis role="comment">//&#32;Set&#32;the&#32;socket&#32;channel</emphasis>
1542 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1acbeb0d91b33a764d5da90f10ed925de1">SocketSetChannel</link>(<link linkend="_struct_socket">Socket</link>&#32;*socket,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structchannel">channel</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_i_p_address">IPAddress</link>&#32;*address)
1543 {
1544 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_u_d_p_channel">UDPChannel</link>&#32;*binding;
1545 
1546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(socket&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1547 &#32;&#32;&#32;&#32;{
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Passed&#32;a&#32;NULL&#32;socket&quot;</emphasis>);
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-1);
1550 &#32;&#32;&#32;&#32;}
1551 
1552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structchannel">channel</link>&#32;==&#32;-1)
1553 &#32;&#32;&#32;&#32;{
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_structchannel">channel</link>&#32;=&#32;0;&#32;<link linkend="_structchannel">channel</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a3b984adc1aad0cbec4c6d9b45e5ba6d5">SOCKET_MAX_UDPCHANNELS</link>;&#32;++<link linkend="_structchannel">channel</link>)
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binding&#32;=&#32;&amp;socket-&gt;<link linkend="_struct_socket_1aad2198fdc998f8f29fbb61900f2f690f">binding</link>[<link linkend="_structchannel">channel</link>];
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(binding-&gt;<link linkend="_struct_u_d_p_channel_1a832efa95aebb7d0a8e3cd482e6f74924">numbound</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a706cefcd61f57a478a950ca8d29e89b8">SOCKET_MAX_UDPADDRESSES</link>)&#32;<emphasis role="keywordflow">break</emphasis>;
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1559 &#32;&#32;&#32;&#32;}
1560 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1561 &#32;&#32;&#32;&#32;{
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!ValidChannel(<link linkend="_structchannel">channel</link>))&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-1);
1563 
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binding&#32;=&#32;&amp;socket-&gt;<link linkend="_struct_socket_1aad2198fdc998f8f29fbb61900f2f690f">binding</link>[<link linkend="_structchannel">channel</link>];
1565 &#32;&#32;&#32;&#32;}
1566 
1567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(binding-&gt;<link linkend="_struct_u_d_p_channel_1a832efa95aebb7d0a8e3cd482e6f74924">numbound</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a706cefcd61f57a478a950ca8d29e89b8">SOCKET_MAX_UDPADDRESSES</link>)
1568 &#32;&#32;&#32;&#32;{
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;No&#32;room&#32;for&#32;new&#32;addresses&quot;</emphasis>);
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-1);
1571 &#32;&#32;&#32;&#32;}
1572 
1573 &#32;&#32;&#32;&#32;binding-&gt;<link linkend="_struct_u_d_p_channel_1a2d254248edabe2083cac6e3ea2f61384">address</link>[binding-&gt;<link linkend="_struct_u_d_p_channel_1a832efa95aebb7d0a8e3cd482e6f74924">numbound</link>++]&#32;=&#32;*<link linkend="_struct_u_d_p_channel_1a2d254248edabe2083cac6e3ea2f61384">address</link>;
1574 
1575 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_structchannel">channel</link>);
1576 }
1577 
1578 <emphasis role="comment">//&#32;Remove&#32;the&#32;socket&#32;channel</emphasis>
1579 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a02411b2ff61874d3b2d9d8b435a79f91">SocketUnsetChannel</link>(<link linkend="_struct_socket">Socket</link>&#32;*socket,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structchannel">channel</link>)
1580 {
1581 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="_structchannel">channel</link>&#32;&gt;=&#32;0)&#32;&amp;&amp;&#32;(<link linkend="_structchannel">channel</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a3b984adc1aad0cbec4c6d9b45e5ba6d5">SOCKET_MAX_UDPCHANNELS</link>))&#32;socket-&gt;<link linkend="_struct_socket_1aad2198fdc998f8f29fbb61900f2f690f">binding</link>[<link linkend="_structchannel">channel</link>].<link linkend="_struct_u_d_p_channel_1a832efa95aebb7d0a8e3cd482e6f74924">numbound</link>&#32;=&#32;0;
1582 }
1583 
1584 <emphasis role="comment">/*&#32;Allocate/free&#32;a&#32;single&#32;UDP&#32;packet&#32;&apos;size&apos;&#32;bytes&#32;long.</emphasis>
1585 <emphasis role="comment">&#32;&#32;&#32;The&#32;new&#32;packet&#32;is&#32;returned,&#32;or&#32;NULL&#32;if&#32;the&#32;function&#32;ran&#32;out&#32;of&#32;memory.</emphasis>
1586 <emphasis role="comment">&#32;*/</emphasis>
1587 <link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a76188e5aad60c42deea2a9b751a45f07">AllocPacket</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
1588 {
1589 &#32;&#32;&#32;&#32;<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*packet&#32;=&#32;(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*packet));
1590 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>&#32;=&#32;1;
1591 
1592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(packet&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1593 &#32;&#32;&#32;&#32;{
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_socket_data_packet_1a24ba0f23a93ba04893979f0ac9efadb9">maxlen</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_socket_data_packet_1a829ec84af7e054a72213fe861512cf94">data</link>&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(packet-&gt;<link linkend="_struct_socket_data_packet_1a829ec84af7e054a72213fe861512cf94">data</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>&#32;=&#32;0;
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1600 &#32;&#32;&#32;&#32;}
1601 
1602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(error)
1603 &#32;&#32;&#32;&#32;{
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1abc4db040e1d2c72b1d0b1f9f3edbccf5">FreePacket</link>(packet);
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packet&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1606 &#32;&#32;&#32;&#32;}
1607 
1608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(packet);
1609 }
1610 
1611 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a9e60e3a2fdfc965dbcb9bb1da63315ec">ResizePacket</link>(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*packet,&#32;<emphasis role="keywordtype">int</emphasis>&#32;newsize)
1612 {
1613 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*newdata&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(newsize);
1614 
1615 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newdata&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1616 &#32;&#32;&#32;&#32;{
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(packet-&gt;<link linkend="_struct_socket_data_packet_1a829ec84af7e054a72213fe861512cf94">data</link>);
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_socket_data_packet_1a829ec84af7e054a72213fe861512cf94">data</link>&#32;=&#32;newdata;
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_socket_data_packet_1a24ba0f23a93ba04893979f0ac9efadb9">maxlen</link>&#32;=&#32;newsize;
1620 &#32;&#32;&#32;&#32;}
1621 
1622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(packet-&gt;<link linkend="_struct_socket_data_packet_1a24ba0f23a93ba04893979f0ac9efadb9">maxlen</link>);
1623 }
1624 
1625 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1abc4db040e1d2c72b1d0b1f9f3edbccf5">FreePacket</link>(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;*packet)
1626 {
1627 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(packet)
1628 &#32;&#32;&#32;&#32;{
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(packet-&gt;<link linkend="_struct_socket_data_packet_1a829ec84af7e054a72213fe861512cf94">data</link>);
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(packet);
1631 &#32;&#32;&#32;&#32;}
1632 }
1633 
1634 <emphasis role="comment">//&#32;Allocate/Free&#32;a&#32;UDP&#32;packet&#32;vector&#32;(array&#32;of&#32;packets)&#32;of&#32;&apos;howmany&apos;&#32;packets,&#32;each&#32;&apos;size&apos;&#32;bytes&#32;long.</emphasis>
1635 <emphasis role="comment">//&#32;A&#32;pointer&#32;to&#32;the&#32;packet&#32;array&#32;is&#32;returned,&#32;or&#32;NULL&#32;if&#32;the&#32;function&#32;ran&#32;out&#32;of&#32;memory.</emphasis>
1636 <link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;**<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6413e063cdbe9e7af1e77c087908053c">AllocPacketList</link>(<emphasis role="keywordtype">int</emphasis>&#32;howmany,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
1637 {
1638 &#32;&#32;&#32;&#32;<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;**packetV&#32;=&#32;(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;**)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>((howmany&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(*packetV));
1639 
1640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(packetV&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1641 &#32;&#32;&#32;&#32;{
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;howmany;&#32;++i)
1644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packetV[i]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a76188e5aad60c42deea2a9b751a45f07">AllocPacket</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(packetV[i]&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packetV[i]&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1652 
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;howmany)
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae38e93f37b95449bc5fcb7e408671b82">FreePacketList</link>(packetV);
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;packetV&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1658 &#32;&#32;&#32;&#32;}
1659 
1660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(packetV);
1661 }
1662 
1663 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae38e93f37b95449bc5fcb7e408671b82">FreePacketList</link>(<link linkend="_struct_socket_data_packet">SocketDataPacket</link>&#32;**packetV)
1664 {
1665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(packetV)
1666 &#32;&#32;&#32;&#32;{
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;packetV[i];&#32;++i)&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1abc4db040e1d2c72b1d0b1f9f3edbccf5">FreePacket</link>(packetV[i]);
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(packetV);
1669 &#32;&#32;&#32;&#32;}
1670 }
1671 
1672 <emphasis role="comment">//&#32;Send&#32;&apos;len&apos;&#32;bytes&#32;of&#32;&apos;data&apos;&#32;over&#32;the&#32;non-server&#32;socket&#32;&apos;sock&apos;</emphasis>
1673 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a75bab715e75916550bd46024525797f2">SocketSend</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*datap,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacelength">length</link>)
1674 {
1675 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sent&#32;=&#32;0;
1676 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;left&#32;=&#32;<link linkend="_namespacelength">length</link>;
1677 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;-1;
1678 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numsent&#32;=&#32;0;
1679 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)datap;
1680 
1681 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Server&#32;sockets&#32;are&#32;for&#32;accepting&#32;connections&#32;only</emphasis>
1682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1a6acb5848c334ef7e6e440c66e8cc2907">isServer</link>)
1683 &#32;&#32;&#32;&#32;{
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Cannot&#32;send&#32;information&#32;on&#32;a&#32;server&#32;socket&quot;</emphasis>);
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
1686 &#32;&#32;&#32;&#32;}
1687 
1688 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Which&#32;socket&#32;are&#32;we&#32;trying&#32;to&#32;send&#32;data&#32;on</emphasis>
1689 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>)
1690 &#32;&#32;&#32;&#32;{
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a2843397fd39bd96681bca78a8aa03096">SOCKET_TCP</link>:
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>&#32;=&#32;send(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;left,&#32;0);
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacelength">length</link>&#32;&gt;&#32;0)
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sent&#32;+=&#32;<link linkend="_namespacelength">length</link>;
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;left&#32;-=&#32;<link linkend="_namespacelength">length</link>;
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;+=&#32;<link linkend="_namespacelength">length</link>;
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;((left&#32;&gt;&#32;0)&#32;&amp;&amp;&#32;<emphasis role="comment">//&#32;While&#32;we&#32;still&#32;have&#32;bytes&#32;left&#32;to&#32;send</emphasis>
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<link linkend="_namespacelength">length</link>&#32;&gt;&#32;0)&#32;||&#32;<emphasis role="comment">//&#32;The&#32;amount&#32;of&#32;bytes&#32;we&#32;actually&#32;sent&#32;is&#32;&gt;&#32;0</emphasis>
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(SocketGetLastError()&#32;==&#32;WSAEINTR))&#32;<emphasis role="comment">//&#32;The&#32;socket&#32;was&#32;interupted</emphasis>
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
1707 
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacelength">length</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a633b0396ff93d336a088412a190a5072">SOCKET_ERROR</link>)
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;sent&#32;\&quot;%s\&quot;&#32;(%d&#32;bytes)&quot;</emphasis>,&#32;datap,&#32;sent);
1715 
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sent;
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>:
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1721 
1722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1aa00d7f299c6db6cb56a3fca7135da641">isIPv6</link>)&#32;status&#32;=&#32;sendto(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;left,&#32;0,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>-&gt;address,&#32;<emphasis role="keyword">sizeof</emphasis>(sock-&gt;<link linkend="_struct_socket_1ab6e5888e009fbf81f2c78a4ba1c1fea1">addripv6</link>-&gt;address));
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;status&#32;=&#32;sendto(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;left,&#32;0,&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>-&gt;address,&#32;<emphasis role="keyword">sizeof</emphasis>(sock-&gt;<link linkend="_struct_socket_1aace3e1d891ef6ce9f891d20a7e1096f0">addripv4</link>-&gt;address));
1724 
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sent&#32;&gt;=&#32;0)
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;0;
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++numsent;
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Successfully&#32;sent&#32;\&quot;%s\&quot;&#32;(%d&#32;bytes)&quot;</emphasis>,&#32;datap,&#32;status);
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketGetLastErrorString(sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1738 
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;numsent;
1740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
1742 &#32;&#32;&#32;&#32;}
1743 
1744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
1745 }
1746 
1747 <emphasis role="comment">//&#32;&#32;&#32;&#32;Receive&#32;up&#32;to&#32;&apos;maxlen&apos;&#32;bytes&#32;of&#32;data&#32;over&#32;the&#32;non-server&#32;socket&#32;&apos;sock&apos;,</emphasis>
1748 <emphasis role="comment">//&#32;&#32;&#32;&#32;and&#32;store&#32;them&#32;in&#32;the&#32;buffer&#32;pointed&#32;to&#32;by&#32;&apos;data&apos;.</emphasis>
1749 <emphasis role="comment">//&#32;&#32;&#32;&#32;This&#32;function&#32;returns&#32;the&#32;actual&#32;amount&#32;of&#32;data&#32;received.&#32;&#32;If&#32;the&#32;return</emphasis>
1750 <emphasis role="comment">//&#32;&#32;&#32;&#32;value&#32;is&#32;less&#32;than&#32;or&#32;equal&#32;to&#32;zero,&#32;then&#32;either&#32;the&#32;remote&#32;connection&#32;was</emphasis>
1751 <emphasis role="comment">//&#32;&#32;&#32;&#32;closed,&#32;or&#32;an&#32;unknown&#32;socket&#32;error&#32;occurred.</emphasis>
1752 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1add10df2d75939fec326dfdb98a4ba4b6">SocketReceive</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxlen)
1753 {
1754 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;0;
1755 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numrecv&#32;=&#32;0;
1756 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;status&#32;=&#32;0;
1757 &#32;&#32;&#32;&#32;socklen_t&#32;sock_len;
1758 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;sock_addr;
1759 &#32;&#32;&#32;&#32;<emphasis role="comment">//char&#32;ip[INET6_ADDRSTRLEN];</emphasis>
1760 
1761 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Server&#32;sockets&#32;are&#32;for&#32;accepting&#32;connections&#32;only</emphasis>
1762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1a6acb5848c334ef7e6e440c66e8cc2907">isServer</link>&#32;&amp;&amp;&#32;(sock-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a2843397fd39bd96681bca78a8aa03096">SOCKET_TCP</link>))
1763 &#32;&#32;&#32;&#32;{
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
1765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Server&#32;sockets&#32;cannot&#32;be&#32;used&#32;to&#32;receive&#32;data&quot;</emphasis>);
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1768 &#32;&#32;&#32;&#32;}
1769 
1770 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Which&#32;socket&#32;are&#32;we&#32;trying&#32;to&#32;send&#32;data&#32;on</emphasis>
1771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>)
1772 &#32;&#32;&#32;&#32;{
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a2843397fd39bd96681bca78a8aa03096">SOCKET_TCP</link>:
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;recv(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;maxlen,&#32;0);
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(SocketGetLastError()&#32;==&#32;WSAEINTR);
1780 
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;&#32;0)
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Who&#32;sent&#32;the&#32;packet?</emphasis>
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1afe0ea481a033784c3c1cb9f6f160e4c7">type</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>)
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//TRACELOG(LOG_DEBUG,&#32;&quot;Received&#32;data&#32;from:&#32;%s&quot;,&#32;inet_ntop(sock_addr.ss_family,&#32;GetSocketAddressPtr((struct&#32;sockaddr&#32;*)&amp;sock_addr),&#32;ip,&#32;sizeof(ip)));</emphasis>
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1788 
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>)[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;&#32;<emphasis role="comment">//&#32;Add&#32;null&#32;terminating&#32;character&#32;to&#32;the&#32;end&#32;of&#32;the&#32;stream</emphasis>
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Received&#32;\&quot;%s\&quot;&#32;(%d&#32;bytes)&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1792 
1793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a47d0d403ecbdbc00075730234dc15b85">ready</link>&#32;=&#32;0;
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa78c7398fa81f7f62aa233159d4d8d97a180747545a72ff6d0fd0569e781aefd5">SOCKET_UDP</link>:
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock_len&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(sock_addr);
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;status&#32;=&#32;recvfrom(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;receving&#32;channel</emphasis>
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;pointer&#32;to&#32;the&#32;data&#32;buffer&#32;to&#32;fill</emphasis>
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxlen,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;max&#32;length&#32;of&#32;the&#32;data&#32;to&#32;fill</emphasis>
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Flags</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">struct</emphasis>&#32;sockaddr&#32;*)&amp;sock_addr,&#32;<emphasis role="comment">//&#32;The&#32;address&#32;of&#32;the&#32;recevied&#32;data</emphasis>
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;sock_len&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;length&#32;of&#32;the&#32;received&#32;data&#32;address</emphasis>
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
1807 
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&gt;=&#32;0)&#32;++numrecv;
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
1812 
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>)
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;WSAEWOULDBLOCK:&#32;<emphasis role="keywordflow">break</emphasis>;
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1818 
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1822 
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a47d0d403ecbdbc00075730234dc15b85">ready</link>&#32;=&#32;0;
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;numrecv;
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
1827 &#32;&#32;&#32;&#32;}
1828 
1829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
1830 }
1831 
1832 <emphasis role="comment">//&#32;Does&#32;the&#32;socket&#32;have&#32;it&apos;s&#32;&apos;ready&apos;&#32;flag&#32;set?</emphasis>
1833 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a558a93f8b6938c62f9227a1dd2eb6798">IsSocketReady</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock)
1834 {
1835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(sock&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;&amp;&amp;&#32;(sock-&gt;<link linkend="_struct_socket_1a47d0d403ecbdbc00075730234dc15b85">ready</link>);
1836 }
1837 
1838 <emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;socket&#32;is&#32;considered&#32;connected</emphasis>
1839 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a2d4cd08dd2c37e8d5733f8b68ac19489">IsSocketConnected</link>(<link linkend="_struct_socket">Socket</link>&#32;*sock)
1840 {
1841 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
1842 &#32;&#32;&#32;&#32;FD_SET&#32;writefds;
1843 &#32;&#32;&#32;&#32;FD_ZERO(&amp;writefds);
1844 &#32;&#32;&#32;&#32;FD_SET(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;&amp;writefds);
1845 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timeval&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>;
1846 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>.tv_sec&#32;=&#32;1;
1847 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>.tv_usec&#32;=&#32;1000000000UL;
1848 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;total&#32;=&#32;<link linkend="_namespacelest_1a1edb8bb9cf6c9793b8626cd80dcf1904">select</link>(0,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;&amp;writefds,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>);
1849 
1850 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(total&#32;==&#32;-1)
1851 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;Error</emphasis>
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>&#32;=&#32;SocketGetLastError();
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(sock-&gt;<link linkend="_struct_socket_1a33ff343175b4512f951ba4fe505b9d3a">status</link>));
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1855 &#32;&#32;&#32;&#32;}
1856 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(total&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;<emphasis role="comment">//&#32;Timeout</emphasis>
1857 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FD_ISSET(sock-&gt;<link linkend="_struct_socket_1a83196291eb07d0d3e44eeff71449253c">channel</link>,&#32;&amp;writefds))&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1858 
1859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1860 <emphasis role="preprocessor">#else</emphasis>
1861 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1862 <emphasis role="preprocessor">#endif</emphasis>
1863 }
1864 
1865 <emphasis role="comment">//&#32;Allocate&#32;and&#32;return&#32;a&#32;SocketResult&#32;struct</emphasis>
1866 <link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0a04d869981037d5c9fff8a5d9acd5b0">LoadSocketResult</link>(<emphasis role="keywordtype">void</emphasis>)
1867 {
1868 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_result">SocketResult</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_result">SocketResult</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>));
1869 
1870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1871 &#32;&#32;&#32;&#32;{
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>));
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>-&gt;socket&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0cebe9c8f03fc94ae448651f3fa96ecd">LoadSocket</link>())&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1878 &#32;&#32;&#32;&#32;}
1879 
1880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
1881 }
1882 
1883 <emphasis role="comment">//&#32;Free&#32;an&#32;allocated&#32;SocketResult</emphasis>
1884 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a70ffb393df8af12caff6459c0800f0a5">UnloadSocketResult</link>(<link linkend="_struct_socket_result">SocketResult</link>&#32;**<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
1885 {
1886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1887 &#32;&#32;&#32;&#32;{
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*result)-&gt;socket&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5195a4b40e90c87de73d50634548100a">UnloadSocket</link>(&amp;((*result)-&gt;socket));
1889 
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1892 &#32;&#32;&#32;&#32;}
1893 }
1894 
1895 <emphasis role="comment">//&#32;Allocate&#32;a&#32;Socket</emphasis>
1896 <link linkend="_struct_socket">Socket</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a0cebe9c8f03fc94ae448651f3fa96ecd">LoadSocket</link>(<emphasis role="keywordtype">void</emphasis>)
1897 {
1898 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket">Socket</link>&#32;*sock;
1899 &#32;&#32;&#32;&#32;sock&#32;=&#32;(<link linkend="_struct_socket">Socket</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*sock));
1900 
1901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;memset(sock,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(*sock));
1902 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1903 &#32;&#32;&#32;&#32;{
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Ran&#32;out&#32;of&#32;memory&#32;attempting&#32;to&#32;allocate&#32;a&#32;socket&quot;</emphasis>);
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1adb4e419587d33d420dfda94f506e23e8">SocketClose</link>(sock);
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(sock);
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sock&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1908 &#32;&#32;&#32;&#32;}
1909 
1910 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sock;
1911 }
1912 
1913 <emphasis role="comment">//&#32;Free&#32;an&#32;allocated&#32;Socket</emphasis>
1914 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a5195a4b40e90c87de73d50634548100a">UnloadSocket</link>(<link linkend="_struct_socket">Socket</link>&#32;**sock)
1915 {
1916 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*sock&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1917 &#32;&#32;&#32;&#32;{
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(*sock);
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*sock&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1920 &#32;&#32;&#32;&#32;}
1921 }
1922 
1923 <emphasis role="comment">//&#32;Allocate&#32;a&#32;SocketSet</emphasis>
1924 <link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7919801f20cf31cda1b69270d74ff641">LoadSocketSet</link>(<emphasis role="keywordtype">int</emphasis>&#32;max)
1925 {
1926 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket_set">SocketSet</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<emphasis role="keyword">sizeof</emphasis>(*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>));
1927 
1928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1929 &#32;&#32;&#32;&#32;{
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;<link linkend="_struct_socket_set_1a7ad2aa8a67299f6df9dbd0ac61aa9d38">numsockets</link>&#32;=&#32;0;
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;maxsockets&#32;=&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>;
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket">Socket</link>&#32;**)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(max&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets));
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>;&#32;++i)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>);
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1942 &#32;&#32;&#32;&#32;}
1943 
1944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>);
1945 }
1946 
1947 <emphasis role="comment">//&#32;Free&#32;an&#32;allocated&#32;SocketSet</emphasis>
1948 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ab5fe07b39551f2a6f30027f1856f6161">UnloadSocketSet</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>)
1949 {
1950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>)
1951 &#32;&#32;&#32;&#32;{
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets);
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>);
1954 &#32;&#32;&#32;&#32;}
1955 }
1956 
1957 <emphasis role="comment">//&#32;Add&#32;a&#32;Socket&#32;&quot;sock&quot;&#32;to&#32;the&#32;SocketSet&#32;&quot;set&quot;</emphasis>
1958 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1adfedffc78ad3f1fceeb2e0dc277a0e73">AddSocket</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>,&#32;<link linkend="_struct_socket">Socket</link>&#32;*sock)
1959 {
1960 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1961 &#32;&#32;&#32;&#32;{
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;maxsockets)
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;SocketSet&#32;is&#32;full&quot;</emphasis>);
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-1);
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets++]&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_socket">Socket</link>&#32;*)sock;
1969 &#32;&#32;&#32;&#32;}
1970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1971 &#32;&#32;&#32;&#32;{
1972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;was&#32;null&quot;</emphasis>);
1973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-1);
1975 &#32;&#32;&#32;&#32;}
1976 
1977 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets);
1978 }
1979 
1980 <emphasis role="comment">//&#32;Remove&#32;a&#32;Socket&#32;&quot;sock&quot;&#32;to&#32;the&#32;SocketSet&#32;&quot;set&quot;</emphasis>
1981 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a495bc9c4544f725a88eee4a97b16aef8">RemoveSocket</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>,&#32;<link linkend="_struct_socket">Socket</link>&#32;*sock)
1982 {
1983 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sock&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
1984 &#32;&#32;&#32;&#32;{
1985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
1986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets;&#32;++i)
1987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]&#32;==&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_socket">Socket</link>&#32;*)sock)&#32;<emphasis role="keywordflow">break</emphasis>;
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1990 
1991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets)
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285ab9f002c6ffbfd511da8090213227454e">LOG_DEBUG</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;not&#32;found&quot;</emphasis>);
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(-1);
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1997 
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets;
1999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets;&#32;++i)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i&#32;+&#32;1];
2000 &#32;&#32;&#32;&#32;}
2001 
2002 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets);
2003 }
2004 
2005 <emphasis role="comment">//&#32;Check&#32;the&#32;sockets&#32;in&#32;the&#32;socket&#32;set&#32;for&#32;pending&#32;information</emphasis>
2006 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1abb554d0ca8efb5b1268b419b0102520b">CheckSockets</link>(<link linkend="_struct_socket_set">SocketSet</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>)
2007 {
2008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
2009 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aff55fe551a9992a54ec54621c524d0a4">SOCKET</link>&#32;maxfd;
2010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;retval;
2011 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timeval&#32;tv;
2012 &#32;&#32;&#32;&#32;fd_set&#32;<link linkend="_namespacemask">mask</link>;
2013 
2014 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Find&#32;the&#32;largest&#32;file&#32;descriptor&#32;*/</emphasis>
2015 &#32;&#32;&#32;&#32;maxfd&#32;=&#32;0;
2016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
2017 &#32;&#32;&#32;&#32;{
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]-&gt;channel&#32;&gt;&#32;maxfd)
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxfd&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]-&gt;channel;
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2022 &#32;&#32;&#32;&#32;}
2023 
2024 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;the&#32;file&#32;descriptors&#32;for&#32;available&#32;data</emphasis>
2025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
2026 &#32;&#32;&#32;&#32;{
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
2028 
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;up&#32;the&#32;mask&#32;of&#32;file&#32;descriptors</emphasis>
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_ZERO(&amp;<link linkend="_namespacemask">mask</link>);
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FD_SET(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]-&gt;channel,&#32;&amp;<link linkend="_namespacemask">mask</link>);
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;Set&#32;up&#32;the&#32;timeout</emphasis>
2035 
2036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tv.tv_sec&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;/&#32;1000;
2037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tv.tv_usec&#32;=&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad29bb0d8468b264a4e3d9204366cfaab">timeout</link>&#32;%&#32;1000)&#32;*&#32;1000;
2038 
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;Look!&#32;*/</emphasis>
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retval&#32;=&#32;<link linkend="_namespacelest_1a1edb8bb9cf6c9793b8626cd80dcf1904">select</link>(maxfd&#32;+&#32;1,&#32;&amp;<link linkend="_namespacemask">mask</link>,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>,&#32;&amp;tv);
2041 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(SocketGetLastError()&#32;==&#32;WSAEINTR);
2042 
2043 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Mark&#32;all&#32;file&#32;descriptors&#32;ready&#32;that&#32;have&#32;data&#32;available</emphasis>
2044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(retval&#32;&gt;&#32;0)
2045 &#32;&#32;&#32;&#32;{
2046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;numsockets&#32;-&#32;1;&#32;i&#32;&gt;=&#32;0;&#32;--i)
2047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FD_ISSET(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]-&gt;channel,&#32;&amp;<link linkend="_namespacemask">mask</link>))&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>-&gt;sockets[i]-&gt;ready&#32;=&#32;1;
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2050 &#32;&#32;&#32;&#32;}
2051 
2052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;retval;
2053 }
2054 
2055 <emphasis role="comment">//&#32;Allocate&#32;an&#32;AddressInformation</emphasis>
2056 <link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ae2a03204f42d6cb31df4ea7c9f18b9cd">LoadAddress</link>(<emphasis role="keywordtype">void</emphasis>)
2057 {
2058 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;addressInfo&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
2059 &#32;&#32;&#32;&#32;addressInfo&#32;=&#32;(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1af5dac568c5ed0cdfeea1c2322e7174d1">RNET_CALLOC</link>(1,&#32;<emphasis role="keyword">sizeof</emphasis>(*addressInfo));
2060 
2061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addressInfo&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
2062 &#32;&#32;&#32;&#32;{
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addressInfo-&gt;addr.ai_addr&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>sockaddr&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1af5dac568c5ed0cdfeea1c2322e7174d1">RNET_CALLOC</link>(1,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">struct</emphasis>&#32;sockaddr));
2064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(addressInfo-&gt;addr.ai_addr&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;allocate&#32;memory&#32;for&#32;\&quot;struct&#32;sockaddr\&quot;&quot;</emphasis>);
2065 &#32;&#32;&#32;&#32;}
2066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;allocate&#32;memory&#32;for&#32;\&quot;struct&#32;AddressInformation\&quot;&quot;</emphasis>);
2067 
2068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;addressInfo;
2069 }
2070 
2071 <emphasis role="comment">//&#32;Free&#32;an&#32;AddressInformation&#32;struct</emphasis>
2072 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ad37277a5289b09cb964d542f343b932c">UnloadAddress</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*addressInfo)
2073 {
2074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*addressInfo&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
2075 &#32;&#32;&#32;&#32;{
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((*addressInfo)-&gt;addr.ai_addr&#32;!=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
2077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>((*addressInfo)-&gt;addr.ai_addr);
2079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*addressInfo)-&gt;addr.ai_addr&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2081 
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a73bf53ba681dd57ba5a0b677f89f42c7">RNET_FREE</link>(*addressInfo);
2083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*addressInfo&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
2084 &#32;&#32;&#32;&#32;}
2085 }
2086 
2087 <emphasis role="comment">//&#32;Allocate&#32;a&#32;list&#32;of&#32;AddressInformation</emphasis>
2088 <link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a7065cb129962ecb2d6d67b87d8261ef5">LoadAddressList</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
2089 {
2090 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>;
2091 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>&#32;=&#32;(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;*)<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a6087bff342a6ee0522d115e0abca6126">RNET_MALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>));
2092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a74558cb2034ec88c1188d64a77bd3bac">addr</link>;
2093 }
2094 
2095 <emphasis role="comment">//&#32;Opaque&#32;datatype&#32;accessor&#32;addrinfo-&gt;ai_family</emphasis>
2096 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a635dd34c43b71fecfcc7520ea09352a4">GetAddressFamily</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address)
2097 {
2098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;address-&gt;addr.ai_family;
2099 }
2100 
2101 <emphasis role="comment">//&#32;Opaque&#32;datatype&#32;accessor&#32;addrinfo-&gt;ai_socktype</emphasis>
2102 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a1b3484a52be7986604e1cc1e4db773be">GetAddressSocketType</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address)
2103 {
2104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;address-&gt;addr.ai_socktype;
2105 }
2106 
2107 <emphasis role="comment">//&#32;Opaque&#32;datatype&#32;accessor&#32;addrinfo-&gt;ai_protocol</emphasis>
2108 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1aa473777697288b6043bccfc7305b3635">GetAddressProtocol</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address)
2109 {
2110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;address-&gt;addr.ai_protocol;
2111 }
2112 
2113 <emphasis role="comment">//&#32;Opaque&#32;datatype&#32;accessor&#32;addrinfo-&gt;ai_canonname</emphasis>
2114 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a47af7050a9549107d5f5f2bb8b170211">GetAddressCanonName</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address)
2115 {
2116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;address-&gt;addr.ai_canonname;
2117 }
2118 
2119 <emphasis role="comment">//&#32;Opaque&#32;datatype&#32;accessor&#32;addrinfo-&gt;ai_addr</emphasis>
2120 <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a81267bfd7fdff96179ee5d87604862a8">GetAddressHostAndPort</link>(<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a8b0f11465f1f7747917d48ce8369cec0">AddressInformation</link>&#32;address,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*outhost,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*outport)
2121 {
2122 &#32;&#32;&#32;&#32;<emphasis role="comment">//char&#32;*ip[INET6_ADDRSTRLEN];</emphasis>
2123 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
2124 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;*storage&#32;=&#32;(<emphasis role="keyword">struct&#32;</emphasis>sockaddr_storage&#32;*)address-&gt;addr.ai_addr;
2125 
2126 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(storage-&gt;ss_family)
2127 &#32;&#32;&#32;&#32;{
2128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET:
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*s&#32;=&#32;((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in&#32;*)address-&gt;addr.ai_addr);
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//result&#32;=&#32;inet_ntop(AF_INET,&#32;&amp;s-&gt;sin_addr,&#32;ip,&#32;INET_ADDRSTRLEN);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*outport&#32;=&#32;ntohs(s-&gt;sin_port);
2133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;AF_INET6:
2135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;*s&#32;=&#32;((<emphasis role="keyword">struct&#32;</emphasis>sockaddr_in6&#32;*)address-&gt;addr.ai_addr);
2137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//result&#32;=&#32;inet_ntop(AF_INET6,&#32;&amp;s-&gt;sin6_addr,&#32;ip,&#32;INET6_ADDRSTRLEN);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;TODO.</emphasis>
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*outport&#32;=&#32;ntohs(s-&gt;sin6_port);
2139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
2141 &#32;&#32;&#32;&#32;}
2142 
2143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;==&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>)
2144 &#32;&#32;&#32;&#32;{
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a8f6fe15bfe15104da6d1b360194a5400">LOG_WARNING</link>,&#32;<emphasis role="stringliteral">&quot;Socket&#32;Error:&#32;%s&quot;</emphasis>,&#32;SocketErrorCodeToString(SocketGetLastError()));
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SocketSetLastError(0);
2147 &#32;&#32;&#32;&#32;}
2148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2149 &#32;&#32;&#32;&#32;{
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;strcpy(outhost,&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>);
2151 &#32;&#32;&#32;&#32;}
2152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
2153 }
2154 
2155 <emphasis role="comment">//</emphasis>
2156 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a1abe34162b80e7a71e127353f55f4c95">PacketSend</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet)
2157 {
2158 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Sending&#32;packet&#32;(%s)&#32;with&#32;size&#32;%d\n&quot;</emphasis>,&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>,&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>);
2159 }
2160 
2161 <emphasis role="comment">//</emphasis>
2162 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a399d94d0d0388eda67d18ad1aca22840">PacketReceive</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet)
2163 {
2164 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Receiving&#32;packet&#32;(%s)&#32;with&#32;size&#32;%d\n&quot;</emphasis>,&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>,&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>);
2165 }
2166 
2167 <emphasis role="comment">//</emphasis>
2168 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a16236af8cbe6a610c71d54bbf687e231">PacketWrite16</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="_classvalue">value</link>)
2169 {
2170 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Original:&#32;0x%04&quot;</emphasis>&#32;PRIX16&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu16&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;<link linkend="_classvalue">value</link>,&#32;<link linkend="_classvalue">value</link>);
2171 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;=&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;+&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>;
2172 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;8);
2173 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>);
2174 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>);
2175 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>);
2176 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Network:&#32;0x%04&quot;</emphasis>&#32;PRIX16&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu16&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>)&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>,&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>)&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>);
2177 }
2178 
2179 <emphasis role="comment">//</emphasis>
2180 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1af19e701801e3ad5abc627a8066b8a05d">PacketWrite32</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_classvalue">value</link>)
2181 {
2182 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Original:&#32;0x%08&quot;</emphasis>&#32;PRIX32&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu32&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;<link linkend="_classvalue">value</link>,&#32;<link linkend="_classvalue">value</link>);
2183 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;=&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;+&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>;
2184 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;24);
2185 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;16);
2186 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;8);
2187 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>);
2188 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>);
2189 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>);
2190 
2191 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Network:&#32;0x%08&quot;</emphasis>&#32;PRIX32&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu32&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,
2192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>)(((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1abd3131a20f4053d808d4277db3e39a23">intptr_t</link>)&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>)&#32;-&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>),
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>)(((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1abd3131a20f4053d808d4277db3e39a23">intptr_t</link>)&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>)&#32;-&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>));
2194 }
2195 
2196 <emphasis role="comment">//</emphasis>
2197 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a80ea7b1788991d155a9a5e5a631774d4">PacketWrite64</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_classvalue">value</link>)
2198 {
2199 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Original:&#32;0x%016&quot;</emphasis>&#32;PRIX64&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu64&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;<link linkend="_classvalue">value</link>,&#32;<link linkend="_classvalue">value</link>);
2200 
2201 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;=&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;+&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>;
2202 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;56);
2203 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;48);
2204 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;40);
2205 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;32);
2206 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;24);
2207 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;16);
2208 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>&#32;&gt;&gt;&#32;8);
2209 &#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>++&#32;=&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>)(<link linkend="_classvalue">value</link>);
2210 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>);
2211 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>);
2212 
2213 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Network:&#32;0x%016&quot;</emphasis>&#32;PRIX64&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu64&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)(packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;-&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>),&#32;(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)(packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;-&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>));
2214 }
2215 
2216 <emphasis role="comment">//</emphasis>
2217 <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1ab1c061c9443cacbacf92be74c348cf68">PacketRead16</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet)
2218 {
2219 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;=&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;+&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>;
2220 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>);
2221 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>);
2222 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[0]&#32;&lt;&lt;&#32;8)&#32;|&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[1];
2223 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Original:&#32;0x%04&quot;</emphasis>&#32;PRIX16&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu16&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;<link linkend="_classvalue">value</link>,&#32;<link linkend="_classvalue">value</link>);
2224 
2225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>;
2226 }
2227 
2228 <emphasis role="comment">//</emphasis>
2229 <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a844639e4c0c9bf1a9236c77592f6af08">PacketRead32</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet)
2230 {
2231 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;=&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;+&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>;
2232 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>);
2233 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>);
2234 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[0]&#32;&lt;&lt;&#32;24)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[1]&#32;&lt;&lt;&#32;16)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[2]&#32;&lt;&lt;&#32;8)&#32;|&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[3];
2235 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Original:&#32;0x%08&quot;</emphasis>&#32;PRIX32&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu32&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;<link linkend="_classvalue">value</link>,&#32;<link linkend="_classvalue">value</link>);
2236 
2237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>;
2238 }
2239 
2240 <emphasis role="comment">//</emphasis>
2241 <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2rnet_8h_1a2025285e8fc45f29b998a3704e3f60a3">PacketRead64</link>(<link linkend="_struct_packet">Packet</link>&#32;*packet)
2242 {
2243 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>&#32;=&#32;packet-&gt;<link linkend="_struct_packet_1ade9312d85fee981abc224b406e2a38f0">data</link>&#32;+&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>;
2244 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a9cdc9e7d0ba4e9d4e55fc9ffc16a370d">size</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>);
2245 &#32;&#32;&#32;&#32;packet-&gt;<link linkend="_struct_packet_1a38f48618871eca60cf7985d40503d0d6">offs</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>);
2246 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[0]&#32;&lt;&lt;&#32;56)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[1]&#32;&lt;&lt;&#32;48)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[2]&#32;&lt;&lt;&#32;40)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[3]&#32;&lt;&lt;&#32;32)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[4]&#32;&lt;&lt;&#32;24)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[5]&#32;&lt;&lt;&#32;16)&#32;|&#32;((<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[6]&#32;&lt;&lt;&#32;8)&#32;|&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>[7];
2247 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2utils_8h_1a212a8b81c98d325e306bbccb0c0ab02a">TRACELOG</link>(<link linkend="__classes_2lib_2raylib_8h_1a53d4e0542e6c07e7792510e986785285a6e98ff471e3ce6c4ef2d75c37ee51837">LOG_INFO</link>,&#32;<emphasis role="stringliteral">&quot;Original:&#32;0x%016&quot;</emphasis>&#32;PRIX64&#32;<emphasis role="stringliteral">&quot;&#32;-&#32;%&quot;</emphasis>&#32;PRIu64&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>,&#32;<link linkend="_classvalue">value</link>,&#32;<link linkend="_classvalue">value</link>);
2248 
2249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>;
2250 }
2251 
2252 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;RNET_IMPLEMENTATION</emphasis>
</programlisting></section>
