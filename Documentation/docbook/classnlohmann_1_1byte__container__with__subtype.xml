<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1byte__container__with__subtype" xml:lang="en-US">
<title>nlohmann::byte_container_with_subtype&lt; BinaryType &gt; Class Template Reference</title>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary></indexterm>
<para>

<para>an internal type for a backed binary type </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
Inheritance diagram for nlohmann::byte_container_with_subtype&lt; BinaryType &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1byte__container__with__subtype__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for nlohmann::byte_container_with_subtype&lt; BinaryType &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1byte__container__with__subtype__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> = BinaryType</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> = std::uint64_t</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1byte__container__with__subtype_1a89c78caf8c7b54dc1bcfa4b0b23d2fc8">byte_container_with_subtype</link> () noexcept(noexcept(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>()))</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1byte__container__with__subtype_1a640b6dd55847e86dbb936f97b946170e">byte_container_with_subtype</link> (const <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>) noexcept(noexcept(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)))</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1byte__container__with__subtype_1a73dcae1798eab1b496936bfae7b4b9c0">byte_container_with_subtype</link> (<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>) noexcept(noexcept(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>))))</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1byte__container__with__subtype_1a3c0a82d77668f384bce05c6ec4537cfe">byte_container_with_subtype</link> (const <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>, <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> subtype_) noexcept(noexcept(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)))</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1byte__container__with__subtype_1a8c61acfee31216f530d2bd37571a6ff4">byte_container_with_subtype</link> (<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>, <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> subtype_) noexcept(noexcept(<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>))))</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype_1aee67fde9d3d571a07d5bb35df21c0555">operator==</link> (const <link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a760bf39cc5477bc663d8bb3c44aabf6a">operator!=</link> (const <link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link> &amp;rhs) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype_1aa8f9fca70673949d7483a6097d00d61c">set_subtype</link> (<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> subtype_) noexcept</para>

<para>sets the binary subtype </para>
</listitem>
            <listitem><para>constexpr <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abe68a969df28c8cb0b63355b4d38ec1a">subtype</link> () const noexcept</para>

<para>return the binary subtype </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a9fc42fb07003bf7048c2f1fc79478e02">has_subtype</link> () const noexcept</para>

<para>return whether the value has a subtype </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a7b122b28ff2b8680557ca44ac9748e49">clear_subtype</link> () noexcept</para>

<para>clears the binary subtype </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename BinaryType&gt;<?linebreak?>class nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</title></simplesect>

<para>an internal type for a backed binary type </para>



<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/</link> </para>
</formalpara>
</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713"/><section>
    <title>container_type</title>
<indexterm><primary>container_type</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>container_type</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::container_type =  BinaryType</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70"/><section>
    <title>subtype_type</title>
<indexterm><primary>subtype_type</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>subtype_type</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::subtype_type =  std::uint64_t</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a89c78caf8c7b54dc1bcfa4b0b23d2fc8"/><section>
    <title>byte_container_with_subtype()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>byte_container_with_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>byte_container_with_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::byte_container_with_subtype ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a640b6dd55847e86dbb936f97b946170e"/><section>
    <title>byte_container_with_subtype()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>byte_container_with_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>byte_container_with_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::byte_container_with_subtype (const <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp; b)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a73dcae1798eab1b496936bfae7b4b9c0"/><section>
    <title>byte_container_with_subtype()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>byte_container_with_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>byte_container_with_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::byte_container_with_subtype (<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp;&amp; b)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a3c0a82d77668f384bce05c6ec4537cfe"/><section>
    <title>byte_container_with_subtype()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>byte_container_with_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>byte_container_with_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::byte_container_with_subtype (const <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp; b, <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> subtype_)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a8c61acfee31216f530d2bd37571a6ff4"/><section>
    <title>byte_container_with_subtype()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>byte_container_with_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>byte_container_with_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::byte_container_with_subtype (<link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">container_type</link> &amp;&amp; b, <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> subtype_)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/</link> </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a7b122b28ff2b8680557ca44ac9748e49"/><section>
    <title>clear_subtype()</title>
<indexterm><primary>clear_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>clear_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::clear_subtype ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>clears the binary subtype </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/clear_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/clear_subtype/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a9fc42fb07003bf7048c2f1fc79478e02"/><section>
    <title>has_subtype()</title>
<indexterm><primary>has_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>has_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::has_subtype ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether the value has a subtype </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/has_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/has_subtype/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1a760bf39cc5477bc663d8bb3c44aabf6a"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::operator!= (const <link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link>&lt; BinaryType &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1aee67fde9d3d571a07d5bb35df21c0555"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::operator== (const <link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link>&lt; BinaryType &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1aa8f9fca70673949d7483a6097d00d61c"/><section>
    <title>set_subtype()</title>
<indexterm><primary>set_subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>set_subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::set_subtype (<link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> subtype_)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>sets the binary subtype </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/set_subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/set_subtype/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1byte__container__with__subtype_1abe68a969df28c8cb0b63355b4d38ec1a"/><section>
    <title>subtype()</title>
<indexterm><primary>subtype</primary><secondary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</primary><secondary>subtype</secondary></indexterm>
<computeroutput>template&lt;typename BinaryType &gt; </computeroutput><para><computeroutput>constexpr <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">subtype_type</link> <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;::subtype ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the binary subtype </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/byte_container_with_subtype/subtype/">https://json.nlohmann.me/api/byte_container_with_subtype/subtype/</link> </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
