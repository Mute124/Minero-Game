<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2debug_2helper__functions_8h_source" xml:lang="en-US">
<title>helper_functions.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/helper_functions.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Debugging&#32;support&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2003-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_HELPER_FUNCTIONS_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_HELPER_FUNCTIONS_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;__addressof</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;iterator_traits,</emphasis>
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;categories&#32;and&#32;_Iter_base</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;__is_integer</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;pair</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
40 {
41 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
42 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_iterator;
43 
44 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
45 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_local_iterator;
47 <emphasis role="preprocessor">#endif</emphasis>
48 
52 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link>
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a58c6529bcd7c9fa02887b4ccd8b7f9c0">__dp_none</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;even&#32;an&#32;iterator&#32;type</emphasis>
55 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a97fa5ffb65901ca83e84ab4577bea462">__dp_equality</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&lt;&#32;Can&#32;compare&#32;iterator&#32;equality,&#32;only</emphasis>
56 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a189d83cf02a806b7262facbf260a3af7">__dp_sign</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&lt;&#32;Can&#32;determine&#32;equality&#32;and&#32;ordering</emphasis>
57 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a18cab981dc8f098a96d28c8d038f1a06">__dp_sign_max_size</link>,&#32;&#32;&#32;<emphasis role="comment">//&lt;&#32;__dp_sign&#32;and&#32;gives&#32;max&#32;range&#32;size</emphasis>
58 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a6bb923ab69abbb98dd5ce928818ed7d6">__dp_exact</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&lt;&#32;Can&#32;determine&#32;distance&#32;precisely</emphasis>
59 &#32;&#32;&#32;&#32;};
60 
61 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_Iterator&gt;::__type&gt;
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>
64 &#32;&#32;&#32;&#32;{
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::difference_type&#32;_ItDiffType;
68 
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_DiffType,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_void&lt;_DiffType&gt;::__type&gt;
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_DiffTraits
72 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_DiffType&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">__type</link>;&#32;};
73 
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_DiffType&gt;
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_DiffTraits&lt;_DiffType,&#32;<link linkend="_namespacestd">std</link>::__true_type&gt;
76 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">__type</link>;&#32;};
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_DiffTraits&lt;_ItDiffType&gt;::__type&#32;_DiffType;
79 
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;_DiffType,&#32;_Distance_precision&gt;&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">__type</link>;
82 &#32;&#32;&#32;&#32;};
83 
84 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integral&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt;_Integral,&#32;<link linkend="_namespacestd">std</link>::__true_type&gt;
86 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;std::ptrdiff_t,&#32;_Distance_precision&gt;&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_3_01___integral_00_01std_1_1____true__type_01_4_1a43cd315fd08080406f3f457878f27e71">__type</link>;&#32;};
87 
91 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
92 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>
94 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__get_distance</link>(_Iterator&#32;__lhs,&#32;_Iterator&#32;__rhs,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag)
96 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__rhs&#32;-&#32;__lhs,&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a6bb923ab69abbb98dd5ce928818ed7d6">__dp_exact</link>);&#32;}
97 
98 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
99 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>
101 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__get_distance</link>(_Iterator&#32;__lhs,&#32;_Iterator&#32;__rhs,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
103 &#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__lhs&#32;==&#32;__rhs)
105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(0,&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a6bb923ab69abbb98dd5ce928818ed7d6">__dp_exact</link>);
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(1,&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a97fa5ffb65901ca83e84ab4577bea462">__dp_equality</link>);
108 &#32;&#32;&#32;&#32;}
109 
110 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
111 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>
113 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__get_distance</link>(_Iterator&#32;__lhs,&#32;_Iterator&#32;__rhs)
114 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__get_distance</link>(__lhs,&#32;__rhs,&#32;std::__iterator_category(__lhs));&#32;}
115 
116 &#32;&#32;<emphasis role="comment">//&#32;An&#32;arbitrary&#32;iterator&#32;pointer&#32;is&#32;not&#32;singular.</emphasis>
117 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
118 &#32;&#32;<link linkend="_namespace____gnu__debug_1a1fd55725dcc2e8966031ccb27778e2b8">__check_singular_aux</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
119 
120 &#32;&#32;<emphasis role="comment">//&#32;We&#32;may&#32;have&#32;an&#32;iterator&#32;that&#32;derives&#32;from&#32;_Safe_iterator_base&#32;but&#32;isn&apos;t</emphasis>
121 &#32;&#32;<emphasis role="comment">//&#32;a&#32;_Safe_iterator.</emphasis>
122 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
123 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
125 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1af91a5c348f44c548f12858c65f5de6de">__check_singular</link>(_Iterator&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__x)
126 &#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!&#32;std::__is_constant_evaluated()
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__debug_1a1fd55725dcc2e8966031ccb27778e2b8">__check_singular_aux</link>(std::__addressof(__x));
129 &#32;&#32;&#32;&#32;}
130 
132 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
133 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
135 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1af91a5c348f44c548f12858c65f5de6de">__check_singular</link>(_Tp*&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__ptr)
136 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr&#32;==&#32;0;&#32;}
137 
142 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integral&gt;
143 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
145 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(_Integral,&#32;_Integral,&#32;std::__true_type)
146 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
147 
148 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integral&gt;
149 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
151 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(_Integral,&#32;_Integral,
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Integral&gt;::__type</link>&amp;&#32;__dist,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__true_type)
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;__dist&#32;=&#32;std::make_pair(0,&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a58c6529bcd7c9fa02887b4ccd8b7f9c0">__dp_none</link>);
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
157 &#32;&#32;&#32;&#32;}
158 
159 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
160 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
162 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
164 &#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;==&#32;__last
166 &#32;&#32;&#32;&#32;||&#32;(!<link linkend="_namespace____gnu__debug_1af91a5c348f44c548f12858c65f5de6de">__check_singular</link>(__first)&#32;&amp;&amp;&#32;!<link linkend="_namespace____gnu__debug_1af91a5c348f44c548f12858c65f5de6de">__check_singular</link>(__last));
167 &#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
170 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
172 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag)
174 &#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
176 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(__first,&#32;__last,&#32;std::input_iterator_tag())
177 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__first&#32;&lt;=&#32;__last;
178 &#32;&#32;&#32;&#32;}
179 
183 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
184 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
186 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__false_type)
188 &#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(__first,&#32;__last,
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
191 &#32;&#32;&#32;&#32;}
192 
193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
194 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
196 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_InputIterator&gt;::__type</link>&amp;&#32;__dist,
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__false_type)
199 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(__first,&#32;__last,&#32;std::input_iterator_tag()))
201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
202 
203 &#32;&#32;&#32;&#32;&#32;&#32;__dist&#32;=&#32;<link linkend="_namespace____gnu__debug_1a518145bac2cae219ec1ccd6d3f0fbde0">__get_distance</link>(__first,&#32;__last);
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(__dist.second)
205 &#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a58c6529bcd7c9fa02887b4ccd8b7f9c0">__dp_none</link>:
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a97fa5ffb65901ca83e84ab4577bea462">__dp_equality</link>:
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dist.first&#32;==&#32;0)
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a189d83cf02a806b7262facbf260a3af7">__dp_sign</link>:
213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a18cab981dc8f098a96d28c8d038f1a06">__dp_sign_max_size</link>:
214 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92a6bb923ab69abbb98dd5ce928818ed7d6">__dp_exact</link>:
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__dist.first&#32;&gt;=&#32;0;
216 &#32;&#32;&#32;&#32;}
217 
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Can&apos;t&#32;tell&#32;so&#32;assume&#32;it&#32;is&#32;fine.</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
220 &#32;&#32;&#32;&#32;}
221 
227 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
228 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
230 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_InputIterator&gt;::__type</link>&amp;&#32;__dist)
232 &#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(__first,&#32;__last,&#32;__dist,&#32;_Integral());
235 &#32;&#32;&#32;&#32;}
236 
237 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
238 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
239 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;_Safe_iterator&lt;_Iterator,&#32;_Sequence,&#32;_Category&gt;&amp;,
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Safe_iterator&lt;_Iterator,&#32;_Sequence,&#32;_Category&gt;&amp;,
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>&amp;);
242 
243 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
244 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
245 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
246 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;_Safe_local_iterator&lt;_Iterator,&#32;_Sequence&gt;&amp;,
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Safe_local_iterator&lt;_Iterator,&#32;_Sequence&gt;&amp;,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>&amp;);
249 <emphasis role="preprocessor">#endif</emphasis>
250 
251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
252 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
254 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
255 &#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__debug_1afdeb094e78af635bfe2a0181fb79f905">__valid_range_aux</link>(__first,&#32;__last,&#32;_Integral());
258 &#32;&#32;&#32;&#32;}
259 
260 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
261 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
262 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;_Safe_iterator&lt;_Iterator,&#32;_Sequence,&#32;_Category&gt;&amp;,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Safe_iterator&lt;_Iterator,&#32;_Sequence,&#32;_Category&gt;&amp;);
264 
265 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
266 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
268 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;_Safe_local_iterator&lt;_Iterator,&#32;_Sequence&gt;&amp;,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Safe_local_iterator&lt;_Iterator,&#32;_Sequence&gt;&amp;);
270 <emphasis role="preprocessor">#endif</emphasis>
271 
272 &#32;&#32;<emphasis role="comment">//&#32;Fallback&#32;method,&#32;always&#32;ok.</emphasis>
273 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
274 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
275 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
276 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(_InputIterator,&#32;_Size)
277 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
278 
279 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
281 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
282 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(<emphasis role="keyword">const</emphasis>&#32;_Safe_iterator&lt;_Iterator,&#32;_Sequence,&#32;_Category&gt;&amp;,
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size);
284 
285 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Diff&gt;
286 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
288 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(_InputIterator,&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_Diff,&#32;_Distance_precision&gt;&amp;,&#32;<emphasis role="keywordtype">int</emphasis>)
289 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
290 
291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category,
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Diff&gt;
293 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
294 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a346c18cccaed1159bff97f607e2f9214">__can_advance</link>(<emphasis role="keyword">const</emphasis>&#32;_Safe_iterator&lt;_Iterator,&#32;_Sequence,&#32;_Category&gt;&amp;,
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;_Diff,&#32;_Distance_precision&gt;&amp;,&#32;<emphasis role="keywordtype">int</emphasis>);
296 
303 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
304 &#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Iterator
306 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>(_Iterator&#32;__it)
307 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it;&#32;}
308 
309 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
310 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__debug_1_1___unsafe__type">_Unsafe_type</link>
312 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iterator&#32;<link linkend="_struct____gnu__debug_1_1___unsafe__type_1a6832ef2b15662b4a97609817f76e2109">_Type</link>;&#32;};
313 <emphasis role="preprocessor">#endif</emphasis>
314 
315 &#32;&#32;<emphasis role="comment">/*&#32;Remove&#32;debug&#32;mode&#32;safe&#32;iterator&#32;layer,&#32;if&#32;any.&#32;*/</emphasis>
316 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
317 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Iterator
318 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(_Iterator&#32;__it)
319 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it;&#32;}
320 }
321 
322 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
