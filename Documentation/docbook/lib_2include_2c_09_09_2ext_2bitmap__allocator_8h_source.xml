<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2bitmap__allocator_8h_source" xml:lang="en-US">
<title>bitmap_allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/bitmap_allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Bitmap&#32;Allocator.&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_BITMAP_ALLOCATOR_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_BITMAP_ALLOCATOR_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>&#32;<emphasis role="comment">//&#32;For&#32;std::pair.</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;For&#32;__throw_bad_alloc().</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;For&#32;greater_equal,&#32;and&#32;less_equal.</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>&#32;<emphasis role="comment">//&#32;For&#32;operator&#32;new.</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;_GLIBCXX_DEBUG_ASSERT</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;ext/concurrence.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
39 
43 <emphasis role="preprocessor">#define&#32;_BALLOC_ALIGN_BYTES&#32;8</emphasis>
44 
45 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
46 {
47 _GLIBCXX_BEGIN_NAMESPACE_VERSION
48 
49 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
50 &#32;&#32;{
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____mini__vector">__mini_vector</link>
68 &#32;&#32;&#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;<link linkend="_class____mini__vector">__mini_vector</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____mini__vector">__mini_vector</link>&amp;);
70 &#32;&#32;&#32;&#32;<link linkend="_class____mini__vector">__mini_vector</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____mini__vector">__mini_vector</link>&amp;);
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;reference;
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;const_reference;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;size_type;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;difference_type;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;iterator;
80 
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
82 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_start;
83 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_finish;
84 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_end_of_storage;
85 
86 &#32;&#32;&#32;&#32;size_type
87 &#32;&#32;&#32;&#32;_M_space_left()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
88 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_end_of_storage&#32;-&#32;_M_finish;&#32;}
89 
90 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
91 &#32;&#32;&#32;&#32;allocate(size_type&#32;__n)
92 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)));&#32;}
93 
94 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
95 &#32;&#32;&#32;&#32;deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type)
96 &#32;&#32;&#32;&#32;{&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p);&#32;}
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
99 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Members&#32;used:&#32;size(),&#32;push_back(),&#32;pop_back(),</emphasis>
100 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;insert(iterator,&#32;const_reference),&#32;erase(iterator),</emphasis>
101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;begin(),&#32;end(),&#32;back(),&#32;operator[].</emphasis>
102 
103 &#32;&#32;&#32;&#32;<link linkend="_class____mini__vector">__mini_vector</link>()
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_start(0),&#32;_M_finish(0),&#32;_M_end_of_storage(0)&#32;{&#32;}
105 
106 &#32;&#32;&#32;&#32;size_type
107 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
108 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_finish&#32;-&#32;_M_start;&#32;}
109 
110 &#32;&#32;&#32;&#32;iterator
111 &#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
112 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_start;&#32;}
113 
114 &#32;&#32;&#32;&#32;iterator
115 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
116 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_finish;&#32;}
117 
118 &#32;&#32;&#32;&#32;reference
119 &#32;&#32;&#32;&#32;back()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
120 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;-&#32;1);&#32;}
121 
122 &#32;&#32;&#32;&#32;reference
123 &#32;&#32;&#32;&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
124 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_start[__pos];&#32;}
125 
126 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
127 &#32;&#32;&#32;&#32;insert(iterator&#32;__pos,&#32;const_reference&#32;__x);
128 
129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
130 &#32;&#32;&#32;&#32;push_back(const_reference&#32;__x)
131 &#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_space_left())
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;=&#32;__x;
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++this-&gt;_M_finish;
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;insert(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__x);
139 &#32;&#32;&#32;&#32;}
140 
141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
142 &#32;&#32;&#32;&#32;pop_back()&#32;<emphasis role="keywordflow">throw</emphasis>()
143 &#32;&#32;&#32;&#32;{&#32;--this-&gt;_M_finish;&#32;}
144 
145 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
146 &#32;&#32;&#32;&#32;erase(iterator&#32;__pos)&#32;<emphasis role="keywordflow">throw</emphasis>();
147 
148 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
149 &#32;&#32;&#32;&#32;clear()&#32;<emphasis role="keywordflow">throw</emphasis>()
150 &#32;&#32;&#32;&#32;{&#32;this-&gt;_M_finish&#32;=&#32;this-&gt;_M_start;&#32;}
151 &#32;&#32;&#32;&#32;&#32;&#32;};
152 
153 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Out&#32;of&#32;line&#32;function&#32;definitions.</emphasis>
154 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class____mini__vector">__mini_vector&lt;_Tp&gt;::</link>
156 <link linkend="_class____mini__vector">      insert</link>(iterator&#32;__pos,&#32;const_reference&#32;__x)
157 &#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_space_left())
159 &#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__to_move&#32;=&#32;this-&gt;_M_finish&#32;-&#32;__pos;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__dest&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__src&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;-&#32;1;
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++this-&gt;_M_finish;
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__to_move)
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__dest&#32;=&#32;*__src;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__dest;&#32;--__src;&#32;--__to_move;
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__pos&#32;=&#32;__x;
171 &#32;&#32;&#32;&#32;&#32;&#32;}
172 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__new_size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;?&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;*&#32;2&#32;:&#32;1;
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__new_start&#32;=&#32;this-&gt;allocate(__new_size);
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__first&#32;=&#32;this-&gt;begin();
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__start&#32;=&#32;__new_start;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__pos)
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__start&#32;=&#32;*__first;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__start;&#32;++__first;
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__start&#32;=&#32;__x;
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__start;
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__start&#32;=&#32;*__first;
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__start;&#32;++__first;
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_start)
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;deallocate(this-&gt;_M_start,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
192 
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_start&#32;=&#32;__new_start;
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_finish&#32;=&#32;__start;
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_end_of_storage&#32;=&#32;this-&gt;_M_start&#32;+&#32;__new_size;
196 &#32;&#32;&#32;&#32;&#32;&#32;}
197 &#32;&#32;&#32;&#32;&#32;&#32;}
198 
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class____mini__vector">__mini_vector&lt;_Tp&gt;::</link>
201 <link linkend="_class____mini__vector">      erase</link>(iterator&#32;__pos)&#32;<emphasis role="keywordflow">throw</emphasis>()
202 &#32;&#32;&#32;&#32;&#32;&#32;{
203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__pos&#32;+&#32;1&#32;!=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
204 &#32;&#32;&#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__pos&#32;=&#32;__pos[1];
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__pos;
207 &#32;&#32;&#32;&#32;&#32;&#32;}
208 &#32;&#32;&#32;&#32;--this-&gt;_M_finish;
209 &#32;&#32;&#32;&#32;&#32;&#32;}
210 
211 
212 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__mv_iter_traits
214 &#32;&#32;&#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type&#32;value_type;
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::difference_type&#32;difference_type;
217 &#32;&#32;&#32;&#32;&#32;&#32;};
218 
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__mv_iter_traits&lt;_Tp*&gt;
221 &#32;&#32;&#32;&#32;&#32;&#32;{
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;difference_type;
224 &#32;&#32;&#32;&#32;&#32;&#32;};
225 
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;
227 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
228 &#32;&#32;&#32;&#32;bits_per_byte&#32;=&#32;8,
229 &#32;&#32;&#32;&#32;bits_per_block&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(std::size_t)&#32;*&#32;std::size_t(bits_per_byte)
230 &#32;&#32;&#32;&#32;&#32;&#32;};
231 
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
233 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator
234 &#32;&#32;&#32;&#32;&#32;&#32;__lower_bound(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_Compare&#32;__comp)
236 &#32;&#32;&#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__mv_iter_traits&lt;_ForwardIterator&gt;::difference_type
238 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType;
239 
240 &#32;&#32;&#32;&#32;_DistanceType&#32;__len&#32;=&#32;__last&#32;-&#32;__first;
241 &#32;&#32;&#32;&#32;_DistanceType&#32;__half;
242 &#32;&#32;&#32;&#32;_ForwardIterator&#32;__middle;
243 
244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
245 &#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__half&#32;=&#32;__len&#32;&gt;&gt;&#32;1;
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__middle&#32;=&#32;__first;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__middle&#32;+=&#32;__half;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(*__middle,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
257 &#32;&#32;&#32;&#32;&#32;&#32;}
258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
259 &#32;&#32;&#32;&#32;&#32;&#32;}
260 
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_AddrPair&gt;
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::size_t
266 &#32;&#32;&#32;&#32;&#32;&#32;__num_blocks(_AddrPair&#32;__ap)
267 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__ap.second&#32;-&#32;__ap.first)&#32;+&#32;1;&#32;}
268 
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_AddrPair&gt;
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::size_t
274 &#32;&#32;&#32;&#32;&#32;&#32;__num_bitmaps(_AddrPair&#32;__ap)
275 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__num_blocks(__ap)&#32;/&#32;std::size_t(bits_per_block);&#32;}
276 
277 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Tp&#32;should&#32;be&#32;a&#32;pointer&#32;type.</emphasis>
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Inclusive_between&#32;
280 &#32;&#32;&#32;&#32;&#32;&#32;{
281 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
282 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_ptr_value;
283 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pair&lt;_Tp,&#32;_Tp&gt;&#32;_Block_pair;
284 &#32;&#32;&#32;&#32;
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
286 &#32;&#32;&#32;&#32;_Inclusive_between(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__ptr)&#32;:&#32;_M_ptr_value(__ptr)&#32;
287 &#32;&#32;&#32;&#32;{&#32;}
288 &#32;&#32;&#32;&#32;
289 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
290 &#32;&#32;&#32;&#32;operator()(_Block_pair&#32;__bp)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
291 &#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::less_equal&lt;pointer&gt;()(_M_ptr_value,&#32;__bp.second)&#32;
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;std::greater_equal&lt;pointer&gt;()(_M_ptr_value,&#32;__bp.first))
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
297 &#32;&#32;&#32;&#32;}
298 &#32;&#32;&#32;&#32;&#32;&#32;};
299 &#32;&#32;
300 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;to&#32;pass&#32;a&#32;Functor&#32;to&#32;functions&#32;by&#32;reference.</emphasis>
301 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Functor&gt;
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Functor_Ref&#32;
303 &#32;&#32;&#32;&#32;&#32;&#32;{
304 &#32;&#32;&#32;&#32;_Functor&amp;&#32;_M_fref;
305 &#32;&#32;&#32;&#32;
306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Functor::argument_type&#32;argument_type;
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Functor::result_type&#32;result_type;
309 
310 &#32;&#32;&#32;&#32;_Functor_Ref(_Functor&amp;&#32;__fref)&#32;:&#32;_M_fref(__fref)&#32;
311 &#32;&#32;&#32;&#32;{&#32;}
312 
313 &#32;&#32;&#32;&#32;result_type&#32;
314 &#32;&#32;&#32;&#32;operator()(argument_type&#32;__arg)&#32;
315 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_fref(__arg);&#32;}
316 &#32;&#32;&#32;&#32;&#32;&#32;};
317 
323 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Tp&#32;should&#32;be&#32;a&#32;pointer&#32;type,&#32;and&#32;_Alloc&#32;is&#32;the&#32;Allocator&#32;for</emphasis>
324 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;vector.</emphasis>
325 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class___ffit__finder">_Ffit_finder</link>&#32;
327 &#32;&#32;&#32;&#32;&#32;&#32;{
328 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;_Tp,&#32;_Tp&gt;&#32;_Block_pair;
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__detail::__mini_vector&lt;_Block_pair&gt;&#32;_BPVector;
330 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BPVector::difference_type&#32;_Counter_type;
331 
332 &#32;&#32;&#32;&#32;std::size_t*&#32;_M_pbitmap;
333 &#32;&#32;&#32;&#32;_Counter_type&#32;_M_data_offset;
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
336 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;result_type;
337 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Block_pair&#32;argument_type;
338 
339 &#32;&#32;&#32;&#32;<link linkend="_class___ffit__finder">_Ffit_finder</link>()&#32;:&#32;_M_pbitmap(0),&#32;_M_data_offset(0)
340 &#32;&#32;&#32;&#32;{&#32;}
341 
342 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
343 &#32;&#32;&#32;&#32;operator()(_Block_pair&#32;__bp)&#32;<emphasis role="keywordflow">throw</emphasis>()
344 &#32;&#32;&#32;&#32;{
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::size_t;
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;_rover&#32;to&#32;the&#32;last&#32;physical&#32;location&#32;bitmap,</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;is&#32;the&#32;bitmap&#32;which&#32;belongs&#32;to&#32;the&#32;first&#32;free</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;block.&#32;Thus,&#32;the&#32;bitmaps&#32;are&#32;in&#32;exact&#32;reverse&#32;order&#32;of</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;actual&#32;memory&#32;layout.&#32;So,&#32;we&#32;count&#32;down&#32;the&#32;bitmaps,</emphasis>
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;is&#32;the&#32;same&#32;as&#32;moving&#32;up&#32;the&#32;memory.</emphasis>
351 
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;used&#32;count&#32;stored&#32;at&#32;the&#32;start&#32;of&#32;the&#32;Bit&#32;Map&#32;headers</emphasis>
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;equal&#32;to&#32;the&#32;number&#32;of&#32;Objects&#32;that&#32;the&#32;current&#32;Block&#32;can</emphasis>
354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;store,&#32;then&#32;there&#32;is&#32;definitely&#32;no&#32;space&#32;for&#32;another&#32;single</emphasis>
355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object,&#32;so&#32;just&#32;return&#32;false.</emphasis>
356 &#32;&#32;&#32;&#32;&#32;&#32;_Counter_type&#32;__diff&#32;=&#32;__detail::__num_bitmaps(__bp);
357 
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__bp.first)&#32;-&#32;(__diff&#32;+&#32;1))&#32;==&#32;__detail::__num_blocks(__bp))
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
361 
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__rover&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__bp.first)&#32;-&#32;1;
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Counter_type&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__diff;&#32;++__i)
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data_offset&#32;=&#32;__i;
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__rover)
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pbitmap&#32;=&#32;__rover;
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__rover;
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
375 &#32;&#32;&#32;&#32;}
376 &#32;&#32;&#32;&#32;
377 &#32;&#32;&#32;&#32;std::size_t*
378 &#32;&#32;&#32;&#32;_M_get()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
379 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pbitmap;&#32;}
380 
381 &#32;&#32;&#32;&#32;_Counter_type
382 &#32;&#32;&#32;&#32;_M_offset()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
383 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data_offset&#32;*&#32;std::size_t(bits_per_block);&#32;}
384 &#32;&#32;&#32;&#32;&#32;&#32;};
385 
392 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Tp&#32;should&#32;be&#32;a&#32;pointer&#32;type.</emphasis>
393 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class___bitmap__counter">_Bitmap_counter</link>
395 &#32;&#32;&#32;&#32;&#32;&#32;{
396 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
397 &#32;&#32;&#32;&#32;__detail::__mini_vector&lt;typename&#32;std::pair&lt;_Tp,&#32;_Tp&gt;&#32;&gt;&#32;_BPVector;
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BPVector::size_type&#32;_Index_type;
399 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
400 
401 &#32;&#32;&#32;&#32;_BPVector&amp;&#32;_M_vbp;
402 &#32;&#32;&#32;&#32;std::size_t*&#32;_M_curr_bmap;
403 &#32;&#32;&#32;&#32;std::size_t*&#32;_M_last_bmap_in_block;
404 &#32;&#32;&#32;&#32;_Index_type&#32;_M_curr_index;
405 &#32;&#32;&#32;&#32;
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
407 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;2nd&#32;parameter&#32;with&#32;care.&#32;Make&#32;sure&#32;that&#32;such&#32;an</emphasis>
408 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;entry&#32;exists&#32;in&#32;the&#32;vector&#32;before&#32;passing&#32;that&#32;particular</emphasis>
409 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;index&#32;to&#32;this&#32;ctor.</emphasis>
410 &#32;&#32;&#32;&#32;<link linkend="_class___bitmap__counter">_Bitmap_counter</link>(_BPVector&amp;&#32;Rvbp,&#32;<emphasis role="keywordtype">long</emphasis>&#32;__index&#32;=&#32;-1)&#32;:&#32;_M_vbp(Rvbp)
411 &#32;&#32;&#32;&#32;{&#32;this-&gt;_M_reset(__index);&#32;}
412 &#32;&#32;&#32;&#32;
413 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
414 &#32;&#32;&#32;&#32;_M_reset(<emphasis role="keywordtype">long</emphasis>&#32;__index&#32;=&#32;-1)&#32;<emphasis role="keywordflow">throw</emphasis>()
415 &#32;&#32;&#32;&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__index&#32;==&#32;-1)
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_curr_bmap&#32;=&#32;0;
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_curr_index&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Index_type<emphasis role="keyword">&gt;</emphasis>(-1);
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
422 
423 &#32;&#32;&#32;&#32;&#32;&#32;_M_curr_index&#32;=&#32;__index;
424 &#32;&#32;&#32;&#32;&#32;&#32;_M_curr_bmap&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::size_t*<emphasis role="keyword">&gt;</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_M_vbp[_M_curr_index].first)&#32;-&#32;1;
426 &#32;&#32;&#32;&#32;&#32;&#32;
427 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(__index&#32;&lt;=&#32;(<emphasis role="keywordtype">long</emphasis>)_M_vbp.size()&#32;-&#32;1);
428 &#32;&#32;&#32;&#32;
429 &#32;&#32;&#32;&#32;&#32;&#32;_M_last_bmap_in_block&#32;=&#32;_M_curr_bmap
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;((_M_vbp[_M_curr_index].second&#32;
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;_M_vbp[_M_curr_index].first&#32;+&#32;1)&#32;
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;std::size_t(bits_per_block)&#32;-&#32;1);
433 &#32;&#32;&#32;&#32;}
434 &#32;&#32;&#32;&#32;
435 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dangerous&#32;Function!&#32;Use&#32;with&#32;extreme&#32;care.&#32;Pass&#32;to&#32;this</emphasis>
436 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;function&#32;ONLY&#32;those&#32;values&#32;that&#32;are&#32;known&#32;to&#32;be&#32;correct,</emphasis>
437 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;this&#32;will&#32;mess&#32;up&#32;big&#32;time.</emphasis>
438 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
439 &#32;&#32;&#32;&#32;_M_set_internal_bitmap(std::size_t*&#32;__new_internal_marker)&#32;<emphasis role="keywordflow">throw</emphasis>()
440 &#32;&#32;&#32;&#32;{&#32;_M_curr_bmap&#32;=&#32;__new_internal_marker;&#32;}
441 &#32;&#32;&#32;&#32;
442 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
443 &#32;&#32;&#32;&#32;_M_finished()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
444 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>(_M_curr_bmap&#32;==&#32;0);&#32;}
445 &#32;&#32;&#32;&#32;
446 &#32;&#32;&#32;&#32;<link linkend="_class___bitmap__counter">_Bitmap_counter</link>&amp;
447 &#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keywordflow">throw</emphasis>()
448 &#32;&#32;&#32;&#32;{
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_curr_bmap&#32;==&#32;_M_last_bmap_in_block)
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++_M_curr_index&#32;==&#32;_M_vbp.size())
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_curr_bmap&#32;=&#32;0;
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_reset(_M_curr_index);
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--_M_curr_bmap;
458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
459 &#32;&#32;&#32;&#32;}
460 &#32;&#32;&#32;&#32;
461 &#32;&#32;&#32;&#32;std::size_t*
462 &#32;&#32;&#32;&#32;_M_get()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
463 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_curr_bmap;&#32;}
464 &#32;&#32;&#32;&#32;
465 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;
466 &#32;&#32;&#32;&#32;_M_base()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
467 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_vbp[_M_curr_index].first;&#32;}
468 
469 &#32;&#32;&#32;&#32;_Index_type
470 &#32;&#32;&#32;&#32;_M_offset()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
471 &#32;&#32;&#32;&#32;{
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::size_t(bits_per_block)
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;((<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::size_t*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_base())
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;_M_curr_bmap)&#32;-&#32;1);
475 &#32;&#32;&#32;&#32;}
476 &#32;&#32;&#32;&#32;
477 &#32;&#32;&#32;&#32;_Index_type
478 &#32;&#32;&#32;&#32;_M_where()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
479 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_curr_index;&#32;}
480 &#32;&#32;&#32;&#32;&#32;&#32;};
481 
485 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;
486 &#32;&#32;&#32;&#32;__bit_allocate(std::size_t*&#32;__pbmap,&#32;std::size_t&#32;__pos)&#32;<emphasis role="keywordflow">throw</emphasis>()
487 &#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__mask&#32;=&#32;1&#32;&lt;&lt;&#32;__pos;
489 &#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;=&#32;~__mask;
490 &#32;&#32;&#32;&#32;&#32;&#32;*__pbmap&#32;&amp;=&#32;__mask;
491 &#32;&#32;&#32;&#32;}
492 &#32;&#32;
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;
497 &#32;&#32;&#32;&#32;__bit_free(std::size_t*&#32;__pbmap,&#32;std::size_t&#32;__pos)&#32;<emphasis role="keywordflow">throw</emphasis>()
498 &#32;&#32;&#32;&#32;{
499 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__mask&#32;=&#32;1&#32;&lt;&lt;&#32;__pos;
500 &#32;&#32;&#32;&#32;&#32;&#32;*__pbmap&#32;|=&#32;__mask;
501 &#32;&#32;&#32;&#32;}
502 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
503 
506 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::size_t
507 &#32;&#32;_Bit_scan_forward(std::size_t&#32;__num)
508 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(__builtin_ctzl(__num));&#32;}
509 
515 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classfree__list">free_list</link>
516 &#32;&#32;{
517 &#32;&#32;<emphasis role="keyword">public</emphasis>:
518 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
519 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__detail::__mini_vector&lt;value_type&gt;&#32;vector_type;
520 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;vector_type::iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
521 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__mutex&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mutex_type;
522 
523 &#32;&#32;<emphasis role="keyword">private</emphasis>:
524 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_LT_pointer_compare
525 &#32;&#32;&#32;&#32;{
526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
527 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;std::size_t*&#32;__pui,
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__cui)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
529 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__pui&#32;&lt;&#32;__cui;&#32;}
530 &#32;&#32;&#32;&#32;};
531 
532 <emphasis role="preprocessor">#if&#32;defined&#32;__GTHREADS</emphasis>
533 &#32;&#32;&#32;&#32;__mutex_type&amp;
534 &#32;&#32;&#32;&#32;_M_get_mutex()
535 &#32;&#32;&#32;&#32;{
536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__mutex_type&#32;_S_mutex;
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_mutex;
538 &#32;&#32;&#32;&#32;}
539 <emphasis role="preprocessor">#endif</emphasis>
540 
541 &#32;&#32;&#32;&#32;vector_type&amp;
542 &#32;&#32;&#32;&#32;_M_get_free_list()
543 &#32;&#32;&#32;&#32;{
544 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;vector_type&#32;_S_free_list;
545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_free_list;
546 &#32;&#32;&#32;&#32;}
547 
558 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
559 &#32;&#32;&#32;&#32;_M_validate(std::size_t*&#32;__addr)&#32;<emphasis role="keywordflow">throw</emphasis>()
560 &#32;&#32;&#32;&#32;{
561 &#32;&#32;&#32;&#32;&#32;&#32;vector_type&amp;&#32;__free_list&#32;=&#32;_M_get_free_list();
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;vector_type::size_type&#32;__max_size&#32;=&#32;64;
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__free_list.size()&#32;&gt;=&#32;__max_size)
564 &#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ok,&#32;the&#32;threshold&#32;value&#32;has&#32;been&#32;reached.&#32;&#32;We&#32;determine</emphasis>
566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;block&#32;to&#32;remove&#32;from&#32;the&#32;list&#32;of&#32;free&#32;blocks.</emphasis>
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__addr&#32;&gt;=&#32;*__free_list.back())
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ok,&#32;the&#32;new&#32;block&#32;is&#32;greater&#32;than&#32;or&#32;equal&#32;to&#32;the</emphasis>
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;last&#32;block&#32;in&#32;the&#32;list&#32;of&#32;free&#32;blocks.&#32;We&#32;just&#32;free</emphasis>
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;new&#32;block.</emphasis>
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__addr));
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
575 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Deallocate&#32;the&#32;last&#32;block&#32;in&#32;the&#32;list&#32;of&#32;free&#32;lists,</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;insert&#32;the&#32;new&#32;one&#32;in&#32;its&#32;correct&#32;position.</emphasis>
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__free_list.back()));
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__free_list.pop_back();
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
582 &#32;&#32;&#32;&#32;}
583 &#32;&#32;&#32;&#32;&#32;&#32;
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Just&#32;add&#32;the&#32;block&#32;to&#32;the&#32;list&#32;of&#32;free&#32;lists&#32;unconditionally.</emphasis>
585 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__temp&#32;=&#32;__detail::__lower_bound
586 &#32;&#32;&#32;&#32;(__free_list.begin(),&#32;__free_list.end(),&#32;
587 &#32;&#32;&#32;&#32;&#32;*__addr,&#32;_LT_pointer_compare());
588 
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;may&#32;insert&#32;the&#32;new&#32;free&#32;list&#32;before&#32;_temp;</emphasis>
590 &#32;&#32;&#32;&#32;&#32;&#32;__free_list.insert(__temp,&#32;__addr);
591 &#32;&#32;&#32;&#32;}
592 
604 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
605 &#32;&#32;&#32;&#32;_M_should_i_give(std::size_t&#32;__block_size,
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;__required_size)&#32;<emphasis role="keywordflow">throw</emphasis>()
607 &#32;&#32;&#32;&#32;{
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__max_wastage_percentage&#32;=&#32;36;
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__block_size&#32;&gt;=&#32;__required_size&#32;&amp;&amp;&#32;
610 &#32;&#32;&#32;&#32;&#32;&#32;(((__block_size&#32;-&#32;__required_size)&#32;*&#32;100&#32;/&#32;__block_size)
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;__max_wastage_percentage))
612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
615 &#32;&#32;&#32;&#32;}
616 
617 &#32;&#32;<emphasis role="keyword">public</emphasis>:
624 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;
625 &#32;&#32;&#32;&#32;_M_insert(std::size_t*&#32;__addr)&#32;<emphasis role="keywordflow">throw</emphasis>()
626 &#32;&#32;&#32;&#32;{
627 <emphasis role="preprocessor">#if&#32;defined&#32;__GTHREADS</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;__scoped_lock&#32;__bfl_lock(_M_get_mutex());
629 <emphasis role="preprocessor">#endif</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;_M_validate&#32;to&#32;decide&#32;what&#32;should&#32;be&#32;done&#32;with</emphasis>
631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;particular&#32;free&#32;list.</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_validate(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>std::size_t*<emphasis role="keyword">&gt;</emphasis>(__addr)&#32;-&#32;1);
633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;discussion&#32;as&#32;to&#32;why&#32;this&#32;is&#32;1!</emphasis>
634 &#32;&#32;&#32;&#32;}
635 &#32;&#32;&#32;&#32;
644 &#32;&#32;&#32;&#32;std::size_t*
645 &#32;&#32;&#32;&#32;_M_get(std::size_t&#32;__sz)&#32;_GLIBCXX_THROW(std::bad_alloc);
646 
650 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
651 &#32;&#32;&#32;&#32;_M_clear();
652 &#32;&#32;};
653 
654 
655 &#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declare&#32;the&#32;class.</emphasis>
656 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;
657 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>bitmap_allocator;
658 
659 &#32;&#32;<emphasis role="comment">//&#32;Specialize&#32;for&#32;void:</emphasis>
660 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
661 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>bitmap_allocator&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
662 &#32;&#32;&#32;&#32;{
663 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;const_pointer;
666 
667 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reference-to-void&#32;members&#32;are&#32;impossible.</emphasis>
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;value_type;
669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
671 &#32;&#32;&#32;&#32;{
672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;bitmap_allocator&lt;_Tp1&gt;&#32;other;
673 &#32;&#32;&#32;&#32;};
674 &#32;&#32;&#32;&#32;};
675 
680 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
681 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>bitmap_allocator&#32;:&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_classfree__list">free_list</link>
682 &#32;&#32;&#32;&#32;{
683 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;free_list::__mutex_type&#32;&#32;&#32;__mutex_type;
692 
693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
695 &#32;&#32;&#32;&#32;{
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;bitmap_allocator&lt;_Tp1&gt;&#32;other;
697 &#32;&#32;&#32;&#32;};
698 
699 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2103.&#32;propagate_on_container_move_assignment</emphasis>
702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;propagate_on_container_move_assignment;
703 <emphasis role="preprocessor">#endif</emphasis>
704 
705 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">size_t</emphasis>&#32;_BSize,&#32;std::<emphasis role="keywordtype">size_t</emphasis>&#32;_AlignSize&gt;
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>aligned_size
708 &#32;&#32;&#32;&#32;{
709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;modulus&#32;=&#32;_BSize&#32;%&#32;_AlignSize,
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>&#32;=&#32;_BSize&#32;+&#32;(modulus&#32;?&#32;_AlignSize&#32;-&#32;(modulus)&#32;:&#32;0)
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
714 &#32;&#32;&#32;&#32;};
715 
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Alloc_block
717 &#32;&#32;&#32;&#32;&#32;&#32;{
718 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__M_unused[aligned_size&lt;<emphasis role="keyword">sizeof</emphasis>(value_type),
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2bitmap__allocator_8h_1af160600af7fedc182c11c9f89be04f53">_BALLOC_ALIGN_BYTES</link>&gt;<link linkend="_classvalue">::value</link>];
720 &#32;&#32;&#32;&#32;&#32;&#32;};
721 
722 
723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pair&lt;_Alloc_block*,&#32;_Alloc_block*&gt;&#32;_Block_pair;
724 
725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__detail::__mini_vector&lt;_Block_pair&gt;&#32;_BPVector;
726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BPVector::iterator&#32;_BPiter;
727 
728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_BPiter
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_find(_Predicate&#32;__p)
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
732 &#32;&#32;&#32;&#32;&#32;&#32;_BPiter&#32;__first&#32;=&#32;_S_mem_blocks.begin();
733 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;_S_mem_blocks.end()&#32;&amp;&amp;&#32;!__p(*__first))
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
736 &#32;&#32;&#32;&#32;}
737 
738 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_DEBUG</emphasis>
739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Complexity:&#32;O(lg(N)).&#32;Where,&#32;N&#32;is&#32;the&#32;number&#32;of&#32;block&#32;of&#32;size</emphasis>
740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sizeof(value_type).</emphasis>
741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
742 &#32;&#32;&#32;&#32;&#32;&#32;_S_check_for_free_blocks()&#32;<emphasis role="keywordflow">throw</emphasis>()
743 &#32;&#32;&#32;&#32;&#32;&#32;{
744 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__detail::_Ffit_finder&lt;_Alloc_block*&gt;&#32;_FFF;
745 &#32;&#32;&#32;&#32;_BPiter&#32;__bpi&#32;=&#32;_S_find(_FFF());
746 
747 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(__bpi&#32;==&#32;_S_mem_blocks.end());
748 &#32;&#32;&#32;&#32;&#32;&#32;}
749 <emphasis role="preprocessor">#endif</emphasis>
750 
762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
763 &#32;&#32;&#32;&#32;&#32;&#32;_S_refill_pool()&#32;_GLIBCXX_THROW(std::bad_alloc)
764 &#32;&#32;&#32;&#32;&#32;&#32;{
765 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::size_t;
766 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_DEBUG</emphasis>
767 &#32;&#32;&#32;&#32;_S_check_for_free_blocks();
768 <emphasis role="preprocessor">#endif</emphasis>
769 
770 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__num_bitmaps&#32;=&#32;(_S_block_size
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(__detail::bits_per_block));
772 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__size_to_allocate&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>)&#32;
773 &#32;&#32;&#32;&#32;&#32;&#32;+&#32;_S_block_size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Alloc_block)&#32;
774 &#32;&#32;&#32;&#32;&#32;&#32;+&#32;__num_bitmaps&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>);
775 
776 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__temp&#32;=
777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_get(__size_to_allocate));
778 &#32;&#32;&#32;&#32;*__temp&#32;=&#32;0;
779 &#32;&#32;&#32;&#32;++__temp;
780 
781 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;Header&#32;information&#32;goes&#32;at&#32;the&#32;Beginning&#32;of&#32;the&#32;Block.</emphasis>
782 &#32;&#32;&#32;&#32;_Block_pair&#32;__bp&#32;=&#32;
783 &#32;&#32;&#32;&#32;&#32;&#32;std::make_pair(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Alloc_block*<emphasis role="keyword">&gt;</emphasis>
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__temp&#32;+&#32;__num_bitmaps),&#32;
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Alloc_block*<emphasis role="keyword">&gt;</emphasis>
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__temp&#32;+&#32;__num_bitmaps)&#32;
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_S_block_size&#32;-&#32;1);
788 &#32;&#32;&#32;&#32;
789 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fill&#32;the&#32;Vector&#32;with&#32;this&#32;information.</emphasis>
790 &#32;&#32;&#32;&#32;_S_mem_blocks.push_back(__bp);
791 
792 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__num_bitmaps;&#32;++__i)
793 &#32;&#32;&#32;&#32;&#32;&#32;__temp[__i]&#32;=&#32;~<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(0);&#32;<emphasis role="comment">//&#32;1&#32;Indicates&#32;all&#32;Free.</emphasis>
794 
795 &#32;&#32;&#32;&#32;_S_block_size&#32;*=&#32;2;
796 &#32;&#32;&#32;&#32;&#32;&#32;}
797 
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_BPVector&#32;_S_mem_blocks;
799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t&#32;_S_block_size;
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__detail::_Bitmap_counter&lt;_Alloc_block*&gt;&#32;_S_last_request;
801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BPVector::size_type&#32;_S_last_dealloc_index;
802 <emphasis role="preprocessor">#if&#32;defined&#32;__GTHREADS</emphasis>
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__mutex_type&#32;_S_mut;
804 <emphasis role="preprocessor">#endif</emphasis>
805 
806 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
807 
821 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;
822 &#32;&#32;&#32;&#32;&#32;&#32;_M_allocate_single_object()&#32;_GLIBCXX_THROW(std::bad_alloc)
823 &#32;&#32;&#32;&#32;&#32;&#32;{
824 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::size_t;
825 <emphasis role="preprocessor">#if&#32;defined&#32;__GTHREADS</emphasis>
826 &#32;&#32;&#32;&#32;__scoped_lock&#32;__bit_lock(_S_mut);
827 <emphasis role="preprocessor">#endif</emphasis>
828 
829 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;algorithm&#32;is&#32;something&#32;like&#32;this:&#32;The&#32;last_request</emphasis>
830 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;variable&#32;points&#32;to&#32;the&#32;last&#32;accessed&#32;Bit&#32;Map.&#32;When&#32;such&#32;a</emphasis>
831 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;condition&#32;occurs,&#32;we&#32;try&#32;to&#32;find&#32;a&#32;free&#32;block&#32;in&#32;the</emphasis>
832 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;current&#32;bitmap,&#32;or&#32;succeeding&#32;bitmaps&#32;until&#32;the&#32;last&#32;bitmap</emphasis>
833 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;reached.&#32;If&#32;no&#32;free&#32;block&#32;turns&#32;up,&#32;we&#32;resort&#32;to&#32;First</emphasis>
834 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fit&#32;method.</emphasis>
835 
836 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;WARNING:&#32;Do&#32;not&#32;re-order&#32;the&#32;condition&#32;in&#32;the&#32;while</emphasis>
837 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;statement&#32;below,&#32;because&#32;it&#32;relies&#32;on&#32;C++&apos;s&#32;short-circuit</emphasis>
838 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;evaluation.&#32;The&#32;return&#32;from&#32;_S_last_request-&gt;_M_get()&#32;will</emphasis>
839 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOT&#32;be&#32;dereference&#32;able&#32;if&#32;_S_last_request-&gt;_M_finished()</emphasis>
840 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true.&#32;This&#32;would&#32;inevitably&#32;lead&#32;to&#32;a&#32;NULL&#32;pointer</emphasis>
841 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dereference&#32;if&#32;tinkered&#32;with.</emphasis>
842 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(_S_last_request._M_finished()&#32;==&#32;<emphasis role="keyword">false</emphasis>
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(*(_S_last_request._M_get())&#32;==&#32;0))
844 &#32;&#32;&#32;&#32;&#32;&#32;_S_last_request.operator++();
845 
846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(_S_last_request._M_finished()&#32;==&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>))
847 &#32;&#32;&#32;&#32;&#32;&#32;{
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fall&#32;Back&#32;to&#32;First&#32;Fit&#32;algorithm.</emphasis>
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__detail::_Ffit_finder&lt;_Alloc_block*&gt;&#32;_FFF;
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FFF&#32;__fff;
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BPiter&#32;__bpi&#32;=&#32;_S_find(__detail::_Functor_Ref&lt;_FFF&gt;(__fff));
852 
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__bpi&#32;!=&#32;_S_mem_blocks.end())
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Search&#32;was&#32;successful.&#32;Ok,&#32;now&#32;mark&#32;the&#32;first&#32;bit&#32;from</emphasis>
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;right&#32;as&#32;0,&#32;meaning&#32;Allocated.&#32;This&#32;bit&#32;is&#32;obtained</emphasis>
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;by&#32;calling&#32;_M_get()&#32;on&#32;__fff.</emphasis>
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__nz_bit&#32;=&#32;_Bit_scan_forward(*__fff._M_get());
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__bit_allocate(__fff._M_get(),&#32;__nz_bit);
860 
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_last_request._M_reset(__bpi&#32;-&#32;_S_mem_blocks.begin());
862 
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now,&#32;get&#32;the&#32;address&#32;of&#32;the&#32;bit&#32;we&#32;marked&#32;as&#32;allocated.</emphasis>
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__ret&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__bpi-&gt;first&#32;+&#32;__fff._M_offset()&#32;+&#32;__nz_bit);
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__puse_count&#32;=&#32;
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__bpi-&gt;first)&#32;-&#32;(__detail::__num_bitmaps(*__bpi)&#32;+&#32;1);
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++(*__puse_count);
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Search&#32;was&#32;unsuccessful.&#32;We&#32;Add&#32;more&#32;memory&#32;to&#32;the</emphasis>
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pool&#32;by&#32;calling&#32;_S_refill_pool().</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_refill_pool();
878 
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_Reset&#32;the&#32;_S_last_request&#32;structure&#32;to&#32;the&#32;first</emphasis>
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;free&#32;block&apos;s&#32;bit&#32;map.</emphasis>
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_last_request._M_reset(_S_mem_blocks.size()&#32;-&#32;1);
882 
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now,&#32;mark&#32;that&#32;bit&#32;as&#32;allocated.</emphasis>
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
885 &#32;&#32;&#32;&#32;&#32;&#32;}
886 
887 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_last_request&#32;holds&#32;a&#32;pointer&#32;to&#32;a&#32;valid&#32;bit&#32;map,&#32;that</emphasis>
888 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;points&#32;to&#32;a&#32;free&#32;block&#32;in&#32;memory.</emphasis>
889 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__nz_bit&#32;=&#32;_Bit_scan_forward(*_S_last_request._M_get());
890 &#32;&#32;&#32;&#32;__detail::__bit_allocate(_S_last_request._M_get(),&#32;__nz_bit);
891 
892 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__ret&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>
893 &#32;&#32;&#32;&#32;&#32;&#32;(_S_last_request._M_base()&#32;+&#32;_S_last_request._M_offset()&#32;+&#32;__nz_bit);
894 
895 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__puse_count&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>
896 &#32;&#32;&#32;&#32;&#32;&#32;(_S_mem_blocks[_S_last_request._M_where()].first)
897 &#32;&#32;&#32;&#32;&#32;&#32;-&#32;(__detail::
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bitmaps(_S_mem_blocks[_S_last_request._M_where()])&#32;+&#32;1);
899 
900 &#32;&#32;&#32;&#32;++(*__puse_count);
901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
902 &#32;&#32;&#32;&#32;&#32;&#32;}
903 
912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
913 &#32;&#32;&#32;&#32;&#32;&#32;_M_deallocate_single_object(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)&#32;<emphasis role="keywordflow">throw</emphasis>()
914 &#32;&#32;&#32;&#32;&#32;&#32;{
915 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::size_t;
916 <emphasis role="preprocessor">#if&#32;defined&#32;__GTHREADS</emphasis>
917 &#32;&#32;&#32;&#32;__scoped_lock&#32;__bit_lock(_S_mut);
918 <emphasis role="preprocessor">#endif</emphasis>
919 &#32;&#32;&#32;&#32;_Alloc_block*&#32;__real_p&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Alloc_block*<emphasis role="keyword">&gt;</emphasis>(__p);
920 
921 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BPVector::iterator&#32;_Iterator;
922 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_BPVector::difference_type&#32;_Difference_type;
923 
924 &#32;&#32;&#32;&#32;_Difference_type&#32;__diff;
925 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;__displacement;
926 
927 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(_S_last_dealloc_index&#32;&gt;=&#32;0);
928 
929 &#32;&#32;&#32;&#32;__detail::_Inclusive_between&lt;_Alloc_block*&gt;&#32;__ibt(__real_p);
930 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ibt(_S_mem_blocks[_S_last_dealloc_index]))
931 &#32;&#32;&#32;&#32;&#32;&#32;{
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(_S_last_dealloc_index
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;=&#32;_S_mem_blocks.size()&#32;-&#32;1);
934 
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initial&#32;Assumption&#32;was&#32;correct!</emphasis>
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__diff&#32;=&#32;_S_last_dealloc_index;
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__displacement&#32;=&#32;__real_p&#32;-&#32;_S_mem_blocks[__diff].first;
938 &#32;&#32;&#32;&#32;&#32;&#32;}
939 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
940 &#32;&#32;&#32;&#32;&#32;&#32;{
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iterator&#32;_iter&#32;=&#32;_S_find(__ibt);
942 
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(_iter&#32;!=&#32;_S_mem_blocks.end());
944 
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__diff&#32;=&#32;_iter&#32;-&#32;_S_mem_blocks.begin();
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__displacement&#32;=&#32;__real_p&#32;-&#32;_S_mem_blocks[__diff].first;
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_last_dealloc_index&#32;=&#32;__diff;
948 &#32;&#32;&#32;&#32;&#32;&#32;}
949 
950 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;position&#32;of&#32;the&#32;iterator&#32;that&#32;has&#32;been&#32;found.</emphasis>
951 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__rotate&#32;=&#32;(__displacement
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;%&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(__detail::bits_per_block));
953 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__bitmapC&#32;=&#32;
954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>
955 &#32;&#32;&#32;&#32;&#32;&#32;(_S_mem_blocks[__diff].first)&#32;-&#32;1;
956 &#32;&#32;&#32;&#32;__bitmapC&#32;-=&#32;(__displacement&#32;/&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(__detail::bits_per_block));
957 &#32;&#32;&#32;&#32;&#32;&#32;
958 &#32;&#32;&#32;&#32;__detail::__bit_free(__bitmapC,&#32;__rotate);
959 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__puse_count&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis>*<emphasis role="keyword">&gt;</emphasis>
960 &#32;&#32;&#32;&#32;&#32;&#32;(_S_mem_blocks[__diff].first)
961 &#32;&#32;&#32;&#32;&#32;&#32;-&#32;(__detail::__num_bitmaps(_S_mem_blocks[__diff])&#32;+&#32;1);
962 &#32;&#32;&#32;&#32;
963 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(*__puse_count&#32;!=&#32;0);
964 
965 &#32;&#32;&#32;&#32;--(*__puse_count);
966 
967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(*__puse_count&#32;==&#32;0,&#32;<emphasis role="keyword">false</emphasis>))
968 &#32;&#32;&#32;&#32;&#32;&#32;{
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_block_size&#32;/=&#32;2;
970 &#32;&#32;&#32;&#32;&#32;&#32;
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;can&#32;safely&#32;remove&#32;this&#32;block.</emphasis>
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Block_pair&#32;__bp&#32;=&#32;_S_mem_blocks[__diff];</emphasis>
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_insert(__puse_count);
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_mem_blocks.erase(_S_mem_blocks.begin()&#32;+&#32;__diff);
975 
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;the&#32;_S_last_request&#32;variable&#32;to&#32;reflect&#32;the</emphasis>
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;erased&#32;block.&#32;We&#32;do&#32;this&#32;to&#32;protect&#32;future&#32;requests</emphasis>
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;after&#32;the&#32;last&#32;block&#32;has&#32;been&#32;removed&#32;from&#32;a&#32;particular</emphasis>
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;memory&#32;Chunk,&#32;which&#32;in&#32;turn&#32;has&#32;been&#32;returned&#32;to&#32;the</emphasis>
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;free&#32;list,&#32;and&#32;hence&#32;had&#32;been&#32;erased&#32;from&#32;the&#32;vector,</emphasis>
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;the&#32;size&#32;of&#32;the&#32;vector&#32;gets&#32;reduced&#32;by&#32;1.</emphasis>
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((_Difference_type)_S_last_request._M_where()&#32;&gt;=&#32;__diff--)
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_last_request._M_reset(__diff);&#32;
984 
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;Index&#32;into&#32;the&#32;vector&#32;of&#32;the&#32;region&#32;of&#32;memory</emphasis>
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;might&#32;hold&#32;the&#32;next&#32;address&#32;that&#32;will&#32;be&#32;passed&#32;to</emphasis>
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;deallocated&#32;may&#32;have&#32;been&#32;invalidated&#32;due&#32;to&#32;the&#32;above</emphasis>
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;erase&#32;procedure&#32;being&#32;called&#32;on&#32;the&#32;vector,&#32;hence&#32;we</emphasis>
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;try&#32;to&#32;restore&#32;this&#32;invariant&#32;too.</emphasis>
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_S_last_dealloc_index&#32;&gt;=&#32;_S_mem_blocks.size())
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_last_dealloc_index&#32;=(__diff&#32;!=&#32;-1&#32;?&#32;__diff&#32;:&#32;0);
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(_S_last_dealloc_index&#32;&gt;=&#32;0);
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
995 &#32;&#32;&#32;&#32;&#32;&#32;}
996 &#32;&#32;&#32;&#32;&#32;&#32;}
997 
998 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
999 &#32;&#32;&#32;&#32;&#32;&#32;bitmap_allocator()&#32;_GLIBCXX_USE_NOEXCEPT
1000 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1001 
1002 &#32;&#32;&#32;&#32;&#32;&#32;bitmap_allocator(<emphasis role="keyword">const</emphasis>&#32;bitmap_allocator&amp;)&#32;_GLIBCXX_USE_NOEXCEPT
1003 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1004 
1005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bitmap_allocator(<emphasis role="keyword">const</emphasis>&#32;bitmap_allocator&lt;_Tp1&gt;&amp;)&#32;_GLIBCXX_USE_NOEXCEPT
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1008 
1009 &#32;&#32;&#32;&#32;&#32;&#32;~bitmap_allocator()&#32;_GLIBCXX_USE_NOEXCEPT
1010 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1011 
1012 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;
1013 &#32;&#32;&#32;&#32;&#32;&#32;allocate(size_type&#32;__n)
1014 &#32;&#32;&#32;&#32;&#32;&#32;{
1015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;this-&gt;max_size())
1016 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_alloc();
1017 
1018 <emphasis role="preprocessor">#if&#32;__cpp_aligned_new</emphasis>
1019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">alignof</emphasis>(value_type)&#32;&gt;&#32;__STDCPP_DEFAULT_NEW_ALIGNMENT__)
1020 &#32;&#32;&#32;&#32;&#32;&#32;{
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__b&#32;=&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::align_val_t&#32;__al&#32;=&#32;std::align_val_t(<emphasis role="keyword">alignof</emphasis>(value_type));
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(__b,&#32;__al));
1024 &#32;&#32;&#32;&#32;&#32;&#32;}
1025 <emphasis role="preprocessor">#endif</emphasis>
1026 
1027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__n&#32;==&#32;1,&#32;<emphasis role="keyword">true</emphasis>))
1028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_allocate_single_object();
1029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1030 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__b&#32;=&#32;__n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(__b));
1033 &#32;&#32;&#32;&#32;&#32;&#32;}
1034 &#32;&#32;&#32;&#32;&#32;&#32;}
1035 
1036 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;
1037 &#32;&#32;&#32;&#32;&#32;&#32;allocate(size_type&#32;__n,&#32;<emphasis role="keyword">typename</emphasis>&#32;bitmap_allocator&lt;void&gt;::const_pointer)
1038 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocate(__n);&#32;}
1039 
1040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
1041 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)&#32;<emphasis role="keywordflow">throw</emphasis>()
1042 &#32;&#32;&#32;&#32;&#32;&#32;{
1043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__p&#32;!=&#32;0,&#32;<emphasis role="keyword">true</emphasis>))
1044 &#32;&#32;&#32;&#32;&#32;&#32;{
1045 <emphasis role="preprocessor">#if&#32;__cpp_aligned_new</emphasis>
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types&#32;with&#32;extended&#32;alignment&#32;are&#32;handled&#32;by&#32;operator&#32;delete.</emphasis>
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">alignof</emphasis>(value_type)&#32;&gt;&#32;__STDCPP_DEFAULT_NEW_ALIGNMENT__)
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p,&#32;std::align_val_t(<emphasis role="keyword">alignof</emphasis>(value_type)));
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1052 <emphasis role="preprocessor">#endif</emphasis>
1053 
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(__n&#32;==&#32;1,&#32;<emphasis role="keyword">true</emphasis>))
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_deallocate_single_object(__p);
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__p);
1058 &#32;&#32;&#32;&#32;&#32;&#32;}
1059 &#32;&#32;&#32;&#32;&#32;&#32;}
1060 
1061 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;
1062 &#32;&#32;&#32;&#32;&#32;&#32;address(reference&#32;__r)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1063 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__r);&#32;}
1064 
1065 &#32;&#32;&#32;&#32;&#32;&#32;const_pointer&#32;
1066 &#32;&#32;&#32;&#32;&#32;&#32;address(const_reference&#32;__r)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1067 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__r);&#32;}
1068 
1069 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;
1070 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_USE_NOEXCEPT
1071 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;size_type(-1)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);&#32;}
1072 
1073 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;construct(_Up*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
1077 &#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>&#32;*)__p)&#32;_Up(std::forward&lt;_Args&gt;(__args)...);&#32;}
1078 
1079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy(_Up*&#32;__p)
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;__p-&gt;~_Up();&#32;}
1083 <emphasis role="preprocessor">#else</emphasis>
1084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
1085 &#32;&#32;&#32;&#32;&#32;&#32;construct(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;const_reference&#32;__data)
1086 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;::new((<emphasis role="keywordtype">void</emphasis>&#32;*)__p)&#32;value_type(__data);&#32;}
1087 
1088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
1089 &#32;&#32;&#32;&#32;&#32;&#32;destroy(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)
1090 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__p-&gt;~value_type();&#32;}
1091 <emphasis role="preprocessor">#endif</emphasis>
1092 &#32;&#32;&#32;&#32;};
1093 
1094 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
1095 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
1096 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;bitmap_allocator&lt;_Tp1&gt;&amp;,&#32;
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;bitmap_allocator&lt;_Tp2&gt;&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>()
1098 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
1099 &#32;&#32;
1100 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
1101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
1102 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;
1103 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;bitmap_allocator&lt;_Tp1&gt;&amp;,&#32;
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;bitmap_allocator&lt;_Tp2&gt;&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>()&#32;
1105 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
1106 <emphasis role="preprocessor">#endif</emphasis>
1107 
1108 &#32;&#32;<emphasis role="comment">//&#32;Static&#32;member&#32;definitions.</emphasis>
1109 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1110 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;bitmap_allocator&lt;_Tp&gt;::_BPVector
1111 &#32;&#32;&#32;&#32;bitmap_allocator&lt;_Tp&gt;::_S_mem_blocks;
1112 
1113 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1114 &#32;&#32;&#32;&#32;std::size_t&#32;bitmap_allocator&lt;_Tp&gt;::_S_block_size
1115 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;2&#32;*&#32;std::size_t(__detail::bits_per_block);
1116 
1117 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1118 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;bitmap_allocator&lt;_Tp&gt;::_BPVector::size_type&#32;
1119 &#32;&#32;&#32;&#32;bitmap_allocator&lt;_Tp&gt;::_S_last_dealloc_index&#32;=&#32;0;
1120 
1121 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1122 &#32;&#32;&#32;&#32;__detail::_Bitmap_counter
1123 &#32;&#32;&#32;&#32;&#32;&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;bitmap_allocator&lt;_Tp&gt;::_Alloc_block*&gt;
1124 &#32;&#32;&#32;&#32;bitmap_allocator&lt;_Tp&gt;::_S_last_request(_S_mem_blocks);
1125 
1126 <emphasis role="preprocessor">#if&#32;defined&#32;__GTHREADS</emphasis>
1127 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1128 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;bitmap_allocator&lt;_Tp&gt;::__mutex_type
1129 &#32;&#32;&#32;&#32;bitmap_allocator&lt;_Tp&gt;::_S_mut;
1130 <emphasis role="preprocessor">#endif</emphasis>
1131 
1132 _GLIBCXX_END_NAMESPACE_VERSION
1133 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_cxx</emphasis>
1134 
1135 <emphasis role="preprocessor">#endif&#32;</emphasis>
</programlisting></section>
