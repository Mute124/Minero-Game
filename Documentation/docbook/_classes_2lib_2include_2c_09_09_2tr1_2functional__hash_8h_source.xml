<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_source" xml:lang="en-US">
<title>functional_hash.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/tr1/functional_hash.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;TR1&#32;functional_hash.h&#32;header&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_TR1_FUNCTIONAL_HASH_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_TR1_FUNCTIONAL_HASH_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
36 {
37 _GLIBCXX_BEGIN_NAMESPACE_VERSION
38 
39 <emphasis role="keyword">namespace&#32;</emphasis>tr1
40 {
41 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;std::unary_function&#32;and&#32;std::binary_function.</emphasis>
42 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
43 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
44 
46 &#32;&#32;<emphasis role="comment">//&#32;Declaration&#32;of&#32;default&#32;hash&#32;functor&#32;std::tr1::hash.&#32;&#32;The&#32;types&#32;for</emphasis>
47 &#32;&#32;<emphasis role="comment">//&#32;which&#32;std::tr1::hash&lt;T&gt;&#32;is&#32;well-defined&#32;is&#32;in&#32;clause&#32;6.3.3.&#32;of&#32;the&#32;PDTR.</emphasis>
48 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::unary_function&lt;_Tp,&#32;size_t&gt;
50 &#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
52 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">const</emphasis>;
53 &#32;&#32;&#32;&#32;};
54 
56 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;_Tp*&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::unary_function&lt;_Tp*,&#32;size_t&gt;
58 &#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
60 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__p)<emphasis role="keyword">&#32;const</emphasis>
61 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(__p);&#32;}
62 &#32;&#32;&#32;&#32;};
63 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
64 
66 <emphasis role="preprocessor">#define&#32;_TR1_hashtable_define_trivial_hash(_Tp)&#32;&#32;&#32;&#32;&#32;\</emphasis>
67 <emphasis role="preprocessor">&#32;&#32;template&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
68 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
69 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;hash&lt;_Tp&gt;::operator()(_Tp&#32;__val)&#32;const&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
70 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;return&#32;static_cast&lt;size_t&gt;(__val);&#32;}</emphasis>
71 
72 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">bool</emphasis>);
73 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">char</emphasis>);
74 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>);
75 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>);
76 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">wchar_t</emphasis>);
77 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">short</emphasis>);
78 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">int</emphasis>);
79 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">long</emphasis>);
80 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
81 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>);
82 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>);
83 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
84 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2tr1_2functional__hash_8h_1a27ae8648dd3df00eb61cf61fd986903c">_TR1_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
85 
86 <emphasis role="preprocessor">#undef&#32;_TR1_hashtable_define_trivial_hash</emphasis>
87 
88 &#32;&#32;<emphasis role="comment">//&#32;Fowler&#32;/&#32;Noll&#32;/&#32;Vo&#32;(FNV)&#32;Hash&#32;(type&#32;FNV-1a)</emphasis>
89 &#32;&#32;<emphasis role="comment">//&#32;(Used&#32;by&#32;the&#32;next&#32;specializations&#32;of&#32;std::tr1::hash.)</emphasis>
90 
91 &#32;&#32;<emphasis role="comment">//&#32;N.B.&#32;These&#32;functions&#32;should&#32;work&#32;on&#32;unsigned&#32;char,&#32;otherwise&#32;they&#32;do&#32;not</emphasis>
92 &#32;&#32;<emphasis role="comment">//&#32;correctly&#32;implement&#32;the&#32;FNV-1a&#32;algorithm&#32;(see&#32;PR59406).</emphasis>
93 &#32;&#32;<emphasis role="comment">//&#32;The&#32;existing&#32;behaviour&#32;is&#32;retained&#32;for&#32;backwards&#32;compatibility.</emphasis>
94 
96 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&gt;
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fnv_hash_base
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__clength)
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__result&#32;=&#32;0;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__cptr&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__ptr);
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__clength;&#32;--__clength)
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;(__result&#32;*&#32;131)&#32;+&#32;*__cptr++;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
108 &#32;&#32;&#32;&#32;}
109 &#32;&#32;&#32;&#32;};
110 
111 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fnv_hash_base&lt;4&gt;
113 &#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__clength)
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__result&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(2166136261UL);
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__cptr&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__ptr);
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__clength;&#32;--__clength)
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;^=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(*__cptr++);
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;*=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(16777619UL);
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
126 &#32;&#32;&#32;&#32;}
127 &#32;&#32;&#32;&#32;};
128 &#32;&#32;
129 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fnv_hash_base&lt;8&gt;
131 &#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__ptr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__clength)
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__result
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(14695981039346656037ULL);
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__cptr&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(__ptr);
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__clength;&#32;--__clength)
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;^=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(*__cptr++);
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;*=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(1099511628211ULL);
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
145 &#32;&#32;&#32;&#32;}
146 &#32;&#32;&#32;&#32;};
147 
148 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fnv_hash
149 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Fnv_hash_base&lt;sizeof(size_t)&gt;
150 &#32;&#32;{
151 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Fnv_hash_base&lt;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>)&gt;::hash;
152 
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash(&amp;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));&#32;}
157 &#32;&#32;};
158 
160 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
162 &#32;&#32;&#32;&#32;hash&lt;float&gt;::operator()(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)<emphasis role="keyword">&#32;const</emphasis>
163 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;and&#32;-0&#32;both&#32;hash&#32;to&#32;zero.</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;!=&#32;0.0f&#32;?&#32;std::tr1::_Fnv_hash::hash(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;:&#32;0;
166 &#32;&#32;&#32;&#32;}
167 
169 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
171 &#32;&#32;&#32;&#32;hash&lt;double&gt;::operator()(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)<emphasis role="keyword">&#32;const</emphasis>
172 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;and&#32;-0&#32;both&#32;hash&#32;to&#32;zero.</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;!=&#32;0.0&#32;?&#32;std::tr1::_Fnv_hash::hash(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;:&#32;0;
175 &#32;&#32;&#32;&#32;}
176 
178 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
179 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keywordtype">size_t</emphasis>
180 &#32;&#32;&#32;&#32;hash&lt;long&#32;double&gt;::operator()(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">const</emphasis>;
181 
183 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
184 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keywordtype">size_t</emphasis>
185 &#32;&#32;&#32;&#32;hash&lt;string&gt;::operator()(<emphasis role="keywordtype">string</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
186 
187 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
188 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keywordtype">size_t</emphasis>
189 &#32;&#32;&#32;&#32;hash&lt;const&#32;string&amp;&gt;::operator()(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;)&#32;<emphasis role="keyword">const</emphasis>;
190 
191 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
192 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
193 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keywordtype">size_t</emphasis>
194 &#32;&#32;&#32;&#32;hash&lt;wstring&gt;::operator()(wstring)&#32;<emphasis role="keyword">const</emphasis>;
195 
196 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
197 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keywordtype">size_t</emphasis>
198 &#32;&#32;&#32;&#32;hash&lt;const&#32;wstring&amp;&gt;::operator()(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;)&#32;<emphasis role="keyword">const</emphasis>;
199 <emphasis role="preprocessor">#endif</emphasis>
200 }
201 
202 _GLIBCXX_END_NAMESPACE_VERSION
203 }
204 
205 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_TR1_FUNCTIONAL_HASH_H</emphasis>
</programlisting></section>
