<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacenlohmann" xml:lang="en-US">
<title>nlohmann Namespace Reference</title>
<indexterm><primary>nlohmann</primary></indexterm>
<para>

<para>namespace for Niels Lohmann </para>
 
</para>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacenlohmann_1_1detail">detail</link></para>

<para>detail namespace with internal helper functions </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structnlohmann_1_1adl__serializer">adl_serializer</link></para>

<para>default JSONSerializer template argument </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1basic__json">basic_json</link></para>

<para>a class to store JSON values </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1byte__container__with__subtype">byte_container_with_subtype</link></para>

<para>an internal type for a backed binary type </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1json__pointer">json_pointer</link></para>

<para>JSON Pointer defines a string syntax for identifying a specific value within a JSON document. </para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1ordered__map">ordered_map</link></para>

<para>a minimal map-like container that preserves insertion order </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474">json</link> = <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt;&gt;</para>

<para>default specialization </para>
</listitem>
            <listitem><para>using <link linkend="_namespacenlohmann_1ad53cef358adfa7f07cea23eb1e28b9ea">ordered_json</link> = <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; <link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link> &gt;</para>

<para>specialization that maintains the insertion order of object keys </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacenlohmann_1a6ea7ce1fcdd8c94f6c3221c63356f39b">NLOHMANN_CAN_CALL_STD_FUNC_IMPL</link> (begin)</para>
</listitem>
            <listitem><para><link linkend="_namespacenlohmann_1a2fe3cfce480685121828a64e2da31eb4">NLOHMANN_CAN_CALL_STD_FUNC_IMPL</link> (<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)</para>
</listitem>
            <listitem><para>template&lt;typename RefStringTypeLhs , typename RefStringTypeRhs &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link> (<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeLhs &gt; const &amp;lhs, <link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeRhs &gt; const &amp;rhs) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename RefStringTypeLhs , typename RefStringTypeRhs &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link> (<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeLhs &gt; const &amp;lhs, <link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeRhs &gt; const &amp;rhs) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>namespace for Niels Lohmann </para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://github.com/nlohmann">https://github.com/nlohmann</link> </para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0</para>
</formalpara>
namespace to hold default <computeroutput>to_json</computeroutput> function to see why this is required: <link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html</link> </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474"/><section>
    <title>json</title>
<indexterm><primary>json</primary><secondary>nlohmann</secondary></indexterm>
<indexterm><primary>nlohmann</primary><secondary>json</secondary></indexterm>
<para><computeroutput>using <link linkend="_namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474">nlohmann::json</link> = typedef <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt;&gt;</computeroutput></para><para>

<para>default specialization </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/json/">https://json.nlohmann.me/api/json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1ad53cef358adfa7f07cea23eb1e28b9ea"/><section>
    <title>ordered_json</title>
<indexterm><primary>ordered_json</primary><secondary>nlohmann</secondary></indexterm>
<indexterm><primary>nlohmann</primary><secondary>ordered_json</secondary></indexterm>
<para><computeroutput>using <link linkend="_namespacenlohmann_1ad53cef358adfa7f07cea23eb1e28b9ea">nlohmann::ordered_json</link> = typedef <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt;<link linkend="_structnlohmann_1_1ordered__map">nlohmann::ordered_map</link>&gt;</computeroutput></para><para>

<para>specialization that maintains the insertion order of object keys </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/ordered_json/">https://json.nlohmann.me/api/ordered_json/</link> </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacenlohmann_1a6ea7ce1fcdd8c94f6c3221c63356f39b"/><section>
    <title>NLOHMANN_CAN_CALL_STD_FUNC_IMPL()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>NLOHMANN_CAN_CALL_STD_FUNC_IMPL</primary><secondary>nlohmann</secondary></indexterm>
<indexterm><primary>nlohmann</primary><secondary>NLOHMANN_CAN_CALL_STD_FUNC_IMPL</secondary></indexterm>
<para><computeroutput>nlohmann::NLOHMANN_CAN_CALL_STD_FUNC_IMPL (begin )</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1a2fe3cfce480685121828a64e2da31eb4"/><section>
    <title>NLOHMANN_CAN_CALL_STD_FUNC_IMPL()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>NLOHMANN_CAN_CALL_STD_FUNC_IMPL</primary><secondary>nlohmann</secondary></indexterm>
<indexterm><primary>nlohmann</primary><secondary>NLOHMANN_CAN_CALL_STD_FUNC_IMPL</secondary></indexterm>
<para><computeroutput>nlohmann::NLOHMANN_CAN_CALL_STD_FUNC_IMPL (<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link> )</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>nlohmann</secondary></indexterm>
<indexterm><primary>nlohmann</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename RefStringTypeLhs , typename RefStringTypeRhs &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> nlohmann::operator!= (<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeLhs &gt; const &amp; lhs, <link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeRhs &gt; const &amp; rhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>lhs</entry><entry>
<para>JSON pointer to compare </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>rhs</entry><entry>
<para>JSON pointer to compare </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is not equal <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear in the length of the JSON pointer</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions. </para>
</section>
<anchor xml:id="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>nlohmann</secondary></indexterm>
<indexterm><primary>nlohmann</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename RefStringTypeLhs , typename RefStringTypeRhs &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> nlohmann::operator== (<link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeLhs &gt; const &amp; lhs, <link linkend="_classnlohmann_1_1json__pointer">json_pointer</link>&lt; RefStringTypeRhs &gt; const &amp; rhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>lhs</entry><entry>
<para>JSON pointer to compare </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>rhs</entry><entry>
<para>JSON pointer to compare </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>whether <emphasis>lhs</emphasis> is equal to <emphasis>rhs</emphasis> </para>
</formalpara>
@complexity Linear in the length of the JSON pointer</para>

<para>@exceptionsafety No-throw guarantee: this function never throws exceptions. </para>
</section>
</section>
</section>
