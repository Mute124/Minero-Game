<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2cxxabi_8h_source" xml:lang="en-US">
<title>cxxabi.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/cxxabi.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;ABI&#32;Support&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2000-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;GCC.</emphasis>
6 <emphasis role="comment">//</emphasis>
7 <emphasis role="comment">//&#32;GCC&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify</emphasis>
8 <emphasis role="comment">//&#32;it&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
9 <emphasis role="comment">//&#32;the&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
10 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
11 <emphasis role="comment">//</emphasis>
12 <emphasis role="comment">//&#32;GCC&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
13 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
14 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
15 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
16 <emphasis role="comment">//</emphasis>
17 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
18 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
19 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
20 
21 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
22 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
23 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
24 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
25 
26 <emphasis role="comment">//&#32;Written&#32;by&#32;Nathan&#32;Sidwell,&#32;Codesourcery&#32;LLC,&#32;&lt;nathan@codesourcery.com&gt;</emphasis>
27 
28 <emphasis role="comment">/*&#32;This&#32;file&#32;declares&#32;the&#32;new&#32;abi&#32;entry&#32;points&#32;into&#32;the&#32;runtime.&#32;It&#32;is&#32;not</emphasis>
29 <emphasis role="comment">&#32;&#32;&#32;normally&#32;necessary&#32;for&#32;user&#32;programs&#32;to&#32;include&#32;this&#32;header,&#32;or&#32;use&#32;the</emphasis>
30 <emphasis role="comment">&#32;&#32;&#32;entry&#32;points&#32;directly.&#32;However,&#32;this&#32;header&#32;is&#32;available&#32;should&#32;that&#32;be</emphasis>
31 <emphasis role="comment">&#32;&#32;&#32;needed.</emphasis>
32 <emphasis role="comment"></emphasis>
33 <emphasis role="comment">&#32;&#32;&#32;Some&#32;of&#32;the&#32;entry&#32;points&#32;are&#32;intended&#32;for&#32;both&#32;C&#32;and&#32;C++,&#32;thus&#32;this&#32;header</emphasis>
34 <emphasis role="comment">&#32;&#32;&#32;is&#32;includable&#32;from&#32;both&#32;C&#32;and&#32;C++.&#32;Though&#32;the&#32;C++&#32;specific&#32;parts&#32;are&#32;not</emphasis>
35 <emphasis role="comment">&#32;&#32;&#32;available&#32;in&#32;C,&#32;naturally&#32;enough.&#32;&#32;*/</emphasis>
36 
41 <emphasis role="preprocessor">#ifndef&#32;_CXXABI_H</emphasis>
42 <emphasis role="preprocessor">#define&#32;_CXXABI_H&#32;1</emphasis>
43 
44 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
45 
46 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;push(default)</emphasis>
47 
48 <emphasis role="preprocessor">#include&#32;&lt;stddef.h&gt;</emphasis>
49 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
50 <emphasis role="preprocessor">#include&#32;&lt;bits/cxxabi_tweaks.h&gt;</emphasis>
51 <emphasis role="preprocessor">#include&#32;&lt;bits/cxxabi_forced.h&gt;</emphasis>
52 <emphasis role="preprocessor">#include&#32;&lt;bits/cxxabi_init_exception.h&gt;</emphasis>
53 
54 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
55 <emphasis role="keyword">namespace&#32;</emphasis>__cxxabiv1
56 {
57 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>
58 &#32;&#32;{
59 <emphasis role="preprocessor">#endif</emphasis>
60 
61 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2cxxabi__tweaks_8h_1ab7bda5cb4fabcfdb7bcf9eb45b901771">__cxa_cdtor_return_type</link>&#32;(*<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>)(<emphasis role="keywordtype">void</emphasis>&#32;*);
62 
63 &#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;array.</emphasis>
64 &#32;&#32;<emphasis role="keywordtype">void</emphasis>*
65 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a6e5b2cfa1da4fddc69aa60086e0262de">__cxa_vec_new</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;__element_count,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__padding_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__constructor,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor);
68 
69 &#32;&#32;<emphasis role="keywordtype">void</emphasis>*
70 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1aad0eccaefadb8dc0eb2bf2ed0777198d">__cxa_vec_new2</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;__element_count,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__padding_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__constructor,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*(*__alloc)&#32;(<emphasis role="keywordtype">size_t</emphasis>),
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*__dealloc)&#32;(<emphasis role="keywordtype">void</emphasis>*));
74 
75 &#32;&#32;<emphasis role="keywordtype">void</emphasis>*
76 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a699e6079f25da99581a498272d435faa">__cxa_vec_new3</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;__element_count,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__padding_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__constructor,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*(*__alloc)&#32;(<emphasis role="keywordtype">size_t</emphasis>),
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*__dealloc)&#32;(<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>));
80 
81 &#32;&#32;<emphasis role="comment">//&#32;Construct&#32;array.</emphasis>
82 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2cxxabi__tweaks_8h_1a9404bce217fed5d7a1cd22067b66e890">__cxa_vec_ctor_return_type</link>
83 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1ad0a325d4a5256c9e2eecd715629bfe00">__cxa_vec_ctor</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__array_address,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_count,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__constructor,
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor);
86 
87 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2cxxabi__tweaks_8h_1a9404bce217fed5d7a1cd22067b66e890">__cxa_vec_ctor_return_type</link>
88 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a1d1bd9f2e080c3b53b6db43848c2768a">__cxa_vec_cctor</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__dest_array,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_array,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_count,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2cxxabi__tweaks_8h_1ab7bda5cb4fabcfdb7bcf9eb45b901771">__cxa_cdtor_return_type</link>&#32;(*__constructor)&#32;(<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">void</emphasis>*),
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor);
92 
93 &#32;&#32;<emphasis role="comment">//&#32;Destruct&#32;array.</emphasis>
94 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
95 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a84a010d57c9f2203a4be150d8263d7ad">__cxa_vec_dtor</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__array_address,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_count,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor);
97 
98 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
99 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1aea542ec5436fe83132bc97dcb1045a4c">__cxa_vec_cleanup</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__array_address,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_count,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__s,
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
101 
102 &#32;&#32;<emphasis role="comment">//&#32;Destruct&#32;and&#32;release&#32;array.</emphasis>
103 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
104 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a2ca545a2cd7f0a89617f976b237533d7">__cxa_vec_delete</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__array_address,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__padding_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor);
106 
107 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
108 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1aa0b3926cc2aa2f73d2d66b6cf2b8bb44">__cxa_vec_delete2</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__array_address,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__padding_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*__dealloc)&#32;(<emphasis role="keywordtype">void</emphasis>*));
111 
112 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
113 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1aa7976f4bdadef0794bf0773ef6863bc2">__cxa_vec_delete3</link>(<emphasis role="keywordtype">void</emphasis>*&#32;__array_address,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__element_size,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__padding_size,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a868ac413eba5ecb9d2cf3a30225874ec">__cxa_cdtor_type</link>&#32;__destructor,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*__dealloc)&#32;(<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>));
116 
117 &#32;&#32;<emphasis role="keywordtype">int</emphasis>
118 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a239ddd7f6e7ee1b05b59b2e56d8afb40">__cxa_guard_acquire</link>(__guard*);
119 
120 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
121 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1aa421848d8e379e362aba80cfafe4dc3f">__cxa_guard_release</link>(__guard*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
122 
123 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
124 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a8f60065d10c70ceae9818b1d0f1df091">__cxa_guard_abort</link>(__guard*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
125 
126 &#32;&#32;<emphasis role="comment">//&#32;DSO&#32;destruction.</emphasis>
127 &#32;&#32;<emphasis role="keywordtype">int</emphasis>
128 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CDTOR_CALLABI</emphasis>
129 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a4de9c528691ac7b89e6f8c2ea532bac3">__cxa_atexit</link>(<emphasis role="keywordtype">void</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2cxxabi__init__exception_8h_1a828ecaf2bdddef626693b1f4f331da61">_GLIBCXX_CDTOR_CALLABI</link>&#32;*)(<emphasis role="keywordtype">void</emphasis>*),&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">void</emphasis>*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
130 <emphasis role="preprocessor">#else</emphasis>
131 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a4de9c528691ac7b89e6f8c2ea532bac3">__cxa_atexit</link>(<emphasis role="keywordtype">void</emphasis>&#32;(*)(<emphasis role="keywordtype">void</emphasis>*),&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">void</emphasis>*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
132 <emphasis role="preprocessor">#endif</emphasis>
133 
134 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
135 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1ab8f7a6be69ef6cc7a14abfa1a1a9e5b7">__cxa_finalize</link>(<emphasis role="keywordtype">void</emphasis>*);
136 
137 &#32;&#32;<emphasis role="comment">//&#32;TLS&#32;destruction.</emphasis>
138 &#32;&#32;<emphasis role="keywordtype">int</emphasis>
139 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CDTOR_CALLABI</emphasis>
140 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a45f6deefcd3fbd86c94312ef1a09d6d0">__cxa_thread_atexit</link>(<emphasis role="keywordtype">void</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2cxxabi__init__exception_8h_1a828ecaf2bdddef626693b1f4f331da61">_GLIBCXX_CDTOR_CALLABI</link>&#32;*)(<emphasis role="keywordtype">void</emphasis>*),&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
141 <emphasis role="preprocessor">#else</emphasis>
142 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a45f6deefcd3fbd86c94312ef1a09d6d0">__cxa_thread_atexit</link>(<emphasis role="keywordtype">void</emphasis>&#32;(*)(<emphasis role="keywordtype">void</emphasis>*),&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
143 <emphasis role="preprocessor">#endif</emphasis>
144 
145 &#32;&#32;<emphasis role="comment">//&#32;Pure&#32;virtual&#32;functions.</emphasis>
146 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
147 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1aac7f84eef05f90c26d66fe609017bcee">__cxa_pure_virtual</link>(<emphasis role="keywordtype">void</emphasis>)&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__noreturn__));
148 
149 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
150 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1ab82c8df80f4e09b6e80cab3b299bba7f">__cxa_deleted_virtual</link>(<emphasis role="keywordtype">void</emphasis>)&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__noreturn__));
151 
152 &#32;&#32;<emphasis role="comment">//&#32;Exception&#32;handling&#32;auxiliary.</emphasis>
153 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
154 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a490c43aae8cfa96b719d92c6cbd3106c">__cxa_bad_cast</link>()&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__noreturn__));
155 
156 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
157 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a1a7424b2410ac2f23209bba23ee68225">__cxa_bad_typeid</link>()&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__noreturn__));
158 
159 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
160 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a8cdfda714af95298944f7d43b7f58596">__cxa_throw_bad_array_new_length</link>()&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__noreturn__));
161 
203 &#32;&#32;<emphasis role="keywordtype">char</emphasis>*
204 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2cxxabi_8h_1a56b86c334233af5de77c434283f75233">__cxa_demangle</link>(const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__mangled_name,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__output_buffer,
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__length,&#32;<emphasis role="keywordtype">int</emphasis>*&#32;__status);
206 
207 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
208 &#32;&#32;}
209 }&#32;<emphasis role="comment">//&#32;namespace&#32;__cxxabiv1</emphasis>
210 <emphasis role="preprocessor">#endif</emphasis>
211 
212 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
213 
214 <emphasis role="preprocessor">#include&#32;&lt;typeinfo&gt;</emphasis>
215 
216 <emphasis role="keyword">namespace&#32;</emphasis>__cxxabiv1
217 {
218 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;int,&#32;float&#32;etc.</emphasis>
219 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__fundamental_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::type_info
220 &#32;&#32;{
221 &#32;&#32;<emphasis role="keyword">public</emphasis>:
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
223 &#32;&#32;&#32;&#32;__fundamental_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n)&#32;:&#32;std::type_info(__n)&#32;{&#32;}
224 
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
226 &#32;&#32;&#32;&#32;~__fundamental_type_info();
227 &#32;&#32;};
228 
229 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;array&#32;objects.</emphasis>
230 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__array_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::type_info
231 &#32;&#32;{
232 &#32;&#32;<emphasis role="keyword">public</emphasis>:
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
234 &#32;&#32;&#32;&#32;__array_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n)&#32;:&#32;<link linkend="_namespacestd">std</link>::type_info(__n)&#32;{&#32;}
235 
236 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
237 &#32;&#32;&#32;&#32;~__array_type_info();
238 &#32;&#32;};
239 
240 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;functions&#32;(both&#32;member&#32;and&#32;non-member).</emphasis>
241 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__function_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::type_info
242 &#32;&#32;{
243 &#32;&#32;<emphasis role="keyword">public</emphasis>:
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
245 &#32;&#32;&#32;&#32;__function_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n)&#32;:&#32;<link linkend="_namespacestd">std</link>::type_info(__n)&#32;{&#32;}
246 
247 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
248 &#32;&#32;&#32;&#32;~__function_type_info();
249 
250 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
251 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;function.</emphasis>
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
253 &#32;&#32;&#32;&#32;__is_function_p()&#32;<emphasis role="keyword">const</emphasis>;
254 &#32;&#32;};
255 
256 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;enumerations.</emphasis>
257 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__enum_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::type_info
258 &#32;&#32;{
259 &#32;&#32;<emphasis role="keyword">public</emphasis>:
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
261 &#32;&#32;&#32;&#32;__enum_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n)&#32;:&#32;<link linkend="_namespacestd">std</link>::type_info(__n)&#32;{&#32;}
262 
263 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
264 &#32;&#32;&#32;&#32;~__enum_type_info();
265 &#32;&#32;};
266 
267 &#32;&#32;<emphasis role="comment">//&#32;Common&#32;type&#32;information&#32;for&#32;simple&#32;pointers&#32;and&#32;pointers&#32;to&#32;member.</emphasis>
268 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__pbase_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::type_info
269 &#32;&#32;{
270 &#32;&#32;<emphasis role="keyword">public</emphasis>:
271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__flags;&#32;<emphasis role="comment">//&#32;Qualification&#32;of&#32;the&#32;target&#32;object.</emphasis>
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::type_info*&#32;&#32;&#32;__pointee;&#32;<emphasis role="comment">//&#32;Type&#32;of&#32;pointed&#32;to&#32;object.</emphasis>
273 
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
275 &#32;&#32;&#32;&#32;__pbase_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__quals,
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::type_info*&#32;__type)
277 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespacestd">std</link>::type_info(__n),&#32;__flags(__quals),&#32;__pointee(__type)
278 &#32;&#32;&#32;&#32;{&#32;}
279 
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
281 &#32;&#32;&#32;&#32;~__pbase_type_info();
282 
283 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;type.</emphasis>
284 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;__masks
285 &#32;&#32;&#32;&#32;&#32;&#32;{
286 &#32;&#32;&#32;&#32;__const_mask&#32;=&#32;0x1,
287 &#32;&#32;&#32;&#32;__volatile_mask&#32;=&#32;0x2,
288 &#32;&#32;&#32;&#32;__restrict_mask&#32;=&#32;0x4,
289 &#32;&#32;&#32;&#32;__incomplete_mask&#32;=&#32;0x8,
290 &#32;&#32;&#32;&#32;__incomplete_class_mask&#32;=&#32;0x10,
291 &#32;&#32;&#32;&#32;__transaction_safe_mask&#32;=&#32;0x20,
292 &#32;&#32;&#32;&#32;__noexcept_mask&#32;=&#32;0x40
293 &#32;&#32;&#32;&#32;&#32;&#32;};
294 
295 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
296 &#32;&#32;&#32;&#32;__pbase_type_info(<emphasis role="keyword">const</emphasis>&#32;__pbase_type_info&amp;);
297 
298 &#32;&#32;&#32;&#32;__pbase_type_info&amp;
299 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__pbase_type_info&amp;);
300 
301 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;functions.</emphasis>
302 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
303 &#32;&#32;&#32;&#32;__do_catch(<emphasis role="keyword">const</emphasis>&#32;std::type_info*&#32;__thr_type,&#32;<emphasis role="keywordtype">void</emphasis>**&#32;__thr_obj,
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__outer)&#32;<emphasis role="keyword">const</emphasis>;
305 
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
307 &#32;&#32;&#32;&#32;__pointer_catch(<emphasis role="keyword">const</emphasis>&#32;__pbase_type_info*&#32;__thr_type,&#32;<emphasis role="keywordtype">void</emphasis>**&#32;__thr_obj,
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__outer)&#32;<emphasis role="keyword">const</emphasis>;
309 &#32;&#32;};
310 
311 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__pbase_type_info::
312 &#32;&#32;__pointer_catch&#32;(<emphasis role="keyword">const</emphasis>&#32;__pbase_type_info&#32;*thrown_type,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;**thr_obj,
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;outer)<emphasis role="keyword">&#32;const</emphasis>
315 <emphasis role="keyword">&#32;&#32;</emphasis>{
316 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pointee-&gt;__do_catch&#32;(thrown_type-&gt;__pointee,&#32;thr_obj,&#32;outer&#32;+&#32;2);
317 &#32;&#32;}
318 
319 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;simple&#32;pointers.</emphasis>
320 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__pointer_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__pbase_type_info
321 &#32;&#32;{
322 &#32;&#32;<emphasis role="keyword">public</emphasis>:
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
324 &#32;&#32;&#32;&#32;__pointer_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__quals,
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::type_info*&#32;__type)
326 &#32;&#32;&#32;&#32;:&#32;__pbase_type_info&#32;(__n,&#32;__quals,&#32;__type)&#32;{&#32;}
327 
328 
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
330 &#32;&#32;&#32;&#32;~__pointer_type_info();
331 
332 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
333 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;functions.</emphasis>
334 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
335 &#32;&#32;&#32;&#32;__is_pointer_p()&#32;<emphasis role="keyword">const</emphasis>;
336 
337 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
338 &#32;&#32;&#32;&#32;__pointer_catch(<emphasis role="keyword">const</emphasis>&#32;__pbase_type_info*&#32;__thr_type,&#32;<emphasis role="keywordtype">void</emphasis>**&#32;__thr_obj,
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__outer)&#32;<emphasis role="keyword">const</emphasis>;
340 &#32;&#32;};
341 
342 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__class_type_info;
343 
344 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;a&#32;pointer&#32;to&#32;member&#32;variable.</emphasis>
345 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__pointer_to_member_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__pbase_type_info
346 &#32;&#32;{
347 &#32;&#32;<emphasis role="keyword">public</emphasis>:
348 &#32;&#32;&#32;&#32;__class_type_info*&#32;__context;&#32;&#32;&#32;<emphasis role="comment">//&#32;Class&#32;of&#32;the&#32;member.</emphasis>
349 
350 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
351 &#32;&#32;&#32;&#32;__pointer_to_member_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__quals,
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::type_info*&#32;__type,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__class_type_info*&#32;__klass)
354 &#32;&#32;&#32;&#32;:&#32;__pbase_type_info(__n,&#32;__quals,&#32;__type),&#32;__context(__klass)&#32;{&#32;}
355 
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
357 &#32;&#32;&#32;&#32;~__pointer_to_member_type_info();
358 
359 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
360 &#32;&#32;&#32;&#32;__pointer_to_member_type_info(<emphasis role="keyword">const</emphasis>&#32;__pointer_to_member_type_info&amp;);
361 
362 &#32;&#32;&#32;&#32;__pointer_to_member_type_info&amp;
363 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__pointer_to_member_type_info&amp;);
364 
365 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;function.</emphasis>
366 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
367 &#32;&#32;&#32;&#32;__pointer_catch(<emphasis role="keyword">const</emphasis>&#32;__pbase_type_info*&#32;__thr_type,&#32;<emphasis role="keywordtype">void</emphasis>**&#32;__thr_obj,
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__outer)&#32;<emphasis role="keyword">const</emphasis>;
369 &#32;&#32;};
370 
371 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;class&#32;for&#32;__vmi_class_type.</emphasis>
372 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__base_class_type_info
373 &#32;&#32;{
374 &#32;&#32;<emphasis role="keyword">public</emphasis>:
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;&#32;&#32;&#32;__base_type;&#32;&#32;<emphasis role="comment">//&#32;Base&#32;class&#32;type.</emphasis>
376 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_LLP64</emphasis>
377 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__offset_flags;&#32;&#32;<emphasis role="comment">//&#32;Offset&#32;and&#32;info.</emphasis>
378 <emphasis role="preprocessor">#else</emphasis>
379 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__offset_flags;&#32;&#32;<emphasis role="comment">//&#32;Offset&#32;and&#32;info.</emphasis>
380 <emphasis role="preprocessor">#endif</emphasis>
381 
382 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;__offset_flags_masks
383 &#32;&#32;&#32;&#32;&#32;&#32;{
384 &#32;&#32;&#32;&#32;__virtual_mask&#32;=&#32;0x1,
385 &#32;&#32;&#32;&#32;__public_mask&#32;=&#32;0x2,
386 &#32;&#32;&#32;&#32;__hwm_bit&#32;=&#32;2,
387 &#32;&#32;&#32;&#32;__offset_shift&#32;=&#32;8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bits&#32;to&#32;shift&#32;offset.</emphasis>
388 &#32;&#32;&#32;&#32;&#32;&#32;};
389 
390 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;functions.</emphasis>
391 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
392 &#32;&#32;&#32;&#32;__is_virtual_p()<emphasis role="keyword">&#32;const</emphasis>
393 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__offset_flags&#32;&amp;&#32;__virtual_mask;&#32;}
394 
395 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
396 &#32;&#32;&#32;&#32;__is_public_p()<emphasis role="keyword">&#32;const</emphasis>
397 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__offset_flags&#32;&amp;&#32;__public_mask;&#32;}
398 
399 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
400 &#32;&#32;&#32;&#32;__offset()<emphasis role="keyword">&#32;const</emphasis>
401 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;shift,&#32;being&#32;of&#32;a&#32;signed&#32;type,&#32;is&#32;implementation</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;defined.&#32;GCC&#32;implements&#32;such&#32;shifts&#32;as&#32;arithmetic,&#32;which&#32;is</emphasis>
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;what&#32;we&#32;want.</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link><emphasis role="keyword">&gt;</emphasis>(__offset_flags)&#32;&gt;&gt;&#32;__offset_shift;
406 &#32;&#32;&#32;&#32;}
407 &#32;&#32;};
408 
409 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;a&#32;class.</emphasis>
410 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__class_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::type_info
411 &#32;&#32;{
412 &#32;&#32;<emphasis role="keyword">public</emphasis>:
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
414 &#32;&#32;&#32;&#32;__class_type_info&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__n)&#32;:&#32;type_info(__n)&#32;{&#32;}
415 
416 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
417 &#32;&#32;&#32;&#32;~__class_type_info&#32;();
418 
419 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;types.</emphasis>
420 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;type&#32;sub_kind&#32;tells&#32;us&#32;about&#32;how&#32;a&#32;base&#32;object&#32;is&#32;contained</emphasis>
421 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;within&#32;a&#32;derived&#32;object.&#32;We&#32;often&#32;do&#32;this&#32;lazily,&#32;hence&#32;the</emphasis>
422 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UNKNOWN&#32;value.&#32;At&#32;other&#32;times&#32;we&#32;may&#32;use&#32;NOT_CONTAINED&#32;to&#32;mean</emphasis>
423 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not&#32;publicly&#32;contained.</emphasis>
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;__sub_kind
425 &#32;&#32;&#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;have&#32;no&#32;idea.</emphasis>
427 &#32;&#32;&#32;&#32;__unknown&#32;=&#32;0,
428 
429 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;contained&#32;within&#32;us&#32;(in&#32;some&#32;circumstances&#32;this&#32;might</emphasis>
430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;mean&#32;not&#32;contained&#32;publicly)</emphasis>
431 &#32;&#32;&#32;&#32;__not_contained,
432 
433 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contained&#32;ambiguously.</emphasis>
434 &#32;&#32;&#32;&#32;__contained_ambig,
435 
436 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Via&#32;a&#32;virtual&#32;path.</emphasis>
437 &#32;&#32;&#32;&#32;__contained_virtual_mask&#32;=&#32;__base_class_type_info::__virtual_mask,
438 
439 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Via&#32;a&#32;public&#32;path.</emphasis>
440 &#32;&#32;&#32;&#32;__contained_public_mask&#32;=&#32;__base_class_type_info::__public_mask,
441 
442 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contained&#32;within&#32;us.</emphasis>
443 &#32;&#32;&#32;&#32;__contained_mask&#32;=&#32;1&#32;&lt;&lt;&#32;__base_class_type_info::__hwm_bit,
444 
445 &#32;&#32;&#32;&#32;__contained_private&#32;=&#32;__contained_mask,
446 &#32;&#32;&#32;&#32;__contained_public&#32;=&#32;__contained_mask&#32;|&#32;__contained_public_mask
447 &#32;&#32;&#32;&#32;&#32;&#32;};
448 
449 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__upcast_result;
450 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__dyncast_result;
451 
452 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
453 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;functions.</emphasis>
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
455 &#32;&#32;&#32;&#32;__do_upcast(<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__dst_type,&#32;<emphasis role="keywordtype">void</emphasis>**__obj_ptr)&#32;<emphasis role="keyword">const</emphasis>;
456 
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
458 &#32;&#32;&#32;&#32;__do_catch(<emphasis role="keyword">const</emphasis>&#32;type_info*&#32;__thr_type,&#32;<emphasis role="keywordtype">void</emphasis>**&#32;__thr_obj,
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__outer)&#32;<emphasis role="keyword">const</emphasis>;
460 
461 &#32;&#32;<emphasis role="keyword">public</emphasis>:
462 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;for&#32;upcast.&#32;See&#32;if&#32;DST&#32;is&#32;us,&#32;or&#32;one&#32;of&#32;our&#32;bases.</emphasis>
463 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;false&#32;if&#32;not&#32;found,&#32;true&#32;if&#32;found.</emphasis>
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
465 &#32;&#32;&#32;&#32;__do_upcast(<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj,
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__upcast_result&amp;&#32;__restrict&#32;__result)&#32;<emphasis role="keyword">const</emphasis>;
467 
468 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Indicate&#32;whether&#32;SRC_PTR&#32;of&#32;type&#32;SRC_TYPE&#32;is&#32;contained&#32;publicly</emphasis>
469 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;within&#32;OBJ_PTR.&#32;OBJ_PTR&#32;points&#32;to&#32;a&#32;base&#32;object&#32;of&#32;our&#32;type,</emphasis>
470 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;is&#32;the&#32;destination&#32;type.&#32;SRC2DST&#32;indicates&#32;how&#32;SRC</emphasis>
471 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;objects&#32;might&#32;be&#32;contained&#32;within&#32;this&#32;type.&#32;&#32;If&#32;SRC_PTR&#32;is&#32;one</emphasis>
472 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;of&#32;our&#32;SRC_TYPE&#32;bases,&#32;indicate&#32;the&#32;virtuality.&#32;Returns</emphasis>
473 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not_contained&#32;for&#32;non&#32;containment&#32;or&#32;private&#32;containment.</emphasis>
474 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__sub_kind
475 &#32;&#32;&#32;&#32;__find_public_src(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj_ptr,
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_ptr)&#32;<emphasis role="keyword">const</emphasis>;
478 
479 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;for&#32;dynamic&#32;cast.&#32;ACCESS_PATH&#32;gives&#32;the&#32;access&#32;from&#32;the</emphasis>
480 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;most&#32;derived&#32;object&#32;to&#32;this&#32;base.&#32;DST_TYPE&#32;indicates&#32;the</emphasis>
481 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;desired&#32;type&#32;we&#32;want.&#32;OBJ_PTR&#32;points&#32;to&#32;a&#32;base&#32;of&#32;our&#32;type</emphasis>
482 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;within&#32;the&#32;complete&#32;object.&#32;SRC_TYPE&#32;indicates&#32;the&#32;static&#32;type</emphasis>
483 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;started&#32;from&#32;and&#32;SRC_PTR&#32;points&#32;to&#32;that&#32;base&#32;within&#32;the&#32;most</emphasis>
484 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;derived&#32;object.&#32;Fill&#32;in&#32;RESULT&#32;with&#32;what&#32;we&#32;find.&#32;Return&#32;true</emphasis>
485 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;we&#32;have&#32;located&#32;an&#32;ambiguous&#32;match.</emphasis>
486 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
487 &#32;&#32;&#32;&#32;__do_dyncast(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst,&#32;__sub_kind&#32;__access_path,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__dst_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj_ptr,
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_ptr,
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dyncast_result&amp;&#32;__result)&#32;<emphasis role="keyword">const</emphasis>;
491 
492 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;for&#32;find_public_subobj.&#32;SRC2DST&#32;indicates&#32;how&#32;SRC_TYPE</emphasis>
493 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bases&#32;are&#32;inherited&#32;by&#32;the&#32;type&#32;started&#32;from&#32;--&#32;which&#32;is&#32;not</emphasis>
494 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;necessarily&#32;the&#32;current&#32;type.&#32;The&#32;current&#32;type&#32;will&#32;be&#32;a&#32;base</emphasis>
495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;of&#32;the&#32;destination&#32;type.&#32;&#32;OBJ_PTR&#32;points&#32;to&#32;the&#32;current&#32;base.</emphasis>
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;__sub_kind
497 &#32;&#32;&#32;&#32;__do_find_public_src(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj_ptr,
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_ptr)&#32;<emphasis role="keyword">const</emphasis>;
500 &#32;&#32;};
501 
502 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;a&#32;class&#32;with&#32;a&#32;single&#32;non-virtual&#32;base.</emphasis>
503 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__si_class_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__class_type_info
504 &#32;&#32;{
505 &#32;&#32;<emphasis role="keyword">public</emphasis>:
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__base_type;
507 
508 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
509 &#32;&#32;&#32;&#32;__si_class_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__n,&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info&#32;*__base)
510 &#32;&#32;&#32;&#32;:&#32;__class_type_info(__n),&#32;__base_type(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>)&#32;{&#32;}
511 
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
513 &#32;&#32;&#32;&#32;~__si_class_type_info();
514 
515 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
516 &#32;&#32;&#32;&#32;__si_class_type_info(<emphasis role="keyword">const</emphasis>&#32;__si_class_type_info&amp;);
517 
518 &#32;&#32;&#32;&#32;__si_class_type_info&amp;
519 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__si_class_type_info&amp;);
520 
521 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;functions.</emphasis>
522 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
523 &#32;&#32;&#32;&#32;__do_dyncast(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst,&#32;__sub_kind&#32;__access_path,
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__dst_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj_ptr,
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_ptr,
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dyncast_result&amp;&#32;__result)&#32;<emphasis role="keyword">const</emphasis>;
527 
528 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;__sub_kind
529 &#32;&#32;&#32;&#32;__do_find_public_src(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj_ptr,
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__sub_ptr)&#32;<emphasis role="keyword">const</emphasis>;
532 
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
534 &#32;&#32;&#32;&#32;__do_upcast(<emphasis role="keyword">const</emphasis>&#32;__class_type_info*__dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*__obj,
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__upcast_result&amp;&#32;__restrict&#32;__result)&#32;<emphasis role="keyword">const</emphasis>;
536 &#32;&#32;};
537 
538 &#32;&#32;<emphasis role="comment">//&#32;Type&#32;information&#32;for&#32;a&#32;class&#32;with&#32;multiple&#32;and/or&#32;virtual&#32;bases.</emphasis>
539 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__vmi_class_type_info&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__class_type_info
540 &#32;&#32;{
541 &#32;&#32;<emphasis role="keyword">public</emphasis>:
542 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__flags;&#32;&#32;<emphasis role="comment">//&#32;Details&#32;about&#32;the&#32;class&#32;hierarchy.</emphasis>
543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__base_count;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;direct&#32;bases.</emphasis>
544 
545 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;array&#32;of&#32;bases&#32;uses&#32;the&#32;trailing&#32;array&#32;struct&#32;hack&#32;so&#32;this</emphasis>
546 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;class&#32;is&#32;not&#32;constructable&#32;with&#32;a&#32;normal&#32;constructor.&#32;It&#32;is</emphasis>
547 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;internally&#32;generated&#32;by&#32;the&#32;compiler.</emphasis>
548 &#32;&#32;&#32;&#32;__base_class_type_info&#32;&#32;__base_info[1];&#32;&#32;<emphasis role="comment">//&#32;Array&#32;of&#32;bases.</emphasis>
549 
550 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
551 &#32;&#32;&#32;&#32;__vmi_class_type_info(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;___flags)
552 &#32;&#32;&#32;&#32;:&#32;__class_type_info(__n),&#32;__flags(___flags),&#32;__base_count(0)&#32;{&#32;}
553 
554 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
555 &#32;&#32;&#32;&#32;~__vmi_class_type_info();
556 
557 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;types.</emphasis>
558 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;__flags_masks
559 &#32;&#32;&#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;__non_diamond_repeat_mask&#32;=&#32;0x1,&#32;<emphasis role="comment">//&#32;Distinct&#32;instance&#32;of&#32;repeated&#32;base.</emphasis>
561 &#32;&#32;&#32;&#32;__diamond_shaped_mask&#32;=&#32;0x2,&#32;<emphasis role="comment">//&#32;Diamond&#32;shaped&#32;multiple&#32;inheritance.</emphasis>
562 &#32;&#32;&#32;&#32;__flags_unknown_mask&#32;=&#32;0x10
563 &#32;&#32;&#32;&#32;&#32;&#32;};
564 
565 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
566 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;defined&#32;member&#32;functions.</emphasis>
567 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
568 &#32;&#32;&#32;&#32;__do_dyncast(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst,&#32;__sub_kind&#32;__access_path,
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__dst_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj_ptr,
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_ptr,
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dyncast_result&amp;&#32;__result)&#32;<emphasis role="keyword">const</emphasis>;
572 
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;__sub_kind
574 &#32;&#32;&#32;&#32;__do_find_public_src(<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj_ptr,
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_ptr)&#32;<emphasis role="keyword">const</emphasis>;
577 
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
579 &#32;&#32;&#32;&#32;__do_upcast(<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__obj,
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__upcast_result&amp;&#32;__restrict&#32;__result)&#32;<emphasis role="keyword">const</emphasis>;
581 &#32;&#32;};
582 
583 &#32;&#32;<emphasis role="comment">//&#32;Exception&#32;handling&#32;forward&#32;declarations.</emphasis>
584 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cxa_exception;
585 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cxa_refcounted_exception;
586 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cxa_dependent_exception;
587 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cxa_eh_globals;
588 
589 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>
590 &#32;&#32;{
591 &#32;&#32;<emphasis role="comment">//&#32;Dynamic&#32;cast&#32;runtime.</emphasis>
592 
593 &#32;&#32;<emphasis role="comment">//&#32;src2dst&#32;has&#32;the&#32;following&#32;possible&#32;values</emphasis>
594 &#32;&#32;<emphasis role="comment">//&#32;&#32;&gt;-1:&#32;src_type&#32;is&#32;a&#32;unique&#32;public&#32;non-virtual&#32;base&#32;of&#32;dst_type</emphasis>
595 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst_ptr&#32;+&#32;src2dst&#32;==&#32;src_ptr</emphasis>
596 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;-1:&#32;unspecified&#32;relationship</emphasis>
597 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;-2:&#32;src_type&#32;is&#32;not&#32;a&#32;public&#32;base&#32;of&#32;dst_type</emphasis>
598 &#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;-3:&#32;src_type&#32;is&#32;a&#32;multiple&#32;public&#32;non-virtual&#32;base&#32;of&#32;dst_type</emphasis>
599 &#32;&#32;<emphasis role="keywordtype">void</emphasis>*
600 &#32;&#32;__dynamic_cast(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__src_ptr,&#32;<emphasis role="comment">//&#32;Starting&#32;object.</emphasis>
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__src_type,&#32;<emphasis role="comment">//&#32;Static&#32;type&#32;of&#32;object.</emphasis>
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__class_type_info*&#32;__dst_type,&#32;<emphasis role="comment">//&#32;Desired&#32;target&#32;type.</emphasis>
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__src2dst);&#32;<emphasis role="comment">//&#32;How&#32;src&#32;and&#32;dst&#32;are&#32;related.</emphasis>
604 
605 
606 &#32;&#32;<emphasis role="comment">//&#32;Exception&#32;handling&#32;runtime.</emphasis>
607 
608 &#32;&#32;<emphasis role="comment">//&#32;The&#32;__cxa_eh_globals&#32;for&#32;the&#32;current&#32;thread&#32;can&#32;be&#32;obtained&#32;by&#32;using</emphasis>
609 &#32;&#32;<emphasis role="comment">//&#32;either&#32;of&#32;the&#32;following&#32;functions.&#32;&#32;The&#32;&quot;fast&quot;&#32;version&#32;assumes&#32;at&#32;least</emphasis>
610 &#32;&#32;<emphasis role="comment">//&#32;one&#32;prior&#32;call&#32;of&#32;__cxa_get_globals&#32;has&#32;been&#32;made&#32;from&#32;the&#32;current</emphasis>
611 &#32;&#32;<emphasis role="comment">//&#32;thread,&#32;so&#32;no&#32;initialization&#32;is&#32;necessary.</emphasis>
612 &#32;&#32;__cxa_eh_globals*
613 &#32;&#32;__cxa_get_globals()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__const__));
614 
615 &#32;&#32;__cxa_eh_globals*
616 &#32;&#32;__cxa_get_globals_fast()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__const__));
617 
618 &#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;space&#32;allocated&#32;for&#32;the&#32;primary&#32;exception.</emphasis>
619 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
620 &#32;&#32;__cxa_free_exception(<emphasis role="keywordtype">void</emphasis>*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
621 
622 &#32;&#32;<emphasis role="comment">//&#32;Throw&#32;the&#32;exception.</emphasis>
623 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
624 &#32;&#32;__cxa_throw(<emphasis role="keywordtype">void</emphasis>*,&#32;<link linkend="_namespacestd">std</link>::type_info*,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2cxxabi__init__exception_8h_1a828ecaf2bdddef626693b1f4f331da61">_GLIBCXX_CDTOR_CALLABI</link>&#32;*)&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*))
625 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__noreturn__));
626 
627 &#32;&#32;<emphasis role="comment">//&#32;Used&#32;to&#32;implement&#32;exception&#32;handlers.</emphasis>
628 &#32;&#32;<emphasis role="keywordtype">void</emphasis>*
629 &#32;&#32;__cxa_get_exception_ptr(<emphasis role="keywordtype">void</emphasis>*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__pure__));
630 
631 &#32;&#32;<emphasis role="keywordtype">void</emphasis>*
632 &#32;&#32;__cxa_begin_catch(<emphasis role="keywordtype">void</emphasis>*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
633 
634 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
635 &#32;&#32;__cxa_end_catch();
636 
637 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
638 &#32;&#32;__cxa_rethrow()&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__noreturn__));
639 
640 &#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;type_info&#32;for&#32;the&#32;currently&#32;handled&#32;exception&#32;[15.3/8],&#32;or</emphasis>
641 &#32;&#32;<emphasis role="comment">//&#32;null&#32;if&#32;there&#32;is&#32;none.</emphasis>
642 &#32;&#32;<link linkend="_namespacestd">std</link>::type_info*
643 &#32;&#32;__cxa_current_exception_type()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>&#32;((__pure__));
644 
645 &#32;&#32;<emphasis role="comment">//&#32;GNU&#32;Extensions.</emphasis>
646 
647 &#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;memory&#32;for&#32;a&#32;dependent&#32;exception.</emphasis>
648 &#32;&#32;__cxa_dependent_exception*
649 &#32;&#32;__cxa_allocate_dependent_exception()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
650 
651 &#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;space&#32;allocated&#32;for&#32;the&#32;dependent&#32;exception.</emphasis>
652 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
653 &#32;&#32;__cxa_free_dependent_exception(__cxa_dependent_exception*)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
654 
655 &#32;&#32;}&#32;<emphasis role="comment">//&#32;extern&#32;&quot;C&quot;</emphasis>
656 
657 &#32;&#32;<emphasis role="comment">//&#32;A&#32;magic&#32;placeholder&#32;class&#32;that&#32;can&#32;be&#32;caught&#32;by&#32;reference</emphasis>
658 &#32;&#32;<emphasis role="comment">//&#32;to&#32;recognize&#32;foreign&#32;exceptions.</emphasis>
659 &#32;&#32;class&#32;__foreign_exception
660 &#32;&#32;{
661 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~__foreign_exception()&#32;throw();
662 &#32;&#32;&#32;&#32;virtual&#32;<emphasis role="keywordtype">void</emphasis>&#32;__pure_dummy()&#32;=&#32;0;&#32;<emphasis role="comment">//&#32;prevent&#32;catch&#32;by&#32;value</emphasis>
663 &#32;&#32;};
664 
665 }&#32;<emphasis role="comment">//&#32;namespace&#32;__cxxabiv1</emphasis>
666 
687 namespace&#32;abi&#32;=&#32;__cxxabiv1;
688 
689 namespace&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>
690 {
704 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>recursive_init_error:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classstd_1_1exception">std::exception</link>
705 &#32;&#32;{
706 &#32;&#32;<emphasis role="keyword">public</emphasis>:
707 &#32;&#32;&#32;&#32;recursive_init_error()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
708 &#32;&#32;&#32;&#32;virtual&#32;~recursive_init_error()&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>;
709 &#32;&#32;};
710 }
711 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus</emphasis>
712 
713 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;pop</emphasis>
714 
715 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__CXXABI_H</emphasis>
</programlisting></section>
