<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2ov__tree__map___2constructors__destructor__fn__imps_8hpp_source" xml:lang="en-US">
<title>constructors_destructor_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::value_allocator
45 PB_DS_CLASS_C_DEC::s_value_alloc;
46 
47 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
48 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::metadata_allocator
49 PB_DS_CLASS_C_DEC::s_metadata_alloc;
50 
51 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
52 PB_DS_CLASS_C_DEC::
53 PB_DS_OV_TREE_NAME()&#32;:
54 &#32;&#32;m_a_values(0),
55 &#32;&#32;m_a_metadata(0),
56 &#32;&#32;m_end_it(0),
57 &#32;&#32;m_size(0)
58 {&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))&#32;}
59 
60 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
61 PB_DS_CLASS_C_DEC::
62 PB_DS_OV_TREE_NAME(<emphasis role="keyword">const</emphasis>&#32;Cmp_Fn&amp;&#32;r_cmp_fn)&#32;:
63 &#32;&#32;cmp_fn(r_cmp_fn),
64 &#32;&#32;m_a_values(0),
65 &#32;&#32;m_a_metadata(0),
66 &#32;&#32;m_end_it(0),
67 &#32;&#32;m_size(0)
68 {&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))&#32;}
69 
70 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
71 PB_DS_CLASS_C_DEC::
72 PB_DS_OV_TREE_NAME(<emphasis role="keyword">const</emphasis>&#32;Cmp_Fn&amp;&#32;r_cmp_fn,&#32;<emphasis role="keyword">const</emphasis>&#32;node_update&amp;&#32;r_nodeu)&#32;:
73 &#32;&#32;cmp_fn(r_cmp_fn),
74 &#32;&#32;node_update(r_nodeu),
75 &#32;&#32;m_a_values(0),
76 &#32;&#32;m_a_metadata(0),
77 &#32;&#32;m_end_it(0),
78 &#32;&#32;m_size(0)
79 {&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))&#32;}
80 
81 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
82 PB_DS_CLASS_C_DEC::
83 PB_DS_OV_TREE_NAME(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)&#32;:
84 #ifdef&#32;PB_DS_TREE_TRACE
85 &#32;&#32;trace_base(other),
86 #endif
87 &#32;&#32;cmp_fn(other),
88 &#32;&#32;node_update(other),
89 &#32;&#32;m_a_values(0),
90 &#32;&#32;m_a_metadata(0),
91 &#32;&#32;m_end_it(0),
92 &#32;&#32;m_size(0)
93 {
94 &#32;&#32;copy_from_ordered_range(other.begin(),&#32;other.end());
95 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
96 }
97 
98 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
99 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;It&gt;
100 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
101 PB_DS_CLASS_C_DEC::
102 copy_from_range(It&#32;first_it,&#32;It&#32;last_it)
103 {
104 <emphasis role="preprocessor">#ifdef&#32;PB_DS_DATA_TRUE_INDICATOR</emphasis>
105 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::map&lt;key_type,&#32;mapped_type,&#32;Cmp_Fn,
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;rebind_traits&lt;_Alloc,&#32;value_type&gt;::allocator_type&gt;
107 &#32;&#32;&#32;&#32;map_type;
108 <emphasis role="preprocessor">#else</emphasis>
109 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::set&lt;key_type,&#32;Cmp_Fn,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;rebind_traits&lt;_Alloc,&#32;Key&gt;::allocator_type&gt;
111 &#32;&#32;&#32;&#32;map_type;
112 <emphasis role="preprocessor">#endif</emphasis>
113 
114 &#32;&#32;map_type&#32;m(first_it,&#32;last_it);
115 &#32;&#32;copy_from_ordered_range(m.begin(),&#32;m.end());
116 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
117 }
118 
119 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
120 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;It&gt;
121 <emphasis role="keywordtype">void</emphasis>
122 PB_DS_CLASS_C_DEC::
123 copy_from_ordered_range(It&#32;first_it,&#32;It&#32;last_it)
124 {
125 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;std::distance(first_it,&#32;last_it);
126 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;==&#32;0)
127 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
128 
129 &#32;&#32;value_vector&#32;a_values&#32;=&#32;s_value_alloc.allocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
130 &#32;&#32;iterator&#32;target_it&#32;=&#32;a_values;
131 &#32;&#32;It&#32;source_it&#32;=&#32;first_it;
132 &#32;&#32;It&#32;source_end_it&#32;=&#32;last_it;
133 
134 &#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd(a_values,&#32;target_it,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
135 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(source_it&#32;!=&#32;source_end_it)
136 &#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__v&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(target_it));
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(__v)&#32;value_type(*source_it++);
139 &#32;&#32;&#32;&#32;&#32;&#32;++target_it;
140 &#32;&#32;&#32;&#32;}
141 
142 &#32;&#32;reallocate_metadata((node_update*)<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
143 &#32;&#32;cd.set_no_action();
144 &#32;&#32;m_a_values&#32;=&#32;a_values;
145 &#32;&#32;m_size&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
146 &#32;&#32;m_end_it&#32;=&#32;m_a_values&#32;+&#32;m_size;
147 &#32;&#32;update(PB_DS_node_begin_imp(),&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
148 
149 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
150 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(const_iterator&#32;dbg_it&#32;=&#32;m_a_values;&#32;dbg_it&#32;!=&#32;m_end_it;&#32;++dbg_it)
151 &#32;&#32;&#32;&#32;debug_base::insert_new(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*dbg_it));
152 <emphasis role="preprocessor">#endif</emphasis>
153 }
154 
155 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
156 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;It&gt;
157 <emphasis role="keywordtype">void</emphasis>
158 PB_DS_CLASS_C_DEC::
159 copy_from_ordered_range(It&#32;first_it,&#32;It&#32;last_it,&#32;It&#32;other_first_it,
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;It&#32;other_last_it)
161 {
162 &#32;&#32;clear();
163 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;std::distance(first_it,&#32;last_it)
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::distance(other_first_it,&#32;other_last_it);
165 
166 &#32;&#32;value_vector&#32;a_values&#32;=&#32;s_value_alloc.allocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
167 
168 &#32;&#32;iterator&#32;target_it&#32;=&#32;a_values;
169 &#32;&#32;It&#32;source_it&#32;=&#32;first_it;
170 &#32;&#32;It&#32;source_end_it&#32;=&#32;last_it;
171 
172 &#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd(a_values,&#32;target_it,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
173 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(source_it&#32;!=&#32;source_end_it)
174 &#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(target_it)))
176 &#32;&#32;&#32;&#32;value_type(*source_it++);
177 &#32;&#32;&#32;&#32;&#32;&#32;++target_it;
178 &#32;&#32;&#32;&#32;}
179 
180 &#32;&#32;source_it&#32;=&#32;other_first_it;
181 &#32;&#32;source_end_it&#32;=&#32;other_last_it;
182 
183 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(source_it&#32;!=&#32;source_end_it)
184 &#32;&#32;&#32;&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">&gt;</emphasis>(target_it)))
186 &#32;&#32;&#32;&#32;value_type(*source_it++);
187 &#32;&#32;&#32;&#32;&#32;&#32;++target_it;
188 &#32;&#32;&#32;&#32;}
189 
190 &#32;&#32;reallocate_metadata((node_update*&#32;)<emphasis role="keyword">this</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
191 &#32;&#32;cd.set_no_action();
192 &#32;&#32;m_a_values&#32;=&#32;a_values;
193 &#32;&#32;m_size&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
194 &#32;&#32;m_end_it&#32;=&#32;m_a_values&#32;+&#32;m_size;
195 &#32;&#32;update(PB_DS_node_begin_imp(),&#32;(node_update*&#32;)<emphasis role="keyword">this</emphasis>);
196 
197 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
198 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(const_iterator&#32;dbg_it&#32;=&#32;m_a_values;&#32;dbg_it&#32;!=&#32;m_end_it;&#32;++dbg_it)
199 &#32;&#32;&#32;&#32;debug_base::insert_new(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*dbg_it));
200 <emphasis role="preprocessor">#endif</emphasis>
201 }
202 
203 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
204 <emphasis role="keywordtype">void</emphasis>
205 PB_DS_CLASS_C_DEC::
206 swap(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
207 {
208 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
209 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
210 &#32;&#32;value_swap(other);
211 &#32;&#32;<link linkend="_namespacestd">std</link>::swap(static_cast&lt;cmp_fn&amp;&gt;(*this),
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;cmp_fn&amp;&gt;(other));
213 &#32;&#32;<link linkend="_namespacestd">std</link>::swap(static_cast&lt;traits_base&amp;&gt;(*this),
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;traits_base&amp;&gt;(other));
215 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
216 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
217 }
218 
219 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
220 <emphasis role="keywordtype">void</emphasis>
221 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
222 value_swap(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
223 {
224 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::swap(other);)
225 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_a_values,&#32;other.m_a_values);
226 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_a_metadata,&#32;other.m_a_metadata);
227 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_size,&#32;other.m_size);
228 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(m_end_it,&#32;other.m_end_it);
229 }
230 
231 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
232 PB_DS_CLASS_C_DEC::
233 ~PB_DS_OV_TREE_NAME()
234 {
235 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
236 &#32;&#32;cond_dtor&lt;size_type&gt;&#32;cd(m_a_values,&#32;m_end_it,&#32;m_size);
237 &#32;&#32;reallocate_metadata((node_update*)this,&#32;0);
238 }
239 
240 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
241 inline&#32;<emphasis role="keywordtype">void</emphasis>
242 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
243 update(node_iterator,&#32;null_node_update_pointer)
244 {&#32;}
245 
246 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
247 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node_Update&gt;
248 <emphasis role="keywordtype">void</emphasis>
249 PB_DS_CLASS_C_DEC::
250 update(node_iterator&#32;nd_it,&#32;Node_Update*&#32;p_update)
251 {
252 &#32;&#32;node_const_iterator&#32;end_it&#32;=&#32;PB_DS_node_end_imp();
253 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nd_it&#32;!=&#32;end_it)
254 &#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;update(nd_it.get_l_child(),&#32;p_update);
256 &#32;&#32;&#32;&#32;&#32;&#32;update(nd_it.get_r_child(),&#32;p_update);
257 &#32;&#32;&#32;&#32;&#32;&#32;node_update::operator()(nd_it,&#32;end_it);
258 &#32;&#32;&#32;&#32;}
259 }
260 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
