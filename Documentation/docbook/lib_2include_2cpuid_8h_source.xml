<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2cpuid_8h_source" xml:lang="en-US">
<title>cpuid.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/cpuid.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;*&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
3 <emphasis role="comment">&#32;*</emphasis>
4 <emphasis role="comment">&#32;*&#32;This&#32;file&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it</emphasis>
5 <emphasis role="comment">&#32;*&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
6 <emphasis role="comment">&#32;*&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any</emphasis>
7 <emphasis role="comment">&#32;*&#32;later&#32;version.</emphasis>
8 <emphasis role="comment">&#32;*&#32;</emphasis>
9 <emphasis role="comment">&#32;*&#32;This&#32;file&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
10 <emphasis role="comment">&#32;*&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
11 <emphasis role="comment">&#32;*&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
12 <emphasis role="comment">&#32;*&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
13 <emphasis role="comment">&#32;*&#32;</emphasis>
14 <emphasis role="comment">&#32;*&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
15 <emphasis role="comment">&#32;*&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
16 <emphasis role="comment">&#32;*&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
17 <emphasis role="comment">&#32;*&#32;</emphasis>
18 <emphasis role="comment">&#32;*&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
19 <emphasis role="comment">&#32;*&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
20 <emphasis role="comment">&#32;*&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
21 <emphasis role="comment">&#32;*&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
22 <emphasis role="comment">&#32;*/</emphasis>
23 
24 <emphasis role="preprocessor">#ifndef&#32;_CPUID_H_INCLUDED</emphasis>
25 <emphasis role="preprocessor">#define&#32;_CPUID_H_INCLUDED</emphasis>
26 
27 <emphasis role="comment">/*&#32;%eax&#32;*/</emphasis>
28 <emphasis role="preprocessor">#define&#32;bit_AVXVNNI&#32;(1&#32;&lt;&lt;&#32;4)</emphasis>
29 <emphasis role="preprocessor">#define&#32;bit_AVX512BF16&#32;&#32;(1&#32;&lt;&lt;&#32;5)</emphasis>
30 <emphasis role="preprocessor">#define&#32;bit_HRESET&#32;&#32;(1&#32;&lt;&lt;&#32;22)</emphasis>
31 
32 <emphasis role="comment">/*&#32;%ecx&#32;*/</emphasis>
33 <emphasis role="preprocessor">#define&#32;bit_SSE3&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;0)</emphasis>
34 <emphasis role="preprocessor">#define&#32;bit_PCLMUL&#32;&#32;(1&#32;&lt;&lt;&#32;1)</emphasis>
35 <emphasis role="preprocessor">#define&#32;bit_LZCNT&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;5)</emphasis>
36 <emphasis role="preprocessor">#define&#32;bit_SSSE3&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;9)</emphasis>
37 <emphasis role="preprocessor">#define&#32;bit_FMA&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;12)</emphasis>
38 <emphasis role="preprocessor">#define&#32;bit_CMPXCHG16B&#32;&#32;(1&#32;&lt;&lt;&#32;13)</emphasis>
39 <emphasis role="preprocessor">#define&#32;bit_SSE4_1&#32;&#32;(1&#32;&lt;&lt;&#32;19)</emphasis>
40 <emphasis role="preprocessor">#define&#32;bit_SSE4_2&#32;&#32;(1&#32;&lt;&lt;&#32;20)</emphasis>
41 <emphasis role="preprocessor">#define&#32;bit_MOVBE&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;22)</emphasis>
42 <emphasis role="preprocessor">#define&#32;bit_POPCNT&#32;&#32;(1&#32;&lt;&lt;&#32;23)</emphasis>
43 <emphasis role="preprocessor">#define&#32;bit_AES&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;25)</emphasis>
44 <emphasis role="preprocessor">#define&#32;bit_XSAVE&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;26)</emphasis>
45 <emphasis role="preprocessor">#define&#32;bit_OSXSAVE&#32;(1&#32;&lt;&lt;&#32;27)</emphasis>
46 <emphasis role="preprocessor">#define&#32;bit_AVX&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;28)</emphasis>
47 <emphasis role="preprocessor">#define&#32;bit_F16C&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;29)</emphasis>
48 <emphasis role="preprocessor">#define&#32;bit_RDRND&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;30)</emphasis>
49 
50 <emphasis role="comment">/*&#32;%edx&#32;*/</emphasis>
51 <emphasis role="preprocessor">#define&#32;bit_CMPXCHG8B&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;8)</emphasis>
52 <emphasis role="preprocessor">#define&#32;bit_CMOV&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;15)</emphasis>
53 <emphasis role="preprocessor">#define&#32;bit_MMX&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;23)</emphasis>
54 <emphasis role="preprocessor">#define&#32;bit_FXSAVE&#32;&#32;(1&#32;&lt;&lt;&#32;24)</emphasis>
55 <emphasis role="preprocessor">#define&#32;bit_SSE&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;25)</emphasis>
56 <emphasis role="preprocessor">#define&#32;bit_SSE2&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;26)</emphasis>
57 
58 <emphasis role="comment">/*&#32;Extended&#32;Features&#32;(%eax&#32;==&#32;0x80000001)&#32;*/</emphasis>
59 <emphasis role="comment">/*&#32;%ecx&#32;*/</emphasis>
60 <emphasis role="preprocessor">#define&#32;bit_LAHF_LM&#32;(1&#32;&lt;&lt;&#32;0)</emphasis>
61 <emphasis role="preprocessor">#define&#32;bit_ABM&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;5)</emphasis>
62 <emphasis role="preprocessor">#define&#32;bit_SSE4a&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;6)</emphasis>
63 <emphasis role="preprocessor">#define&#32;bit_PRFCHW&#32;&#32;(1&#32;&lt;&lt;&#32;8)</emphasis>
64 <emphasis role="preprocessor">#define&#32;bit_XOP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;11)</emphasis>
65 <emphasis role="preprocessor">#define&#32;bit_LWP&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;15)</emphasis>
66 <emphasis role="preprocessor">#define&#32;bit_FMA4&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;16)</emphasis>
67 <emphasis role="preprocessor">#define&#32;bit_TBM&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;21)</emphasis>
68 <emphasis role="preprocessor">#define&#32;bit_MWAITX&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;29)</emphasis>
69 
70 <emphasis role="comment">/*&#32;%edx&#32;*/</emphasis>
71 <emphasis role="preprocessor">#define&#32;bit_MMXEXT&#32;&#32;(1&#32;&lt;&lt;&#32;22)</emphasis>
72 <emphasis role="preprocessor">#define&#32;bit_LM&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;29)</emphasis>
73 <emphasis role="preprocessor">#define&#32;bit_3DNOWP&#32;&#32;(1&#32;&lt;&lt;&#32;30)</emphasis>
74 <emphasis role="preprocessor">#define&#32;bit_3DNOW&#32;&#32;&#32;(1u&#32;&lt;&lt;&#32;31)</emphasis>
75 
76 <emphasis role="comment">/*&#32;%ebx&#32;&#32;*/</emphasis>
77 <emphasis role="preprocessor">#define&#32;bit_CLZERO&#32;&#32;(1&#32;&lt;&lt;&#32;0)</emphasis>
78 <emphasis role="preprocessor">#define&#32;bit_WBNOINVD&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;9)</emphasis>
79 
80 <emphasis role="comment">/*&#32;Extended&#32;Features&#32;(%eax&#32;==&#32;7)&#32;*/</emphasis>
81 <emphasis role="comment">/*&#32;%ebx&#32;*/</emphasis>
82 <emphasis role="preprocessor">#define&#32;bit_FSGSBASE&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;0)</emphasis>
83 <emphasis role="preprocessor">#define&#32;bit_SGX&#32;(1&#32;&lt;&lt;&#32;2)</emphasis>
84 <emphasis role="preprocessor">#define&#32;bit_BMI&#32;(1&#32;&lt;&lt;&#32;3)</emphasis>
85 <emphasis role="preprocessor">#define&#32;bit_HLE&#32;(1&#32;&lt;&lt;&#32;4)</emphasis>
86 <emphasis role="preprocessor">#define&#32;bit_AVX2&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;5)</emphasis>
87 <emphasis role="preprocessor">#define&#32;bit_BMI2&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;8)</emphasis>
88 <emphasis role="preprocessor">#define&#32;bit_RTM&#32;(1&#32;&lt;&lt;&#32;11)</emphasis>
89 <emphasis role="preprocessor">#define&#32;bit_AVX512F&#32;(1&#32;&lt;&lt;&#32;16)</emphasis>
90 <emphasis role="preprocessor">#define&#32;bit_AVX512DQ&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;17)</emphasis>
91 <emphasis role="preprocessor">#define&#32;bit_RDSEED&#32;&#32;(1&#32;&lt;&lt;&#32;18)</emphasis>
92 <emphasis role="preprocessor">#define&#32;bit_ADX&#32;(1&#32;&lt;&lt;&#32;19)</emphasis>
93 <emphasis role="preprocessor">#define&#32;bit_AVX512IFMA&#32;&#32;(1&#32;&lt;&lt;&#32;21)</emphasis>
94 <emphasis role="preprocessor">#define&#32;bit_CLFLUSHOPT&#32;&#32;(1&#32;&lt;&lt;&#32;23)</emphasis>
95 <emphasis role="preprocessor">#define&#32;bit_CLWB&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;24)</emphasis>
96 <emphasis role="preprocessor">#define&#32;bit_AVX512PF&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;26)</emphasis>
97 <emphasis role="preprocessor">#define&#32;bit_AVX512ER&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;27)</emphasis>
98 <emphasis role="preprocessor">#define&#32;bit_AVX512CD&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;28)</emphasis>
99 <emphasis role="preprocessor">#define&#32;bit_SHA&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;29)</emphasis>
100 <emphasis role="preprocessor">#define&#32;bit_AVX512BW&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;30)</emphasis>
101 <emphasis role="preprocessor">#define&#32;bit_AVX512VL&#32;&#32;&#32;&#32;(1u&#32;&lt;&lt;&#32;31)</emphasis>
102 
103 <emphasis role="comment">/*&#32;%ecx&#32;*/</emphasis>
104 <emphasis role="preprocessor">#define&#32;bit_PREFETCHWT1&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;0)</emphasis>
105 <emphasis role="preprocessor">#define&#32;bit_AVX512VBMI&#32;&#32;(1&#32;&lt;&lt;&#32;1)</emphasis>
106 <emphasis role="preprocessor">#define&#32;bit_PKU&#32;(1&#32;&lt;&lt;&#32;3)</emphasis>
107 <emphasis role="preprocessor">#define&#32;bit_OSPKE&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;4)</emphasis>
108 <emphasis role="preprocessor">#define&#32;bit_WAITPKG&#32;(1&#32;&lt;&lt;&#32;5)</emphasis>
109 <emphasis role="preprocessor">#define&#32;bit_AVX512VBMI2&#32;(1&#32;&lt;&lt;&#32;6)</emphasis>
110 <emphasis role="preprocessor">#define&#32;bit_SHSTK&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;7)</emphasis>
111 <emphasis role="preprocessor">#define&#32;bit_GFNI&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;8)</emphasis>
112 <emphasis role="preprocessor">#define&#32;bit_VAES&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;9)</emphasis>
113 <emphasis role="preprocessor">#define&#32;bit_AVX512VNNI&#32;&#32;(1&#32;&lt;&lt;&#32;11)</emphasis>
114 <emphasis role="preprocessor">#define&#32;bit_VPCLMULQDQ&#32;&#32;(1&#32;&lt;&lt;&#32;10)</emphasis>
115 <emphasis role="preprocessor">#define&#32;bit_AVX512BITALG&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;12)</emphasis>
116 <emphasis role="preprocessor">#define&#32;bit_AVX512VPOPCNTDQ&#32;(1&#32;&lt;&lt;&#32;14)</emphasis>
117 <emphasis role="preprocessor">#define&#32;bit_RDPID&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;22)</emphasis>
118 <emphasis role="preprocessor">#define&#32;bit_MOVDIRI&#32;(1&#32;&lt;&lt;&#32;27)</emphasis>
119 <emphasis role="preprocessor">#define&#32;bit_MOVDIR64B&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;28)</emphasis>
120 <emphasis role="preprocessor">#define&#32;bit_ENQCMD&#32;&#32;(1&#32;&lt;&lt;&#32;29)</emphasis>
121 <emphasis role="preprocessor">#define&#32;bit_CLDEMOTE&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;25)</emphasis>
122 <emphasis role="preprocessor">#define&#32;bit_KL&#32;&#32;&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;23)</emphasis>
123 
124 <emphasis role="comment">/*&#32;%edx&#32;*/</emphasis>
125 <emphasis role="preprocessor">#define&#32;bit_AVX5124VNNIW&#32;(1&#32;&lt;&lt;&#32;2)</emphasis>
126 <emphasis role="preprocessor">#define&#32;bit_AVX5124FMAPS&#32;(1&#32;&lt;&lt;&#32;3)</emphasis>
127 <emphasis role="preprocessor">#define&#32;bit_AVX512VP2INTERSECT&#32;&#32;(1&#32;&lt;&lt;&#32;8)</emphasis>
128 <emphasis role="preprocessor">#define&#32;bit_AVX512FP16&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;23)</emphasis>
129 <emphasis role="preprocessor">#define&#32;bit_IBT&#32;(1&#32;&lt;&lt;&#32;20)</emphasis>
130 <emphasis role="preprocessor">#define&#32;bit_UINTR&#32;(1&#32;&lt;&lt;&#32;5)</emphasis>
131 <emphasis role="preprocessor">#define&#32;bit_PCONFIG&#32;(1&#32;&lt;&lt;&#32;18)</emphasis>
132 <emphasis role="preprocessor">#define&#32;bit_SERIALIZE&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;14)</emphasis>
133 <emphasis role="preprocessor">#define&#32;bit_TSXLDTRK&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;16)</emphasis>
134 <emphasis role="preprocessor">#define&#32;bit_AMX_BF16&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;22)</emphasis>
135 <emphasis role="preprocessor">#define&#32;bit_AMX_TILE&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;24)</emphasis>
136 <emphasis role="preprocessor">#define&#32;bit_AMX_INT8&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;25)</emphasis>
137 
138 <emphasis role="comment">/*&#32;Extended&#32;State&#32;Enumeration&#32;Sub-leaf&#32;(%eax&#32;==&#32;0xd,&#32;%ecx&#32;==&#32;1)&#32;*/</emphasis>
139 <emphasis role="preprocessor">#define&#32;bit_XSAVEOPT&#32;&#32;&#32;&#32;(1&#32;&lt;&lt;&#32;0)</emphasis>
140 <emphasis role="preprocessor">#define&#32;bit_XSAVEC&#32;&#32;(1&#32;&lt;&lt;&#32;1)</emphasis>
141 <emphasis role="preprocessor">#define&#32;bit_XSAVES&#32;&#32;(1&#32;&lt;&lt;&#32;3)</emphasis>
142 
143 <emphasis role="comment">/*&#32;PT&#32;sub&#32;leaf&#32;(%eax&#32;==&#32;0x14,&#32;%ecx&#32;==&#32;0)&#32;*/</emphasis>
144 <emphasis role="comment">/*&#32;%ebx&#32;*/</emphasis>
145 <emphasis role="preprocessor">#define&#32;bit_PTWRITE&#32;(1&#32;&lt;&lt;&#32;4)</emphasis>
146 
147 <emphasis role="comment">/*&#32;Keylocker&#32;leaf&#32;(%eax&#32;==&#32;0x19)&#32;*/</emphasis>
148 <emphasis role="comment">/*&#32;%ebx&#32;*/</emphasis>
149 <emphasis role="preprocessor">#define&#32;bit_AESKLE&#32;&#32;(&#32;1&lt;&lt;0&#32;)</emphasis>
150 <emphasis role="preprocessor">#define&#32;bit_WIDEKL&#32;&#32;(&#32;1&lt;&lt;2&#32;)</emphasis>
151 
152 
153 <emphasis role="comment">/*&#32;Signatures&#32;for&#32;different&#32;CPU&#32;implementations&#32;as&#32;returned&#32;in&#32;uses</emphasis>
154 <emphasis role="comment">&#32;&#32;&#32;of&#32;cpuid&#32;with&#32;level&#32;0.&#32;&#32;*/</emphasis>
155 <emphasis role="preprocessor">#define&#32;signature_AMD_ebx&#32;&#32;&#32;0x68747541</emphasis>
156 <emphasis role="preprocessor">#define&#32;signature_AMD_ecx&#32;&#32;&#32;0x444d4163</emphasis>
157 <emphasis role="preprocessor">#define&#32;signature_AMD_edx&#32;&#32;&#32;0x69746e65</emphasis>
158 
159 <emphasis role="preprocessor">#define&#32;signature_CENTAUR_ebx&#32;&#32;&#32;0x746e6543</emphasis>
160 <emphasis role="preprocessor">#define&#32;signature_CENTAUR_ecx&#32;&#32;&#32;0x736c7561</emphasis>
161 <emphasis role="preprocessor">#define&#32;signature_CENTAUR_edx&#32;&#32;&#32;0x48727561</emphasis>
162 
163 <emphasis role="preprocessor">#define&#32;signature_CYRIX_ebx&#32;0x69727943</emphasis>
164 <emphasis role="preprocessor">#define&#32;signature_CYRIX_ecx&#32;0x64616574</emphasis>
165 <emphasis role="preprocessor">#define&#32;signature_CYRIX_edx&#32;0x736e4978</emphasis>
166 
167 <emphasis role="preprocessor">#define&#32;signature_INTEL_ebx&#32;0x756e6547</emphasis>
168 <emphasis role="preprocessor">#define&#32;signature_INTEL_ecx&#32;0x6c65746e</emphasis>
169 <emphasis role="preprocessor">#define&#32;signature_INTEL_edx&#32;0x49656e69</emphasis>
170 
171 <emphasis role="preprocessor">#define&#32;signature_TM1_ebx&#32;&#32;&#32;0x6e617254</emphasis>
172 <emphasis role="preprocessor">#define&#32;signature_TM1_ecx&#32;&#32;&#32;0x55504361</emphasis>
173 <emphasis role="preprocessor">#define&#32;signature_TM1_edx&#32;&#32;&#32;0x74656d73</emphasis>
174 
175 <emphasis role="preprocessor">#define&#32;signature_TM2_ebx&#32;&#32;&#32;0x756e6547</emphasis>
176 <emphasis role="preprocessor">#define&#32;signature_TM2_ecx&#32;&#32;&#32;0x3638784d</emphasis>
177 <emphasis role="preprocessor">#define&#32;signature_TM2_edx&#32;&#32;&#32;0x54656e69</emphasis>
178 
179 <emphasis role="preprocessor">#define&#32;signature_NSC_ebx&#32;&#32;&#32;0x646f6547</emphasis>
180 <emphasis role="preprocessor">#define&#32;signature_NSC_ecx&#32;&#32;&#32;0x43534e20</emphasis>
181 <emphasis role="preprocessor">#define&#32;signature_NSC_edx&#32;&#32;&#32;0x79622065</emphasis>
182 
183 <emphasis role="preprocessor">#define&#32;signature_NEXGEN_ebx&#32;&#32;&#32;&#32;0x4778654e</emphasis>
184 <emphasis role="preprocessor">#define&#32;signature_NEXGEN_ecx&#32;&#32;&#32;&#32;0x6e657669</emphasis>
185 <emphasis role="preprocessor">#define&#32;signature_NEXGEN_edx&#32;&#32;&#32;&#32;0x72446e65</emphasis>
186 
187 <emphasis role="preprocessor">#define&#32;signature_RISE_ebx&#32;&#32;0x65736952</emphasis>
188 <emphasis role="preprocessor">#define&#32;signature_RISE_ecx&#32;&#32;0x65736952</emphasis>
189 <emphasis role="preprocessor">#define&#32;signature_RISE_edx&#32;&#32;0x65736952</emphasis>
190 
191 <emphasis role="preprocessor">#define&#32;signature_SIS_ebx&#32;&#32;&#32;0x20536953</emphasis>
192 <emphasis role="preprocessor">#define&#32;signature_SIS_ecx&#32;&#32;&#32;0x20536953</emphasis>
193 <emphasis role="preprocessor">#define&#32;signature_SIS_edx&#32;&#32;&#32;0x20536953</emphasis>
194 
195 <emphasis role="preprocessor">#define&#32;signature_UMC_ebx&#32;&#32;&#32;0x20434d55</emphasis>
196 <emphasis role="preprocessor">#define&#32;signature_UMC_ecx&#32;&#32;&#32;0x20434d55</emphasis>
197 <emphasis role="preprocessor">#define&#32;signature_UMC_edx&#32;&#32;&#32;0x20434d55</emphasis>
198 
199 <emphasis role="preprocessor">#define&#32;signature_VIA_ebx&#32;&#32;&#32;0x20414956</emphasis>
200 <emphasis role="preprocessor">#define&#32;signature_VIA_ecx&#32;&#32;&#32;0x20414956</emphasis>
201 <emphasis role="preprocessor">#define&#32;signature_VIA_edx&#32;&#32;&#32;0x20414956</emphasis>
202 
203 <emphasis role="preprocessor">#define&#32;signature_VORTEX_ebx&#32;&#32;&#32;&#32;0x74726f56</emphasis>
204 <emphasis role="preprocessor">#define&#32;signature_VORTEX_ecx&#32;&#32;&#32;&#32;0x436f5320</emphasis>
205 <emphasis role="preprocessor">#define&#32;signature_VORTEX_edx&#32;&#32;&#32;&#32;0x36387865</emphasis>
206 
207 <emphasis role="preprocessor">#ifndef&#32;__x86_64__</emphasis>
208 <emphasis role="comment">/*&#32;At&#32;least&#32;one&#32;cpu&#32;(Winchip&#32;2)&#32;does&#32;not&#32;set&#32;%ebx&#32;and&#32;%ecx</emphasis>
209 <emphasis role="comment">&#32;&#32;&#32;for&#32;cpuid&#32;leaf&#32;1.&#32;Forcibly&#32;zero&#32;the&#32;two&#32;registers&#32;before</emphasis>
210 <emphasis role="comment">&#32;&#32;&#32;calling&#32;cpuid&#32;as&#32;a&#32;precaution.&#32;&#32;*/</emphasis>
211 <emphasis role="preprocessor">#define&#32;__cpuid(level,&#32;a,&#32;b,&#32;c,&#32;d)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
212 <emphasis role="preprocessor">&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;(__builtin_constant_p&#32;(level)&#32;&amp;&amp;&#32;(level)&#32;!=&#32;1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__&#32;(&quot;cpuid\n\t&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;=a&quot;&#32;(a),&#32;&quot;=b&quot;&#32;(b),&#32;&quot;=c&quot;&#32;(c),&#32;&quot;=d&quot;&#32;(d)&#32;&#32;&#32;&#32;\</emphasis>
216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;0&quot;&#32;(level));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
217 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__asm__&#32;__volatile__&#32;(&quot;cpuid\n\t&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;=a&quot;&#32;(a),&#32;&quot;=b&quot;&#32;(b),&#32;&quot;=c&quot;&#32;(c),&#32;&quot;=d&quot;&#32;(d)&#32;&#32;&#32;&#32;\</emphasis>
220 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;0&quot;&#32;(level),&#32;&quot;1&quot;&#32;(0),&#32;&quot;2&quot;&#32;(0));&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
221 <emphasis role="preprocessor">&#32;&#32;}&#32;while&#32;(0)</emphasis>
222 <emphasis role="preprocessor">#else</emphasis>
223 <emphasis role="preprocessor">#define&#32;__cpuid(level,&#32;a,&#32;b,&#32;c,&#32;d)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
224 <emphasis role="preprocessor">&#32;&#32;__asm__&#32;__volatile__&#32;(&quot;cpuid\n\t&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;=a&quot;&#32;(a),&#32;&quot;=b&quot;&#32;(b),&#32;&quot;=c&quot;&#32;(c),&#32;&quot;=d&quot;&#32;(d)&#32;&#32;&#32;&#32;\</emphasis>
226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;0&quot;&#32;(level))</emphasis>
227 <emphasis role="preprocessor">#endif</emphasis>
228 
229 <emphasis role="preprocessor">#define&#32;__cpuid_count(level,&#32;count,&#32;a,&#32;b,&#32;c,&#32;d)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
230 <emphasis role="preprocessor">&#32;&#32;__asm__&#32;__volatile__&#32;(&quot;cpuid\n\t&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
231 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;=a&quot;&#32;(a),&#32;&quot;=b&quot;&#32;(b),&#32;&quot;=c&quot;&#32;(c),&#32;&quot;=d&quot;&#32;(d)&#32;&#32;&#32;&#32;\</emphasis>
232 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;&quot;0&quot;&#32;(level),&#32;&quot;2&quot;&#32;(count))</emphasis>
233 
234 
235 <emphasis role="comment">/*&#32;Return&#32;highest&#32;supported&#32;input&#32;value&#32;for&#32;cpuid&#32;instruction.&#32;&#32;ext&#32;can</emphasis>
236 <emphasis role="comment">&#32;&#32;&#32;be&#32;either&#32;0x0&#32;or&#32;0x80000000&#32;to&#32;return&#32;highest&#32;supported&#32;value&#32;for</emphasis>
237 <emphasis role="comment">&#32;&#32;&#32;basic&#32;or&#32;extended&#32;cpuid&#32;information.&#32;&#32;Function&#32;returns&#32;0&#32;if&#32;cpuid</emphasis>
238 <emphasis role="comment">&#32;&#32;&#32;is&#32;not&#32;supported&#32;or&#32;whatever&#32;cpuid&#32;returns&#32;in&#32;eax&#32;register.&#32;&#32;If&#32;sig</emphasis>
239 <emphasis role="comment">&#32;&#32;&#32;pointer&#32;is&#32;non-null,&#32;then&#32;first&#32;four&#32;bytes&#32;of&#32;the&#32;signature</emphasis>
240 <emphasis role="comment">&#32;&#32;&#32;(as&#32;found&#32;in&#32;ebx&#32;register)&#32;are&#32;returned&#32;in&#32;location&#32;pointed&#32;by&#32;sig.&#32;&#32;*/</emphasis>
241 
242 <emphasis role="keyword">static</emphasis>&#32;__inline&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
243 __get_cpuid_max&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__ext,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__sig)
244 {
245 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__eax,&#32;__ebx,&#32;__ecx,&#32;__edx;
246 
247 <emphasis role="preprocessor">#ifndef&#32;__x86_64__</emphasis>
248 &#32;&#32;<emphasis role="comment">/*&#32;See&#32;if&#32;we&#32;can&#32;use&#32;cpuid.&#32;&#32;On&#32;AMD64&#32;we&#32;always&#32;can.&#32;&#32;*/</emphasis>
249 <emphasis role="preprocessor">#if&#32;__GNUC__&#32;&gt;=&#32;3</emphasis>
250 &#32;&#32;__asm__&#32;(<emphasis role="stringliteral">&quot;pushf{l|d}\n\t&quot;</emphasis>
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;pushf{l|d}\n\t&quot;</emphasis>
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;pop{l}\t%0\n\t&quot;</emphasis>
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;mov{l}\t{%0,&#32;%1|%1,&#32;%0}\n\t&quot;</emphasis>
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;xor{l}\t{%2,&#32;%0|%0,&#32;%2}\n\t&quot;</emphasis>
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;push{l}\t%0\n\t&quot;</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;popf{l|d}\n\t&quot;</emphasis>
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;pushf{l|d}\n\t&quot;</emphasis>
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;pop{l}\t%0\n\t&quot;</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;popf{l|d}\n\t&quot;</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(__eax),&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(__ebx)
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>&#32;(0x00200000));
262 <emphasis role="preprocessor">#else</emphasis>
263 <emphasis role="comment">/*&#32;Host&#32;GCCs&#32;older&#32;than&#32;3.0&#32;weren&apos;t&#32;supporting&#32;Intel&#32;asm&#32;syntax</emphasis>
264 <emphasis role="comment">&#32;&#32;&#32;nor&#32;alternatives&#32;in&#32;i386&#32;code.&#32;&#32;*/</emphasis>
265 &#32;&#32;__asm__&#32;(<emphasis role="stringliteral">&quot;pushfl\n\t&quot;</emphasis>
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;pushfl\n\t&quot;</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;popl\t%0\n\t&quot;</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;movl\t%0,&#32;%1\n\t&quot;</emphasis>
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;xorl\t%2,&#32;%0\n\t&quot;</emphasis>
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;pushl\t%0\n\t&quot;</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;popfl\n\t&quot;</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;pushfl\n\t&quot;</emphasis>
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;popl\t%0\n\t&quot;</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;popfl\n\t&quot;</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(__eax),&#32;<emphasis role="stringliteral">&quot;=&amp;r&quot;</emphasis>&#32;(__ebx)
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="stringliteral">&quot;i&quot;</emphasis>&#32;(0x00200000));
277 <emphasis role="preprocessor">#endif</emphasis>
278 
279 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!((__eax&#32;^&#32;__ebx)&#32;&amp;&#32;0x00200000))
280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
281 <emphasis role="preprocessor">#endif</emphasis>
282 
283 &#32;&#32;<emphasis role="comment">/*&#32;Host&#32;supports&#32;cpuid.&#32;&#32;Return&#32;highest&#32;supported&#32;cpuid&#32;input&#32;value.&#32;&#32;*/</emphasis>
284 &#32;&#32;<link linkend="__classes_2lib_2include_2cpuid_8h_1a0a60b3297b088d11136eb91a8d87b0ee">__cpuid</link>&#32;(__ext,&#32;__eax,&#32;__ebx,&#32;__ecx,&#32;__edx);
285 
286 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__sig)
287 &#32;&#32;&#32;&#32;*__sig&#32;=&#32;__ebx;
288 
289 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__eax;
290 }
291 
292 <emphasis role="comment">/*&#32;Return&#32;cpuid&#32;data&#32;for&#32;requested&#32;cpuid&#32;leaf,&#32;as&#32;found&#32;in&#32;returned</emphasis>
293 <emphasis role="comment">&#32;&#32;&#32;eax,&#32;ebx,&#32;ecx&#32;and&#32;edx&#32;registers.&#32;&#32;The&#32;function&#32;checks&#32;if&#32;cpuid&#32;is</emphasis>
294 <emphasis role="comment">&#32;&#32;&#32;supported&#32;and&#32;returns&#32;1&#32;for&#32;valid&#32;cpuid&#32;information&#32;or&#32;0&#32;for</emphasis>
295 <emphasis role="comment">&#32;&#32;&#32;unsupported&#32;cpuid&#32;leaf.&#32;&#32;All&#32;pointers&#32;are&#32;required&#32;to&#32;be&#32;non-null.&#32;&#32;*/</emphasis>
296 
297 <emphasis role="keyword">static</emphasis>&#32;__inline&#32;<emphasis role="keywordtype">int</emphasis>
298 __get_cpuid&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__leaf,
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__eax,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__ebx,
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__ecx,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__edx)
301 {
302 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__ext&#32;=&#32;__leaf&#32;&amp;&#32;0x80000000;
303 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__maxlevel&#32;=&#32;__get_cpuid_max&#32;(__ext,&#32;0);
304 
305 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__maxlevel&#32;==&#32;0&#32;||&#32;__maxlevel&#32;&lt;&#32;__leaf)
306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
307 
308 &#32;&#32;<link linkend="__classes_2lib_2include_2cpuid_8h_1a0a60b3297b088d11136eb91a8d87b0ee">__cpuid</link>&#32;(__leaf,&#32;*__eax,&#32;*__ebx,&#32;*__ecx,&#32;*__edx);
309 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
310 }
311 
312 <emphasis role="comment">/*&#32;Same&#32;as&#32;above,&#32;but&#32;sub-leaf&#32;can&#32;be&#32;specified.&#32;&#32;*/</emphasis>
313 
314 <emphasis role="keyword">static</emphasis>&#32;__inline&#32;<emphasis role="keywordtype">int</emphasis>
315 __get_cpuid_count&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__leaf,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__subleaf,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__eax,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__ebx,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__ecx,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*__edx)
318 {
319 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__ext&#32;=&#32;__leaf&#32;&amp;&#32;0x80000000;
320 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__maxlevel&#32;=&#32;__get_cpuid_max&#32;(__ext,&#32;0);
321 
322 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__maxlevel&#32;==&#32;0&#32;||&#32;__maxlevel&#32;&lt;&#32;__leaf)
323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
324 
325 &#32;&#32;<link linkend="__classes_2lib_2include_2cpuid_8h_1adbce48c7fbd469d3d190242491dcdfa2">__cpuid_count</link>&#32;(__leaf,&#32;__subleaf,&#32;*__eax,&#32;*__ebx,&#32;*__ecx,&#32;*__edx);
326 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
327 }
328 
329 <emphasis role="keyword">static</emphasis>&#32;__inline&#32;<emphasis role="keywordtype">void</emphasis>
330 __cpuidex&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__cpuid_info[4],&#32;<emphasis role="keywordtype">int</emphasis>&#32;__leaf,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__subleaf)
331 {
332 &#32;&#32;<link linkend="__classes_2lib_2include_2cpuid_8h_1adbce48c7fbd469d3d190242491dcdfa2">__cpuid_count</link>&#32;(__leaf,&#32;__subleaf,&#32;__cpuid_info[0],&#32;__cpuid_info[1],
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cpuid_info[2],&#32;__cpuid_info[3]);
334 }
335 
336 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_CPUID_H_INCLUDED&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
