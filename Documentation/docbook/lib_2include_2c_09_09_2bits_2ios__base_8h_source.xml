<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2ios__base_8h_source" xml:lang="en-US">
<title>ios_base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ios_base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Iostreams&#32;base&#32;classes&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//</emphasis>
31 <emphasis role="comment">//&#32;ISO&#32;C++&#32;14882:&#32;27.4&#32;&#32;Iostreams&#32;base&#32;classes</emphasis>
32 <emphasis role="comment">//</emphasis>
33 
34 <emphasis role="preprocessor">#ifndef&#32;_IOS_BASE_H</emphasis>
35 <emphasis role="preprocessor">#define&#32;_IOS_BASE_H&#32;1</emphasis>
36 
37 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;ext/atomicity.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/localefwd.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/locale_classes.h&gt;</emphasis>
42 
43 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
44 <emphasis role="preprocessor">#&#32;include&#32;&lt;stdexcept&gt;</emphasis>
45 <emphasis role="preprocessor">#else</emphasis>
46 <emphasis role="preprocessor">#&#32;include&#32;&lt;system_error&gt;</emphasis>
47 <emphasis role="preprocessor">#endif</emphasis>
48 
49 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
50 {
51 _GLIBCXX_BEGIN_NAMESPACE_VERSION
52 
53 &#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;definitions&#32;of&#32;bitmask&#32;types&#32;are&#32;enums,&#32;not&#32;ints,</emphasis>
54 &#32;&#32;<emphasis role="comment">//&#32;as&#32;permitted&#32;(but&#32;not&#32;required)&#32;in&#32;the&#32;standard,&#32;in&#32;order&#32;to&#32;provide</emphasis>
55 &#32;&#32;<emphasis role="comment">//&#32;better&#32;type&#32;safety&#32;in&#32;iostream&#32;calls.&#32;&#32;A&#32;side&#32;effect&#32;is&#32;that&#32;in&#32;C++98</emphasis>
56 &#32;&#32;<emphasis role="comment">//&#32;expressions&#32;involving&#32;them&#32;are&#32;not&#32;compile-time&#32;constants.</emphasis>
57 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_Ios_Fmtflags&#32;
58 &#32;&#32;&#32;&#32;{&#32;
59 &#32;&#32;&#32;&#32;&#32;&#32;_S_boolalpha&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;0,
60 &#32;&#32;&#32;&#32;&#32;&#32;_S_dec&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;1,
61 &#32;&#32;&#32;&#32;&#32;&#32;_S_fixed&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;2,
62 &#32;&#32;&#32;&#32;&#32;&#32;_S_hex&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;3,
63 &#32;&#32;&#32;&#32;&#32;&#32;_S_internal&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;4,
64 &#32;&#32;&#32;&#32;&#32;&#32;_S_left&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;5,
65 &#32;&#32;&#32;&#32;&#32;&#32;_S_oct&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;6,
66 &#32;&#32;&#32;&#32;&#32;&#32;_S_right&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;7,
67 &#32;&#32;&#32;&#32;&#32;&#32;_S_scientific&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;8,
68 &#32;&#32;&#32;&#32;&#32;&#32;_S_showbase&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;9,
69 &#32;&#32;&#32;&#32;&#32;&#32;_S_showpoint&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;10,
70 &#32;&#32;&#32;&#32;&#32;&#32;_S_showpos&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;11,
71 &#32;&#32;&#32;&#32;&#32;&#32;_S_skipws&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;12,
72 &#32;&#32;&#32;&#32;&#32;&#32;_S_unitbuf&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;13,
73 &#32;&#32;&#32;&#32;&#32;&#32;_S_uppercase&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;14,
74 &#32;&#32;&#32;&#32;&#32;&#32;_S_adjustfield&#32;&#32;&#32;&#32;=&#32;_S_left&#32;|&#32;_S_right&#32;|&#32;_S_internal,
75 &#32;&#32;&#32;&#32;&#32;&#32;_S_basefield&#32;&#32;=&#32;_S_dec&#32;|&#32;_S_oct&#32;|&#32;_S_hex,
76 &#32;&#32;&#32;&#32;&#32;&#32;_S_floatfield&#32;&#32;&#32;&#32;&#32;=&#32;_S_scientific&#32;|&#32;_S_fixed,
77 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_fmtflags_end&#32;=&#32;1L&#32;&lt;&lt;&#32;16,
78 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_fmtflags_max&#32;=&#32;__INT_MAX__,
79 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_fmtflags_min&#32;=&#32;~__INT_MAX__
80 &#32;&#32;&#32;&#32;};
81 
82 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Fmtflags
83 &#32;&#32;operator&amp;(_Ios_Fmtflags&#32;__a,&#32;_Ios_Fmtflags&#32;__b)
84 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Fmtflags(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
85 
86 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Fmtflags
87 &#32;&#32;operator|(_Ios_Fmtflags&#32;__a,&#32;_Ios_Fmtflags&#32;__b)
88 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Fmtflags(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
89 
90 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Fmtflags
91 &#32;&#32;operator^(_Ios_Fmtflags&#32;__a,&#32;_Ios_Fmtflags&#32;__b)
92 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Fmtflags(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
93 
94 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Fmtflags
95 &#32;&#32;operator~(_Ios_Fmtflags&#32;__a)
96 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Fmtflags(~<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a));&#32;}
97 
98 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Fmtflags&amp;
99 &#32;&#32;operator|=(_Ios_Fmtflags&amp;&#32;__a,&#32;_Ios_Fmtflags&#32;__b)
100 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;|&#32;__b;&#32;}
101 
102 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Fmtflags&amp;
103 &#32;&#32;operator&amp;=(_Ios_Fmtflags&amp;&#32;__a,&#32;_Ios_Fmtflags&#32;__b)
104 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;&amp;&#32;__b;&#32;}
105 
106 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Fmtflags&amp;
107 &#32;&#32;operator^=(_Ios_Fmtflags&amp;&#32;__a,&#32;_Ios_Fmtflags&#32;__b)
108 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;^&#32;__b;&#32;}
109 
110 
111 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_Ios_Openmode&#32;
112 &#32;&#32;&#32;&#32;{&#32;
113 &#32;&#32;&#32;&#32;&#32;&#32;_S_app&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;0,
114 &#32;&#32;&#32;&#32;&#32;&#32;_S_ate&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;1,
115 &#32;&#32;&#32;&#32;&#32;&#32;_S_bin&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;2,
116 &#32;&#32;&#32;&#32;&#32;&#32;_S_in&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;3,
117 &#32;&#32;&#32;&#32;&#32;&#32;_S_out&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;4,
118 &#32;&#32;&#32;&#32;&#32;&#32;_S_trunc&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;5,
119 &#32;&#32;&#32;&#32;&#32;&#32;_S_noreplace&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;6,
120 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_openmode_end&#32;=&#32;1L&#32;&lt;&lt;&#32;16,
121 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_openmode_max&#32;=&#32;__INT_MAX__,
122 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_openmode_min&#32;=&#32;~__INT_MAX__
123 &#32;&#32;&#32;&#32;};
124 
125 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Openmode
126 &#32;&#32;operator&amp;(_Ios_Openmode&#32;__a,&#32;_Ios_Openmode&#32;__b)
127 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Openmode(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
128 
129 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Openmode
130 &#32;&#32;operator|(_Ios_Openmode&#32;__a,&#32;_Ios_Openmode&#32;__b)
131 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Openmode(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
132 
133 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Openmode
134 &#32;&#32;operator^(_Ios_Openmode&#32;__a,&#32;_Ios_Openmode&#32;__b)
135 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Openmode(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
136 
137 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Openmode
138 &#32;&#32;operator~(_Ios_Openmode&#32;__a)
139 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Openmode(~<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a));&#32;}
140 
141 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Openmode&amp;
142 &#32;&#32;operator|=(_Ios_Openmode&amp;&#32;__a,&#32;_Ios_Openmode&#32;__b)
143 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;|&#32;__b;&#32;}
144 
145 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Openmode&amp;
146 &#32;&#32;operator&amp;=(_Ios_Openmode&amp;&#32;__a,&#32;_Ios_Openmode&#32;__b)
147 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;&amp;&#32;__b;&#32;}
148 
149 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Openmode&amp;
150 &#32;&#32;operator^=(_Ios_Openmode&amp;&#32;__a,&#32;_Ios_Openmode&#32;__b)
151 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;^&#32;__b;&#32;}
152 
153 
154 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_Ios_Iostate
155 &#32;&#32;&#32;&#32;{&#32;
156 &#32;&#32;&#32;&#32;&#32;&#32;_S_goodbit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0,
157 &#32;&#32;&#32;&#32;&#32;&#32;_S_badbit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;0,
158 &#32;&#32;&#32;&#32;&#32;&#32;_S_eofbit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;1,
159 &#32;&#32;&#32;&#32;&#32;&#32;_S_failbit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;2,
160 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_iostate_end&#32;=&#32;1L&#32;&lt;&lt;&#32;16,
161 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_iostate_max&#32;=&#32;__INT_MAX__,
162 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_iostate_min&#32;=&#32;~__INT_MAX__
163 &#32;&#32;&#32;&#32;};
164 
165 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Iostate
166 &#32;&#32;operator&amp;(_Ios_Iostate&#32;__a,&#32;_Ios_Iostate&#32;__b)
167 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Iostate(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
168 
169 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Iostate
170 &#32;&#32;operator|(_Ios_Iostate&#32;__a,&#32;_Ios_Iostate&#32;__b)
171 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Iostate(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
172 
173 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Iostate
174 &#32;&#32;operator^(_Ios_Iostate&#32;__a,&#32;_Ios_Iostate&#32;__b)
175 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Iostate(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a)&#32;^&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__b));&#32;}
176 
177 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Ios_Iostate
178 &#32;&#32;operator~(_Ios_Iostate&#32;__a)
179 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ios_Iostate(~<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__a));&#32;}
180 
181 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Iostate&amp;
182 &#32;&#32;operator|=(_Ios_Iostate&amp;&#32;__a,&#32;_Ios_Iostate&#32;__b)
183 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;|&#32;__b;&#32;}
184 
185 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Ios_Iostate&amp;
186 &#32;&#32;operator&amp;=(_Ios_Iostate&amp;&#32;__a,&#32;_Ios_Iostate&#32;__b)
187 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;&amp;&#32;__b;&#32;}
188 
189 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;_Ios_Iostate&amp;
190 &#32;&#32;operator^=(_Ios_Iostate&amp;&#32;__a,&#32;_Ios_Iostate&#32;__b)
191 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;=&#32;__a&#32;^&#32;__b;&#32;}
192 
193 
194 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_Ios_Seekdir&#32;
195 &#32;&#32;&#32;&#32;{&#32;
196 &#32;&#32;&#32;&#32;&#32;&#32;_S_beg&#32;=&#32;0,
197 &#32;&#32;&#32;&#32;&#32;&#32;_S_cur&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1accfba8e6ec78d0c9eb276029210a9a99">_GLIBCXX_STDIO_SEEK_CUR</link>,
198 &#32;&#32;&#32;&#32;&#32;&#32;_S_end&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ac6bc8d4cc75a26f111c816544b7e28a7">_GLIBCXX_STDIO_SEEK_END</link>,
199 &#32;&#32;&#32;&#32;&#32;&#32;_S_ios_seekdir_end&#32;=&#32;1L&#32;&lt;&lt;&#32;16&#32;
200 &#32;&#32;&#32;&#32;};
201 
202 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
204 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;io_errc&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>&#32;=&#32;1&#32;};
205 
206 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_error_code_enum&lt;io_errc&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;true_type&#32;{&#32;};
207 
208 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;error_category&amp;&#32;iostream_category()&#32;<emphasis role="keyword">noexcept</emphasis>;
209 
210 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;error_code
211 &#32;&#32;make_error_code(io_errc&#32;__e)&#32;<emphasis role="keyword">noexcept</emphasis>
212 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_code(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__e),&#32;iostream_category());&#32;}
213 
214 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;error_condition
215 &#32;&#32;make_error_condition(io_errc&#32;__e)&#32;<emphasis role="keyword">noexcept</emphasis>
216 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_condition(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__e),&#32;iostream_category());&#32;}
217 <emphasis role="preprocessor">#endif</emphasis>
218 
219 &#32;&#32;<emphasis role="comment">//&#32;27.4.2&#32;&#32;Class&#32;ios_base</emphasis>
229 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ios_base
230 &#32;&#32;{
231 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
232 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Type&#32;that&#32;is&#32;layout-compatible&#32;with&#32;std::system_error</emphasis>
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>system_error&#32;:&#32;std::runtime_error
235 &#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Type&#32;that&#32;is&#32;layout-compatible&#32;with&#32;std::error_code</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>error_code
238 &#32;&#32;&#32;&#32;&#32;&#32;{
239 &#32;&#32;&#32;&#32;error_code()&#32;{&#32;}
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;_M_value;
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;_M_cat;
243 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;_M_code;
244 &#32;&#32;&#32;&#32;};
245 <emphasis role="preprocessor">#endif</emphasis>
246 <emphasis role="preprocessor">#endif</emphasis>
247 &#32;&#32;<emphasis role="keyword">public</emphasis>:
248 
255 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
256 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad7d29ac44393cedd1b17fc5dc40186a8">_GLIBCXX_ABI_TAG_CXX11</link>&#32;failure&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;system_error
257 &#32;&#32;&#32;&#32;{
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;failure(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str);
261 
262 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;failure(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;error_code&amp;);
265 
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;failure(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;error_code&amp;&#32;=&#32;io_errc::stream);
268 <emphasis role="preprocessor">#endif</emphasis>
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
271 &#32;&#32;&#32;&#32;&#32;&#32;~failure()&#32;<emphasis role="keywordflow">throw</emphasis>();
272 
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
274 &#32;&#32;&#32;&#32;&#32;&#32;what()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
275 &#32;&#32;&#32;&#32;};
276 <emphasis role="preprocessor">#else</emphasis>
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>failure&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;exception
278 &#32;&#32;&#32;&#32;{
279 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;48.&#32;&#32;Use&#32;of&#32;non-existent&#32;exception&#32;constructor</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;failure(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str)&#32;<emphasis role="keywordflow">throw</emphasis>();
284 
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;declaration&#32;is&#32;not&#32;useless:</emphasis>
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;http://gcc.gnu.org/onlinedocs/gcc-4.3.2/gcc/Vague-Linkage.html</emphasis>
287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;~failure()&#32;<emphasis role="keywordflow">throw</emphasis>();
289 
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
291 &#32;&#32;&#32;&#32;&#32;&#32;what()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
292 
293 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Define&#32;the&#32;new&#32;members&#32;required&#32;by&#32;C++11,</emphasis>
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;even&#32;though&#32;the&#32;error_code&#32;cannot&#32;be&#32;stored.</emphasis>
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;failure(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;error_code&amp;)&#32;noexcept
299 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;failure(__s)
300 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
301 
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;failure(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;error_code&amp;&#32;=&#32;error_code{})
304 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;failure(<emphasis role="keywordtype">string</emphasis>(__s))
305 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Stand-in&#32;for&#32;system_error::code()&#32;but&#32;returning&#32;by&#32;value.</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;error_code&#32;code()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_code{};&#32;}
309 <emphasis role="preprocessor">#endif</emphasis>
310 
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;_M_msg;
313 &#32;&#32;&#32;&#32;};
314 <emphasis role="preprocessor">#endif</emphasis>
315 
316 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.1.2&#32;&#32;Type&#32;ios_base::fmtflags</emphasis>
342 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ios_Fmtflags&#32;fmtflags;
343 
345 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;boolalpha&#32;=&#32;&#32;&#32;_S_boolalpha;
346 
348 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;dec&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_dec;
349 
351 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;fixed&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_fixed;
352 
354 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;hex&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_hex;
355 
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;internal&#32;=&#32;&#32;&#32;&#32;_S_internal;
360 
363 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;left&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_left;
364 
366 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;oct&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_oct;
367 
370 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;right&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_right;
371 
373 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;scientific&#32;=&#32;&#32;_S_scientific;
374 
377 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;showbase&#32;=&#32;&#32;&#32;&#32;_S_showbase;
378 
381 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;showpoint&#32;=&#32;&#32;&#32;_S_showpoint;
382 
384 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;showpos&#32;=&#32;&#32;&#32;&#32;&#32;_S_showpos;
385 
387 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;skipws&#32;=&#32;&#32;&#32;&#32;&#32;&#32;_S_skipws;
388 
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;unitbuf&#32;=&#32;&#32;&#32;&#32;&#32;_S_unitbuf;
391 
394 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;uppercase&#32;=&#32;&#32;&#32;_S_uppercase;
395 
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;adjustfield&#32;=&#32;_S_adjustfield;
398 
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;basefield&#32;=&#32;&#32;&#32;_S_basefield;
401 
403 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;fmtflags&#32;floatfield&#32;=&#32;&#32;_S_floatfield;
404 
405 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.1.3&#32;&#32;Type&#32;ios_base::iostate</emphasis>
417 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ios_Iostate&#32;iostate;
418 
421 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;iostate&#32;badbit&#32;=&#32;&#32;&#32;_S_badbit;
422 
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;iostate&#32;eofbit&#32;=&#32;&#32;&#32;_S_eofbit;
425 
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;iostate&#32;failbit&#32;=&#32;&#32;_S_failbit;
430 
432 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;iostate&#32;goodbit&#32;=&#32;&#32;_S_goodbit;
433 
434 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.1.4&#32;&#32;Type&#32;ios_base::openmode</emphasis>
448 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ios_Openmode&#32;openmode;
449 
451 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;app&#32;=&#32;&#32;&#32;&#32;&#32;_S_app;
452 
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;ate&#32;=&#32;&#32;&#32;&#32;&#32;_S_ate;
455 
459 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">binary</link>&#32;=&#32;&#32;_S_bin;
460 
462 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;=&#32;&#32;&#32;&#32;&#32;&#32;_S_in;
463 
465 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;out&#32;=&#32;&#32;&#32;&#32;&#32;_S_out;
466 
468 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a1bf4c48c09dda9ec4a0b1b4aa8cd8920">trunc</link>&#32;=&#32;&#32;&#32;_S_trunc;
469 
470 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;__noreplace&#32;=&#32;_S_noreplace;
471 
472 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202100L</emphasis>
473 <emphasis role="preprocessor">#define&#32;__cpp_lib_ios_noreplace&#32;202207L</emphasis>
475 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;openmode&#32;noreplace&#32;=&#32;&#32;&#32;_S_noreplace;
476 <emphasis role="preprocessor">#endif</emphasis>
477 
478 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.1.5&#32;&#32;Type&#32;ios_base::seekdir</emphasis>
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ios_Seekdir&#32;seekdir;
489 
491 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;seekdir&#32;beg&#32;=&#32;&#32;&#32;&#32;&#32;&#32;_S_beg;
492 
494 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;seekdir&#32;cur&#32;=&#32;&#32;&#32;&#32;&#32;&#32;_S_cur;
495 
497 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;seekdir&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;&#32;&#32;&#32;&#32;&#32;_S_end;
498 
499 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201402L</emphasis>
500 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Annex&#32;D.6&#32;(removed&#32;in&#32;C++17)</emphasis>
501 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;io_state
502 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a17fa7e635ec9d71553d5324a00388bad">_GLIBCXX_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::iostate&quot;</emphasis>);
503 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;open_mode
504 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a17fa7e635ec9d71553d5324a00388bad">_GLIBCXX_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::openmode&quot;</emphasis>);
505 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;seek_dir
506 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a17fa7e635ec9d71553d5324a00388bad">_GLIBCXX_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::seekdir&quot;</emphasis>);
507 
508 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::streampos&#32;streampos
509 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a17fa7e635ec9d71553d5324a00388bad">_GLIBCXX_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::streampos&quot;</emphasis>);
510 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::streamoff&#32;streamoff
511 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a17fa7e635ec9d71553d5324a00388bad">_GLIBCXX_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::streamoff&quot;</emphasis>);
512 <emphasis role="preprocessor">#endif</emphasis>
513 
514 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Callbacks;</emphasis>
521 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<emphasis role="keyword">event</emphasis>
522 &#32;&#32;&#32;&#32;{
523 &#32;&#32;&#32;&#32;&#32;&#32;erase_event,
524 &#32;&#32;&#32;&#32;&#32;&#32;imbue_event,
525 &#32;&#32;&#32;&#32;&#32;&#32;copyfmt_event
526 &#32;&#32;&#32;&#32;};
527 
538 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(*event_callback)&#32;(<emphasis role="keyword">event</emphasis>&#32;__e,&#32;ios_base&amp;&#32;__b,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__i);
539 
550 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
551 &#32;&#32;&#32;&#32;register_callback(event_callback&#32;__fn,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__index);
552 
553 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
554 &#32;&#32;&#32;&#32;streamsize&#32;&#32;&#32;&#32;&#32;&#32;_M_precision;
555 &#32;&#32;&#32;&#32;streamsize&#32;&#32;&#32;&#32;&#32;&#32;_M_width;
556 &#32;&#32;&#32;&#32;fmtflags&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_flags;
557 &#32;&#32;&#32;&#32;iostate&#32;&#32;&#32;&#32;&#32;_M_exception;
558 &#32;&#32;&#32;&#32;iostate&#32;&#32;&#32;&#32;&#32;_M_streambuf_state;
559 
560 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.6&#32;&#32;Members&#32;for&#32;callbacks</emphasis>
561 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.6&#32;&#32;ios_base&#32;callbacks</emphasis>
562 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Callback_list
563 &#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Members</emphasis>
565 &#32;&#32;&#32;&#32;&#32;&#32;_Callback_list*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_next;
566 &#32;&#32;&#32;&#32;&#32;&#32;ios_base::event_callback&#32;&#32;_M_fn;
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_index;
568 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount;&#32;&#32;<emphasis role="comment">//&#32;0&#32;means&#32;one&#32;reference.</emphasis>
569 
570 &#32;&#32;&#32;&#32;&#32;&#32;_Callback_list(ios_base::event_callback&#32;__fn,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__index,
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Callback_list*&#32;__cb)
572 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_next(__cb),&#32;_M_fn(__fn),&#32;_M_index(__index),&#32;_M_refcount(0)&#32;{&#32;}
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
575 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_reference()&#32;{&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_refcount,&#32;1);&#32;}
576 
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;=&gt;&#32;OK&#32;to&#32;delete.</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
579 &#32;&#32;&#32;&#32;&#32;&#32;_M_remove_reference()&#32;
580 &#32;&#32;&#32;&#32;&#32;&#32;{
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_refcount);
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__res&#32;=&#32;__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_refcount,&#32;-1);
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;==&#32;0)
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_refcount);
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res;
589 &#32;&#32;&#32;&#32;&#32;&#32;}
590 &#32;&#32;&#32;&#32;};
591 
592 &#32;&#32;&#32;&#32;&#32;_Callback_list*&#32;&#32;&#32;&#32;_M_callbacks;
593 
594 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
595 &#32;&#32;&#32;&#32;_M_call_callbacks(event&#32;__ev)&#32;<emphasis role="keywordflow">throw</emphasis>();
596 
597 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
598 &#32;&#32;&#32;&#32;_M_dispose_callbacks(<emphasis role="keywordtype">void</emphasis>)&#32;<emphasis role="keywordflow">throw</emphasis>();
599 
600 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.5&#32;&#32;Members&#32;for&#32;iword/pword&#32;storage</emphasis>
601 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Words
602 &#32;&#32;&#32;&#32;{
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;_M_pword;
604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;_M_iword;
605 &#32;&#32;&#32;&#32;&#32;&#32;_Words()&#32;:&#32;_M_pword(0),&#32;_M_iword(0)&#32;{&#32;}
606 &#32;&#32;&#32;&#32;};
607 
608 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;for&#32;failed&#32;iword/pword&#32;calls.</emphasis>
609 &#32;&#32;&#32;&#32;_Words&#32;&#32;&#32;&#32;&#32;&#32;_M_word_zero;
610 
611 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Guaranteed&#32;storage.</emphasis>
612 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;first&#32;5&#32;iword&#32;and&#32;pword&#32;slots&#32;are&#32;reserved&#32;for&#32;internal&#32;use.</emphasis>
613 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_local_word_size&#32;=&#32;8&#32;};
614 &#32;&#32;&#32;&#32;_Words&#32;&#32;&#32;&#32;&#32;&#32;_M_local_word[_S_local_word_size];
615 
616 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocated&#32;storage.</emphasis>
617 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_word_size;
618 &#32;&#32;&#32;&#32;_Words*&#32;&#32;&#32;&#32;&#32;_M_word;
619 
620 &#32;&#32;&#32;&#32;_Words&amp;
621 &#32;&#32;&#32;&#32;_M_grow_words(<emphasis role="keywordtype">int</emphasis>&#32;__index,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__iword);
622 
623 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Members&#32;for&#32;locale&#32;and&#32;locale&#32;caching.</emphasis>
624 &#32;&#32;&#32;&#32;locale&#32;&#32;&#32;&#32;&#32;&#32;_M_ios_locale;
625 
626 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
627 &#32;&#32;&#32;&#32;_M_init()&#32;<emphasis role="keywordflow">throw</emphasis>();
628 
629 &#32;&#32;<emphasis role="keyword">public</emphasis>:
630 
631 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;27.4.2.1.6&#32;&#32;Class&#32;ios_base::Init</emphasis>
632 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;to&#32;initialize&#32;standard&#32;streams.&#32;In&#32;theory,&#32;g++&#32;could&#32;use</emphasis>
633 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-finit-priority&#32;to&#32;order&#32;this&#32;stuff&#32;correctly&#32;without&#32;going</emphasis>
634 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;through&#32;these&#32;machinations.</emphasis>
635 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>Init
636 &#32;&#32;&#32;&#32;{
637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>ios_base;
638 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
639 &#32;&#32;&#32;&#32;&#32;&#32;Init();
640 &#32;&#32;&#32;&#32;&#32;&#32;~Init();
641 
642 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;Init(<emphasis role="keyword">const</emphasis>&#32;Init&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
644 &#32;&#32;&#32;&#32;&#32;&#32;Init&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;Init&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
645 <emphasis role="preprocessor">#endif</emphasis>
646 
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;_S_refcount;
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_synced_with_stdio;
650 &#32;&#32;&#32;&#32;};
651 
652 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[27.4.2.2]&#32;fmtflags&#32;state&#32;functions</emphasis>
657 &#32;&#32;&#32;&#32;fmtflags
658 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>()<emphasis role="keyword">&#32;const</emphasis>
659 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags;&#32;}
660 
668 &#32;&#32;&#32;&#32;fmtflags
669 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>(fmtflags&#32;__fmtfl)
670 &#32;&#32;&#32;&#32;{
671 &#32;&#32;&#32;&#32;&#32;&#32;fmtflags&#32;__old&#32;=&#32;_M_flags;
672 &#32;&#32;&#32;&#32;&#32;&#32;_M_flags&#32;=&#32;__fmtfl;
673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
674 &#32;&#32;&#32;&#32;}
675 
684 &#32;&#32;&#32;&#32;fmtflags
685 &#32;&#32;&#32;&#32;setf(fmtflags&#32;__fmtfl)
686 &#32;&#32;&#32;&#32;{
687 &#32;&#32;&#32;&#32;&#32;&#32;fmtflags&#32;__old&#32;=&#32;_M_flags;
688 &#32;&#32;&#32;&#32;&#32;&#32;_M_flags&#32;|=&#32;__fmtfl;
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
690 &#32;&#32;&#32;&#32;}
691 
701 &#32;&#32;&#32;&#32;fmtflags
702 &#32;&#32;&#32;&#32;setf(fmtflags&#32;__fmtfl,&#32;fmtflags&#32;__mask)
703 &#32;&#32;&#32;&#32;{
704 &#32;&#32;&#32;&#32;&#32;&#32;fmtflags&#32;__old&#32;=&#32;_M_flags;
705 &#32;&#32;&#32;&#32;&#32;&#32;_M_flags&#32;&amp;=&#32;~__mask;
706 &#32;&#32;&#32;&#32;&#32;&#32;_M_flags&#32;|=&#32;(__fmtfl&#32;&amp;&#32;__mask);
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
708 &#32;&#32;&#32;&#32;}
709 
716 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
717 &#32;&#32;&#32;&#32;unsetf(fmtflags&#32;__mask)
718 &#32;&#32;&#32;&#32;{&#32;_M_flags&#32;&amp;=&#32;~__mask;&#32;}
719 
727 &#32;&#32;&#32;&#32;streamsize
728 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae6165268264b393d031f89082216499d">precision</link>()<emphasis role="keyword">&#32;const</emphasis>
729 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_precision;&#32;}
730 
736 &#32;&#32;&#32;&#32;streamsize
737 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae6165268264b393d031f89082216499d">precision</link>(streamsize&#32;__prec)
738 &#32;&#32;&#32;&#32;{
739 &#32;&#32;&#32;&#32;&#32;&#32;streamsize&#32;__old&#32;=&#32;_M_precision;
740 &#32;&#32;&#32;&#32;&#32;&#32;_M_precision&#32;=&#32;__prec;
741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
742 &#32;&#32;&#32;&#32;}
743 
750 &#32;&#32;&#32;&#32;streamsize
751 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width</link>()<emphasis role="keyword">&#32;const</emphasis>
752 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_width;&#32;}
753 
759 &#32;&#32;&#32;&#32;streamsize
760 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3ce386e55bbeb900c1b23e064b89bd04">width</link>(streamsize&#32;__wide)
761 &#32;&#32;&#32;&#32;{
762 &#32;&#32;&#32;&#32;&#32;&#32;streamsize&#32;__old&#32;=&#32;_M_width;
763 &#32;&#32;&#32;&#32;&#32;&#32;_M_width&#32;=&#32;__wide;
764 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
765 &#32;&#32;&#32;&#32;}
766 
767 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[27.4.2.4]&#32;ios_base&#32;static&#32;members</emphasis>
778 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
779 &#32;&#32;&#32;&#32;sync_with_stdio(<emphasis role="keywordtype">bool</emphasis>&#32;__sync&#32;=&#32;<emphasis role="keyword">true</emphasis>);
780 
781 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[27.4.2.3]&#32;ios_base&#32;locale&#32;functions</emphasis>
790 &#32;&#32;&#32;&#32;locale
791 &#32;&#32;&#32;&#32;imbue(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc)&#32;<emphasis role="keywordflow">throw</emphasis>();
792 
801 &#32;&#32;&#32;&#32;locale
802 &#32;&#32;&#32;&#32;getloc()<emphasis role="keyword">&#32;const</emphasis>
803 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ios_locale;&#32;}
804 
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;
813 &#32;&#32;&#32;&#32;_M_getloc()<emphasis role="keyword">&#32;const</emphasis>
814 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ios_locale;&#32;}
815 
816 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[27.4.2.5]&#32;ios_base&#32;storage&#32;functions</emphasis>
831 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
832 &#32;&#32;&#32;&#32;xalloc()&#32;<emphasis role="keywordflow">throw</emphasis>();
833 
847 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&amp;
848 &#32;&#32;&#32;&#32;iword(<emphasis role="keywordtype">int</emphasis>&#32;__ix)
849 &#32;&#32;&#32;&#32;{
850 &#32;&#32;&#32;&#32;&#32;&#32;_Words&amp;&#32;__word&#32;=&#32;((unsigned)__ix&#32;&lt;&#32;(<emphasis role="keywordtype">unsigned</emphasis>)_M_word_size)
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_word[__ix]&#32;:&#32;_M_grow_words(__ix,&#32;<emphasis role="keyword">true</emphasis>);
852 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__word._M_iword;
853 &#32;&#32;&#32;&#32;}
854 
868 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&amp;
869 &#32;&#32;&#32;&#32;pword(<emphasis role="keywordtype">int</emphasis>&#32;__ix)
870 &#32;&#32;&#32;&#32;{
871 &#32;&#32;&#32;&#32;&#32;&#32;_Words&amp;&#32;__word&#32;=&#32;((unsigned)__ix&#32;&lt;&#32;(<emphasis role="keywordtype">unsigned</emphasis>)_M_word_size)
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_word[__ix]&#32;:&#32;_M_grow_words(__ix,&#32;<emphasis role="keyword">false</emphasis>);
873 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__word._M_pword;
874 &#32;&#32;&#32;&#32;}
875 
876 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destructor</emphasis>
885 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~ios_base();
886 
887 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
888 &#32;&#32;&#32;&#32;ios_base()&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
889 
890 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
891 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
892 &#32;&#32;<emphasis role="comment">//&#32;50.&#32;&#32;Copy&#32;constructor&#32;and&#32;assignment&#32;operator&#32;of&#32;ios_base</emphasis>
893 &#32;&#32;<emphasis role="keyword">private</emphasis>:
894 &#32;&#32;&#32;&#32;ios_base(<emphasis role="keyword">const</emphasis>&#32;ios_base&amp;);
895 
896 &#32;&#32;&#32;&#32;ios_base&amp;
897 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;ios_base&amp;);
898 <emphasis role="preprocessor">#else</emphasis>
899 &#32;&#32;<emphasis role="keyword">public</emphasis>:
900 &#32;&#32;&#32;&#32;ios_base(<emphasis role="keyword">const</emphasis>&#32;ios_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
901 
902 &#32;&#32;&#32;&#32;ios_base&amp;
903 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;ios_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
904 
905 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
906 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
907 &#32;&#32;&#32;&#32;_M_move(ios_base&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
908 
909 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
910 &#32;&#32;&#32;&#32;_M_swap(ios_base&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>;
911 <emphasis role="preprocessor">#endif</emphasis>
912 &#32;&#32;};
913 
914 &#32;&#32;<emphasis role="comment">//&#32;[27.4.5.1]&#32;fmtflags&#32;manipulators</emphasis>
916 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
917 &#32;&#32;boolalpha(ios_base&amp;&#32;__base)
918 &#32;&#32;{
919 &#32;&#32;&#32;&#32;__base.setf(ios_base::boolalpha);
920 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
921 &#32;&#32;}
922 
924 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
925 &#32;&#32;noboolalpha(ios_base&amp;&#32;__base)
926 &#32;&#32;{
927 &#32;&#32;&#32;&#32;__base.unsetf(ios_base::boolalpha);
928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
929 &#32;&#32;}
930 
932 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
933 &#32;&#32;showbase(ios_base&amp;&#32;__base)
934 &#32;&#32;{
935 &#32;&#32;&#32;&#32;__base.setf(ios_base::showbase);
936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
937 &#32;&#32;}
938 
940 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
941 &#32;&#32;noshowbase(ios_base&amp;&#32;__base)
942 &#32;&#32;{
943 &#32;&#32;&#32;&#32;__base.unsetf(ios_base::showbase);
944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
945 &#32;&#32;}
946 
948 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
949 &#32;&#32;showpoint(ios_base&amp;&#32;__base)
950 &#32;&#32;{
951 &#32;&#32;&#32;&#32;__base.setf(ios_base::showpoint);
952 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
953 &#32;&#32;}
954 
956 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
957 &#32;&#32;noshowpoint(ios_base&amp;&#32;__base)
958 &#32;&#32;{
959 &#32;&#32;&#32;&#32;__base.unsetf(ios_base::showpoint);
960 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
961 &#32;&#32;}
962 
964 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
965 &#32;&#32;showpos(ios_base&amp;&#32;__base)
966 &#32;&#32;{
967 &#32;&#32;&#32;&#32;__base.setf(ios_base::showpos);
968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
969 &#32;&#32;}
970 
972 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
973 &#32;&#32;noshowpos(ios_base&amp;&#32;__base)
974 &#32;&#32;{
975 &#32;&#32;&#32;&#32;__base.unsetf(ios_base::showpos);
976 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
977 &#32;&#32;}
978 
980 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
981 &#32;&#32;skipws(ios_base&amp;&#32;__base)
982 &#32;&#32;{
983 &#32;&#32;&#32;&#32;__base.setf(ios_base::skipws);
984 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
985 &#32;&#32;}
986 
988 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
989 &#32;&#32;noskipws(ios_base&amp;&#32;__base)
990 &#32;&#32;{
991 &#32;&#32;&#32;&#32;__base.unsetf(ios_base::skipws);
992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
993 &#32;&#32;}
994 
996 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
997 &#32;&#32;uppercase(ios_base&amp;&#32;__base)
998 &#32;&#32;{
999 &#32;&#32;&#32;&#32;__base.setf(ios_base::uppercase);
1000 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1001 &#32;&#32;}
1002 
1004 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1005 &#32;&#32;nouppercase(ios_base&amp;&#32;__base)
1006 &#32;&#32;{
1007 &#32;&#32;&#32;&#32;__base.unsetf(ios_base::uppercase);
1008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1009 &#32;&#32;}
1010 
1012 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1013 &#32;&#32;unitbuf(ios_base&amp;&#32;__base)
1014 &#32;&#32;{
1015 &#32;&#32;&#32;&#32;&#32;__base.setf(ios_base::unitbuf);
1016 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1017 &#32;&#32;}
1018 
1020 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1021 &#32;&#32;nounitbuf(ios_base&amp;&#32;__base)
1022 &#32;&#32;{
1023 &#32;&#32;&#32;&#32;&#32;__base.unsetf(ios_base::unitbuf);
1024 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1025 &#32;&#32;}
1026 
1027 &#32;&#32;<emphasis role="comment">//&#32;[27.4.5.2]&#32;adjustfield&#32;manipulators</emphasis>
1029 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1030 &#32;&#32;internal(ios_base&amp;&#32;__base)
1031 &#32;&#32;{
1032 &#32;&#32;&#32;&#32;&#32;__base.setf(ios_base::internal,&#32;ios_base::adjustfield);
1033 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1034 &#32;&#32;}
1035 
1037 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1038 &#32;&#32;left(ios_base&amp;&#32;__base)
1039 &#32;&#32;{
1040 &#32;&#32;&#32;&#32;__base.setf(ios_base::left,&#32;ios_base::adjustfield);
1041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1042 &#32;&#32;}
1043 
1045 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1046 &#32;&#32;right(ios_base&amp;&#32;__base)
1047 &#32;&#32;{
1048 &#32;&#32;&#32;&#32;__base.setf(ios_base::right,&#32;ios_base::adjustfield);
1049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1050 &#32;&#32;}
1051 
1052 &#32;&#32;<emphasis role="comment">//&#32;[27.4.5.3]&#32;basefield&#32;manipulators</emphasis>
1054 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1055 &#32;&#32;dec(ios_base&amp;&#32;__base)
1056 &#32;&#32;{
1057 &#32;&#32;&#32;&#32;__base.setf(ios_base::dec,&#32;ios_base::basefield);
1058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1059 &#32;&#32;}
1060 
1062 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1063 &#32;&#32;hex(ios_base&amp;&#32;__base)
1064 &#32;&#32;{
1065 &#32;&#32;&#32;&#32;__base.setf(ios_base::hex,&#32;ios_base::basefield);
1066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1067 &#32;&#32;}
1068 
1070 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1071 &#32;&#32;oct(ios_base&amp;&#32;__base)
1072 &#32;&#32;{
1073 &#32;&#32;&#32;&#32;__base.setf(ios_base::oct,&#32;ios_base::basefield);
1074 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1075 &#32;&#32;}
1076 
1077 &#32;&#32;<emphasis role="comment">//&#32;[27.4.5.4]&#32;floatfield&#32;manipulators</emphasis>
1079 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1080 &#32;&#32;fixed(ios_base&amp;&#32;__base)
1081 &#32;&#32;{
1082 &#32;&#32;&#32;&#32;__base.setf(ios_base::fixed,&#32;ios_base::floatfield);
1083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1084 &#32;&#32;}
1085 
1087 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1088 &#32;&#32;scientific(ios_base&amp;&#32;__base)
1089 &#32;&#32;{
1090 &#32;&#32;&#32;&#32;__base.setf(ios_base::scientific,&#32;ios_base::floatfield);
1091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1092 &#32;&#32;}
1093 
1094 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1095 &#32;&#32;<emphasis role="comment">//&#32;New&#32;C++11&#32;floatfield&#32;manipulators</emphasis>
1096 
1099 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1100 &#32;&#32;hexfloat(ios_base&amp;&#32;__base)
1101 &#32;&#32;{
1102 &#32;&#32;&#32;&#32;__base.setf(ios_base::fixed&#32;|&#32;ios_base::scientific,&#32;ios_base::floatfield);
1103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1104 &#32;&#32;}
1105 
1107 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;ios_base&amp;
1108 &#32;&#32;defaultfloat(ios_base&amp;&#32;__base)
1109 &#32;&#32;{
1110 &#32;&#32;&#32;&#32;__base.unsetf(ios_base::floatfield);
1111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base;
1112 &#32;&#32;}
1113 <emphasis role="preprocessor">#endif</emphasis>
1114 
1115 _GLIBCXX_END_NAMESPACE_VERSION
1116 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1117 
1118 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_IOS_BASE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
